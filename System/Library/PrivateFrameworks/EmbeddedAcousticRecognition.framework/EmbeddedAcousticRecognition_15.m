BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>(long long *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  BOOL result;
  float v6;
  float *v7;
  char *v8;
  int v9;
  long long *v10;
  float v11;
  uint64_t v12;
  long long v13;
  __n128 *v14;
  long long *v15;
  float *v16;
  long long *v17;
  void *v18;
  long long v19;
  long long v20;
  uint64_t v21;
  int v22;
  char *v23;
  long long *v24;

  v2 = a2;
  v23 = (char *)a2;
  v24 = a1;
  v4 = (a2 - (uint64_t)a1) >> 3;
  result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 56);
      v23 = (char *)(a2 - 56);
      if (v6 < *(float *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v24, (uint64_t *)&v23);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (long long *)((char *)a1 + 56), (float *)(a2 - 56));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (long long *)((char *)a1 + 56), a1 + 7, (unsigned __int32 *)(a2 - 56));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (long long *)((char *)a1 + 56), a1 + 7, (long long *)((char *)a1 + 168), (unsigned __int32 *)(a2 - 56));
      return 1;
    default:
      v7 = (float *)(a1 + 7);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (long long *)((char *)a1 + 56), (float *)a1 + 28);
      v8 = (char *)a1 + 168;
      if ((long long *)((char *)a1 + 168) == (long long *)v2) {
        return 1;
      }
      v9 = 0;
      v10 = a1 + 13;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7) {
      break;
    }
LABEL_15:
    v7 = (float *)v8;
    v10 = (long long *)((char *)v10 + 56);
    v8 += 56;
    if (v8 == (char *)v2) {
      return 1;
    }
  }
  v21 = *(void *)(v8 + 4);
  v22 = *((_DWORD *)v8 + 3);
  v12 = *((void *)v8 + 2);
  v13 = *(_OWORD *)(v8 + 24);
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = 0;
  v19 = v13;
  v20 = *(_OWORD *)(v8 + 40);
  v14 = (__n128 *)v10;
  v15 = v24;
  while (1)
  {
    v16 = (float *)v14;
    v17 = (long long *)&v14[-6];
    *(__n128 *)((char *)v14 - 40) = v14[-6];
    std::vector<int>::__move_assign((uint64_t)&v14[-2].n128_i64[1], v14 - 5);
    *(_OWORD *)v16 = *(_OWORD *)(v16 - 14);
    if (v17 == v15) {
      break;
    }
    v14 = (__n128 *)(v16 - 14);
    if (v11 >= *(v16 - 38))
    {
      v15 = (long long *)(v16 - 24);
      break;
    }
  }
  *(float *)v15 = v11;
  *(void *)((char *)v15 + 4) = v21;
  *((_DWORD *)v15 + 3) = v22;
  v18 = (void *)*((void *)v16 - 10);
  if (v18)
  {
    *((void *)v15 + 3) = v18;
    operator delete(v18);
    *((void *)v16 - 9) = 0;
    *((void *)v16 - 8) = 0;
  }
  *((void *)v16 - 10) = v12;
  *(long long *)((char *)v15 + 24) = v19;
  *(_OWORD *)(v16 - 14) = v20;
  if (++v9 != 8)
  {
    v2 = (uint64_t)v23;
    goto LABEL_15;
  }
  return v8 + 56 == v23;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>(float *a1, long long *a2, long long *a3, uint64_t a4)
{
  v18 = a1;
  if (a1 != (float *)a2)
  {
    v6 = a2;
    v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 56;
    if ((char *)a2 - (char *)a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t)&a1[14 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v7, a4, v9, v12);
        v12 -= 56;
        --v11;
      }
      while (v11);
    }
    v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        if (*(float *)v13 < *v18)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v17, (uint64_t *)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v18, a4, v9, (uint64_t)v18);
          v13 = v17;
        }
        v13 = (long long *)((char *)v13 + 56);
        v17 = v13;
      }
      while (v13 != a3);
      v7 = v18;
      uint64_t v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 57)
    {
      unint64_t v14 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>((uint64_t)v7, (uint64_t)v6, a4, v14);
        v6 = (long long *)((char *)v6 - 56);
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

__n128 std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    long long v7 = *(_OWORD *)a1;
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    __n128 v19 = *(__n128 *)(a1 + 40);
    long long v20 = v7;
    uint64_t v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, a3, a4);
    uint64_t v12 = v11;
    v13 = (_OWORD *)(a2 - 56);
    unint64_t v14 = (void *)(v11 + 16);
    if (v11 == a2 - 56)
    {
      *(_OWORD *)uint64_t v11 = v20;
      v18 = *(void **)(v11 + 16);
      if (v18)
      {
        *(void *)(v12 + 24) = v18;
        operator delete(v18);
        *unint64_t v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
      }
      *(void *)(v12 + 16) = v8;
      *(void *)(v12 + 24) = v9;
      *(void *)(v12 + 32) = v10;
      __n128 result = v19;
      *(__n128 *)(v12 + 40) = v19;
    }
    else
    {
      *(_OWORD *)uint64_t v11 = *v13;
      std::vector<int>::__move_assign(v11 + 16, (__n128 *)(a2 - 40));
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 - 16);
      uint64_t v15 = v12 + 56;
      _OWORD *v13 = v20;
      v16 = *(void **)(a2 - 40);
      if (v16)
      {
        *(void *)(a2 - 32) = v16;
        operator delete(v16);
        *(void *)(a2 - 40) = 0;
        *(void *)(a2 - 32) = 0;
        *(void *)(a2 - 24) = 0;
      }
      *(void *)(a2 - 40) = v8;
      *(void *)(a2 - 32) = v9;
      *(void *)(a2 - 24) = v10;
      *(__n128 *)(a2 - 16) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, v15, a3, 0x6DB6DB6DB6DB6DB7 * ((v15 - a1) >> 3));
    }
  }
  return result;
}

void sub_1B233089C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::Hyp(uint64_t a1, int a2, int a3, int a4, char a5, uint64_t a6, float a7, float a8)
{
  *(_DWORD *)a1 = *(_DWORD *)a6;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 8), *(void *)(a6 + 8), *(void *)(a6 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 16) - *(void *)(a6 + 8)) >> 4));
  float v16 = *(float *)(a6 + 44);
  float v17 = *(float *)(a6 + 48);
  *(void *)(a1 + 56) = 0;
  v18 = (void **)(a1 + 56);
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = a4;
  *(float *)(a1 + 44) = v16 + a7;
  *(float *)(a1 + 48) = v17 + a8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::unordered_map<int,std::vector<int>>::unordered_map(a1 + 80, a6 + 80);
  std::unordered_map<int,int>::unordered_map(a1 + 120, a6 + 120);
  std::unordered_map<int,int>::unordered_map(a1 + 160, a6 + 160);
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 200) = a5;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 232) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 272) = 0;
  uint64_t v19 = *(void *)(a6 + 56);
  if ((unint64_t)(*(void *)(a6 + 64) - v19) <= 4)
  {
    v23 = *(_DWORD **)(a1 + 64);
  }
  else
  {
    long long v20 = (void *)(a1 + 72);
    v21 = *(_DWORD **)(a1 + 64);
    unint64_t v22 = 1;
    do
    {
      if ((unint64_t)v21 >= *v20)
      {
        v24 = *v18;
        uint64_t v25 = ((char *)v21 - (unsigned char *)*v18) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v27 = *v20 - (void)v24;
        if (v27 >> 1 > v26) {
          unint64_t v26 = v27 >> 1;
        }
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v26;
        }
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v28);
          v24 = *(_DWORD **)(a1 + 56);
          v21 = *(_DWORD **)(a1 + 64);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[4 * v25];
        *(_DWORD *)v30 = *(_DWORD *)(v19 + 4 * v22);
        v23 = v30 + 4;
        while (v21 != v24)
        {
          int v31 = *--v21;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        *(void *)(a1 + 56) = v30;
        *(void *)(a1 + 64) = v23;
        *(void *)(a1 + 72) = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        _DWORD *v21 = *(_DWORD *)(v19 + 4 * v22);
        v23 = v21 + 1;
      }
      *(void *)(a1 + 64) = v23;
      ++v22;
      uint64_t v19 = *(void *)(a6 + 56);
      v21 = v23;
    }
    while (v22 < (*(void *)(a6 + 64) - v19) >> 2);
  }
  unint64_t v32 = *(void *)(a1 + 72);
  if ((unint64_t)v23 >= v32)
  {
    v34 = *v18;
    uint64_t v35 = ((char *)v23 - (unsigned char *)*v18) >> 2;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v37 = v32 - (void)v34;
    if (v37 >> 1 > v36) {
      unint64_t v36 = v37 >> 1;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v38);
      v34 = *(_DWORD **)(a1 + 56);
      v23 = *(_DWORD **)(a1 + 64);
    }
    else
    {
      v39 = 0;
    }
    v40 = &v39[4 * v35];
    v41 = &v39[4 * v38];
    *(_DWORD *)v40 = a4;
    v33 = v40 + 4;
    while (v23 != v34)
    {
      int v42 = *--v23;
      *((_DWORD *)v40 - 1) = v42;
      v40 -= 4;
    }
    *(void *)(a1 + 56) = v40;
    *(void *)(a1 + 64) = v33;
    *(void *)(a1 + 72) = v41;
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    _DWORD *v23 = a4;
    v33 = v23 + 1;
  }
  *(void *)(a1 + 64) = v33;
  return a1;
}

void sub_1B2330BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16)
{
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a11);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(a13);
  uint64_t v19 = *v17;
  if (*v17)
  {
    *(void *)(v16 + 64) = v19;
    operator delete(v19);
  }
  a16 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(uint64_t a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 232);
  v4 = (void **)(a1 + 208);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 160);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 120);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(a1 + 80);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 8);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered StaticReadWrite final: ", 31);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" with #ActiveHyps: ", 19);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  int v10 = kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952));
  memset(&v72, 0, sizeof(v72));
  uint64_t v11 = *a3;
  if (a3[1] == *a3)
  {
    v14.__i_ = 0;
    std::vector<std::string>::pointer end = 0;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v79[0] = 0;
      kaldi::quasar::InputHammer::FilterTags(a1 + 8, v11 + v12, (uint64_t)__p, a2 + 64);
      v75 = 0;
      v76 = 0;
      v77 = 0;
      if (SHIBYTE(v79[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v74, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v74.__r_.__value_.__r.__words[2] = v79[0];
      }
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TokenizeInputString(a1, &v74, (uint64_t *)&v75);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v72, v72.__end_, (std::string *)v75, v76, 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (unsigned char *)v75) >> 3));
      v70[0] = &v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v70);
      if (SHIBYTE(v79[0]) < 0) {
        operator delete(__p[0]);
      }
      ++v13;
      uint64_t v11 = *a3;
      v12 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v13);
    v14.__i_ = v72.__begin_;
    std::vector<std::string>::pointer end = v72.__end_;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v14.__i_) >> 3) <= v10 && (a5 & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input stream did not grow. Previously processed: ", 49);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" provided: ", 11);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWords(a1, (uint64_t)a4);
    __p[0] = &v72;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return 2147500000.0;
  }
  *(void *)(a1 + 5872) = *(void *)(a1 + 5864);
  if (v10 >= 1)
  {
    v17.__i_ = &v14.__i_[v10];
    std::vector<std::string>::erase(&v72, v14, v17);
    v14.__i_ = v72.__begin_;
  }
  memset(&v73, 0, sizeof(v73));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v73, (long long *)v14.__i_, (long long *)v72.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v72.__end_ - (char *)v14.__i_) >> 3));
  v67 = (void **)(a1 + 5864);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Symbolize(a1, (uint64_t *)&v73, a1 + 5864, 0);
  __p[0] = &v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v72;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (a5)
  {
    int v18 = *(_DWORD *)(*(void *)(a1 + 136) + 816) - 1;
    uint64_t v19 = *(int **)(a1 + 5872);
    unint64_t v20 = *(void *)(a1 + 5880);
    if ((unint64_t)v19 >= v20)
    {
      unint64_t v22 = (int *)*v67;
      uint64_t v23 = ((char *)v19 - (unsigned char *)*v67) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v20 - (void)v22;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 5880, v26);
        uint64_t v19 = *(int **)(a1 + 5872);
        unint64_t v22 = *(int **)(a1 + 5864);
      }
      else
      {
        uint64_t v27 = 0;
      }
      unint64_t v28 = (int *)&v27[4 * v23];
      v29 = &v27[4 * v26];
      *unint64_t v28 = v18;
      v21 = v28 + 1;
      while (v19 != v22)
      {
        int v30 = *--v19;
        *--unint64_t v28 = v30;
      }
      *(void *)(a1 + 5864) = v28;
      *(void *)(a1 + 5872) = v21;
      *(void *)(a1 + 5880) = v29;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *uint64_t v19 = v18;
      v21 = v19 + 1;
    }
    *(void *)(a1 + 5872) = v21;
  }
  if (*(_DWORD *)(a1 + 5836)) {
    int v31 = 0;
  }
  else {
    int v31 = *(_DWORD *)(a2 + 296);
  }
  int v32 = *(_DWORD *)(a2 + 300);
  if (v32 + v31 <= (unint64_t)((uint64_t)(*(void *)(a1 + 5872) - *(void *)(a1 + 5864)) >> 2) || a5 != 0)
  {
    v66 = (void *)*MEMORY[0x1E4FBA408];
    uint64_t v64 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    v65 = *(void **)(MEMORY[0x1E4FBA408] + 64);
    v75 = 0;
    v76 = 0;
    v77 = 0;
    if (v32 + v31 >= 1)
    {
      v34 = 0;
      uint64_t v35 = 0;
      do
      {
        unint64_t v36 = *(_DWORD **)(a1 + 5864);
        if (v35 >= (unint64_t)((uint64_t)(*(void *)(a1 + 5872) - (void)v36) >> 2)) {
          goto LABEL_68;
        }
        if (v34 >= v77)
        {
          unint64_t v38 = (long long *)v75;
          uint64_t v39 = ((char *)v34 - (unsigned char *)v75) >> 2;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v41 = (char *)v77 - (unsigned char *)v75;
          if (((char *)v77 - (unsigned char *)v75) >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v77, v42);
            unint64_t v38 = (long long *)v75;
            v34 = v76;
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[4 * v39];
          *(_DWORD *)v44 = v36[v35];
          uint64_t v37 = (long long *)(v44 + 4);
          while (v34 != v38)
          {
            int v45 = *((_DWORD *)v34 - 1);
            v34 = (long long *)((char *)v34 - 4);
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          v75 = v44;
          v76 = v37;
          v77 = (long long *)&v43[4 * v42];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *(_DWORD *)v34 = v36[v35];
          uint64_t v37 = (long long *)((char *)v34 + 4);
        }
        v76 = v37;
        ++v35;
        v34 = v37;
      }
      while (v35 < *(int *)(a2 + 300) + (uint64_t)v31);
      unint64_t v36 = *v67;
LABEL_68:
      if (v35)
      {
        v46 = (char *)&v36[v35];
        v47 = *(unsigned char **)(a1 + 5872);
        uint64_t v48 = v47 - v46;
        if (v47 != v46) {
          memmove(v36, v46, v47 - v46);
        }
        *(void *)(a1 + 5872) = (char *)v36 + v48;
      }
    }
    int v49 = kaldi::g_kaldi_verbose_level;
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      uint64_t v50 = *(void *)(*(void *)(a1 + 136) + 552);
      if (!v50)
      {
LABEL_99:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"src_input_host_[0].NumRows(): ", 30);
        kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 4952));
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
LABEL_100:
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, (uint64_t)&v75, 0);
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v51 = (long long *)v75;
      v52 = v76;
      while (v51 != v52)
      {
        uint64_t v53 = *(int *)v51;
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" ", 1);
        (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, uint64_t))(*(void *)v50 + 88))(&v72, v50, v53 + 1);
        if (SHIBYTE(v72.__end_cap_.__value_) >= 0) {
          begin = &v72;
        }
        else {
          begin = v72.__begin_;
        }
        if (SHIBYTE(v72.__end_cap_.__value_) >= 0) {
          uint64_t value_high = HIBYTE(v72.__end_cap_.__value_);
        }
        else {
          uint64_t value_high = (uint64_t)v72.__end_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)begin, value_high);
        if (SHIBYTE(v72.__end_cap_.__value_) < 0) {
          operator delete(v72.__begin_);
        }
        v51 = (long long *)((char *)v51 + 4);
      }
      if (kaldi::g_kaldi_verbose_level > 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v72, 5);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"partial_input_addition:", 23);
        std::stringbuf::str();
        if ((v71 & 0x80u) == 0) {
          v58 = v70;
        }
        else {
          v58 = (void **)v70[0];
        }
        if ((v71 & 0x80u) == 0) {
          uint64_t v59 = v71;
        }
        else {
          uint64_t v59 = (uint64_t)v70[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
        if ((char)v71 < 0) {
          operator delete(v70[0]);
        }
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v72);
      }
      __p[0] = v66;
      *(void **)((char *)__p + *((void *)v66 - 3)) = v65;
      v79[0] = v64;
      v79[1] = MEMORY[0x1E4FBA470] + 16;
      if (v80 < 0) {
        operator delete((void *)v79[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B3EA8520](&v81);
      int v49 = kaldi::g_kaldi_verbose_level;
    }
    if (v49 < 0) {
      goto LABEL_100;
    }
    goto LABEL_99;
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWords(a1, (uint64_t)a4);
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    memset(&v72, 0, sizeof(v72));
    kaldi::JoinVectorToString<std::string>(a4, " ", (uint64_t)&v72);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"partial_output: ", 16);
      if (SHIBYTE(v72.__end_cap_.__value_) >= 0) {
        v61 = &v72;
      }
      else {
        v61 = v72.__begin_;
      }
      if (SHIBYTE(v72.__end_cap_.__value_) >= 0) {
        uint64_t v62 = HIBYTE(v72.__end_cap_.__value_);
      }
      else {
        uint64_t v62 = (uint64_t)v72.__end_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (SHIBYTE(v72.__end_cap_.__value_) < 0) {
      operator delete(v72.__begin_);
    }
  }
  return 2147500000.0;
}

void sub_1B2331698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TokenizeInputString(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 5244) == 1)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)v12);
    kaldi::quasar::BPE::Apply(a1 + 152, v12, a3);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    kaldi::JoinVectorToString<std::string>(a3, " ", (uint64_t)&v9);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"BPE input ", 10);
      if (v11 >= 0) {
        v6 = (void **)&v9;
      }
      else {
        v6 = v9;
      }
      if (v11 >= 0) {
        uint64_t v7 = HIBYTE(v11);
      }
      else {
        uint64_t v7 = v10;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v9);
    }
    v8[0] = (void **)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  }
  else
  {
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)a3);
  }
}

void sub_1B2331938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (*(char *)(v9 - 57) < 0) {
    operator delete(*(void **)(v9 - 80));
  }
  a9 = (void **)(v9 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWords(uint64_t a1, uint64_t a2)
{
  v4 = *(void **)(a1 + 5784);
  if (*(void **)(a1 + 5792) == v4) {
    v5 = (unsigned int *)(a1 + 5832);
  }
  else {
    v5 = (unsigned int *)(*v4 + 32);
  }
  uint64_t v6 = *v5;
  if ((int)v6 < 1) {
    return result;
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  do
  {
    if (*(_DWORD *)(a1 + 5248) == 1)
    {
      (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(a1 + 136) + 560) + 88))(&v51);
      if (kaldi::quasar::BPE::IsIntraWord(a1 + 152, (uint64_t **)&v51))
      {
        kaldi::quasar::BPE::StripSeparator(a1 + 152, &v51, &__p);
        uint64_t v8 = *(__n128 **)(a2 + 8);
        unint64_t v7 = *(void *)(a2 + 16);
        if ((unint64_t)v8 >= v7)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(void *)a2) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a2) >> 3);
          if (2 * v23 > v22) {
            unint64_t v22 = 2 * v23;
          }
          if (v23 >= 0x555555555555555) {
            unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v24 = v22;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v24) {
            uint64_t v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v24);
          }
          else {
            uint64_t v25 = 0;
          }
          uint64_t v35 = v25 + v21;
          __v.__first_ = v25;
          __v.__begin_ = v35;
          __v.__end_cap_.__value_ = &v25[v24];
          long long v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v35->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v35 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          uint64_t v37 = *(void *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          int v38 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(void *)(a2 + 8) = v37;
          if (v38 < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          __n128 result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
          v8[1].n128_u64[0] = __p.__r_.__value_.__r.__words[2];
          *uint64_t v8 = result;
          *(void *)(a2 + 8) = (char *)v8 + 24;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, " ");
        unint64_t v13 = *(void *)(a2 + 8);
        unint64_t v12 = *(void *)(a2 + 16);
        if (v13 >= v12)
        {
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(void *)a2) >> 3);
          unint64_t v27 = v26 + 1;
          if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a2) >> 3);
          if (2 * v28 > v27) {
            unint64_t v27 = 2 * v28;
          }
          if (v28 >= 0x555555555555555) {
            unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v29 = v27;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v29) {
            int v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v29);
          }
          else {
            int v30 = 0;
          }
          uint64_t v39 = v30 + v26;
          __v.__first_ = v30;
          __v.__begin_ = v39;
          __v.__end_cap_.__value_ = &v30[v29];
          long long v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v39->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v39 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          uint64_t v15 = *(std::string **)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          int v41 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(void *)(a2 + 8) = v15;
          if (v41 < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            uint64_t v15 = *(std::string **)(a2 + 8);
          }
        }
        else
        {
          long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v13 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v13 = v14;
          uint64_t v15 = (std::string *)(v13 + 24);
          *(void *)(a2 + 8) = v13 + 24;
        }
        if ((unint64_t)v15 >= *(void *)(a2 + 16))
        {
          uint64_t v42 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (long long *)&v51);
        }
        else
        {
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v15, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
          }
          else
          {
            __n128 result = *(__n128 *)&v51.__r_.__value_.__l.__data_;
            v15->__r_.__value_.__r.__words[2] = v51.__r_.__value_.__r.__words[2];
            *(__n128 *)&v15->__r_.__value_.__l.__data_ = result;
          }
          uint64_t v42 = (uint64_t)&v15[1];
          *(void *)(a2 + 8) = v15 + 1;
        }
        *(void *)(a2 + 8) = v42;
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_55;
      }
    }
    else
    {
      (*(void (**)(std::string *__return_ptr))(**(void **)(*(void *)(a1 + 136) + 560) + 88))(&v51);
      uint64_t v11 = *(__n128 **)(a2 + 8);
      unint64_t v10 = *(void *)(a2 + 16);
      if ((unint64_t)v11 < v10)
      {
        __n128 result = *(__n128 *)&v51.__r_.__value_.__l.__data_;
        v11[1].n128_u64[0] = v51.__r_.__value_.__r.__words[2];
        *uint64_t v11 = result;
        *(void *)(a2 + 8) = (char *)v11 + 24;
        goto LABEL_56;
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(void *)a2) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)a2) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v19) {
        unint64_t v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v19);
      }
      else {
        unint64_t v20 = 0;
      }
      int v31 = v20 + v16;
      __v.__first_ = v20;
      __v.__begin_ = v31;
      __v.__end_cap_.__value_ = &v20[v19];
      long long v32 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      v31->__r_.__value_.__r.__words[2] = v51.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
      memset(&v51, 0, sizeof(v51));
      __v.__end_ = v31 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v33 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      int v34 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
      *(void *)(a2 + 8) = v33;
      if (v34 < 0) {
LABEL_55:
      }
        operator delete(v51.__r_.__value_.__l.__data_);
    }
LABEL_56:
    LODWORD(v6) = *(_DWORD *)(*(void *)(a1 + 5808) + 8 * v6);
  }
  while ((int)v6 > 0);
  unint64_t v44 = *(void *)a2;
  uint64_t v43 = *(void *)(a2 + 8);
  if (*(void *)a2 != v43)
  {
    unint64_t v45 = v43 - 24;
    if (v45 > v44)
    {
      unint64_t v46 = v44 + 24;
      do
      {
        uint64_t v47 = *(void *)(v46 - 8);
        __n128 result = *(__n128 *)(v46 - 24);
        uint64_t v48 = *(void *)(v45 + 16);
        *(_OWORD *)(v46 - 24) = *(_OWORD *)v45;
        *(void *)(v46 - 8) = v48;
        *(__n128 *)unint64_t v45 = result;
        *(void *)(v45 + 16) = v47;
        v45 -= 24;
        BOOL v49 = v46 >= v45;
        v46 += 24;
      }
      while (!v49);
    }
  }
  return result;
}

void sub_1B2331E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::__split_buffer<std::wstring> *a22)
{
  *(void *)(v22 + 8) = v23;
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Symbolize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1] - *a2;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a1 + 136);
    uint64_t v12 = *(void *)(v11 + 552);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    int v14 = *(_DWORD *)(v11 + 820);
    uint64_t v46 = a4 + 16;
    uint64_t v47 = a3 + 16;
    do
    {
      int v15 = v13 + ~v10;
      if (!*(unsigned char *)(*(void *)(a1 + 136) + 1504)) {
        int v15 = v10;
      }
      int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 96))(v12, v4 + 24 * v15);
      if (v16 == -1)
      {
        if (a4)
        {
          unint64_t v18 = *(_DWORD **)(a4 + 8);
          unint64_t v17 = *(void *)(a4 + 16);
          if ((unint64_t)v18 >= v17)
          {
            unint64_t v20 = *(_DWORD **)a4;
            uint64_t v21 = ((uint64_t)v18 - *(void *)a4) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v46, v24);
              unint64_t v20 = *(_DWORD **)a4;
              unint64_t v18 = *(_DWORD **)(a4 + 8);
            }
            else
            {
              uint64_t v25 = 0;
            }
            unint64_t v26 = &v25[4 * v21];
            *(_DWORD *)unint64_t v26 = v10;
            unint64_t v19 = v26 + 4;
            while (v18 != v20)
            {
              int v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(void *)a4 = v26;
            *(void *)(a4 + 8) = v19;
            *(void *)(a4 + 16) = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            _DWORD *v18 = v10;
            unint64_t v19 = v18 + 1;
          }
          *(void *)(a4 + 8) = v19;
        }
        int v16 = v14;
        if (v14 == -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
          long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Couldn't find symbol ", 21);
          uint64_t v41 = *a2 + 24 * v10;
          int v42 = *(char *)(v41 + 23);
          if (v42 >= 0) {
            uint64_t v43 = *a2 + 24 * v10;
          }
          else {
            uint64_t v43 = *(void *)v41;
          }
          if (v42 >= 0) {
            uint64_t v44 = *(unsigned __int8 *)(v41 + 23);
          }
          else {
            uint64_t v44 = *(void *)(v41 + 8);
          }
          unint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v43, v44);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, " or <unk> UNK symbol");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v48);
        }
      }
      int v28 = v16 - 1;
      int v30 = *(_DWORD **)(a3 + 8);
      unint64_t v29 = *(void *)(a3 + 16);
      if ((unint64_t)v30 >= v29)
      {
        long long v32 = *(_DWORD **)a3;
        uint64_t v33 = ((uint64_t)v30 - *(void *)a3) >> 2;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v35 = v29 - (void)v32;
        if (v35 >> 1 > v34) {
          unint64_t v34 = v35 >> 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47, v36);
          long long v32 = *(_DWORD **)a3;
          int v30 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          uint64_t v37 = 0;
        }
        int v38 = &v37[4 * v33];
        *(_DWORD *)int v38 = v28;
        int v31 = v38 + 4;
        while (v30 != v32)
        {
          int v39 = *--v30;
          *((_DWORD *)v38 - 1) = v39;
          v38 -= 4;
        }
        *(void *)a3 = v38;
        *(void *)(a3 + 8) = v31;
        *(void *)(a3 + 16) = &v37[4 * v36];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        _DWORD *v30 = v28;
        int v31 = v30 + 1;
      }
      *(void *)(a3 + 8) = v31;
      ++v10;
      uint64_t v4 = *a2;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
    }
    while (v10 != v13);
  }
}

void sub_1B2332188(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v30, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"entered Read to process #tokens: ", 33);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v30);
  }
  uint64_t v8 = (uint64_t *)(a1 + 4952);
  uint64_t v9 = *(void *)(a1 + 4952);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 4960) - v9) >> 3) <= a4)
  {
    std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), a4 + 1);
    uint64_t v9 = *v8;
  }
  long long v31 = 0u;
  long long v32 = 0u;
  int32x2_t v30 = (int32x2_t)&unk_1F0A51768;
  char v33 = 0;
  int v10 = kaldi::MatrixBase<float>::NumRows(v9 + 40 * a4);
  kaldi::Matrix<float>::Resize((int32x2_t *)(*v8 + 40 * a4), v10 + ((*(void *)(a3 + 8) - *(void *)a3) >> 2), 1, 2, 0);
  uint64_t v11 = *(int **)a3;
  uint64_t v12 = *v8;
  uint64_t v13 = *(void *)(a3 + 8) - *(void *)a3;
  if (v13)
  {
    uint64_t v14 = v13 >> 2;
    int v15 = (uint64_t *)(v12 + 40 * a4);
    int v16 = *((_DWORD *)v15 + 2);
    uint64_t v17 = *v15;
    uint64_t v18 = *((int *)v15 + 4);
    uint64_t v19 = v10;
    if ((unint64_t)(v13 >> 2) <= 1) {
      uint64_t v14 = 1;
    }
    unint64_t v20 = (float *)(v17 + 4 * (int)v18 * (uint64_t)v10);
    uint64_t v21 = 4 * v18;
    do
    {
      int v22 = *v11++;
      *unint64_t v20 = (float)v22;
      unint64_t v20 = (float *)((char *)v20 + v21);
      ++v19;
      --v14;
    }
    while (v14);
  }
  else
  {
    int v16 = *(_DWORD *)(v12 + 40 * a4 + 8);
  }
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, v12 + 40 * a4, v10, (unint64_t)v13 >> 2, 0, v16);
  kaldi::CuMatrix<float>::operator=(&v30, (int *)&__p);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  uint64_t v23 = *(void *)(a1 + 136);
  if (v10) {
    kaldi::quasar::Encdec::EncFeedforward();
  }
  int v24 = *(_DWORD *)(a2 + 288);
  int v25 = *(_DWORD *)(a2 + 292);
  std::string __p = 0;
  int v28 = 0;
  uint64_t v29 = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)v26);
  kaldi::quasar::Encdec::ConstrainSoftmax(v23, a2 + 264, v24, v25, (int **)a3, (int **)&__p, v26);
  std::__tree<int>::destroy((uint64_t)v26, (void *)v26[1]);
  if (__p)
  {
    int v28 = __p;
    operator delete(__p);
  }
  kaldi::quasar::Encdec::ResetHistoryState(*(kaldi::quasar::Encdec **)(a1 + 136));
  if (*(_DWORD *)(a2 + 300)) {
    kaldi::quasar::Encdec::EncFeedforward();
  }
  kaldi::quasar::Encdec::StartFeedforward(*(void *)(a1 + 136), (uint64_t)&v30, a4, 0);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2);
}

void sub_1B2332458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PruneCurrentHyps(uint64_t a1, int a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(void *)(a1 + 5792);
  uint64_t v5 = *(void *)(a1 + 5784);
  unint64_t v6 = (v4 - v5) >> 3;
  if (v6 > a2)
  {
    unint64_t v7 = a2;
    do
    {
      uint64_t v8 = *(void *)(v5 + 8 * v7);
      if (v8)
      {
        uint64_t v9 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::~Hyp(v8);
        MEMORY[0x1B3EA8670](v9, 0x10B0C406F3D429DLL);
        uint64_t v4 = *(void *)(a1 + 5792);
        uint64_t v5 = *(void *)(a1 + 5784);
      }
      ++v7;
    }
    while (v7 < (v4 - v5) >> 3);
    unint64_t v6 = (v4 - v5) >> 3;
  }
  if (v6 > v3)
  {
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a1 + 5784, v3);
  }
}

void std::__variant_detail::__visitation::__variant::__value_visitor<void kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::GetRawNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}>::operator()[abi:ne180100]<std::__variant_detail::__alt<0ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>> &>()
{
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>()
{
}

void sub_1B2333288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a29);
  std::__tree<int>::destroy((uint64_t)&STACK[0x310], (void *)STACK[0x318]);
  a29 = (uint64_t)&STACK[0x328];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v29 - 240));
  long long v31 = *(void **)(v29 - 216);
  if (v31)
  {
    *(void *)(v29 - 208) = v31;
    operator delete(v31);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v29 - 160));
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::JoinBPEUnitsInNbestList(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 5248) == 1)
  {
    v2 = *(uint64_t **)a2;
    uint64_t v61 = *(void *)(a2 + 8);
    if (*(void *)a2 != v61)
    {
      uint64_t v3 = a1 + 152;
      std::string::size_type v64 = *MEMORY[0x1E4FBA408];
      std::string::size_type v62 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      std::string::size_type v63 = *(void *)(MEMORY[0x1E4FBA408] + 64);
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v107);
        memset(&v94, 0, sizeof(v94));
        long long v95 = 0u;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long __dst = 0u;
        long long v100 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long __p = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        memset(v106, 0, sizeof(v106));
        v92 = 0;
        uint64_t v91 = 0;
        unint64_t v93 = 0;
        uint64_t v65 = (uint64_t)v2;
        uint64_t v5 = *v2;
        uint64_t v4 = v2[1];
        if (v5 != v4)
        {
          int v6 = 0;
          do
          {
            *(float32x2_t *)&long long v98 = vadd_f32(*(float32x2_t *)(v5 + 80), *(float32x2_t *)&v98);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)((char *)&v98 + 8), __dst, *(char **)(v5 + 88), *(char **)(v5 + 96), (uint64_t)(*(void *)(v5 + 96) - *(void *)(v5 + 88)) >> 2);
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v104 + 8, v105, *(char **)(v5 + 184), *(char **)(v5 + 192), (uint64_t)(*(void *)(v5 + 192) - *(void *)(v5 + 184)) >> 2);
            int v7 = *(char *)(v5 + 23);
            if (v7 >= 0) {
              uint64_t v8 = v5;
            }
            else {
              uint64_t v8 = *(void *)v5;
            }
            if (v7 >= 0) {
              uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
            }
            else {
              uint64_t v9 = *(void *)(v5 + 8);
            }
            int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, v8, v9);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
            uint64_t v11 = (long long *)*((void *)&v95 + 1);
            if (*((void *)&v95 + 1) >= (unint64_t)v96)
            {
              uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v95, (long long *)v5);
            }
            else
            {
              if (*(char *)(v5 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)&v95 + 1), *(const std::string::value_type **)v5, *(void *)(v5 + 8));
              }
              else
              {
                long long v12 = *(_OWORD *)v5;
                *(void *)(*((void *)&v95 + 1) + 16) = *(void *)(v5 + 16);
                *uint64_t v11 = v12;
              }
              uint64_t v13 = (uint64_t)v11 + 24;
            }
            *((void *)&v95 + 1) = v13;
            uint64_t v14 = (char *)*((void *)&__p + 1);
            if (*((void *)&__p + 1) >= (unint64_t)v104)
            {
              int v16 = (char *)__p;
              uint64_t v17 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
              unint64_t v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v19 = v104 - __p;
              if ((uint64_t)(v104 - __p) >> 1 > v18) {
                unint64_t v18 = v19 >> 1;
              }
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v104, v20);
                uint64_t v14 = (char *)*((void *)&__p + 1);
                int v16 = (char *)__p;
              }
              else
              {
                uint64_t v21 = 0;
              }
              int v22 = &v21[4 * v17];
              *(_DWORD *)int v22 = v6;
              int v15 = v22 + 4;
              while (v14 != v16)
              {
                int v23 = *((_DWORD *)v14 - 1);
                v14 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *(void *)&long long __p = v22;
              *((void *)&__p + 1) = v15;
              *(void *)&long long v104 = &v21[4 * v20];
              if (v16) {
                operator delete(v16);
              }
            }
            else
            {
              **((_DWORD **)&__p + 1) = v6;
              int v15 = v14 + 4;
            }
            *((void *)&__p + 1) = v15;
            if (kaldi::quasar::BPE::IsIntraWord(v3, (uint64_t **)v5))
            {
              kaldi::quasar::BPE::StripSeparator(v3, (const std::string *)v5, &v82);
              if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v24 = &v82;
              }
              else {
                int v24 = (std::string *)v82.__r_.__value_.__r.__words[0];
              }
              if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v82.__r_.__value_.__l.__size_;
              }
              std::string::append(&v94, (const std::string::value_type *)v24, size);
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v82.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              int v26 = *(char *)(v5 + 23);
              if (v26 >= 0) {
                int v27 = (const std::string::value_type *)v5;
              }
              else {
                int v27 = *(const std::string::value_type **)v5;
              }
              if (v26 >= 0) {
                std::string::size_type v28 = *(unsigned __int8 *)(v5 + 23);
              }
              else {
                std::string::size_type v28 = *(void *)(v5 + 8);
              }
              std::string::append(&v94, v27, v28);
              uint64_t v29 = v92;
              if ((unint64_t)v92 >= v93)
              {
                int32x2_t v30 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v91, (const kaldi::quasar::TranslationUtil::PathElement *)&v94);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement(v92, (const kaldi::quasar::TranslationUtil::PathElement *)&v94);
                int32x2_t v30 = v29 + 10;
              }
              v92 = v30;
              memset(&v82, 0, sizeof(v82));
              long long v84 = 0u;
              long long v85 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v88 = 0u;
              long long v89 = 0u;
              memset(v90, 0, 108);
              kaldi::quasar::TranslationUtil::PathElement::operator=((uint64_t)&v94, (long long *)&v82);
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v82);
            }
            ++v6;
            v5 += 240;
          }
          while (v5 != v4);
          std::string::size_type v31 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v31 = v94.__r_.__value_.__l.__size_;
          }
          if (v31)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v82);
            uint64_t v32 = *(void *)v65;
            uint64_t v33 = *(void *)(v65 + 8);
            if (*(void *)v65 != v33)
            {
              do
              {
                int v34 = *(char *)(v32 + 23);
                if (v34 >= 0) {
                  uint64_t v35 = v32;
                }
                else {
                  uint64_t v35 = *(void *)v32;
                }
                if (v34 >= 0) {
                  uint64_t v36 = *(unsigned __int8 *)(v32 + 23);
                }
                else {
                  uint64_t v36 = *(void *)(v32 + 8);
                }
                uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82.__r_.__value_.__r.__words[2], v35, v36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
                v32 += 240;
              }
              while (v32 != v33);
            }
            if (*(unsigned char *)(a1 + 132))
            {
              long long v68 = 0uLL;
              uint64_t v69 = 0;
              long long v70 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              memset(v81, 0, sizeof(v81));
              int v38 = v92;
              if ((unint64_t)v92 >= v93)
              {
                int v39 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement>(&v91, &v68);
              }
              else
              {
                std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>((uint64_t)&v93, (uint64_t)v92, &v68);
                int v39 = v38 + 10;
              }
              v92 = v39;
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v68);
            }
            else
            {
              long long v40 = (char *)*((void *)&__p + 1);
              if (*((void *)&__p + 1) >= (unint64_t)v104)
              {
                int v42 = (char *)__p;
                uint64_t v43 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
                unint64_t v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v45 = v104 - __p;
                if ((uint64_t)(v104 - __p) >> 1 > v44) {
                  unint64_t v44 = v45 >> 1;
                }
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v46 = v44;
                }
                if (v46)
                {
                  uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v104, v46);
                  long long v40 = (char *)*((void *)&__p + 1);
                  int v42 = (char *)__p;
                }
                else
                {
                  uint64_t v47 = 0;
                }
                uint64_t v48 = &v47[4 * v43];
                *(_DWORD *)uint64_t v48 = v6;
                uint64_t v41 = v48 + 4;
                while (v40 != v42)
                {
                  int v49 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v48 - 1) = v49;
                  v48 -= 4;
                }
                *(void *)&long long __p = v48;
                *((void *)&__p + 1) = v41;
                *(void *)&long long v104 = &v47[4 * v46];
                if (v42) {
                  operator delete(v42);
                }
              }
              else
              {
                **((_DWORD **)&__p + 1) = v6;
                uint64_t v41 = v40 + 4;
              }
              *((void *)&__p + 1) = v41;
              uint64_t v50 = v92;
              if ((unint64_t)v92 >= v93)
              {
                std::string v51 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v91, (const kaldi::quasar::TranslationUtil::PathElement *)&v94);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement(v92, (const kaldi::quasar::TranslationUtil::PathElement *)&v94);
                std::string v51 = v50 + 10;
              }
              v92 = v51;
            }
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Error converting BPE to word list ", 34);
              if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v53 = &v94;
              }
              else {
                uint64_t v53 = (std::string *)v94.__r_.__value_.__r.__words[0];
              }
              if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v54 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v54 = v94.__r_.__value_.__l.__size_;
              }
              v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"( ", 2);
              std::stringbuf::str();
              if ((v67 & 0x80u) == 0) {
                v57 = v66;
              }
              else {
                v57 = (void **)v66[0];
              }
              if ((v67 & 0x80u) == 0) {
                uint64_t v58 = v67;
              }
              else {
                uint64_t v58 = (uint64_t)v66[1];
              }
              uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)")", 1);
              if ((char)v67 < 0) {
                operator delete(v66[0]);
              }
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
            }
            v82.__r_.__value_.__r.__words[0] = v64;
            *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + *(void *)(v64 - 24)) = v63;
            v82.__r_.__value_.__r.__words[2] = v62;
            uint64_t v83 = MEMORY[0x1E4FBA470] + 16;
            if (SHIBYTE(v88) < 0) {
              operator delete(*((void **)&v87 + 1));
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1B3EA8520](v90);
          }
        }
        if ((uint64_t *)v65 != &v91) {
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v65, v91, (uint64_t)v92, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v92 - v91) >> 4));
        }
        *(unsigned char *)(v65 + 88) = 1;
        v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
        std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v94);
        v107[0] = v64;
        *(void *)((char *)v107 + *(void *)(v64 - 24)) = v63;
        v108[0] = v62;
        v108[1] = MEMORY[0x1E4FBA470] + 16;
        if (v109 < 0) {
          operator delete((void *)v108[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1B3EA8520](&v110);
        v2 = (uint64_t *)(v65 + 272);
      }
      while (v65 + 272 != v61);
    }
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Not applying BPE to target", 26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v107);
  }
}

void sub_1B2333D10(_Unwind_Exception *a1)
{
}

uint64_t kaldi::quasar::TranslationUtil::PathElement::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  uint64_t v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 79) = 0;
  *((unsigned char *)a2 + 56) = 0;
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  std::vector<int>::__move_assign(a1 + 88, (__n128 *)((char *)a2 + 88));
  std::vector<int>::__move_assign(a1 + 112, (__n128 *)a2 + 7);
  std::vector<int>::__move_assign(a1 + 136, (__n128 *)((char *)a2 + 136));
  std::vector<int>::__move_assign(a1 + 160, (__n128 *)a2 + 10);
  std::vector<int>::__move_assign(a1 + 184, (__n128 *)((char *)a2 + 184));
  std::vector<int>::__move_assign(a1 + 208, (__n128 *)a2 + 13);
  *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 58);
  return a1;
}

void std::__variant_detail::__visitation::__variant::__value_visitor<void kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::GetRawNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}>::operator()[abi:ne180100]<std::__variant_detail::__alt<1ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>()
{
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::JoinBPEUnitsInNbestList(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 5248) == 1)
  {
    v2 = *(uint64_t **)a2;
    uint64_t v61 = *(void *)(a2 + 8);
    if (*(void *)a2 != v61)
    {
      uint64_t v3 = a1 + 152;
      std::string::size_type v64 = *MEMORY[0x1E4FBA408];
      std::string::size_type v62 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      std::string::size_type v63 = *(void *)(MEMORY[0x1E4FBA408] + 64);
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v107);
        memset(&v94, 0, sizeof(v94));
        long long v95 = 0u;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long __dst = 0u;
        long long v100 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long __p = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        memset(v106, 0, sizeof(v106));
        v92 = 0;
        uint64_t v91 = 0;
        unint64_t v93 = 0;
        uint64_t v65 = (uint64_t)v2;
        uint64_t v5 = *v2;
        uint64_t v4 = v2[1];
        if (v5 != v4)
        {
          int v6 = 0;
          do
          {
            *(float32x2_t *)&long long v98 = vadd_f32(*(float32x2_t *)(v5 + 80), *(float32x2_t *)&v98);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)((char *)&v98 + 8), __dst, *(char **)(v5 + 88), *(char **)(v5 + 96), (uint64_t)(*(void *)(v5 + 96) - *(void *)(v5 + 88)) >> 2);
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v104 + 8, v105, *(char **)(v5 + 184), *(char **)(v5 + 192), (uint64_t)(*(void *)(v5 + 192) - *(void *)(v5 + 184)) >> 2);
            int v7 = *(char *)(v5 + 23);
            if (v7 >= 0) {
              uint64_t v8 = v5;
            }
            else {
              uint64_t v8 = *(void *)v5;
            }
            if (v7 >= 0) {
              uint64_t v9 = *(unsigned __int8 *)(v5 + 23);
            }
            else {
              uint64_t v9 = *(void *)(v5 + 8);
            }
            int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, v8, v9);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
            uint64_t v11 = (long long *)*((void *)&v95 + 1);
            if (*((void *)&v95 + 1) >= (unint64_t)v96)
            {
              uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v95, (long long *)v5);
            }
            else
            {
              if (*(char *)(v5 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)&v95 + 1), *(const std::string::value_type **)v5, *(void *)(v5 + 8));
              }
              else
              {
                long long v12 = *(_OWORD *)v5;
                *(void *)(*((void *)&v95 + 1) + 16) = *(void *)(v5 + 16);
                *uint64_t v11 = v12;
              }
              uint64_t v13 = (uint64_t)v11 + 24;
            }
            *((void *)&v95 + 1) = v13;
            uint64_t v14 = (char *)*((void *)&__p + 1);
            if (*((void *)&__p + 1) >= (unint64_t)v104)
            {
              int v16 = (char *)__p;
              uint64_t v17 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
              unint64_t v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v19 = v104 - __p;
              if ((uint64_t)(v104 - __p) >> 1 > v18) {
                unint64_t v18 = v19 >> 1;
              }
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v18;
              }
              if (v20)
              {
                uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v104, v20);
                uint64_t v14 = (char *)*((void *)&__p + 1);
                int v16 = (char *)__p;
              }
              else
              {
                uint64_t v21 = 0;
              }
              int v22 = &v21[4 * v17];
              *(_DWORD *)int v22 = v6;
              int v15 = v22 + 4;
              while (v14 != v16)
              {
                int v23 = *((_DWORD *)v14 - 1);
                v14 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *(void *)&long long __p = v22;
              *((void *)&__p + 1) = v15;
              *(void *)&long long v104 = &v21[4 * v20];
              if (v16) {
                operator delete(v16);
              }
            }
            else
            {
              **((_DWORD **)&__p + 1) = v6;
              int v15 = v14 + 4;
            }
            *((void *)&__p + 1) = v15;
            if (kaldi::quasar::BPE::IsIntraWord(v3, (uint64_t **)v5))
            {
              kaldi::quasar::BPE::StripSeparator(v3, (const std::string *)v5, &v82);
              if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v24 = &v82;
              }
              else {
                int v24 = (std::string *)v82.__r_.__value_.__r.__words[0];
              }
              if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v82.__r_.__value_.__l.__size_;
              }
              std::string::append(&v94, (const std::string::value_type *)v24, size);
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v82.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              int v26 = *(char *)(v5 + 23);
              if (v26 >= 0) {
                int v27 = (const std::string::value_type *)v5;
              }
              else {
                int v27 = *(const std::string::value_type **)v5;
              }
              if (v26 >= 0) {
                std::string::size_type v28 = *(unsigned __int8 *)(v5 + 23);
              }
              else {
                std::string::size_type v28 = *(void *)(v5 + 8);
              }
              std::string::append(&v94, v27, v28);
              uint64_t v29 = v92;
              if ((unint64_t)v92 >= v93)
              {
                int32x2_t v30 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v91, (const kaldi::quasar::TranslationUtil::PathElement *)&v94);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement(v92, (const kaldi::quasar::TranslationUtil::PathElement *)&v94);
                int32x2_t v30 = v29 + 10;
              }
              v92 = v30;
              memset(&v82, 0, sizeof(v82));
              long long v84 = 0u;
              long long v85 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v88 = 0u;
              long long v89 = 0u;
              memset(v90, 0, 108);
              kaldi::quasar::TranslationUtil::PathElement::operator=((uint64_t)&v94, (long long *)&v82);
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v82);
            }
            ++v6;
            v5 += 240;
          }
          while (v5 != v4);
          std::string::size_type v31 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v31 = v94.__r_.__value_.__l.__size_;
          }
          if (v31)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v82);
            uint64_t v32 = *(void *)v65;
            uint64_t v33 = *(void *)(v65 + 8);
            if (*(void *)v65 != v33)
            {
              do
              {
                int v34 = *(char *)(v32 + 23);
                if (v34 >= 0) {
                  uint64_t v35 = v32;
                }
                else {
                  uint64_t v35 = *(void *)v32;
                }
                if (v34 >= 0) {
                  uint64_t v36 = *(unsigned __int8 *)(v32 + 23);
                }
                else {
                  uint64_t v36 = *(void *)(v32 + 8);
                }
                uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82.__r_.__value_.__r.__words[2], v35, v36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
                v32 += 240;
              }
              while (v32 != v33);
            }
            if (*(unsigned char *)(a1 + 132))
            {
              long long v68 = 0uLL;
              uint64_t v69 = 0;
              long long v70 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              memset(v81, 0, sizeof(v81));
              int v38 = v92;
              if ((unint64_t)v92 >= v93)
              {
                int v39 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement>(&v91, &v68);
              }
              else
              {
                std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>((uint64_t)&v93, (uint64_t)v92, &v68);
                int v39 = v38 + 10;
              }
              v92 = v39;
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v68);
            }
            else
            {
              long long v40 = (char *)*((void *)&__p + 1);
              if (*((void *)&__p + 1) >= (unint64_t)v104)
              {
                int v42 = (char *)__p;
                uint64_t v43 = (uint64_t)(*((void *)&__p + 1) - __p) >> 2;
                unint64_t v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v45 = v104 - __p;
                if ((uint64_t)(v104 - __p) >> 1 > v44) {
                  unint64_t v44 = v45 >> 1;
                }
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v46 = v44;
                }
                if (v46)
                {
                  uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v104, v46);
                  long long v40 = (char *)*((void *)&__p + 1);
                  int v42 = (char *)__p;
                }
                else
                {
                  uint64_t v47 = 0;
                }
                uint64_t v48 = &v47[4 * v43];
                *(_DWORD *)uint64_t v48 = v6;
                uint64_t v41 = v48 + 4;
                while (v40 != v42)
                {
                  int v49 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v48 - 1) = v49;
                  v48 -= 4;
                }
                *(void *)&long long __p = v48;
                *((void *)&__p + 1) = v41;
                *(void *)&long long v104 = &v47[4 * v46];
                if (v42) {
                  operator delete(v42);
                }
              }
              else
              {
                **((_DWORD **)&__p + 1) = v6;
                uint64_t v41 = v40 + 4;
              }
              *((void *)&__p + 1) = v41;
              uint64_t v50 = v92;
              if ((unint64_t)v92 >= v93)
              {
                std::string v51 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v91, (const kaldi::quasar::TranslationUtil::PathElement *)&v94);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement(v92, (const kaldi::quasar::TranslationUtil::PathElement *)&v94);
                std::string v51 = v50 + 10;
              }
              v92 = v51;
            }
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Error converting BPE to word list ", 34);
              if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v53 = &v94;
              }
              else {
                uint64_t v53 = (std::string *)v94.__r_.__value_.__r.__words[0];
              }
              if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v54 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v54 = v94.__r_.__value_.__l.__size_;
              }
              v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"( ", 2);
              std::stringbuf::str();
              if ((v67 & 0x80u) == 0) {
                v57 = v66;
              }
              else {
                v57 = (void **)v66[0];
              }
              if ((v67 & 0x80u) == 0) {
                uint64_t v58 = v67;
              }
              else {
                uint64_t v58 = (uint64_t)v66[1];
              }
              uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)")", 1);
              if ((char)v67 < 0) {
                operator delete(v66[0]);
              }
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v68);
            }
            v82.__r_.__value_.__r.__words[0] = v64;
            *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + *(void *)(v64 - 24)) = v63;
            v82.__r_.__value_.__r.__words[2] = v62;
            uint64_t v83 = MEMORY[0x1E4FBA470] + 16;
            if (SHIBYTE(v88) < 0) {
              operator delete(*((void **)&v87 + 1));
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1B3EA8520](v90);
          }
        }
        if ((uint64_t *)v65 != &v91) {
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v65, v91, (uint64_t)v92, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v92 - v91) >> 4));
        }
        *(unsigned char *)(v65 + 88) = 1;
        v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
        std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v94);
        v107[0] = v64;
        *(void *)((char *)v107 + *(void *)(v64 - 24)) = v63;
        v108[0] = v62;
        v108[1] = MEMORY[0x1E4FBA470] + 16;
        if (v109 < 0) {
          operator delete((void *)v108[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1B3EA8520](&v110);
        v2 = (uint64_t *)(v65 + 272);
      }
      while (v65 + 272 != v61);
    }
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v107);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Not applying BPE to target", 26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v107);
  }
}

void sub_1B233487C(_Unwind_Exception *a1)
{
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(std::vector<int> const&,kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(void ***a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (uint64_t)(*a1)[1], (*a1)[2]);
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(std::vector<int> const&,kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(void ***a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (uint64_t)(*a1)[1], (*a1)[2]);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v42, "Nbestlist cannot be null");
    goto LABEL_91;
  }
  if (!*(unsigned char *)(a3 + 307) || (int v6 = (unsigned char *)(a1 + 4896), !*(unsigned char *)(a1 + 5237)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v42, "Decoder not configured for SentencePiece ID decoding.");
    goto LABEL_91;
  }
  uint64_t v9 = *(void *)(a1 + 136);
  if (v9 && !*(unsigned char *)(v9 + 3925))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v42, "Model not configured for SentencePiece ID decoding.");
LABEL_91:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  int v10 = *(_DWORD *)(a1 + 5224);
  int v11 = *(_DWORD *)(a1 + 5200);
  int v12 = *(_DWORD *)(a1 + 5188);
  int v13 = *(_DWORD *)(a1 + 5192);
  int v39 = *(_DWORD *)(a1 + 5196);
  *(_DWORD *)(a1 + 5200) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3) {
    *(_DWORD *)(a1 + 5188) = *(_DWORD *)a3;
  }
  float v14 = *(float *)(a3 + 4);
  if (v14 != 0.0) {
    *(float *)(a1 + 5192) = v14;
  }
  int v15 = *(_DWORD *)(a3 + 8);
  if (v15) {
    *(_DWORD *)(a1 + 5196) = v15;
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ValidateDecodingParameters(*(float *)(a3 + 176), a1, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 172));
  uint64_t v17 = *a4;
  for (uint64_t i = a4[1];
        i != v17;
  a4[1] = v17;
  if (*(unsigned char *)(a1 + 113)) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = *(void *)(a1 + 32) != 0;
  }
  if (v18 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Input Hammer not supported for sentencepiece id decoding.", 57);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
  }
  uint64_t v19 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  kaldi::quasar::MultiLangDecorator::Apply(a1 + 120, (uint64_t)a2, a3 + 64, a3 + 88, v19, (uint64_t)&v46);
  if (*(unsigned char *)(a3 + 232)) {
    int v20 = kaldi::quasar::MultiLangDecorator::NumTagTokens((kaldi::quasar::MultiLangDecorator *)(a1 + 120));
  }
  else {
    int v20 = 0;
  }
  *(_DWORD *)(a1 + 5204) = v20;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(a3);
    if (v45 >= 0) {
      uint64_t v21 = (void **)&v43;
    }
    else {
      uint64_t v21 = v43;
    }
    if (v45 >= 0) {
      uint64_t v22 = HIBYTE(v45);
    }
    else {
      uint64_t v22 = (uint64_t)v44;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)v21, v22);
    if (SHIBYTE(v45) < 0) {
      operator delete(v43);
    }
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v42);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, 1);
      kaldi::JoinVectorToString<int>(a2, " ");
      if (v45 >= 0) {
        int v23 = (void **)&v43;
      }
      else {
        int v23 = v43;
      }
      if (v45 >= 0) {
        uint64_t v24 = HIBYTE(v45);
      }
      else {
        uint64_t v24 = (uint64_t)v44;
      }
      int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)v23, v24);
      int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" -> ", 4);
      kaldi::JoinVectorToString<int>(&v46, " ");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45) < 0) {
        operator delete(v43);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
    }
  }
  uint64_t v29 = v47;
  if (v47 == v46)
  {
    float v32 = 3.4028e38;
    if (!v47) {
      return v32;
    }
    goto LABEL_86;
  }
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(&v43, *(void **)(a3 + 240), *(void **)(a3 + 248), (uint64_t)(*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 4);
  if (v6[344]) {
    std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::push_back[abi:ne180100]((uint64_t *)&v43, (long long *)(a1 + 392));
  }
  if (v44 != v43 && *(_DWORD *)(a1 + 5220) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Phrasebook (kaldi level) not supported for sentencepiece id decoding.", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  uint64_t v30 = *(void *)(a1 + 136);
  if (v30 && *(unsigned char *)(v30 + 3922) && *(unsigned char *)(v30 + 3923)) {
    v6[808] = 1;
  }
  int v31 = *(_DWORD *)(a1 + 5220);
  if (a4[1] == *a4)
  {
    if (v31 == 3) {
      goto LABEL_68;
    }
  }
  else if (v31 != 2)
  {
    goto LABEL_68;
  }
  if (*v6) {
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (uint64_t)&v46, a3);
  }
LABEL_68:
  memset(&v42, 0, sizeof(v42));
  uint64_t v33 = v46;
  for (j = v47; v33 != j; ++v33)
  {
    std::to_string(&v40, *v33);
    std::string::push_back(&v40, 32);
    std::string __p = v40;
    memset(&v40, 0, sizeof(v40));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v35 = &__p;
    }
    else {
      uint64_t v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v42, (const std::string::value_type *)v35, v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  float v37 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, &v42, a3, (uint64_t)a4);
  *(_DWORD *)(a1 + 5224) = v10;
  *(_DWORD *)(a1 + 5200) = v11;
  *(_DWORD *)(a1 + 5188) = v12;
  *(_DWORD *)(a1 + 5192) = v13;
  *(_DWORD *)(a1 + 5196) = v39;
  if (v37 == -1.0) {
    float v32 = 3.4028e38;
  }
  else {
    float v32 = v37;
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  uint64_t v29 = v46;
  if (v46)
  {
LABEL_86:
    uint64_t v47 = v29;
    operator delete(v29);
  }
  return v32;
}

void sub_1B2334FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  uint64_t v24 = (void **)(v21 - 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v24);
  int v23 = *(void **)(v21 - 144);
  if (v23)
  {
    *(void *)(v21 - 136) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ValidateDecodingParameters(float a1, uint64_t a2, int a3, int a4)
{
  if (a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder beam (", 14);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, ") should not be negative.");
    goto LABEL_11;
  }
  if (a1 < 0.0 || a1 > 1000.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder confidence threshold (", 30);
    int v6 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, ") should be in the range [0, 1000].");
    goto LABEL_11;
  }
  if (a4 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder maximum nbest list size (", 33);
    int v7 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, ") should not be negative.");
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
}

uint64_t kaldi::quasar::MultiLangDecorator::NumTagTokens(kaldi::quasar::MultiLangDecorator *this)
{
  uint64_t v1 = *((int *)this + 2);
  if (v1 > 3) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = dword_1B25AB690[v1];
  }
  unsigned int v3 = *((_DWORD *)this + 1);
  BOOL v4 = v3 >= 2;
  BOOL v5 = v3 == 2;
  unsigned int v6 = 2 * v2;
  if (!v5) {
    unsigned int v6 = 0;
  }
  if (v4) {
    return v6;
  }
  else {
    return v2;
  }
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(uint64_t a1)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
  unsigned int v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Source locale ", 14);
  int v3 = *(char *)(a1 + 39);
  if (v3 >= 0) {
    uint64_t v4 = a1 + 16;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 16);
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v4, v5);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", Target locale ", 16);
  int v8 = *(char *)(a1 + 63);
  if (v8 >= 0) {
    uint64_t v9 = a1 + 40;
  }
  else {
    uint64_t v9 = *(void *)(a1 + 40);
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    uint64_t v10 = *(void *)(a1 + 48);
  }
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" source tag ", 12);
  int v13 = *(char *)(a1 + 87);
  if (v13 >= 0) {
    uint64_t v14 = a1 + 64;
  }
  else {
    uint64_t v14 = *(void *)(a1 + 64);
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    uint64_t v15 = *(void *)(a1 + 72);
  }
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" target locale ", 15);
  int v18 = *(char *)(a1 + 111);
  if (v18 >= 0) {
    uint64_t v19 = a1 + 88;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 88);
  }
  if (v18 >= 0) {
    uint64_t v20 = *(unsigned __int8 *)(a1 + 111);
  }
  else {
    uint64_t v20 = *(void *)(a1 + 96);
  }
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", # of phrasebooks ", 19);
  std::ostream::operator<<();
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E4FBA408];
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v24 + *(void *)(v24[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v25[0] = v22;
  v25[1] = MEMORY[0x1E4FBA470] + 16;
  if (v26 < 0) {
    operator delete((void *)v25[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v27);
}

void sub_1B23353A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v8 = 0;
  uint64_t v9 = 0;
  int v7 = &v8;
  if (*(unsigned char *)(a3 + 308))
  {
    kaldi::quasar::TorchEncoderDecoder::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v4);
    std::__tree<std::string>::destroy((uint64_t)&v7, v8);
    int v3 = (char *)v5;
    int v7 = v4;
    int v8 = (char *)v5;
    uint64_t v9 = v6;
    if (v6)
    {
      *(void *)(v5 + 16) = &v8;
      uint64_t v4 = (char **)&v5;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      int v3 = 0;
    }
    else
    {
      int v7 = &v8;
    }
    std::__tree<std::string>::destroy((uint64_t)&v4, v3);
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
}

void sub_1B23357F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  a9 = (void **)(v11 - 192);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v11 - 168));
  std::__tree<std::string>::destroy(v11 - 152, *(char **)(v11 - 144));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8 && *(unsigned char *)(v8 + 3922))
  {
    if (*(unsigned char *)(v8 + 3923)) {
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ShiftAlignments(a1, (uint64_t **)a4);
    }
    kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(a4);
    kaldi::quasar::TranslationUtil::MergeAlignments(a4);
  }
  uint64_t v9 = *(void ***)(a3 + 200);
  float v10 = -1.0;
  if (v9) {
    BOOL v11 = *(_DWORD *)(a3 + 184) == 3;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11) {
    float v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v9, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::JoinBPEUnitsInNbestList(a1, a4);
  int v12 = *(void ***)(a3 + 200);
  if (v12 && *(_DWORD *)(a3 + 184) == 4)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Word level LM re-scoring", 24);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
      int v12 = *(void ***)(a3 + 200);
    }
    float v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v12, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  }
  int v13 = *(std::string **)a4;
  uint64_t v14 = *(std::string **)(a4 + 8);
  while (v13 != v14)
  {
    std::string::operator=(v13 + 5, a2);
    std::string::operator=(v13 + 6, a2);
    int v13 = (std::string *)((char *)v13 + 272);
  }
  kaldi::quasar::NNMTTransliterator::Transliterate<std::vector<kaldi::quasar::TranslationUtil::NbestElement>>(a1 + 408, (uint64_t *)a4);
  if (kaldi::g_kaldi_verbose_level > 0)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v17, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Applying confidence scores to n-best list", 41);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v17);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(a1, (uint64_t *)a4, (int)*(float *)(a3 + 176));
  unint64_t v15 = *(int *)(a3 + 172);
  if (v15 && 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4) > v15) {
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::resize((uint64_t *)a4, v15);
  }
  return v10;
}

void sub_1B2335A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeCore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v7 = (double *)(a1 + 4856);
  uint64_t v8 = a1 + 5680;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v34, v7, v8, &__p);
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)__p);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    int v31 = 0;
    float v32 = 0;
    uint64_t v33 = 0;
    kaldi::JoinVectorToString<int>(a2, ",", (uint64_t)&v31);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input : ", 8);
      if (v33 >= 0) {
        float v10 = (void **)&v31;
      }
      else {
        float v10 = v31;
      }
      if (v33 >= 0) {
        uint64_t v11 = HIBYTE(v33);
      }
      else {
        uint64_t v11 = (uint64_t)v32;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
  }
  float v12 = (float)(int)(((unint64_t)((char *)a2[1] - (char *)*a2) >> 2)
                   - (*(_DWORD *)(a3 + 236)
                    + *(_DWORD *)(a1 + 5204)));
  int v13 = (int)(float)(*(float *)(a1 + 5200) * v12);
  if (v13 <= 1) {
    int v13 = 1;
  }
  int v25 = v13;
  int v14 = *(_DWORD *)(a1 + 5188);
  float v15 = *(float *)(a1 + 5192);
  if (v15 != -1.0)
  {
    int v16 = (int)(float)(v15 * v12);
    if (*(_DWORD *)(a1 + 5196) > v16) {
      int v16 = *(_DWORD *)(a1 + 5196);
    }
    if (v16 < v14) {
      int v14 = v16;
    }
  }
  uint64_t v17 = (kaldi::quasar::TorchEncoderDecoder **)(a1 + 136);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel((void **)(a1 + 136), a3 + 136, a3 + 88, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*(_DWORD *)(a3 + 160))
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam decoding", 13);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, (uint64_t)a2, 0);
    float v19 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, v14, 1);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Greedy decoding", 15);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TorchEncoderDecoder::Start(*v17, *(clockid_t *)(a3 + 312), a3 + 112);
    uint64_t v20 = *(void *)(a1 + 136);
    int v21 = *(_DWORD *)(a3 + 288);
    int v22 = *(_DWORD *)(a3 + 292);
    long long __p = 0uLL;
    uint64_t v30 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(a1, a3 + 64, a3 + 88, (uint64_t *)(a3 + 328), (uint64_t)&v31);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v20, a3 + 264, v21, v22, a2, (int **)&__p, &v31);
    std::__tree<int>::destroy((uint64_t)&v31, v32);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    (*(void (**)(uint64_t))(*(void *)a4 + 224))(a4);
    long long __p = 0uLL;
    uint64_t v30 = 0;
    float v19 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(*v17, (uint64_t *)a2, (uint64_t)&__p, a3 + 112, a4, v25, v14);
    kaldi::quasar::TorchEncoderDecoder::Finish(*v17, v23);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v34, v18);
  return v19;
}

void sub_1B2335E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v19 - 152), v21);
  _Unwind_Resume(a1);
}

void *std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x78787878787878) {
    unint64_t v1 = 0x78787878787878;
  }
  else {
    unint64_t v1 = a1;
  }
  unsigned int v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    __n128 result = operator new(272 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  int v16 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v15 = (uint64_t)a2 - 272;
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v16, &v15);
      }
    }
    else
    {
      unint64_t v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, a2, a3);
      }
      else
      {
        uint64_t v11 = a5;
        unint64_t v12 = a4 >> 1;
        int v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        unint64_t v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v9 >> 1)), a2, a3, v9 - (v9 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272 * v12));
          std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((uint64_t)v11, (uint64_t)v11 + 272 * v12, (uint64_t)v11 + 272 * v12, (uint64_t)v11 + 272 * v9, (uint64_t)a1, a3);
          if (v11)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v11);
              uint64_t v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)a1 + 272 * (v9 >> 1), a2, a3, v9 - (v9 >> 1), v11, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, (uint64_t)a1 + 272 * (v9 >> 1), (char *)a2, a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void sub_1B23360E0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      unint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(float *a1, uint64_t a2, uint64_t a3)
{
  float v5 = *a1;
  float v6 = 1.0;
  if (*(_DWORD *)a1)
  {
    uint64_t v7 = (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 2;
    if (LODWORD(v5) == 2)
    {
      float v9 = a1[1];
      float v10 = a1[2];
      float v11 = powf(v10 + (float)(unint64_t)v7, v9);
      float v12 = powf(v10 + 1.0, v9);
      float v6 = v11 / v12;
      float v8 = powf(v10 + (float)(unint64_t)((uint64_t)(*(void *)(a3 + 200) - *(void *)(a3 + 192)) >> 2), v9)
         / v12;
    }
    else
    {
      float v8 = 1.0;
      if (LODWORD(v5) == 1)
      {
        float v6 = (float)(unint64_t)(v7 + 1);
        float v8 = (float)(unint64_t)(((uint64_t)(*(void *)(a3 + 200) - *(void *)(a3 + 192)) >> 2) + 1);
      }
    }
  }
  else
  {
    float v8 = 1.0;
  }
  return (float)((float)(*(float *)(a2 + 24) + *(float *)(a2 + 28)) / v6) < (float)((float)(*(float *)(a3 + 24)
                                                                                          + *(float *)(a3 + 28))
                                                                                  / v8);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(const kaldi::quasar::TranslationUtil::NbestElement **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v4, *a1);
  kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v2, v3);
  kaldi::quasar::TranslationUtil::NbestElement::operator=(v3, (uint64_t)v4);
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v4);
}

void sub_1B233625C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = (uint64_t)a1 + 272;
    if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
    {
      uint64_t v7 = 0;
      float v8 = a1;
      do
      {
        uint64_t v9 = (uint64_t)v8;
        float v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)v5;
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, v5, v9))
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v12, v8);
          uint64_t v10 = v7;
          while (1)
          {
            kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)a1 + v10 + 272, (uint64_t)a1 + v10);
            if (!v10) {
              break;
            }
            v10 -= 272;
            if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)v12, (uint64_t)a1 + v10))
            {
              uint64_t v11 = (uint64_t)a1 + v10 + 272;
              goto LABEL_10;
            }
          }
          uint64_t v11 = (uint64_t)a1;
LABEL_10:
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v11, (uint64_t)v12);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v12);
        }
        uint64_t v5 = (uint64_t)v8 + 272;
        v7 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272) != a2);
    }
  }
}

void sub_1B2336354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  if (a4)
  {
    uint64_t v9 = result;
    if (a4 == 2)
    {
      uint64_t v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      BOOL v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)result);
      if (v11) {
        float v12 = v10;
      }
      else {
        float v12 = v9;
      }
      if (!v11) {
        uint64_t v9 = v10;
      }
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v12);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v9);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, (char *)result + 272 * (a4 >> 1), a3, a4 >> 1, this, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)v9 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v9, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272 * (a4 >> 1)), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272 * (a4 >> 1)), a2, this, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, a2, this, a3);
    }
  }
  return result;
}

void sub_1B23364F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      __n128 result = kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, a3);
      a3 += 272;
      a5 += 272;
    }
  }
  else
  {
    uint64_t v11 = result;
    while (a3 != a4)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a6, a3, v11))
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, a3);
        a3 += 272;
      }
      else
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, v11);
        v11 += 272;
      }
      a5 += 272;
      if (v11 == a2) {
        goto LABEL_10;
      }
    }
    if (v11 != a2)
    {
      uint64_t v12 = 0;
      do
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::operator=(a5 + v12, v11 + v12);
        v12 += 272;
      }
      while (v11 + v12 != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, char *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v31 = a2;
  float v32 = a1;
  if (a6)
  {
    uint64_t v9 = a6;
    int v13 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
    unint64_t v14 = a1;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v14, v13, (kaldi::quasar::TranslationUtil::NbestElement *)a3, a4, a5, v9, a7);
        return;
      }
      if (!a5) {
        return;
      }
      uint64_t v15 = -a5;
      while (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v13, (uint64_t)v14))
      {
        unint64_t v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272);
        float v32 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272);
        if (__CFADD__(v15++, 1)) {
          return;
        }
      }
      uint64_t v17 = -v15;
      uint64_t v29 = a8;
      if (-v15 >= v9)
      {
        if (v15 == -1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v32, &v31);
          return;
        }
        if (v15 > 0) {
          uint64_t v17 = 1 - v15;
        }
        uint64_t v22 = v17 >> 1;
        unint64_t v14 = v32;
        clockid_t v21 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272 * (v17 >> 1));
        int v23 = *((_DWORD *)a4 + 2);
        uint64_t v34 = *(void *)a4;
        int v35 = v23;
        char v33 = 0;
        uint64_t v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare>((uint64_t)v13, (uint64_t)a3, (uint64_t)v21, (float *)&v34);
        uint64_t v19 = 0xF0F0F0F0F0F0F0F1 * ((v20 - (uint64_t)v13) >> 4);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v18 = v9;
        }
        else {
          uint64_t v18 = v9 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = (uint64_t)v13 + 272 * (v18 >> 1);
        unint64_t v14 = v32;
        clockid_t v21 = (const kaldi::quasar::TranslationUtil::NbestElement *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>((uint64_t)v32, (uint64_t)v13, v20, a4);
        uint64_t v22 = 0xF0F0F0F0F0F0F0F1 * ((v21 - v32) >> 4);
      }
      uint64_t v27 = v21;
      std::string::size_type v28 = a3;
      if (v21 == v13)
      {
        int v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = (char *)v20;
      }
      else if (v13 == (kaldi::quasar::TranslationUtil::NbestElement *)v20)
      {
        int v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = (char *)v21;
      }
      else
      {
        uint64_t v24 = (uint64_t)v13;
        int v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v21, v24, v20);
      }
      a5 = -v22 - v15;
      uint64_t v25 = v9 - v19;
      if (v22 + v19 >= v9 - v22 - v19 - v15)
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a3, v13, v28, a4, -v22 - v15, v25, a7, v29);
        int v13 = v27;
        uint64_t v25 = v19;
        a8 = v29;
        a5 = v22;
      }
      else
      {
        uint64_t v26 = v19;
        a8 = v29;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v14, v27, a3, a4, v22, v26, a7, v29);
        float v32 = (const kaldi::quasar::TranslationUtil::NbestElement *)a3;
        unint64_t v14 = (kaldi::quasar::TranslationUtil::NbestElement *)a3;
        a3 = v28;
      }
      uint64_t v31 = (uint64_t)v13;
      uint64_t v9 = v25;
    }
    while (v25);
  }
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(a1, *(void *)a2, *(void *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 168), *(char **)(a2 + 168), *(void *)(a2 + 176), (uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 192), *(char **)(a2 + 192), *(void *)(a2 + 200), (uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 216), *(char **)(a2 + 216), *(void *)(a2 + 224), (uint64_t)(*(void *)(a2 + 224) - *(void *)(a2 + 216)) >> 2);
    *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t **)(a1 + 248), *(void **)(a2 + 248), (void *)(a2 + 256));
  }
  return a1;
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *this, float *a4)
{
  if (result != a2)
  {
    uint64_t v7 = result;
    __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    float v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
    if (v8 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 1;
      uint64_t v11 = this;
      do
      {
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v8, (uint64_t)v11))
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272), v11);
          ++v10;
          uint64_t v12 = this;
          if (v11 != this)
          {
            uint64_t v13 = v9;
            while (1)
            {
              uint64_t v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + v13);
              if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v8, (uint64_t)this + v13 - 272))break; {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)this + v13, (uint64_t)this + v13 - 272);
              }
              v13 -= 272;
              if (!v13)
              {
                uint64_t v12 = this;
                break;
              }
            }
          }
          __n128 result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v12, (uint64_t)v8);
        }
        else
        {
          __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272), v8);
          ++v10;
        }
        float v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        v9 += 272;
        uint64_t v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
      }
      while (v8 != a2);
    }
  }
  return result;
}

void sub_1B2336A94(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      unint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, const kaldi::quasar::TranslationUtil::NbestElement *a3, const kaldi::quasar::TranslationUtil::NbestElement *a4, kaldi::quasar::TranslationUtil::NbestElement *a5, float *a6)
{
  if (result == a2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a5;
LABEL_11:
    while (a3 != a4)
    {
      __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, a3);
      a3 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      uint64_t v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
      ++v11;
    }
  }
  else
  {
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = a5;
    while (a3 != a4)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a6, (uint64_t)a3, (uint64_t)v10))
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, a3);
        a3 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      else
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, v10);
        uint64_t v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      }
      ++v11;
      uint64_t v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
      if (v10 == a2) {
        goto LABEL_11;
      }
    }
    if (v10 != a2)
    {
      uint64_t v13 = 0;
      do
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + v13), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v13));
        ++v11;
        v13 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v13) != a2);
    }
  }
  return result;
}

void sub_1B2336BCC(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      unint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *a1, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  uint64_t v7 = this;
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      uint64_t v12 = 0;
      int v16 = this;
    }
    else
    {
      uint64_t v12 = 0;
      int v16 = this;
      uint64_t v17 = a1;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v16, v17);
        ++v12;
        uint64_t v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272);
        int v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
      }
      while (v17 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((uint64_t)v7, (uint64_t)v16, (uint64_t)a2, (uint64_t)a3, (uint64_t)a1, a4);
  }
  else
  {
    if (a2 == a3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = this;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = this;
      unint64_t v14 = a2;
      do
      {
        uint64_t v15 = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13, v14);
        ++v12;
        unint64_t v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        uint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      }
      while (v14 != a3);
    }
    uint64_t v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>>((uint64_t)v13, (uint64_t)v13, (uint64_t)v7, (uint64_t)v7, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3, &v18);
  }
  if (v7 && v12)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v7);
      uint64_t v7 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
      --v12;
    }
    while (v12);
  }
}

void sub_1B2336D38(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      unint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4 = a1;
  if (a2 != a1)
  {
    unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 4);
    do
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, a3, v4 + 272 * (v7 >> 1)))
      {
        v7 >>= 1;
      }
      else
      {
        v4 += 272 * (v7 >> 1) + 272;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  if (result != a2)
  {
    uint64_t v7 = a5;
    uint64_t v11 = result;
    uint64_t v12 = a5;
    while (a3 != a4)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a6, a3, v11))
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::operator=(v12, a3);
        a3 += 272;
      }
      else
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::operator=(v12, v11);
        v11 += 272;
      }
      v12 += 272;
      v7 += 272;
      if (v11 == a2) {
        return result;
      }
    }
    return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,0>(v11, a2, v7);
  }
  return result;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float **a11)
{
  if (a2 != a4)
  {
    uint64_t v14 = a2;
    uint64_t v15 = a10 - 272;
    while (a6 != a8)
    {
      BOOL v16 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(*a11, v14 - 272, a6 - 272);
      if (v16) {
        uint64_t v17 = a6 - 272;
      }
      else {
        uint64_t v17 = v14 - 272;
      }
      if (v16) {
        a6 -= 272;
      }
      else {
        v14 -= 272;
      }
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v15, v17);
      v15 -= 272;
      if (v14 == a4) {
        return;
      }
    }
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = v15 + v18;
      v18 -= 272;
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v19, v14 + v18);
    }
    while (v14 + v18 != a4);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v6, v4);
      v4 += 272;
      v6 += 272;
      v3 += 272;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4 = a1;
  if (a2 != a1)
  {
    unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 4);
    do
    {
      uint64_t v8 = v4 + 272 * (v7 >> 1);
      BOOL v9 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, v8, a3);
      if (v9) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v9) {
        uint64_t v4 = v8 + 272;
      }
    }
    while (v7);
  }
  return v4;
}

char *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v11, &v10);
    uint64_t v5 = (char *)v11 + 272;
    uint64_t v6 = v10 + 272;
    uint64_t v10 = v6;
    uint64_t v11 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
    if (v6 == a3) {
      break;
    }
    if (v5 == (char *)v4) {
      uint64_t v4 = v6;
    }
  }
  if (v5 != (char *)v4)
  {
    do
    {
      uint64_t v10 = v4;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v11, &v10);
        unint64_t v7 = (char *)v11 + 272;
        uint64_t v8 = v10 + 272;
        uint64_t v10 = v8;
        uint64_t v11 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
        if (v8 == a3) {
          break;
        }
        if (v7 == (char *)v4) {
          uint64_t v4 = v8;
        }
      }
    }
    while (v7 != (char *)v4);
  }
  return v5;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ShiftAlignments(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t v6 = *v2;
      uint64_t v5 = v2[1];
      if (v5 != *v2)
      {
        unint64_t v7 = 0;
        uint64_t v8 = -152;
        do
        {
          if (v7)
          {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v6 + v8), *(char **)(v6 + v8 + 240), *(void *)(v6 + v8 + 248), (uint64_t)(*(void *)(v6 + v8 + 248) - *(void *)(v6 + v8 + 240)) >> 2);
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*v2 + v8 + 24), *(char **)(*v2 + v8 + 264), *(void *)(*v2 + v8 + 272), (uint64_t)(*(void *)(*v2 + v8 + 272) - *(void *)(*v2 + v8 + 264)) >> 2);
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*v2 + v8 + 48), *(char **)(*v2 + v8 + 288), *(void *)(*v2 + v8 + 296), (uint64_t)(*(void *)(*v2 + v8 + 296) - *(void *)(*v2 + v8 + 288)) >> 2);
            uint64_t v6 = *v2;
            uint64_t v5 = v2[1];
          }
          ++v7;
          v8 += 240;
        }
        while (v7 < 0xEEEEEEEEEEEEEEEFLL * ((v5 - v6) >> 4));
        if (v6 != v5 && *(_DWORD *)(v5 - 216) == *(_DWORD *)(a1 + 5180))
        {
          kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v5 - 240));
          v2[1] = v9;
        }
      }
      v2 += 34;
    }
    while (v2 != v3);
  }
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, const kaldi::quasar::TranslationUtil::NbestElement **a2, void **a3, float a4, float a5, float a6)
{
  uint64_t v12 = (double *)(a1 + 4856);
  uint64_t v13 = a1 + 5688;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v88, v12, v13, (long long *)__p);
  if (v87 < 0)
  {
    operator delete(__p[0]);
    if (!a2)
    {
LABEL_8:
      float v16 = 2147500000.0;
      goto LABEL_9;
    }
  }
  else if (!a2)
  {
    goto LABEL_8;
  }
  unint64_t v15 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
  if (!v15) {
    goto LABEL_8;
  }
  if (v15 == 1)
  {
    float v16 = 0.0;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Looking for UNK symbol ", 23);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    uint64_t v18 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
    (*(void (**)(void **__return_ptr))(*(void *)v18 + 88))(&v83);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"UNK label : ", 12);
      if ((v85 & 0x80u) == 0) {
        uint64_t v20 = &v83;
      }
      else {
        uint64_t v20 = v83;
      }
      if ((v85 & 0x80u) == 0) {
        uint64_t v21 = v85;
      }
      else {
        uint64_t v21 = v84;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    uint64_t v22 = v85;
    if ((v85 & 0x80u) != 0) {
      uint64_t v22 = v84;
    }
    if (!v22)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No UNK symbol in translation model vocabulary", 45);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    uint64_t v23 = (*(uint64_t (**)(void *))(*a3[4] + 120))(a3[4]);
    uint64_t v24 = v23;
    if (!v23)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have output symbol table", 48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    uint64_t v25 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v23 + 96))(v23, &v83);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LM UNK ID ", 10);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    uint64_t v77 = a1;
    if (v25 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      long long v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have OOV symbol : ", 42);
      if ((v85 & 0x80u) == 0) {
        long long v74 = &v83;
      }
      else {
        long long v74 = v83;
      }
      if ((v85 & 0x80u) == 0) {
        uint64_t v75 = v85;
      }
      else {
        uint64_t v75 = v84;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    uint64_t v26 = *a2;
    uint64_t v27 = a2[1];
    long long v76 = a2;
    if (*a2 == v27)
    {
      float v16 = 2147500000.0;
    }
    else
    {
      float v28 = 1.0 - a4;
      float v16 = 2147500000.0;
      do
      {
        uint64_t v29 = ((uint64_t (*)(void **))**a3)(a3);
        if ((*((_DWORD *)v26 + 14) - 5) > 1)
        {
          uint64_t v31 = v29;
          uint64_t v33 = *(void *)v26;
          uint64_t v32 = *((void *)v26 + 1);
          float v34 = 0.0;
          while (v33 != v32)
          {
            uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 96))(v24, v33);
            if (v35 == -1)
            {
              uint64_t v35 = v25;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to find ", 15);
                std::string::size_type v36 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" in LM", 6);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
                uint64_t v35 = v25;
              }
            }
            if ((((uint64_t (*)(void **, uint64_t, uint64_t, void **))(*a3)[4])(a3, v31, v35, &v78) & 1) == 0)
            {
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                float v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Word lookup failure : ", 22);
                int v38 = *(char *)(v33 + 23);
                if (v38 >= 0) {
                  uint64_t v39 = v33;
                }
                else {
                  uint64_t v39 = *(void *)v33;
                }
                if (v38 >= 0) {
                  uint64_t v40 = *(unsigned __int8 *)(v33 + 23);
                }
                else {
                  uint64_t v40 = *(void *)(v33 + 8);
                }
                uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" (label=", 8);
                std::string v42 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)")", 1);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              }
              float v34 = INFINITY;
              break;
            }
            uint64_t v31 = HIDWORD(v79);
            float v34 = v34 + *(float *)&v79;
            v33 += 240;
          }
          float v43 = ((float (*)(void **, uint64_t))(*a3)[2])(a3, v31);
          float v44 = *((float *)v26 + 7);
          v82[0] = *((float *)v26 + 6);
          v82[1] = v44;
          float v45 = v28 * v44;
          *((float *)v26 + 6) = (float)(v34 + v43) * a4;
          *((float *)v26 + 7) = v45;
          *((float *)v26 + 8) = v43 * a4;
          *((float *)v26 + 9) = v28 * *((float *)v26 + 9);
          v81[0] = (float)(v34 + v43) * a4;
          v81[1] = v45;
          long long v78 = 0;
          uint64_t v79 = 0;
          uint64_t v80 = 0;
          float v46 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestToString(v77, (uint64_t *)v26, (uint64_t)&v78);
          float v47 = *((float *)v26 + 8);
          float v48 = *((float *)v26 + 9);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Old Cost = ", 11);
            uint64_t v50 = fst::operator<<<float>(v49, v82);
            std::string v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", New cost = ", 13);
            v52 = fst::operator<<<float>(v51, v81);
            uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", Hyp = ", 8);
            if (v80 >= 0) {
              std::string::size_type v54 = &v78;
            }
            else {
              std::string::size_type v54 = v78;
            }
            if (v80 >= 0) {
              uint64_t v55 = HIBYTE(v80);
            }
            else {
              uint64_t v55 = v79;
            }
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
            v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" finalcost=", 11);
            fst::operator<<<float>(v57, (float *)v26 + 8);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
          }
          if ((float)((float)(v46 + v47) + v48) < v16) {
            float v16 = (float)(v46 + v47) + v48;
          }
          if (SHIBYTE(v80) < 0) {
            operator delete(v78);
          }
        }
        else
        {
          float v30 = *((float *)v26 + 7);
          if ((float)(*((float *)v26 + 6) + v30) < v16) {
            float v16 = *((float *)v26 + 6) + v30;
          }
        }
        uint64_t v26 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v26 + 272);
      }
      while (v26 != v27);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v78, *(_DWORD *)(v77 + 5224), a5, a6);
    uint64_t v58 = *v76;
    uint64_t v59 = v76[1];
    __p[0] = v78;
    LODWORD(__p[1]) = v79;
    if (v59 - v58 < 1)
    {
      v60 = 0;
      uint64_t v62 = 0;
    }
    else
    {
      v60 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v59 - v58) >> 4));
      uint64_t v62 = v61;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v58, v59, (float *)__p, 0xF0F0F0F0F0F0F0F1 * ((v59 - v58) >> 4), v60, v62);
    if (v60) {
      operator delete(v60);
    }
    std::string::size_type v63 = *v76;
    std::string::size_type v64 = v76[1];
    if (*v76 != v64)
    {
      int v65 = (int)v78;
      float v66 = *((float *)&v78 + 1);
      float v67 = *(float *)&v79;
      float v68 = powf(*(float *)&v79 + 1.0, *((float *)&v78 + 1));
      do
      {
        float v69 = *((float *)v63 + 6);
        float v70 = *((float *)v63 + 7);
        uint64_t v71 = (uint64_t)(*((void *)v63 + 25) - *((void *)v63 + 24)) >> 2;
        if (v65 == 2)
        {
          float v72 = powf(v67 + (float)(unint64_t)v71, v66) / v68;
        }
        else
        {
          float v72 = 1.0;
          if (v65 == 1) {
            float v72 = (float)(unint64_t)(v71 + 1);
          }
        }
        *((float *)v63 + 10) = (float)(v69 + v70) / v72;
        std::string::size_type v63 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v63 + 272);
      }
      while (v63 != v64);
    }
    if ((char)v85 < 0) {
      operator delete(v83);
    }
  }
LABEL_9:
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v88, v14);
  return v16;
}

void sub_1B23379B4(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v31 - 200), a2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = (double *)(a1 + 4856);
  uint64_t v7 = a1 + 5696;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v18, v6, v7, (long long *)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  while (v9 != v10)
  {
    if ((*(_DWORD *)(v9 + 56) - 5) > 1)
    {
      if (*(unsigned char *)(a1 + 5673)) {
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromConfidenceModel(a1, v9, a3);
      }
      else {
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromTranslationModel(a1, (uint64_t *)v9, a3);
      }
    }
    else
    {
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignHightestPossibleConfidences(a1, (uint64_t *)v9);
    }
    v9 += 272;
  }
  if (*(unsigned char *)(a1 + 5674))
  {
    uint64_t v12 = (const kaldi::quasar::TranslationUtil::NbestElement *)*a2;
    uint64_t v11 = (const kaldi::quasar::TranslationUtil::NbestElement *)a2[1];
    if (v11 - v12 < 1)
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v11 - v12) >> 4));
      uint64_t v15 = v14;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v12, v11, (uint64_t)__p, 0xF0F0F0F0F0F0F0F1 * ((v11 - v12) >> 4), v13, v15);
    if (v13) {
      operator delete(v13);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v18, v8);
}

void sub_1B2337C00(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (v16) {
    operator delete(v16);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a16, a2);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::NbestElement>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 272 * a2;
    while (v3 != v7)
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v3 - 272));
    a1[1] = v7;
  }
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestToString(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    float v7 = 0.0;
  }
  else
  {
    float v7 = 0.0;
    do
    {
      int v8 = *(char *)(v5 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v5;
      }
      else {
        uint64_t v9 = *(void *)v5;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v5 + 8);
      }
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      float v7 = v7 + (float)(*(float *)(v5 + 80) + *(float *)(v5 + 84));
      v5 += 240;
    }
    while (v5 != v6);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v15;
  uint64_t v12 = (void *)MEMORY[0x1E4FBA408];
  *(void *)(a3 + 16) = v16;
  v17[0] = *v12;
  uint64_t v13 = v12[9];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = v12[8];
  v18[0] = v13;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](&v20);
  return v7;
}

void sub_1B2337EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate<std::vector<kaldi::quasar::TranslationUtil::NbestElement>>(uint64_t result, uint64_t *a2)
{
  uint64_t v13 = result;
  if (*(void *)(result + 4192) || *(unsigned char *)(result + 4200))
  {
    uint64_t v2 = *a2;
    uint64_t v12 = a2[1];
    if (*a2 != v12)
    {
      uint64_t v11 = *MEMORY[0x1E4FBA408];
      uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 64);
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
        uint64_t v3 = *(const std::string **)v2;
        unint64_t v4 = *(const std::string **)(v2 + 8);
        while (v3 != v4)
        {
          memset(&v17, 0, sizeof(v17));
          kaldi::SplitStringToVector(v3, "\\"", 1, (uint64_t)&v17);
          if (v17.__r_.__value_.__l.__size_ != v17.__r_.__value_.__r.__words[0])
          {
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v16 = 0;
            memset(v14, 0, sizeof(v14));
            kaldi::SplitStringToVector((const std::string *)v17.__r_.__value_.__l.__data_, "_", 1, (uint64_t)v14);
            kaldi::JoinVectorToString<std::string>(v14, " ", (uint64_t)__p);
            if (v16 >= 0) {
              uint64_t v5 = __p;
            }
            else {
              uint64_t v5 = (void **)__p[0];
            }
            if (v16 >= 0) {
              uint64_t v6 = HIBYTE(v16);
            }
            else {
              uint64_t v6 = (uint64_t)__p[1];
            }
            float v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v5, v6);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
            uint64_t v22 = (void **)v14;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
            if (SHIBYTE(v16) < 0) {
              operator delete(__p[0]);
            }
          }
          __p[0] = &v17;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v3 += 10;
        }
        std::stringbuf::str();
        kaldi::Trim(&v17);
        kaldi::quasar::NNMTTransliterator::Transliterate(v13, __p);
        int v8 = (void **)(v2 + 96);
        if (*(char *)(v2 + 119) < 0) {
          operator delete(*v8);
        }
        *(_OWORD *)int v8 = *(_OWORD *)__p;
        *(void *)(v2 + 112) = v16;
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
        v18[0] = v11;
        *(void *)((char *)v18 + *(void *)(v11 - 24)) = v10;
        v19[0] = v9;
        v19[1] = MEMORY[0x1E4FBA470] + 16;
        if (v20 < 0) {
          operator delete((void *)v19[9]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        __n128 result = MEMORY[0x1B3EA8520](&v21);
        v2 += 272;
      }
      while (v2 != v12);
    }
  }
  return result;
}

void sub_1B233820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignHightestPossibleConfidences(uint64_t a1, uint64_t *a2)
{
  *((unsigned char *)a2 + 240) = 0;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = (void **)(a2 + 27);
    uint64_t v6 = (uint64_t)(a2 + 29);
    do
    {
      if (*((unsigned char *)a2 + 88))
      {
        int v8 = (char *)a2[28];
        unint64_t v7 = a2[29];
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v10 = (char *)*v5;
          uint64_t v11 = (v8 - (unsigned char *)*v5) >> 2;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = v7 - (void)v10;
          if (v13 >> 1 > v12) {
            unint64_t v12 = v13 >> 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
            uint64_t v10 = (char *)a2[27];
            int v8 = (char *)a2[28];
          }
          else
          {
            long long v15 = 0;
          }
          uint64_t v16 = &v15[4 * v11];
          *(_DWORD *)uint64_t v16 = 1065353216;
          uint64_t v9 = v16 + 4;
          while (v8 != v10)
          {
            int v17 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          a2[27] = (uint64_t)v16;
          a2[28] = (uint64_t)v9;
          a2[29] = (uint64_t)&v15[4 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *(_DWORD *)int v8 = 1065353216;
          uint64_t v9 = v8 + 4;
        }
        a2[28] = (uint64_t)v9;
      }
      *(_DWORD *)(v2 + 232) = 1000;
      v2 += 240;
    }
    while (v2 != v3);
  }
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromConfidenceModel(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::Matrix<float>::Matrix((uint64_t)&v95);
  if (*(void *)(a1 + 5136) == *(void *)(a1 + 5128) || !*(unsigned char *)(a1 + 5675))
  {
    kaldi::quasar::TorchEncoderDecoder::Align(*(void *)(a1 + 136), (uint64_t *)(a2 + 168), a2 + 192, a1 + 5632, &v95);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Alignment cost ", 15);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85);
    }
  }
  else
  {
    v92 = 0;
    unint64_t v93 = 0;
    std::string v94 = 0;
    long long v89 = 0;
    v90 = 0;
    uint64_t v91 = 0;
    uint64_t v6 = *(void **)a2;
    uint64_t v81 = *(void **)(a2 + 8);
    if (*(void **)a2 == v81)
    {
      float v34 = 0;
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v80 = a1;
      do
      {
        int v8 = (int *)v6[11];
        unint64_t v7 = (int *)v6[12];
        if (v8 != v7)
        {
          uint64_t v9 = v93;
          do
          {
            int v10 = *v8;
            if (v9 >= v94)
            {
              unint64_t v12 = v92;
              uint64_t v13 = (v9 - v92) >> 2;
              unint64_t v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v15 = v94 - v92;
              if ((v94 - v92) >> 1 > v14) {
                unint64_t v14 = v15 >> 1;
              }
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v16 = v14;
              }
              if (v16)
              {
                int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v94, v16);
                unint64_t v12 = v92;
                uint64_t v9 = v93;
              }
              else
              {
                int v17 = 0;
              }
              uint64_t v18 = &v17[4 * v13];
              *(_DWORD *)uint64_t v18 = v10;
              uint64_t v11 = v18 + 4;
              while (v9 != v12)
              {
                int v19 = *((_DWORD *)v9 - 1);
                v9 -= 4;
                *((_DWORD *)v18 - 1) = v19;
                v18 -= 4;
              }
              v92 = v18;
              unint64_t v93 = v11;
              std::string v94 = &v17[4 * v16];
              if (v12) {
                operator delete(v12);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v9 = v10;
              uint64_t v11 = v9 + 4;
            }
            unint64_t v93 = v11;
            ++v8;
            uint64_t v9 = v11;
          }
          while (v8 != v7);
        }
        uint64_t v21 = (int *)v6[23];
        char v20 = (int *)v6[24];
        if (v21 != v20)
        {
          uint64_t v22 = v90;
          do
          {
            int v23 = *v21;
            if (v22 >= v91)
            {
              uint64_t v25 = v89;
              uint64_t v26 = (v22 - v89) >> 2;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = v91 - v89;
              if ((v91 - v89) >> 1 > v27) {
                unint64_t v27 = v28 >> 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v27;
              }
              if (v29)
              {
                float v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91, v29);
                uint64_t v25 = v89;
                uint64_t v22 = v90;
              }
              else
              {
                float v30 = 0;
              }
              uint64_t v31 = &v30[4 * v26];
              *(_DWORD *)uint64_t v31 = v23;
              uint64_t v24 = v31 + 4;
              while (v22 != v25)
              {
                int v32 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *((_DWORD *)v31 - 1) = v32;
                v31 -= 4;
              }
              long long v89 = v31;
              v90 = v24;
              uint64_t v91 = &v30[4 * v29];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v22 = v23;
              uint64_t v24 = v22 + 4;
            }
            v90 = v24;
            ++v21;
            uint64_t v22 = v24;
          }
          while (v21 != v20);
        }
        v6 += 30;
      }
      while (v6 != v81);
      float v34 = v92;
      uint64_t v33 = v93;
      a1 = v80;
    }
    int v35 = kaldi::MatrixBase<float>::NumCols(a1 + 5632);
    kaldi::Matrix<float>::Resize(&v95, (unint64_t)(v33 - v34) >> 2, (v35 + 1), 0, 0);
    if (v93 == v92)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v36 = 0;
      int v37 = v96;
      do
      {
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v85, (uint64_t)&v95, v36, 1, 0, v37);
        kaldi::CuMatrixBase<float>::CopyToMat<float>(*(void *)(a1 + 5128) + 48 * *(int *)&v92[4 * v36], (int *)&v85, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
        int v38 = *(_DWORD *)&v89[4 * v36];
        int v39 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
        int v37 = v96;
        *(_DWORD *)(*(void *)&v95 + 4 * v98 * (int)v36++ + 4 * (v39 - 1)) = v38;
        unint64_t v40 = (v93 - v92) >> 2;
      }
      while (v40 > v36);
    }
    uint64_t v41 = kaldi::MatrixBase<float>::NumCols(a1 + 5632);
    kaldi::Matrix<float>::Matrix((uint64_t)&v85, v40, v41, 0, 0);
    uint64_t v42 = *(void *)(a2 + 192);
    if (*(void *)(a2 + 200) != v42)
    {
      unint64_t v43 = 0;
      do
      {
        int v44 = *(_DWORD *)(v42 + 4 * v43);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, (uint64_t)&v85, v43, 1, 0, v86);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v88, a1 + 5632, v44 - 1, 1, 0, *(_DWORD *)(a1 + 5640));
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v87, a1 + 5632, v44 - 1, 1, 0, *(_DWORD *)(a1 + 5640));
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v82, v87, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v87);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v88);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
        ++v43;
        uint64_t v42 = *(void *)(a2 + 192);
      }
      while (v43 < (*(void *)(a2 + 200) - v42) >> 2);
    }
    int v45 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, (uint64_t)&v95, 0, v97, 0, v45 - 1);
    kaldi::MatrixBase<float>::MulElements((uint64_t)v82, (uint64_t)&v85);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v85);
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    if (v92)
    {
      unint64_t v93 = v92;
      operator delete(v92);
    }
  }
  uint64_t v46 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
  uint64_t v47 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
  kaldi::CuMatrix<float>::CuMatrix(&v85, v46, v47, 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v85, (int *)&v95, 111);
  uint64_t v48 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
  kaldi::CuMatrix<float>::CuMatrix(v82, v48, 1, 0, 0, 0);
  kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 5256), (uint64_t)&v85, v82, -1, 0);
  kaldi::Matrix<float>::Resize(&v95, v84, v83, 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v82, (int *)&v95, 111);
  int v49 = 0;
  uint64_t v50 = (void **)(a2 + 216);
  while (v49 != kaldi::MatrixBase<float>::NumRows((uint64_t)&v95))
  {
    uint64_t v51 = *(void *)&v95 + 4 * v98 * v49;
    uint64_t v53 = *(char **)(a2 + 224);
    unint64_t v52 = *(void *)(a2 + 232);
    if ((unint64_t)v53 >= v52)
    {
      uint64_t v55 = (char *)*v50;
      uint64_t v56 = (v53 - (unsigned char *)*v50) >> 2;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v58 = v52 - (void)v55;
      if (v58 >> 1 > v57) {
        unint64_t v57 = v58 >> 1;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 232, v59);
        uint64_t v55 = *(char **)(a2 + 216);
        uint64_t v53 = *(char **)(a2 + 224);
      }
      else
      {
        v60 = 0;
      }
      uint64_t v61 = &v60[4 * v56];
      *(_DWORD *)uint64_t v61 = *(_DWORD *)(v51 + 4);
      std::string::size_type v54 = v61 + 4;
      while (v53 != v55)
      {
        int v62 = *((_DWORD *)v53 - 1);
        v53 -= 4;
        *((_DWORD *)v61 - 1) = v62;
        v61 -= 4;
      }
      *(void *)(a2 + 216) = v61;
      *(void *)(a2 + 224) = v54;
      *(void *)(a2 + 232) = &v60[4 * v59];
      if (v55) {
        operator delete(v55);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v53 = *(_DWORD *)(v51 + 4);
      std::string::size_type v54 = v53 + 4;
    }
    *(void *)(a2 + 224) = v54;
    ++v49;
  }
  std::string::size_type v64 = *(void **)a2;
  std::string::size_type v63 = *(void **)(a2 + 8);
  if (v63 == *(void **)a2)
  {
    LODWORD(v78) = 0;
  }
  else
  {
    uint64_t v65 = 0;
    unint64_t v66 = ((uint64_t)v63 - *(void *)a2) / 240;
    int v67 = *(unsigned __int8 *)(a2 + 88);
    if (v66 <= 1) {
      uint64_t v68 = 1;
    }
    else {
      uint64_t v68 = ((uint64_t)v63 - *(void *)a2) / 240;
    }
    do
    {
      if (v67)
      {
        float v69 = &v64[30 * v65];
        float v70 = (int *)v69[20];
        uint64_t v71 = (int *)v69[21];
        if (v70 == v71)
        {
          double v72 = 0.0;
        }
        else
        {
          double v72 = 0.0;
          long long v73 = v70;
          do
          {
            uint64_t v74 = *v73++;
            double v72 = v72 + *((float *)*v50 + v74);
          }
          while (v73 != v71);
        }
        double v75 = v72 / (double)(unint64_t)(v71 - v70);
      }
      else
      {
        double v75 = *((float *)*v50 + v65);
      }
      float v76 = v75;
      LODWORD(v64[30 * v65++ + 29]) = llround(v76 * 998.0 + 1.0);
    }
    while (v65 != v68);
    LODWORD(v77) = 0;
    do
    {
      unint64_t v77 = *((int *)v64 + 58) + (uint64_t)(int)v77;
      v64 += 30;
    }
    while (v64 != v63);
    unint64_t v78 = v77 / v66;
  }
  *(unsigned char *)(a2 + 240) = (int)v78 < a3;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v82);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v85);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v95);
}

void sub_1B2338B1C(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1 - 144);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromTranslationModel(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    int v30 = a3;
    uint64_t v6 = (void **)(a2 + 27);
    unint64_t v7 = a2 + 29;
    uint64_t v31 = a2[1];
    do
    {
      if (*((unsigned char *)a2 + 88))
      {
        uint64_t v9 = *(float **)(v4 + 184);
        int v8 = *(float **)(v4 + 192);
        if (v9 == v8) {
          goto LABEL_25;
        }
        int v10 = 0;
        uint64_t v11 = (float *)a2[28];
        do
        {
          float v12 = expf(-*v9);
          float v13 = v12;
          if ((unint64_t)v11 >= *v7)
          {
            uint64_t v15 = (float *)*v6;
            uint64_t v16 = ((char *)v11 - (unsigned char *)*v6) >> 2;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v18 = *v7 - (void)v15;
            if (v18 >> 1 > v17) {
              unint64_t v17 = v18 >> 1;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19)
            {
              char v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 29), v19);
              uint64_t v15 = (float *)a2[27];
              uint64_t v11 = (float *)a2[28];
            }
            else
            {
              char v20 = 0;
            }
            uint64_t v21 = (float *)&v20[4 * v16];
            float *v21 = v13;
            unint64_t v14 = v21 + 1;
            while (v11 != v15)
            {
              int v22 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v21-- - 1) = v22;
            }
            a2[27] = (uint64_t)v21;
            a2[28] = (uint64_t)v14;
            a2[29] = (uint64_t)&v20[4 * v19];
            if (v15) {
              operator delete(v15);
            }
          }
          else
          {
            *uint64_t v11 = v12;
            unint64_t v14 = v11 + 1;
          }
          v10 += llround(v13 * 998.0 + 1.0);
          a2[28] = (uint64_t)v14;
          ++v9;
          uint64_t v11 = v14;
        }
        while (v9 != v8);
        uint64_t v23 = *(void *)(v4 + 184);
        uint64_t v24 = *(void *)(v4 + 192);
        uint64_t v5 = v31;
        if (v23 == v24) {
LABEL_25:
        }
          LODWORD(v25) = 0;
        else {
          unint64_t v25 = v10 / (unint64_t)((v24 - v23) >> 2);
        }
      }
      else
      {
        LODWORD(v25) = llround(expf(-*(float *)(v4 + 84)) * 998.0 + 1.0);
      }
      *(_DWORD *)(v4 + 232) = v25;
      v4 += 240;
    }
    while (v4 != v5);
    uint64_t v27 = *a2;
    uint64_t v26 = a2[1];
    if (v26 == *a2)
    {
      LODWORD(v29) = 0;
      a3 = v30;
    }
    else
    {
      LODWORD(v28) = 0;
      a3 = v30;
      do
      {
        unint64_t v28 = *(int *)(v27 + 232) + (uint64_t)(int)v28;
        v27 += 240;
      }
      while (v27 != v26);
      unint64_t v29 = v28 / (0xEEEEEEEEEEEEEEEFLL * ((v26 - *a2) >> 4));
    }
  }
  *((unsigned char *)a2 + 240) = (int)v29 < a3;
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  unint64_t v25 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v24 = (uint64_t)a2 - 272;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v22, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      uint64_t v8 = v22;
      if (v23 == v22)
      {
        LODWORD(v10) = 0;
      }
      else
      {
        LODWORD(v9) = 0;
        do
        {
          unint64_t v9 = *(int *)(v8 + 232) + (uint64_t)(int)v9;
          v8 += 240;
        }
        while (v8 != v23);
        unint64_t v10 = v9 / (0xEEEEEEEEEEEEEEEFLL * ((v23 - v22) >> 4));
      }
      uint64_t v19 = *(void *)a1;
      uint64_t v18 = *((void *)a1 + 1);
      if (v18 == *(void *)a1)
      {
        LODWORD(v21) = 0;
      }
      else
      {
        LODWORD(v20) = 0;
        do
        {
          unint64_t v20 = *(int *)(v19 + 232) + (uint64_t)(int)v20;
          v19 += 240;
        }
        while (v19 != v18);
        unint64_t v21 = v20 / (0xEEEEEEEEEEEEEEEFLL * ((v18 - *(void *)a1) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v22);
      if ((int)v10 > (int)v21) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v25, &v24);
      }
    }
    else
    {
      unint64_t v11 = a4;
      if ((uint64_t)a4 <= 0)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, a2);
      }
      else
      {
        unint64_t v14 = (uint64_t *)a5;
        unint64_t v15 = a4 >> 1;
        uint64_t v16 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        unint64_t v17 = a4 >> 1;
        if ((uint64_t)v11 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v16, a3, v17, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v11 >> 1)), a2, a3, v11 - (v11 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v15]);
          std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, &v14[34 * v15], (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v15], (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v11], (uint64_t)a1);
          if (v14)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v14);
              v14 += 34;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v16, a3, v17, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)a1 + 272 * (v11 >> 1), a2, a3, v11 - (v11 >> 1), v14, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, (uint64_t)a1 + 272 * (v11 >> 1), a2, a3, v11 >> 1, v11 - (v11 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)v14, a6);
        }
      }
    }
  }
}

void sub_1B233908C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272);
    if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
    {
      uint64_t v5 = a1;
      do
      {
        uint64_t v6 = v4;
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27, v4);
        uint64_t v7 = v27;
        if (v28 == v27)
        {
          LODWORD(v9) = 0;
        }
        else
        {
          LODWORD(v8) = 0;
          do
          {
            unint64_t v8 = *(int *)(v7 + 232) + (uint64_t)(int)v8;
            v7 += 240;
          }
          while (v7 != v28);
          unint64_t v9 = v8 / (0xEEEEEEEEEEEEEEEFLL * ((v28 - v27) >> 4));
        }
        uint64_t v11 = *(void *)v5;
        uint64_t v10 = *((void *)v5 + 1);
        if (v10 == *(void *)v5)
        {
          LODWORD(v13) = 0;
        }
        else
        {
          LODWORD(v12) = 0;
          do
          {
            unint64_t v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
            v11 += 240;
          }
          while (v11 != v10);
          unint64_t v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v10 - *(void *)v5) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27);
        if ((int)v9 > (int)v13)
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v26, v6);
          uint64_t v14 = (uint64_t)v6;
          while (1)
          {
            uint64_t v15 = (uint64_t)v5;
            kaldi::quasar::TranslationUtil::NbestElement::operator=(v14, (uint64_t)v5);
            if (v5 == a1) {
              break;
            }
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v24, (const kaldi::quasar::TranslationUtil::NbestElement *)v26);
            uint64_t v16 = v24;
            if (v25 == v24)
            {
              LODWORD(v18) = 0;
            }
            else
            {
              LODWORD(v17) = 0;
              do
              {
                unint64_t v17 = *(int *)(v16 + 232) + (uint64_t)(int)v17;
                v16 += 240;
              }
              while (v16 != v25);
              unint64_t v18 = v17 / (0xEEEEEEEEEEEEEEEFLL * ((v25 - v24) >> 4));
            }
            uint64_t v5 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 - 272);
            uint64_t v19 = *(void *)(v15 - 264);
            uint64_t v20 = *(void *)(v15 - 272);
            if (v19 == v20)
            {
              LODWORD(v23) = 0;
            }
            else
            {
              LODWORD(v21) = 0;
              unint64_t v22 = 0xEEEEEEEEEEEEEEEFLL * ((v19 - v20) >> 4);
              do
              {
                unint64_t v21 = *(int *)(v20 + 232) + (uint64_t)(int)v21;
                v20 += 240;
              }
              while (v20 != v19);
              unint64_t v23 = v21 / v22;
            }
            kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v24);
            uint64_t v14 = v15;
            if ((int)v18 <= (int)v23) {
              goto LABEL_30;
            }
          }
          uint64_t v15 = (uint64_t)a1;
LABEL_30:
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v15, (uint64_t)v26);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v26);
        }
        uint64_t v4 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272);
        uint64_t v5 = v6;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272) != a2);
    }
  }
}

void sub_1B233929C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  if (a4)
  {
    unint64_t v8 = result;
    if (a4 == 2)
    {
      unint64_t v9 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      uint64_t v10 = v19;
      if (v20 == v19)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        LODWORD(v11) = 0;
        do
        {
          unint64_t v11 = *(int *)(v10 + 232) + (uint64_t)(int)v11;
          v10 += 240;
        }
        while (v10 != v20);
        unint64_t v12 = v11 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      uint64_t v15 = *(void *)v8;
      uint64_t v14 = *((void *)v8 + 1);
      if (v14 == *(void *)v8)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v16) = 0;
        do
        {
          unint64_t v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
          v15 += 240;
        }
        while (v15 != v14);
        unint64_t v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - *(void *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v12 <= (int)v17) {
        unint64_t v18 = v8;
      }
      else {
        unint64_t v18 = v9;
      }
      if ((int)v12 <= (int)v17) {
        unint64_t v8 = v9;
      }
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v18);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v8);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, (char *)result + 272 * (a4 >> 1), a3, a4 >> 1, this, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)v8 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v8, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1)), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1)), a2, this);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, a2, this);
    }
  }
  return result;
}

void sub_1B23394C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(uint64_t *result, uint64_t *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, kaldi::quasar::TranslationUtil::NbestElement *a4, uint64_t a5)
{
  if (result == a2)
  {
LABEL_20:
    while (a3 != a4)
    {
      __n128 result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)a3);
      a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      a5 += 272;
    }
  }
  else
  {
    unint64_t v9 = result;
    while (a3 != a4)
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v18, a3);
      uint64_t v10 = v18;
      if (v19 == v18)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        LODWORD(v11) = 0;
        do
        {
          unint64_t v11 = *(int *)(v10 + 232) + (uint64_t)(int)v11;
          v10 += 240;
        }
        while (v10 != v19);
        unint64_t v12 = v11 / (0xEEEEEEEEEEEEEEEFLL * ((v19 - v18) >> 4));
      }
      uint64_t v14 = *v9;
      uint64_t v13 = v9[1];
      if (v13 == *v9)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        LODWORD(v15) = 0;
        do
        {
          unint64_t v15 = *(int *)(v14 + 232) + (uint64_t)(int)v15;
          v14 += 240;
        }
        while (v14 != v13);
        unint64_t v16 = v15 / (0xEEEEEEEEEEEEEEEFLL * ((v13 - *v9) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v18);
      if ((int)v12 <= (int)v16)
      {
        __n128 result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)v9);
        v9 += 34;
      }
      else
      {
        __n128 result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)a3);
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      a5 += 272;
      if (v9 == a2) {
        goto LABEL_20;
      }
    }
    if (v9 != a2)
    {
      uint64_t v17 = 0;
      do
      {
        __n128 result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5 + v17 * 8, (uint64_t)&v9[v17]);
        v17 += 34;
      }
      while (&v9[v17] != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, kaldi::quasar::TranslationUtil::NbestElement *a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  if (a6)
  {
    uint64_t v9 = a6;
    uint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
    uint64_t v14 = a1;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, v13, a3, a4, a5, v9, a7);
        return;
      }
      if (!a5) {
        return;
      }
      while (1)
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v38, v13);
        uint64_t v15 = v38;
        if (v39 == v38)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          LODWORD(v16) = 0;
          do
          {
            unint64_t v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
            v15 += 240;
          }
          while (v15 != v39);
          unint64_t v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v39 - v38) >> 4));
        }
        uint64_t v19 = *(void *)v14;
        uint64_t v18 = *((void *)v14 + 1);
        if (v18 == *(void *)v14)
        {
          LODWORD(v21) = 0;
        }
        else
        {
          LODWORD(v20) = 0;
          do
          {
            unint64_t v20 = *(int *)(v19 + 232) + (uint64_t)(int)v20;
            v19 += 240;
          }
          while (v19 != v18);
          unint64_t v21 = v20 / (0xEEEEEEEEEEEEEEEFLL * ((v18 - *(void *)v14) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v38);
        if ((int)v17 > (int)v21) {
          break;
        }
        uint64_t v14 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        uint64_t v41 = v14;
        if (!--a5) {
          return;
        }
      }
      uint64_t v36 = a4;
      if (a5 >= v9)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v41, &v40);
          return;
        }
        if (a5 >= 0) {
          uint64_t v27 = a5;
        }
        else {
          uint64_t v27 = a5 + 1;
        }
        uint64_t v28 = v27 >> 1;
        uint64_t v25 = (uint64_t *)((char *)v14 + 272 * (v27 >> 1));
        char v42 = 0;
        unint64_t v29 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1}>((char *)v13, (char *)a3, v25);
        unint64_t v26 = v28;
        uint64_t v24 = (kaldi::quasar::TranslationUtil::NbestElement *)v29;
        uint64_t v23 = 0xF0F0F0F0F0F0F0F1 * ((v29 - (char *)v13) >> 4);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v22 = v9;
        }
        else {
          uint64_t v22 = v9 + 1;
        }
        uint64_t v23 = v22 >> 1;
        uint64_t v24 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v13 + 272 * (v22 >> 1));
        uint64_t v25 = (uint64_t *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>((char *)v14, (char *)v13, v24);
        unint64_t v26 = 0xF0F0F0F0F0F0F0F1 * (((char *)v25 - (char *)v14) >> 4);
      }
      float v34 = a3;
      if (v25 == (uint64_t *)v13)
      {
        a3 = v24;
      }
      else if (v13 == v24)
      {
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)v25;
      }
      else
      {
        unint64_t v30 = v26;
        uint64_t v31 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((const kaldi::quasar::TranslationUtil::NbestElement *)v25, (uint64_t)v13, (uint64_t)v24);
        unint64_t v26 = v30;
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)v31;
      }
      a5 -= v26;
      v9 -= v23;
      if ((uint64_t)(v26 + v23) >= a5 + v9)
      {
        uint64_t v33 = v34;
        unint64_t v35 = v26;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a3, v24, v33, v36, a5, v9, a7, a8);
        uint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v25;
        a4 = v36;
        uint64_t v9 = v23;
        a5 = v35;
      }
      else
      {
        int v32 = v25;
        a4 = v36;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, v32, a3, v36, v26, v23, a7, a8);
        uint64_t v41 = a3;
        uint64_t v14 = a3;
        uint64_t v13 = v24;
        a3 = v34;
      }
      uint64_t v40 = (uint64_t)v13;
    }
    while (v9);
  }
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    uint64_t v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 + 272);
    if (v6 != a2)
    {
      uint64_t v7 = 1;
      unint64_t v8 = this;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v29, v6);
        uint64_t v9 = v29;
        if (v30 == v29)
        {
          LODWORD(v11) = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            unint64_t v10 = *(int *)(v9 + 232) + (uint64_t)(int)v10;
            v9 += 240;
          }
          while (v9 != v30);
          unint64_t v11 = v10 / (0xEEEEEEEEEEEEEEEFLL * ((v30 - v29) >> 4));
        }
        uint64_t v13 = *(void *)v8;
        uint64_t v12 = *((void *)v8 + 1);
        if (v12 == *(void *)v8)
        {
          LODWORD(v15) = 0;
        }
        else
        {
          LODWORD(v14) = 0;
          do
          {
            unint64_t v14 = *(int *)(v13 + 232) + (uint64_t)(int)v14;
            v13 += 240;
          }
          while (v13 != v12);
          unint64_t v15 = v14 / (0xEEEEEEEEEEEEEEEFLL * ((v12 - *(void *)v8) >> 4));
        }
        unint64_t v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v29);
        if ((int)v11 <= (int)v15)
        {
          __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272), v6);
          ++v7;
        }
        else
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272), v8);
          ++v7;
          unint64_t v17 = this;
          if (v8 != this)
          {
            while (1)
            {
              kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27, v6);
              uint64_t v18 = v27;
              if (v28 == v27)
              {
                LODWORD(v20) = 0;
              }
              else
              {
                LODWORD(v19) = 0;
                do
                {
                  unint64_t v19 = *(int *)(v18 + 232) + (uint64_t)(int)v19;
                  v18 += 240;
                }
                while (v18 != v28);
                unint64_t v20 = v19 / (0xEEEEEEEEEEEEEEEFLL * ((v28 - v27) >> 4));
              }
              unint64_t v21 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 - 272);
              uint64_t v22 = *((void *)v8 - 33);
              uint64_t v23 = *((void *)v8 - 34);
              if (v22 == v23)
              {
                LODWORD(v26) = 0;
              }
              else
              {
                LODWORD(v24) = 0;
                unint64_t v25 = 0xEEEEEEEEEEEEEEEFLL * ((v22 - v23) >> 4);
                do
                {
                  unint64_t v24 = *(int *)(v23 + 232) + (uint64_t)(int)v24;
                  v23 += 240;
                }
                while (v23 != v22);
                unint64_t v26 = v24 / v25;
              }
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27);
              if ((int)v20 <= (int)v26) {
                break;
              }
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8, (uint64_t)v8 - 272);
              unint64_t v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 - 272);
              if (v21 == this)
              {
                unint64_t v17 = this;
                goto LABEL_31;
              }
            }
            unint64_t v17 = v8;
          }
LABEL_31:
          __n128 result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v17, (uint64_t)v6);
        }
        uint64_t v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272);
        unint64_t v8 = v16;
      }
      while (v6 != a2);
    }
  }
  return result;
}

void sub_1B2339B38(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *result, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, kaldi::quasar::TranslationUtil::NbestElement *a4, kaldi::quasar::TranslationUtil::NbestElement *a5)
{
  if (result == a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = a5;
LABEL_21:
    while (a3 != a4)
    {
      __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, a3);
      a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      unint64_t v10 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      ++v9;
    }
  }
  else
  {
    unint64_t v8 = result;
    uint64_t v9 = 0;
    unint64_t v10 = a5;
    while (a3 != a4)
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, a3);
      uint64_t v11 = v19;
      if (v20 == v19)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          unint64_t v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
          v11 += 240;
        }
        while (v11 != v20);
        unint64_t v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      uint64_t v15 = *(void *)v8;
      uint64_t v14 = *((void *)v8 + 1);
      if (v14 == *(void *)v8)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v16) = 0;
        do
        {
          unint64_t v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
          v15 += 240;
        }
        while (v15 != v14);
        unint64_t v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - *(void *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v13 <= (int)v17)
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, v8);
        unint64_t v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
      }
      else
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, a3);
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      ++v9;
      unint64_t v10 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      if (v8 == a2) {
        goto LABEL_21;
      }
    }
    if (v8 != a2)
    {
      uint64_t v18 = 0;
      do
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v18), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v18));
        ++v9;
        v18 += 272;
      }
      while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v18) != a2);
    }
  }
  return result;
}

void sub_1B2339CFC(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *a1, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  uint64_t v7 = (uint64_t *)this;
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      uint64_t v12 = 0;
      unint64_t v16 = this;
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v16 = this;
      unint64_t v17 = a1;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v16, v17);
        ++v12;
        unint64_t v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272);
        unint64_t v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
      }
      while (v17 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v7, (uint64_t)v16, a2, a3, (uint64_t)a1);
  }
  else
  {
    if (a2 == a3)
    {
      uint64_t v12 = 0;
      unint64_t v13 = this;
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = this;
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13, v14);
        ++v12;
        uint64_t v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        unint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      }
      while (v14 != a3);
    }
    uint64_t v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>>((uint64_t)v13, (uint64_t)v13, (uint64_t)v7, (uint64_t)v7, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3, (int)&v18);
  }
  if (v7 && v12)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v7);
      v7 += 34;
      --v12;
    }
    while (v12);
  }
}

void sub_1B2339E68(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>(char *a1, char *a2, kaldi::quasar::TranslationUtil::NbestElement *a3)
{
  uint64_t v3 = a1;
  if (a2 != a1)
  {
    unint64_t v5 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 4);
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v15, a3);
      uint64_t v6 = v15;
      if (v16 == v15)
      {
        LODWORD(v8) = 0;
      }
      else
      {
        LODWORD(v7) = 0;
        do
        {
          unint64_t v7 = *(int *)(v6 + 232) + (uint64_t)(int)v7;
          v6 += 240;
        }
        while (v6 != v16);
        unint64_t v8 = v7 / (0xEEEEEEEEEEEEEEEFLL * ((v16 - v15) >> 4));
      }
      uint64_t v9 = (uint64_t *)&v3[272 * (v5 >> 1)];
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      if (v10 == *v9)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          unint64_t v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
          v11 += 240;
        }
        while (v11 != v10);
        unint64_t v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v10 - *v9) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v15);
      if ((int)v8 > (int)v13)
      {
        v5 >>= 1;
      }
      else
      {
        uint64_t v3 = (char *)(v9 + 34);
        v5 += ~(v5 >> 1);
      }
    }
    while (v5);
  }
  return v3;
}

uint64_t *std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(uint64_t *result, uint64_t a2, kaldi::quasar::TranslationUtil::NbestElement *a3, kaldi::quasar::TranslationUtil::NbestElement *a4, uint64_t a5)
{
  if (result != (uint64_t *)a2)
  {
    uint64_t v21 = v5;
    uint64_t v22 = v6;
    uint64_t v11 = result;
    while (a3 != a4)
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, a3);
      uint64_t v12 = v19;
      if (v20 == v19)
      {
        LODWORD(v14) = 0;
      }
      else
      {
        LODWORD(v13) = 0;
        do
        {
          unint64_t v13 = *(int *)(v12 + 232) + (uint64_t)(int)v13;
          v12 += 240;
        }
        while (v12 != v20);
        unint64_t v14 = v13 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      uint64_t v16 = *v11;
      uint64_t v15 = v11[1];
      if (v15 == *v11)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        LODWORD(v17) = 0;
        do
        {
          unint64_t v17 = *(int *)(v16 + 232) + (uint64_t)(int)v17;
          v16 += 240;
        }
        while (v16 != v15);
        unint64_t v18 = v17 / (0xEEEEEEEEEEEEEEEFLL * ((v15 - *v11) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v14 <= (int)v18)
      {
        __n128 result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)v11);
        v11 += 34;
      }
      else
      {
        __n128 result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)a3);
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      a5 += 272;
      if (v11 == (uint64_t *)a2) {
        return result;
      }
    }
    return (uint64_t *)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,0>((uint64_t)v11, a2, a5);
  }
  return result;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  if (a2 != a4)
  {
    uint64_t v14 = a2;
    uint64_t v15 = a10 - 272;
    while (a6 != a8)
    {
      BOOL v16 = std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>::operator()[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement>(a11, (uint64_t *)(a6 - 272), (kaldi::quasar::TranslationUtil::NbestElement *)(v14 - 272));
      if (v16) {
        uint64_t v17 = a6 - 272;
      }
      else {
        uint64_t v17 = v14 - 272;
      }
      if (v16) {
        a6 -= 272;
      }
      else {
        v14 -= 272;
      }
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v15, v17);
      v15 -= 272;
      if (v14 == a4) {
        return;
      }
    }
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = v15 + v18;
      v18 -= 272;
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v19, v14 + v18);
    }
    while (v14 + v18 != a4);
  }
}

BOOL std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>::operator()[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement>(int a1, uint64_t *a2, kaldi::quasar::TranslationUtil::NbestElement *a3)
{
  kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v13, a3);
  uint64_t v4 = v13;
  if (v14 == v13)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    do
    {
      unint64_t v5 = *(int *)(v4 + 232) + (uint64_t)(int)v5;
      v4 += 240;
    }
    while (v4 != v14);
    unint64_t v6 = v5 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - v13) >> 4));
  }
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7 == *a2)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    LODWORD(v9) = 0;
    do
    {
      unint64_t v9 = *(int *)(v8 + 232) + (uint64_t)(int)v9;
      v8 += 240;
    }
    while (v8 != v7);
    unint64_t v10 = v9 / (0xEEEEEEEEEEEEEEEFLL * ((v7 - *a2) >> 4));
  }
  BOOL v11 = (int)v6 > (int)v10;
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v13);
  return v11;
}

char *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1}>(char *a1, char *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a2 != a1)
  {
    unint64_t v5 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 4);
    do
    {
      unint64_t v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)&v3[272 * (v5 >> 1)];
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v15, v6);
      uint64_t v7 = v15;
      if (v16 == v15)
      {
        LODWORD(v9) = 0;
      }
      else
      {
        LODWORD(v8) = 0;
        do
        {
          unint64_t v8 = *(int *)(v7 + 232) + (uint64_t)(int)v8;
          v7 += 240;
        }
        while (v7 != v16);
        unint64_t v9 = v8 / (0xEEEEEEEEEEEEEEEFLL * ((v16 - v15) >> 4));
      }
      uint64_t v11 = *a3;
      uint64_t v10 = a3[1];
      if (v10 == *a3)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          unint64_t v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
          v11 += 240;
        }
        while (v11 != v10);
        unint64_t v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v10 - *a3) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v15);
      if ((int)v9 <= (int)v13) {
        v5 >>= 1;
      }
      else {
        v5 += ~(v5 >> 1);
      }
      if ((int)v9 > (int)v13) {
        uint64_t v3 = (char *)v6 + 272;
      }
    }
    while (v5);
  }
  return v3;
}

kaldi::quasar::TranslationUtil::NbestElement *std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  __n128 result = (kaldi::quasar::TranslationUtil::NbestElement *)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (kaldi::quasar::TranslationUtil::NbestElement *)*((void *)result - 1);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272 * a2);
      uint64_t v14 = 272 * a2;
      do
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v7);
        uint64_t v7 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
        v14 -= 272;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xF0F0F0F0F0F0F0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x78787878787878) {
      unint64_t v11 = 0xF0F0F0F0F0F0F0;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v22 = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>((uint64_t)result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = (kaldi::quasar::TranslationUtil::NbestElement *)&v12[272 * v8];
    v19[0] = v12;
    v19[1] = v15;
    uint64_t v20 = v15;
    uint64_t v21 = &v12[272 * v11];
    uint64_t v16 = 17 * a2;
    uint64_t v17 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272 * a2);
    uint64_t v18 = 16 * v16;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v15);
      uint64_t v15 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      v18 -= 272;
    }
    while (v18);
    uint64_t v20 = v17;
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(a1, v19);
    return (kaldi::quasar::TranslationUtil::NbestElement *)std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1B233A4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "Nbestlist cannot be null");
    goto LABEL_91;
  }
  if (!*(unsigned char *)(a3 + 307) || (uint64_t v6 = (unsigned char *)(a1 + 4896), !*(unsigned char *)(a1 + 5237)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "Decoder not configured for SentencePiece ID decoding.");
    goto LABEL_91;
  }
  uint64_t v9 = *(void *)(a1 + 136);
  if (v9 && !*(unsigned char *)(v9 + 2461))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "Model not configured for SentencePiece ID decoding.");
LABEL_91:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
  }
  int v10 = *(_DWORD *)(a1 + 5224);
  int v11 = *(_DWORD *)(a1 + 5200);
  int v12 = *(_DWORD *)(a1 + 5188);
  int v13 = *(_DWORD *)(a1 + 5192);
  int v14 = *(_DWORD *)(a1 + 5196);
  *(_DWORD *)(a1 + 5200) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3) {
    *(_DWORD *)(a1 + 5188) = *(_DWORD *)a3;
  }
  float v15 = *(float *)(a3 + 4);
  if (v15 != 0.0) {
    *(float *)(a1 + 5192) = v15;
  }
  int v16 = *(_DWORD *)(a3 + 8);
  if (v16) {
    *(_DWORD *)(a1 + 5196) = v16;
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ValidateDecodingParameters(*(float *)(a3 + 176), a1, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 172));
  uint64_t v18 = *a4;
  for (uint64_t i = a4[1];
        i != v18;
  a4[1] = v18;
  if (*(unsigned char *)(a1 + 113)) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = *(void *)(a1 + 32) != 0;
  }
  if (v19 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Input Hammer not supported for sentencepiece id decoding.", 57);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
  }
  kaldi::quasar::MultiLangDecorator::Apply(a1 + 120, (uint64_t)a2, a3 + 64, a3 + 88, *(void *)(*(void *)(a1 + 136) + 552), (uint64_t)&v45);
  if (*(unsigned char *)(a3 + 232)) {
    int v20 = kaldi::quasar::MultiLangDecorator::NumTagTokens((kaldi::quasar::MultiLangDecorator *)(a1 + 120));
  }
  else {
    int v20 = 0;
  }
  *(_DWORD *)(a1 + 5204) = v20;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(a3);
    if (v44 >= 0) {
      uint64_t v21 = (void **)&v42;
    }
    else {
      uint64_t v21 = v42;
    }
    if (v44 >= 0) {
      uint64_t v22 = HIBYTE(v44);
    }
    else {
      uint64_t v22 = (uint64_t)v43;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v21, v22);
    if (SHIBYTE(v44) < 0) {
      operator delete(v42);
    }
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v41, 1);
      kaldi::JoinVectorToString<int>(a2, " ");
      if (v44 >= 0) {
        uint64_t v23 = (void **)&v42;
      }
      else {
        uint64_t v23 = v42;
      }
      if (v44 >= 0) {
        uint64_t v24 = HIBYTE(v44);
      }
      else {
        uint64_t v24 = (uint64_t)v43;
      }
      unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v23, v24);
      unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" -> ", 4);
      kaldi::JoinVectorToString<int>(&v45, " ");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44) < 0) {
        operator delete(v42);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v41);
    }
  }
  uint64_t v29 = v46;
  if (v46 == v45)
  {
    float v32 = 3.4028e38;
    if (!v46) {
      return v32;
    }
    goto LABEL_86;
  }
  char v42 = 0;
  unint64_t v43 = 0;
  uint64_t v44 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(&v42, *(void **)(a3 + 240), *(void **)(a3 + 248), (uint64_t)(*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 4);
  if (v6[344]) {
    std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::push_back[abi:ne180100]((uint64_t *)&v42, (long long *)(a1 + 392));
  }
  if (v43 != v42 && *(_DWORD *)(a1 + 5220) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Phrasebook (kaldi level) not supported for sentencepiece id decoding.", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
  }
  uint64_t v30 = *(void *)(a1 + 136);
  if (v30 && *(unsigned char *)(v30 + 2164) && *(unsigned char *)(v30 + 2165)) {
    v6[808] = 1;
  }
  int v31 = *(_DWORD *)(a1 + 5220);
  if (a4[1] == *a4)
  {
    if (v31 == 3) {
      goto LABEL_68;
    }
  }
  else if (v31 != 2)
  {
    goto LABEL_68;
  }
  if (*v6) {
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (uint64_t)&v45, a3);
  }
LABEL_68:
  memset(&v41, 0, sizeof(v41));
  uint64_t v33 = v45;
  for (j = v46; v33 != j; ++v33)
  {
    std::to_string(&v39, *v33);
    std::string::push_back(&v39, 32);
    std::string __p = v39;
    memset(&v39, 0, sizeof(v39));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v35 = &__p;
    }
    else {
      unint64_t v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v41, (const std::string::value_type *)v35, v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  float v37 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, &v41, a3, (uint64_t)a4);
  *(_DWORD *)(a1 + 5224) = v10;
  *(_DWORD *)(a1 + 5200) = v11;
  *(_DWORD *)(a1 + 5188) = v12;
  *(_DWORD *)(a1 + 5192) = v13;
  *(_DWORD *)(a1 + 5196) = v14;
  if (v37 == -1.0) {
    float v32 = 3.4028e38;
  }
  else {
    float v32 = v37;
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  uint64_t v29 = v45;
  if (v45)
  {
LABEL_86:
    uint64_t v46 = v29;
    operator delete(v29);
  }
  return v32;
}

void sub_1B233AAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  uint64_t v24 = (void **)(v21 - 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v24);
  uint64_t v23 = *(void **)(v21 - 144);
  if (v23)
  {
    *(void *)(v21 - 136) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ValidateDecodingParameters(float a1, uint64_t a2, int a3, int a4)
{
  if (a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder beam (", 14);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, ") should not be negative.");
    goto LABEL_11;
  }
  if (a1 < 0.0 || a1 > 1000.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder confidence threshold (", 30);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, ") should be in the range [0, 1000].");
    goto LABEL_11;
  }
  if (a4 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder maximum nbest list size (", 33);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, ") should not be negative.");
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = &v8;
  if (*(unsigned char *)(a3 + 308))
  {
    kaldi::quasar::Encdec::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v4);
    std::__tree<std::string>::destroy((uint64_t)&v7, v8);
    uint64_t v3 = (char *)v5;
    uint64_t v7 = v4;
    unint64_t v8 = (char *)v5;
    uint64_t v9 = v6;
    if (v6)
    {
      *(void *)(v5 + 16) = &v8;
      uint64_t v4 = (char **)&v5;
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v7 = &v8;
    }
    std::__tree<std::string>::destroy((uint64_t)&v4, v3);
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst();
}

void sub_1B233B088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  a9 = (void **)(v11 - 192);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~ImplToFst((void *)(v11 - 168));
  std::__tree<std::string>::destroy(v11 - 152, *(char **)(v11 - 144));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8 && *(unsigned char *)(v8 + 2164))
  {
    if (*(unsigned char *)(v8 + 2165)) {
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ShiftAlignments(a1, (uint64_t **)a4);
    }
    kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(a4);
    kaldi::quasar::TranslationUtil::MergeAlignments(a4);
  }
  uint64_t v9 = *(void ***)(a3 + 200);
  float v10 = -1.0;
  if (v9) {
    BOOL v11 = *(_DWORD *)(a3 + 184) == 3;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11) {
    float v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v9, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::JoinBPEUnitsInNbestList(a1, a4);
  int v12 = *(void ***)(a3 + 200);
  if (v12 && *(_DWORD *)(a3 + 184) == 4)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Word level LM re-scoring", 24);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
      int v12 = *(void ***)(a3 + 200);
    }
    float v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v12, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  }
  int v13 = *(std::string **)a4;
  int v14 = *(std::string **)(a4 + 8);
  while (v13 != v14)
  {
    std::string::operator=(v13 + 5, a2);
    std::string::operator=(v13 + 6, a2);
    int v13 = (std::string *)((char *)v13 + 272);
  }
  kaldi::quasar::NNMTTransliterator::Transliterate<std::vector<kaldi::quasar::TranslationUtil::NbestElement>>(a1 + 408, (uint64_t *)a4);
  if (kaldi::g_kaldi_verbose_level > 0)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v17, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Applying confidence scores to n-best list", 41);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v17);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(a1, (uint64_t *)a4, (int)*(float *)(a3 + 176));
  unint64_t v15 = *(int *)(a3 + 172);
  if (v15 && 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 4) > v15) {
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::resize((uint64_t *)a4, v15);
  }
  return v10;
}

void sub_1B233B300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::GetTiming(const void **this@<X0>, uint64_t a2@<X8>)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v5, "time total");
  v5[3] = this[287];
  std::string::basic_string[abi:ne180100]<0>(v6, "time start feedforward");
  v6[3] = this[288];
  std::string::basic_string[abi:ne180100]<0>(v7, "time start ff graph");
  v7[3] = this[289];
  std::string::basic_string[abi:ne180100]<0>(v8, "time start ff input graph");
  v8[3] = this[290];
  std::string::basic_string[abi:ne180100]<0>(v9, "time start ff handover graph");
  v9[3] = this[291];
  std::string::basic_string[abi:ne180100]<0>(v10, "time get history state");
  v10[3] = this[292];
  std::string::basic_string[abi:ne180100]<0>(v11, "time set history state");
  v11[3] = this[293];
  std::string::basic_string[abi:ne180100]<0>(v12, "time feed forward");
  v12[3] = this[294];
  std::string::basic_string[abi:ne180100]<0>(v13, "time ff graph");
  v13[3] = this[295];
  std::string::basic_string[abi:ne180100]<0>(v14, "time ff readout");
  uint64_t v14[3] = this[296];
  std::map<std::string,double>::map[abi:ne180100](a2, v5, 10);
  uint64_t v4 = 40;
  do
  {
    if (*((char *)&v5[v4 - 1] - 1) < 0) {
      operator delete((void *)v5[v4 - 4]);
    }
    v4 -= 4;
  }
  while (v4 * 8);
}

void sub_1B233B4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 320;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0) {
      operator delete(*(void **)(v10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(exception_object);
    }
  }
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeCore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (double *)(a1 + 4856);
  uint64_t v8 = a1 + 5680;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v34, v7, v8, &__p);
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)__p);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    int v31 = 0;
    float v32 = 0;
    uint64_t v33 = 0;
    kaldi::JoinVectorToString<int>(a2, ",", (uint64_t)&v31);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input : ", 8);
      if (v33 >= 0) {
        uint64_t v10 = (void **)&v31;
      }
      else {
        uint64_t v10 = v31;
      }
      if (v33 >= 0) {
        uint64_t v11 = HIBYTE(v33);
      }
      else {
        uint64_t v11 = (uint64_t)v32;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v31);
    }
  }
  float v12 = (float)(int)(((unint64_t)((char *)a2[1] - (char *)*a2) >> 2)
                   - (*(_DWORD *)(a3 + 236)
                    + *(_DWORD *)(a1 + 5204)));
  int v13 = (int)(float)(*(float *)(a1 + 5200) * v12);
  if (v13 <= 1) {
    int v13 = 1;
  }
  int v25 = v13;
  int v14 = *(_DWORD *)(a1 + 5188);
  float v15 = *(float *)(a1 + 5192);
  if (v15 != -1.0)
  {
    int v16 = (int)(float)(v15 * v12);
    if (*(_DWORD *)(a1 + 5196) > v16) {
      int v16 = *(_DWORD *)(a1 + 5196);
    }
    if (v16 < v14) {
      int v14 = v16;
    }
  }
  uint64_t v17 = (uint64_t *)(a1 + 136);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel((uint64_t *)(a1 + 136), a3 + 136, a3 + 88, 0, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*(_DWORD *)(a3 + 160))
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam decoding", 13);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, (uint64_t)a2, 0);
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Greedy decoding", 15);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  kaldi::quasar::Encdec::Start(*v17, *(_DWORD *)(a3 + 312), (const std::string *)(a3 + 112));
  uint64_t v18 = *(void *)(a1 + 136);
  int v19 = *(_DWORD *)(a3 + 288);
  int v20 = *(_DWORD *)(a3 + 292);
  long long __p = 0uLL;
  uint64_t v30 = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(a1, a3 + 64, a3 + 88, (uint64_t *)(a3 + 328), (uint64_t)&v31);
  kaldi::quasar::Encdec::ConstrainSoftmax(v18, a3 + 264, v19, v20, a2, (int **)&__p, &v31);
  std::__tree<int>::destroy((uint64_t)&v31, v32);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  (*(void (**)(uint64_t))(*(void *)a4 + 224))(a4);
  long long __p = 0uLL;
  uint64_t v30 = 0;
  float v21 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::Encdec>(*v17, (uint64_t *)a2, (uint64_t)&__p, (const std::string *)(a3 + 112), a4, v25, v14);
  kaldi::quasar::Encdec::Finish((kaldi::quasar::Encdec *)*v17, v22);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v34, v23);
  return v21;
}

void sub_1B233B8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v19 - 152), v21);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,double>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1B233B9CC(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::Encdec>(uint64_t a1, uint64_t *a2, uint64_t a3, const std::string *a4, uint64_t a5, int a6, int a7)
{
  long long v25 = 0u;
  long long v24 = 0u;
  int32x2_t v23 = (int32x2_t)&unk_1F0A51768;
  char v26 = 0;
  kaldi::CuMatrix<float>::Resize(&v23, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v16 = v15 - *a2;
  if (v15 != *a2)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 >> 2;
    uint64_t v19 = (float *)v24;
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    uint64_t v20 = 4 * (int)v25;
    do
    {
      *uint64_t v19 = (float)*(int *)(v14 + 4 * v17++);
      uint64_t v19 = (float *)((char *)v19 + v20);
    }
    while (v18 != v17);
  }
  float v21 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::Encdec>(a1, (uint64_t)&v23, a3, a4, a5, a6, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v23);
  return v21;
}

void sub_1B233BB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::Encdec>(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, uint64_t a5, int a6, int a7)
{
  kaldi::quasar::Encdec::ResetHistoryState((kaldi::quasar::Encdec *)a1);
  kaldi::quasar::Encdec::Start(a1, 1, a4);
  kaldi::quasar::Encdec::StartFeedforward(a1, a2, 0, 0);
  long long v140 = 0u;
  long long v139 = 0u;
  int32x2_t v138 = (int32x2_t)&unk_1F0A51768;
  char v141 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v136, 1, 1, 0, 0, 0);
  float *v137 = (float)(*(_DWORD *)(a1 + 824) - 1);
  v133 = 0;
  v134 = 0;
  v135 = 0;
  uint64_t v130 = 0;
  v131 = 0;
  unint64_t v132 = 0;
  long long __p = 0;
  v128 = 0;
  v129 = 0;
  int v14 = 0;
  if (a7 < 0)
  {
    float v15 = 0.0;
  }
  else
  {
    uint64_t v110 = a3 + 16;
    float v15 = 0.0;
    while (1)
    {
      kaldi::quasar::Encdec::Feedforward(a1, (uint64_t)&v136, &v138);
      kaldi::Matrix<float>::Matrix((uint64_t)v122, HIDWORD(v139), DWORD2(v139), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v138, (int *)v122, 111);
      if (v14 == a7)
      {
        int SoftmaxEosId = kaldi::quasar::Encdec::GetSoftmaxEosId((kaldi::quasar::Encdec *)a1);
        float v17 = *((float *)v122[0] + SoftmaxEosId);
        int v18 = *(_DWORD *)(a1 + 828) - 1;
      }
      else
      {
        uint64_t v23 = 0;
        int v18 = 0;
        float v17 = *(unsigned char *)(a1 + 1519) ? 0.0 : -3.4028e38;
        while (v23 != kaldi::MatrixBase<float>::NumCols((uint64_t)v122))
        {
          int VocabWordIdx = kaldi::quasar::Encdec::GetVocabWordIdx((kaldi::quasar::Encdec *)a1, v23);
          if ((v14 >= a6 || VocabWordIdx != *(_DWORD *)(a1 + 828) - 1)
            && (!*(unsigned char *)(a1 + 1505) || VocabWordIdx != *(_DWORD *)(a1 + 832) - 1)
            && *((float *)v122[0] + v23) > v17)
          {
            float v17 = *((float *)v122[0] + v23);
            int v18 = VocabWordIdx;
          }
          ++v23;
        }
      }
      int v19 = *(unsigned __int8 *)(a1 + 1519);
      float v20 = logf(v17);
      if (v19) {
        float v17 = v20;
      }
      float *v137 = (float)v18;
      float v21 = v128;
      if (v128 >= (float *)v129)
      {
        long long v25 = (float *)__p;
        uint64_t v26 = ((char *)v128 - (unsigned char *)__p) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v129 - (unsigned char *)__p;
        if ((v129 - (unsigned char *)__p) >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v129, v29);
          long long v25 = (float *)__p;
          float v21 = v128;
        }
        else
        {
          uint64_t v30 = 0;
        }
        int v31 = (float *)&v30[4 * v26];
        *int v31 = v17;
        clockid_t v22 = v31 + 1;
        while (v21 != v25)
        {
          int v32 = *((_DWORD *)v21-- - 1);
          *((_DWORD *)v31-- - 1) = v32;
        }
        long long __p = v31;
        v128 = v22;
        v129 = &v30[4 * v29];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        float *v128 = v17;
        clockid_t v22 = v21 + 1;
      }
      v128 = v22;
      uint64_t v33 = *(_DWORD **)(a1 + 2168);
      int v34 = v33 == *(_DWORD **)(a1 + 2176) ? -1 : *v33;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      kaldi::quasar::Encdec::GetAlignmentProbabilities((void *)a1, (uint64_t)&v118, 0);
      int v35 = *(_DWORD *)(a1 + 828) - 1;
      if (v18 == v35)
      {
        if (*(unsigned char *)(a1 + 2164) && *(unsigned char *)(a1 + 2165))
        {
          std::string::size_type v36 = v134;
          if (v134 >= (int *)v135)
          {
            uint64_t v46 = (int *)v133;
            uint64_t v47 = ((char *)v134 - v133) >> 2;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62) {
LABEL_168:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v49 = v135 - v133;
            if ((v135 - v133) >> 1 > v48) {
              unint64_t v48 = v49 >> 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v50 = v48;
            }
            if (v50)
            {
              uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v135, v50);
              uint64_t v46 = (int *)v133;
              std::string::size_type v36 = v134;
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v68 = (int *)&v51[4 * v47];
            *uint64_t v68 = v34;
            float v37 = v68 + 1;
            while (v36 != v46)
            {
              int v69 = *--v36;
              *--uint64_t v68 = v69;
            }
            v133 = (char *)v68;
            v134 = v37;
            v135 = &v51[4 * v50];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            int *v134 = v34;
            float v37 = v36 + 1;
          }
          v134 = v37;
          float v70 = v131;
          if ((unint64_t)v131 >= v132)
          {
            uint64_t v71 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v130, (uint64_t)&v118);
          }
          else
          {
            void *v131 = 0;
            v70[1] = 0;
            v70[2] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v70, v118, (uint64_t)v119, ((unsigned char *)v119 - (unsigned char *)v118) >> 2);
            uint64_t v71 = (uint64_t)(v70 + 3);
          }
          v131 = (void *)v71;
          int v72 = v18 + 1;
          uint64_t v74 = *(int **)(a3 + 8);
          unint64_t v73 = *(void *)(a3 + 16);
          if ((unint64_t)v74 >= v73)
          {
            float v76 = *(int **)a3;
            uint64_t v77 = ((uint64_t)v74 - *(void *)a3) >> 2;
            unint64_t v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v79 = v73 - (void)v76;
            if (v79 >> 1 > v78) {
              unint64_t v78 = v79 >> 1;
            }
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v80 = v78;
            }
            if (v80)
            {
              uint64_t v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v110, v80);
              float v76 = *(int **)a3;
              uint64_t v74 = *(int **)(a3 + 8);
            }
            else
            {
              uint64_t v81 = 0;
            }
            std::string v82 = (int *)&v81[4 * v77];
            *std::string v82 = v72;
            double v75 = v82 + 1;
            while (v74 != v76)
            {
              int v83 = *--v74;
              *--std::string v82 = v83;
            }
            *(void *)a3 = v82;
            *(void *)(a3 + 8) = v75;
            *(void *)(a3 + 16) = &v81[4 * v80];
            if (v76) {
              operator delete(v76);
            }
          }
          else
          {
            *uint64_t v74 = v72;
            double v75 = v74 + 1;
          }
          *(void *)(a3 + 8) = v75;
          unsigned int v84 = v128;
          if (v128 >= (float *)v129)
          {
            int v86 = (float *)__p;
            uint64_t v87 = ((char *)v128 - (unsigned char *)__p) >> 2;
            unint64_t v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v89 = v129 - (unsigned char *)__p;
            if ((v129 - (unsigned char *)__p) >> 1 > v88) {
              unint64_t v88 = v89 >> 1;
            }
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v88;
            }
            if (v90)
            {
              uint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v129, v90);
              int v86 = (float *)__p;
              unsigned int v84 = v128;
            }
            else
            {
              uint64_t v91 = 0;
            }
            v92 = (float *)&v91[4 * v87];
            float *v92 = 0.0;
            int32x2_t v85 = v92 + 1;
            while (v84 != v86)
            {
              int v93 = *((_DWORD *)v84-- - 1);
              *((_DWORD *)v92-- - 1) = v93;
            }
            long long __p = v92;
            v128 = v85;
            v129 = &v91[4 * v90];
            if (v86) {
              operator delete(v86);
            }
          }
          else
          {
            float *v128 = 0.0;
            int32x2_t v85 = v84 + 1;
          }
          v128 = v85;
        }
      }
      else
      {
        uint64_t v38 = v134;
        if (v134 >= (int *)v135)
        {
          uint64_t v40 = (int *)v133;
          uint64_t v41 = ((char *)v134 - v133) >> 2;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 62) {
            goto LABEL_168;
          }
          uint64_t v43 = v135 - v133;
          if ((v135 - v133) >> 1 > v42) {
            unint64_t v42 = v43 >> 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v135, v44);
            uint64_t v40 = (int *)v133;
            uint64_t v38 = v134;
          }
          else
          {
            int v45 = 0;
          }
          unint64_t v52 = (int *)&v45[4 * v41];
          int *v52 = v34;
          std::string v39 = v52 + 1;
          while (v38 != v40)
          {
            int v53 = *--v38;
            *--unint64_t v52 = v53;
          }
          v133 = (char *)v52;
          v134 = v39;
          v135 = &v45[4 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          int *v134 = v34;
          std::string v39 = v38 + 1;
        }
        v134 = v39;
        std::string::size_type v54 = v131;
        if ((unint64_t)v131 >= v132)
        {
          uint64_t v55 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v130, (uint64_t)&v118);
        }
        else
        {
          void *v131 = 0;
          v54[1] = 0;
          v54[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v54, v118, (uint64_t)v119, ((unsigned char *)v119 - (unsigned char *)v118) >> 2);
          uint64_t v55 = (uint64_t)(v54 + 3);
        }
        v131 = (void *)v55;
        int v56 = v18 + 1;
        uint64_t v58 = *(int **)(a3 + 8);
        unint64_t v57 = *(void *)(a3 + 16);
        if ((unint64_t)v58 >= v57)
        {
          v60 = *(int **)a3;
          uint64_t v61 = ((uint64_t)v58 - *(void *)a3) >> 2;
          unint64_t v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v63 = v57 - (void)v60;
          if (v63 >> 1 > v62) {
            unint64_t v62 = v63 >> 1;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64)
          {
            uint64_t v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v110, v64);
            v60 = *(int **)a3;
            uint64_t v58 = *(int **)(a3 + 8);
          }
          else
          {
            uint64_t v65 = 0;
          }
          unint64_t v66 = (int *)&v65[4 * v61];
          int *v66 = v56;
          unint64_t v59 = v66 + 1;
          while (v58 != v60)
          {
            int v67 = *--v58;
            *--unint64_t v66 = v67;
          }
          *(void *)a3 = v66;
          *(void *)(a3 + 8) = v59;
          *(void *)(a3 + 16) = &v65[4 * v64];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *uint64_t v58 = v56;
          unint64_t v59 = v58 + 1;
        }
        *(void *)(a3 + 8) = v59;
      }
      if (v118)
      {
        v119 = v118;
        operator delete(v118);
      }
      float v15 = v15 + v17;
      kaldi::Matrix<float>::~Matrix((uint64_t)v122);
      if (v18 == v35) {
        break;
      }
      if (v14++ == a7) {
        goto LABEL_138;
      }
    }
  }
  if (v14 == a7 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v122);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Decoder hit max sentence length : ", 34);
    int32x2_t v95 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" ", 1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v122);
  }
LABEL_138:
  if (*(unsigned char *)(a1 + 1504))
  {
    if (v133 != (char *)v134)
    {
      int v96 = (char *)(v134 - 1);
      if (v134 - 1 > (int *)v133)
      {
        int v97 = v133 + 4;
        do
        {
          int v98 = *((_DWORD *)v97 - 1);
          *((_DWORD *)v97 - 1) = *(_DWORD *)v96;
          *(_DWORD *)int v96 = v98;
          v96 -= 4;
          BOOL v99 = v97 >= v96;
          v97 += 4;
        }
        while (!v99);
      }
    }
  }
  uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 200))(a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 176))(a5, v100);
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    unint64_t v102 = 0;
  }
  else
  {
    uint64_t v101 = 0;
    unint64_t v102 = 0;
    uint64_t v103 = v100;
    do
    {
      uint64_t v104 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 200))(a5);
      if (v102 >= ((char *)v134 - v133) >> 2 || v102 >= (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v131 - v130) >> 3) <= v102) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v100 = v104;
      unsigned int v105 = *(_DWORD *)&v133[4 * v102];
      unsigned int v106 = *(_DWORD *)(*(void *)a3 + 4 * v102);
      float v107 = *((float *)__p + v102);
      v115 = 0;
      v116 = 0;
      uint64_t v117 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v115, *(const void **)(v130 + v101), *(void *)(v130 + v101 + 8), (uint64_t)(*(void *)(v130 + v101 + 8) - *(void *)(v130 + v101)) >> 2);
      LODWORD(v118) = 0;
      *((float *)&v118 + 1) = -v107;
      v120 = 0;
      uint64_t v121 = 0;
      v119 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v119, v115, (uint64_t)v116, (v116 - (unsigned char *)v115) >> 2);
      v122[0] = (void **)__PAIR64__(v106, v105);
      v122[1] = (void **)v118;
      v124 = 0;
      uint64_t v125 = 0;
      v123 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v123, v119, (uint64_t)v120, (v120 - (unsigned char *)v119) >> 2);
      int v126 = v100;
      (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)a5 + 208))(a5, v103, v122);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      if (v119)
      {
        v120 = v119;
        operator delete(v119);
      }
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      ++v102;
      v101 += 24;
      uint64_t v103 = v100;
    }
    while (v102 != (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  float v108 = -*((float *)__p + v102);
  v111[0] = 0;
  *(float *)&v111[1] = v108;
  v113 = 0;
  uint64_t v114 = 0;
  v112 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a5 + 184))(a5, v100, v111);
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (__p)
  {
    v128 = (float *)__p;
    operator delete(__p);
  }
  v122[0] = (void **)&v130;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v122);
  if (v133)
  {
    v134 = (int *)v133;
    operator delete(v133);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v136);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v138);
  return -v15;
}

void sub_1B233C5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,char a60,uint64_t a61)
{
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  a23 = &a60;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  uint64_t v63 = *(void **)(v61 - 240);
  if (v63)
  {
    *(void *)(v61 - 232) = v63;
    operator delete(v63);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 216);
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 168);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  uint64_t v16 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v15 = (uint64_t)a2 - 272;
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v16, &v15);
      }
    }
    else
    {
      unint64_t v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, a2, a3);
      }
      else
      {
        uint64_t v11 = a5;
        unint64_t v12 = a4 >> 1;
        int v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        unint64_t v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v9 >> 1)), a2, a3, v9 - (v9 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272 * v12));
          std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((uint64_t)v11, (uint64_t)v11 + 272 * v12, (uint64_t)v11 + 272 * v12, (uint64_t)v11 + 272 * v9, (uint64_t)a1, a3);
          if (v11)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v11);
              uint64_t v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)a1 + 272 * (v9 >> 1), a2, a3, v9 - (v9 >> 1), v11, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, (uint64_t)a1 + 272 * (v9 >> 1), (char *)a2, a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void sub_1B233C8F8(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = (uint64_t)a1 + 272;
    if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = (uint64_t)v8;
        uint64_t v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)v5;
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, v5, v9))
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v12, v8);
          uint64_t v10 = v7;
          while (1)
          {
            kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)a1 + v10 + 272, (uint64_t)a1 + v10);
            if (!v10) {
              break;
            }
            v10 -= 272;
            if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)v12, (uint64_t)a1 + v10))
            {
              uint64_t v11 = (uint64_t)a1 + v10 + 272;
              goto LABEL_10;
            }
          }
          uint64_t v11 = (uint64_t)a1;
LABEL_10:
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v11, (uint64_t)v12);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v12);
        }
        uint64_t v5 = (uint64_t)v8 + 272;
        v7 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272) != a2);
    }
  }
}

void sub_1B233CA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  if (a4)
  {
    uint64_t v9 = result;
    if (a4 == 2)
    {
      uint64_t v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      BOOL v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)result);
      if (v11) {
        unint64_t v12 = v10;
      }
      else {
        unint64_t v12 = v9;
      }
      if (!v11) {
        uint64_t v9 = v10;
      }
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v12);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v9);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, (char *)result + 272 * (a4 >> 1), a3, a4 >> 1, this, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)v9 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v9, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272 * (a4 >> 1)), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272 * (a4 >> 1)), a2, this, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, a2, this, a3);
    }
  }
  return result;
}

void sub_1B233CB9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, char *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v31 = a2;
  int v32 = a1;
  if (a6)
  {
    uint64_t v9 = a6;
    int v13 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
    unint64_t v14 = a1;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v14, v13, (kaldi::quasar::TranslationUtil::NbestElement *)a3, a4, a5, v9, a7);
        return;
      }
      if (!a5) {
        return;
      }
      uint64_t v15 = -a5;
      while (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v13, (uint64_t)v14))
      {
        unint64_t v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272);
        int v32 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272);
        if (__CFADD__(v15++, 1)) {
          return;
        }
      }
      uint64_t v17 = -v15;
      uint64_t v29 = a8;
      if (-v15 >= v9)
      {
        if (v15 == -1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v32, &v31);
          return;
        }
        if (v15 > 0) {
          uint64_t v17 = 1 - v15;
        }
        uint64_t v22 = v17 >> 1;
        unint64_t v14 = v32;
        float v21 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272 * (v17 >> 1));
        int v23 = *((_DWORD *)a4 + 2);
        uint64_t v34 = *(void *)a4;
        int v35 = v23;
        char v33 = 0;
        uint64_t v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare>((uint64_t)v13, (uint64_t)a3, (uint64_t)v21, (float *)&v34);
        uint64_t v19 = 0xF0F0F0F0F0F0F0F1 * ((v20 - (uint64_t)v13) >> 4);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v18 = v9;
        }
        else {
          uint64_t v18 = v9 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = (uint64_t)v13 + 272 * (v18 >> 1);
        unint64_t v14 = v32;
        float v21 = (const kaldi::quasar::TranslationUtil::NbestElement *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>((uint64_t)v32, (uint64_t)v13, v20, a4);
        uint64_t v22 = 0xF0F0F0F0F0F0F0F1 * ((v21 - v32) >> 4);
      }
      unint64_t v27 = v21;
      uint64_t v28 = a3;
      if (v21 == v13)
      {
        int v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = (char *)v20;
      }
      else if (v13 == (kaldi::quasar::TranslationUtil::NbestElement *)v20)
      {
        int v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = (char *)v21;
      }
      else
      {
        uint64_t v24 = (uint64_t)v13;
        int v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v21, v24, v20);
      }
      a5 = -v22 - v15;
      uint64_t v25 = v9 - v19;
      if (v22 + v19 >= v9 - v22 - v19 - v15)
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a3, v13, v28, a4, -v22 - v15, v25, a7, v29);
        int v13 = v27;
        uint64_t v25 = v19;
        a8 = v29;
        a5 = v22;
      }
      else
      {
        uint64_t v26 = v19;
        a8 = v29;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v14, v27, a3, a4, v22, v26, a7, v29);
        int v32 = (const kaldi::quasar::TranslationUtil::NbestElement *)a3;
        unint64_t v14 = (kaldi::quasar::TranslationUtil::NbestElement *)a3;
        a3 = v28;
      }
      uint64_t v31 = (uint64_t)v13;
      uint64_t v9 = v25;
    }
    while (v25);
  }
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *this, float *a4)
{
  if (result != a2)
  {
    uint64_t v7 = result;
    __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    uint64_t v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
    if (v8 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 1;
      BOOL v11 = this;
      do
      {
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v8, (uint64_t)v11))
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272), v11);
          ++v10;
          unint64_t v12 = this;
          if (v11 != this)
          {
            uint64_t v13 = v9;
            while (1)
            {
              unint64_t v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + v13);
              if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v8, (uint64_t)this + v13 - 272))break; {
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)this + v13, (uint64_t)this + v13 - 272);
              }
              v13 -= 272;
              if (!v13)
              {
                unint64_t v12 = this;
                break;
              }
            }
          }
          __n128 result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v12, (uint64_t)v8);
        }
        else
        {
          __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272), v8);
          ++v10;
        }
        uint64_t v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        v9 += 272;
        BOOL v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
      }
      while (v8 != a2);
    }
  }
  return result;
}

void sub_1B233CF4C(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, const kaldi::quasar::TranslationUtil::NbestElement *a3, const kaldi::quasar::TranslationUtil::NbestElement *a4, kaldi::quasar::TranslationUtil::NbestElement *a5, float *a6)
{
  if (result == a2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = a5;
LABEL_11:
    while (a3 != a4)
    {
      __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, a3);
      a3 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      unint64_t v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
      ++v11;
    }
  }
  else
  {
    uint64_t v10 = result;
    uint64_t v11 = 0;
    unint64_t v12 = a5;
    while (a3 != a4)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a6, (uint64_t)a3, (uint64_t)v10))
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, a3);
        a3 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      else
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, v10);
        uint64_t v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      }
      ++v11;
      unint64_t v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
      if (v10 == a2) {
        goto LABEL_11;
      }
    }
    if (v10 != a2)
    {
      uint64_t v13 = 0;
      do
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + v13), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v13));
        ++v11;
        v13 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v13) != a2);
    }
  }
  return result;
}

void sub_1B233D084(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *a1, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  uint64_t v7 = this;
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      uint64_t v12 = 0;
      uint64_t v16 = this;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v16 = this;
      uint64_t v17 = a1;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v16, v17);
        ++v12;
        uint64_t v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272);
        uint64_t v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
      }
      while (v17 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((uint64_t)v7, (uint64_t)v16, (uint64_t)a2, (uint64_t)a3, (uint64_t)a1, a4);
  }
  else
  {
    if (a2 == a3)
    {
      uint64_t v12 = 0;
      uint64_t v13 = this;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = this;
      unint64_t v14 = a2;
      do
      {
        uint64_t v15 = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13, v14);
        ++v12;
        unint64_t v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        uint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      }
      while (v14 != a3);
    }
    uint64_t v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>>((uint64_t)v13, (uint64_t)v13, (uint64_t)v7, (uint64_t)v7, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3, &v18);
  }
  if (v7 && v12)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v7);
      uint64_t v7 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
      --v12;
    }
    while (v12);
  }
}

void sub_1B233D1F0(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, const kaldi::quasar::TranslationUtil::NbestElement **a2, void **a3, float a4, float a5, float a6)
{
  uint64_t v11 = (double *)(a1 + 4856);
  uint64_t v12 = a1 + 5688;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v86, v11, v12, (long long *)__p);
  if (v85 < 0)
  {
    operator delete(__p[0]);
    if (!a2)
    {
LABEL_8:
      float v15 = 2147500000.0;
      goto LABEL_9;
    }
  }
  else if (!a2)
  {
    goto LABEL_8;
  }
  unint64_t v14 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
  if (!v14) {
    goto LABEL_8;
  }
  if (v14 == 1)
  {
    float v15 = 0.0;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Looking for UNK symbol ", 23);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(a1 + 136) + 560) + 88))(&v81);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"UNK label : ", 12);
      if ((v83 & 0x80u) == 0) {
        uint64_t v18 = &v81;
      }
      else {
        uint64_t v18 = v81;
      }
      if ((v83 & 0x80u) == 0) {
        uint64_t v19 = v83;
      }
      else {
        uint64_t v19 = v82;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    uint64_t v20 = v83;
    if ((v83 & 0x80u) != 0) {
      uint64_t v20 = v82;
    }
    if (!v20)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No UNK symbol in translation model vocabulary", 45);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    uint64_t v21 = (*(uint64_t (**)(void *))(*a3[4] + 120))(a3[4]);
    uint64_t v22 = v21;
    if (!v21)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have output symbol table", 48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v21 + 96))(v21, &v81);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LM UNK ID ", 10);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    if (v23 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have OOV symbol : ", 42);
      if ((v83 & 0x80u) == 0) {
        int v72 = &v81;
      }
      else {
        int v72 = v81;
      }
      if ((v83 & 0x80u) == 0) {
        uint64_t v73 = v83;
      }
      else {
        uint64_t v73 = v82;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    uint64_t v74 = a2;
    uint64_t v25 = *a2;
    uint64_t v24 = a2[1];
    if (v25 == v24)
    {
      float v15 = 2147500000.0;
    }
    else
    {
      float v26 = 1.0 - a4;
      float v15 = 2147500000.0;
      do
      {
        uint64_t v27 = ((uint64_t (*)(void **))**a3)(a3);
        if ((*((_DWORD *)v25 + 14) - 5) > 1)
        {
          uint64_t v29 = v27;
          uint64_t v31 = *(void *)v25;
          uint64_t v30 = *((void *)v25 + 1);
          float v32 = 0.0;
          while (v31 != v30)
          {
            uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 96))(v22, v31);
            if (v33 == -1)
            {
              uint64_t v33 = v23;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to find ", 15);
                uint64_t v34 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" in LM", 6);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
                uint64_t v33 = v23;
              }
            }
            if ((((uint64_t (*)(void **, uint64_t, uint64_t, void **))(*a3)[4])(a3, v29, v33, &v76) & 1) == 0)
            {
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                int v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Word lookup failure : ", 22);
                int v36 = *(char *)(v31 + 23);
                if (v36 >= 0) {
                  uint64_t v37 = v31;
                }
                else {
                  uint64_t v37 = *(void *)v31;
                }
                if (v36 >= 0) {
                  uint64_t v38 = *(unsigned __int8 *)(v31 + 23);
                }
                else {
                  uint64_t v38 = *(void *)(v31 + 8);
                }
                std::string v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" (label=", 8);
                uint64_t v40 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)")", 1);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              }
              float v32 = INFINITY;
              break;
            }
            uint64_t v29 = HIDWORD(v77);
            float v32 = v32 + *(float *)&v77;
            v31 += 240;
          }
          float v41 = ((float (*)(void **, uint64_t))(*a3)[2])(a3, v29);
          float v42 = *((float *)v25 + 7);
          v80[0] = *((float *)v25 + 6);
          v80[1] = v42;
          float v43 = v26 * v42;
          *((float *)v25 + 6) = (float)(v32 + v41) * a4;
          *((float *)v25 + 7) = v43;
          *((float *)v25 + 8) = v41 * a4;
          *((float *)v25 + 9) = v26 * *((float *)v25 + 9);
          v79[0] = (float)(v32 + v41) * a4;
          v79[1] = v43;
          float v76 = 0;
          uint64_t v77 = 0;
          uint64_t v78 = 0;
          float v44 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestToString(a1, (uint64_t *)v25, (uint64_t)&v76);
          float v45 = *((float *)v25 + 8);
          float v46 = *((float *)v25 + 9);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Old Cost = ", 11);
            unint64_t v48 = fst::operator<<<float>(v47, v80);
            uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", New cost = ", 13);
            unint64_t v50 = fst::operator<<<float>(v49, v79);
            uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", Hyp = ", 8);
            if (v78 >= 0) {
              unint64_t v52 = &v76;
            }
            else {
              unint64_t v52 = v76;
            }
            if (v78 >= 0) {
              uint64_t v53 = HIBYTE(v78);
            }
            else {
              uint64_t v53 = v77;
            }
            std::string::size_type v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
            uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" finalcost=", 11);
            fst::operator<<<float>(v55, (float *)v25 + 8);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
          }
          if ((float)((float)(v44 + v45) + v46) < v15) {
            float v15 = (float)(v44 + v45) + v46;
          }
          if (SHIBYTE(v78) < 0) {
            operator delete(v76);
          }
        }
        else
        {
          float v28 = *((float *)v25 + 7);
          if ((float)(*((float *)v25 + 6) + v28) < v15) {
            float v15 = *((float *)v25 + 6) + v28;
          }
        }
        uint64_t v25 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v25 + 272);
      }
      while (v25 != v24);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare::NbestCompare((uint64_t)&v76, *(_DWORD *)(a1 + 5224), a5, a6);
    int v56 = *v74;
    unint64_t v57 = v74[1];
    __p[0] = v76;
    LODWORD(__p[1]) = v77;
    if (v57 - v56 < 1)
    {
      uint64_t v58 = 0;
      uint64_t v60 = 0;
    }
    else
    {
      uint64_t v58 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v57 - v56) >> 4));
      uint64_t v60 = v59;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v56, v57, (float *)__p, 0xF0F0F0F0F0F0F0F1 * ((v57 - v56) >> 4), v58, v60);
    if (v58) {
      operator delete(v58);
    }
    uint64_t v61 = *v74;
    unint64_t v62 = v74[1];
    if (*v74 != v62)
    {
      int v63 = (int)v76;
      float v64 = *((float *)&v76 + 1);
      float v65 = *(float *)&v77;
      float v66 = powf(*(float *)&v77 + 1.0, *((float *)&v76 + 1));
      do
      {
        float v67 = *((float *)v61 + 6);
        float v68 = *((float *)v61 + 7);
        uint64_t v69 = (uint64_t)(*((void *)v61 + 25) - *((void *)v61 + 24)) >> 2;
        if (v63 == 2)
        {
          float v70 = powf(v65 + (float)(unint64_t)v69, v64) / v66;
        }
        else
        {
          float v70 = 1.0;
          if (v63 == 1) {
            float v70 = (float)(unint64_t)(v69 + 1);
          }
        }
        *((float *)v61 + 10) = (float)(v67 + v68) / v70;
        uint64_t v61 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v61 + 272);
      }
      while (v61 != v62);
    }
    if ((char)v83 < 0) {
      operator delete(v81);
    }
  }
LABEL_9:
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v86, v13);
  return v15;
}

void sub_1B233D998(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v31 - 200), a2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6 = (double *)(a1 + 4856);
  uint64_t v7 = a1 + 5696;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v18, v6, v7, (long long *)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  while (v9 != v10)
  {
    if ((*(_DWORD *)(v9 + 56) - 5) > 1)
    {
      if (*(unsigned char *)(a1 + 5673)) {
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AssignConfidencesFromConfidenceModel(a1, v9, a3);
      }
      else {
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromTranslationModel(a1, (uint64_t *)v9, a3);
      }
    }
    else
    {
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignHightestPossibleConfidences(a1, (uint64_t *)v9);
    }
    v9 += 272;
  }
  if (*(unsigned char *)(a1 + 5674))
  {
    uint64_t v12 = (const kaldi::quasar::TranslationUtil::NbestElement *)*a2;
    uint64_t v11 = (const kaldi::quasar::TranslationUtil::NbestElement *)a2[1];
    if (v11 - v12 < 1)
    {
      clockid_t v13 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      clockid_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v11 - v12) >> 4));
      uint64_t v15 = v14;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v12, v11, (uint64_t)__p, 0xF0F0F0F0F0F0F0F1 * ((v11 - v12) >> 4), v13, v15);
    if (v13) {
      operator delete(v13);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v18, v8);
}

void sub_1B233DBE4(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (v16) {
    operator delete(v16);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a16, a2);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestToString(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v17);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    float v7 = 0.0;
  }
  else
  {
    float v7 = 0.0;
    do
    {
      int v8 = *(char *)(v5 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v5;
      }
      else {
        uint64_t v9 = *(void *)v5;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v5 + 8);
      }
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      float v7 = v7 + (float)(*(float *)(v5 + 80) + *(float *)(v5 + 84));
      v5 += 240;
    }
    while (v5 != v6);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v15;
  uint64_t v12 = (void *)MEMORY[0x1E4FBA408];
  *(void *)(a3 + 16) = v16;
  v17[0] = *v12;
  uint64_t v13 = v12[9];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = v12[8];
  v18[0] = v13;
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](&v20);
  return v7;
}

void sub_1B233DE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AssignConfidencesFromConfidenceModel(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::Matrix<float>::Matrix((uint64_t)&v95);
  if (*(void *)(a1 + 5136) == *(void *)(a1 + 5128) || !*(unsigned char *)(a1 + 5675))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Alignment cost ", 15);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85);
    }
  }
  else
  {
    v92 = 0;
    int v93 = 0;
    std::string v94 = 0;
    uint64_t v89 = 0;
    unint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v6 = *(void **)a2;
    uint64_t v81 = *(void **)(a2 + 8);
    if (*(void **)a2 == v81)
    {
      uint64_t v34 = 0;
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v80 = a1;
      do
      {
        int v8 = (int *)v6[11];
        float v7 = (int *)v6[12];
        if (v8 != v7)
        {
          uint64_t v9 = v93;
          do
          {
            int v10 = *v8;
            if (v9 >= v94)
            {
              uint64_t v12 = v92;
              uint64_t v13 = (v9 - v92) >> 2;
              unint64_t v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v15 = v94 - v92;
              if ((v94 - v92) >> 1 > v14) {
                unint64_t v14 = v15 >> 1;
              }
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v16 = v14;
              }
              if (v16)
              {
                char v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v94, v16);
                uint64_t v12 = v92;
                uint64_t v9 = v93;
              }
              else
              {
                char v17 = 0;
              }
              uint64_t v18 = &v17[4 * v13];
              *(_DWORD *)uint64_t v18 = v10;
              uint64_t v11 = v18 + 4;
              while (v9 != v12)
              {
                int v19 = *((_DWORD *)v9 - 1);
                v9 -= 4;
                *((_DWORD *)v18 - 1) = v19;
                v18 -= 4;
              }
              v92 = v18;
              int v93 = v11;
              std::string v94 = &v17[4 * v16];
              if (v12) {
                operator delete(v12);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v9 = v10;
              uint64_t v11 = v9 + 4;
            }
            int v93 = v11;
            ++v8;
            uint64_t v9 = v11;
          }
          while (v8 != v7);
        }
        uint64_t v21 = (int *)v6[23];
        uint64_t v20 = (int *)v6[24];
        if (v21 != v20)
        {
          uint64_t v22 = v90;
          do
          {
            int v23 = *v21;
            if (v22 >= v91)
            {
              uint64_t v25 = v89;
              uint64_t v26 = (v22 - v89) >> 2;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = v91 - v89;
              if ((v91 - v89) >> 1 > v27) {
                unint64_t v27 = v28 >> 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v27;
              }
              if (v29)
              {
                uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91, v29);
                uint64_t v25 = v89;
                uint64_t v22 = v90;
              }
              else
              {
                uint64_t v30 = 0;
              }
              uint64_t v31 = &v30[4 * v26];
              *(_DWORD *)uint64_t v31 = v23;
              uint64_t v24 = v31 + 4;
              while (v22 != v25)
              {
                int v32 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *((_DWORD *)v31 - 1) = v32;
                v31 -= 4;
              }
              uint64_t v89 = v31;
              unint64_t v90 = v24;
              uint64_t v91 = &v30[4 * v29];
              if (v25) {
                operator delete(v25);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v22 = v23;
              uint64_t v24 = v22 + 4;
            }
            unint64_t v90 = v24;
            ++v21;
            uint64_t v22 = v24;
          }
          while (v21 != v20);
        }
        v6 += 30;
      }
      while (v6 != v81);
      uint64_t v34 = v92;
      uint64_t v33 = v93;
      a1 = v80;
    }
    int v35 = kaldi::MatrixBase<float>::NumCols(a1 + 5632);
    kaldi::Matrix<float>::Resize(&v95, (unint64_t)(v33 - v34) >> 2, (v35 + 1), 0, 0);
    if (v93 == v92)
    {
      unint64_t v40 = 0;
    }
    else
    {
      unint64_t v36 = 0;
      int v37 = v96;
      do
      {
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v85, (uint64_t)&v95, v36, 1, 0, v37);
        kaldi::CuMatrixBase<float>::CopyToMat<float>(*(void *)(a1 + 5128) + 48 * *(int *)&v92[4 * v36], (int *)&v85, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
        int v38 = *(_DWORD *)&v89[4 * v36];
        int v39 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
        int v37 = v96;
        *(_DWORD *)(*(void *)&v95 + 4 * v98 * (int)v36++ + 4 * (v39 - 1)) = v38;
        unint64_t v40 = (v93 - v92) >> 2;
      }
      while (v40 > v36);
    }
    uint64_t v41 = kaldi::MatrixBase<float>::NumCols(a1 + 5632);
    kaldi::Matrix<float>::Matrix((uint64_t)&v85, v40, v41, 0, 0);
    uint64_t v42 = *(void *)(a2 + 192);
    if (*(void *)(a2 + 200) != v42)
    {
      unint64_t v43 = 0;
      do
      {
        int v44 = *(_DWORD *)(v42 + 4 * v43);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, (uint64_t)&v85, v43, 1, 0, v86);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v88, a1 + 5632, v44 - 1, 1, 0, *(_DWORD *)(a1 + 5640));
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v87, a1 + 5632, v44 - 1, 1, 0, *(_DWORD *)(a1 + 5640));
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v82, v87, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v87);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v88);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
        ++v43;
        uint64_t v42 = *(void *)(a2 + 192);
      }
      while (v43 < (*(void *)(a2 + 200) - v42) >> 2);
    }
    int v45 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, (uint64_t)&v95, 0, v97, 0, v45 - 1);
    kaldi::MatrixBase<float>::MulElements((uint64_t)v82, (uint64_t)&v85);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v85);
    if (v89)
    {
      unint64_t v90 = v89;
      operator delete(v89);
    }
    if (v92)
    {
      int v93 = v92;
      operator delete(v92);
    }
  }
  uint64_t v46 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
  uint64_t v47 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
  kaldi::CuMatrix<float>::CuMatrix(&v85, v46, v47, 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v85, (int *)&v95, 111);
  uint64_t v48 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
  kaldi::CuMatrix<float>::CuMatrix(v82, v48, 1, 0, 0, 0);
  kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 5256), (uint64_t)&v85, v82, -1, 0);
  kaldi::Matrix<float>::Resize(&v95, v84, v83, 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v82, (int *)&v95, 111);
  int v49 = 0;
  unint64_t v50 = (void **)(a2 + 216);
  while (v49 != kaldi::MatrixBase<float>::NumRows((uint64_t)&v95))
  {
    uint64_t v51 = *(void *)&v95 + 4 * v98 * v49;
    uint64_t v53 = *(char **)(a2 + 224);
    unint64_t v52 = *(void *)(a2 + 232);
    if ((unint64_t)v53 >= v52)
    {
      uint64_t v55 = (char *)*v50;
      uint64_t v56 = (v53 - (unsigned char *)*v50) >> 2;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v58 = v52 - (void)v55;
      if (v58 >> 1 > v57) {
        unint64_t v57 = v58 >> 1;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        uint64_t v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 232, v59);
        uint64_t v55 = *(char **)(a2 + 216);
        uint64_t v53 = *(char **)(a2 + 224);
      }
      else
      {
        uint64_t v60 = 0;
      }
      uint64_t v61 = &v60[4 * v56];
      *(_DWORD *)uint64_t v61 = *(_DWORD *)(v51 + 4);
      std::string::size_type v54 = v61 + 4;
      while (v53 != v55)
      {
        int v62 = *((_DWORD *)v53 - 1);
        v53 -= 4;
        *((_DWORD *)v61 - 1) = v62;
        v61 -= 4;
      }
      *(void *)(a2 + 216) = v61;
      *(void *)(a2 + 224) = v54;
      *(void *)(a2 + 232) = &v60[4 * v59];
      if (v55) {
        operator delete(v55);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v53 = *(_DWORD *)(v51 + 4);
      std::string::size_type v54 = v53 + 4;
    }
    *(void *)(a2 + 224) = v54;
    ++v49;
  }
  float v64 = *(void **)a2;
  int v63 = *(void **)(a2 + 8);
  if (v63 == *(void **)a2)
  {
    LODWORD(v78) = 0;
  }
  else
  {
    uint64_t v65 = 0;
    unint64_t v66 = ((uint64_t)v63 - *(void *)a2) / 240;
    int v67 = *(unsigned __int8 *)(a2 + 88);
    if (v66 <= 1) {
      uint64_t v68 = 1;
    }
    else {
      uint64_t v68 = ((uint64_t)v63 - *(void *)a2) / 240;
    }
    do
    {
      if (v67)
      {
        uint64_t v69 = &v64[30 * v65];
        float v70 = (int *)v69[20];
        uint64_t v71 = (int *)v69[21];
        if (v70 == v71)
        {
          double v72 = 0.0;
        }
        else
        {
          double v72 = 0.0;
          uint64_t v73 = v70;
          do
          {
            uint64_t v74 = *v73++;
            double v72 = v72 + *((float *)*v50 + v74);
          }
          while (v73 != v71);
        }
        double v75 = v72 / (double)(unint64_t)(v71 - v70);
      }
      else
      {
        double v75 = *((float *)*v50 + v65);
      }
      float v76 = v75;
      LODWORD(v64[30 * v65++ + 29]) = llround(v76 * 998.0 + 1.0);
    }
    while (v65 != v68);
    LODWORD(v77) = 0;
    do
    {
      unint64_t v77 = *((int *)v64 + 58) + (uint64_t)(int)v77;
      v64 += 30;
    }
    while (v64 != v63);
    unint64_t v78 = v77 / v66;
  }
  *(unsigned char *)(a2 + 240) = (int)v78 < a3;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v82);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v85);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v95);
}

void sub_1B233E5B0(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1 - 144);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  uint64_t v25 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      uint64_t v24 = (uint64_t)a2 - 272;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v22, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      uint64_t v8 = v22;
      if (v23 == v22)
      {
        LODWORD(v10) = 0;
      }
      else
      {
        LODWORD(v9) = 0;
        do
        {
          unint64_t v9 = *(int *)(v8 + 232) + (uint64_t)(int)v9;
          v8 += 240;
        }
        while (v8 != v23);
        unint64_t v10 = v9 / (0xEEEEEEEEEEEEEEEFLL * ((v23 - v22) >> 4));
      }
      uint64_t v19 = *(void *)a1;
      uint64_t v18 = *((void *)a1 + 1);
      if (v18 == *(void *)a1)
      {
        LODWORD(v21) = 0;
      }
      else
      {
        LODWORD(v20) = 0;
        do
        {
          unint64_t v20 = *(int *)(v19 + 232) + (uint64_t)(int)v20;
          v19 += 240;
        }
        while (v19 != v18);
        unint64_t v21 = v20 / (0xEEEEEEEEEEEEEEEFLL * ((v18 - *(void *)a1) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v22);
      if ((int)v10 > (int)v21) {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v25, &v24);
      }
    }
    else
    {
      unint64_t v11 = a4;
      if ((uint64_t)a4 <= 0)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, a2);
      }
      else
      {
        unint64_t v14 = (uint64_t *)a5;
        unint64_t v15 = a4 >> 1;
        unint64_t v16 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        unint64_t v17 = a4 >> 1;
        if ((uint64_t)v11 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v16, a3, v17, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v11 >> 1)), a2, a3, v11 - (v11 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v15]);
          std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, &v14[34 * v15], (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v15], (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v11], (uint64_t)a1);
          if (v14)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v14);
              v14 += 34;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v16, a3, v17, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)a1 + 272 * (v11 >> 1), a2, a3, v11 - (v11 >> 1), v14, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, (uint64_t)a1 + 272 * (v11 >> 1), a2, a3, v11 >> 1, v11 - (v11 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)v14, a6);
        }
      }
    }
  }
}

void sub_1B233E8F4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272);
    if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
    {
      uint64_t v5 = a1;
      do
      {
        uint64_t v6 = v4;
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27, v4);
        uint64_t v7 = v27;
        if (v28 == v27)
        {
          LODWORD(v9) = 0;
        }
        else
        {
          LODWORD(v8) = 0;
          do
          {
            unint64_t v8 = *(int *)(v7 + 232) + (uint64_t)(int)v8;
            v7 += 240;
          }
          while (v7 != v28);
          unint64_t v9 = v8 / (0xEEEEEEEEEEEEEEEFLL * ((v28 - v27) >> 4));
        }
        uint64_t v11 = *(void *)v5;
        uint64_t v10 = *((void *)v5 + 1);
        if (v10 == *(void *)v5)
        {
          LODWORD(v13) = 0;
        }
        else
        {
          LODWORD(v12) = 0;
          do
          {
            unint64_t v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
            v11 += 240;
          }
          while (v11 != v10);
          unint64_t v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v10 - *(void *)v5) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27);
        if ((int)v9 > (int)v13)
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v26, v6);
          uint64_t v14 = (uint64_t)v6;
          while (1)
          {
            uint64_t v15 = (uint64_t)v5;
            kaldi::quasar::TranslationUtil::NbestElement::operator=(v14, (uint64_t)v5);
            if (v5 == a1) {
              break;
            }
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v24, (const kaldi::quasar::TranslationUtil::NbestElement *)v26);
            uint64_t v16 = v24;
            if (v25 == v24)
            {
              LODWORD(v18) = 0;
            }
            else
            {
              LODWORD(v17) = 0;
              do
              {
                unint64_t v17 = *(int *)(v16 + 232) + (uint64_t)(int)v17;
                v16 += 240;
              }
              while (v16 != v25);
              unint64_t v18 = v17 / (0xEEEEEEEEEEEEEEEFLL * ((v25 - v24) >> 4));
            }
            uint64_t v5 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 - 272);
            uint64_t v19 = *(void *)(v15 - 264);
            uint64_t v20 = *(void *)(v15 - 272);
            if (v19 == v20)
            {
              LODWORD(v23) = 0;
            }
            else
            {
              LODWORD(v21) = 0;
              unint64_t v22 = 0xEEEEEEEEEEEEEEEFLL * ((v19 - v20) >> 4);
              do
              {
                unint64_t v21 = *(int *)(v20 + 232) + (uint64_t)(int)v21;
                v20 += 240;
              }
              while (v20 != v19);
              unint64_t v23 = v21 / v22;
            }
            kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v24);
            uint64_t v14 = v15;
            if ((int)v18 <= (int)v23) {
              goto LABEL_30;
            }
          }
          uint64_t v15 = (uint64_t)a1;
LABEL_30:
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v15, (uint64_t)v26);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v26);
        }
        uint64_t v4 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272);
        uint64_t v5 = v6;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272) != a2);
    }
  }
}

void sub_1B233EB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  if (a4)
  {
    unint64_t v8 = result;
    if (a4 == 2)
    {
      unint64_t v9 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      uint64_t v10 = v19;
      if (v20 == v19)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        LODWORD(v11) = 0;
        do
        {
          unint64_t v11 = *(int *)(v10 + 232) + (uint64_t)(int)v11;
          v10 += 240;
        }
        while (v10 != v20);
        unint64_t v12 = v11 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      uint64_t v15 = *(void *)v8;
      uint64_t v14 = *((void *)v8 + 1);
      if (v14 == *(void *)v8)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v16) = 0;
        do
        {
          unint64_t v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
          v15 += 240;
        }
        while (v15 != v14);
        unint64_t v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - *(void *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v12 <= (int)v17) {
        unint64_t v18 = v8;
      }
      else {
        unint64_t v18 = v9;
      }
      if ((int)v12 <= (int)v17) {
        unint64_t v8 = v9;
      }
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v18);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v8);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, (char *)result + 272 * (a4 >> 1), a3, a4 >> 1, this, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)v8 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v8, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1)), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1)), a2, this);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, a2, this);
    }
  }
  return result;
}

void sub_1B233ED30(_Unwind_Exception *exception_object)
{
  if (v1) {
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, kaldi::quasar::TranslationUtil::NbestElement *a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v40 = a2;
  uint64_t v41 = a1;
  if (a6)
  {
    uint64_t v9 = a6;
    unint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
    uint64_t v14 = a1;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, v13, a3, a4, a5, v9, a7);
        return;
      }
      if (!a5) {
        return;
      }
      while (1)
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v38, v13);
        uint64_t v15 = v38;
        if (v39 == v38)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          LODWORD(v16) = 0;
          do
          {
            unint64_t v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
            v15 += 240;
          }
          while (v15 != v39);
          unint64_t v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v39 - v38) >> 4));
        }
        uint64_t v19 = *(void *)v14;
        uint64_t v18 = *((void *)v14 + 1);
        if (v18 == *(void *)v14)
        {
          LODWORD(v21) = 0;
        }
        else
        {
          LODWORD(v20) = 0;
          do
          {
            unint64_t v20 = *(int *)(v19 + 232) + (uint64_t)(int)v20;
            v19 += 240;
          }
          while (v19 != v18);
          unint64_t v21 = v20 / (0xEEEEEEEEEEEEEEEFLL * ((v18 - *(void *)v14) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v38);
        if ((int)v17 > (int)v21) {
          break;
        }
        uint64_t v14 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        uint64_t v41 = v14;
        if (!--a5) {
          return;
        }
      }
      uint64_t v36 = a4;
      if (a5 >= v9)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v41, &v40);
          return;
        }
        if (a5 >= 0) {
          uint64_t v27 = a5;
        }
        else {
          uint64_t v27 = a5 + 1;
        }
        uint64_t v28 = v27 >> 1;
        uint64_t v25 = (uint64_t *)((char *)v14 + 272 * (v27 >> 1));
        char v42 = 0;
        unint64_t v29 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1}>((char *)v13, (char *)a3, v25);
        unint64_t v26 = v28;
        uint64_t v24 = (kaldi::quasar::TranslationUtil::NbestElement *)v29;
        uint64_t v23 = 0xF0F0F0F0F0F0F0F1 * ((v29 - (char *)v13) >> 4);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v22 = v9;
        }
        else {
          uint64_t v22 = v9 + 1;
        }
        uint64_t v23 = v22 >> 1;
        uint64_t v24 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v13 + 272 * (v22 >> 1));
        uint64_t v25 = (uint64_t *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>((char *)v14, (char *)v13, v24);
        unint64_t v26 = 0xF0F0F0F0F0F0F0F1 * (((char *)v25 - (char *)v14) >> 4);
      }
      uint64_t v34 = a3;
      if (v25 == (uint64_t *)v13)
      {
        a3 = v24;
      }
      else if (v13 == v24)
      {
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)v25;
      }
      else
      {
        unint64_t v30 = v26;
        uint64_t v31 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((const kaldi::quasar::TranslationUtil::NbestElement *)v25, (uint64_t)v13, (uint64_t)v24);
        unint64_t v26 = v30;
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)v31;
      }
      a5 -= v26;
      v9 -= v23;
      if ((uint64_t)(v26 + v23) >= a5 + v9)
      {
        uint64_t v33 = v34;
        unint64_t v35 = v26;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a3, v24, v33, v36, a5, v9, a7, a8);
        unint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v25;
        a4 = v36;
        uint64_t v9 = v23;
        a5 = v35;
      }
      else
      {
        int v32 = v25;
        a4 = v36;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, v32, a3, v36, v26, v23, a7, a8);
        uint64_t v41 = a3;
        uint64_t v14 = a3;
        unint64_t v13 = v24;
        a3 = v34;
      }
      uint64_t v40 = (uint64_t)v13;
    }
    while (v9);
  }
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    uint64_t v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 + 272);
    if (v6 != a2)
    {
      uint64_t v7 = 1;
      unint64_t v8 = this;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v29, v6);
        uint64_t v9 = v29;
        if (v30 == v29)
        {
          LODWORD(v11) = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            unint64_t v10 = *(int *)(v9 + 232) + (uint64_t)(int)v10;
            v9 += 240;
          }
          while (v9 != v30);
          unint64_t v11 = v10 / (0xEEEEEEEEEEEEEEEFLL * ((v30 - v29) >> 4));
        }
        uint64_t v13 = *(void *)v8;
        uint64_t v12 = *((void *)v8 + 1);
        if (v12 == *(void *)v8)
        {
          LODWORD(v15) = 0;
        }
        else
        {
          LODWORD(v14) = 0;
          do
          {
            unint64_t v14 = *(int *)(v13 + 232) + (uint64_t)(int)v14;
            v13 += 240;
          }
          while (v13 != v12);
          unint64_t v15 = v14 / (0xEEEEEEEEEEEEEEEFLL * ((v12 - *(void *)v8) >> 4));
        }
        unint64_t v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v29);
        if ((int)v11 <= (int)v15)
        {
          __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272), v6);
          ++v7;
        }
        else
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272), v8);
          ++v7;
          unint64_t v17 = this;
          if (v8 != this)
          {
            while (1)
            {
              kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27, v6);
              uint64_t v18 = v27;
              if (v28 == v27)
              {
                LODWORD(v20) = 0;
              }
              else
              {
                LODWORD(v19) = 0;
                do
                {
                  unint64_t v19 = *(int *)(v18 + 232) + (uint64_t)(int)v19;
                  v18 += 240;
                }
                while (v18 != v28);
                unint64_t v20 = v19 / (0xEEEEEEEEEEEEEEEFLL * ((v28 - v27) >> 4));
              }
              unint64_t v21 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 - 272);
              uint64_t v22 = *((void *)v8 - 33);
              uint64_t v23 = *((void *)v8 - 34);
              if (v22 == v23)
              {
                LODWORD(v26) = 0;
              }
              else
              {
                LODWORD(v24) = 0;
                unint64_t v25 = 0xEEEEEEEEEEEEEEEFLL * ((v22 - v23) >> 4);
                do
                {
                  unint64_t v24 = *(int *)(v23 + 232) + (uint64_t)(int)v24;
                  v23 += 240;
                }
                while (v23 != v22);
                unint64_t v26 = v24 / v25;
              }
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27);
              if ((int)v20 <= (int)v26) {
                break;
              }
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8, (uint64_t)v8 - 272);
              unint64_t v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 - 272);
              if (v21 == this)
              {
                unint64_t v17 = this;
                goto LABEL_31;
              }
            }
            unint64_t v17 = v8;
          }
LABEL_31:
          __n128 result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v17, (uint64_t)v6);
        }
        uint64_t v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272);
        unint64_t v8 = v16;
      }
      while (v6 != a2);
    }
  }
  return result;
}

void sub_1B233F22C(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *result, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, kaldi::quasar::TranslationUtil::NbestElement *a4, kaldi::quasar::TranslationUtil::NbestElement *a5)
{
  if (result == a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = a5;
LABEL_21:
    while (a3 != a4)
    {
      __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, a3);
      a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      unint64_t v10 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      ++v9;
    }
  }
  else
  {
    unint64_t v8 = result;
    uint64_t v9 = 0;
    unint64_t v10 = a5;
    while (a3 != a4)
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, a3);
      uint64_t v11 = v19;
      if (v20 == v19)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          unint64_t v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
          v11 += 240;
        }
        while (v11 != v20);
        unint64_t v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      uint64_t v15 = *(void *)v8;
      uint64_t v14 = *((void *)v8 + 1);
      if (v14 == *(void *)v8)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v16) = 0;
        do
        {
          unint64_t v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
          v15 += 240;
        }
        while (v15 != v14);
        unint64_t v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - *(void *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v13 <= (int)v17)
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, v8);
        unint64_t v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
      }
      else
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, a3);
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      ++v9;
      unint64_t v10 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      if (v8 == a2) {
        goto LABEL_21;
      }
    }
    if (v8 != a2)
    {
      uint64_t v18 = 0;
      do
      {
        __n128 result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v18), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v18));
        ++v9;
        v18 += 272;
      }
      while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v18) != a2);
    }
  }
  return result;
}

void sub_1B233F3F0(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *a1, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  uint64_t v7 = (uint64_t *)this;
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      uint64_t v12 = 0;
      unint64_t v16 = this;
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v16 = this;
      unint64_t v17 = a1;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v16, v17);
        ++v12;
        unint64_t v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272);
        unint64_t v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
      }
      while (v17 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v7, (uint64_t)v16, a2, a3, (uint64_t)a1);
  }
  else
  {
    if (a2 == a3)
    {
      uint64_t v12 = 0;
      unint64_t v13 = this;
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = this;
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13, v14);
        ++v12;
        uint64_t v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        unint64_t v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      }
      while (v14 != a3);
    }
    uint64_t v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>>((uint64_t)v13, (uint64_t)v13, (uint64_t)v7, (uint64_t)v7, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3, (int)&v18);
  }
  if (v7 && v12)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v7);
      v7 += 34;
      --v12;
    }
    while (v12);
  }
}

void sub_1B233F55C(_Unwind_Exception *exception_object)
{
  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      uint64_t v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(std::string const&,kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (*a1)[1], (uint64_t *)(*a1)[2]);
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(std::string const&,kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (*a1)[1], (uint64_t *)(*a1)[2]);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "Nbestlist cannot be null");
    goto LABEL_111;
  }
  if (*(unsigned char *)(a3 + 307) || (uint64_t v5 = a1, v60 = (unsigned char *)(a1 + 4896), *(unsigned char *)(a1 + 5237)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "Decoder not configured for string decoding (use SentencePiece ID decoding).");
    goto LABEL_111;
  }
  uint64_t v6 = a4;
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8 && *(unsigned char *)(v8 + 3925))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "Model lacks full symbol tables (use SentencePiece ID decoding).");
LABEL_111:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v74);
  }
  int v9 = *(_DWORD *)(a1 + 5224);
  int v10 = *(_DWORD *)(a1 + 5200);
  int v11 = *(_DWORD *)(a1 + 5188);
  int v12 = *(_DWORD *)(a1 + 5192);
  int v59 = *(_DWORD *)(a1 + 5196);
  *(_DWORD *)(a1 + 5200) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3) {
    *(_DWORD *)(a1 + 5188) = *(_DWORD *)a3;
  }
  float v13 = *(float *)(a3 + 4);
  if (v13 != 0.0) {
    *(float *)(a1 + 5192) = v13;
  }
  int v14 = *(_DWORD *)(a3 + 8);
  if (v14) {
    *(_DWORD *)(a1 + 5196) = v14;
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ValidateDecodingParameters(*(float *)(a3 + 176), a1, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 172));
  uint64_t v16 = *v6;
  for (uint64_t i = v6[1];
        i != v16;
  v6[1] = v16;
  int32x2_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  kaldi::quasar::InputHammer::FilterTags(v5 + 8, a2, (uint64_t)&v85, a3 + 64);
  kaldi::quasar::MultiLangDecorator::Apply(v5 + 120, (uint64_t)&v85, a3 + 64, a3 + 88, &v84);
  if (*(unsigned char *)(a3 + 232)) {
    int v17 = kaldi::quasar::MultiLangDecorator::NumTagTokens((kaldi::quasar::MultiLangDecorator *)(v5 + 120));
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)(v5 + 5204) = v17;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(a3);
    if (v83 >= 0) {
      uint64_t v18 = &v81;
    }
    else {
      uint64_t v18 = (long long **)v81;
    }
    if (v83 >= 0) {
      uint64_t v19 = HIBYTE(v83);
    }
    else {
      uint64_t v19 = (uint64_t)v82;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)v18, v19);
    if (SHIBYTE(v83) < 0) {
      operator delete(v81);
    }
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v74);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v74, 1);
      int v20 = *(char *)(a2 + 23);
      if (v20 >= 0) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = *(void *)a2;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a2 + 8);
      }
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, v21, v22);
      unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" -> ", 4);
      if (v87 >= 0) {
        unint64_t v25 = (void **)&v85;
      }
      else {
        unint64_t v25 = v85;
      }
      if (v87 >= 0) {
        uint64_t v26 = HIBYTE(v87);
      }
      else {
        uint64_t v26 = v86;
      }
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" -> ", 4);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v84;
      }
      else {
        uint64_t v29 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v84.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v74);
    }
  }
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v73, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else {
    std::string v73 = v84;
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(v5, &v73, (uint64_t *)&v81);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (v82 == v81)
  {
    float v32 = 3.4028e38;
    goto LABEL_103;
  }
  float v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(&v70, *(void **)(a3 + 240), *(void **)(a3 + 248), (uint64_t)(*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 4);
  if (v60[344]) {
    std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::push_back[abi:ne180100]((uint64_t *)&v70, (long long *)(v5 + 392));
  }
  if (v71 == v70 || *(_DWORD *)(v5 + 5220) == 1)
  {
    float v31 = 3.4028e38;
  }
  else
  {
    int v57 = v11;
    int v58 = v9;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::FindInPhraseBooks((uint64_t)&v85, &v70, (uint64_t *)&v68);
    uint64_t v34 = v68;
    uint64_t v33 = v69;
    if (v69 == v68)
    {
      float v31 = 3.4028e38;
    }
    else
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Total # of phrasebook matches : ", 32);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v74);
        uint64_t v34 = v68;
        uint64_t v33 = v69;
      }
      float v31 = 0.0;
      if (v34 != v33)
      {
        uint64_t v56 = v5;
        uint64_t v61 = v33;
        do
        {
          unint64_t v35 = v6;
          uint64_t v65 = 0;
          unint64_t v66 = 0;
          uint64_t v67 = 0;
          kaldi::SplitStringToVector(v34 + 2, " ", 1, (uint64_t)&v65);
          uint64_t v62 = 0;
          int v63 = 0;
          unint64_t v64 = 0;
          int v37 = v65;
          uint64_t v36 = v66;
          while (v37 != v36)
          {
            memset(&v74, 0, sizeof(v74));
            long long v76 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            memset(v80, 0, 140);
            std::string::operator=(&v74, v37);
            uint64_t v38 = *((void *)&v79 + 1);
            v80[0] = *((void *)&v79 + 1);
            if (*((void *)&v79 + 1) >= v80[1])
            {
              unint64_t v40 = (uint64_t)(v80[1] - *((void *)&v79 + 1)) >> 1;
              if (v40 <= 1) {
                unint64_t v40 = 1;
              }
              if (v80[1] - *((void *)&v79 + 1) >= 0x7FFFFFFFFFFFFFFCuLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v40;
              }
              unint64_t v43 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80[1], v41);
              int v44 = (char *)*((void *)&v79 + 1);
              int v45 = (char *)v80[0];
              _DWORD *v43 = -1;
              uint64_t v39 = v43 + 1;
              uint64_t v46 = v43;
              while (v45 != v44)
              {
                int v47 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *--uint64_t v46 = v47;
              }
              *((void *)&v79 + 1) = v46;
              v80[0] = v43 + 1;
              v80[1] = &v43[v42];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              **((_DWORD **)&v79 + 1) = -1;
              uint64_t v39 = (_DWORD *)(v38 + 4);
            }
            v80[0] = v39;
            *(void *)&long long v79 = 0;
            uint64_t v48 = v63;
            if ((unint64_t)v63 >= v64)
            {
              int v49 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v62, (const kaldi::quasar::TranslationUtil::PathElement *)&v74);
            }
            else
            {
              kaldi::quasar::TranslationUtil::PathElement::PathElement(v63, (const kaldi::quasar::TranslationUtil::PathElement *)&v74);
              int v49 = v48 + 10;
            }
            int v63 = v49;
            kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v74);
            ++v37;
          }
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v74);
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)&v74, v62, (uint64_t)v63, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v63 - v62) >> 4));
          uint64_t v75 = 0;
          *(void *)&long long v76 = 0;
          *(void *)&long long v77 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3);
          DWORD2(v77) = 5;
          std::string::operator=((std::string *)&v78, v34 + 3);
          unint64_t v50 = v35[1];
          if (v50 >= v35[2])
          {
            uint64_t v51 = std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(v35, (const kaldi::quasar::TranslationUtil::NbestElement *)&v74);
            uint64_t v6 = v35;
          }
          else
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v35[1], (const kaldi::quasar::TranslationUtil::NbestElement *)&v74);
            uint64_t v51 = v50 + 272;
            uint64_t v6 = v35;
            v35[1] = v51;
          }
          v6[1] = v51;
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v34 += 5;
        }
        while (v34 != v61);
        uint64_t v5 = v56;
      }
    }
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    int v11 = v57;
    int v9 = v58;
  }
  uint64_t v52 = *(void *)(v5 + 136);
  if (v52 && *(unsigned char *)(v52 + 3922) && *(unsigned char *)(v52 + 3923)) {
    v60[808] = 1;
  }
  int v53 = *(_DWORD *)(v5 + 5220);
  if (v6[1] != *v6)
  {
    if (v53 != 2) {
      goto LABEL_99;
    }
LABEL_97:
    if (*v60) {
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeTokenized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v5, &v81, a3);
    }
    goto LABEL_99;
  }
  if (v53 != 3) {
    goto LABEL_97;
  }
LABEL_99:
  float v54 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v5, (const std::string *)a2, a3, (uint64_t)v6);
  *(_DWORD *)(v5 + 5224) = v9;
  *(_DWORD *)(v5 + 5200) = v10;
  *(_DWORD *)(v5 + 5188) = v11;
  *(_DWORD *)(v5 + 5192) = v12;
  *(_DWORD *)(v5 + 5196) = v59;
  if (v54 == -1.0) {
    float v32 = v31;
  }
  else {
    float v32 = v54;
  }
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
LABEL_103:
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v87) < 0) {
    operator delete(v85);
  }
  return v32;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::FindInPhraseBooks(uint64_t a1@<X1>, char **a2@<X2>, uint64_t *a3@<X8>)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"FindInPhraseBooks # ", 20);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    int v8 = 0;
    int v9 = *a2;
  }
  else
  {
    int v8 = 0;
    do
    {
      if (*(void *)v6 && kaldi::quasar::PhraseBook::Find(*(void **)v6, a1, a3)) {
        break;
      }
      ++v8;
      v6 += 16;
    }
    while (v6 != v7);
    uint64_t v6 = *a2;
    int v9 = a2[1];
  }
  if ((unint64_t)(v9 - v6) >= 0x11 && a3[1] != *a3 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    if (v8) {
      int v10 = "Phrasebook fallback match";
    }
    else {
      int v10 = "Phrasebook locale match";
    }
    if (v8) {
      uint64_t v11 = 25;
    }
    else {
      uint64_t v11 = 23;
    }
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", phrasebook idx=", 17);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
}

void sub_1B233FFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeTokenized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, long long **a2, uint64_t a3)
{
  memset(__p, 0, sizeof(__p));
  memset(&v5, 0, sizeof(v5));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Symbolize(a1, (uint64_t *)&v5, (uint64_t)__p, 0);
  uint64_t v7 = &v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (uint64_t)__p, a3);
}

void sub_1B23400DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::PhraseBook::Find(void *a1, uint64_t a2, uint64_t *a3)
{
  kaldi::quasar::PhraseBook::PreProcess((uint64_t)a1, a2, &__p);
  std::string v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (std::string *)*a3;
  uint64_t v7 = a3[1];
  if (v7 != *a3)
  {
    do
    {
      v7 -= 120;
      std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100]((uint64_t)(a3 + 2), v7);
    }
    while ((std::string *)v7 != v6);
  }
  a3[1] = (uint64_t)v6;
  if (v5)
  {
    int v8 = (const kaldi::quasar::PhraseBook::PhraseBookEntry *)*((void *)v5 + 5);
    int v9 = (const kaldi::quasar::PhraseBook::PhraseBookEntry *)*((void *)v5 + 6);
    while (v8 != v9)
    {
      if ((unint64_t)v6 >= a3[2])
      {
        uint64_t v6 = (std::string *)std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry const&>(a3, v8);
      }
      else
      {
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(v6, v8);
        v6 += 5;
        a3[1] = (uint64_t)v6;
      }
      a3[1] = (uint64_t)v6;
      int v8 = (const kaldi::quasar::PhraseBook::PhraseBookEntry *)((char *)v8 + 120);
    }
  }
  return v5 != 0;
}

void sub_1B23401F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "Nbestlist cannot be null");
    goto LABEL_111;
  }
  if (*(unsigned char *)(a3 + 307) || (uint64_t v5 = a1, v60 = (unsigned char *)(a1 + 4896), *(unsigned char *)(a1 + 5237)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "Decoder not configured for string decoding (use SentencePiece ID decoding).");
    goto LABEL_111;
  }
  uint64_t v6 = a4;
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8 && *(unsigned char *)(v8 + 2461))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v74, "Model lacks full symbol tables (use SentencePiece ID decoding).");
LABEL_111:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v74);
  }
  int v9 = *(_DWORD *)(a1 + 5224);
  int v10 = *(_DWORD *)(a1 + 5200);
  int v11 = *(_DWORD *)(a1 + 5188);
  int v12 = *(_DWORD *)(a1 + 5192);
  int v59 = *(_DWORD *)(a1 + 5196);
  *(_DWORD *)(a1 + 5200) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3) {
    *(_DWORD *)(a1 + 5188) = *(_DWORD *)a3;
  }
  float v13 = *(float *)(a3 + 4);
  if (v13 != 0.0) {
    *(float *)(a1 + 5192) = v13;
  }
  int v14 = *(_DWORD *)(a3 + 8);
  if (v14) {
    *(_DWORD *)(a1 + 5196) = v14;
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ValidateDecodingParameters(*(float *)(a3 + 176), a1, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 172));
  uint64_t v16 = *v6;
  for (uint64_t i = v6[1];
        i != v16;
  v6[1] = v16;
  int32x2_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  kaldi::quasar::InputHammer::FilterTags(v5 + 8, a2, (uint64_t)&v85, a3 + 64);
  kaldi::quasar::MultiLangDecorator::Apply(v5 + 120, (uint64_t)&v85, a3 + 64, a3 + 88, &v84);
  if (*(unsigned char *)(a3 + 232)) {
    int v17 = kaldi::quasar::MultiLangDecorator::NumTagTokens((kaldi::quasar::MultiLangDecorator *)(v5 + 120));
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)(v5 + 5204) = v17;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(a3);
    if (v83 >= 0) {
      uint64_t v18 = &v81;
    }
    else {
      uint64_t v18 = (long long **)v81;
    }
    if (v83 >= 0) {
      uint64_t v19 = HIBYTE(v83);
    }
    else {
      uint64_t v19 = (uint64_t)v82;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)v18, v19);
    if (SHIBYTE(v83) < 0) {
      operator delete(v81);
    }
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v74);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v74, 1);
      int v20 = *(char *)(a2 + 23);
      if (v20 >= 0) {
        uint64_t v21 = a2;
      }
      else {
        uint64_t v21 = *(void *)a2;
      }
      if (v20 >= 0) {
        uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v22 = *(void *)(a2 + 8);
      }
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, v21, v22);
      unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" -> ", 4);
      if (v87 >= 0) {
        unint64_t v25 = (void **)&v85;
      }
      else {
        unint64_t v25 = v85;
      }
      if (v87 >= 0) {
        uint64_t v26 = HIBYTE(v87);
      }
      else {
        uint64_t v26 = v86;
      }
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" -> ", 4);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v84;
      }
      else {
        uint64_t v29 = (std::string *)v84.__r_.__value_.__r.__words[0];
      }
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v84.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v74);
    }
  }
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v73, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  }
  else {
    std::string v73 = v84;
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TokenizeInputString(v5, &v73, (uint64_t *)&v81);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (v82 == v81)
  {
    float v32 = 3.4028e38;
    goto LABEL_103;
  }
  float v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(&v70, *(void **)(a3 + 240), *(void **)(a3 + 248), (uint64_t)(*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 4);
  if (v60[344]) {
    std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::push_back[abi:ne180100]((uint64_t *)&v70, (long long *)(v5 + 392));
  }
  if (v71 == v70 || *(_DWORD *)(v5 + 5220) == 1)
  {
    float v31 = 3.4028e38;
  }
  else
  {
    int v57 = v11;
    int v58 = v9;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::FindInPhraseBooks((uint64_t)&v85, &v70, (uint64_t *)&v68);
    uint64_t v34 = v68;
    uint64_t v33 = v69;
    if (v69 == v68)
    {
      float v31 = 3.4028e38;
    }
    else
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v74);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v74, (uint64_t)"Total # of phrasebook matches : ", 32);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v74);
        uint64_t v34 = v68;
        uint64_t v33 = v69;
      }
      float v31 = 0.0;
      if (v34 != v33)
      {
        uint64_t v56 = v5;
        uint64_t v61 = v33;
        do
        {
          unint64_t v35 = v6;
          uint64_t v65 = 0;
          unint64_t v66 = 0;
          uint64_t v67 = 0;
          kaldi::SplitStringToVector(v34 + 2, " ", 1, (uint64_t)&v65);
          uint64_t v62 = 0;
          int v63 = 0;
          unint64_t v64 = 0;
          int v37 = v65;
          uint64_t v36 = v66;
          while (v37 != v36)
          {
            memset(&v74, 0, sizeof(v74));
            long long v76 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            memset(v80, 0, 140);
            std::string::operator=(&v74, v37);
            uint64_t v38 = *((void *)&v79 + 1);
            v80[0] = *((void *)&v79 + 1);
            if (*((void *)&v79 + 1) >= v80[1])
            {
              unint64_t v40 = (uint64_t)(v80[1] - *((void *)&v79 + 1)) >> 1;
              if (v40 <= 1) {
                unint64_t v40 = 1;
              }
              if (v80[1] - *((void *)&v79 + 1) >= 0x7FFFFFFFFFFFFFFCuLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v40;
              }
              unint64_t v43 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80[1], v41);
              int v44 = (char *)*((void *)&v79 + 1);
              int v45 = (char *)v80[0];
              _DWORD *v43 = -1;
              uint64_t v39 = v43 + 1;
              uint64_t v46 = v43;
              while (v45 != v44)
              {
                int v47 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *--uint64_t v46 = v47;
              }
              *((void *)&v79 + 1) = v46;
              v80[0] = v43 + 1;
              v80[1] = &v43[v42];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              **((_DWORD **)&v79 + 1) = -1;
              uint64_t v39 = (_DWORD *)(v38 + 4);
            }
            v80[0] = v39;
            *(void *)&long long v79 = 0;
            uint64_t v48 = v63;
            if ((unint64_t)v63 >= v64)
            {
              int v49 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v62, (const kaldi::quasar::TranslationUtil::PathElement *)&v74);
            }
            else
            {
              kaldi::quasar::TranslationUtil::PathElement::PathElement(v63, (const kaldi::quasar::TranslationUtil::PathElement *)&v74);
              int v49 = v48 + 10;
            }
            int v63 = v49;
            kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v74);
            ++v37;
          }
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v74);
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)&v74, v62, (uint64_t)v63, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v63 - v62) >> 4));
          uint64_t v75 = 0;
          *(void *)&long long v76 = 0;
          *(void *)&long long v77 = 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3);
          DWORD2(v77) = 5;
          std::string::operator=((std::string *)&v78, v34 + 3);
          unint64_t v50 = v35[1];
          if (v50 >= v35[2])
          {
            uint64_t v51 = std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(v35, (const kaldi::quasar::TranslationUtil::NbestElement *)&v74);
            uint64_t v6 = v35;
          }
          else
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v35[1], (const kaldi::quasar::TranslationUtil::NbestElement *)&v74);
            uint64_t v51 = v50 + 272;
            uint64_t v6 = v35;
            v35[1] = v51;
          }
          v6[1] = v51;
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v34 += 5;
        }
        while (v34 != v61);
        uint64_t v5 = v56;
      }
    }
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
    std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    int v11 = v57;
    int v9 = v58;
  }
  uint64_t v52 = *(void *)(v5 + 136);
  if (v52 && *(unsigned char *)(v52 + 2164) && *(unsigned char *)(v52 + 2165)) {
    v60[808] = 1;
  }
  int v53 = *(_DWORD *)(v5 + 5220);
  if (v6[1] != *v6)
  {
    if (v53 != 2) {
      goto LABEL_99;
    }
LABEL_97:
    if (*v60) {
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeTokenized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v5, &v81, a3);
    }
    goto LABEL_99;
  }
  if (v53 != 3) {
    goto LABEL_97;
  }
LABEL_99:
  float v54 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v5, (const std::string *)a2, a3, (uint64_t)v6);
  *(_DWORD *)(v5 + 5224) = v9;
  *(_DWORD *)(v5 + 5200) = v10;
  *(_DWORD *)(v5 + 5188) = v11;
  *(_DWORD *)(v5 + 5192) = v12;
  *(_DWORD *)(v5 + 5196) = v59;
  if (v54 == -1.0) {
    float v32 = v31;
  }
  else {
    float v32 = v54;
  }
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
LABEL_103:
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v87) < 0) {
    operator delete(v85);
  }
  return v32;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::FindInPhraseBooks(uint64_t a1@<X1>, char **a2@<X2>, uint64_t *a3@<X8>)
{
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"FindInPhraseBooks # ", 20);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 == v7)
  {
    int v8 = 0;
    int v9 = *a2;
  }
  else
  {
    int v8 = 0;
    do
    {
      if (*(void *)v6 && kaldi::quasar::PhraseBook::Find(*(void **)v6, a1, a3)) {
        break;
      }
      ++v8;
      v6 += 16;
    }
    while (v6 != v7);
    uint64_t v6 = *a2;
    int v9 = a2[1];
  }
  if ((unint64_t)(v9 - v6) >= 0x11 && a3[1] != *a3 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    if (v8) {
      int v10 = "Phrasebook fallback match";
    }
    else {
      int v10 = "Phrasebook locale match";
    }
    if (v8) {
      uint64_t v11 = 25;
    }
    else {
      uint64_t v11 = 23;
    }
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", phrasebook idx=", 17);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
}

void sub_1B2340C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeTokenized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, long long **a2, uint64_t a3)
{
  memset(__p, 0, sizeof(__p));
  memset(&v5, 0, sizeof(v5));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Symbolize(a1, (uint64_t *)&v5, (uint64_t)__p, 0);
  uint64_t v7 = &v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (uint64_t)__p, a3);
}

void sub_1B2340D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::PhraseBook>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::PhraseBook>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::PhraseBook>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::PhraseBook>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::quasar::PhraseBook>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::PhraseBook>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::PhraseBook>*>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::PhraseBook>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::PhraseBook>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::PhraseBook>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<kaldi::quasar::PhraseBook>>,std::reverse_iterator<std::shared_ptr<kaldi::quasar::PhraseBook>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<kaldi::quasar::PhraseBook>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x38uLL);
  v29[0] = v16;
  v29[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = 0;
  v16[4] = v17;
  v16[5] = v18;
  uint64_t v19 = *(void *)(a3 + 32);
  v16[6] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 16), 1uLL, memory_order_relaxed);
  }
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10) {
          v27 %= v10;
        }
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1B2341148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t quasar::OptionValue<std::vector<std::string>>::value(void *a1)
{
  uint64_t v2 = quasar::OptionValue<std::string>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(void *))(*a1 + 32))(a1))
  {
    unint64_t v3 = (const void ****)a1[11];
    uint64_t v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      uint64_t v5 = *v3;
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v6)
      {
        if (v5)
        {
          uint64_t v7 = *v5;
          unint64_t v8 = v5[1];
          if (*v5 != v8)
          {
            uint64_t v9 = (uint64_t)(a1 + 17);
            unint64_t v10 = a1 + 18;
            do
            {
              uint64_t v11 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v9, v7);
              if (v10 != (void *)v11) {
                uint64_t v2 = v11 + 56;
              }
              v7 += 3;
            }
            while (v7 != v8);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  return v2;
}

void sub_1B2341298(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 108) = a2;
  *((_DWORD *)this + 109) = a3;
  *((_WORD *)this + 220) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 59) = &unk_1F0A4A6D0;
  *((_OWORD *)this + 30) = xmmword_1B255E480;
  *((void *)this + 62) = 0x3BF800000;
  *((_DWORD *)this + 126) = 1;
  *((_WORD *)this + 254) = 0;
  *((unsigned char *)this + 510) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_1F0A4D508;
  *((void *)this + 53) = off_1F0A4D710;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = &unk_1F0A51768;
  *((unsigned char *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = &unk_1F0A51768;
  *((unsigned char *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = &unk_1F0A51768;
  *((unsigned char *)this + 160) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 21) = &unk_1F0A51768;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = &unk_1F0A51768;
  *((unsigned char *)this + 256) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = &unk_1F0A51768;
  *((unsigned char *)this + 376) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = 0;
  *(void *)&double result = 257;
  *((_DWORD *)this + 104) = 257;
  *((unsigned char *)this + 420) = 0;
  return result;
}

int *kaldi::CuArray<int>::operator=(int *a1, uint64_t a2)
{
  if (a1 != (int *)a2)
  {
    if (!*((void *)a1 + 2)) {
      *((void *)a1 + 2) = *(void *)(a2 + 16);
    }
    kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1);
    uint64_t v4 = *a1;
    if (v4) {
      memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v4);
    }
  }
  return a1;
}

kaldi::nnet1::MovingAttentionComponent *kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::MovingAttentionComponent *a2)
{
  *((void *)this + 54) = *(void *)((char *)a2 + *(void *)(*(void *)a2 - 24) + 8);
  *((_WORD *)this + 220) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 59) = &unk_1F0A4A6D0;
  *((_OWORD *)this + 30) = xmmword_1B255E480;
  *((_DWORD *)this + 124) = -1082130432;
  *(void *)((char *)this + 500) = 0x100000003;
  *((_WORD *)this + 254) = 0;
  *((unsigned char *)this + 510) = 0;
  *((void *)this + 1) = -1;
  *(void *)this = off_1F0A4D508;
  *((void *)this + 53) = off_1F0A4D710;
  uint64_t v4 = (int32x2_t *)((char *)this + 24);
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 3) = &unk_1F0A51768;
  *((unsigned char *)this + 64) = 0;
  uint64_t v5 = (int32x2_t *)((char *)this + 72);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 9) = &unk_1F0A51768;
  *((unsigned char *)this + 112) = 0;
  uint64_t v6 = (int32x2_t *)((char *)this + 120);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 15) = &unk_1F0A51768;
  *((unsigned char *)this + 160) = 0;
  uint64_t v7 = (int32x2_t *)((char *)this + 168);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 21) = &unk_1F0A51768;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 27) = &unk_1F0A51768;
  *((unsigned char *)this + 256) = 0;
  unint64_t v8 = (char *)this + 264;
  char v13 = (char *)this + 288;
  long long v14 = (int *)((char *)this + 312);
  uint64_t v9 = (int32x2_t *)((char *)this + 336);
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = &unk_1F0A51768;
  *((unsigned char *)this + 376) = 0;
  unint64_t v10 = (char *)this + 384;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  uint64_t v11 = *((void *)a2 + 2);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 51) = *((void *)a2 + 51);
  *((void *)this + 2) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
  kaldi::CuMatrix<float>::operator=(v4, (int32x2_t *)a2 + 3);
  kaldi::CuMatrix<float>::operator=(v5, (int32x2_t *)a2 + 9);
  kaldi::CuMatrix<float>::operator=(v6, (int32x2_t *)a2 + 15);
  kaldi::CuMatrix<float>::operator=(v7, (int32x2_t *)a2 + 21);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v8, *((void *)a2 + 33), *((void *)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 34) - *((void *)a2 + 33)) >> 3));
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v13, *((void *)a2 + 36), *((void *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 37) - *((void *)a2 + 36)) >> 3));
  }
  kaldi::CuArray<int>::operator=(v14, (uint64_t)a2 + 312);
  kaldi::CuMatrix<float>::operator=(v9, (int32x2_t *)a2 + 42);
  if (this != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v10, *((char **)a2 + 48), *((void *)a2 + 49), (uint64_t)(*((void *)a2 + 49) - *((void *)a2 + 48)) >> 2);
  }
  *((_DWORD *)this + 104) = *((_DWORD *)a2 + 104);
  *((unsigned char *)this + 420) = *((unsigned char *)a2 + 420);
  return this;
}

void sub_1B23417F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, kaldi::nnet1::UpdatableComponent *a11, uint64_t a12, void *a13, uint64_t a14)
{
  BOOL v22 = *v19;
  if (*v19)
  {
    *((void *)v14 + 49) = v22;
    operator delete(v22);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v20);
  unint64_t v23 = (void *)*((void *)v14 + 40);
  if (v23) {
    free(v23);
  }
  *a13 = 0;
  a13[1] = 0;
  a13[2] = 0;
  a14 = a12;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  quasar::Bitmap::~Bitmap(v14);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a11);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[3];
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *((void *)this + 2) = 0;
  uint64_t v5 = (void *)*((void *)this + 48);
  if (v5)
  {
    *((void *)this + 49) = v5;
    operator delete(v5);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  uint64_t v6 = (void *)*((void *)this + 40);
  if (v6) {
    free(v6);
  }
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  uint64_t v7 = (void **)((char *)this + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)((char *)this + 264);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 424);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent((kaldi::nnet1::MovingAttentionComponent *)((char *)this + *(void *)(*(void *)this - 24)));
}

void kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
}

void sub_1B2341B40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40F02A9525);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
  kaldi::nnet1::MovingAttentionComponent::Copy((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

void kaldi::nnet1::MovingAttentionComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  memset(v49, 0, 24);
  uint64_t v5 = a2 + 4;
  uint64_t v6 = a1 + 412;
  uint64_t v7 = a1 + 408;
  uint64_t v8 = a1 + 12;
  uint64_t v9 = a1 + 8;
  while (2)
  {
    if ((*((unsigned char *)v5 + *(void *)(*a2 - 24)) & 2) != 0) {
      goto LABEL_100;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v49);
    if ((SHIBYTE(v49[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v49[2]))
      {
        case 0xC:
          unint64_t v27 = v49;
          goto LABEL_95;
        case 0xD:
          BOOL v10 = v49[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v49 + 5) == (void *)0x3E747865746E6F43;
          goto LABEL_12;
        case 0xE:
          BOOL v20 = v49[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v49 + 6) == (void *)0x3E747865746E6F43;
          goto LABEL_87;
        case 0xF:
          BOOL v19 = v49[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v49 + 7) == (void *)0x3E736E6F69746E65;
          goto LABEL_82;
        case 0x10:
          if (v49[0] == (void *)0x52656372756F533CLL && v49[1] == (void *)0x3E64657372657665) {
            goto LABEL_61;
          }
          if (v49[0] == (void *)0x65677261546F4E3CLL && v49[1] == (void *)0x3E7461636E6F4374) {
            goto LABEL_91;
          }
          if (v49[0] != (void *)0x636174746165523CLL || v49[1] != (void *)0x3E74656772615468) {
            goto LABEL_115;
          }
          goto LABEL_60;
        case 0x14:
          if (v49[0] != (void *)0x646F7250746F443CLL
            || v49[1] != (void *)0x74616C6552746375
            || LODWORD(v49[2]) != 1047424873)
          {
            goto LABEL_115;
          }
          goto LABEL_78;
        case 0x16:
          BOOL v16 = v49[0] == (void *)0x53656372756F533CLL
             && v49[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v49[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          goto LABEL_68;
        default:
          goto LABEL_115;
      }
    }
    switch((unint64_t)v49[1])
    {
      case 0xCuLL:
        goto LABEL_94;
      case 0xDuLL:
        BOOL v10 = *(void *)v49[0] == 0x6E6F437466654C3CLL && *(void *)((char *)v49[0] + 5) == 0x3E747865746E6F43;
LABEL_12:
        uint64_t v11 = v7;
        if (!v10) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0xEuLL:
        BOOL v20 = *(void *)v49[0] == 0x6F4374686769523CLL && *(void *)((char *)v49[0] + 6) == 0x3E747865746E6F43;
LABEL_87:
        uint64_t v11 = v6;
        if (!v20) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0xFuLL:
        BOOL v19 = *(void *)v49[0] == 0x6574744178614D3CLL && *(void *)((char *)v49[0] + 7) == 0x3E736E6F69746E65;
LABEL_82:
        uint64_t v11 = v8;
        if (!v19) {
          goto LABEL_115;
        }
        goto LABEL_89;
      case 0x10uLL:
        if (*(void *)v49[0] == 0x52656372756F533CLL && *((void *)v49[0] + 1) == 0x3E64657372657665)
        {
LABEL_61:
          *(unsigned char *)(a1 + 416) = 0;
        }
        else if (*(void *)v49[0] == 0x65677261546F4E3CLL && *((void *)v49[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_91:
          *(unsigned char *)(a1 + 417) = 0;
        }
        else
        {
          if (*(void *)v49[0] != 0x636174746165523CLL || *((void *)v49[0] + 1) != 0x3E74656772615468) {
            goto LABEL_115;
          }
LABEL_60:
          *(unsigned char *)(a1 + 418) = 1;
        }
        goto LABEL_90;
      case 0x14uLL:
        if (*(void *)v49[0] == 0x646F7250746F443CLL
          && *((void *)v49[0] + 1) == 0x74616C6552746375
          && *((_DWORD *)v49[0] + 4) == 1047424873)
        {
LABEL_78:
          *(unsigned char *)(a1 + 419) = 1;
LABEL_90:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
        if (v49[1] != (void *)12) {
          goto LABEL_115;
        }
LABEL_94:
        unint64_t v27 = (void **)v49[0];
LABEL_95:
        uint64_t v28 = *v27;
        int v29 = *((_DWORD *)v27 + 2);
        if (v28 != (void *)0x6E6F706D6F432F3CLL || v29 != 1047817829)
        {
LABEL_115:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
          uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Unknown token ", 14);
          if (SHIBYTE(v49[2]) >= 0) {
            uint64_t v39 = v49;
          }
          else {
            uint64_t v39 = (void **)v49[0];
          }
          if (SHIBYTE(v49[2]) >= 0) {
            uint64_t v40 = HIBYTE(v49[2]);
          }
          else {
            uint64_t v40 = (uint64_t)v49[1];
          }
          unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
          uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", a typo in config?", 19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" (SourceStateDimension|MaxAttentions|LeftContext|RightContext)", 62);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v44);
        }
LABEL_100:
        uint64_t v31 = *(void *)(a1 + 16);
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&v46);
        float v32 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v46);
        uint64_t v45 = 0;
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v44, 3);
          uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Initializing component of type ", 31);
          if (v48 >= 0) {
            uint64_t v34 = (void **)&v46;
          }
          else {
            uint64_t v34 = v46;
          }
          if (v48 >= 0) {
            uint64_t v35 = HIBYTE(v48);
          }
          else {
            uint64_t v35 = v47;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v44);
        }
        kaldi::ExpectToken(a2, 0, "<InputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v45 + 4);
        kaldi::ExpectToken(a2, 0, "<OutputDim>");
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v45);
        kaldi::nnet1::Component::NewComponentOfType(v32);
        *(void *)(a1 + 16) = v37;
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v37 + 96))(v37, a2, a3);
        kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
        if (SHIBYTE(v48) < 0) {
          operator delete(v46);
        }
        if (SHIBYTE(v49[2]) < 0) {
          operator delete(v49[0]);
        }
        return;
      case 0x16uLL:
        BOOL v16 = *(void *)v49[0] == 0x53656372756F533CLL
           && *((void *)v49[0] + 1) == 0x656D694465746174
           && *(void *)((char *)v49[0] + 14) == 0x3E6E6F69736E656DLL;
LABEL_68:
        uint64_t v11 = v9;
        if (!v16) {
          goto LABEL_115;
        }
LABEL_89:
        kaldi::ReadBasicType<int>(a2, 0, v11);
        goto LABEL_90;
      default:
        goto LABEL_115;
    }
  }
}

void sub_1B23422CC()
{
}

void *kaldi::nnet1::MovingAttentionComponent::Check(void *this)
{
  if (!*((unsigned char *)this + 420))
  {
    uint64_t v1 = (uint64_t)this;
    uint64_t v2 = (_DWORD *)this[2];
    if (v2)
    {
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "this is a non-recurrent version, cannot have a recurrent internal component");
        goto LABEL_32;
      }
      if (this)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "no recursive inclusion");
        goto LABEL_32;
      }
    }
    int v3 = *(_DWORD *)(v1 + 12);
    if (v3 < 1 || (int v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, max attention is ", 47);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    int v5 = *(_DWORD *)(v1 + 408);
    if (v5 < 1 || (int v6 = *(_DWORD *)(v1 + 412), v6 <= 0))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, left and right context is ", 56);
      BOOL v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (*(unsigned char *)(v1 + 417))
    {
      if (*(_DWORD *)(v1 + *(void *)(*(void *)v1 - 24) + 8) + v4 * v3 != v2[2])
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is concatenated. component has input dim ", 58);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
        uint64_t v8 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
        uint64_t v9 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v4 * v3 != v2[2])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is not concatenated. component has input dim ", 62);
      BOOL v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", attentions ", 13);
      BOOL v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", source state dimension ", 25);
      float v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", however, the internal training component has input dim ", 57);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    uint64_t v10 = v1 + *(void *)(*(void *)v1 - 24);
    int v11 = *(_DWORD *)(v10 + 12);
    if (*(unsigned char *)(v1 + 418))
    {
      if (v11 != v2[3] + *(_DWORD *)(v10 + 8))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has input dim ", 24);
        unint64_t v12 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , and output dim ", 18);
        char v13 = (void *)std::ostream::operator<<();
        long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", and you requested to reattch the target, however, ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the internal component has output dim ", 38);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v11 != v2[3])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has output dim ", 25);
      BOOL v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" does not match the internal component's output dim ", 52);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (v3 == v5 + v6 + 1)
    {
      if (*(unsigned char *)(v1 + 419))
      {
        if (*(_DWORD *)(v1 + *(void *)(*(void *)v1 - 24) + 8) != v4)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "the source state must have the same dimension as the input dimension of the component if want to take the dot product between them");
          goto LABEL_32;
        }
        goto LABEL_22;
      }
      if (*(unsigned __int8 *)(v1 + 418) | *(unsigned __int8 *)(v1 + 417))
      {
LABEL_22:
        *(unsigned char *)(v1 + 420) = 1;
        return this;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "if not taking the dot production relation from the source and target, you must at least concatenate or reattach the target");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"the maximum attention is ", 25);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" , that does not match the left_context + 1 + right_context, you defined left/right context as ", 95);
      uint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  return this;
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InitData(void *a1, uint64_t *a2, uint64_t a3)
{
}

void kaldi::nnet1::MovingAttentionComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  memset(v42, 0, 24);
  uint64_t v7 = a1 + 412;
  uint64_t v8 = a1 + 408;
  uint64_t v9 = a1 + 12;
  uint64_t v10 = a1 + 8;
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v42);
    if (SHIBYTE(v42[2]) < 0)
    {
      uint64_t v15 = v42[1];
      if (v42[1] == (void *)15)
      {
        BOOL v18 = *(void *)v42[0] == 0x6574744178614D3CLL && *(void *)((char *)v42[0] + 7) == 0x3E736E6F69746E65;
        uint64_t v13 = v9;
        if (v18) {
          goto LABEL_69;
        }
        uint64_t v15 = v42[1];
      }
      else if (v42[1] == (void *)22)
      {
        BOOL v16 = *(void *)v42[0] == 0x53656372756F533CLL && *((void *)v42[0] + 1) == 0x656D694465746174;
        BOOL v17 = v16 && *(void *)((char *)v42[0] + 14) == 0x3E6E6F69736E656DLL;
        uint64_t v13 = v10;
        if (v17) {
          goto LABEL_69;
        }
      }
      if (v15 == (void *)13)
      {
        BOOL v19 = *(void *)v42[0] == 0x6E6F437466654C3CLL && *(void *)((char *)v42[0] + 5) == 0x3E747865746E6F43;
        uint64_t v13 = v8;
        if (v19) {
          goto LABEL_69;
        }
        uint64_t v15 = v42[1];
      }
      if (v15 == (void *)14)
      {
        BOOL v20 = *(void *)v42[0] == 0x6F4374686769523CLL && *(void *)((char *)v42[0] + 6) == 0x3E747865746E6F43;
        uint64_t v13 = v7;
        if (v20) {
          goto LABEL_69;
        }
        uint64_t v15 = v42[1];
      }
      if (v15 != (void *)16) {
        goto LABEL_84;
      }
      if (*(void *)v42[0] == 0x52656372756F533CLL && *((void *)v42[0] + 1) == 0x3E64657372657665)
      {
LABEL_95:
        *(unsigned char *)(a1 + 416) = 0;
      }
      else
      {
        uint64_t v15 = v42[1];
        if (v42[1] != (void *)16) {
          goto LABEL_84;
        }
        if (*(void *)v42[0] == 0x65677261546F4E3CLL && *((void *)v42[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_96:
          *(unsigned char *)(a1 + 417) = 0;
        }
        else if ((HIBYTE(v42[2]) & 0x80) != 0)
        {
          if (*(void *)v42[0] == 0x636174746165523CLL && *((void *)v42[0] + 1) == 0x3E74656772615468) {
            goto LABEL_102;
          }
          uint64_t v15 = v42[1];
LABEL_84:
          if (v15 != (void *)20) {
            goto LABEL_103;
          }
          int v11 = (void **)v42[0];
LABEL_86:
          int v29 = *v11;
          char v30 = v11[1];
          int v31 = *((_DWORD *)v11 + 4);
          BOOL v32 = v29 == (void *)0x646F7250746F443CLL && v30 == (void *)0x74616C6552746375;
          if (!v32 || v31 != 1047424873) {
            goto LABEL_103;
          }
          *(unsigned char *)(a1 + 419) = 1;
        }
        else
        {
          if (HIBYTE(v42[2]) != 16) {
            goto LABEL_103;
          }
LABEL_79:
          if (v42[0] != (void *)0x636174746165523CLL || v42[1] != (void *)0x3E74656772615468)
          {
LABEL_103:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v42, "</Component>"))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
              int v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Unrecognized token ", 19);
              if (SHIBYTE(v42[2]) >= 0) {
                uint64_t v38 = v42;
              }
              else {
                uint64_t v38 = (void **)v42[0];
              }
              if (SHIBYTE(v42[2]) >= 0) {
                uint64_t v39 = HIBYTE(v42[2]);
              }
              else {
                uint64_t v39 = (uint64_t)v42[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
            }
            break;
          }
LABEL_102:
          *(unsigned char *)(a1 + 418) = 1;
        }
      }
    }
    else
    {
      int v11 = v42;
      switch(HIBYTE(v42[2]))
      {
        case 0xD:
          goto LABEL_11;
        case 0xE:
          goto LABEL_56;
        case 0xF:
          BOOL v12 = v42[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v42 + 7) == (void *)0x3E736E6F69746E65;
          uint64_t v13 = v9;
          if (v12) {
            break;
          }
          if (HIBYTE(v42[2]) == 14)
          {
LABEL_56:
            BOOL v23 = v42[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v42 + 6) == (void *)0x3E747865746E6F43;
            uint64_t v13 = v7;
            if (!v23) {
              goto LABEL_103;
            }
          }
          else
          {
            if (HIBYTE(v42[2]) != 13) {
              goto LABEL_103;
            }
LABEL_11:
            BOOL v14 = v42[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v42 + 5) == (void *)0x3E747865746E6F43;
            uint64_t v13 = v8;
            if (!v14) {
              goto LABEL_103;
            }
          }
          break;
        case 0x10:
          if (v42[0] == (void *)0x52656372756F533CLL && v42[1] == (void *)0x3E64657372657665) {
            goto LABEL_95;
          }
          if (HIBYTE(v42[2]) != 16) {
            goto LABEL_103;
          }
          if (v42[0] != (void *)0x65677261546F4E3CLL || v42[1] != (void *)0x3E7461636E6F4374) {
            goto LABEL_79;
          }
          goto LABEL_96;
        case 0x14:
          goto LABEL_86;
        case 0x16:
          BOOL v25 = v42[0] == (void *)0x53656372756F533CLL
             && v42[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v42[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          uint64_t v13 = v10;
          if (!v25) {
            goto LABEL_103;
          }
          break;
        default:
          goto LABEL_103;
      }
LABEL_69:
      kaldi::ReadBasicType<int>(a2, a3, v13);
    }
  }
  uint64_t v35 = *(void *)(a1 + 16);
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v36) {
  *(void *)(a1 + 16) = v36;
  }
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  if (SHIBYTE(v42[2]) < 0) {
    operator delete(v42[0]);
  }
}

void sub_1B2342E90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<SourceStateDimension>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxAttentions>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LeftContext>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<RightContext>");
  kaldi::WriteBasicType<int>(a2, a3);
  if (!*(unsigned char *)(a1 + 416)) {
    kaldi::WriteToken(a2, a3, "<SourceReversed>");
  }
  if (!*(unsigned char *)(a1 + 417)) {
    kaldi::WriteToken(a2, a3, "<NoTargetConcat>");
  }
  if (*(unsigned char *)(a1 + 418)) {
    kaldi::WriteToken(a2, a3, "<ReattachTarget>");
  }
  if (*(unsigned char *)(a1 + 419)) {
    kaldi::WriteToken(a2, a3, "<DotProductRelation>");
  }
  kaldi::WriteToken(a2, a3, "</Component>");
  int v6 = (kaldi::nnet1::Component *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v6, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1B23430BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteConfig(void *a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::MovingAttentionComponent::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteData(void **a1)
{
  ((void (*)(void **))(*a1)[12])(a1);
  uint64_t v2 = *(uint64_t (**)(void))(*a1[2] + 104);
  return v2();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteData(void *a1)
{
  uint64_t v1 = (void **)((char *)a1 + *(void *)(*a1 - 120));
  ((void (*)(void **))(*v1)[12])(v1);
  uint64_t v2 = *(uint64_t (**)(void))(*v1[2] + 104);
  return v2();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 176))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 192) + 16) + 176))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 184))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 200) + 16) + 184))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 192))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetParams(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 208) + 16) + 192))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 208))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 224) + 16) + 208))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 2) + 216))(a2);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(float))(**(void **)((char *)this + *(void *)(*(void *)this - 232) + 16)
                                          + 216))(a2);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::MovingAttentionComponent *, void *, void))(*(void *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((void **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B23435FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  return kaldi::nnet1::MovingAttentionComponent::Info((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                               + *(void *)(*(void *)this - 80)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 72))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)this + *(void *)(*(void *)this - 88) + 16) + 72))();
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  long long v3 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 264))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  uint64_t v2 = (char *)this + *(void *)(*(void *)this - 280);
  long long v3 = &v2[*(void *)(*(void *)v2 - 24)];
  long long v4 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(void))(**((void **)v2 + 2) + 264))();
}

void kaldi::nnet1::MovingAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  uint64_t v55 = a3;
  unint64_t v6 = a3[1] - *a3;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 24), v6 >> 2, ((*(_DWORD *)(a1 + 408) + *(_DWORD *)(a1 + 412) + *(_DWORD *)(a2 + 20) / (int)(v6 >> 2))* *(_DWORD *)(a2 + 16)), 0, 0);
  uint64_t v7 = (v6 >> 2);
  unint64_t v54 = v6 >> 2;
  uint64_t v52 = v6;
  uint64_t v53 = v7;
  if ((int)(v6 >> 2) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *a3;
    do
    {
      if (*(int *)(v9 + 4 * v8) >= 1)
      {
        int v10 = 0;
        unsigned int v11 = *(_DWORD *)(a1 + 8);
        unsigned int v12 = v11 * *(_DWORD *)(a1 + 408);
        int v13 = v8;
        do
        {
          unsigned int v14 = *(_DWORD *)(a1 + 48);
          uint64_t v15 = *(void *)(a1 + 32) + 4 * v12;
          unsigned int v16 = *(_DWORD *)(a1 + 52) - v12;
          uint64_t v17 = *(void *)(a1 + 56);
          *((void *)&v58 + 1) = __PAIR64__(*(_DWORD *)(a1 + 44), v11);
          *(void *)&long long v59 = __PAIR64__(v16, v14);
          *((void *)&v59 + 1) = v17;
          uint64_t v60 = &unk_1F0A472D0;
          std::string __p = &unk_1F0A472A0;
          *(void *)&long long v58 = v15;
          uint64_t v61 = v15 + 4 * (int)(v14 * v8);
          uint64_t v62 = v11;
          uint64_t v63 = v17;
          uint64_t v18 = *(void *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v13;
          LODWORD(v15) = *(_DWORD *)(a2 + 16);
          uint64_t v19 = *(void *)(a2 + 32);
          v56[0] = &unk_1F0A472D0;
          v56[1] = v18;
          v56[3] = v19;
          v56[2] = v15;
          kaldi::CuVectorBase<float>::CopyFromVec(&v60, (uint64_t)v56);
          uint64_t v60 = &unk_1F0A472D0;
          uint64_t v61 = 0;
          LODWORD(v62) = 0;
          uint64_t v63 = 0;
          std::string __p = &unk_1F0A472A0;
          long long v58 = 0u;
          long long v59 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
          unsigned int v11 = *(_DWORD *)(a1 + 8);
          v12 += v11;
          ++v10;
          uint64_t v9 = *v55;
          v13 += v54;
        }
        while (v10 < *(_DWORD *)(*v55 + 4 * v8));
        uint64_t v7 = v53;
      }
      ++v8;
    }
    while (v8 != v7);
  }
  unint64_t v20 = (int)(v52 >> 2);
  std::string __p = 0;
  long long v58 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 264), v20, (uint64_t)&__p);
  if (__p)
  {
    *(void *)&long long v58 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  long long v58 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 288), v20, (uint64_t)&__p);
  if (__p)
  {
    *(void *)&long long v58 = __p;
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 416))
  {
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 384), v20);
    if ((int)v54 >= 1)
    {
      uint64_t v21 = 0;
      do
      {
        *(_DWORD *)(*(void *)(a1 + 384) + 4 * v21) = *(_DWORD *)(*v55 + 4 * v21) + *(_DWORD *)(a1 + 408) - 1;
        uint64_t v22 = *(void *)(a1 + 288) + 24 * v21;
        unint64_t v24 = (_DWORD **)(v22 + 8);
        BOOL v23 = *(_DWORD **)(v22 + 8);
        uint64_t v26 = (void *)(v22 + 16);
        unint64_t v25 = *(void *)(v22 + 16);
        if ((unint64_t)v23 >= v25)
        {
          uint64_t v28 = *(_DWORD **)v22;
          uint64_t v29 = ((uint64_t)v23 - *(void *)v22) >> 2;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            goto LABEL_53;
          }
          uint64_t v31 = v25 - (void)v28;
          if (v31 >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v26, v32);
            BOOL v23 = *v24;
            uint64_t v28 = *(_DWORD **)v22;
          }
          else
          {
            uint64_t v33 = 0;
          }
          uint64_t v34 = &v33[4 * v29];
          *(_DWORD *)uint64_t v34 = *(_DWORD *)(a1 + 408);
          unint64_t v27 = v34 + 4;
          while (v23 != v28)
          {
            int v35 = *--v23;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          *(void *)uint64_t v22 = v34;
          void *v24 = v27;
          *uint64_t v26 = &v33[4 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          _DWORD *v23 = *(_DWORD *)(a1 + 408);
          unint64_t v27 = v23 + 1;
        }
        void *v24 = v27;
        ++v21;
      }
      while (v21 != v7);
    }
  }
  else if ((int)v54 >= 1)
  {
    uint64_t v36 = 0;
    do
    {
      uint64_t v37 = *(void *)(a1 + 288) + 24 * v36;
      int v38 = *(_DWORD *)(*v55 + 4 * v36) + *(_DWORD *)(a1 + 408) - 1;
      uint64_t v40 = (int **)(v37 + 8);
      uint64_t v39 = *(int **)(v37 + 8);
      uint64_t v42 = (void *)(v37 + 16);
      unint64_t v41 = *(void *)(v37 + 16);
      if ((unint64_t)v39 >= v41)
      {
        int v44 = *(int **)v37;
        uint64_t v45 = ((uint64_t)v39 - *(void *)v37) >> 2;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62) {
LABEL_53:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v47 = v41 - (void)v44;
        if (v47 >> 1 > v46) {
          unint64_t v46 = v47 >> 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          int v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v42, v48);
          uint64_t v39 = *v40;
          int v44 = *(int **)v37;
        }
        else
        {
          int v49 = 0;
        }
        unint64_t v50 = (int *)&v49[4 * v45];
        *unint64_t v50 = v38;
        unint64_t v43 = v50 + 1;
        while (v39 != v44)
        {
          int v51 = *--v39;
          *--unint64_t v50 = v51;
        }
        *(void *)uint64_t v37 = v50;
        void *v40 = v43;
        *uint64_t v42 = &v49[4 * v48];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        int *v39 = v38;
        unint64_t v43 = v39 + 1;
      }
      void *v40 = v43;
      ++v36;
    }
    while (v36 != v53);
  }
}

void sub_1B2343C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::MovingAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, void *a3, int32x2_t *a4)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  unint64_t v25 = a3;
  uint64_t v26 = a1;
  unint64_t v8 = a3[1] - *a3;
  unint64_t v9 = v8 >> 2;
  uint64_t v11 = *(unsigned int *)(a2 + 16);
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  int v12 = *(_DWORD *)(a1 + 408) * v11;
  uint64_t v13 = *(void *)(a1 + 128) + 4 * v12;
  unsigned int v14 = *(_DWORD *)(a1 + 144);
  unsigned int v15 = *(_DWORD *)(a1 + 148) - v12;
  uint64_t v16 = *(void *)(a1 + 152);
  *(void *)&long long v36 = v13;
  DWORD2(v36) = v11 * ((int)v10 / (int)(v8 >> 2));
  HIDWORD(v36) = v8 >> 2;
  *(void *)&long long v37 = __PAIR64__(v15, v14);
  *((void *)&v37 + 1) = v16;
  int v35 = &unk_1F0A472A0;
  kaldi::CuMatrix<float>::Resize(a4, v10, v11, 0, 0);
  if (SHIDWORD(v36) >= 1)
  {
    unint64_t v17 = 0;
    uint64_t v24 = (v8 >> 2);
    do
    {
      if (v17 >= (uint64_t)(v25[1] - *v25) >> 2) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      int v18 = *(_DWORD *)(*v25 + 4 * v17);
      if (v18 >= 1)
      {
        int v19 = 0;
        int v20 = v17;
        do
        {
          uint64_t v21 = *(void *)&a4[1] + 4 * a4[3].i32[0] * v20;
          unsigned __int32 v22 = a4[2].u32[0];
          int32x2_t v23 = a4[4];
          v34[0] = &unk_1F0A472D0;
          v34[1] = v21;
          v34[3] = v23;
          v34[2] = v22;
          DWORD2(v28) = *(_DWORD *)(v26 + 8);
          HIDWORD(v28) = HIDWORD(v36);
          LODWORD(v29) = v37;
          DWORD1(v29) = DWORD1(v37) - DWORD2(v28) * v19;
          *((void *)&v29 + 1) = *((void *)&v37 + 1);
          unint64_t v30 = &unk_1F0A472D0;
          unint64_t v27 = &unk_1F0A472A0;
          *(void *)&long long v28 = v36 + 4 * (DWORD2(v28) * v19);
          uint64_t v31 = v28 + 4 * (int)v37 * (int)v17;
          uint64_t v32 = DWORD2(v28);
          uint64_t v33 = *((void *)&v37 + 1);
          kaldi::CuVectorBase<float>::CopyFromVec(v34, (uint64_t)&v30);
          unint64_t v30 = &unk_1F0A472D0;
          uint64_t v31 = 0;
          LODWORD(v32) = 0;
          uint64_t v33 = 0;
          unint64_t v27 = &unk_1F0A472A0;
          long long v28 = 0u;
          long long v29 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v27);
          ++v19;
          v20 += v9;
        }
        while (v18 != v19);
      }
      ++v17;
    }
    while (v17 != v24);
  }
  int v35 = &unk_1F0A472A0;
  long long v36 = 0u;
  long long v37 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v35);
}

void sub_1B2343EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10)
{
  *(void *)(v10 - 128) = a9;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v10 - 128));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<unsigned int> *this)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v6 = v4;
    uint64_t v7 = (uint64_t *)(*(void *)(a1 + 264) + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4) - *(_DWORD *)(a1 + 408);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t *a2)
{
  int v4 = -1431655765 * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3);
  std::vector<std::vector<int>>::resize(a2, v4);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v25 = v4;
    uint64_t v6 = *(void *)(a1 + 264);
    do
    {
      uint64_t v7 = (_DWORD **)(v6 + 24 * v5);
      for (uint64_t i = *v7; i != v7[1]; ++i)
      {
        uint64_t v9 = *a2 + 24 * v5;
        int v10 = *i - *(_DWORD *)(a1 + 408);
        int v12 = (int **)(v9 + 8);
        uint64_t v11 = *(int **)(v9 + 8);
        unsigned int v14 = (void *)(v9 + 16);
        unint64_t v13 = *(void *)(v9 + 16);
        if ((unint64_t)v11 >= v13)
        {
          uint64_t v16 = *(int **)v9;
          uint64_t v17 = ((uint64_t)v11 - *(void *)v9) >> 2;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v19 = v13 - (void)v16;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v14, v20);
            uint64_t v11 = *v12;
            uint64_t v16 = *(int **)v9;
          }
          else
          {
            uint64_t v21 = 0;
          }
          unsigned __int32 v22 = (int *)&v21[4 * v17];
          *unsigned __int32 v22 = v10;
          unsigned int v15 = v22 + 1;
          while (v11 != v16)
          {
            int v23 = *--v11;
            *--unsigned __int32 v22 = v23;
          }
          *(void *)uint64_t v9 = v22;
          *int v12 = v15;
          *unsigned int v14 = &v21[4 * v20];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *uint64_t v11 = v10;
          unsigned int v15 = v11 + 1;
        }
        *int v12 = v15;
        uint64_t v6 = *(void *)(a1 + 264);
        uint64_t v7 = (_DWORD **)(v6 + 24 * v5);
      }
      ++v5;
    }
    while (v5 != v25);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(unsigned char *)(this + 420) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(unsigned char *)(this + 420) = 0;
  }
  return this;
}

void kaldi::nnet1::MovingAttentionComponent::PropagateFnc(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned int *)a1 + 11);
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  int v8 = *(_DWORD *)(a2 + 20);
  unsigned int v9 = *((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3);
  a1[13] = *(void *)(a3 + 32);
  int v50 = v8 / (int)v7;
  if (*((unsigned char *)a1 + 417)) {
    int v10 = *(_DWORD *)((char *)a1 + *(void *)(v6 - 24) + 8);
  }
  else {
    int v10 = 0;
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1 + 9, v7, v10 + v9, 1, 0);
  if (v50 >= 1)
  {
    int v11 = 0;
    uint64_t v47 = (uint64_t)(a1 + 9);
    long long v12 = 0uLL;
    do
    {
      v64[0] = v12;
      v64[1] = v12;
      uint64_t v63 = &unk_1F0A472A0;
      int v13 = v11 * v7;
      int v51 = v11;
      int v52 = v11 * v7;
      if (*((unsigned char *)a1 + 417))
      {
        int v14 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
        unsigned int v15 = *((_DWORD *)a1 + 25) - v9;
        uint64_t v16 = a1[13];
        *(void *)&v64[0] = a1[10] + 4 * (int)v9;
        *(void *)((char *)v64 + 12) = *(uint64_t *)((char *)a1 + 92);
        DWORD2(v64[0]) = v14;
        DWORD1(v64[1]) = v15;
        *((void *)&v64[1] + 1) = v16;
        uint64_t v61 = &unk_1F0A472A0;
        v62[0] = v12;
        v62[1] = v12;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
        unsigned int v17 = *(_DWORD *)(v49 + 24);
        uint64_t v18 = *(void *)(v49 + 8) + 4 * (int)(v17 * v13);
        int v19 = *(_DWORD *)(v49 + 28) - v17 * v13;
        uint64_t v20 = *(void *)(v49 + 32);
        DWORD2(v62[0]) = *(_DWORD *)(v49 + 16);
        HIDWORD(v62[0]) = v7;
        *(void *)&v62[1] = __PAIR64__(v19, v17);
        *((void *)&v62[1] + 1) = v20;
        uint64_t v61 = &unk_1F0A472A0;
        *(void *)&v62[0] = v18;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v63, (uint64_t)&v61, 111);
        uint64_t v61 = &unk_1F0A472A0;
        memset(v62, 0, sizeof(v62));
      }
      else
      {
        unsigned int v21 = *(_DWORD *)(v49 + 16);
        unsigned int v22 = *(_DWORD *)(v49 + 24);
        int v23 = *(_DWORD *)(v49 + 28) - v22 * v13;
        uint64_t v24 = *(void *)(v49 + 32);
        *(void *)&v64[0] = *(void *)(v49 + 8) + 4 * (int)(v22 * v13);
        *((void *)&v64[0] + 1) = __PAIR64__(v7, v21);
        *(void *)&v64[1] = __PAIR64__(v23, v22);
        *((void *)&v64[1] + 1) = v24;
        uint64_t v61 = &unk_1F0A472A0;
        v62[0] = v12;
        v62[1] = v12;
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
      if ((int)v7 >= 1)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 8;
        do
        {
          int v27 = *(_DWORD *)(*(void *)(a1[36] + v26) - 4) - *((_DWORD *)a1 + 102);
          uint64_t v28 = a1[10];
          uint64_t v29 = a1[13];
          *((void *)&v62[0] + 1) = __PAIR64__(*((_DWORD *)a1 + 23), v9);
          *(void *)&v62[1] = a1[12];
          *((void *)&v62[1] + 1) = v29;
          uint64_t v61 = &unk_1F0A472A0;
          *(void *)&v62[0] = v28;
          uint64_t v53 = &unk_1F0A472D0;
          *(void *)&long long v54 = v28 + 4 * LODWORD(v62[1]) * (int)v25;
          *(void *)&long long v55 = v29;
          *((void *)&v54 + 1) = v9;
          uint64_t v30 = a1[4] + 4 * *((_DWORD *)a1 + 12) * (int)v25;
          LODWORD(v28) = *((_DWORD *)a1 + 10);
          uint64_t v31 = a1[7];
          uint64_t v56 = &unk_1F0A472D0;
          uint64_t v57 = v30;
          uint64_t v59 = v31;
          uint64_t v58 = v28;
          uint64_t v32 = v30 + 4 * *((_DWORD *)a1 + 2) * v27;
          v60[0] = &unk_1F0A472D0;
          v60[1] = v32;
          v60[3] = v31;
          v60[2] = v9;
          kaldi::CuVectorBase<float>::CopyFromVec(&v53, (uint64_t)v60);
          uint64_t v53 = &unk_1F0A472D0;
          *(void *)&long long v54 = 0;
          DWORD2(v54) = 0;
          *(void *)&long long v55 = 0;
          uint64_t v61 = &unk_1F0A472A0;
          memset(v62, 0, sizeof(v62));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
          ++v25;
          v26 += 24;
        }
        while (v7 != v25);
      }
      if (*((unsigned char *)a1 + 419) && *((int *)a1 + 3) >= 1)
      {
        int v33 = 0;
        do
        {
          int v34 = *((_DWORD *)a1 + 2);
          uint64_t v35 = a1[10] + 4 * (v34 * v33);
          int v36 = *((_DWORD *)a1 + 25) - v34 * v33;
          uint64_t v37 = a1[13];
          DWORD2(v62[0]) = v34;
          *(void *)((char *)v62 + 12) = *(uint64_t *)((char *)a1 + 92);
          DWORD1(v62[1]) = v36;
          *((void *)&v62[1] + 1) = v37;
          uint64_t v61 = &unk_1F0A472A0;
          *(void *)&v62[0] = v35;
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v61, (uint64_t)&v63);
          uint64_t v61 = &unk_1F0A472A0;
          memset(v62, 0, sizeof(v62));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
          ++v33;
        }
        while (v33 < *((_DWORD *)a1 + 3));
      }
      unsigned int v38 = *(_DWORD *)(v48 + 16);
      unsigned int v39 = *(_DWORD *)(v48 + 24);
      int v40 = *(_DWORD *)(v48 + 28) - v39 * v52;
      uint64_t v41 = *(void *)(v48 + 32);
      *(void *)&long long v54 = *(void *)(v48 + 8) + 4 * (int)(v39 * v52);
      *((void *)&v54 + 1) = __PAIR64__(v7, v38);
      *(void *)&long long v55 = __PAIR64__(v40, v39);
      *((void *)&v55 + 1) = v41;
      unsigned int v42 = *(_DWORD *)(a1[2] + 12);
      *(void *)&v62[0] = v54;
      *((void *)&v62[0] + 1) = __PAIR64__(v7, v42);
      *(void *)&v62[1] = __PAIR64__(v40, v39);
      *((void *)&v62[1] + 1) = v41;
      uint64_t v61 = &unk_1F0A472A0;
      uint64_t v53 = &unk_1F0A472A0;
      long long v54 = 0u;
      long long v55 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
      (*(void (**)(uint64_t, uint64_t, void **, void))(*(void *)a1[2] + 112))(a1[2], v47, &v61, 0);
      kaldi::nnet1::MovingAttentionComponent::ComputeAlignments((int32x2_t *)a1, v47, (uint64_t)&v61);
      uint64_t v61 = &unk_1F0A472A0;
      memset(v62, 0, sizeof(v62));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
      uint64_t v63 = &unk_1F0A472A0;
      memset(v64, 0, sizeof(v64));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v63);
      long long v12 = 0uLL;
      int v11 = v51 + 1;
    }
    while (v51 + 1 != v50);
  }
  if (*((unsigned char *)a1 + 418))
  {
    uint64_t v43 = *(int *)(a1[2] + 12);
    int v44 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
    uint64_t v45 = *(void *)(v48 + 8) + 4 * v43;
    LODWORD(v43) = *(_DWORD *)(v48 + 28) - v43;
    uint64_t v46 = *(void *)(v48 + 32);
    *(void *)&v64[0] = v45;
    *(void *)((char *)v64 + 12) = *(void *)(v48 + 20);
    DWORD2(v64[0]) = v44;
    DWORD1(v64[1]) = v43;
    *((void *)&v64[1] + 1) = v46;
    uint64_t v63 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v63, v49, 111);
    uint64_t v63 = &unk_1F0A472A0;
    memset(v64, 0, sizeof(v64));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v63);
  }
}

void sub_1B23447B0(_Unwind_Exception *a1)
{
  *(void *)(v3 - 128) = v1;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v3 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::ComputeAlignments(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a2 + 20);
  uint64_t v5 = (unsigned int *)a1[2];
  uint64_t v133 = v4;
  if (!v5)
  {
LABEL_91:
    if ((int)v4 < 1) {
      return;
    }
    uint64_t v87 = 0;
    while (1)
    {
      __int32 v88 = *(_DWORD *)(*(void *)(*(void *)&a1[36] + 24 * v87 + 8) - 4);
      uint64_t v89 = *(void *)&a1[33] + 24 * v87;
      uint64_t v91 = (__int32 **)(v89 + 8);
      unint64_t v90 = *(__int32 **)(v89 + 8);
      int v93 = (void *)(v89 + 16);
      unint64_t v92 = *(void *)(v89 + 16);
      if ((unint64_t)v90 >= v92)
      {
        int32x2_t v95 = *(__int32 **)v89;
        uint64_t v96 = ((uint64_t)v90 - *(void *)v89) >> 2;
        unint64_t v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 62) {
          goto LABEL_151;
        }
        uint64_t v98 = v92 - (void)v95;
        if (v98 >> 1 > v97) {
          unint64_t v97 = v98 >> 1;
        }
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v99 = v97;
        }
        if (v99)
        {
          uint64_t v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v93, v99);
          unint64_t v90 = *v91;
          int32x2_t v95 = *(__int32 **)v89;
        }
        else
        {
          uint64_t v100 = 0;
        }
        uint64_t v101 = &v100[4 * v96];
        *(_DWORD *)uint64_t v101 = v88;
        std::string v94 = (__int32 *)(v101 + 4);
        while (v90 != v95)
        {
          int v102 = *--v90;
          *((_DWORD *)v101 - 1) = v102;
          v101 -= 4;
        }
        *(void *)uint64_t v89 = v101;
        *uint64_t v91 = v94;
        *int v93 = &v100[4 * v99];
        if (v95) {
          operator delete(v95);
        }
      }
      else
      {
        __int32 *v90 = v88;
        std::string v94 = v90 + 1;
      }
      *uint64_t v91 = v94;
      int32x2_t v103 = a1[36];
      uint64_t v104 = (void **)(*(void *)&v103 + 24 * v87);
      if (a1[52].i8[0])
      {
        __int32 v105 = v88 + 1;
        int32x2_t v106 = a1[48];
        __int32 v107 = *(_DWORD *)(*(void *)&v106 + 4 * v87);
        uint64_t v108 = *(void *)&v103 + 24 * v87;
        v111 = *(char **)(v108 + 8);
        uint64_t v110 = v108 + 8;
        char v109 = v111;
        v113 = (void *)(v110 + 8);
        unint64_t v112 = *(void *)(v110 + 8);
        if ((unint64_t)v111 >= v112)
        {
          uint64_t v121 = (char *)*v104;
          uint64_t v122 = (v109 - (unsigned char *)*v104) >> 2;
          unint64_t v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 62) {
            goto LABEL_151;
          }
          uint64_t v124 = v112 - (void)v121;
          if (v124 >> 1 > v123) {
            unint64_t v123 = v124 >> 1;
          }
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v125 = v123;
          }
          if (v125)
          {
            int v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v110 + 8, v125);
            char v109 = *(char **)v110;
            uint64_t v121 = (char *)*v104;
          }
          else
          {
            int v126 = 0;
          }
          if (v107 <= v88) {
            __int32 v105 = *(_DWORD *)(*(void *)&v106 + 4 * v87);
          }
          uint64_t v130 = &v126[4 * v122];
          *(_DWORD *)uint64_t v130 = v105;
          v120 = v130 + 4;
          while (v109 != v121)
          {
            int v131 = *((_DWORD *)v109 - 1);
            v109 -= 4;
            *((_DWORD *)v130 - 1) = v131;
            v130 -= 4;
          }
LABEL_147:
          *uint64_t v104 = v130;
          *(void *)uint64_t v110 = v120;
          void *v113 = &v126[4 * v125];
          if (v121) {
            operator delete(v121);
          }
          goto LABEL_149;
        }
        if (v107 <= v88) {
          __int32 v114 = *(_DWORD *)(*(void *)&v106 + 4 * v87);
        }
        else {
          __int32 v114 = v88 + 1;
        }
      }
      else
      {
        __int32 v115 = v88 - 1;
        __int32 v116 = a1[51].i32[0];
        uint64_t v117 = *(void *)&v103 + 24 * v87;
        v118 = *(char **)(v117 + 8);
        uint64_t v110 = v117 + 8;
        char v109 = v118;
        v113 = (void *)(v110 + 8);
        unint64_t v119 = *(void *)(v110 + 8);
        if ((unint64_t)v118 >= v119)
        {
          uint64_t v121 = (char *)*v104;
          uint64_t v127 = (v109 - (unsigned char *)*v104) >> 2;
          unint64_t v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 62) {
LABEL_151:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v129 = v119 - (void)v121;
          if (v129 >> 1 > v128) {
            unint64_t v128 = v129 >> 1;
          }
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v125 = v128;
          }
          if (v125)
          {
            int v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v110 + 8, v125);
            char v109 = *(char **)v110;
            uint64_t v121 = (char *)*v104;
          }
          else
          {
            int v126 = 0;
          }
          if (v88 <= v116) {
            __int32 v115 = a1[51].i32[0];
          }
          uint64_t v130 = &v126[4 * v127];
          *(_DWORD *)uint64_t v130 = v115;
          v120 = v130 + 4;
          while (v109 != v121)
          {
            int v132 = *((_DWORD *)v109 - 1);
            v109 -= 4;
            *((_DWORD *)v130 - 1) = v132;
            v130 -= 4;
          }
          goto LABEL_147;
        }
        if (v88 <= v116) {
          __int32 v114 = a1[51].i32[0];
        }
        else {
          __int32 v114 = v88 - 1;
        }
      }
      *(_DWORD *)char v109 = v114;
      v120 = v109 + 4;
LABEL_149:
      *(void *)uint64_t v110 = v120;
      if (++v87 == v133) {
        return;
      }
    }
  }
  if (!v8)
  {
    if (v10)
    {
      unsigned int v9 = (uint64_t *)(v10 + 112);
      goto LABEL_6;
    }
    goto LABEL_91;
  }
  unsigned int v9 = (uint64_t *)(v8 + 104);
LABEL_6:
  uint64_t v11 = *v9;
  kaldi::CuMatrix<float>::Resize(a1 + 27, (v4 + v4 * a1[1].i32[1]), v5[3], 1, 0);
  uint64_t v12 = a1[1].u32[1];
  if ((int)v12 >= 1)
  {
    int v13 = 0;
    int v14 = 0;
    do
    {
      __int32 v15 = a1[1].i32[0];
      __int32 v16 = a1[30].i32[0];
      unsigned int v17 = (unsigned int *)(*(void *)&a1[28] + 4 * v16 * v13);
      int v18 = a1[30].i32[1] - v16 * v13;
      int32x2_t v19 = a1[31];
      LODWORD(__p.__end_cap_.__value_) = a1[29].i32[0];
      HIDWORD(__p.__end_cap_.__value_) = v4;
      *(void *)&long long v137 = __PAIR64__(v18, v16);
      *((int32x2_t *)&v137 + 1) = v19;
      __p.__begin_ = (std::vector<unsigned int>::pointer)&unk_1F0A472A0;
      __p.__end_ = v17;
      uint64_t v20 = *(void *)(a2 + 8) + 4 * (v15 * v14);
      LODWORD(v17) = *(_DWORD *)(a2 + 28) - v15 * v14;
      uint64_t v21 = *(void *)(a2 + 32);
      LODWORD(v135[2]) = v15;
      *(void *)((char *)&v135[2] + 4) = *(void *)(a2 + 20);
      HIDWORD(v135[3]) = v17;
      v135[4] = v21;
      v135[0] = &unk_1F0A472A0;
      v135[1] = v20;
      uint64_t v22 = *(void *)(v11 + 8) + 4 * (v15 * v14);
      int v23 = *(_DWORD *)(v11 + 28) - v15 * v14;
      uint64_t v24 = *(void *)(v11 + 32);
      LODWORD(v134[2]) = v15;
      *(void *)((char *)&v134[2] + 4) = *(void *)(v11 + 20);
      HIDWORD(v134[3]) = v23;
      v134[4] = v24;
      v134[0] = &unk_1F0A472A0;
      v134[1] = v22;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&__p, (uint64_t)v135, CblasNoTrans, (uint64_t)v134, CblasTrans, 1.0, 0.0);
      v134[0] = &unk_1F0A472A0;
      memset(&v134[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v134);
      v135[0] = &unk_1F0A472A0;
      memset(&v135[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v135);
      __p.__begin_ = (std::vector<unsigned int>::pointer)&unk_1F0A472A0;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v137 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
      ++v14;
      uint64_t v12 = a1[1].u32[1];
      v13 += v4;
    }
    while (v14 < (int)v12);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 42, v4, v12, 1, 0);
  if ((int)v4 >= 1)
  {
    int v25 = 0;
    do
    {
      int v26 = a1[1].i32[1] * v4;
      __int32 v27 = a1[30].i32[0];
      uint64_t v28 = (unsigned int *)(*(void *)&a1[28] + 4 * v27 * v25);
      int v29 = a1[30].i32[1] - v27 * v25;
      int32x2_t v30 = a1[31];
      LODWORD(__p.__end_cap_.__value_) = a1[29].i32[0];
      HIDWORD(__p.__end_cap_.__value_) = v26;
      *(void *)&long long v137 = __PAIR64__(v29, v27);
      *((int32x2_t *)&v137 + 1) = v30;
      __p.__begin_ = (std::vector<unsigned int>::pointer)&unk_1F0A472A0;
      __p.__end_ = v28;
      if (v4 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&__p, v27 * v4);
      }
      unsigned __int32 v31 = a1[44].u32[0];
      int32x2_t v32 = a1[46];
      v135[1] = *(void *)&a1[43] + 4 * a1[45].i32[0] * v25;
      v135[0] = &unk_1F0A472D0;
      v135[2] = v31;
      v135[3] = v32;
      unsigned int v33 = *(_DWORD *)(a3 + 16);
      uint64_t v34 = *(void *)(a3 + 32);
      v134[1] = *(void *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * v25;
      v134[0] = &unk_1F0A472D0;
      v134[2] = v33;
      v134[3] = v34;
      kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v135, (uint64_t)&__p, CblasNoTrans, (uint64_t)v134, 1.0, 0.0);
      __p.__begin_ = (std::vector<unsigned int>::pointer)&unk_1F0A472A0;
      *(_OWORD *)&__p.__end_ = 0u;
      long long v137 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
      ++v25;
    }
    while (v4 != v25);
  }
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&a1[42], (int *)&a1[39]);
  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec((int *)&a1[39], &__p);
  if ((int)v4 >= 1)
  {
    for (uint64_t i = 0; i != v133; ++i)
    {
      int v36 = *(_DWORD *)(*(void *)(*(void *)&a1[36] + 24 * i + 8) - 4);
      uint64_t v37 = *(void *)&a1[33] + 24 * i;
      unsigned int v38 = __p.__begin_[i] + v36 - a1[51].i32[0];
      int v40 = (unsigned int **)(v37 + 8);
      unsigned int v39 = *(unsigned int **)(v37 + 8);
      unsigned int v42 = (void *)(v37 + 16);
      unint64_t v41 = *(void *)(v37 + 16);
      if ((unint64_t)v39 >= v41)
      {
        int v44 = *(unsigned int **)v37;
        uint64_t v45 = ((uint64_t)v39 - *(void *)v37) >> 2;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v47 = v41 - (void)v44;
        if (v47 >> 1 > v46) {
          unint64_t v46 = v47 >> 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v42, v48);
          unsigned int v39 = *v40;
          int v44 = *(unsigned int **)v37;
        }
        else
        {
          uint64_t v49 = 0;
        }
        int v50 = (unsigned int *)&v49[4 * v45];
        *int v50 = v38;
        uint64_t v43 = v50 + 1;
        while (v39 != v44)
        {
          unsigned int v51 = *--v39;
          *--int v50 = v51;
        }
        *(void *)uint64_t v37 = v50;
        void *v40 = v43;
        *unsigned int v42 = &v49[4 * v48];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        unsigned int *v39 = v38;
        uint64_t v43 = v39 + 1;
      }
      void *v40 = v43;
      if (a1[52].i8[0])
      {
        int v52 = *(_DWORD *)(*(void *)(*(void *)&a1[33] + 24 * i + 8) - 4);
        LODWORD(v135[0]) = v52;
        int32x2_t v53 = a1[36];
        if (v52 == v36)
        {
          long long v54 = *(__int32 **)(*(void *)&v53 + 24 * i + 8);
          if ((unint64_t)v54 - *(void *)(*(void *)&v53 + 24 * i) >= 5 && *(v54 - 2) == v36) {
            LODWORD(v135[0]) = ++v36;
          }
        }
        else
        {
          long long v54 = *(__int32 **)(*(void *)&v53 + 24 * i + 8);
          int v36 = v52;
        }
        uint64_t v57 = *(void *)&v53 + 24 * i;
        if (*(_DWORD *)(*(void *)&a1[48] + 4 * i) >= v36) {
          uint64_t v60 = (int32x2_t *)v135;
        }
        else {
          uint64_t v60 = (int32x2_t *)(*(void *)&a1[48] + 4 * i);
        }
        __int32 v61 = v60->i32[0];
        __int32 v62 = a1[51].i32[0];
        if (v60->i32[0] <= v62) {
          __int32 v63 = a1[51].i32[0];
        }
        else {
          __int32 v63 = v60->i32[0];
        }
        unint64_t v64 = (__int32 **)(v57 + 8);
        unint64_t v66 = (void *)(v57 + 16);
        unint64_t v65 = *(void *)(v57 + 16);
        if ((unint64_t)v54 >= v65)
        {
          uint64_t v58 = *(int32x2_t **)v57;
          uint64_t v67 = ((uint64_t)v54 - *(void *)v57) >> 2;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v69 = v65 - (void)v58;
          if (v69 >> 1 > v68) {
            unint64_t v68 = v69 >> 1;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v57 + 16, v70);
            long long v54 = *v64;
            uint64_t v58 = *(int32x2_t **)v57;
            uint64_t v72 = a1 + 51;
            if (v61 >= v62) {
              uint64_t v72 = v60;
            }
            __int32 v63 = v72->i32[0];
          }
          else
          {
            uint64_t v71 = 0;
          }
          std::string v84 = &v71[4 * v67];
          *(_DWORD *)std::string v84 = v63;
          long long v79 = (__int32 *)(v84 + 4);
          while (v54 != (__int32 *)v58)
          {
            int v85 = *--v54;
            *((_DWORD *)v84 - 1) = v85;
            v84 -= 4;
          }
LABEL_86:
          *(void *)uint64_t v57 = v84;
          *unint64_t v64 = v79;
          void *v66 = &v71[4 * v70];
          if (v58) {
            operator delete(v58);
          }
          goto LABEL_88;
        }
      }
      else
      {
        int v55 = *(_DWORD *)(*(void *)(*(void *)&a1[33] + 24 * i + 8) - 4);
        LODWORD(v135[0]) = v55;
        int32x2_t v56 = a1[36];
        uint64_t v57 = *(void *)&v56 + 24 * i;
        if (v55 == v36)
        {
          long long v54 = *(__int32 **)(*(void *)&v56 + 24 * i + 8);
          uint64_t v58 = *(int32x2_t **)v57;
          unint64_t v59 = (unint64_t)v54 - *(void *)v57;
          if (v59 >= 5 && *(__int32 *)((char *)v58[-1].i32 + v59) == v36) {
            LODWORD(v135[0]) = --v36;
          }
        }
        else
        {
          uint64_t v58 = *(int32x2_t **)v57;
          long long v54 = *(__int32 **)(*(void *)&v56 + 24 * i + 8);
          int v36 = v55;
        }
        if (v58->i32[0] >= v36) {
          std::string v73 = (int32x2_t *)v135;
        }
        else {
          std::string v73 = v58;
        }
        __int32 v74 = v73->i32[0];
        __int32 v75 = a1[51].i32[0];
        if (v73->i32[0] <= v75) {
          __int32 v63 = a1[51].i32[0];
        }
        else {
          __int32 v63 = v73->i32[0];
        }
        uint64_t v76 = *(void *)&v56 + 24 * i;
        unint64_t v78 = *(void *)(v76 + 16);
        unint64_t v66 = (void *)(v76 + 16);
        unint64_t v77 = v78;
        unint64_t v64 = (__int32 **)(v66 - 1);
        if ((unint64_t)v54 >= v78)
        {
          uint64_t v80 = ((char *)v54 - (char *)v58) >> 2;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v82 = v77 - (void)v58;
          if (v82 >> 1 > v81) {
            unint64_t v81 = v82 >> 1;
          }
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v81;
          }
          if (v70)
          {
            uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v66, v70);
            long long v54 = *v64;
            uint64_t v58 = *(int32x2_t **)v57;
            uint64_t v83 = a1 + 51;
            if (v74 >= v75) {
              uint64_t v83 = v73;
            }
            __int32 v63 = v83->i32[0];
          }
          else
          {
            uint64_t v71 = 0;
          }
          std::string v84 = &v71[4 * v80];
          *(_DWORD *)std::string v84 = v63;
          long long v79 = (__int32 *)(v84 + 4);
          while (v54 != (__int32 *)v58)
          {
            int v86 = *--v54;
            *((_DWORD *)v84 - 1) = v86;
            v84 -= 4;
          }
          goto LABEL_86;
        }
      }
      __int32 *v54 = v63;
      long long v79 = v54 + 1;
LABEL_88:
      *unint64_t v64 = v79;
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1B2345284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  uint64_t v63 = a2;
  int v8 = *(_DWORD *)(a2 + 20);
  int v9 = *(_DWORD *)(a1 + 8);
  int v10 = *(_DWORD *)(a1 + 12);
  uint64_t v65 = a5;
  uint64_t v11 = *(void *)(a5 + 32);
  *(void *)(a1 + 152) = v11;
  *(void *)(a1 + 200) = v11;
  uint64_t v12 = *(unsigned int *)(a1 + 44);
  uint64_t v13 = (v8 / (int)v12);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 120), v12, *(unsigned int *)(a1 + 40), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 168), v12, *(unsigned int *)(*(void *)(a1 + 16) + 8), 0, 0);
  uint64_t v62 = v13;
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v68 = v12;
    int v61 = v12;
    unsigned int v67 = v9 * v10;
    do
    {
      unsigned int v15 = *(_DWORD *)(v63 + 24);
      uint64_t v16 = *(void *)(v63 + 8) + 4 * (int)(v15 * v14 * v61);
      unsigned int v17 = *(_DWORD *)(v63 + 28) - v15 * v14 * v61;
      uint64_t v18 = *(void *)(v63 + 32);
      LODWORD(v89[1]) = *(_DWORD *)(v63 + 16);
      HIDWORD(v89[1]) = v12;
      v89[2] = __PAIR64__(v17, v15);
      v89[3] = v18;
      __int32 v88 = &unk_1F0A472A0;
      v89[0] = v16;
      int32x2_t v19 = *(_DWORD **)(a1 + 16);
      unsigned int v20 = *(_DWORD *)(a3 + 24);
      uint64_t v21 = *(void *)(a3 + 8) + 4 * (int)(v20 * v14 * v61);
      unsigned int v22 = *(_DWORD *)(a3 + 28) - v20 * v14 * v61;
      uint64_t v23 = *(void *)(a3 + 32);
      LODWORD(v84[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v84[1]) = v12;
      v84[2] = __PAIR64__(v22, v20);
      v84[3] = v23;
      int v85 = &unk_1F0A472A0;
      uint64_t v83 = &unk_1F0A472A0;
      v84[0] = v21;
      DWORD2(v86) = v19[3];
      HIDWORD(v86) = v12;
      *(void *)&long long v87 = __PAIR64__(v22, v20);
      *((void *)&v87 + 1) = v23;
      *(void *)&long long v86 = v21;
      unsigned int v24 = *(_DWORD *)(a4 + 24);
      uint64_t v25 = *(void *)(a4 + 8) + 4 * (int)(v24 * v14 * v61);
      LODWORD(v23) = *(_DWORD *)(a4 + 28) - v24 * v14 * v61;
      uint64_t v26 = *(void *)(a4 + 32);
      DWORD2(v78) = *(_DWORD *)(a4 + 16);
      HIDWORD(v78) = v12;
      *(void *)&long long v79 = __PAIR64__(v23, v24);
      *((void *)&v79 + 1) = v26;
      unint64_t v77 = &unk_1F0A472A0;
      *(void *)&long long v78 = v25;
      *((void *)&v81 + 1) = __PAIR64__(v12, DWORD2(v86));
      *(void *)&long long v82 = __PAIR64__(v23, v24);
      *((void *)&v82 + 1) = v26;
      uint64_t v80 = &unk_1F0A472A0;
      *(void *)&long long v81 = v25;
      (*(void (**)(_DWORD *, void **, void **, void **, uint64_t, void))(*(void *)v19 + 128))(v19, &v88, &v85, &v80, a1 + 168, 0);
      uint64_t v80 = &unk_1F0A472A0;
      long long v81 = 0u;
      long long v82 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
      unint64_t v77 = &unk_1F0A472A0;
      long long v78 = 0u;
      long long v79 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v77);
      int v85 = &unk_1F0A472A0;
      long long v86 = 0u;
      long long v87 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
      uint64_t v83 = &unk_1F0A472A0;
      memset(v84, 0, sizeof(v84));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
      unsigned int v27 = *(_DWORD *)(v65 + 24);
      uint64_t v28 = *(void *)(v65 + 8) + 4 * (int)(v27 * v14 * v61);
      unsigned int v29 = *(_DWORD *)(v65 + 28) - v27 * v14 * v61;
      uint64_t v30 = *(void *)(v65 + 32);
      DWORD2(v86) = *(_DWORD *)(v65 + 16);
      HIDWORD(v86) = v12;
      *(void *)&long long v87 = __PAIR64__(v29, v27);
      *((void *)&v87 + 1) = v30;
      int v85 = &unk_1F0A472A0;
      *(void *)&long long v86 = v28;
      uint64_t v31 = v14;
      if (*(unsigned char *)(a1 + 419) && (int)v12 >= 1)
      {
        uint64_t v32 = 0;
        int v33 = *(_DWORD *)(a1 + 12);
        do
        {
          if (v33 >= 1)
          {
            int v34 = 0;
            int v35 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * v32) + 4 * v14) - *(_DWORD *)(a1 + 408))
                * *(_DWORD *)(a1 + 8);
            do
            {
              uint64_t v83 = &unk_1F0A472D0;
              v84[0] = v86 + 4 * (int)v87 * (int)v32;
              v84[2] = *((void *)&v87 + 1);
              v84[1] = DWORD2(v86);
              uint64_t v36 = *(void *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * (int)v32;
              unsigned int v37 = *(_DWORD *)(a1 + 40);
              uint64_t v38 = *(void *)(a1 + 56);
              unint64_t v77 = &unk_1F0A472D0;
              *(void *)&long long v78 = v36;
              *(void *)&long long v79 = v38;
              *((void *)&v78 + 1) = v37;
              unsigned int v39 = *(_DWORD *)(a1 + 8);
              uint64_t v80 = &unk_1F0A472D0;
              *(void *)&long long v81 = v36 + 4 * (int)(v39 * v34 + v35);
              *(void *)&long long v82 = v38;
              *((void *)&v81 + 1) = v39;
              uint64_t v69 = *(void *)(a1 + 176) + 4 * *(_DWORD *)(a1 + 192) * (int)v32;
              uint64_t v71 = *(void *)(a1 + 200);
              std::string v73 = &unk_1F0A472D0;
              uint64_t v74 = v69 + 4 * (int)(v39 * v34);
              uint64_t v76 = v71;
              uint64_t v75 = v39;
              kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v83, (uint64_t)&v80, (uint64_t)&v73, 1.0, 1.0);
              ++v34;
              int v33 = *(_DWORD *)(a1 + 12);
            }
            while (v34 < v33);
            uint64_t v14 = v31;
            uint64_t v12 = v68;
          }
          ++v32;
        }
        while (v32 != v12);
      }
      if (*(unsigned char *)(a1 + 417))
      {
        int v40 = *(_DWORD *)(a1 + 8 + *(void *)(*(void *)a1 - 24));
        unsigned int v41 = *(_DWORD *)(a1 + 196) - v67;
        uint64_t v42 = *(void *)(a1 + 200);
        v84[0] = *(void *)(a1 + 176) + 4 * v9 * v10;
        *(void *)((char *)&v84[1] + 4) = *(void *)(a1 + 188);
        LODWORD(v84[1]) = v40;
        HIDWORD(v84[2]) = v41;
        v84[3] = v42;
        uint64_t v83 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v85, (uint64_t)&v83, 111, 1.0, 1.0);
        uint64_t v83 = &unk_1F0A472A0;
        memset(v84, 0, sizeof(v84));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
      }
      if ((int)v12 >= 1)
      {
        uint64_t v43 = 0;
        do
        {
          int v44 = (*(_DWORD *)(*(void *)(*(void *)(a1 + 288) + 24 * v43) + 4 * v14) - *(_DWORD *)(a1 + 408))
              * *(_DWORD *)(a1 + 8);
          if (*(unsigned char *)(a1 + 419))
          {
            if (*(int *)(a1 + 12) >= 1)
            {
              int v45 = 0;
              do
              {
                uint64_t v46 = *(void *)(a1 + 128) + 4 * *(_DWORD *)(a1 + 144) * (int)v43;
                unsigned int v47 = *(_DWORD *)(a1 + 136);
                uint64_t v48 = *(void *)(a1 + 152);
                uint64_t v80 = &unk_1F0A472D0;
                *(void *)&long long v81 = v46;
                *(void *)&long long v82 = v48;
                *((void *)&v81 + 1) = v47;
                unsigned int v49 = *(_DWORD *)(a1 + 8);
                uint64_t v83 = &unk_1F0A472D0;
                v84[0] = v46 + 4 * (int)(v49 * v45 + v44);
                v84[2] = v48;
                v84[1] = v49;
                unint64_t v77 = &unk_1F0A472D0;
                *(void *)&long long v78 = v89[0] + 4 * LODWORD(v89[2]) * (int)v43;
                *(void *)&long long v79 = v89[3];
                *((void *)&v78 + 1) = LODWORD(v89[1]);
                uint64_t v70 = *(void *)(a1 + 176) + 4 * *(_DWORD *)(a1 + 192) * (int)v43;
                uint64_t v72 = *(void *)(a1 + 200);
                std::string v73 = &unk_1F0A472D0;
                uint64_t v74 = v70 + 4 * (int)(v49 * v45);
                uint64_t v76 = v72;
                uint64_t v75 = v49;
                kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v83, (uint64_t)&v77, (uint64_t)&v73, 1.0, 1.0);
                ++v45;
              }
              while (v45 < *(_DWORD *)(a1 + 12));
            }
          }
          else
          {
            int v50 = *(_DWORD *)(a1 + 140);
            unsigned int v51 = *(_DWORD *)(a1 + 144);
            uint64_t v52 = *(void *)(a1 + 128) + 4 * v44;
            int v53 = *(_DWORD *)(a1 + 148) - v44;
            uint64_t v54 = *(void *)(a1 + 152);
            LODWORD(v84[1]) = v9 * v10;
            HIDWORD(v84[1]) = v50;
            v84[2] = __PAIR64__(v53, v51);
            v84[3] = v54;
            uint64_t v83 = &unk_1F0A472A0;
            v84[0] = v52;
            *(void *)&long long v78 = v52 + 4 * (int)(v51 * v43);
            unint64_t v77 = &unk_1F0A472D0;
            *((void *)&v78 + 1) = v67;
            *(void *)&long long v79 = v54;
            LODWORD(v52) = *(_DWORD *)(a1 + 188);
            uint64_t v55 = *(void *)(a1 + 176);
            uint64_t v56 = *(void *)(a1 + 200);
            DWORD2(v81) = v9 * v10;
            HIDWORD(v81) = v52;
            *(void *)&long long v82 = *(void *)(a1 + 192);
            *((void *)&v82 + 1) = v56;
            uint64_t v80 = &unk_1F0A472A0;
            *(void *)&long long v81 = v55;
            uint64_t v74 = v55 + 4 * (int)v82 * (int)v43;
            std::string v73 = &unk_1F0A472D0;
            uint64_t v75 = v67;
            uint64_t v76 = v56;
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v77, (uint64_t)&v73, 1.0, 1.0);
            std::string v73 = &unk_1F0A472D0;
            uint64_t v74 = 0;
            LODWORD(v75) = 0;
            uint64_t v76 = 0;
            uint64_t v80 = &unk_1F0A472A0;
            long long v81 = 0u;
            long long v82 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
            unint64_t v77 = &unk_1F0A472D0;
            *(void *)&long long v78 = 0;
            DWORD2(v78) = 0;
            *(void *)&long long v79 = 0;
            uint64_t v83 = &unk_1F0A472A0;
            memset(v84, 0, sizeof(v84));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
          }
          ++v43;
          uint64_t v12 = v68;
          uint64_t v14 = v31;
        }
        while (v43 != v68);
      }
      int v85 = &unk_1F0A472A0;
      long long v86 = 0u;
      long long v87 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
      __int32 v88 = &unk_1F0A472A0;
      memset(v89, 0, sizeof(v89));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v88);
      ++v14;
    }
    while (v14 != v62);
  }
  if (*(unsigned char *)(a1 + 418))
  {
    uint64_t v57 = *(int *)(*(void *)(a1 + 16) + 12);
    int v58 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8);
    uint64_t v59 = *(void *)(a4 + 8) + 4 * v57;
    LODWORD(v57) = *(_DWORD *)(a4 + 28) - v57;
    uint64_t v60 = *(void *)(a4 + 32);
    v89[0] = v59;
    *(void *)((char *)&v89[1] + 4) = *(void *)(a4 + 20);
    LODWORD(v89[1]) = v58;
    HIDWORD(v89[2]) = v57;
    v89[3] = v60;
    __int32 v88 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::AddMat(v65, (uint64_t)&v88, 111, 1.0, 1.0);
    __int32 v88 = &unk_1F0A472A0;
    memset(v89, 0, sizeof(v89));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v88);
  }
}

void sub_1B2345D20(_Unwind_Exception *a1)
{
  *(void *)(v3 - 128) = v1;
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v3 - 128));
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 240))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 256) + 16) + 240))();
}

void kaldi::nnet1::MovingAttentionComponent::AccumGradients(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  uint64_t v7 = *a1;
  uint64_t v8 = *((unsigned int *)a1 + 11);
  int v9 = *(_DWORD *)(a2 + 20);
  unsigned int v10 = *((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3);
  uint64_t v52 = (int32x2_t *)(a1 + 9);
  a1[13] = a4;
  uint64_t v11 = (v9 / (int)v8);
  if (*((unsigned char *)a1 + 417)) {
    int v12 = *(_DWORD *)((char *)a1 + *(void *)(v7 - 24) + 8);
  }
  else {
    int v12 = 0;
  }
  kaldi::CuMatrix<float>::Resize(v52, v8, v12 + v10, 1, 0);
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)a1[2] + 272))();
  unint64_t v64 = &unk_1F0A4A6D0;
  long long v14 = *(_OWORD *)(v13 + 23);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)(v13 + 8);
  *(_OWORD *)((char *)&v65[3] + 3) = v14;
  float v15 = v65[0];
  v65[0] = v65[0] / (float)(int)v11;
  (*(void (**)(void))(*(void *)a1[2] + 264))();
  if ((int)v11 >= 1)
  {
    uint64_t v16 = 0;
    uint64_t v50 = a4;
    long long v17 = 0uLL;
    do
    {
      *(_OWORD *)&v63[1] = v17;
      *(_OWORD *)&v63[3] = v17;
      v63[0] = &unk_1F0A472A0;
      if (*((unsigned char *)a1 + 417))
      {
        int v18 = *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8);
        unsigned int v19 = *((_DWORD *)a1 + 25) - v10;
        uint64_t v20 = a1[13];
        v63[1] = a1[10] + 4 * (int)v10;
        *(void *)((char *)&v63[2] + 4) = *(uint64_t *)((char *)a1 + 92);
        LODWORD(v63[2]) = v18;
        HIDWORD(v63[3]) = v19;
        v63[4] = v20;
        int v61 = &unk_1F0A472A0;
        v62[0] = v17;
        v62[1] = v17;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
        unsigned int v21 = *(_DWORD *)(a2 + 24);
        int v22 = v21 * v8 * v16;
        uint64_t v23 = *(void *)(a2 + 8) + 4 * v22;
        unsigned int v24 = *(_DWORD *)(a2 + 28) - v22;
        uint64_t v25 = *(void *)(a2 + 32);
        DWORD2(v62[0]) = *(_DWORD *)(a2 + 16);
        HIDWORD(v62[0]) = v8;
        *(void *)&v62[1] = __PAIR64__(v24, v21);
        *((void *)&v62[1] + 1) = v25;
        int v61 = &unk_1F0A472A0;
        *(void *)&v62[0] = v23;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v63, (uint64_t)&v61, 111);
        int v61 = &unk_1F0A472A0;
        memset(v62, 0, sizeof(v62));
      }
      else
      {
        unsigned int v26 = *(_DWORD *)(a2 + 16);
        unsigned int v27 = *(_DWORD *)(a2 + 24);
        int v28 = v27 * v8 * v16;
        uint64_t v29 = *(void *)(a2 + 8) + 4 * v28;
        unsigned int v30 = *(_DWORD *)(a2 + 28) - v28;
        uint64_t v31 = *(void *)(a2 + 32);
        v63[1] = v29;
        v63[2] = __PAIR64__(v8, v26);
        v63[3] = __PAIR64__(v30, v27);
        v63[4] = v31;
        int v61 = &unk_1F0A472A0;
        v62[0] = v17;
        v62[1] = v17;
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
      if ((int)v8 >= 1)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          int v33 = *(_DWORD *)(*(void *)(a1[36] + 24 * i) + 4 * v16) - *((_DWORD *)a1 + 102);
          uint64_t v34 = a1[10];
          uint64_t v35 = a1[13];
          *((void *)&v62[0] + 1) = __PAIR64__(*((_DWORD *)a1 + 23), v10);
          *(void *)&v62[1] = a1[12];
          *((void *)&v62[1] + 1) = v35;
          int v61 = &unk_1F0A472A0;
          *(void *)&v62[0] = v34;
          int v53 = &unk_1F0A472D0;
          *(void *)&long long v54 = v34 + 4 * LODWORD(v62[1]) * (int)i;
          *(void *)&long long v55 = v35;
          *((void *)&v54 + 1) = v10;
          uint64_t v36 = a1[4] + 4 * *((_DWORD *)a1 + 12) * (int)i;
          LODWORD(v34) = *((_DWORD *)a1 + 10);
          uint64_t v37 = a1[7];
          uint64_t v56 = &unk_1F0A472D0;
          uint64_t v57 = v36;
          uint64_t v59 = v37;
          uint64_t v58 = v34;
          uint64_t v38 = v36 + 4 * *((_DWORD *)a1 + 2) * v33;
          v60[0] = &unk_1F0A472D0;
          v60[1] = v38;
          v60[3] = v37;
          v60[2] = v10;
          kaldi::CuVectorBase<float>::CopyFromVec(&v53, (uint64_t)v60);
          int v53 = &unk_1F0A472D0;
          *(void *)&long long v54 = 0;
          DWORD2(v54) = 0;
          *(void *)&long long v55 = 0;
          int v61 = &unk_1F0A472A0;
          memset(v62, 0, sizeof(v62));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
        }
      }
      if (*((unsigned char *)a1 + 419) && *((int *)a1 + 3) >= 1)
      {
        int v39 = 0;
        do
        {
          int v40 = *((_DWORD *)a1 + 2);
          uint64_t v41 = a1[10] + 4 * (v40 * v39);
          int v42 = *((_DWORD *)a1 + 25) - v40 * v39;
          uint64_t v43 = a1[13];
          DWORD2(v62[0]) = v40;
          *(void *)((char *)v62 + 12) = *(uint64_t *)((char *)a1 + 92);
          DWORD1(v62[1]) = v42;
          *((void *)&v62[1] + 1) = v43;
          int v61 = &unk_1F0A472A0;
          *(void *)&v62[0] = v41;
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v61, (uint64_t)v63);
          int v61 = &unk_1F0A472A0;
          memset(v62, 0, sizeof(v62));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
          ++v39;
        }
        while (v39 < *((_DWORD *)a1 + 3));
      }
      int v44 = (_DWORD *)a1[2];
      unsigned int v45 = *(_DWORD *)(a3 + 24);
      int v46 = v45 * v8 * v16;
      uint64_t v47 = *(void *)(a3 + 8) + 4 * v46;
      unsigned int v48 = *(_DWORD *)(a3 + 28) - v46;
      uint64_t v49 = *(void *)(a3 + 32);
      DWORD2(v54) = *(_DWORD *)(a3 + 16);
      HIDWORD(v54) = v8;
      *(void *)&long long v55 = __PAIR64__(v48, v45);
      *((void *)&v55 + 1) = v49;
      int v53 = &unk_1F0A472A0;
      *(void *)&long long v54 = v47;
      DWORD2(v62[0]) = v44[3];
      HIDWORD(v62[0]) = v8;
      *(void *)&v62[1] = __PAIR64__(v48, v45);
      *((void *)&v62[1] + 1) = v49;
      int v61 = &unk_1F0A472A0;
      *(void *)&v62[0] = v47;
      (*(void (**)(_DWORD *, int32x2_t *, void **, uint64_t, void))(*(void *)v44 + 232))(v44, v52, &v61, v50, 0);
      int v61 = &unk_1F0A472A0;
      memset(v62, 0, sizeof(v62));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
      int v53 = &unk_1F0A472A0;
      long long v54 = 0u;
      long long v55 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
      (*(void (**)(void))(*(void *)a1[2] + 256))();
      v63[0] = &unk_1F0A472A0;
      memset(&v63[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v63);
      ++v16;
      long long v17 = 0uLL;
    }
    while (v16 != v11);
  }
  v65[0] = v15;
  (*(void (**)(uint64_t, void **))(*(void *)a1[2] + 264))(a1[2], &v64);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v64);
}

void sub_1B23465B0(_Unwind_Exception *a1)
{
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)(v1 - 144));
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MovingAttentionComponent::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetGradient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 224))();
}

uint64_t virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetGradient(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 240) + 16) + 224))();
}

quasar::MappedPgmBitmap *quasar::MappedPgmBitmap::MappedPgmBitmap(quasar::MappedPgmBitmap *this)
{
  *(void *)this = &unk_1F0A52F50;
  *((void *)this + 1) = -1;
  *((_WORD *)this + 8) = -1;
  *((void *)this + 3) = -1;
  uint64_t v2 = (uint64_t *)((char *)this + 32);
  uint64_t v3 = (uint64_t *)((char *)this + 456);
  uint64_t v4 = MEMORY[0x1E4FBA460] + 64;
  *((void *)this + 57) = MEMORY[0x1E4FBA460] + 64;
  uint64_t v5 = (char *)this + 48;
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *((void *)this + 4) = v7;
  *(uint64_t *)((char *)v2 + *(void *)(v7 - 24)) = v6;
  *((void *)this + 5) = 0;
  uint64_t v8 = (std::ios_base *)((char *)this + *(void *)(*((void *)this + 4) - 24) + 32);
  std::ios_base::init(v8, (char *)this + 48);
  uint64_t v9 = MEMORY[0x1E4FBA460] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t *v2 = v9;
  *uint64_t v3 = v4;
  MEMORY[0x1B3EA7CE0](v5);
  *((_OWORD *)this + 38) = 0u;
  return this;
}

void sub_1B2346874(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MappedPgmBitmap::getWidth(quasar::MappedPgmBitmap *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t quasar::MappedPgmBitmap::getHeight(quasar::MappedPgmBitmap *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t quasar::MappedPgmBitmap::getColorAt(quasar::MappedPgmBitmap *this, int a2, int a3)
{
  if (a2 < 0 || a3 < 0 || (v3 = *((_DWORD *)this + 2), v3 <= a2) || (int v4 = *((_DWORD *)this + 3), v4 <= a3))
  {
    exception = (quasar::Bitmap::CoordinatesOutOfRange *)__cxa_allocate_exception(0x10uLL);
    quasar::Bitmap::CoordinatesOutOfRange::CoordinatesOutOfRange(exception, a2, a3);
  }
  unsigned int v5 = a2 + (v4 + ~a3) * v3;
  uint64_t v6 = *((void *)this + 3);
  if (v6 == 2) {
    return *(unsigned __int16 *)(*((void *)this + 78) + 2 * v5);
  }
  if (v6 != 1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Internal error, unexpected pixel size ", 38);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  return *(unsigned __int8 *)(*((void *)this + 78) + v5);
}

void sub_1B23469DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void quasar::MappedPgmBitmap::load(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 32;
  std::ifstream::open();
  if (!*(_DWORD *)(v4 + *(void *)(*(void *)(a1 + 32) - 24) + 32))
  {
    std::istream::read();
    char v16 = 2;
    __int16 __p = v18;
    char __p_2 = 0;
    if (v18 == 13648)
    {
      MEMORY[0x1B3EA7DD0](v4, a1 + 8);
      if (*(int *)(a1 + 8) > 0)
      {
        MEMORY[0x1B3EA7DD0](v4, a1 + 12);
        if (*(int *)(a1 + 12) > 0)
        {
          MEMORY[0x1B3EA7E00](v4, a1 + 16);
          uint64_t v5 = 1;
          if (*(unsigned __int16 *)(a1 + 16) >= 0x100u) {
            uint64_t v5 = 2;
          }
          *(void *)(a1 + 24) = v5;
          unsigned int v6 = std::istream::get();
          if (v6 <= 0x7F) {
            int v7 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v6 + 60) & 0x4000;
          }
          else {
            int v7 = __maskrune(v6, 0x4000uLL);
          }
          if (v7)
          {
            fst::FstReadOptions::FstReadOptions(&__p, a2, 0, 0, 0);
            int v17 = 2;
            std::istream::tellg();
            uint64_t v8 = v27;
            std::istream::seekg();
            std::istream::tellg();
            uint64_t v9 = (fst::MappedFile *)v27;
            if (v8 + *(void *)(a1 + 24) * *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8) == (void)v27)
            {
              std::istream::seekg();
              fst::MappedFile::Map(v4, (uint64_t)&__p, v9);
            }
            long long v34 = 0u;
            long long v35 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v26 = 0u;
            long long v27 = 0u;
            long long v24 = 0u;
            long long v25 = 0u;
            long long v23 = 0u;
            long long v21 = 0u;
            long long v22 = 0u;
            long long v19 = 0u;
            long long v20 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"PGM header suggests different file size than actual size, expected=", 67);
            uint64_t v13 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" actual=", 8);
            std::ostream::operator<<();
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
          }
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v23 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v19, "Whitespace expected before binary data");
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
        }
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Bitmap height must be positive but was ", 39);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
      }
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Bitmap width must be positive but was ", 38);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Unexpected magic ", 17);
    *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
    int v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
  unsigned int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Cannot open bitmap file ", 24);
  std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
}

void sub_1B2347008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MappedPgmBitmap::loadFromFile()
{
}

void sub_1B23470CC(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::MappedPgmBitmap::~MappedPgmBitmap(quasar::MappedPgmBitmap *this)
{
  quasar::MappedPgmBitmap::~MappedPgmBitmap(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_1F0A52F50;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = MEMORY[0x1E4FBA3F8];
  uint64_t v4 = *MEMORY[0x1E4FBA3F8];
  *((void *)this + 4) = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)this + *(void *)(v4 - 24) + 32) = *(void *)(v3 + 24);
  MEMORY[0x1B3EA7CF0]((char *)this + 48);
  std::istream::~istream();
  MEMORY[0x1B3EA8520]((char *)this + 456);
  quasar::Bitmap::~Bitmap(this);
}

void std::shared_ptr<quasar::MappedPgmBitmap>::shared_ptr[abi:ne180100]<quasar::MappedPgmBitmap,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B23472B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<quasar::MappedPgmBitmap>::shared_ptr[abi:ne180100]<quasar::MappedPgmBitmap,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::MappedPgmBitmap *,std::shared_ptr<quasar::MappedPgmBitmap>::__shared_ptr_default_delete<quasar::MappedPgmBitmap,quasar::MappedPgmBitmap>,std::allocator<quasar::MappedPgmBitmap>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::MappedPgmBitmap *,std::shared_ptr<quasar::MappedPgmBitmap>::__shared_ptr_default_delete<quasar::MappedPgmBitmap,quasar::MappedPgmBitmap>,std::allocator<quasar::MappedPgmBitmap>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::MappedPgmBitmap *,std::shared_ptr<quasar::MappedPgmBitmap>::__shared_ptr_default_delete<quasar::MappedPgmBitmap,quasar::MappedPgmBitmap>,std::allocator<quasar::MappedPgmBitmap>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void quasar::LDLoggingInfo::addDoubleValue(quasar *a1, uint64_t a2, double a3)
{
  int Type = quasar::getType(a1, *(float *)&a3);
  std::to_string(&v7, a3);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 1;
  quasar::PTree::putChild((uint64_t)a1, a2, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1B23473FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LDLoggingInfo::addIntValue(uint64_t a1, uint64_t a2, quasar *this)
{
  int v3 = (int)this;
  int Type = quasar::getType(this);
  std::to_string(&v7, v3);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 1;
  quasar::PTree::putChild(a1, a2, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1B2347490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LDLoggingInfo::addStringValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  quasar::PTree::PTree(v5, a3);
  quasar::PTree::putChild(a1, a2, (uint64_t)v5, 1);
  quasar::PTree::~PTree((quasar::PTree *)v5);
}

void sub_1B23474F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LDLoggingInfo::addBoolValue(uint64_t a1, uint64_t a2, quasar *this)
{
  int v3 = (int)this;
  int Type = quasar::getType(this);
  std::to_string(&v7, v3);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 1;
  quasar::PTree::putChild(a1, a2, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1B234758C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *quasar::posteriorsToConfidences@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = result + 1;
  uint64_t v4 = (uint64_t *)*result;
  if ((uint64_t *)*result == result + 1)
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)a2 = a2 + 8;
  }
  else
  {
    double v5 = 0.0;
    unsigned int v6 = (uint64_t *)*result;
    do
    {
      std::string v7 = (uint64_t *)v6[1];
      uint64_t v8 = v6;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          std::string v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v8[2];
          BOOL v10 = *v9 == (void)v8;
          uint64_t v8 = v9;
        }
        while (!v10);
      }
      double v5 = v5 + *((double *)v6 + 10);
      unsigned int v6 = v9;
    }
    while (v9 != v3);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)a2 = a2 + 8;
    if (v4 != v3)
    {
      do
      {
        double v11 = *((double *)v4 + 10);
        long long v14 = (long long *)(v4 + 4);
        uint64_t result = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>((uint64_t **)a2, (unsigned __int8 *)v4 + 32, (uint64_t)&std::piecewise_construct, &v14);
        *((double *)result + 10) = v11 / v5;
        int v12 = (uint64_t *)v4[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            int v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (uint64_t *)v4[2];
            BOOL v10 = *v13 == (void)v4;
            uint64_t v4 = v13;
          }
          while (!v10);
        }
        uint64_t v4 = v13;
      }
      while (v13 != v3);
    }
  }
  return result;
}

void sub_1B23476C8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *quasar::language_detector::Locale::Locale(_OWORD *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + 24;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v37 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  std::string::basic_string[abi:ne180100]<0>(v35, "_");
  quasar::replaceAll((uint64_t)&v37, (uint64_t)__p, (char *)v35);
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  quasar::splitAndTrimNoEmpty(&v37, (char *)__p, v35);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  double v5 = v35[0];
  if ((void *)((char *)v35[1] - (char *)v35[0]) == (void *)48)
  {
    uint64_t v6 = *((void *)a1 + 2);
    long long v7 = *a1;
    uint64_t v8 = *((void *)v35[0] + 2);
    *a1 = *(_OWORD *)v35[0];
    *((void *)a1 + 2) = v8;
    *(_OWORD *)double v5 = v7;
    v5[2] = v6;
    uint64_t v9 = (char *)v35[0];
    uint64_t v10 = *((void *)v4 + 2);
    long long v11 = *(_OWORD *)v4;
    uint64_t v12 = *((void *)v35[0] + 5);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)((char *)v35[0] + 24);
    *((void *)v4 + 2) = v12;
    *(_OWORD *)(v9 + 24) = v11;
    *((void *)v9 + 5) = v10;
  }
  else if (quasar::gLogLevel >= 2)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)__int16 __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid locale string given ", 28);
    int v14 = *(char *)(a2 + 23);
    if (v14 >= 0) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = *(void *)a2;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  __p[0] = v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B23478C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 47) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void quasar::language_detector::Locale::getSiriLocaleStr(quasar::language_detector::Locale *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 23);
  }
  else {
    size_t v4 = *((void *)this + 1);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*((char *)this + 23) >= 0) {
      uint64_t v6 = this;
    }
    else {
      uint64_t v6 = *(quasar::language_detector::Locale **)this;
    }
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 45;
  uint64_t v9 = (const std::string::value_type *)*((void *)this + 3);
  uint64_t v8 = (char *)this + 24;
  long long v7 = v9;
  int v10 = v8[23];
  if (v10 >= 0) {
    long long v11 = v8;
  }
  else {
    long long v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = v8[23];
  }
  else {
    std::string::size_type v12 = *((void *)v8 + 1);
  }
  uint64_t v13 = std::string::append(&__p, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B2347A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::language_detector::Locale::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3 = a1[23];
  if (v3 >= 0) {
    size_t v4 = a1[23];
  }
  else {
    size_t v4 = *((void *)a1 + 1);
  }
  char v5 = *((unsigned char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  if (v5 >= 0) {
    long long v7 = (unsigned __int8 *)a2;
  }
  else {
    long long v7 = *a2;
  }
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        uint64_t v9 = v7;
        int v10 = a1;
        uint64_t v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11) {
            goto LABEL_25;
          }
        }
        goto LABEL_18;
      }
LABEL_25:
      __int16 v18 = a2[3];
      int v17 = a2 + 3;
      uint64_t v16 = v18;
      int v19 = *((char *)v17 + 23);
      long long v22 = (unsigned __int8 *)*((void *)a1 + 3);
      long long v21 = a1 + 24;
      long long v20 = v22;
      int v23 = (char)v21[23];
      if (v23 >= 0) {
        size_t v24 = v21[23];
      }
      else {
        size_t v24 = *((void *)v21 + 1);
      }
      if (v23 >= 0) {
        long long v25 = v21;
      }
      else {
        long long v25 = v20;
      }
      if (v19 >= 0) {
        size_t v26 = *((unsigned __int8 *)v17 + 23);
      }
      else {
        size_t v26 = (size_t)v17[1];
      }
      if (v19 >= 0) {
        long long v27 = v17;
      }
      else {
        long long v27 = (unsigned __int8 **)v16;
      }
      if (v26 >= v24) {
        size_t v28 = v24;
      }
      else {
        size_t v28 = v26;
      }
      int v14 = memcmp(v25, v27, v28);
      BOOL v15 = v24 >= v26;
      goto LABEL_41;
    }
    if (!memcmp(*(const void **)a1, v7, *((void *)a1 + 1))) {
      goto LABEL_25;
    }
  }
LABEL_18:
  if (v3 >= 0) {
    std::string::size_type v12 = a1;
  }
  else {
    std::string::size_type v12 = *(const void **)a1;
  }
  if (v6 >= v4) {
    size_t v13 = v4;
  }
  else {
    size_t v13 = v6;
  }
  int v14 = memcmp(v12, v7, v13);
  BOOL v15 = v4 >= v6;
LABEL_41:
  unsigned int v29 = !v15;
  if (v14) {
    return v14 < 0;
  }
  else {
    return v29;
  }
}

void *quasar::language_detector::operator<<(void *a1, quasar::language_detector::Locale *this)
{
  quasar::language_detector::Locale::getSiriLocaleStr(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B2347C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LDContext::LDContext(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  *(void *)this = this + 8;
  *(unsigned char *)(this + 24) = 0;
  *(unsigned char *)(this + 48) = 0;
  *(unsigned char *)(this + 56) = 0;
  *(unsigned char *)(this + 104) = 0;
  *(_WORD *)(this + 112) = 0;
  *(unsigned char *)(this + 120) = 0;
  *(unsigned char *)(this + 144) = 0;
  *(unsigned char *)(this + 152) = 0;
  *(unsigned char *)(this + 176) = 0;
  *(unsigned char *)(this + 184) = 0;
  *(unsigned char *)(this + 208) = 0;
  *(unsigned char *)(this + 216) = 0;
  *(unsigned char *)(this + 264) = 0;
  *(unsigned char *)(this + 272) = 0;
  *(unsigned char *)(this + 320) = 0;
  *(unsigned char *)(this + 328) = 0;
  *(unsigned char *)(this + 352) = 0;
  return this;
}

quasar::LDContext *quasar::LDContext::LDContext(quasar::LDContext *this, const quasar::LDContext *a2)
{
  size_t v4 = std::map<quasar::language_detector::Locale,double>::map[abi:ne180100]((uint64_t *)this, (uint64_t)a2);
  std::__optional_copy_base<std::set<quasar::language_detector::Locale>,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v4 + 3), (uint64_t)a2 + 24);
  std::__optional_copy_base<quasar::language_detector::Locale,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 56), (uint64_t)a2 + 56);
  *((_WORD *)this + 56) = *((_WORD *)a2 + 56);
  std::__optional_copy_base<std::vector<quasar::language_detector::Locale>,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 5, (uint64_t)a2 + 120);
  std::__optional_copy_base<std::map<quasar::language_detector::Locale,double>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 152, (uint64_t)a2 + 152);
  std::__optional_copy_base<std::map<quasar::language_detector::Locale,double>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 184, (uint64_t)a2 + 184);
  std::__optional_copy_base<quasar::language_detector::Locale,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 9, (uint64_t)a2 + 216);
  std::__optional_copy_base<quasar::language_detector::Locale,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 272), (uint64_t)a2 + 272);
  std::__optional_copy_base<std::map<quasar::language_detector::Locale,double>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 328, (uint64_t)a2 + 328);
  return this;
}

void sub_1B2347D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v8);
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v7);
  if (*(unsigned char *)(v2 + 208)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6, *(void **)(v2 + 192));
  }
  if (*(unsigned char *)(v2 + 176)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(void **)(v2 + 160));
  }
  if (*(unsigned char *)(v2 + 144)) {
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  }
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v4);
  if (*(unsigned char *)(v2 + 48)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v2 + 32));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::LDContext::LDContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)a2 = v4;
    void *v4 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = v6;
  }
  std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](a1 + 24, a2 + 24);
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (*(unsigned char *)(a2 + 104))
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v8;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    long long v9 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v9;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 80) = 0;
    *(unsigned char *)(a1 + 104) = 1;
  }
  __int16 v10 = *(_WORD *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 112) = v10;
  *(unsigned char *)(a1 + 144) = 0;
  if (*(unsigned char *)(a2 + 144))
  {
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(unsigned char *)(a1 + 144) = 1;
  }
  std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](a1 + 152, a2 + 152);
  std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](a1 + 184, a2 + 184);
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  if (*(unsigned char *)(a2 + 264))
  {
    long long v11 = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v11;
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 216) = 0;
    long long v12 = *(_OWORD *)(a2 + 240);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = v12;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 240) = 0;
    *(unsigned char *)(a1 + 264) = 1;
  }
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  if (*(unsigned char *)(a2 + 320))
  {
    long long v13 = *(_OWORD *)(a2 + 272);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v13;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 288) = 0;
    *(void *)(a2 + 272) = 0;
    long long v14 = *(_OWORD *)(a2 + 296);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = v14;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 296) = 0;
    *(unsigned char *)(a1 + 320) = 1;
  }
  std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](a1 + 328, a2 + 328);
  return a1;
}

void quasar::LDContext::~LDContext(quasar::LDContext *this)
{
  if (*((unsigned char *)this + 352)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 328, *((void **)this + 42));
  }
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 272);
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 216);
  if (*((unsigned char *)this + 208)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  }
  if (*((unsigned char *)this + 176)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  }
  if (*((unsigned char *)this + 144))
  {
    uint64_t v2 = (void **)((char *)this + 120);
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 56);
  if (*((unsigned char *)this + 48)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this, *((void **)this + 1));
}

void quasar::LDContext::logContext(quasar::LDContext **this)
{
  if (quasar::gLogLevel >= 4)
  {
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"Logging LDContext", 17);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
  }
  uint64_t v2 = (void *)MEMORY[0x1E4FBA408];
  if (this[2])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    uint64_t v3 = *this;
    if (*this != (quasar::LDContext *)(this + 1))
    {
      do
      {
        uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"(", 1);
        uint64_t v5 = quasar::language_detector::operator<<(v4, (quasar::LDContext *)((char *)v3 + 32));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
        uint64_t v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
        uint64_t v7 = (quasar::LDContext *)*((void *)v3 + 1);
        if (v7)
        {
          do
          {
            long long v8 = v7;
            uint64_t v7 = *(quasar::LDContext **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            long long v8 = (quasar::LDContext *)*((void *)v3 + 2);
            BOOL v9 = *(void *)v8 == (void)v3;
            uint64_t v3 = v8;
          }
          while (!v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != (quasar::LDContext *)(this + 1));
    }
    if (quasar::gLogLevel > 3)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      __int16 v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"priors=", 7);
      long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"[", 1);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v77 & 0x80u) == 0) {
        uint64_t v13 = v77;
      }
      else {
        uint64_t v13 = v76;
      }
      long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
      if ((char)v77 < 0) {
        operator delete(__p);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(void *)&long long v95 = *v2;
    uint64_t v15 = v2[9];
    *(void *)((char *)&v95 + *(void *)(v95 - 24)) = v2[8];
    *(void *)&long long v96 = v15;
    *((void *)&v96 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v101) < 0) {
      operator delete(*((void **)&v100 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v103);
  }
  if (*((unsigned char *)this + 48))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((unsigned char *)this + 48)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v16 = this[3];
    if (v16 != (quasar::LDContext *)(this + 4))
    {
      char v17 = 1;
      do
      {
        if ((v17 & 1) == 0) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)", ", 2);
        }
        quasar::language_detector::operator<<(&v96, (quasar::LDContext *)((char *)v16 + 32));
        __int16 v18 = (quasar::LDContext *)*((void *)v16 + 1);
        if (v18)
        {
          do
          {
            int v19 = v18;
            __int16 v18 = *(quasar::LDContext **)v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (quasar::LDContext *)*((void *)v16 + 2);
            BOOL v9 = *(void *)v19 == (void)v16;
            uint64_t v16 = v19;
          }
          while (!v9);
        }
        char v17 = 0;
        uint64_t v16 = v19;
      }
      while (v19 != (quasar::LDContext *)(this + 4));
    }
    if (quasar::gLogLevel > 3)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"dictation_locales=[", 19);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0) {
        long long v21 = &__p;
      }
      else {
        long long v21 = __p;
      }
      if ((v77 & 0x80u) == 0) {
        uint64_t v22 = v77;
      }
      else {
        uint64_t v22 = v76;
      }
      int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
      if ((char)v77 < 0) {
        operator delete(__p);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(void *)&long long v95 = *v2;
    uint64_t v24 = v2[9];
    *(void *)((char *)&v95 + *(void *)(v95 - 24)) = v2[8];
    *(void *)&long long v96 = v24;
    *((void *)&v96 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v101) < 0) {
      operator delete(*((void **)&v100 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v103);
  }
  int v25 = quasar::gLogLevel;
  if (*((unsigned char *)this + 104) && quasar::gLogLevel >= 4)
  {
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    size_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"current_dictaion_locale=", 24);
    if (!*((unsigned char *)this + 104)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    quasar::language_detector::operator<<(v26, (quasar::language_detector::Locale *)(this + 7));
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
    int v25 = quasar::gLogLevel;
  }
  if (*((unsigned char *)this + 113) && v25 >= 4)
  {
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"was_language_toggled=", 21);
    if (!*((unsigned char *)this + 113)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
  }
  if (*((unsigned char *)this + 144))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((unsigned char *)this + 48)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    long long v27 = this[3];
    if (v27 != (quasar::LDContext *)(this + 4))
    {
      char v28 = 1;
      do
      {
        if ((v28 & 1) == 0) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)", ", 2);
        }
        quasar::language_detector::operator<<(&v96, (quasar::LDContext *)((char *)v27 + 32));
        unsigned int v29 = (quasar::LDContext *)*((void *)v27 + 1);
        if (v29)
        {
          do
          {
            long long v30 = v29;
            unsigned int v29 = *(quasar::LDContext **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            long long v30 = (quasar::LDContext *)*((void *)v27 + 2);
            BOOL v9 = *(void *)v30 == (void)v27;
            long long v27 = v30;
          }
          while (!v9);
        }
        char v28 = 0;
        long long v27 = v30;
      }
      while (v30 != (quasar::LDContext *)(this + 4));
    }
    if (quasar::gLogLevel > 3)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      long long v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"multilingual_keyboard_locales=[", 31);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0) {
        long long v32 = &__p;
      }
      else {
        long long v32 = __p;
      }
      if ((v77 & 0x80u) == 0) {
        uint64_t v33 = v77;
      }
      else {
        uint64_t v33 = v76;
      }
      long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"]", 1);
      if ((char)v77 < 0) {
        operator delete(__p);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(void *)&long long v95 = *v2;
    uint64_t v35 = v2[9];
    *(void *)((char *)&v95 + *(void *)(v95 - 24)) = v2[8];
    *(void *)&long long v96 = v35;
    *((void *)&v96 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v101) < 0) {
      operator delete(*((void **)&v100 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v103);
  }
  if (*((unsigned char *)this + 176))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((unsigned char *)this + 176)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    char v36 = this[19];
    if (v36 != (quasar::LDContext *)(this + 20))
    {
      do
      {
        std::string v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"(", 1);
        uint64_t v38 = quasar::language_detector::operator<<(v37, (quasar::LDContext *)((char *)v36 + 32));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)",", 1);
        int v39 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") ", 2);
        int v40 = (quasar::LDContext *)*((void *)v36 + 1);
        if (v40)
        {
          do
          {
            uint64_t v41 = v40;
            int v40 = *(quasar::LDContext **)v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            uint64_t v41 = (quasar::LDContext *)*((void *)v36 + 2);
            BOOL v9 = *(void *)v41 == (void)v36;
            char v36 = v41;
          }
          while (!v9);
        }
        char v36 = v41;
      }
      while (v41 != (quasar::LDContext *)(this + 20));
    }
    if (quasar::gLogLevel > 3)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"keyboard_convo_locale_priors=", 29);
      uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"[ ", 2);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0) {
        int v44 = &__p;
      }
      else {
        int v44 = __p;
      }
      if ((v77 & 0x80u) == 0) {
        uint64_t v45 = v77;
      }
      else {
        uint64_t v45 = v76;
      }
      int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"]", 1);
      if ((char)v77 < 0) {
        operator delete(__p);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(void *)&long long v95 = *v2;
    uint64_t v47 = v2[9];
    *(void *)((char *)&v95 + *(void *)(v95 - 24)) = v2[8];
    *(void *)&long long v96 = v47;
    *((void *)&v96 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v101) < 0) {
      operator delete(*((void **)&v100 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v103);
  }
  if (*((unsigned char *)this + 208))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((unsigned char *)this + 208)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    unsigned int v48 = this[23];
    if (v48 != (quasar::LDContext *)(this + 24))
    {
      do
      {
        uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"(", 1);
        uint64_t v50 = quasar::language_detector::operator<<(v49, (quasar::LDContext *)((char *)v48 + 32));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)",", 1);
        unsigned int v51 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)") ", 2);
        uint64_t v52 = (quasar::LDContext *)*((void *)v48 + 1);
        if (v52)
        {
          do
          {
            int v53 = v52;
            uint64_t v52 = *(quasar::LDContext **)v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            int v53 = (quasar::LDContext *)*((void *)v48 + 2);
            BOOL v9 = *(void *)v53 == (void)v48;
            unsigned int v48 = v53;
          }
          while (!v9);
        }
        unsigned int v48 = v53;
      }
      while (v53 != (quasar::LDContext *)(this + 24));
    }
    if (quasar::gLogLevel > 3)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"keyboard_global_locale_priors=", 30);
      long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"[ ", 2);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0) {
        uint64_t v56 = &__p;
      }
      else {
        uint64_t v56 = __p;
      }
      if ((v77 & 0x80u) == 0) {
        uint64_t v57 = v77;
      }
      else {
        uint64_t v57 = v76;
      }
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"]", 1);
      if ((char)v77 < 0) {
        operator delete(__p);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(void *)&long long v95 = *v2;
    uint64_t v59 = v2[9];
    *(void *)((char *)&v95 + *(void *)(v95 - 24)) = v2[8];
    *(void *)&long long v96 = v59;
    *((void *)&v96 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v101) < 0) {
      operator delete(*((void **)&v100 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v103);
  }
  int v60 = quasar::gLogLevel;
  if (*((unsigned char *)this + 264) && quasar::gLogLevel >= 4)
  {
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    int v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"previous_message_locale=", 24);
    if (!*((unsigned char *)this + 264)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    quasar::language_detector::operator<<(v61, (quasar::language_detector::Locale *)(this + 27));
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
    int v60 = quasar::gLogLevel;
  }
  if (*((unsigned char *)this + 320) && v60 >= 4)
  {
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"global_last_keyboard_used=", 26);
    if (!*((unsigned char *)this + 320)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    quasar::language_detector::operator<<(v62, (quasar::language_detector::Locale *)(this + 34));
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
  }
  if (*((unsigned char *)this + 352))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((unsigned char *)this + 352)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v63 = this[41];
    if (v63 != (quasar::LDContext *)(this + 42))
    {
      do
      {
        unint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"(", 1);
        uint64_t v65 = quasar::language_detector::operator<<(v64, (quasar::LDContext *)((char *)v63 + 32));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)",", 1);
        unint64_t v66 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") ", 2);
        unsigned int v67 = (quasar::LDContext *)*((void *)v63 + 1);
        if (v67)
        {
          do
          {
            uint64_t v68 = v67;
            unsigned int v67 = *(quasar::LDContext **)v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            uint64_t v68 = (quasar::LDContext *)*((void *)v63 + 2);
            BOOL v9 = *(void *)v68 == (void)v63;
            uint64_t v63 = v68;
          }
          while (!v9);
        }
        uint64_t v63 = v68;
      }
      while (v68 != (quasar::LDContext *)(this + 42));
    }
    if (quasar::gLogLevel > 3)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"dictation_locale_priors=", 24);
      uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"[ ", 2);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0) {
        uint64_t v71 = &__p;
      }
      else {
        uint64_t v71 = __p;
      }
      if ((v77 & 0x80u) == 0) {
        uint64_t v72 = v77;
      }
      else {
        uint64_t v72 = v76;
      }
      std::string v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"]", 1);
      if ((char)v77 < 0) {
        operator delete(__p);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(void *)&long long v95 = *v2;
    uint64_t v74 = v2[9];
    *(void *)((char *)&v95 + *(void *)(v95 - 24)) = v2[8];
    *(void *)&long long v96 = v74;
    *((void *)&v96 + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v101) < 0) {
      operator delete(*((void **)&v100 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](&v103);
  }
}

void sub_1B23491E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void quasar::LDConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const std::string *a3)
{
  quasar::SystemConfig::getPrefix(this, &v10);
  quasar::SystemConfig::setPrefix((std::string *)this, a3);
  std::string::basic_string[abi:ne180100]<0>(v8, "window-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "The number of frames to be considered per decision. In flexible input size, this is the minimum window size for creating the 1st LID result. When prediction-interval is used, -1 will deactivate the minimum size.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)v8, a1, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "feature-dim");
  std::string::basic_string[abi:ne180100]<0>(__p, "The dimension size of the features.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)v8, a1 + 8, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "languages-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma separated list of languages");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 16, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "compiled-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The name of the compiled model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 64, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "model-input-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "The name of the key for the model input");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 88, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "model-output-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "The name of the key for the model output");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 112, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "use-flexible-model");
  std::string::basic_string[abi:ne180100]<0>(__p, "Whether or not the model accepts flexible (variable) input size.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)v8, a1 + 137, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "max-window-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum size window for processing. Only works with flexible input size enabled.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)v8, a1 + 196, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "use-cpu-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only use the CPU for inference");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)v8, a1 + 136, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "send-only-final-result");
  std::string::basic_string[abi:ne180100]<0>(__p, "Do not send incremental results, send only the final result. Fixed input will always only send the final result.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)v8, a1 + 138, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "minimum-confidence");
  std::string::basic_string[abi:ne180100]<0>(__p, "For flexible input size, the minimum confidence for sending early results back. Only works with flexible input size enabled.");
  quasar::SystemConfig::Register<double>((uint64_t)this, (const void **)v8, a1 + 144, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "prediction-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "The interval which we should make decisions (-1 is only once). Only works with flexible input size enabled.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)v8, a1 + 4, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "ui-minimum-confidence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determines whether or no the UI should consider the result non-confident. Should be greater than or equal to minimum-confidence.");
  quasar::SystemConfig::Register<double>((uint64_t)this, (const void **)v8, a1 + 152, (uint64_t)__p, 0, 126, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "input-tensor-shape");
  std::string::basic_string[abi:ne180100]<0>(__p, "The shape of the input tensor specified by (dims, row index, col index).");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 160, (uint64_t)__p, 0, 134, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1B2349914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LDConfig::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1B2349E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::string __p = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::LDAcousticResult::LDAcousticResult(uint64_t this, char a2)
{
  *(unsigned char *)this = a2;
  *(void *)(this + 24) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 8) = this + 16;
  return this;
}

uint64_t quasar::LDResult::LDResult(uint64_t this, char a2)
{
  *(unsigned char *)this = a2;
  *(_WORD *)(this + 1) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 8) = this + 16;
  *(void *)(this + 48) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = this + 40;
  return this;
}

void *quasar::AcousticLDModel::AcousticLDModel(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *uint64_t result = &unk_1F0A52E48;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void quasar::AcousticLDModel::~AcousticLDModel(quasar::AcousticLDModel *this)
{
  *(void *)this = &unk_1F0A52E48;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void quasar::DummyContextAwareLDModel::makePrediction(quasar *this@<X2>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  *(_WORD *)a4 = 1;
  *(void *)(a4 + 16) = 0;
  long long v8 = (long long *)(a4 + 16);
  *(unsigned char *)(a4 + 2) = 0;
  *(void *)(a4 + 8) = a4 + 16;
  char v9 = (long long **)(a4 + 8);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 40) = 0;
  std::string v10 = (uint64_t *)(a4 + 40);
  *(void *)(a4 + 32) = a4 + 40;
  long long v11 = (uint64_t **)(a4 + 32);
  *(void *)(a4 + 48) = 0;
  quasar::localePriorsFromContext(this, (uint64_t)&v59);
  if (!v60[1])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v43, 0, sizeof(v43));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Context provided no locale priors.", 34);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v43);
  }
  char v36 = v10;
  uint64_t v38 = v11;
  if (!a2[2])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v46 = 0u;
    long long v44 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v43, 0, sizeof(v43));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"No acoustic posteriors.", 23);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v43);
  }
  std::string v37 = (double **)a2;
  uint64_t v13 = (double *)(a2 + 1);
  long long v12 = (double *)*a2;
  if (v12 == v13) {
    goto LABEL_17;
  }
  double v14 = v12[7];
  char v15 = 1;
  do
  {
    if (*((char *)v12 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v43, *((const std::string::value_type **)v12 + 4), *((void *)v12 + 5));
    }
    else
    {
      *(_OWORD *)uint64_t v43 = *((_OWORD *)v12 + 2);
      *(double *)&v43[16] = v12[6];
    }
    *(double *)&v43[24] = v12[7];
    BOOL v16 = vabdd_f64(*(double *)&v43[24], v14) < 0.001;
    if ((v43[23] & 0x80000000) != 0) {
      operator delete(*(void **)v43);
    }
    char v17 = (double *)*((void *)v12 + 1);
    if (v17)
    {
      do
      {
        __int16 v18 = v17;
        char v17 = *(double **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        __int16 v18 = (double *)*((void *)v12 + 2);
        BOOL v19 = *(void *)v18 == (void)v12;
        long long v12 = v18;
      }
      while (!v19);
    }
    v15 &= v16;
    long long v12 = v18;
  }
  while (v18 != v13);
  if (v15)
  {
LABEL_17:
    if (quasar::gLogLevel >= 4)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v46 = 0u;
      long long v44 = 0u;
      *(_OWORD *)std::string __p = 0u;
      memset(v43, 0, sizeof(v43));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Using dummy context model. Since acoustic posteriors are equal, defaulting to dictationLocales and currentDictationLocale from the context.", 139);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v43);
    }
    quasar::fallbackConfidenceFromContext(this, (uint64_t)v43);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, *(void **)(a4 + 16));
    long long v20 = *(void **)&v43[8];
    *(void *)(a4 + 8) = *(void *)v43;
    *(void *)(a4 + 16) = v20;
    uint64_t v21 = *(void *)&v43[16];
    *(void *)(a4 + 24) = *(void *)&v43[16];
    if (v21)
    {
      v20[2] = v8;
      *(void *)uint64_t v43 = &v43[8];
      *(_OWORD *)&v43[8] = 0uLL;
      long long v20 = 0;
    }
    else
    {
      *char v9 = v8;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v43, v20);
    std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>(v38, *v9, v8);
    goto LABEL_61;
  }
  memset(v41, 0, sizeof(v41));
  int v42 = 1065353216;
  uint64_t v22 = v59;
  if (v59 != v60)
  {
    do
    {
      uint64_t v23 = *(void *)(a3 + 24);
      if (!v23) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      double v24 = *((double *)v22 + 10);
      (*(void (**)(void **__return_ptr))(*(void *)v23 + 48))(v39);
      std::pair<std::string const,quasar::language_detector::Locale>::pair[abi:ne180100]<std::string&,quasar::language_detector::Locale const&,0>((std::string *)v43, (long long *)v39, (long long *)v22 + 2);
      int v25 = std::__hash_table<std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::language_detector::Locale>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::language_detector::Locale>>((uint64_t)v41, v43, (long long *)v43);
      char v27 = v26;
      if (SBYTE7(v46) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v44) < 0) {
        operator delete(*(void **)&v43[24]);
      }
      if ((v43[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v43);
        if ((v27 & 1) == 0)
        {
LABEL_31:
          if (v24 > *(double *)std::map<quasar::language_detector::Locale,double>::at((uint64_t)&v59, v25 + 40))
          {
            std::string::operator=((std::string *)(v25 + 40), (const std::string *)(v22 + 4));
            std::string::operator=((std::string *)(v25 + 64), (const std::string *)(v22 + 7));
          }
        }
      }
      else if ((v27 & 1) == 0)
      {
        goto LABEL_31;
      }
      if (v40 < 0) {
        operator delete(v39[0]);
      }
      char v28 = v22[1];
      if (v28)
      {
        do
        {
          unsigned int v29 = (void **)v28;
          char v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          unsigned int v29 = (void **)v22[2];
          BOOL v19 = *v29 == v22;
          uint64_t v22 = v29;
        }
        while (!v19);
      }
      uint64_t v22 = v29;
    }
    while (v29 != v60);
  }
  long long v30 = *v37;
  if (*v37 != v13)
  {
    do
    {
      v39[0] = *((void **)v30 + 7);
      long long v31 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v41, (unsigned __int8 *)v30 + 32);
      if (v31)
      {
        std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale&,double &,0>((std::string *)v43, (long long *)(v31 + 40), (std::string::size_type *)v39);
        std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)v9, v43, (long long *)v43);
        if (SHIBYTE(v44) < 0) {
          operator delete(*(void **)&v43[24]);
        }
        if ((v43[23] & 0x80000000) != 0) {
          operator delete(*(void **)v43);
        }
      }
      long long v32 = (double *)*((void *)v30 + 1);
      if (v32)
      {
        do
        {
          uint64_t v33 = v32;
          long long v32 = *(double **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (double *)*((void *)v30 + 2);
          BOOL v19 = *(void *)v33 == (void)v30;
          long long v30 = v33;
        }
        while (!v19);
      }
      long long v30 = v33;
    }
    while (v33 != v13);
  }
  quasar::posteriorsToConfidences((uint64_t *)v9, (uint64_t)v43);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v38, *(void **)(a4 + 40));
  long long v34 = *(void **)&v43[8];
  *(void *)(a4 + 32) = *(void *)v43;
  *(void *)(a4 + 40) = v34;
  uint64_t v35 = *(void *)&v43[16];
  *(void *)(a4 + 48) = *(void *)&v43[16];
  if (v35)
  {
    v34[2] = v36;
    *(void *)uint64_t v43 = &v43[8];
    *(_OWORD *)&v43[8] = 0uLL;
    long long v34 = 0;
  }
  else
  {
    *uint64_t v38 = v36;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v43, v34);
  if (!*(void *)(a4 + 24)) {
    *(unsigned char *)a4 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)v41);
LABEL_61:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v59, v60[0]);
}

void sub_1B234A4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)&a18);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v25 - 136, *(void **)(v25 - 128));
  quasar::LDResult::~LDResult(v24);
  _Unwind_Resume(a1);
}

void quasar::localePriorsFromContext(quasar *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 352)) {
    BOOL v4 = *((void *)this + 43) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if (*((unsigned char *)this + 48) && (unint64_t v5 = *((void *)this + 5)) != 0)
    {
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)a2 = a2 + 8;
      double v17 = 1.0 / (double)v5;
      uint64_t v6 = (long long *)*((void *)this + 3);
      char v7 = (char *)this + 32;
      if (v6 != (long long *)((char *)this + 32))
      {
        do
        {
          std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double &,0>((std::string *)&v18, v6 + 2, (std::string::size_type *)&v17);
          std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)a2, (unsigned __int8 *)&v18, &v18);
          if (SHIBYTE(v20) < 0) {
            operator delete(*((void **)&v19 + 1));
          }
          if (SBYTE7(v19) < 0) {
            operator delete((void *)v18);
          }
          long long v8 = (long long *)*((void *)v6 + 1);
          if (v8)
          {
            do
            {
              char v9 = v8;
              long long v8 = *(long long **)v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              char v9 = (long long *)*((void *)v6 + 2);
              BOOL v4 = *(void *)v9 == (void)v6;
              uint64_t v6 = v9;
            }
            while (!v4);
          }
          uint64_t v6 = v9;
        }
        while (v9 != (long long *)v7);
      }
    }
    else
    {
      std::map<quasar::language_detector::Locale,double>::map[abi:ne180100]((uint64_t *)a2, (uint64_t)this);
    }
  }
  else
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)a2 = a2 + 8;
    if (!*((unsigned char *)this + 48))
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"If dictation priors are defined, then dictation locales must be.", 64);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v18);
    }
    std::string v10 = (unsigned __int8 *)*((void *)this + 3);
    long long v11 = (char *)this + 32;
    if (v10 != (unsigned __int8 *)((char *)this + 32))
    {
      long long v12 = (char *)this + 328;
      uint64_t v13 = (char *)this + 336;
      do
      {
        if (v13 == (char *)std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>((uint64_t)v12, (unsigned __int8 **)v10 + 4))
        {
          *(void *)&long long v18 = v10 + 32;
          std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>((uint64_t **)a2, v10 + 32, (uint64_t)&std::piecewise_construct, (long long **)&v18)[10] = 0;
        }
        else
        {
          uint64_t v14 = *(void *)std::map<quasar::language_detector::Locale,double>::at((uint64_t)v12, v10 + 32);
          *(void *)&long long v18 = v10 + 32;
          std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>((uint64_t **)a2, v10 + 32, (uint64_t)&std::piecewise_construct, (long long **)&v18)[10] = v14;
        }
        char v15 = (unsigned __int8 *)*((void *)v10 + 1);
        if (v15)
        {
          do
          {
            BOOL v16 = v15;
            char v15 = *(unsigned __int8 **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            BOOL v16 = (unsigned __int8 *)*((void *)v10 + 2);
            BOOL v4 = *(void *)v16 == (void)v10;
            std::string v10 = v16;
          }
          while (!v4);
        }
        std::string v10 = v16;
      }
      while (v16 != (unsigned __int8 *)v11);
    }
  }
}

void sub_1B234A7E4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

double quasar::fallbackConfidenceFromContext@<D0>(quasar *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  unint64_t v5 = (uint64_t *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  if (*((unsigned char *)this + 48)) {
    BOOL v6 = *((void *)this + 5) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if ((quasar *)a2 != this) {
      std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>((uint64_t **)a2, *(long long **)this, (long long *)((char *)this + 8));
    }
  }
  else
  {
    char v7 = (long long *)*((void *)this + 3);
    long long v8 = (char *)this + 32;
    if (v7 != (long long *)((char *)this + 32))
    {
      do
      {
        std::string::size_type v17 = 0;
        std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double,0>(&v18, v7 + 2, &v17);
        std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)a2, (unsigned __int8 *)&v18, (long long *)&v18);
        if (v20 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        char v9 = (long long *)*((void *)v7 + 1);
        if (v9)
        {
          do
          {
            std::string v10 = v9;
            char v9 = *(long long **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            std::string v10 = (long long *)*((void *)v7 + 2);
            BOOL v6 = *(void *)v10 == (void)v7;
            char v7 = v10;
          }
          while (!v6);
        }
        char v7 = v10;
      }
      while (v10 != (long long *)v8);
    }
  }
  if (*((unsigned char *)this + 104)) {
    uint64_t v11 = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(a2, (unsigned __int8 **)this + 7);
  }
  else {
    uint64_t v11 = (uint64_t)v5;
  }
  unint64_t v12 = *(void *)(a2 + 16);
  if (v5 != (uint64_t *)v11) {
    ++v12;
  }
  double result = 1.0 / (double)v12;
  uint64_t v14 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 != v5)
  {
    do
    {
      *((double *)v14 + 10) = result;
      char v15 = (uint64_t *)v14[1];
      if (v15)
      {
        do
        {
          BOOL v16 = v15;
          char v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          BOOL v16 = (uint64_t *)v14[2];
          BOOL v6 = *v16 == (void)v14;
          uint64_t v14 = v16;
        }
        while (!v6);
      }
      uint64_t v14 = v16;
    }
    while (v16 != v5);
  }
  if (v5 != (uint64_t *)v11)
  {
    double result = result + result;
    *(double *)(v11 + 80) = result;
  }
  return result;
}

void sub_1B234A9AC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<quasar::language_detector::Locale,double>::at(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 80;
}

void quasar::LDResult::~LDResult(quasar::LDResult *this)
{
}

void quasar::LDFrontend::startNewRequest(quasar::LDFrontend *this, quasar::SystemConfig *a2, quasar::LDRequestState *a3)
{
  std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,int &,void>((uint64_t)v3, (int *)a3 + 13);
}

void sub_1B234ADBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34)
{
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&a34);
  quasar::PTree::~PTree((quasar::PTree *)(v34 - 168));
  _Unwind_Resume(a1);
}

void quasar::ContextAwareLDModelConfig::registerParams(quasar::ContextAwareLDModelConfig *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "path to the model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "supported-locales");
  std::string::basic_string[abi:ne180100]<0>(__p, "the locales understood by the model");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 152, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "supported-languages");
  std::string::basic_string[abi:ne180100]<0>(__p, "the languages understood by the model");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file-format");
  std::string::basic_string[abi:ne180100]<0>(__p, "the format of the model file, must be \"core-ml\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 72, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-input-names");
  std::string::basic_string[abi:ne180100]<0>(__p, "the input features expected by the model");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 96, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "model-output-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "the output feature that contains the locale posteriors");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 120, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "use-cpu-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only use the CPU for inference");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 144, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B234B198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ContextAwareLDModelConfig::init(quasar::ContextAwareLDModelConfig *this)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (char *)this + 72;
  if (*((char *)this + 95) < 0)
  {
    uint64_t v4 = (int *)*((void *)this + 9);
    uint64_t v3 = *((void *)this + 10);
  }
  else
  {
    uint64_t v3 = *((unsigned __int8 *)this + 95);
    uint64_t v4 = (int *)((char *)this + 72);
  }
  if (v3 != 7
    || ((v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1701998435) ? (BOOL v7 = v6 == 1819094373) : (BOOL v7 = 0), !v7))
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Invalid model file format \"", 27);
    int v27 = *((char *)this + 95);
    if (v27 >= 0) {
      uint64_t v28 = (uint64_t)v2;
    }
    else {
      uint64_t v28 = *((void *)this + 9);
    }
    if (v27 >= 0) {
      uint64_t v29 = *((unsigned __int8 *)this + 95);
    }
    else {
      uint64_t v29 = *((void *)this + 10);
    }
    long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "\"");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
  }
  std::vector<quasar::language_detector::Locale>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>((std::vector<std::pair<std::string, std::string>> *)this + 1, *((void *)this + 19), *((void *)this + 20), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 3));
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 19);
  uint64_t v8 = *((void *)this + 12);
  std::string v10 = (unsigned __int8 **)((char *)this + 104);
  char v9 = (long long *)*((void *)this + 13);
  unint64_t v11 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v8) >> 3));
  if (v9 == (long long *)v8) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v11;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v8, v9, (uint64_t)&v32, v12, 1);
  uint64_t v13 = (const std::string *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__equal_to &>(*((unsigned __int8 **)this + 12), *v10, (uint64_t)&v32);
  v14.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)*v10;
  if (*v10 != (unsigned __int8 *)v13)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Model input names contains duplicates", 37);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
      v14.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)*((void *)this + 13);
    }
    v15.__i_ = v13;
    std::vector<std::string>::erase((std::vector<std::string> *)this + 4, v15, v14);
  }
  long long v38 = xmmword_1E60001D0;
  long long v39 = *(_OWORD *)&off_1E60001E0;
  long long v40 = xmmword_1E60001F0;
  long long v41 = *(_OWORD *)&off_1E6000200;
  long long v34 = xmmword_1E6000190;
  long long v35 = *(_OWORD *)&off_1E60001A0;
  long long v36 = xmmword_1E60001B0;
  long long v37 = *(_OWORD *)&off_1E60001C0;
  long long v32 = xmmword_1E6000170;
  long long v33 = *(_OWORD *)&off_1E6000180;
  std::unordered_set<std::string_view>::unordered_set((uint64_t)v31, &v32, 10);
  uint64_t v17 = *((void *)this + 12);
  uint64_t v16 = *((void *)this + 13);
  while (v17 != v16)
  {
    if (*(char *)(v17 + 23) < 0)
    {
      uint64_t v19 = *(void *)v17;
      uint64_t v18 = *(void *)(v17 + 8);
    }
    else
    {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
      uint64_t v19 = v17;
    }
    *(void *)&long long v32 = v19;
    *((void *)&v32 + 1) = v18;
    if (!std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::find<std::string_view>(v31, (uint64_t)&v32))
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Invalid context-aware input feature name \"", 42);
      int v22 = *(char *)(v17 + 23);
      if (v22 >= 0) {
        uint64_t v23 = v17;
      }
      else {
        uint64_t v23 = *(void *)v17;
      }
      if (v22 >= 0) {
        uint64_t v24 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        uint64_t v24 = *(void *)(v17 + 8);
      }
      long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\"", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
    }
    v17 += 24;
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v31);
}

void sub_1B234B54C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B234B55C(uint64_t a1, ...)
{
  va_start(va, a1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  JUMPOUT(0x1B234B568);
}

void *quasar::LanguageDetector::LanguageDetector(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = *a3;
  *a3 = 0;
  a1[2] = 0;
  *a1 = v8;
  a1[1] = a1 + 2;
  a1[3] = 0;
  a1[5] = 0;
  a1[4] = a1 + 5;
  a1[6] = 0;
  uint64_t v9 = *a4;
  *a4 = 0;
  a1[10] = 0;
  a1[9] = a1 + 10;
  a1[7] = v9;
  a1[8] = 0;
  a1[11] = 0;
  uint64_t v10 = (uint64_t)(a1 + 12);
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 12));
  memset(v12, 0, sizeof(v12));
  quasar::SystemConfig::readJsonFile(v10, a2, v12, a5, 0, 0);
  uint64_t v13 = (void **)v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  return a1;
}

void sub_1B234B650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::SystemConfig::~SystemConfig(v8);
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(v7, (void *)v4[10]);
  uint64_t v10 = v4[8];
  v4[8] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v4[7];
  v4[7] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
  }
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(v6, (void *)v4[5]);
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(v5, (void *)v4[2]);
  uint64_t v12 = *v4;
  uint64_t *v4 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::LanguageDetector::init(uint64_t **this)
{
  uint64_t v2 = (quasar::SystemConfig *)(this + 12);
  std::string::basic_string[abi:ne180100]<0>(__p, "language-detectors");
  uint64_t Ptree = quasar::SystemConfig::getPtree((uint64_t)v2, (uint64_t)__p);
  int v36 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(Ptree + 8), *(void *)(Ptree + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(Ptree + 8);
    v37.__r_.__value_.__r.__words[2] = *(void *)(Ptree + 24);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v4;
  }
  memset(&v38, 0, sizeof(v38));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v38, *(void *)(Ptree + 32), *(void *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(Ptree + 40) - *(void *)(Ptree + 32)) >> 3));
  char v39 = *(unsigned char *)(Ptree + 56);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = (const std::string *)quasar::PTree::begin((quasar::PTree *)&v36);
  if (v5 == (const std::string *)quasar::PTree::end((quasar::PTree *)&v36))
  {
    __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(v2);
    quasar::SystemConfig::Version::Version(v15, 118, 0);
    if (quasar::SystemConfig::Version::operator>=(__p, v15))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "override-locale-language-map");
      quasar::SystemConfig::getPtreeOptional((uint64_t)v2, (uint64_t)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, "ld-context-aware-model");
    quasar::SystemConfig::hasParam((uint64_t)v2, (uint64_t)&v16);
  }
  int v35 = 0;
  int v35 = std::stoi(v5, 0, 10);
  String = (std::string *)quasar::PTree::getString((quasar::PTree *)&v5[1]);
  std::string::basic_string[abi:ne180100]<0>(__p, "::");
  quasar::splitAndTrim(String, (char *)__p, (uint64_t *)v15);
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  if ((void *)((char *)v15[1] - (char *)v15[0]) == (void *)48)
  {
    std::operator+<char>();
    std::allocate_shared[abi:ne180100]<quasar::LDFrontend const,std::allocator<quasar::LDFrontend const>,std::string,void>((long long *)__p, &v16);
    uint64_t v17 = &v35;
    uint64_t v7 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 1, &v35, (uint64_t)&std::piecewise_construct, &v17);
    long long v8 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)v7[6];
    *(_OWORD *)(v7 + 5) = v8;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (v16.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.__r_.__value_.__l.__size_);
      }
    }
    if (SBYTE7(v19) < 0) {
      operator delete(__p[0]);
    }
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar8LDConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v17);
    uint64_t v10 = v17;
    std::operator+<char>();
    uint64_t v11 = std::string::append(&v16, ".");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    *(void *)&long long v19 = *((void *)&v11->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    quasar::LDConfig::registerParams((uint64_t)v10, v2, (const std::string *)__p);
    if (SBYTE7(v19) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    uint64_t v13 = v17;
    std::operator+<char>();
    quasar::LDConfig::init((uint64_t)v13, (uint64_t)v2, (uint64_t)__p);
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Configuration is incorrect. Only two components are supported.", 62);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  __p[0] = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  quasar::PTree::~PTree((quasar::PTree *)&v36);
  return 0;
}

void sub_1B234C0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a40);
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  quasar::ContextAwareLDModelConfig::~ContextAwareLDModelConfig((void **)&a9);
  if (a36 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)(v45 - 168));
  _Unwind_Resume(a1);
}

void sub_1B234C2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void quasar::ContextAwareLDModelConfig::~ContextAwareLDModelConfig(void **this)
{
  uint64_t v2 = this + 19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  uint64_t v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::LanguageDetector::startRequest(void *a1@<X0>, int a2@<W1>, quasar::LDContext ***a3@<X2>, void *a4@<X8>)
{
  int v39 = a2;
  if (quasar::gLogLevel >= 4)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Resetting for new request.", 26);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v22);
  }
  quasar::LDContext::logContext(*a3);
  quasar::PTree::PTree((quasar::PTree *)v21);
  uint64_t v8 = a1[2];
  if (v8)
  {
    uint64_t v9 = a1 + 2;
    do
    {
      int v10 = *(_DWORD *)(v8 + 32);
      BOOL v11 = v10 < v39;
      if (v10 >= v39) {
        long long v12 = (uint64_t *)v8;
      }
      else {
        long long v12 = (uint64_t *)(v8 + 8);
      }
      if (!v11) {
        uint64_t v9 = (void *)v8;
      }
      uint64_t v8 = *v12;
    }
    while (*v12);
    if (v9 != a1 + 2 && v39 >= *((_DWORD *)v9 + 8))
    {
      uint64_t v13 = a1[5];
      if (v13)
      {
        std::vector<std::string>::const_iterator v14 = a1 + 5;
        do
        {
          int v15 = *(_DWORD *)(v13 + 32);
          BOOL v16 = v15 < v39;
          if (v15 >= v39) {
            uint64_t v17 = (uint64_t *)v13;
          }
          else {
            uint64_t v17 = (uint64_t *)(v13 + 8);
          }
          if (!v16) {
            std::vector<std::string>::const_iterator v14 = (void *)v13;
          }
          uint64_t v13 = *v17;
        }
        while (*v17);
        if (v14 != a1 + 5 && v39 >= *((_DWORD *)v14 + 8))
        {
          quasar::LanguageDetector::checkContext((uint64_t)*a3, v7);
          _ZNSt3__115allocate_sharedB8ne180100IN6quasar14LDRequestStateENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a4);
          v22[0] = (void *)quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)(a1 + 12));
          quasar::SystemConfig::Version::Version(v20, 118, 0);
          if (!quasar::SystemConfig::Version::operator<(v22, v20))
          {
            *(_DWORD *)(*a4 + 52) = v39;
            long long v19 = std::map<int,std::set<int>>::at((uint64_t)(a1 + 1), &v39);
            std::map<int,std::set<int>>::at((uint64_t)(a1 + 4), &v39);
            quasar::LDFrontend::startNewRequest((quasar::LDFrontend *)*v19, (quasar::SystemConfig *)(a1 + 12), (quasar::LDRequestState *)*a4);
          }
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          *(_OWORD *)long long v22 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Version 118 or greater is required.", 35);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v22);
        }
      }
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Invalid sampling rate ", 22);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"given.", 6);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v22);
  }
  *a4 = 0;
  a4[1] = 0;
  quasar::PTree::~PTree((quasar::PTree *)v21);
}

void sub_1B234C92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a49);
  long long v56 = *(std::__shared_weak_count **)(v54 + 8);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a41);
  _Unwind_Resume(a1);
}

uint64_t quasar::LanguageDetector::checkContext(uint64_t this, const quasar::LDContext *a2)
{
  if (!this)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "No context.");
    goto LABEL_10;
  }
  if ((!*(unsigned char *)(this + 352) || !*(void *)(this + 344))
    && (!*(unsigned char *)(this + 48) || !*(void *)(this + 40))
    && !*(void *)(this + 16))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Empty priors.");
LABEL_10:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  return this;
}

void quasar::LanguageDetector::processAudio(quasar::LanguageDetector *this, quasar::LDRequestState *a2)
{
  long long v2 = a2;
  double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2);
  double v4 = *((double *)v2 + 38);
  std::string::basic_string[abi:ne180100]<0>(v70, "acousticLatency");
  quasar::LDLoggingInfo::addDoubleValue((quasar::LDRequestState *)((char *)v2 + 224), (uint64_t)v70, 0.0);
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v68, "contextModelLatency");
  quasar::LDLoggingInfo::addDoubleValue((quasar::LDRequestState *)((char *)v2 + 224), (uint64_t)v68, 0.0);
  long long v33 = (quasar::LDRequestState *)((char *)v2 + 224);
  if (v69 < 0) {
    operator delete(v68[0]);
  }
  double v5 = Seconds - v4;
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)v2 + 2) + 8))(*((void *)v2 + 2));
  int v37 = v6;
  kaldi::Matrix<float>::Matrix((uint64_t)v66, 1, v6, 0, 0);
  unint64_t v7 = 0;
  long long v35 = v2;
  while (1)
  {
    long long v8 = (uint64_t (***)(void, void *))*((void *)v2 + 2);
    kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(v65, (uint64_t)v66, 0, 0, 0, 0, 0);
    int v39 = (**v8)(v8, v65);
    int v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)v66);
    int v10 = v9;
    int v38 = v9 - 1;
    if (v9 < 1)
    {
      if ((v39 & 1) == 0)
      {
        std::string __p = 0;
        uint64_t v63 = 0;
        unint64_t v64 = 0;
        quasar::LanguageDetector::getAcousticResult((uint64_t)&__p, 0, v37, (uint64_t)v2, 0, (uint64_t)v45);
        if (__p)
        {
          uint64_t v63 = (char *)__p;
          operator delete(__p);
        }
        quasar::LanguageDetector::processAcousticResult((uint64_t)this, v2, (uint64_t)v45);
        std::__tree<std::string>::destroy((uint64_t)&v45[1], (char *)v46);
      }
      int v29 = 1;
    }
    else
    {
      int v11 = 0;
      unsigned int v34 = v7 + v9;
      do
      {
        uint64_t v12 = v66[0];
        int v13 = v67;
        kaldi::MatrixBase<float>::NumCols((uint64_t)v66);
        uint64_t v14 = 0;
        uint64_t v15 = v12 + 4 * v13 * v11;
        int v16 = 4 * kaldi::MatrixBase<float>::NumCols((uint64_t)v66);
        std::string __p = 0;
        uint64_t v63 = 0;
        unint64_t v64 = 0;
        while (v14 < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v66))
        {
          long long v17 = v63;
          if (v63 >= v64)
          {
            long long v19 = (char *)__p;
            uint64_t v20 = (v63 - (unsigned char *)__p) >> 2;
            unint64_t v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v22 = v64 - (unsigned char *)__p;
            if ((v64 - (unsigned char *)__p) >> 1 > v21) {
              unint64_t v21 = v22 >> 1;
            }
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v21;
            }
            if (v23)
            {
              long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v64, v23);
              long long v19 = (char *)__p;
              long long v17 = v63;
            }
            else
            {
              long long v24 = 0;
            }
            long long v25 = &v24[4 * v20];
            *(_DWORD *)long long v25 = *(_DWORD *)(v15 + 4 * v14);
            long long v18 = v25 + 4;
            while (v17 != v19)
            {
              int v26 = *((_DWORD *)v17 - 1);
              v17 -= 4;
              *((_DWORD *)v25 - 1) = v26;
              v25 -= 4;
            }
            std::string __p = v25;
            uint64_t v63 = v18;
            unint64_t v64 = &v24[4 * v23];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v63 = *(_DWORD *)(v15 + 4 * v14);
            long long v18 = v17 + 4;
          }
          uint64_t v63 = v18;
          ++v14;
        }
        if (v11 < v38) {
          char v27 = 1;
        }
        else {
          char v27 = v39;
        }
        long long v2 = v35;
        quasar::LanguageDetector::getAcousticResult((uint64_t)&__p, v16, v37, (uint64_t)v35, v27, (uint64_t)v45);
        int v28 = quasar::LanguageDetector::processAcousticResult((uint64_t)this, v35, (uint64_t)v45);
        std::__tree<std::string>::destroy((uint64_t)&v45[1], (char *)v46);
        if (__p)
        {
          uint64_t v63 = (char *)__p;
          operator delete(__p);
        }
        unint64_t v7 = (v7 + 1);
        if (v28) {
          goto LABEL_35;
        }
        ++v11;
      }
      while (v11 != v10);
      unint64_t v7 = v34;
LABEL_35:
      int v29 = v28 ^ 1;
    }
    if ((v39 & v29 & 1) == 0)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        *(_OWORD *)uint64_t v45 = 0u;
        long long v46 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Processed ", 10);
        long long v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" frames of audio.", 17);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v45);
      }
      std::string::basic_string[abi:ne180100]<0>(v43, "numFramesProcessed");
      quasar::LDLoggingInfo::addIntValue((uint64_t)v33, (uint64_t)v43, (quasar *)v7);
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v41, "totalWallTime");
      double v32 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v31);
      quasar::LDLoggingInfo::addDoubleValue(v33, (uint64_t)v41, (v32 - *((double *)v2 + 38) - v5) * 1000.0);
      if (v42 < 0) {
        operator delete(v41[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(&v40, "latency");
      std::string::basic_string[abi:ne180100]<0>(v45, "acousticLatency");
      quasar::PTree::getDouble((uint64_t)v33, (uint64_t)v45);
    }
  }
}

void sub_1B234D0CC(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1 - 200);
  _Unwind_Resume(a1);
}

void quasar::LanguageDetector::getAcousticResult(uint64_t a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v10 = *(void *)(a4 + 208);
  if (a2)
  {
    std::deque<std::vector<float>>::push_back((void *)(a4 + 56), a1);
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Data is empty", 13);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v50);
  }
  unint64_t v11 = *(void *)(a4 + 96);
  uint64_t v12 = *(int **)(v10 + 8);
  int v13 = v12[49];
  if (v13 <= 0) {
    int v13 = *v12;
  }
  if (v11 >= v13)
  {
    if (quasar::gLogLevel < 4)
    {
      a5 = 0;
    }
    else
    {
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Reached maximum window size. Treating this as the end of audio.", 63);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v50);
      a5 = 0;
      unint64_t v11 = *(void *)(a4 + 96);
      uint64_t v12 = *(int **)(v10 + 8);
    }
  }
  if (*v12 > (int)v11)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Not enough features yet to meet minimum window size.", 52);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v50);
    }
    LOBYTE(v50) = 1;
    uint64_t v14 = (const void ***)&v50 + 1;
    long long v51 = 0uLL;
    *((void *)&v50 + 1) = &v51;
    *(unsigned char *)a6 = 1;
    std::map<std::string,double>::map[abi:ne180100]((uint64_t *)(a6 + 8), (const void ***)&v50 + 1);
    *(unsigned char *)(a6 + 32) = 0;
    *(unsigned char *)(a6 + 33) = a5;
    uint64_t v15 = (char *)v51;
LABEL_52:
    long long v18 = v14;
    goto LABEL_53;
  }
  int v16 = *(_DWORD *)(a4 + 48);
  char v17 = a5 ^ 1;
  if (v16 < 1) {
    char v17 = 1;
  }
  if (v17)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Running LanguageDetector with ", 30);
      long long v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" frames", 7);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v50);
    }
    char v43 = a5;
    uint64_t v44 = a6;
    double Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a1);
    uint64_t v22 = (void **)(a4 + 104);
    uint64_t v21 = *(void *)(a4 + 104);
    double v23 = *(double *)(a4 + 304);
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(*(void *)(v10 + 8) + 4);
    *(void *)(a4 + 112) = v21;
    std::vector<float>::reserve((void **)(a4 + 104), *(void *)(a4 + 96) * a3);
    unint64_t v24 = *(void *)(a4 + 96);
    if (v24)
    {
      unint64_t v25 = 0;
      int v26 = (void *)(a4 + 120);
      uint64_t v27 = a3;
      int v45 = a3;
      do
      {
        if (a3 >= 1)
        {
          uint64_t v28 = 0;
          int v29 = (uint64_t *)(*(void *)(*(void *)(a4 + 64) + 8 * ((*(void *)(a4 + 88) + v25) / 0xAA))
                          + 24 * ((*(void *)(a4 + 88) + v25) % 0xAA));
          long long v30 = *(char **)(a4 + 112);
          do
          {
            uint64_t v31 = *v29;
            if ((unint64_t)v30 >= *v26)
            {
              long long v33 = (char *)*v22;
              uint64_t v34 = (v30 - (unsigned char *)*v22) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v36 = *v26 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                int v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 120, v37);
                long long v33 = *(char **)(a4 + 104);
                long long v30 = *(char **)(a4 + 112);
              }
              else
              {
                int v38 = 0;
              }
              int v39 = &v38[4 * v34];
              *(_DWORD *)int v39 = *(_DWORD *)(v31 + 4 * v28);
              double v32 = v39 + 4;
              while (v30 != v33)
              {
                int v40 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *(void *)(a4 + 104) = v39;
              *(void *)(a4 + 112) = v32;
              *(void *)(a4 + 120) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)long long v30 = *(_DWORD *)(v31 + 4 * v28);
              double v32 = v30 + 4;
            }
            *(void *)(a4 + 112) = v32;
            ++v28;
            long long v30 = v32;
          }
          while (v28 != v27);
          unint64_t v24 = *(void *)(a4 + 96);
          a3 = v45;
        }
        ++v25;
      }
      while (v24 > v25);
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a4 + 208) + 24))(&v48);
    if (!(_BYTE)v48 && quasar::gLogLevel > 3)
    {
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Something went wrong in LD inference.", 37);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v50);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "acousticLatency");
    double v42 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v41);
    quasar::LDLoggingInfo::addDoubleValue((quasar *)(a4 + 224), (uint64_t)__p, (v42 - *(double *)(a4 + 304) - (Seconds - v23)) * 1000.0);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)uint64_t v44 = v48;
    uint64_t v14 = v49;
    std::map<std::string,double>::map[abi:ne180100]((uint64_t *)(v44 + 8), v49);
    *(unsigned char *)(v44 + 32) = 1;
    *(unsigned char *)(v44 + 33) = v43;
    uint64_t v15 = (char *)v49[1];
    goto LABEL_52;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Waiting until the next predictionInterval to run.", 49);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v50);
    int v16 = *(_DWORD *)(a4 + 48);
  }
  *(_DWORD *)(a4 + 48) = v16 - 1;
  LOBYTE(v50) = 1;
  long long v51 = 0uLL;
  *((void *)&v50 + 1) = &v51;
  *(unsigned char *)a6 = 1;
  std::map<std::string,double>::map[abi:ne180100]((uint64_t *)(a6 + 8), (const void ***)&v50 + 1);
  *(_WORD *)(a6 + 32) = 256;
  uint64_t v15 = (char *)v51;
  long long v18 = (const void ***)&v50 + 1;
LABEL_53:
  std::__tree<std::string>::destroy((uint64_t)v18, v15);
}

void sub_1B234D7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24)
{
}

uint64_t quasar::LanguageDetector::processAcousticResult(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a3)
  {
    if (*(unsigned char *)(a3 + 32)) {
      BOOL v5 = 1;
    }
    else {
      BOOL v5 = *(unsigned char *)(a3 + 33) == 0;
    }
    if (!v5) {
      return 0;
    }
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2);
    if (!*(unsigned char *)(a3 + 32))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"No valid window found. Running contextual model based on equal acoustic priors.", 79);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v32);
      }
      uint64_t v6 = *(void *)(a2[26] + 8);
      unint64_t v7 = *(const void ***)(v6 + 40);
      long long v8 = *(const void ***)(v6 + 48);
      if (v8 != v7)
      {
        double v9 = 1.0 / (double)(0xAAAAAAAAAAAAAAABLL * (v8 - v7));
        do
        {
          *(void *)&long long v32 = v7;
          *((double *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 8), v7, (uint64_t)&std::piecewise_construct, (long long **)&v32)+ 7) = v9;
          v7 += 3;
        }
        while (v7 != v8);
      }
    }
    std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>(a2 + 24, &v30);
    uint64_t v10 = v30;
    uint64_t v11 = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)a2[37];
    a2[36] = v10;
    a2[37] = v11;
    if (v12)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      uint64_t v10 = v30;
    }
    if (*(unsigned char *)(v10 + 176))
    {
      quasar::PTree::PTree((quasar::PTree *)&v32);
      if (!*(unsigned char *)(v30 + 176)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      int v13 = *(double **)(v30 + 152);
      uint64_t v14 = (double *)(v30 + 160);
      if (v13 != (double *)(v30 + 160))
      {
        do
        {
          quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)(v13 + 4), &__p);
          double v15 = v13[10];
          LODWORD(v24) = quasar::getType(v16, *(float *)&v15);
          std::to_string(&v25, v15);
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          char v29 = 1;
          quasar::PTree::putChild((uint64_t)&v32, (uint64_t)&__p, (uint64_t)&v24, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v24);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v17 = (double *)*((void *)v13 + 1);
          if (v17)
          {
            do
            {
              long long v18 = v17;
              char v17 = *(double **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              long long v18 = (double *)*((void *)v13 + 2);
              BOOL v5 = *(void *)v18 == (void)v13;
              int v13 = v18;
            }
            while (!v5);
          }
          int v13 = v18;
        }
        while (v18 != v14);
      }
      std::string::basic_string[abi:ne180100]<0>(&v24, "conversationMessagePriors");
      quasar::PTree::putChild((uint64_t)(a2 + 28), (uint64_t)&v24, (uint64_t)&v32, 1);
      if (v25.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(v24);
      }
      quasar::PTree::~PTree((quasar::PTree *)&v32);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "conversationMessagePriors");
      quasar::PTree::erase((uint64_t)(a2 + 28), (unsigned __int8 *)&v32);
      if (SBYTE7(v33) < 0) {
        operator delete((void *)v32);
      }
    }
    if (*(unsigned char *)(v30 + 264))
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, "lastMessageLanguage");
      quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)(v30 + 216), &__p);
      quasar::PTree::PTree(&v32, &__p);
      quasar::PTree::putChild((uint64_t)(a2 + 28), (uint64_t)&v24, (uint64_t)&v32, 1);
      quasar::PTree::~PTree((quasar::PTree *)&v32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v25.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
      {
LABEL_44:
        std::string::basic_string[abi:ne180100]<0>(&v23, "numAcousticRuns");
        std::string::basic_string[abi:ne180100]<0>(&v32, "numAcousticRuns");
        quasar::PTree::getInt<int>((uint64_t)(a2 + 28), (uint64_t)&v32);
      }
      uint64_t v20 = v24;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "lastMessageLanguage");
      quasar::PTree::erase((uint64_t)(a2 + 28), (unsigned __int8 *)&v32);
      if ((SBYTE7(v33) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      uint64_t v20 = (void *)v32;
    }
    operator delete(v20);
    goto LABEL_44;
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Error running acoustic model.", 29);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v32);
  }
  quasar::LanguageDetector::handleErrorInProcessAcousticResult(a1, (uint64_t)a2);
  return 1;
}

void sub_1B234E198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
}

void std::swap[abi:ne180100]<quasar::LDLoggingInfo>(int *a1, int *a2)
{
  int v11 = *a1;
  double v4 = (std::string *)(a1 + 2);
  if (*((char *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)a1 + 1), *((void *)a1 + 2));
  }
  else
  {
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = *((void *)a1 + 3);
  }
  uint64_t v5 = *((void *)a1 + 4);
  uint64_t v6 = *((void *)a1 + 5);
  memset(&v13, 0, sizeof(v13));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v13, v5, v6, 0x2E8BA2E8BA2E8BA3 * ((v6 - v5) >> 3));
  char v14 = *((unsigned char *)a1 + 56);
  long long v15 = *((_OWORD *)a1 + 4);
  *((void *)a1 + 8) = 0;
  *((void *)a1 + 9) = 0;
  *a1 = *a2;
  std::string::operator=(v4, (const std::string *)(a2 + 2));
  if (a1 != a2) {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)(a1 + 8), *((std::string **)a2 + 4), *((std::string **)a2 + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3));
  }
  *((unsigned char *)a1 + 56) = *((unsigned char *)a2 + 56);
  long long v7 = *((_OWORD *)a2 + 4);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  long long v8 = (std::__shared_weak_count *)*((void *)a1 + 9);
  *((_OWORD *)a1 + 4) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a2 = v11;
  std::string::operator=((std::string *)(a2 + 2), &v12);
  if (&v11 != a2) {
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)(a2 + 8), (std::string *)v13.__r_.__value_.__l.__data_, (std::string *)v13.__r_.__value_.__l.__size_, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3));
  }
  *((unsigned char *)a2 + 56) = v14;
  long long v9 = v15;
  long long v15 = 0uLL;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)a2 + 9);
  *((_OWORD *)a2 + 4) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)&v11);
}

void sub_1B234E568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LDLoggingInfo::~LDLoggingInfo(quasar::LDLoggingInfo *this)
{
  long long v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  quasar::PTree::~PTree(this);
}

void quasar::LanguageDetector::updateContext(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  quasar::LanguageDetector::checkContext(*a3, (const quasar::LDContext *)a2);
  uint64_t v6 = (quasar::LDContext **)a2[24];
  uint64_t v5 = a2 + 24;
  quasar::LDContext::logContext(v6);
  long long v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v8 = *a3;
  long long v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::atomic_store[abi:ne180100]<quasar::SpeechRequestResultData>(v5, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B234E640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LanguageDetector::handleErrorInProcessAcousticResult(uint64_t a1, uint64_t a2)
{
  if (quasar::gLogLevel >= 4)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Error in processing acoustic result.", 36);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v11);
  }
  std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>((void *)(a2 + 192), &v9);
  LOWORD(v11) = 0;
  BYTE2(v11) = 0;
  *((void *)&v11 + 1) = &v12;
  long long v12 = 0uLL;
  *(void *)&long long v14 = 0;
  long long v13 = (unint64_t)&v13 + 8;
  quasar::fallbackConfidenceFromContext(v9, (uint64_t)&v7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11 + 8, (void *)v12);
  long long v3 = (void *)v8;
  *((void *)&v11 + 1) = v7;
  long long v12 = v8;
  if (*((void *)&v8 + 1))
  {
    *(void *)(v8 + 16) = &v12;
    long long v7 = &v8;
    long long v8 = 0uLL;
    long long v3 = 0;
  }
  else
  {
    *((void *)&v11 + 1) = &v12;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7, v3);
  std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>((uint64_t **)&v13, *((long long **)&v11 + 1), &v12);
  uint64_t v5 = v9;
  double v4 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 296);
  *(void *)(a2 + 288) = v5;
  *(void *)(a2 + 296) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  (*(void (**)(void, long long *))(**(void **)(a2 + 32) + 8))(*(void *)(a2 + 32), &v11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, *((void **)&v13 + 1));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11 + 8, (void *)v12);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1B234E7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::LanguageDetector::addLocaleLevelMetric(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "localeSpecificMetrics");
  quasar::PTree::getChild(a1, (uint64_t)__p);
}

void sub_1B234EB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::localeToLanguageUsingOverrides(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(a2, (unsigned __int8 **)a1);
  if (a2 + 8 == v6)
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
    long long v8 = *(unsigned __int8 **)a1;
    std::string::size_type v9 = *(void *)(a1 + 8);
  }
  else
  {
    if ((*(char *)(v6 + 103) & 0x80000000) == 0)
    {
      long long v7 = *(_OWORD *)(v6 + 80);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v6 + 96);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      return;
    }
    long long v8 = *(unsigned __int8 **)(v6 + 80);
    std::string::size_type v9 = *(void *)(v6 + 88);
  }
  std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v8, v9);
}

void quasar::DummyContextAwareLDModel::~DummyContextAwareLDModel(quasar::DummyContextAwareLDModel *this)
{
}

uint64_t std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](uint64_t result, uint64_t a2)
{
  *(unsigned char *)double result = 0;
  *(unsigned char *)(result + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)double result = *(void *)a2;
    long long v2 = (void *)(a2 + 8);
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(result + 8) = v3;
    uint64_t v4 = result + 8;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(result + 16) = v5;
    if (v5)
    {
      *(void *)(v3 + 16) = v4;
      *(void *)a2 = v2;
      void *v2 = 0;
      *(void *)(a2 + 16) = 0;
    }
    else
    {
      *(void *)double result = v4;
    }
    *(unsigned char *)(result + 24) = 1;
  }
  return result;
}

uint64_t **std::__tree<quasar::language_detector::Locale>::__assign_multi<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    long long v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    long long v14 = result;
    long long v15 = v8;
    long long v16 = v8;
    if (v8)
    {
      long long v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        std::string::size_type v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          std::__tree<quasar::language_detector::Locale>::__node_insert_multi(v5, (uint64_t)v16);
          long long v8 = v15;
          long long v16 = v15;
          if (v15) {
            long long v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (long long *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(long long **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              std::string::size_type v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          std::string::size_type v9 = a2;
        }
        while (a2 != a3);
      }
    }
    double result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)std::__tree<quasar::language_detector::Locale>::__emplace_multi<quasar::language_detector::Locale const&>((uint64_t)v5, a2 + 2);
      long long v12 = (long long *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          long long v13 = v12;
          long long v12 = *(long long **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (long long *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B234EE44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<quasar::language_detector::Locale>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)(a2 + 32), (unsigned __int8 **)v4 + 4))break; {
        uint64_t v4 = *v5;
        }
        uint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t v6 = v5 + 1;
  }
  else
  {
    uint64_t v6 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<quasar::language_detector::Locale>::__emplace_multi<quasar::language_detector::Locale const&>(uint64_t a1, long long *a2)
{
  std::__tree<quasar::language_detector::Locale>::__construct_node<quasar::language_detector::Locale const&>(a1, a2, (uint64_t)v9);
  uint64_t v3 = v9[0];
  uint64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)(v3 + 32), (unsigned __int8 **)v4 + 4))break; {
        uint64_t v4 = *v5;
        }
        uint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t v6 = v5 + 1;
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, (uint64_t *)v3);
  uint64_t v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v7;
}

void std::__optional_storage_base<quasar::language_detector::Locale,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::language_detector::Locale,false> const&>(std::string *this, std::string *__str)
{
  if (this[2].__r_.__value_.__s.__data_[0] == __str[2].__r_.__value_.__s.__data_[0])
  {
    if (this[2].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, __str);
      std::string::operator=(this + 1, __str + 1);
    }
  }
  else if (this[2].__r_.__value_.__s.__data_[0])
  {
    std::__optional_destruct_base<quasar::language_detector::Locale,false>::reset[abi:ne180100]((uint64_t)this);
  }
  else
  {
    std::__construct_at[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&,quasar::language_detector::Locale*>(this, (long long *)__str);
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__optional_destruct_base<quasar::language_detector::Locale,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double &,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = *a3;
  return this;
}

void sub_1B234F108(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = *a3;
  return this;
}

void sub_1B234F1B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = quasar::language_detector::Locale::operator<((unsigned __int8 *)(v3 + 32), a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || quasar::language_detector::Locale::operator<((unsigned __int8 *)a2, (unsigned __int8 **)(v5 + 32)))
  {
    return v2;
  }
  return v5;
}

std::string *std::pair<std::string const,quasar::language_detector::Locale>::pair[abi:ne180100]<std::string&,quasar::language_detector::Locale const&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = this + 2;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_1B234F300(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale&,double &,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = *a3;
  return this;
}

void sub_1B234F3C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  long long v5 = result;
  if (result[2])
  {
    long long v6 = *result;
    uint64_t v7 = result[1];
    *double result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      long long v8 = (uint64_t *)v6[1];
    }
    else {
      long long v8 = v6;
    }
    long long v14 = result;
    long long v15 = v8;
    long long v16 = v8;
    if (v8)
    {
      long long v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        std::string::size_type v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          v8[10] = *((void *)v9 + 10);
          std::__tree<quasar::language_detector::Locale>::__node_insert_multi(v5, (uint64_t)v16);
          long long v8 = v15;
          long long v16 = v15;
          if (v15) {
            long long v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (long long *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(long long **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              std::string::size_type v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          std::string::size_type v9 = a2;
        }
        while (a2 != a3);
      }
    }
    double result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      double result = (uint64_t **)std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_multi<std::pair<quasar::language_detector::Locale const,double> const&>((uint64_t)v5, a2 + 2);
      long long v12 = (long long *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          long long v13 = v12;
          long long v12 = *(long long **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (long long *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B234F548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_multi<std::pair<quasar::language_detector::Locale const,double> const&>(uint64_t a1, long long *a2)
{
  std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double> const&>(a1, a2, (uint64_t)v9);
  uint64_t v3 = v9[0];
  long long v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v5 = (uint64_t **)v4;
        if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)(v3 + 32), (unsigned __int8 **)v4 + 4))break; {
        uint64_t v4 = *v5;
        }
        long long v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    long long v6 = v5 + 1;
  }
  else
  {
    long long v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, (uint64_t *)v3);
  uint64_t v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v7;
}

uint64_t *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>(uint64_t **a1, unsigned __int8 *a2, long long *a3)
{
  long long v5 = (uint64_t **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v10, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    long long v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double>>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double result = std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B234F6F0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_1B234F78C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::language_detector::Locale>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::language_detector::Locale>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::language_detector::Locale>>>::__construct_node_hash<std::pair<std::string const,quasar::language_detector::Locale>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B234FA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::language_detector::Locale>>>::__construct_node_hash<std::pair<std::string const,quasar::language_detector::Locale>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  double result = std::pair<std::string const,quasar::language_detector::Locale>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B234FA8C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::language_detector::Locale>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v6 = a2[3];
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  return this;
}

uint64_t std::unordered_set<std::string_view>::unordered_set(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(a1, (uint64_t)a2, a2);
      ++a2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_1B234FB88(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      long long v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        unint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v9)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v18 >= v10) {
                v18 %= v10;
              }
            }
            else
            {
              v18 &= v10 - 1;
            }
            if (v18 != v3) {
              break;
            }
          }
          long long v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  long long v14 = operator new(0x20uLL);
  *(void *)long long v14 = 0;
  *((void *)v14 + 1) = v9;
  *((_OWORD *)v14 + 1) = *a3;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v25 = *(void *)a1;
  long long v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)long long v14 = *v26;
LABEL_40:
    *long long v26 = v14;
    goto LABEL_41;
  }
  *(void *)long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v3) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10) {
        v27 %= v10;
      }
    }
    else
    {
      v27 &= v10 - 1;
    }
    long long v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*v7;
  return v14;
}

void sub_1B234FDF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

void std::vector<quasar::language_detector::Locale>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>(std::vector<std::pair<std::string, std::string>> *this, uint64_t a2, uint64_t a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) < a4)
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(this);
    if (a4 > 0x555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](this, v11);
    unint64_t v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::string *,std::string *,quasar::language_detector::Locale*>((uint64_t)p_end_cap, a2, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 4) < a4)
  {
    uint64_t v13 = a2 + 8 * (((char *)this->__end_ - (char *)begin) >> 4);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,quasar::language_detector::Locale *>((uint64_t)&v17, a2, v13, (uint64_t)begin);
    unint64_t v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::string *,std::string *,quasar::language_detector::Locale*>((uint64_t)p_end_cap, v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,quasar::language_detector::Locale *>((uint64_t)&v18, a2, a3, (uint64_t)begin);
  unint64_t v15 = v14;
  std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
  if (end != v14)
  {
    do
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)p_end_cap, (uint64_t)--end);
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1B234FFA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B234FFAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_OWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::string *,std::string *,quasar::language_detector::Locale*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  char v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::language_detector::Locale::Locale(v4, v6);
      v6 += 24;
      char v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B2350044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,quasar::language_detector::Locale *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      quasar::language_detector::Locale::Locale(__p, v5);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(_OWORD *)a4 = *(_OWORD *)__p;
      *(void *)(a4 + 16) = v11;
      HIBYTE(v11) = 0;
      LOBYTE(__p[0]) = 0;
      uint64_t v7 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0)
      {
        operator delete(*v7);
        int v8 = SHIBYTE(v11);
        *(_OWORD *)uint64_t v7 = v12;
        *(void *)(a4 + 40) = v13;
        HIBYTE(v13) = 0;
        LOBYTE(v12) = 0;
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v7 = v12;
        *(void *)(a4 + 40) = v13;
      }
      v5 += 24;
      a4 += 48;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t **std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::find<std::string_view>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    long long v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::LDFrontend const,std::allocator<quasar::LDFrontend const>,std::string,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = (std::string *)operator new(0x30uLL);
  double result = std::__shared_ptr_emplace<quasar::LDFrontend const>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::LDFrontend const>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1B23502A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::LDFrontend const>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::LDFrontend const>,0>(std::string *a1, long long *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5DF18;
  unint64_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1B2350328(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDFrontend const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DF18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDFrontend const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DF18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LDFrontend const>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void *_ZNSt3__115allocate_sharedB8ne180100IN6quasar8LDConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xE0uLL);
  double result = _ZNSt3__120__shared_ptr_emplaceIN6quasar8LDConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2350400(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN6quasar8LDConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62438;
  std::allocator<quasar::LDConfig>::construct[abi:ne180100]<quasar::LDConfig>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_1B235046C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LDConfig>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::LDConfig>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void *std::allocator<quasar::LDConfig>::construct[abi:ne180100]<quasar::LDConfig>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_DWORD *)(a2 + 4) = -1;
  *(_OWORD *)(a2 + 122) = 0u;
  *(unsigned char *)(a2 + 138) = 1;
  *(void *)(a2 + 152) = 0x3FE6666666666666;
  double result = std::string::basic_string[abi:ne180100]<0>((void *)(a2 + 160), "4, 1, 2");
  *(_DWORD *)(a2 + 196) = -1;
  return result;
}

void sub_1B23505B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 135) < 0) {
    operator delete(*(void **)(v2 + 112));
  }
  if (*(char *)(v2 + 111) < 0) {
    operator delete(*(void **)(v2 + 88));
  }
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*(void **)(v2 + 64));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LDConfig>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 183) < 0) {
    operator delete(*(void **)(a2 + 160));
  }
  if (*(char *)(a2 + 135) < 0) {
    operator delete(*(void **)(a2 + 112));
  }
  if (*(char *)(a2 + 111) < 0) {
    operator delete(*(void **)(a2 + 88));
  }
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  char v3 = (void **)(a2 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

char *std::__tree<std::__value_type<quasar::language_detector::Locale,std::string>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,std::string>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,std::string>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale&&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (void **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v15, a2);
  uint8x8_t v7 = (char *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint8x8_t v7 = (char *)operator new(0x68uLL);
    v13[1] = a1 + 1;
    unint64_t v9 = *a4;
    long long v10 = **a4;
    *((void *)v7 + 6) = *((void *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)unint64_t v9 = 0;
    uint64_t v11 = *((void *)v9 + 5);
    *(_OWORD *)(v7 + 56) = *(long long *)((char *)v9 + 24);
    *((void *)v7 + 9) = v11;
    *((void *)v9 + 4) = 0;
    *((void *)v9 + 5) = 0;
    *((void *)v9 + 3) = 0;
    *((void *)v7 + 11) = 0;
    *((void *)v7 + 12) = 0;
    *((void *)v7 + 10) = 0;
    char v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v15, v8, (uint64_t *)v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

void std::__shared_ptr_emplace<quasar::ContextAwareLDModelConfig const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DF50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ContextAwareLDModelConfig const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5DF50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::ContextAwareLDModelConfig const>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::ContextAwareLDModelConfig const>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

__n128 std::allocator<quasar::ContextAwareLDModelConfig const>::construct[abi:ne180100]<quasar::ContextAwareLDModelConfig const,quasar::ContextAwareLDModelConfig>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *((void *)a3 + 6) = 0;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  long long v4 = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *(_OWORD *)(a2 + 72) = v4;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  *((void *)a3 + 9) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  long long v5 = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *(_OWORD *)(a2 + 120) = v5;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  *((void *)a3 + 15) = 0;
  *(unsigned char *)(a2 + 144) = *((unsigned char *)a3 + 144);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 152) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 152);
  *(__n128 *)(a2 + 152) = result;
  *(void *)(a2 + 168) = *((void *)a3 + 21);
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 20) = 0;
  *((void *)a3 + 21) = 0;
  return result;
}

void std::allocator<quasar::ContextAwareLDModelConfig const>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void **)(a2 + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 143) < 0) {
    operator delete(*(void **)(a2 + 120));
  }
  long long v3 = (void **)(a2 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  long long v3 = (void **)(a2 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = (void **)(a2 + 24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6quasar14LDRequestStateENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x170uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar14LDRequestStateENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1B23509B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN6quasar14LDRequestStateENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0A5FCA0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v2 = (quasar::LDRequestState *)(a1 + 24);
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  quasar::LDRequestState::LDRequestState(v2);
  return a1;
}

void sub_1B2350A64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDRequestState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FCA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDRequestState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FCA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::LDRequestState>::__on_zero_shared(uint64_t a1)
{
}

quasar::LDRequestState *quasar::LDRequestState::LDRequestState(quasar::LDRequestState *this)
{
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  quasar::PTree::PTree((quasar::LDRequestState *)((char *)this + 224));
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((unsigned char *)this + 328) = 1;
  kaldi::Timer::Reset((quasar::LDRequestState *)((char *)this + 304), v2);
  *((void *)this + 42) = 0;
  return this;
}

void sub_1B2350B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  size_t v13 = v11;
  quasar::LDLoggingInfo::~LDLoggingInfo(v13);
  uint64_t v15 = (std::__shared_weak_count *)v10[27];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  size_t v16 = (std::__shared_weak_count *)v10[25];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  a10 = v10 + 21;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = (void *)v12;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  char v17 = (std::__shared_weak_count *)v10[17];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  char v18 = (void *)v10[13];
  if (v18)
  {
    v10[14] = v18;
    operator delete(v18);
  }
  std::deque<std::vector<int>>::~deque[abi:ne180100](v10 + 7);
  float v19 = (std::__shared_weak_count *)v10[5];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  float v20 = (std::__shared_weak_count *)v10[3];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  BOOL v21 = (std::__shared_weak_count *)v10[1];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void quasar::LDRequestState::~LDRequestState(quasar::LDRequestState *this)
{
  clockid_t v2 = (quasar::LDRequestState *)((char *)this + 224);
  long long v3 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::PTree::~PTree(v2);
  long long v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v11 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v11);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint8x8_t v7 = (void *)*((void *)this + 13);
  if (v7)
  {
    *((void *)this + 14) = v7;
    operator delete(v7);
  }
  std::deque<std::vector<int>>::~deque[abi:ne180100]((void *)this + 7);
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::~__func()
{
}

void *std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5CAC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5CAC0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
}

uint64_t std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::target_type()
{
}

void *std::__function::__value_func<std::string ()(quasar::language_detector::Locale const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void tokenize_utf8_string(const std::string *__s@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (char *)__s;
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0) {
    unint64_t v6 = (char *)__s->__r_.__value_.__r.__words[0];
  }
  __sa = v6;
  size_t v7 = strlen(v6);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  unint64_t v8 = v6;
  if (std::string::compare((const std::string *)a2, ""))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    unint64_t v9 = *(void *)(a3 + 16);
    unint64_t v10 = *(void *)(a3 + 8);
    if (v10 >= v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)a3) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(void *)a3) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v15) {
        size_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v15);
      }
      else {
        size_t v16 = 0;
      }
      char v17 = v16 + v12;
      __v.__first_ = v16;
      __v.__begin_ = v17;
      __v.__end_cap_.__value_ = &v16[v15];
      long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v17->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v17 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
      uint64_t v19 = *(void *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      int v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a3 + 8) = v19;
      if (v20 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v10 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v10 = v11;
      *(void *)(a3 + 8) = v10 + 24;
    }
    unint64_t v8 = __sa;
  }
  BOOL v21 = &v6[v7 + 1];
  unint64_t v22 = (std::allocator<std::string> *)(a3 + 16);
  long long v61 = v6;
  do
  {
    if (!utf8::next<char *>(&__sa, v21)) {
      goto LABEL_73;
    }
    int v23 = strlen(v6);
    int v24 = v23 - strlen(v8);
    int v25 = v23 - v24 - strlen(__sa);
    std::string::size_type v26 = v24;
    if (!std::string::compare((const std::string *)a2, ""))
    {
      std::string::basic_string(&__p, __s, v24, v25, (std::allocator<char> *)&__v);
      unint64_t v30 = *(void *)(a3 + 8);
      unint64_t v29 = *(void *)(a3 + 16);
      if (v30 < v29) {
        goto LABEL_49;
      }
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(void *)a3) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *(void *)a3) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x555555555555555) {
        unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v34 = v32;
      }
      __v.__end_cap_.__value_ = v22;
      if (v34) {
        long long v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v22, v34);
      }
      else {
        long long v35 = 0;
      }
      long long v53 = v35 + v31;
      __v.__first_ = v35;
      __v.__begin_ = v53;
      __v.__end_cap_.__value_ = &v35[v34];
      long long v54 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v53->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v53 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
      uint64_t v55 = *(void *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      int v56 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a3 + 8) = v55;
      if (v56 < 0) {
        goto LABEL_71;
      }
    }
    else
    {
      std::string::basic_string((std::string *)&__v, __s, v24, v25, (std::allocator<char> *)&v65);
      if (*(char *)(a2 + 23) < 0)
      {
        uint64_t v28 = *(const void **)a2;
        size_t v27 = *(void *)(a2 + 8);
      }
      else
      {
        size_t v27 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v28 = (const void *)a2;
      }
      char end_high = HIBYTE(__v.__end_);
      std::__split_buffer<std::string>::pointer first = __v.__first_;
      if (SHIBYTE(__v.__end_) >= 0) {
        std::__split_buffer<std::string>::pointer begin = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
      }
      else {
        std::__split_buffer<std::string>::pointer begin = __v.__begin_;
      }
      if (SHIBYTE(__v.__end_) >= 0) {
        p_v = &__v;
      }
      else {
        p_v = __v.__first_;
      }
      if ((unint64_t)begin >= v27) {
        size_t v40 = v27;
      }
      else {
        size_t v40 = (size_t)begin;
      }
      BOOL v41 = memcmp(v28, p_v, v40) == 0;
      BOOL v42 = begin == (std::__split_buffer<std::string>::pointer)v27 && v41;
      if (end_high < 0) {
        operator delete(first);
      }
      unint64_t v22 = (std::allocator<std::string> *)(a3 + 16);
      if (v42)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        unint64_t v6 = v61;
        unint64_t v30 = *(void *)(a3 + 8);
        unint64_t v43 = *(void *)(a3 + 16);
        if (v30 < v43)
        {
LABEL_49:
          long long v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v30 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v30 = v44;
          *(void *)(a3 + 8) = v30 + 24;
          goto LABEL_73;
        }
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(void *)a3) >> 3);
        unint64_t v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *(void *)a3) >> 3);
        if (2 * v50 > v49) {
          unint64_t v49 = 2 * v50;
        }
        if (v50 >= 0x555555555555555) {
          unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v51 = v49;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v51) {
          long long v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v51);
        }
        else {
          long long v52 = 0;
        }
        long long v57 = v52 + v48;
        __v.__first_ = v52;
        __v.__begin_ = v57;
        __v.__end_cap_.__value_ = &v52[v51];
        long long v58 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v57->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v57 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v59 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        int v60 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 8) = v59;
        unint64_t v22 = (std::allocator<std::string> *)(a3 + 16);
        if (v60 < 0)
        {
LABEL_71:
          std::__split_buffer<std::string>::pointer v47 = (std::__split_buffer<std::string>::pointer)__p.__r_.__value_.__r.__words[0];
          goto LABEL_72;
        }
      }
      else
      {
        std::string::basic_string((std::string *)&__v, __s, v26, v25, (std::allocator<char> *)&v65);
        unint64_t v6 = v61;
        if (SHIBYTE(__v.__end_) >= 0) {
          long long v45 = (const std::string::value_type *)&__v;
        }
        else {
          long long v45 = (const std::string::value_type *)__v.__first_;
        }
        if (SHIBYTE(__v.__end_) >= 0) {
          std::string::size_type v46 = HIBYTE(__v.__end_);
        }
        else {
          std::string::size_type v46 = (std::string::size_type)__v.__begin_;
        }
        std::string::append((std::string *)(*(void *)(a3 + 8) - 24), v45, v46);
        if (SHIBYTE(__v.__end_) < 0)
        {
          std::__split_buffer<std::string>::pointer v47 = __v.__first_;
LABEL_72:
          operator delete(v47);
        }
      }
    }
LABEL_73:
    unint64_t v8 = __sa;
  }
  while (__sa < v21);
}

void sub_1B2351344(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, std::__split_buffer<std::wstring> *a10, void *__pa, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  if (a16 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t utf8::next<char *>(char **a1, char *a2)
{
  unsigned int v10 = 0;
  int v3 = utf8::internal::validate_next<char *>(a1, a2, &v10);
  if ((v3 - 2) < 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    char v6 = **a1;
    *(void *)exception = &unk_1F0A46790;
    exception[8] = v6;
    unint64_t v8 = utf8::invalid_utf8::~invalid_utf8;
    goto LABEL_8;
  }
  if (v3 == 5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    unsigned int v9 = v10;
    *(void *)exception = &unk_1F0A467E0;
    *((_DWORD *)exception + 2) = v9;
    unint64_t v8 = utf8::invalid_code_point::~invalid_code_point;
    goto LABEL_8;
  }
  if (v3 == 1)
  {
    exception = __cxa_allocate_exception(8uLL);
    *(void *)exception = &unk_1F0A467B8;
    unint64_t v8 = utf8::not_enough_room::~not_enough_room;
LABEL_8:
    __cxa_throw(exception, v7, (void (*)(void *))v8);
  }
  return v10;
}

void tokenize_entry(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t *a5@<X8>)
{
  if (a4) {
    *a4 = 0;
  }
  tokenize_utf8_string(a1, a2, (uint64_t)&v23);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v8 = v23;
  if (v24 != v23)
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    do
    {
      if ((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a3 + 96))(a3, v8 + 24 * v9) == -1)
      {
        if (a4) {
          *a4 = 1;
        }
        if (quasar::gLogLevel >= 6)
        {
          memset(v22, 0, sizeof(v22));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
          unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Symbol: '", 9);
          if (0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) <= v9) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v15 = v23 + 24 * v9;
          int v16 = *(char *)(v15 + 23);
          if (v16 >= 0) {
            uint64_t v17 = v23 + 24 * v9;
          }
          else {
            uint64_t v17 = *(void *)v15;
          }
          if (v16 >= 0) {
            uint64_t v18 = *(unsigned __int8 *)(v15 + 23);
          }
          else {
            uint64_t v18 = *(void *)(v15 + 8);
          }
          uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
          int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"' not found in input symbols table.", 35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" Mapping to null...", 19);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v22);
        }
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) <= v9) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        long long v11 = (long long *)(v23 + 24 * v9);
        unint64_t v12 = a5[1];
        if (v12 >= a5[2])
        {
          uint64_t v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a5, v11);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v11);
          uint64_t v13 = v12 + 24;
        }
        a5[1] = v13;
      }
      unint64_t v9 = v10;
      uint64_t v8 = v23;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) > v10++);
  }
  *(void *)&v22[0] = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
}

void sub_1B23516F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = v9 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t utf8::internal::validate_next<char *>(char **a1, char *a2, unsigned int *a3)
{
  long long v5 = *a1;
  unsigned int v13 = 0;
  unsigned int v6 = *v5;
  if (*v5 < 0)
  {
    if ((v6 & 0xE0) == 0xC0)
    {
      if (v5 == a2)
      {
        uint64_t result = 1;
        goto LABEL_39;
      }
      *a1 = v5 + 1;
      if (v5 + 1 == a2)
      {
        uint64_t result = 1;
      }
      else
      {
        char v10 = v5[1];
        if ((v10 & 0xC0) == 0x80)
        {
          int v11 = v10 & 0x3F | ((v6 & 0x1F) << 6);
          uint64_t v8 = 2;
          unsigned int v6 = v11;
          goto LABEL_4;
        }
        uint64_t result = 3;
      }
LABEL_38:
      a2 = v5;
      goto LABEL_39;
    }
    if ((v6 & 0xF0) == 0xE0)
    {
      uint64_t result = utf8::internal::get_sequence_3<std::__wrap_iter<char const*>>(a1, a2, (int *)&v13);
      uint64_t v8 = 3;
      if (result) {
        goto LABEL_38;
      }
    }
    else
    {
      if ((v6 & 0xF8) != 0xF0) {
        return 2;
      }
      uint64_t result = utf8::internal::get_sequence_4<std::__wrap_iter<char const*>>(a1, a2, (int *)&v13);
      uint64_t v8 = 4;
      if (result) {
        goto LABEL_38;
      }
    }
    unsigned int v6 = v13;
LABEL_4:
    if (HIWORD(v6) > 0x10u || (v6 & 0xFFFFF800) == 55296)
    {
      uint64_t result = 5;
    }
    else
    {
      if (v6 > 0x7F)
      {
        if (v6 > 0x7FF)
        {
          if (HIWORD(v6)) {
            BOOL v12 = 1;
          }
          else {
            BOOL v12 = v8 == 3;
          }
          if (v12) {
            goto LABEL_17;
          }
        }
        else if (v8 == 2)
        {
          goto LABEL_17;
        }
      }
      else if (v8 == 1)
      {
LABEL_17:
        if (a3) {
          *a3 = v6;
        }
        uint64_t result = 0;
        a2 = *a1 + 1;
        goto LABEL_39;
      }
      uint64_t result = 4;
    }
    goto LABEL_38;
  }
  uint64_t result = 1;
  if (v5 != a2)
  {
    uint64_t v8 = 1;
    goto LABEL_4;
  }
LABEL_39:
  *a1 = a2;
  return result;
}

void utf8::not_enough_room::~not_enough_room(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

const char *utf8::not_enough_room::what(utf8::not_enough_room *this)
{
  return "Not enough space";
}

void utf8::invalid_utf8::~invalid_utf8(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

const char *utf8::invalid_utf8::what(utf8::invalid_utf8 *this)
{
  return "Invalid UTF-8";
}

void utf8::invalid_code_point::~invalid_code_point(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

const char *utf8::invalid_code_point::what(utf8::invalid_code_point *this)
{
  return "Invalid code point";
}

uint64_t kaldi::hashstring2enum(uint64_t *a1, int *a2)
{
  int v2 = *((char *)a1 + 23);
  if (v2 < 0)
  {
    if (a1[1] != 3) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (v2 != 3)
  {
    return 0;
  }
  if (*(_WORD *)a1 == 30770 && *((unsigned char *)a1 + 2) == 50)
  {
    int v7 = 0;
  }
  else if (*(_WORD *)a1 == 30771 && *((unsigned char *)a1 + 2) == 50)
  {
    int v7 = 1;
  }
  else
  {
    if (*(_WORD *)a1 != 30771 || *((unsigned char *)a1 + 2) != 51) {
      return 0;
    }
    int v7 = 2;
  }
  *a2 = v7;
  return 1;
}

uint64_t kaldi::computeHash(uint64_t a1, void *a2, unsigned int a3, int a4, int a5)
{
  switch(a5)
  {
    case 2:
      kaldi::computeHash3(a1, a2, a3, a4);
      return 1;
    case 1:
      kaldi::computeHash2(a1, a2, a3, a4);
      return 1;
    case 0:
      kaldi::computeHash1(a1, a2, a3, a4);
      return 1;
  }
  return 0;
}

uint64_t kaldi::computeHash1(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  if (kaldi::MatrixBase<float>::NumRows(a1) >= 2)
  {
    unsigned int v8 = a4 - 1;
    int v9 = a4 - a3;
    unsigned int v10 = 1;
    do
    {
      if (v8 <= a3)
      {
        unint64_t v11 = 0;
        signed int v14 = v10 - 1;
      }
      else
      {
        unint64_t v11 = 0;
        int v12 = *(_DWORD *)(a1 + 16);
        uint64_t v13 = *(void *)a1 + 4 * (int)(v12 * v10);
        signed int v14 = v10 - 1;
        uint64_t v15 = *(void *)a1 + 4 * (int)(v12 * (v10 - 1));
        float v16 = *(float *)(v13 + 4 * (int)a3);
        float v17 = *(float *)(v15 + 4 * (int)a3);
        int v18 = 1;
        do
        {
          float v19 = v16;
          float v16 = *(float *)(v13 + 4 * (int)(a3 + v18));
          float v20 = (float)(v19 - v16) - v17;
          float v17 = *(float *)(v15 + 4 * (int)(a3 + v18));
          if ((float)(v20 + v17) > 0.0)
          {
            if ((v18 - 2) >= 0x20) {
              std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
            }
            v11 |= 1 << (v18 - 2);
          }
          ++v18;
        }
        while (v9 != v18);
      }
      *(float *)(*a2 + 4 * v14) = (float)v11;
      ++v10;
    }
    while (v10 < kaldi::MatrixBase<float>::NumRows(a1));
  }
  return 1;
}

uint64_t kaldi::computeHash2(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  if (kaldi::MatrixBase<float>::NumRows(a1) - 3 <= 0xFFFFFFFD)
  {
    unsigned int v8 = a4 - 1;
    int v9 = a4 - a3;
    int v10 = 1;
    do
    {
      if (v8 <= a3)
      {
        unint64_t v11 = 0;
        int v15 = v10 - 1;
        unsigned int v12 = v10 + 1;
      }
      else
      {
        unint64_t v11 = 0;
        unsigned int v12 = v10 + 1;
        int v13 = *(_DWORD *)(a1 + 16);
        uint64_t v14 = *(void *)a1 + 4 * v13 * (v10 + 1);
        int v15 = v10 - 1;
        uint64_t v16 = *(void *)a1 + 4 * v13 * (v10 - 1);
        float v17 = *(float *)(v14 + 4 * (int)a3);
        float v18 = *(float *)(v16 + 4 * (int)a3);
        int v19 = 1;
        do
        {
          float v20 = v17;
          float v17 = *(float *)(v14 + 4 * (int)(a3 + v19));
          float v21 = (float)(v20 - v17) - v18;
          float v18 = *(float *)(v16 + 4 * (int)(a3 + v19));
          if ((float)(v21 + v18) > 0.0)
          {
            if ((v19 - 2) >= 0x20) {
              std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
            }
            v11 |= 1 << (v19 - 2);
          }
          ++v19;
        }
        while (v9 != v19);
      }
      *(float *)(*a2 + 4 * v15) = (float)v11;
      int v22 = kaldi::MatrixBase<float>::NumRows(a1);
      int v10 = v12;
    }
    while (v12 < v22 - 1);
  }
  return 1;
}

uint64_t kaldi::computeHash3(uint64_t a1, void *a2, int a3, int a4)
{
  if (kaldi::MatrixBase<float>::NumRows(a1) - 3 <= 0xFFFFFFFD)
  {
    unsigned int v8 = a4 - 1;
    uint64_t v9 = a3 + 1;
    int v10 = a4 - a3 - 2;
    int v11 = 1;
    do
    {
      if (v9 >= v8)
      {
        unint64_t v13 = 0;
        int v18 = v11 - 1;
        unsigned int v16 = v11 + 1;
      }
      else
      {
        unsigned int v12 = 0;
        unint64_t v13 = 0;
        int v14 = *(_DWORD *)(a1 + 16);
        uint64_t v15 = *(void *)a1 + 4 * v14 * v11;
        unsigned int v16 = v11 + 1;
        uint64_t v17 = *(void *)a1 + 4 * v14 * (v11 + 1);
        int v18 = v11 - 1;
        uint64_t v19 = *(void *)a1 + 4 * v14 * (v11 - 1);
        float v20 = *(float *)(v15 + 4 * v9);
        float v21 = *(float *)(v17 + 4 * v9);
        float v22 = *(float *)(v19 + 4 * v9);
        do
        {
          float v23 = v21;
          float v24 = v22;
          double v25 = v20;
          int v26 = a3 + v12 + 2;
          float v21 = *(float *)(v17 + 4 * v26);
          float v22 = *(float *)(v19 + 4 * v26);
          float v20 = *(float *)(v15 + 4 * v26);
          float v27 = v25
              + (float)((float)((float)((float)((float)((float)((float)(v21 + v23)
                                                              + *(float *)(v17 + 4 * (int)(a3 + v12)))
                                                      + v22)
                                              + v24)
                                      + *(float *)(v19 + 4 * (int)(a3 + v12)))
                              + v20)
                      + *(float *)(v15 + 4 * (int)(a3 + v12)))
              * -0.125;
          if (v27 > 0.0)
          {
            if (v12 >= 0x20) {
              std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
            }
            v13 |= 1 << v12;
          }
          ++v12;
        }
        while (v10 != v12);
      }
      *(float *)(*a2 + 4 * v18) = (float)v13;
      int v28 = kaldi::MatrixBase<float>::NumRows(a1);
      int v11 = v16;
    }
    while (v16 < v28 - 1);
  }
  return 1;
}

float kaldi::computeHashSimilarity(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  if ((int)v6 >= (int)v7) {
    unsigned int v8 = *(_DWORD *)(a2 + 8);
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 8);
  }
  float v9 = 10.0;
  if (a3 - 1 < v8)
  {
    if (v8 >= a4) {
      unsigned int v11 = a4;
    }
    else {
      unsigned int v11 = v8;
    }
    kaldi::Matrix<float>::Matrix((uint64_t)v37, v6, v7, 0, 0);
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    uint64_t v14 = *(unsigned int *)(a2 + 8);
    if ((int)v13 >= 1)
    {
      uint64_t v15 = 0;
      unsigned int v16 = *(float **)a1;
      uint64_t v17 = *(float **)a2;
      int v18 = (float *)v37[0];
      uint64_t v19 = 4 * v38;
      do
      {
        v12.i32[0] = v16[v15] ^ ~*v17;
        int8x8_t v12 = vcnt_s8(v12);
        v12.i16[0] = vaddlv_u8((uint8x8_t)v12);
        float *v18 = (float)v12.i32[0];
        ++v15;
        int v18 = (float *)((char *)v18 + v19);
      }
      while (v13 != v15);
    }
    if ((int)v14 >= 1)
    {
      uint64_t v20 = 0;
      float v21 = *(float **)a1;
      float v22 = *(float **)a2;
      uint64_t v23 = v37[0];
      do
      {
        v12.i32[0] = *v21 ^ ~v22[v20];
        int8x8_t v12 = vcnt_s8(v12);
        v12.i16[0] = vaddlv_u8((uint8x8_t)v12);
        *(float *)(v23 + 4 * v20++) = (float)v12.i32[0];
      }
      while (v14 != v20);
    }
    if ((int)v13 > 1)
    {
      uint64_t v24 = v37[0];
      double v25 = *(float **)a1;
      uint64_t v26 = 4 * v38;
      uint64_t v27 = *(void *)a2 + 4;
      for (uint64_t i = 1; i != v13; ++i)
      {
        if ((int)v14 >= 2)
        {
          uint64_t v29 = 0;
          do
          {
            v12.i32[0] = v25[i] ^ ~*(float *)(v27 + 4 * v29);
            int8x8_t v12 = vcnt_s8(v12);
            v12.i16[0] = vaddlv_u8((uint8x8_t)v12);
            *(float *)(v24 + v26 + 4 * v29 + 4) = *(float *)(v24 + 4 * v29) + (float)v12.i32[0];
            ++v29;
          }
          while (v14 - 1 != v29);
        }
        v24 += v26;
      }
    }
    int v30 = v11 - 1;
    float v31 = 10.0;
    if ((int)(v11 - 1) < (int)v13)
    {
      unsigned int v32 = v11 - 1;
      uint64_t v33 = 4 * v38;
      uint64_t v34 = v37[0] + (v33 + 4) * v30;
      do
      {
        if (v30 < (int)v14)
        {
          uint64_t v35 = 0;
          do
          {
            float v31 = fmaxf(v31, *(float *)(v34 + 4 * v35)- *(float *)(v37[0] + 4 * (int)(v38 + v38 * (v32 - v11)) + 4 * (int)v35));
            ++v35;
          }
          while (v30 - v14 + v35);
        }
        ++v32;
        v34 += v33;
      }
      while (v13 != v32);
    }
    float v9 = v31 / (double)v11;
    kaldi::Matrix<float>::~Matrix((uint64_t)v37);
  }
  return v9;
}

void quasar::printSymTableToTraceLog(quasar *this, const quasar::QsrTextSymbolTable *a2)
{
  if (quasar::gLogLevel >= 6)
  {
    unint64_t v3 = quasar::QsrTextSymbolTable::NumSymbols(this);
    quasar::QsrTextSymbolTable::GetNthKey(this);
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        if (quasar::gLogLevel >= 6)
        {
          memset(v10, 0, sizeof(v10));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
          quasar::QsrTextSymbolTable::Find(this, __p);
          if ((v9 & 0x80u) == 0) {
            long long v5 = __p;
          }
          else {
            long long v5 = (void **)__p[0];
          }
          if ((v9 & 0x80u) == 0) {
            uint64_t v6 = v9;
          }
          else {
            uint64_t v6 = (uint64_t)__p[1];
          }
          uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" : ", 3);
          std::ostream::operator<<();
          if ((char)v9 < 0) {
            operator delete(__p[0]);
          }
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v10);
        }
        if (++v4 < v3) {
          quasar::QsrTextSymbolTable::GetNthKey(this);
        }
      }
      while (v3 != v4);
    }
  }
}

void sub_1B23521CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *quasar::lmeDataStatusString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 6) {
    int v2 = "Unknown";
  }
  else {
    int v2 = off_1E6000210[a1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void *quasar::lmeUsageStatusString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 2) {
    int v2 = "Unknown";
  }
  else {
    int v2 = off_1E6000248[a1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void quasar::formatResultTokens(const quasar::Token **a1, unsigned char *a2)
{
  v97[2] = *MEMORY[0x1E4F143B8];
  memset(v96, 0, sizeof(v96));
  uint64_t v93 = 0;
  long long v94 = 0;
  unint64_t v95 = 0;
  int v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    std::__split_buffer<std::string>::pointer v47 = (uint64_t *)(a2 + 8);
    do
    {
      quasar::Token::Token(&v78, v2);
      if (*a2) {
        quasar::resetWhiteSpace(&v78, v47);
      }
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v78.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v68, size + 3);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v6 = &v68;
      }
      else {
        uint64_t v6 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v7 = &v78;
        }
        else {
          uint64_t v7 = (std::string *)v78.__r_.__value_.__r.__words[0];
        }
        memmove(v6, v7, size);
      }
      *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + size) = 2112032;
      std::to_string(&v67, __val);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v8 = &v67;
      }
      else {
        unsigned int v8 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v9 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v9 = v67.__r_.__value_.__l.__size_;
      }
      int v10 = std::string::append(&v68, (const std::string::value_type *)v8, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      int8x8_t v12 = std::string::append(&v69, " : ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v66, v80);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v14 = &v66;
      }
      else {
        uint64_t v14 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = v66.__r_.__value_.__l.__size_;
      }
      unsigned int v16 = std::string::append(&v70, (const std::string::value_type *)v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      int v18 = std::string::append(&v71, ", phoneSeq: ");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if ((v84 & 0x80u) == 0) {
        uint64_t v20 = v83;
      }
      else {
        uint64_t v20 = (void **)v83[0];
      }
      if ((v84 & 0x80u) == 0) {
        std::string::size_type v21 = v84;
      }
      else {
        std::string::size_type v21 = (std::string::size_type)v83[1];
      }
      float v22 = std::string::append(&v72, (const std::string::value_type *)v20, v21);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      uint64_t v24 = std::string::append(&v73, ", startSil: ");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v65, v81);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v26 = &v65;
      }
      else {
        uint64_t v26 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = v65.__r_.__value_.__l.__size_;
      }
      int v28 = std::string::append(&v74, (const std::string::value_type *)v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      int v30 = std::string::append(&v75, ", confidence: ");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v64, v82);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v32 = &v64;
      }
      else {
        unsigned int v32 = (std::string *)v64.__r_.__value_.__r.__words[0];
      }
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v64.__r_.__value_.__l.__size_;
      }
      uint64_t v34 = std::string::append(&v76, (const std::string::value_type *)v32, v33);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      long long v36 = std::string::append(&v77, ", ipaPhoneSeq: ");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(void *)&v48[16] = *((void *)&v36->__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v48 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if ((v87 & 0x80u) == 0) {
        int v38 = v86;
      }
      else {
        int v38 = (void **)v86[0];
      }
      if ((v87 & 0x80u) == 0) {
        std::string::size_type v39 = v87;
      }
      else {
        std::string::size_type v39 = (std::string::size_type)v86[1];
      }
      size_t v40 = std::string::append((std::string *)v48, (const std::string::value_type *)v38, v39);
      std::string::size_type v41 = v40->__r_.__value_.__r.__words[0];
      v97[0] = v40->__r_.__value_.__l.__size_;
      *(void *)((char *)v97 + 7) = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
      char v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if ((v96[23] & 0x80000000) != 0) {
        operator delete(*(void **)v96);
      }
      *(void *)long long v96 = v41;
      *(void *)&v96[8] = v97[0];
      *(void *)&v96[15] = *(void *)((char *)v97 + 7);
      v96[23] = v42;
      if ((v48[23] & 0x80000000) != 0) {
        operator delete(*(void **)v48);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      std::string::size_type v43 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v43 = v78.__r_.__value_.__l.__size_;
      }
      if (v43)
      {
        long long v44 = v94;
        if ((unint64_t)v94 >= v95)
        {
          std::string::size_type v46 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v93, (long long *)v96);
        }
        else
        {
          if ((v96[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)v96, *(std::string::size_type *)&v96[8]);
          }
          else
          {
            long long v45 = *(_OWORD *)v96;
            v94->__r_.__value_.__r.__words[2] = *(void *)&v96[16];
            *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
          }
          std::string::size_type v46 = v44 + 1;
        }
        long long v94 = v46;
      }
      else if (quasar::gLogLevel >= 5)
      {
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        memset(v48, 0, sizeof(v48));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Empty tokenName", 15);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v48);
      }
      if (v92 < 0) {
        operator delete(__p);
      }
      if (v90 < 0) {
        operator delete(v89);
      }
      *(void *)unint64_t v48 = &v88;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
      if ((char)v87 < 0) {
        operator delete(v86[0]);
      }
      *(void *)unint64_t v48 = &v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
      if ((char)v84 < 0) {
        operator delete(v83[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      int v2 = (const quasar::Token *)((char *)v2 + 224);
    }
    while (v2 != v3);
  }
  *(void *)unint64_t v48 = " ";
  *(void *)&v48[8] = 1;
  quasar::join<std::vector<std::string>>(&v93, (uint64_t *)v48);
  *(void *)unint64_t v48 = &v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  if ((v96[23] & 0x80000000) != 0) {
    operator delete(*(void **)v96);
  }
}

void sub_1B2352890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  std::string __p = (void *)(v13 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v13 - 121) < 0) {
    operator delete(*(void **)(v13 - 144));
  }
  _Unwind_Resume(a1);
}

void quasar::resetWhiteSpace(std::string *a1, uint64_t *a2)
{
  if (quasar::startsWith((unsigned __int8 *)a1, (unsigned __int8 *)a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::replaceFirst((uint64_t)a1, a2, (uint64_t)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    char v4 = 1;
  }
  else
  {
    char v4 = 0;
  }
  a1[1].__r_.__value_.__s.__data_[21] = v4;
  if (quasar::endsWith((uint64_t *)a1, a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::replaceLast(a1, a2, (uint64_t)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
  }
  a1[1].__r_.__value_.__s.__data_[20] = v5;
}

void sub_1B2352B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::formatTokensEndTime(uint64_t *a1)
{
  long long v26 = 0uLL;
  std::string::size_type v27 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  for (uint64_t i = *a1; i != a1[1]; i += 224)
  {
    std::to_string((std::string *)&v6, *(_DWORD *)(i + 36));
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
    long long v26 = v6;
    std::string::size_type v27 = v7;
    if (*(char *)(i + 23) < 0)
    {
      if (!*(void *)(i + 8))
      {
LABEL_10:
        if (quasar::gLogLevel >= 5)
        {
          long long v21 = 0u;
          long long v22 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          long long v17 = 0u;
          long long v18 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          long long v13 = 0u;
          long long v14 = 0u;
          long long v11 = 0u;
          long long v12 = 0u;
          long long v9 = 0u;
          long long v10 = 0u;
          long long v7 = 0u;
          long long v8 = 0u;
          long long v6 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Empty tokenName", 15);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v6);
        }
        continue;
      }
    }
    else if (!*(unsigned char *)(i + 23))
    {
      goto LABEL_10;
    }
    unint64_t v3 = v24;
    if ((unint64_t)v24 >= v25)
    {
      char v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v23, &v26);
    }
    else
    {
      if (SHIBYTE(v27) < 0)
      {
        std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)v26, *((std::string::size_type *)&v26 + 1));
      }
      else
      {
        long long v4 = v26;
        v24->__r_.__value_.__r.__words[2] = v27;
        *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
      }
      char v5 = v3 + 1;
    }
    uint64_t v24 = v5;
  }
  *(void *)&long long v6 = " ";
  *((void *)&v6 + 1) = 1;
  quasar::join<std::vector<std::string>>(&v23, (uint64_t *)&v6);
  *(void *)&long long v6 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
}

void sub_1B2352CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  a9 = (void **)(v9 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 - 73) < 0) {
    operator delete(*(void **)(v9 - 96));
  }
  _Unwind_Resume(a1);
}

void quasar::formatResultTokensSimple(std::string *a1, char a2)
{
  long long v12 = 0;
  long long v13 = 0;
  unint64_t v14 = 0;
  std::string::size_type v3 = a1->__r_.__value_.__r.__words[0];
  if (a1->__r_.__value_.__r.__words[0] != a1->__r_.__value_.__l.__size_)
  {
    long long v4 = a1;
    char v5 = 0;
    do
    {
      if ((unint64_t)v5 >= v14)
      {
        a1 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v12, (long long *)v3);
        char v5 = a1;
      }
      else
      {
        if (*(char *)(v3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
        }
        else
        {
          long long v6 = *(_OWORD *)v3;
          v5->__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
        }
        ++v5;
      }
      long long v13 = v5;
      v3 += 224;
    }
    while (v3 != v4->__r_.__value_.__l.__size_);
  }
  if (a2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    int v7 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    quasar::QsrText::removeW00(v7, &v12, (uint64_t *)&v9);
    v8[0] = (void **)" ";
    v8[1] = (void **)1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v9, (uint64_t *)v8);
    v8[0] = (void **)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  }
  else
  {
    uint64_t v9 = (void **)" ";
    uint64_t v10 = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v12, (uint64_t *)&v9);
  }
  uint64_t v9 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1B2352E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void quasar::wordPieceSequenceToWords(std::string *__str@<X0>, int a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  if ((char)a3[23] < 0)
  {
    std::string::size_type v6 = *((void *)a3 + 1);
    if (v6) {
      goto LABEL_3;
    }
LABEL_95:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v67, "whiteSpaceCharacter.size() > 0 && \"Illegal white space character\"");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v67);
  }
  std::string::size_type v6 = a3[23];
  if (!a3[23]) {
    goto LABEL_95;
  }
LABEL_3:
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_90;
  }
  std::string::size_type v8 = 0;
  std::string::size_type v9 = 0;
  char v10 = 0;
  long long v62 = (unint64_t *)(a4 + 16);
  do
  {
    while (1)
    {
      std::string::basic_string((std::string *)v67, __str, v8, v6, (std::allocator<char> *)&v66);
      if (SHIBYTE(v67[0].__end_) >= 0) {
        std::__split_buffer<std::wstring>::pointer end_high = (std::__split_buffer<std::wstring>::pointer)HIBYTE(v67[0].__end_);
      }
      else {
        std::__split_buffer<std::wstring>::pointer end_high = v67[0].__begin_;
      }
      std::__split_buffer<std::wstring>::pointer v12 = (std::__split_buffer<std::wstring>::pointer)a3[23];
      int v13 = (char)v12;
      if ((char)v12 < 0) {
        std::__split_buffer<std::wstring>::pointer v12 = (std::__split_buffer<std::wstring>::pointer)*((void *)a3 + 1);
      }
      if (end_high != v12)
      {
        if ((HIBYTE(v67[0].__end_) & 0x80) != 0) {
          operator delete(v67[0].__first_);
        }
        goto LABEL_29;
      }
      unint64_t v14 = v13 >= 0 ? a3 : *(unsigned __int8 **)a3;
      if ((HIBYTE(v67[0].__end_) & 0x80) == 0) {
        break;
      }
      std::__split_buffer<std::wstring>::pointer first = v67[0].__first_;
      int v20 = memcmp(v67[0].__first_, v14, (size_t)v67[0].__begin_);
      operator delete(first);
      if (!v20) {
        goto LABEL_66;
      }
LABEL_29:
      std::string::size_type v21 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) != 0) {
        std::string::size_type v21 = __str->__r_.__value_.__l.__size_;
      }
      std::string::size_type v22 = v9;
      if (v21 > (int)v9)
      {
        std::string::size_type v22 = (int)v9;
        do
        {
          std::string::basic_string((std::string *)v67, __str, v22, v6, (std::allocator<char> *)&v66);
          if (SHIBYTE(v67[0].__end_) >= 0) {
            std::__split_buffer<std::wstring>::pointer begin = (std::__split_buffer<std::wstring>::pointer)HIBYTE(v67[0].__end_);
          }
          else {
            std::__split_buffer<std::wstring>::pointer begin = v67[0].__begin_;
          }
          std::__split_buffer<std::wstring>::pointer v24 = (std::__split_buffer<std::wstring>::pointer)a3[23];
          int v25 = (char)v24;
          if ((char)v24 < 0) {
            std::__split_buffer<std::wstring>::pointer v24 = (std::__split_buffer<std::wstring>::pointer)*((void *)a3 + 1);
          }
          if (begin == v24)
          {
            if (v25 >= 0) {
              long long v26 = a3;
            }
            else {
              long long v26 = *(unsigned __int8 **)a3;
            }
            if ((HIBYTE(v67[0].__end_) & 0x80) != 0)
            {
              std::__split_buffer<std::wstring>::pointer v34 = v67[0].__first_;
              int v35 = memcmp(v67[0].__first_, v26, (size_t)v67[0].__begin_);
              operator delete(v34);
              if (!v35) {
                break;
              }
              goto LABEL_57;
            }
            if (!HIBYTE(v67[0].__end_)) {
              break;
            }
            uint64_t v27 = HIBYTE(v67[0].__end_) - 1;
            int v28 = v67;
            do
            {
              int first_low = LOBYTE(v28->__first_);
              int v28 = (std::__split_buffer<std::wstring> *)((char *)v28 + 1);
              int v29 = first_low;
              int v31 = *v26++;
              BOOL v32 = v29 != v31;
            }
            while (v29 == v31 && v27-- != 0);
            if ((HIBYTE(v67[0].__end_) & 0x80) != 0)
            {
LABEL_54:
              operator delete(v67[0].__first_);
              if (!v32) {
                break;
              }
              goto LABEL_57;
            }
          }
          else
          {
            BOOL v32 = 1;
            if ((HIBYTE(v67[0].__end_) & 0x80) != 0) {
              goto LABEL_54;
            }
          }
          if (!v32) {
            break;
          }
LABEL_57:
          ++v22;
          std::string::size_type v36 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          if ((v36 & 0x80u) != 0) {
            std::string::size_type v36 = __str->__r_.__value_.__l.__size_;
          }
        }
        while (v36 > v22);
      }
      std::string::basic_string(&v66, __str, v8, (int)v22 - (int)v9, (std::allocator<char> *)v67);
      if (v10)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)&v66.__r_.__value_.__l.__data_, (uint64_t)__p);
        unint64_t v38 = *(void *)(a4 + 8);
        unint64_t v37 = *(void *)(a4 + 16);
        if (v38 >= v37)
        {
          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *(void *)a4) >> 3);
          unint64_t v45 = v44 + 1;
          if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *(void *)a4) >> 3);
          if (2 * v46 > v45) {
            unint64_t v45 = 2 * v46;
          }
          if (v46 >= 0x555555555555555) {
            unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v47 = v45;
          }
          v67[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)(a4 + 16);
          if (v47) {
            unint64_t v48 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v62, v47);
          }
          else {
            unint64_t v48 = 0;
          }
          long long v49 = v48 + v44;
          v67[0].__first_ = v48;
          v67[0].__begin_ = v49;
          v67[0].__end_cap_.__value_ = &v48[v47];
          long long v50 = *(_OWORD *)__p;
          v49->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
          __p[1] = 0;
          std::wstring::size_type v65 = 0;
          __p[0] = 0;
          v67[0].__end_ = v49 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, (std::__split_buffer<std::string> *)v67);
          uint64_t v51 = *(void *)(a4 + 8);
          std::__split_buffer<std::string>::~__split_buffer(v67);
          int v52 = SHIBYTE(v65);
          *(void *)(a4 + 8) = v51;
          if (v52 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v39 = *(_OWORD *)__p;
          *(void *)(v38 + 16) = v65;
          *(_OWORD *)unint64_t v38 = v39;
          *(void *)(a4 + 8) = v38 + 24;
        }
      }
      else
      {
        unint64_t v40 = *(void *)(a4 + 8);
        if (v40 >= *(void *)(a4 + 16))
        {
          uint64_t v43 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (long long *)&v66);
        }
        else
        {
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a4 + 8), v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v41 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
            *(void *)(v40 + 16) = *((void *)&v66.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v40 = v41;
          }
          uint64_t v43 = v40 + 24;
          *(void *)(a4 + 8) = v40 + 24;
        }
        *(void *)(a4 + 8) = v43;
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      char v10 = 0;
      std::string::size_type v8 = (int)v22;
      std::string::size_type v53 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v53 & 0x80u) != 0) {
        std::string::size_type v53 = __str->__r_.__value_.__l.__size_;
      }
      std::string::size_type v9 = v22;
      if (v53 <= (int)v22) {
        goto LABEL_90;
      }
    }
    if (HIBYTE(v67[0].__end_))
    {
      uint64_t v15 = 0;
      do
      {
        int v16 = *((unsigned __int8 *)&v67[0].__first_ + v15);
        int v17 = v14[v15];
      }
      while (v16 == v17 && HIBYTE(v67[0].__end_) - 1 != v15++);
      if (v16 != v17) {
        goto LABEL_29;
      }
    }
LABEL_66:
    std::string::size_type v9 = (v9 + v6);
    std::string::size_type v8 = (int)v9;
    std::string::size_type v42 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) != 0) {
      std::string::size_type v42 = __str->__r_.__value_.__l.__size_;
    }
    char v10 = 1;
  }
  while (v42 > (int)v9);
  unint64_t v56 = *(void *)a4;
  uint64_t v55 = *(void *)(a4 + 8);
  if (*(void *)a4 != v55)
  {
    int v57 = (char)a3[23];
    if (v57 >= 0) {
      long long v58 = (const std::string::value_type *)a3;
    }
    else {
      long long v58 = *(const std::string::value_type **)a3;
    }
    if (v57 >= 0) {
      std::string::size_type v59 = a3[23];
    }
    else {
      std::string::size_type v59 = *((void *)a3 + 1);
    }
    std::string::append((std::string *)(v55 - 24), v58, v59);
LABEL_90:
    if (a2)
    {
      uint64_t v54 = *(void *)a4;
      if (*(void *)a4 != *(void *)(a4 + 8))
      {
        std::string::basic_string[abi:ne180100]<0>(v67, "");
        quasar::replaceFirst(v54, (uint64_t *)a3, (uint64_t)v67);
        if (SHIBYTE(v67[0].__end_) < 0) {
          operator delete(v67[0].__first_);
        }
      }
    }
    return;
  }
  if ((a2 & 1) == 0)
  {
    if (v56 >= *v62)
    {
      uint64_t v60 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (long long *)a3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, (long long *)a3);
      uint64_t v60 = v56 + 24;
    }
    *(void *)(a4 + 8) = v60;
  }
}

void sub_1B23533E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void quasar::getTopChoice(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  std::string::size_type v3 = *(const quasar::Token ***)a1;
  if (*(void *)(a1 + 8) == *(void *)a1)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (a2)
  {
    long long v4 = *(std::string **)a1;
    quasar::formatResultTokensSimple(v4, 0);
  }
  else
  {
    v5[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "▁");
    quasar::formatResultTokens(v3, v5);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1B2353554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::getTopChoice(long long ***a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::string::size_type v3 = *a1;
  if (*a1 != a1[1])
  {
    long long v4 = *v3;
    char v5 = v3[1];
    if (*v3 != v5)
    {
      unint64_t v6 = 0;
      do
      {
        if (v6 >= a2[2])
        {
          unint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v4);
          v6 += 24;
        }
        a2[1] = v6;
        v4 += 14;
      }
      while (v4 != v5);
    }
  }
}

void sub_1B2353604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::getTokensEndTime(uint64_t **a1@<X0>, void *a2@<X8>)
{
  int v2 = *a1;
  if (a1[1] == v2) {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else {
    quasar::formatTokensEndTime(v2);
  }
}

uint64_t quasar::tokensWithTimes(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      if (v4) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
      }
      int v5 = *(char *)(v2 + v3 + 23);
      if (v5 >= 0) {
        uint64_t v6 = v2 + v3;
      }
      else {
        uint64_t v6 = *(void *)(v2 + v3);
      }
      if (v5 >= 0) {
        uint64_t v7 = *(unsigned __int8 *)(v2 + v3 + 23);
      }
      else {
        uint64_t v7 = *(void *)(v2 + v3 + 8);
      }
      std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[", 1);
      std::string::size_type v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
      char v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"]", 1);
      ++v4;
      uint64_t v2 = *a1;
      v3 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5) > v4);
  }
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v15);
}

void sub_1B2353864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *quasar::topChoiceWithTimes@<X0>(uint64_t **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3 == a1[1]) {
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else {
    return (void *)quasar::tokensWithTimes(v3);
  }
}

void quasar::splitStringToTokens(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  quasar::split(a1, (uint64_t *)__p, 1, (unint64_t)&v3);
}

void sub_1B23539C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::tokens2Str(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      std::operator+<char>();
      if (*(unsigned char *)(v2 + 44)) {
        int v5 = " ";
      }
      else {
        int v5 = "";
      }
      uint64_t v6 = std::string::append(&v10, v5);
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      int64_t v12 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (v12 >= 0) {
        std::string::size_type v8 = __p;
      }
      else {
        std::string::size_type v8 = (void **)__p[0];
      }
      if (v12 >= 0) {
        std::string::size_type v9 = HIBYTE(v12);
      }
      else {
        std::string::size_type v9 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v8, v9);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      v2 += 224;
    }
    while (v2 != v3);
  }
}

void sub_1B2353AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void quasar::tokens2Str(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    do
    {
      std::operator+<char>();
      if (*(unsigned char *)(v4 + 44)) {
        uint64_t v6 = " ";
      }
      else {
        uint64_t v6 = "";
      }
      long long v7 = std::string::append(&v11, v6);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      int64_t v13 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (v13 >= 0) {
        std::string::size_type v9 = __p;
      }
      else {
        std::string::size_type v9 = (void **)__p[0];
      }
      if (v13 >= 0) {
        std::string::size_type v10 = HIBYTE(v13);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(a3, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      v4 += 224;
    }
    while (v4 != a2);
  }
}

void sub_1B2353C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void quasar::topChoice2Str(uint64_t **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3 == a1[1]) {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else {
    quasar::tokens2Str(v3, a2);
  }
}

uint64_t quasar::isTokenSpanPrefixOf(uint64_t *a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v4 = *a2;
  *a4 = -1;
  if (a2[1] == v4)
  {
    int v40 = 0;
    uint64_t result = 1;
    goto LABEL_64;
  }
  uint64_t v6 = *a1;
  if (a1[1] == *a1) {
    return 0;
  }
  long long v41 = a4;
  while (1)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      *(_OWORD *)__s1 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"OriginalToken: ", 15);
      int v10 = *(char *)(v6 + 23);
      if (v10 >= 0) {
        uint64_t v11 = v6;
      }
      else {
        uint64_t v11 = *(void *)v6;
      }
      if (v10 >= 0) {
        uint64_t v12 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        uint64_t v12 = *(void *)(v6 + 8);
      }
      int64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"CandidateToken: ", 16);
      int v15 = *(char *)(v4 + 23);
      if (v15 >= 0) {
        uint64_t v16 = v4;
      }
      else {
        uint64_t v16 = *(void *)v4;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v17 = *(void *)(v4 + 8);
      }
      long long v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
      long long v19 = std::locale::use_facet(&v42, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v42);
      std::ostream::put();
      std::ostream::flush();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__s1);
    }
    quasar::toLower(v6, (uint64_t)__s1);
    quasar::toLower(v4, (uint64_t)&v42);
    char v20 = BYTE7(v46);
    if ((SBYTE7(v46) & 0x80u) == 0) {
      uint64_t v21 = (void *)BYTE7(v46);
    }
    else {
      uint64_t v21 = __s1[1];
    }
    unint64_t v22 = v44;
    int v23 = (char)v44;
    if ((v44 & 0x80u) != 0) {
      unint64_t v22 = v43;
    }
    if (v21 != (void *)v22)
    {
      BOOL v33 = 0;
      if ((char)v44 < 0) {
        goto LABEL_45;
      }
      goto LABEL_40;
    }
    if ((v44 & 0x80u) == 0) {
      locale = (unsigned __int8 *)&v42;
    }
    else {
      locale = (unsigned __int8 *)v42.__locale_;
    }
    if (SBYTE7(v46) < 0)
    {
      BOOL v33 = memcmp(__s1[0], locale, (size_t)__s1[1]) == 0;
      goto LABEL_39;
    }
    if (!BYTE7(v46)) {
      break;
    }
    uint64_t v25 = BYTE7(v46) - 1;
    long long v26 = __s1;
    do
    {
      int v28 = *(unsigned __int8 *)v26;
      long long v26 = (void **)((char *)v26 + 1);
      int v27 = v28;
      int v30 = *locale++;
      int v29 = v30;
      BOOL v32 = v25-- != 0;
      BOOL v33 = v27 == v29;
    }
    while (v27 == v29 && v32);
LABEL_39:
    if (v23 < 0) {
      goto LABEL_45;
    }
LABEL_40:
    if (v20 < 0) {
      goto LABEL_46;
    }
LABEL_41:
    if (v33) {
      goto LABEL_42;
    }
LABEL_47:
    if (!a3) {
      goto LABEL_61;
    }
    int v34 = *(char *)(v6 + 23);
    if (v34 < 0)
    {
      if (*(void *)(v6 + 8) != 3) {
        goto LABEL_61;
      }
      int v35 = *(unsigned __int16 **)v6;
    }
    else
    {
      int v35 = (unsigned __int16 *)v6;
      if (v34 != 3) {
        goto LABEL_61;
      }
    }
    int v36 = *v35;
    int v37 = *((unsigned __int8 *)v35 + 2);
    if (v36 != 16188 || v37 != 62)
    {
LABEL_61:
      uint64_t result = 0;
LABEL_62:
      int v40 = -1;
      goto LABEL_63;
    }
LABEL_58:
    v6 += 224;
    if (v6 == a1[1]) {
      return 0;
    }
  }
  BOOL v33 = 1;
  if (((char)v44 & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_45:
  operator delete(v42.__locale_);
  if ((BYTE7(v46) & 0x80) == 0) {
    goto LABEL_41;
  }
LABEL_46:
  operator delete(__s1[0]);
  if (!v33) {
    goto LABEL_47;
  }
LABEL_42:
  v4 += 224;
  if (v4 != a2[1]) {
    goto LABEL_58;
  }
  if (v6 + 224 == a1[1])
  {
    uint64_t result = 1;
    goto LABEL_62;
  }
  int v40 = -1227133513 * ((unint64_t)(v6 - *a1) >> 5) + 1;
  uint64_t result = 1;
LABEL_63:
  a4 = v41;
LABEL_64:
  *a4 = v40;
  return result;
}

void sub_1B2353FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::concatNbest(uint64_t *a1, uint64_t a2, void *a3, uint64_t *a4, unsigned int a5, unsigned int a6, __n128 a7)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3
    || (long long v8 = a3,
        std::string::size_type v9 = (void *)*a3,
        int v10 = (void *)a3[1],
        uint64_t v12 = *a4,
        uint64_t v11 = a4[1],
        0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *a3) >> 3) != (v11 - *a4) >> 3))
  {
    long long v137 = 0u;
    long long v138 = 0u;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    memset(v124, 0, sizeof(v124));
    long long v123 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v123, "There should be one cost for each result choice");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v123);
  }
  if (v9 == v10 || *v9 != v9[1])
  {
    v120 = 0;
    uint64_t v121 = 0;
    unint64_t v122 = 0;
    std::string __p = 0;
    v118 = 0;
    unint64_t v119 = 0;
    if (v11 != v12)
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = (uint64_t *)(*v8 + 24 * v15);
        if (*v16 != v16[1])
        {
          uint64_t v17 = v8;
          long long v18 = v121;
          if ((unint64_t)v121 >= v122)
          {
            uint64_t v19 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v120, v16);
          }
          else
          {
            *uint64_t v121 = 0;
            v18[1] = 0;
            void v18[2] = 0;
            std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v18, *v16, v16[1], 0x6DB6DB6DB6DB6DB7 * ((v16[1] - *v16) >> 5));
            uint64_t v19 = (uint64_t)(v18 + 3);
          }
          long long v8 = v17;
          uint64_t v121 = (uint64_t *)v19;
          char v20 = v118;
          if ((unint64_t)v118 >= v119)
          {
            unint64_t v22 = __p;
            uint64_t v23 = ((char *)v118 - (unsigned char *)__p) >> 3;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v25 = v119 - (void)__p;
            if ((uint64_t)(v119 - (void)__p) >> 2 > v24) {
              unint64_t v24 = v25 >> 2;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v119, v26);
              unint64_t v22 = __p;
              char v20 = v118;
            }
            else
            {
              int v27 = 0;
            }
            int v28 = &v27[8 * v23];
            *(void *)int v28 = *(void *)(v12 + 8 * v15);
            uint64_t v21 = v28 + 8;
            while (v20 != v22)
            {
              uint64_t v29 = *--v20;
              *((void *)v28 - 1) = v29;
              v28 -= 8;
            }
            std::string __p = v28;
            v118 = v21;
            unint64_t v119 = (unint64_t)&v27[8 * v26];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            void *v118 = *(void *)(v12 + 8 * v15);
            uint64_t v21 = v20 + 1;
          }
          v118 = v21;
          uint64_t v12 = *a4;
          uint64_t v11 = a4[1];
        }
        ++v15;
      }
      while (v15 < (v11 - v12) >> 3);
      int v30 = v120;
      int v31 = v121;
      if (v120 != v121)
      {
        a7.n128_u64[0] = (unint64_t)vdup_n_s32(a5);
        BOOL v32 = v120;
        do
        {
          uint64_t v33 = *v32;
          uint64_t v34 = v32[1];
          while (v33 != v34)
          {
            *(int32x2_t *)(v33 + 28) = vadd_s32(*(int32x2_t *)(v33 + 28), (int32x2_t)a7.n128_u64[0]);
            *(_DWORD *)(v33 + 36) += a5;
            v33 += 224;
          }
          v32 += 3;
        }
        while (v32 != v31);
        uint64_t v36 = *a1;
        uint64_t v35 = a1[1];
        if (*a1 == v35)
        {
          if (&v120 != (uint64_t **)a1) {
            std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)a1, v30, v31, 0xAAAAAAAAAAAAAAABLL * (v31 - v30));
          }
          if (&__p != (void **)a2) {
            std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a2, (char *)__p, (uint64_t)v118, ((char *)v118 - (unsigned char *)__p) >> 3);
          }
        }
        else
        {
          int v37 = 0;
          unint64_t v38 = 0;
          __int32 v114 = 0;
          __int32 v115 = 0;
          __int32 v116 = 0;
          do
          {
            if (v31 == v30)
            {
              int v31 = v30;
            }
            else
            {
              unint64_t v39 = 0;
              do
              {
                a7.n128_u64[0] = *(void *)(*(void *)a2 + 8 * v38);
                double v40 = a7.n128_f64[0] + *((double *)__p + v39);
                unint64_t v41 = v38 | (v39 << 32);
                if (v37 >= v116)
                {
                  uint64_t v42 = ((char *)v37 - (unsigned char *)v114) >> 4;
                  if ((unint64_t)(v42 + 1) >> 60) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v43 = ((char *)v116 - (unsigned char *)v114) >> 3;
                  if (v43 <= v42 + 1) {
                    unint64_t v43 = v42 + 1;
                  }
                  if ((unint64_t)((char *)v116 - (unsigned char *)v114) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v44 = v43;
                  }
                  if (v44) {
                    unint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v116, v44);
                  }
                  else {
                    unint64_t v45 = 0;
                  }
                  long long v46 = (__n128 *)&v45[16 * v42];
                  v46->n128_f64[0] = v40;
                  v46->n128_u64[1] = v41;
                  long long v48 = (__n128 *)v114;
                  long long v47 = v115;
                  long long v49 = v46;
                  if (v115 != v114)
                  {
                    do
                    {
                      a7 = v47[-1];
                      v49[-1] = a7;
                      --v49;
                      --v47;
                    }
                    while (v47 != v48);
                    long long v47 = (__n128 *)v114;
                  }
                  int v37 = v46 + 1;
                  __int32 v114 = v49;
                  __int32 v115 = v46 + 1;
                  __int32 v116 = (__n128 *)&v45[16 * v44];
                  if (v47) {
                    operator delete(v47);
                  }
                }
                else
                {
                  v37->n128_f64[0] = v40;
                  v37->n128_u64[1] = v41;
                  ++v37;
                }
                __int32 v115 = v37;
                ++v39;
                int v30 = v120;
                int v31 = v121;
              }
              while (0xAAAAAAAAAAAAAAABLL * (v121 - v120) > v39);
              uint64_t v36 = *a1;
              uint64_t v35 = a1[1];
            }
            ++v38;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 3) > v38);
          uint64_t v50 = (char *)v37 - (unsigned char *)v114;
          if ((unint64_t)((char *)v37 - (unsigned char *)v114) > 0x10)
          {
            uint64_t v51 = (char *)v37 - ((unsigned char *)v114 + 16);
            unint64_t v52 = v51 >> 4;
            if (v51 < 1)
            {
              long long v53 = 0;
              uint64_t v55 = 0;
            }
            else
            {
              long long v53 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<std::pair<double,std::pair<int,int>>>(v51 >> 4);
              uint64_t v55 = v54;
            }
            std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>((__n128 *)v114 + 1, v37, (uint64_t)&v112, v52, v53, v55, a7);
            if (v53) {
              operator delete(v53);
            }
            uint64_t v50 = (char *)v115 - (unsigned char *)v114;
          }
          long long v112 = 0uLL;
          unint64_t v113 = 0;
          v110[0] = 0;
          v110[1] = 0;
          long long v111 = 0;
          unint64_t v56 = v50 >> 4;
          if (v56 >= a6) {
            unint64_t v56 = a6;
          }
          unint64_t v105 = v56;
          if ((int)v56 >= 1)
          {
            uint64_t v57 = 0;
            do
            {
              long long v58 = (char *)v114 + 16 * v57;
              unint64_t v59 = *((int *)v58 + 2);
              if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v59) {
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
              unint64_t v60 = *((int *)v58 + 3);
              uint64_t v61 = (uint64_t)v120;
              if (0xAAAAAAAAAAAAAAABLL * (v121 - v120) <= v60) {
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
              long long v62 = (uint64_t *)(*a1 + 24 * (int)v59);
              v107.__locale_ = 0;
              long long v108 = 0;
              unint64_t v109 = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v107, *v62, v62[1], 0x6DB6DB6DB6DB6DB7 * ((v62[1] - *v62) >> 5));
              long long v63 = (const quasar::Token **)(v61 + 24 * (int)v60);
              std::string v64 = *v63;
              unsigned int v65 = *((_DWORD *)*v63 + 7);
              std::string v66 = v108;
              unsigned int data = v108[-8].__r_.__value_.__l.__data_;
              if (v65 > data) {
                unsigned int data = *((_DWORD *)*v63 + 7);
              }
              LODWORD(v108[-8].__r_.__value_.__l.__data_) = data;
              v66[-8].__r_.__value_.__s.__data_[12] = 1;
              std::string v68 = v63[1];
              if (v64 != v68)
              {
                unsigned int v69 = data - v65;
                int32x2_t v70 = vdup_n_s32(data - v65);
                do
                {
                  quasar::Token::Token((std::string *)&v123, v64);
                  *(int32x2_t *)&v124[3] = vadd_s32(*(int32x2_t *)&v124[3], v70);
                  v124[5] += v69;
                  std::string v71 = v108;
                  if ((unint64_t)v108 >= v109)
                  {
                    std::string v72 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v107, (const quasar::Token *)&v123);
                  }
                  else
                  {
                    quasar::Token::Token(v108, (const quasar::Token *)&v123);
                    std::string v72 = (std::string *)((char *)v71 + 224);
                  }
                  long long v108 = v72;
                  if (SBYTE7(v134) < 0) {
                    operator delete((void *)v133);
                  }
                  if (SBYTE7(v132) < 0) {
                    operator delete((void *)v131);
                  }
                  v139[0] = (void **)&v129 + 1;
                  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v139);
                  if (SBYTE7(v129) < 0) {
                    operator delete((void *)v128);
                  }
                  v139[0] = (void **)&v126 + 1;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v139);
                  if (SBYTE7(v126) < 0) {
                    operator delete((void *)v125);
                  }
                  if (SHIBYTE(v124[1]) < 0) {
                    operator delete((void *)v123);
                  }
                  std::string v64 = (const quasar::Token *)((char *)v64 + 224);
                }
                while (v64 != v68);
              }
              std::string v73 = (void *)*((void *)&v112 + 1);
              if (*((void *)&v112 + 1) >= v113)
              {
                uint64_t v74 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v112, (uint64_t *)&v107);
              }
              else
              {
                **((void **)&v112 + 1) = 0;
                v73[1] = 0;
                v73[2] = 0;
                std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v73, (uint64_t)v107.__locale_, (uint64_t)v108, 0x6DB6DB6DB6DB6DB7 * (((char *)v108 - (char *)v107.__locale_) >> 5));
                uint64_t v74 = (uint64_t)(v73 + 3);
              }
              *((void *)&v112 + 1) = v74;
              std::string v75 = (char *)v110[1];
              if (v110[1] >= v111)
              {
                std::string v77 = (char *)v110[0];
                int64_t v78 = ((char *)v110[1] - (char *)v110[0]) >> 3;
                unint64_t v79 = v78 + 1;
                if ((unint64_t)(v78 + 1) >> 61) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v80 = v111 - (char *)v110[0];
                if ((v111 - (char *)v110[0]) >> 2 > v79) {
                  unint64_t v79 = v80 >> 2;
                }
                if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v81 = v79;
                }
                if (v81)
                {
                  float v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v111, v81);
                  std::string v77 = (char *)v110[0];
                  std::string v75 = (char *)v110[1];
                }
                else
                {
                  float v82 = 0;
                }
                long long v83 = &v82[8 * v78];
                *(void *)long long v83 = *(void *)v58;
                std::string v76 = v83 + 8;
                while (v75 != v77)
                {
                  uint64_t v84 = *((void *)v75 - 1);
                  v75 -= 8;
                  *((void *)v83 - 1) = v84;
                  v83 -= 8;
                }
                v110[0] = v83;
                v110[1] = v76;
                long long v111 = &v82[8 * v81];
                if (v77) {
                  operator delete(v77);
                }
              }
              else
              {
                *(void *)v110[1] = *(void *)v58;
                std::string v76 = v75 + 8;
              }
              v110[1] = v76;
              *(void *)&long long v123 = &v107;
              std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
              ++v57;
            }
            while (v57 != v105);
          }
          if (quasar::gLogLevel > 5)
          {
            long long v137 = 0u;
            long long v138 = 0u;
            long long v135 = 0u;
            long long v136 = 0u;
            long long v133 = 0u;
            long long v134 = 0u;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v129 = 0u;
            long long v130 = 0u;
            long long v127 = 0u;
            long long v128 = 0u;
            long long v125 = 0u;
            long long v126 = 0u;
            memset(v124, 0, sizeof(v124));
            long long v123 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"concatNbest aChoices=", 21);
            uint64_t v85 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" bChoicesOrig=", 14);
            long long v86 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" bChoices=", 10);
            unsigned __int8 v87 = (void *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24)));
            uint64_t v88 = std::locale::use_facet(&v107, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
            std::locale::~locale(&v107);
            std::ostream::put();
            std::ostream::flush();
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v123);
            if ((int)v105 >= 1)
            {
              uint64_t v89 = 0;
              uint64_t v90 = 0;
              int v91 = quasar::gLogLevel;
              char v92 = (std::locale::id *)MEMORY[0x1E4FBA258];
              do
              {
                if (v91 >= 6)
                {
                  long long v137 = 0u;
                  long long v138 = 0u;
                  long long v135 = 0u;
                  long long v136 = 0u;
                  long long v133 = 0u;
                  long long v134 = 0u;
                  long long v131 = 0u;
                  long long v132 = 0u;
                  long long v129 = 0u;
                  long long v130 = 0u;
                  long long v127 = 0u;
                  long long v128 = 0u;
                  long long v125 = 0u;
                  long long v126 = 0u;
                  memset(v124, 0, sizeof(v124));
                  long long v123 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"concatNbest[", 12);
                  uint64_t v93 = (void *)std::ostream::operator<<();
                  long long v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"]:", 2);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" cost=(", 7);
                  unint64_t v95 = (void *)std::ostream::operator<<();
                  long long v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)")", 1);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" aIndex=", 8);
                  long long v97 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" bIndex=", 8);
                  long long v98 = (void *)std::ostream::operator<<();
                  std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(void *)(*v98 - 24)));
                  long long v99 = std::locale::use_facet(&v107, v92);
                  ((void (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)(v99, 10);
                  std::locale::~locale(&v107);
                  std::ostream::put();
                  std::ostream::flush();
                  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v123);
                  int v91 = quasar::gLogLevel;
                }
                ++v90;
                v89 += 16;
              }
              while (v105 != v90);
            }
          }
          long long v100 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v112;
          long long v112 = v100;
          uint64_t v101 = a1[2];
          a1[2] = v113;
          unint64_t v113 = v101;
          long long v102 = *(void **)a2;
          *(_OWORD *)a2 = *(_OWORD *)v110;
          long long v103 = *(char **)(a2 + 16);
          *(void *)(a2 + 16) = v111;
          v110[0] = v102;
          long long v111 = v103;
          if (v102)
          {
            v110[1] = v102;
            operator delete(v102);
          }
          *(void *)&long long v123 = &v112;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
          if (v114)
          {
            __int32 v115 = (__n128 *)v114;
            operator delete(v114);
          }
        }
      }
      if (__p)
      {
        v118 = __p;
        operator delete(__p);
      }
    }
    *(void *)&long long v123 = &v120;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  }
}

void sub_1B2354BB4()
{
  if (v0) {
    operator delete(v0);
  }
  JUMPOUT(0x1B2354CA0);
}

void sub_1B2354BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1B2354BEC()
{
}

void sub_1B2354BF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

void sub_1B2354C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char *a33)
{
  if (__p) {
    operator delete(__p);
  }
  a33 = &a21;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  a33 = &a30;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t quasar::extendEndTime(uint64_t result, unsigned int a2)
{
  uint64_t v2 = *(void **)result;
  uint64_t v3 = *(void **)(result + 8);
  while (v2 != v3)
  {
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      unsigned int v5 = *(_DWORD *)(v4 - 192);
      if (v5 <= a2) {
        unsigned int v5 = a2;
      }
      *(_DWORD *)(v4 - 192) = v5;
    }
    v2 += 3;
  }
  return result;
}

void quasar::decodingSignalsToPtree(quasar *this, const quasar::Token::DecodingSignals *a2, quasar::PTree *a3)
{
  unsigned int v5 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v19, "graphCost");
  float v6 = *(float *)this;
  int Type = quasar::getType(v5, *(float *)this);
  std::to_string(&v14, v6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v19, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  long long v7 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v19, "acousticCost");
  float v8 = *((float *)this + 1);
  int Type = quasar::getType(v7, v8);
  std::to_string(&v14, v8);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v19, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  std::string::size_type v9 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v19, "acousticCostFirstPassCollapsed");
  float v10 = *((float *)this + 2);
  int Type = quasar::getType(v9, v10);
  std::to_string(&v14, v10);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v19, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  uint64_t v11 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v19, "acousticCostSecondPassUnpushed");
  float v12 = *((float *)this + 3);
  int Type = quasar::getType(v11, v12);
  std::to_string(&v14, v12);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v19, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
}

void sub_1B2354EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v2 - 33) < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  _Unwind_Resume(a1);
}

void quasar::tokenToPtree(quasar *this, const quasar::Token *a2, quasar::PTree *a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenName");
  quasar::PTree::PTree(&Type, this);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenId");
  unsigned int v5 = *((_DWORD *)this + 6);
  int Type = quasar::getType((quasar *)v5);
  std::to_string(&v16, v5);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "startMilliseconds");
  unsigned int v6 = *((_DWORD *)this + 7);
  int Type = quasar::getType((quasar *)v6);
  std::to_string(&v16, v6);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "endMilliseconds");
  unsigned int v7 = *((_DWORD *)this + 8);
  int Type = quasar::getType((quasar *)v7);
  std::to_string(&v16, v7);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "silStartMilliSeconds");
  unsigned int v8 = *((_DWORD *)this + 9);
  int Type = quasar::getType((quasar *)v8);
  std::to_string(&v16, v8);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::size_type v9 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "confidence");
  float v10 = *((float *)this + 10);
  int Type = quasar::getType(v9, v10);
  std::to_string(&v16, v10);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "hasSpaceAfter");
  int v11 = *((unsigned __int8 *)this + 44);
  int Type = quasar::getType((quasar *)*((unsigned __int8 *)this + 44));
  std::to_string(&v16, v11);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "hasSpaceBefore");
  int v12 = *((unsigned __int8 *)this + 45);
  int Type = quasar::getType((quasar *)*((unsigned __int8 *)this + 45));
  std::to_string(&v16, v12);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "phoneSeq");
  quasar::PTree::PTree(&Type, (char *)this + 48);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ipaPhoneSeq");
  quasar::PTree::PTree(&Type, (char *)this + 96);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmeType");
  int64_t v13 = quasar::lmeTypeString(*((_DWORD *)this + 42));
  quasar::PTree::PTree((quasar::PTree *)&Type, v13);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  quasar::PTree::PTree((quasar::PTree *)&Type);
  quasar::decodingSignalsToPtree((quasar *)((char *)this + 204), (const quasar::Token::DecodingSignals *)&Type, v14);
  std::string::basic_string[abi:ne180100]<0>(__p, "decodingSignals");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1B23553DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a10);
  _Unwind_Resume(a1);
}

void quasar::ptreeToDecodingSignals(quasar *this, const quasar::PTree *a2)
{
  quasar::Token::DecodingSignals::DecodingSignals((float *)&v4, 0.0, 0.0, 0.0, 0.0);
  std::string::basic_string[abi:ne180100]<0>(__p, "graphCost");
  quasar::PTree::getDoubleOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B23555F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ptreeToToken(quasar *this@<X0>, quasar::Token *a2@<X8>)
{
  quasar::Token::Token(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenName");
  quasar::PTree::getChild((uint64_t)this, (uint64_t)__p);
}

void sub_1B2355974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  quasar::Token::~Token(v14);
  _Unwind_Resume(a1);
}

void quasar::phraseToPtree(quasar **a1, quasar::PTree *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v6);
      quasar::tokenToPtree(v2, (const quasar::Token *)v6, v5);
      quasar::PTree::addChild(a2, (const quasar::PTree *)v6);
      quasar::PTree::~PTree((quasar::PTree *)v6);
      uint64_t v2 = (quasar *)((char *)v2 + 224);
    }
    while (v2 != v3);
  }
}

void sub_1B2355A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::ptreeToPhrase@<X0>(quasar *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = quasar::PTree::begin(this);
  uint64_t result = quasar::PTree::end(this);
  if (v4 != result) {
    quasar::ptreeToToken((quasar *)(v4 + 24), (quasar::Token *)v6);
  }
  return result;
}

void sub_1B2355CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::ptreeToSlice(quasar *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v5 = quasar::PTree::begin(this);
  for (uint64_t i = quasar::PTree::end(this); v5 != i; v5 += 88)
  {
    quasar::ptreeToPhrase((quasar *)(v5 + 24), v7);
    std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a2, (uint64_t)v7);
    unsigned int v8 = (void **)v7;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_1B2355D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void quasar::ptreeToFeatureMatrix(quasar *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "dimension");
  quasar::PTree::getChild((uint64_t)this, (uint64_t)v3);
}

void sub_1B2355FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a17);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a25);
  std::__tree<int>::destroy(v30 - 72, *(void **)(v30 - 64));
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::DeserializedFeatureMatrix,int const&,int const&,int const&,int const&,kaldi::quasar::SparseMatrix<float>,kaldi::Matrix<float> &,kaldi::Matrix<float> &>()
{
}

void sub_1B2356180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a14);
  MEMORY[0x1B3EA8670](v14, 0x10A1C40ED5F5C40);
  _Unwind_Resume(a1);
}

uint64_t quasar::readTsvFile@<X0>(int a1@<W1>, uint64_t *a2@<X8>)
{
  v25[19] = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::ifstream::basic_ifstream(v23);
  int v4 = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(v23[0] - 24)));
    unsigned int v6 = std::locale::use_facet((const std::locale *)v18, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)v18);
    unsigned int v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (uint64_t)&__p, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    quasar::trim(&__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      kaldi::SplitStringToVector(&__p, "\t", 0, (uint64_t)&v19);
      if (v4)
      {
        if (!a1) {
          goto LABEL_11;
        }
      }
      else
      {
        int v4 = -1431655765 * ((unint64_t)(v20 - (void)v19) >> 3);
        if (!a1) {
          goto LABEL_11;
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3) != v4)
      {
        memset(v18, 0, sizeof(v18));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Inconsistent number of columns. Expected ", 41);
        int64_t v13 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" got ", 5);
        uint64_t v14 = (void *)std::ostream::operator<<();
        uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
      }
LABEL_11:
      unint64_t v10 = a2[1];
      if (v10 >= a2[2])
      {
        uint64_t v11 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a2, &v19);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a2, &v19);
        uint64_t v11 = v10 + 24;
      }
      a2[1] = v11;
      *(void *)&v18[0] = &v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v23[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](&v24);
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](v25);
}

void sub_1B2356550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void quasar::getTokenizedTokenPhraseChoiceListForEAR(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2)
  {
    quasar::getTokenizedNBestListForEAR((uint64_t *)a1, 1, (uint64_t *)&v7);
  }
  else
  {
    unsigned __int8 v7 = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(&v7, *(uint64_t **)a1, *(uint64_t **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  }
  int v4 = v7;
  if (v7 == v8)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      for (uint64_t i = *v4; i != v4[1]; i += 224)
      {
        if (v5 <= *(_DWORD *)(i + 32)) {
          unsigned int v5 = *(_DWORD *)(i + 32);
        }
      }
      v4 += 3;
    }
    while (v4 != v8);
  }
  quasar::TextProc::GetTokenizedPhraseChoiceList(&v7, v5, 1, a3);
  unint64_t v10 = (void **)&v7;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_1B235668C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::getTokenizedNBestListForEAR(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    unsigned int v5 = std::vector<std::vector<quasar::Token>>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    uint64_t v6 = *a1;
    for (uint64_t i = a1[1]; v6 != i; v6 += 24)
    {
      memset(v14, 0, sizeof(v14));
      int v8 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v5);
      quasar::QsrText::qsrToHatTokens(v8, v6, v14, 1);
      unint64_t v9 = a3[1];
      if (v9 >= a3[2])
      {
        uint64_t v10 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a3, v14);
      }
      else
      {
        std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a3, v14);
        uint64_t v10 = v9 + 24;
      }
      a3[1] = v10;
      uint64_t v15 = (void **)v14;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v15);
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)*a1;
    int v12 = (uint64_t *)a1[1];
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *a1) >> 3);
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a3, v11, v12, v13);
  }
}

void sub_1B23567C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void quasar::readMemMappedLockedFile(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v16 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v14[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = v3;
  v14[1] = 0;
  int v4 = (std::ios_base *)((char *)v14 + *(void *)(v14[0] - 24));
  std::ios_base::init(v4, v15);
  uint64_t v5 = MEMORY[0x1E4FBA460] + 24;
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v14[0] = v5;
  uint64_t v16 = v2;
  MEMORY[0x1B3EA7CE0](v15);
  std::ifstream::open();
  if (v15[15])
  {
    fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
    int v11 = 2;
    std::istream::seekg();
    std::istream::tellg();
    std::istream::seekg();
    fst::MappedFile::Map((uint64_t)v14, (uint64_t)__p, v13);
  }
  memset(v12, 0, sizeof(v12));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failed to open file: ", 21);
  int v7 = *(char *)(a1 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(void *)a1;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
}

void sub_1B2356B94(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::findLeafValuesWithCondition(quasar::PTree *a1, uint64_t a2, uint64_t *a3)
{
  if (quasar::PTree::isLeaf(a1))
  {
    uint64_t String = quasar::PTree::getString(a1);
    uint64_t v7 = *(void *)(a2 + 24);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, String);
    if (result)
    {
      uint64_t v9 = (long long *)quasar::PTree::getString(a1);
      unint64_t v10 = a3[1];
      if (v10 >= a3[2])
      {
        uint64_t result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a3, v9);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v9);
        uint64_t result = v10 + 24;
      }
      a3[1] = result;
    }
  }
  else
  {
    uint64_t v11 = quasar::PTree::begin(a1);
    uint64_t result = quasar::PTree::end(a1);
    if (v11 != result)
    {
      uint64_t v12 = result;
      do
      {
        uint64_t result = quasar::findLeafValuesWithCondition(v11 + 24, a2, a3);
        v11 += 88;
      }
      while (v11 != v12);
    }
  }
  return result;
}

void quasar::userDataToPtree(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, quasar::PTree *a4@<X8>)
{
  quasar::PTree::PTree(a4);
  uint64_t v6 = (void *)*a1;
  unint64_t v45 = a1 + 1;
  if ((void *)*a1 == a1 + 1) {
    return;
  }
  uint64_t v7 = (std::string *)&v65;
  uint64_t v8 = v66;
  do
  {
    quasar::PTree::PTree((quasar::PTree *)v69);
    uint64_t v9 = (void *)v6[7];
    long long v46 = (void *)v6[8];
    long long v47 = v6;
    if (v9 == v46) {
      goto LABEL_57;
    }
    do
    {
      quasar::PTree::PTree((quasar::PTree *)&v68);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      long long v48 = v9;
      while (v11 != v10)
      {
        quasar::PTree::PTree((quasar::PTree *)v67);
        std::string::basic_string[abi:ne180100]<0>(__p, "tag");
        quasar::PTree::PTree(&v64, v11 + 24);
        quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v64);
        if (v60 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "orth");
        quasar::PTree::PTree(&v64, v11);
        quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v64);
        if (v60 < 0) {
          operator delete(__p[0]);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "freq");
        unsigned int v12 = *(_DWORD *)(v11 + 48);
        LODWORD(v64) = quasar::getType((quasar *)v12);
        std::to_string(v7, v12);
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        v66[24] = 1;
        quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v64);
        if (v60 < 0)
        {
          operator delete(__p[0]);
          if (a3)
          {
LABEL_12:
            unint64_t v61 = 0;
            long long v62 = 0;
            unint64_t v63 = 0;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v11 + 56));
            uint64_t v13 = v10;
            uint64_t v14 = v8;
            uint64_t v15 = v7;
            uint64_t v16 = a3;
            uint64_t v18 = v17 + 1;
            uint64_t v19 = (void *)*v17;
            uint64_t v20 = v62;
            if ((void *)*v17 != v17 + 1)
            {
              do
              {
                uint64_t v21 = (void **)(*((unsigned int *)v19 + 8) | ((unint64_t)*((unsigned int *)v19 + 16) << 32));
                std::string v64 = v21;
                char v22 = (long long *)(v19 + 5);
                if ((unint64_t)v20 >= v63)
                {
                  uint64_t v20 = (uint64_t *)std::vector<std::pair<std::pair<quasar::PronType,float>,std::string>>::__emplace_back_slow_path<std::pair<quasar::PronType,float>,std::string const&>((uint64_t *)&v61, &v64, v22);
                }
                else
                {
                  *uint64_t v20 = (uint64_t)v21;
                  uint64_t v23 = (std::string *)(v20 + 1);
                  if (*((char *)v19 + 63) < 0)
                  {
                    std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)v19[5], v19[6]);
                  }
                  else
                  {
                    long long v24 = *v22;
                    v20[3] = v19[7];
                    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
                  }
                  v20 += 4;
                }
                long long v62 = v20;
                uint64_t v25 = (void *)v19[1];
                if (v25)
                {
                  do
                  {
                    unint64_t v26 = v25;
                    uint64_t v25 = (void *)*v25;
                  }
                  while (v25);
                }
                else
                {
                  do
                  {
                    unint64_t v26 = (void *)v19[2];
                    BOOL v27 = *v26 == (void)v19;
                    uint64_t v19 = v26;
                  }
                  while (!v27);
                }
                uint64_t v19 = v26;
              }
              while (v26 != v18);
            }
            unint64_t v28 = 126 - 2 * __clz((uint64_t)((uint64_t)v20 - v61) >> 5);
            if (v20 == (uint64_t *)v61) {
              uint64_t v29 = 0;
            }
            else {
              uint64_t v29 = v28;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,false>(v61, v20, (uint64_t)__p, v29, 1);
            quasar::PTree::PTree((quasar::PTree *)&v64);
            uint64_t v30 = (unsigned int *)v61;
            int v31 = (unsigned int *)v62;
            a3 = v16;
            uint64_t v7 = v15;
            uint64_t v8 = v14;
            uint64_t v10 = v13;
            if ((uint64_t *)v61 != v62)
            {
              do
              {
                quasar::PTree::PTree((quasar::PTree *)__p);
                std::string::basic_string[abi:ne180100]<0>(v57, "type");
                BOOL v32 = quasar::PronTypeToString(*v30);
                std::string::basic_string[abi:ne180100]<0>(v49, v32);
                quasar::PTree::PTree(&Type, v49);
                quasar::PTree::putChild((uint64_t)__p, (uint64_t)v57, (uint64_t)&Type, 1);
                quasar::PTree::~PTree((quasar::PTree *)&Type);
                if (v50 < 0) {
                  operator delete(v49[0]);
                }
                if (v58 < 0) {
                  operator delete(v57[0]);
                }
                uint64_t v33 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v57, "weight");
                float v34 = *((float *)v30 + 1);
                int Type = quasar::getType(v33, v34);
                std::to_string(&v52, v34);
                uint64_t v53 = 0;
                uint64_t v54 = 0;
                uint64_t v55 = 0;
                char v56 = 1;
                quasar::PTree::putChild((uint64_t)__p, (uint64_t)v57, (uint64_t)&Type, 1);
                quasar::PTree::~PTree((quasar::PTree *)&Type);
                if (v58 < 0) {
                  operator delete(v57[0]);
                }
                std::string::basic_string[abi:ne180100]<0>(v57, "pron");
                uint64_t v35 = v30 + 2;
                quasar::PTree::PTree(&Type, v35);
                quasar::PTree::putChild((uint64_t)__p, (uint64_t)v57, (uint64_t)&Type, 1);
                quasar::PTree::~PTree((quasar::PTree *)&Type);
                if (v58 < 0) {
                  operator delete(v57[0]);
                }
                quasar::PTree::addChild((quasar::PTree *)&v64, (const quasar::PTree *)__p);
                quasar::PTree::~PTree((quasar::PTree *)__p);
                uint64_t v30 = v35 + 6;
              }
              while (v30 != v31);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "prons2");
            quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
            quasar::PTree::~PTree((quasar::PTree *)&v64);
            std::string v64 = (void **)&v61;
            std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](&v64);
            goto LABEL_52;
          }
        }
        else if (a3)
        {
          goto LABEL_12;
        }
        quasar::PTree::PTree((quasar::PTree *)&v64);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v11 + 56));
        int v37 = v36 + 1;
        unint64_t v38 = (void *)*v36;
        if ((void *)*v36 != v36 + 1)
        {
          do
          {
            quasar::PTree::PTree(__p, v38 + 5);
            quasar::PTree::addChild((quasar::PTree *)&v64, (const quasar::PTree *)__p);
            quasar::PTree::~PTree((quasar::PTree *)__p);
            unint64_t v39 = (void *)v38[1];
            if (v39)
            {
              do
              {
                double v40 = v39;
                unint64_t v39 = (void *)*v39;
              }
              while (v39);
            }
            else
            {
              do
              {
                double v40 = (void *)v38[2];
                BOOL v27 = *v40 == (void)v38;
                unint64_t v38 = v40;
              }
              while (!v27);
            }
            unint64_t v38 = v40;
          }
          while (v40 != v37);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "prons");
        quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
        if (v60 < 0) {
          operator delete(__p[0]);
        }
        quasar::PTree::~PTree((quasar::PTree *)&v64);
LABEL_52:
        quasar::PTree::addChild((quasar::PTree *)&v68, (const quasar::PTree *)v67);
        quasar::PTree::~PTree((quasar::PTree *)v67);
        v11 += 80;
      }
      uint64_t v6 = v47;
      if ((quasar::PTree::isLeaf((quasar::PTree *)&v68) & 1) == 0 && !quasar::PTree::empty((quasar::PTree *)&v68)) {
        quasar::PTree::addChild((quasar::PTree *)v69, (const quasar::PTree *)&v68);
      }
      quasar::PTree::~PTree((quasar::PTree *)&v68);
      uint64_t v9 = v48 + 3;
    }
    while (v48 + 3 != v46);
LABEL_57:
    if (quasar::PTree::empty((quasar::PTree *)v69)) {
      goto LABEL_71;
    }
    if (*((char *)v6 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)v6[4], v6[5]);
    }
    else {
      std::string v68 = *(std::string *)(v6 + 4);
    }
    if (!a2) {
      goto LABEL_69;
    }
    quasar::SystemConfig::quasarTemplateToAceCats(a2, (const void **)&v68.__r_.__value_.__l.__data_, v67);
    if (v67[0].__r_.__value_.__l.__size_ == v67[0].__r_.__value_.__r.__words[0]) {
      goto LABEL_68;
    }
    if (*(char *)(v67[0].__r_.__value_.__r.__words[0] + 23) < 0)
    {
      if (!*(void *)(v67[0].__r_.__value_.__r.__words[0] + 8)) {
        goto LABEL_68;
      }
LABEL_67:
      std::string::operator=(&v68, (const std::string *)v67[0].__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
    if (*(unsigned char *)(v67[0].__r_.__value_.__r.__words[0] + 23)) {
      goto LABEL_67;
    }
LABEL_68:
    std::string v64 = (void **)v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v64);
LABEL_69:
    quasar::PTree::putChild((uint64_t)a4, (uint64_t)&v68, (uint64_t)v69, 0);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
LABEL_71:
    quasar::PTree::~PTree((quasar::PTree *)v69);
    unint64_t v41 = (void *)v6[1];
    if (v41)
    {
      do
      {
        uint64_t v42 = v41;
        unint64_t v41 = (void *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        uint64_t v42 = (void *)v6[2];
        BOOL v27 = *v42 == (void)v6;
        uint64_t v6 = v42;
      }
      while (!v27);
    }
    uint64_t v6 = v42;
  }
  while (v42 != v45);
}

void sub_1B2357388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::PTree *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  a50 = &a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (*(char *)(v58 - 217) < 0) {
    operator delete(*(void **)(v58 - 240));
  }
  quasar::PTree::~PTree((quasar::PTree *)(v58 - 168));
  quasar::PTree::~PTree(a10);
  _Unwind_Resume(a1);
}

void quasar::stringsToTokensWithDummyTimestamps(long long **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = *a1;
  uint64_t v17 = a1[1];
  if (*a1 != v17)
  {
    do
    {
      if (*((char *)v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v4, *((void *)v4 + 1));
      }
      else
      {
        long long v6 = *v4;
        v25.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
      }
      std::string::basic_string[abi:ne180100]<0>(v23, "");
      std::string::basic_string[abi:ne180100]<0>(v21, "");
      memset(v20, 0, sizeof(v20));
      std::string::basic_string[abi:ne180100]<0>(v18, "");
      quasar::Token::Token(&v26, (long long *)&v25, a2, a2 + 11, a2 + 11, 1, 0, (long long *)v23, 0.0, (long long *)v21, v20, 0, (long long *)v18, 0, 0);
      unint64_t v7 = a3[1];
      if (v7 >= a3[2])
      {
        uint64_t v15 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(a3, (long long *)&v26);
        int v16 = SHIBYTE(v41);
        a3[1] = v15;
        if (v16 < 0) {
          operator delete((void *)__p);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        *(void *)(v7 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v7 = v8;
        memset(&v26, 0, sizeof(v26));
        uint64_t v9 = *(void *)&v27[14];
        *(_OWORD *)(v7 + 24) = *(_OWORD *)v27;
        *(void *)(v7 + 38) = v9;
        uint64_t v10 = v29;
        *(_OWORD *)(v7 + 48) = v28;
        *(void *)(v7 + 64) = v10;
        *(void *)(v7 + 72) = 0;
        uint64_t v29 = 0;
        long long v28 = 0uLL;
        *(void *)(v7 + 80) = 0;
        *(void *)(v7 + 88) = 0;
        *(_OWORD *)(v7 + 72) = v30;
        *(void *)(v7 + 88) = v31;
        long long v30 = 0uLL;
        uint64_t v31 = 0;
        long long v11 = v32;
        *(void *)(v7 + 112) = v33;
        *(void *)(v7 + 120) = 0;
        *(_OWORD *)(v7 + 96) = v11;
        uint64_t v33 = 0;
        long long v32 = 0uLL;
        *(void *)(v7 + 128) = 0;
        *(void *)(v7 + 136) = 0;
        *(_OWORD *)(v7 + 120) = v34;
        *(void *)(v7 + 136) = v35;
        long long v34 = 0uLL;
        uint64_t v35 = 0;
        long long v12 = v36;
        *(void *)(v7 + 160) = v37;
        *(_OWORD *)(v7 + 144) = v12;
        uint64_t v37 = 0;
        long long v36 = 0uLL;
        LODWORD(v10) = v38;
        *(_WORD *)(v7 + 172) = v39;
        *(_DWORD *)(v7 + 168) = v10;
        long long v13 = __p;
        *(void *)(v7 + 192) = v41;
        *(_OWORD *)(v7 + 176) = v13;
        uint64_t v41 = 0;
        long long __p = 0uLL;
        long long v14 = v42;
        *(_DWORD *)(v7 + 216) = v43;
        *(_OWORD *)(v7 + 200) = v14;
        a3[1] = v7 + 224;
      }
      if (SHIBYTE(v37) < 0) {
        operator delete((void *)v36);
      }
      v44[0] = (void **)&v34;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v44);
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
      v44[0] = (void **)&v30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v44);
      if (SHIBYTE(v29) < 0) {
        operator delete((void *)v28);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      v18[0] = v20;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      if (v24 < 0) {
        operator delete(v23[0]);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      int v4 = (long long *)((char *)v4 + 24);
      a2 += 11;
    }
    while (v4 != v17);
  }
}

void sub_1B2357884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
}

uint64_t quasar::getPunctuationReplacements(quasar *this)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  {
    operator new();
  }
  return quasar::getPunctuationReplacements(void)::map;
}

void sub_1B2357BFC(_Unwind_Exception *a1)
{
  for (uint64_t i = 768; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair(v2 + i);
  MEMORY[0x1B3EA8670](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357CAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[8],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357D00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[9],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357D54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357DA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357DFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[23],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357E50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357EA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[26],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357EF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[29],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357F4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357FA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2357FF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[24],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B2358048(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[10],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B235809C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<std::pair<double,std::pair<int,int>>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u64[0] = a2[-1].n128_u64[0];
      double v9 = a1->n128_f64[0];
      if (a7.n128_f64[0] < a1->n128_f64[0])
      {
        signed __int32 v10 = a1->n128_i32[2];
        signed __int32 v11 = a2[-1].n128_i32[2];
LABEL_5:
        a1->n128_u64[0] = a7.n128_u64[0];
        a2[-1].n128_f64[0] = v9;
        a1->n128_u32[2] = v11;
        a2[-1].n128_u32[2] = v10;
        unsigned __int32 v12 = a1->n128_u32[3];
        a1->n128_u32[3] = a2[-1].n128_u32[3];
        a2[-1].n128_u32[3] = v12;
        return a7.n128_f64[0];
      }
      if (v9 >= a7.n128_f64[0])
      {
        signed __int32 v11 = a2[-1].n128_i32[2];
        signed __int32 v10 = a1->n128_i32[2];
        if (v11 < v10 || v10 >= v11 && (signed __int32)a2[-1].n128_u32[3] < (signed __int32)a1->n128_u32[3]) {
          goto LABEL_5;
        }
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1->n128_f64, a2->n128_f64);
    }
    else
    {
      unint64_t v17 = a4 >> 1;
      uint64_t v18 = &a1[a4 >> 1];
      unint64_t v19 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v21.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, v18, a3, v19, a5, a7);
        double v22 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v17], v21);
        a7.n128_f64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,std::pair<int,int>> *,std::pair<double,std::pair<int,int>> *,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>((uint64_t)a5, (uint64_t)&a5[v17], (uint64_t)&a5[v17], (uint64_t)&a5[a4], (uint64_t)a1, v22);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, v18, a3, v19, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>((uint64_t)a1, (uint64_t)&a1[a4 >> 1], a2->n128_f64, a3, a4 >> 1, a4 - (a4 >> 1), (uint64_t)a5, a6, v20);
      }
    }
  }
  return a7.n128_f64[0];
}

double *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(double *result, double *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  BOOL v4 = result;
  do
  {
    uint64_t v5 = v4;
    BOOL v4 = v2;
    double v6 = *v2;
    double v7 = *v5;
    if (*v2 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_18;
      }
      int v8 = *((_DWORD *)v5 + 6);
      int v9 = *((_DWORD *)v5 + 2);
      if (v8 >= v9 && (v9 < v8 || *((_DWORD *)v5 + 7) >= *((_DWORD *)v5 + 3))) {
        goto LABEL_18;
      }
    }
    else
    {
      int v8 = *((_DWORD *)v5 + 6);
      int v9 = *((_DWORD *)v5 + 2);
    }
    int v10 = *((_DWORD *)v5 + 7);
    double *v4 = v7;
    *((_DWORD *)v4 + 2) = v9;
    *((_DWORD *)v4 + 3) = *((_DWORD *)v5 + 3);
    if (v5 == result)
    {
LABEL_15:
      uint64_t v5 = result;
      goto LABEL_16;
    }
    uint64_t v11 = v3;
    while (1)
    {
      double v12 = *(double *)((char *)result + v11 - 16);
      if (v6 >= v12) {
        break;
      }
      int v13 = *(_DWORD *)((char *)result + v11 - 8);
LABEL_14:
      v5 -= 2;
      uint64_t v14 = (uint64_t)result + v11;
      *(double *)uint64_t v14 = v12;
      int v15 = *(_DWORD *)((char *)result + v11 - 4);
      *(_DWORD *)(v14 + 8) = v13;
      *(_DWORD *)(v14 + 12) = v15;
      v11 -= 16;
      if (!v11) {
        goto LABEL_15;
      }
    }
    if (v12 < v6) {
      goto LABEL_16;
    }
    int v13 = *(_DWORD *)((char *)result + v11 - 8);
    if (v8 < v13) {
      goto LABEL_14;
    }
    if (v13 < v8) {
      goto LABEL_16;
    }
    if (v10 < *(_DWORD *)((char *)result + v11 - 4)) {
      goto LABEL_14;
    }
    uint64_t v5 = (double *)((char *)result + v11);
LABEL_16:
    double *v5 = v6;
    *((_DWORD *)v5 + 2) = v8;
    *((_DWORD *)v5 + 3) = v10;
LABEL_18:
    uint64_t v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  if (a4)
  {
    if (a4 == 2)
    {
      int v10 = a2 - 1;
      double v11 = a2[-1].n128_f64[0];
      if (v11 < a1->n128_f64[0]
        || a1->n128_f64[0] >= v11
        && ((signed __int32 v14 = a2[-1].n128_i32[2], v15 = a1->n128_i32[2], v14 < v15)
         || v15 >= v14 && (signed __int32)a2[-1].n128_u32[3] < (signed __int32)a1->n128_u32[3]))
      {
        *a5 = *v10;
        a6 = *a1;
      }
      else
      {
        *a5 = *a1;
        a6 = *v10;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v13).n128_u64[0];
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1->n128_f64, a2->n128_f64, a5->n128_f64);
    }
  }
  return a6.n128_f64[0];
}

double std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,std::pair<int,int>> *,std::pair<double,std::pair<int,int>> *,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double result)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        uint64_t result = *(double *)a3;
        *(void *)a5 = *(void *)a3;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a5 + 12) = *(_DWORD *)(a3 + 12);
        a3 += 16;
        a5 += 16;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    uint64_t result = *(double *)a3;
    double v6 = *(double *)a1;
    if (*(double *)a3 < *(double *)a1)
    {
      int v7 = *(_DWORD *)(a3 + 8);
LABEL_10:
      *(double *)a5 = result;
      *(_DWORD *)(a5 + 8) = v7;
      *(_DWORD *)(a5 + 12) = *(_DWORD *)(a3 + 12);
      a3 += 16;
      goto LABEL_12;
    }
    if (v6 >= result)
    {
      int v7 = *(_DWORD *)(a3 + 8);
      int v8 = *(_DWORD *)(a1 + 8);
      if (v7 < v8 || v8 >= v7 && *(_DWORD *)(a3 + 12) < *(_DWORD *)(a1 + 12)) {
        goto LABEL_10;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(a1 + 8);
    }
    *(double *)a5 = v6;
    *(_DWORD *)(a5 + 8) = v8;
    *(_DWORD *)(a5 + 12) = *(_DWORD *)(a1 + 12);
    a1 += 16;
LABEL_12:
    a5 += 16;
  }
  if (a1 != a2)
  {
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = a1 + v9;
      uint64_t v11 = a5 + v9;
      uint64_t result = *(double *)(a1 + v9);
      *(double *)uint64_t v11 = result;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(a1 + v9 + 8);
      *(_DWORD *)(v11 + 12) = *(_DWORD *)(a1 + v9 + 12);
      v9 += 16;
    }
    while (v10 + 16 != a2);
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if (a6)
  {
    uint64_t v9 = a8;
    uint64_t v10 = a6;
    do
    {
      if (v10 <= v9 || a5 <= v9)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, a2, (uint64_t)a3, a9, a4, a5, v10, a7);
        return;
      }
      if (!a5) {
        return;
      }
      uint64_t v15 = 0;
      double v16 = *(double *)a2;
      uint64_t v17 = -a5;
      while (1)
      {
        double v18 = *(double *)(a1 + v15);
        if (v16 < v18) {
          break;
        }
        if (v18 >= v16)
        {
          int v19 = *(_DWORD *)(a2 + 8);
          int v20 = *(_DWORD *)(a1 + v15 + 8);
          if (v19 < v20 || v20 >= v19 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + v15 + 12)) {
            break;
          }
        }
        v15 += 16;
        if (__CFADD__(v17++, 1)) {
          return;
        }
      }
      uint64_t v22 = -v17;
      if (-v17 >= v10)
      {
        if (v17 == -1)
        {
          uint64_t v38 = a1 + v15;
          *(double *)uint64_t v38 = v16;
          *(double *)a2 = v18;
          int v39 = *(_DWORD *)(a1 + v15 + 8);
          *(_DWORD *)(v38 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v39;
          int v40 = *(_DWORD *)(a1 + v15 + 12);
          *(_DWORD *)(v38 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 12) = v40;
          return;
        }
        if (v17 > 0) {
          uint64_t v22 = 1 - v17;
        }
        uint64_t v28 = v22 >> 1;
        std::string v26 = (uint64_t *)(a1 + 16 * (v22 >> 1) + v15);
        uint64_t v29 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::pair<double,std::pair<int,int>>,std::__identity,std::__less<void,void>>((double *)a2, a3, (uint64_t)v26);
        uint64_t v27 = v28;
        std::string v25 = (uint64_t *)v29;
        uint64_t v24 = ((uint64_t)v29 - a2) >> 4;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v23 = v10;
        }
        else {
          uint64_t v23 = v10 + 1;
        }
        uint64_t v24 = v23 >> 1;
        std::string v25 = (uint64_t *)(a2 + 16 * (v23 >> 1));
        std::string v26 = (uint64_t *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::pair<double,std::pair<int,int>>,std::__identity>((double *)(a1 + v15), (double *)a2, (uint64_t)v25);
        uint64_t v27 = ((uint64_t)v26 - a1 - v15) >> 4;
      }
      long long v42 = a3;
      if (v26 == (uint64_t *)a2)
      {
        a3 = (double *)v25;
      }
      else if (v25 == (uint64_t *)a2)
      {
        a3 = (double *)v26;
      }
      else
      {
        uint64_t v30 = v27;
        uint64_t v31 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(v26, (uint64_t *)a2, v25);
        uint64_t v27 = v30;
        a3 = (double *)v31;
      }
      uint64_t v32 = v24;
      a5 = -v27 - v17;
      uint64_t v33 = v10 - v24;
      if (v27 + v32 >= v10 - (v27 + v32) - v17)
      {
        uint64_t v35 = v25;
        uint64_t v36 = v27;
        uint64_t v37 = v32;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a3, v35, v42, a4, -v27 - v17, v33, a7, a8);
        a1 += v15;
        a2 = (uint64_t)v26;
        uint64_t v9 = a8;
        uint64_t v33 = v37;
        a5 = v36;
      }
      else
      {
        long long v34 = v26;
        uint64_t v9 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1 + v15, v34, a3, a4, v27, v32, a7, a8);
        a1 = (uint64_t)a3;
        a2 = (uint64_t)v25;
        a3 = v42;
      }
      uint64_t v10 = v33;
    }
    while (v33);
  }
}

double *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(double *result, double *a2, double *a3)
{
  if (result == a2) {
    return result;
  }
  *(_OWORD *)a3 = *(_OWORD *)result;
  uint64_t v3 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3;
  double v6 = a3;
  do
  {
    int v7 = v3;
    double v8 = *v6;
    v6 += 2;
    double v9 = v8;
    if (*v3 >= v8)
    {
      if (v9 < *v3
        || (int v17 = *((_DWORD *)result + 6), v18 = *((_DWORD *)v5 + 2), v17 >= v18)
        && (v18 < v17 || *((_DWORD *)result + 7) >= *((_DWORD *)v5 + 3)))
      {
        *(_OWORD *)double v6 = *(_OWORD *)v7;
        goto LABEL_23;
      }
    }
    *(_OWORD *)double v6 = *(_OWORD *)v5;
    uint64_t v10 = a3;
    if (v5 == a3) {
      goto LABEL_22;
    }
    uint64_t v11 = v4;
    while (1)
    {
      double v12 = *(double *)((char *)a3 + v11 - 16);
      if (*v7 < v12)
      {
        int v13 = *(_DWORD *)((char *)a3 + v11 - 8);
        goto LABEL_13;
      }
      if (v12 < *v7) {
        goto LABEL_21;
      }
      int v14 = *((_DWORD *)result + 6);
      int v13 = *(_DWORD *)((char *)a3 + v11 - 8);
      if (v14 >= v13) {
        break;
      }
LABEL_13:
      v5 -= 2;
      uint64_t v15 = (char *)a3 + v11;
      *(double *)uint64_t v15 = v12;
      int v16 = *(_DWORD *)((char *)a3 + v11 - 4);
      *((_DWORD *)v15 + 2) = v13;
      *((_DWORD *)v15 + 3) = v16;
      v11 -= 16;
      if (!v11)
      {
        uint64_t v10 = a3;
        goto LABEL_22;
      }
    }
    if (v13 >= v14)
    {
      uint64_t v10 = (double *)((char *)a3 + v11);
      if (*((_DWORD *)result + 7) >= *(_DWORD *)((char *)a3 + v11 - 4)) {
        goto LABEL_22;
      }
      goto LABEL_13;
    }
LABEL_21:
    uint64_t v10 = v5;
LABEL_22:
    *uint64_t v10 = *v7;
    *((_DWORD *)v10 + 2) = *((_DWORD *)result + 6);
    *((_DWORD *)v10 + 3) = *((_DWORD *)result + 7);
LABEL_23:
    uint64_t v3 = v7 + 2;
    v4 += 16;
    uint64_t v5 = v6;
    uint64_t result = v7;
  }
  while (v7 + 2 != a2);
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 v10 = *a3++;
        result.n128_u64[0] = v10.n128_u64[0];
        *a5++ = v10;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (a3->n128_f64[0] >= a1->n128_f64[0]
      && (a1->n128_f64[0] < a3->n128_f64[0]
       || (v6 = a3->n128_i32[2], signed __int32 v7 = a1->n128_i32[2], v6 >= v7)
       && (v7 < v6 || (signed __int32)a3->n128_u32[3] >= (signed __int32)a1->n128_u32[3])))
    {
      __n128 v9 = *a1++;
      uint64_t result = v9;
    }
    else
    {
      __n128 v8 = *a3++;
      uint64_t result = v8;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t result = a1[v11];
      a5[v11++] = result;
    }
    while (&a1[v11] != a2);
  }
  return result;
}

double std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6 <= a7)
  {
    int v14 = (_OWORD *)a8;
    if (a1 != a2)
    {
      int v14 = (_OWORD *)a8;
      uint64_t v15 = (long long *)a1;
      do
      {
        long long v16 = *v15++;
        a4 = *(double *)&v16;
        *v14++ = v16;
      }
      while (v15 != (long long *)a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,std::pair<int,int>> *,std::pair<double,std::pair<int,int>> *,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a8, (uint64_t)v14, a2, a3, a1, a4);
  }
  else
  {
    __n128 v10 = (_OWORD *)a8;
    if (a2 != a3)
    {
      __n128 v10 = (_OWORD *)a8;
      uint64_t v11 = (long long *)a2;
      do
      {
        long long v12 = *v11++;
        a4 = *(double *)&v12;
        *v10++ = v12;
      }
      while (v11 != (long long *)a3);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<std::pair<double,std::pair<int,int>> *>,std::reverse_iterator<std::pair<double,std::pair<int,int>> *>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>>(a4, (uint64_t)v10, (uint64_t)v10, a8, a8, a2, a2, a1, a1, a3, a3);
  }
}

double *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::pair<double,std::pair<int,int>>,std::__identity>(double *result, double *a2, uint64_t a3)
{
  if (a2 != result)
  {
    unint64_t v3 = ((char *)a2 - (char *)result) >> 4;
    double v4 = *(double *)a3;
    int v5 = *(_DWORD *)(a3 + 8);
    do
    {
      unint64_t v6 = v3 >> 1;
      signed __int32 v7 = &result[2 * (v3 >> 1)];
      if (v4 >= *v7)
      {
        if (*v7 < v4
          || (int v8 = LODWORD(result[2 * v6 + 1]), v5 >= v8)
          && (v8 < v5 || *(_DWORD *)(a3 + 12) >= SHIDWORD(result[2 * v6 + 1])))
        {
          uint64_t result = v7 + 2;
          unint64_t v6 = v3 + ~v6;
        }
      }
      unint64_t v3 = v6;
    }
    while (v6);
  }
  return result;
}

double std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,std::pair<int,int>> *,std::pair<double,std::pair<int,int>> *,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double result)
{
  while (a1 != a2)
  {
    if (a3 == a4)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a5 + v9;
        uint64_t v11 = a1 + v9;
        uint64_t result = *(double *)(a1 + v9);
        *(double *)uint64_t v10 = result;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(a1 + v9 + 8);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(a1 + v9 + 12);
        v9 += 16;
      }
      while (v11 + 16 != a2);
      return result;
    }
    uint64_t result = *(double *)a3;
    double v6 = *(double *)a1;
    if (*(double *)a3 < *(double *)a1)
    {
      int v7 = *(_DWORD *)(a3 + 8);
LABEL_5:
      *(double *)a5 = result;
      *(_DWORD *)(a5 + 8) = v7;
      *(_DWORD *)(a5 + 12) = *(_DWORD *)(a3 + 12);
      a3 += 16;
      goto LABEL_9;
    }
    if (v6 >= result)
    {
      int v7 = *(_DWORD *)(a3 + 8);
      int v8 = *(_DWORD *)(a1 + 8);
      if (v7 < v8 || v8 >= v7 && *(_DWORD *)(a3 + 12) < *(_DWORD *)(a1 + 12)) {
        goto LABEL_5;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(a1 + 8);
    }
    *(double *)a5 = v6;
    *(_DWORD *)(a5 + 8) = v8;
    *(_DWORD *)(a5 + 12) = *(_DWORD *)(a1 + 12);
    a1 += 16;
LABEL_9:
    a5 += 16;
  }
  return result;
}

double std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<std::pair<double,std::pair<int,int>> *>,std::reverse_iterator<std::pair<double,std::pair<int,int>> *>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>>(double result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3 != a5)
  {
    while (1)
    {
      if (a7 == a9)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v17 = a11 + v16;
          uint64_t result = *(double *)(a3 + v16 - 16);
          *(double *)(v17 - 16) = result;
          *(_DWORD *)(v17 - 8) = *(_DWORD *)(a3 + v16 - 8);
          *(_DWORD *)(v17 - 4) = *(_DWORD *)(a3 + v16 - 4);
          v16 -= 16;
        }
        while (a3 + v16 != a5);
        return result;
      }
      double v12 = *(double *)(a7 - 16);
      uint64_t result = *(double *)(a3 - 16);
      if (result < v12) {
        break;
      }
      if (v12 >= result)
      {
        int v14 = *(_DWORD *)(a3 - 8);
        int v13 = *(_DWORD *)(a7 - 8);
        if (v14 < v13 || v13 >= v14 && *(_DWORD *)(a3 - 4) < *(_DWORD *)(a7 - 4)) {
          goto LABEL_9;
        }
      }
      else
      {
        int v14 = *(_DWORD *)(a3 - 8);
      }
      int v13 = v14;
      uint64_t v15 = a3;
      a3 -= 16;
LABEL_10:
      *(double *)(a11 - 16) = result;
      a11 -= 16;
      *(_DWORD *)(a11 + 8) = v13;
      *(_DWORD *)(a11 + 12) = *(_DWORD *)(v15 - 4);
      if (a3 == a5) {
        return result;
      }
    }
    int v13 = *(_DWORD *)(a7 - 8);
LABEL_9:
    uint64_t result = *(double *)(a7 - 16);
    uint64_t v15 = a7;
    a7 -= 16;
    goto LABEL_10;
  }
  return result;
}

double *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::pair<double,std::pair<int,int>>,std::__identity,std::__less<void,void>>(double *result, double *a2, uint64_t a3)
{
  if (a2 != result)
  {
    unint64_t v3 = ((char *)a2 - (char *)result) >> 4;
    double v4 = *(double *)a3;
    int v5 = *(_DWORD *)(a3 + 8);
    do
    {
      unint64_t v6 = v3 >> 1;
      int v7 = &result[2 * (v3 >> 1)];
      if (*v7 < v4
        || v4 >= *v7
        && ((int v8 = LODWORD(result[2 * v6 + 1]), v8 < v5)
         || v5 >= v8 && SHIDWORD(result[2 * v6 + 1]) < *(_DWORD *)(a3 + 12)))
      {
        uint64_t result = v7 + 2;
        unint64_t v6 = v3 + ~v6;
      }
      unint64_t v3 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  int v4 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  uint64_t result = a1 + 2;
  for (uint64_t i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2) {
      a2 = i;
    }
    uint64_t v8 = *result;
    *uint64_t result = *i;
    *uint64_t i = v8;
    int v9 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *((_DWORD *)i + 2);
    *((_DWORD *)i + 2) = v9;
    int v10 = *((_DWORD *)result + 3);
    *((_DWORD *)result + 3) = *((_DWORD *)i + 3);
    *((_DWORD *)i + 3) = v10;
    result += 2;
  }
  if (result != a2)
  {
    uint64_t v11 = result;
    double v12 = a2;
    do
    {
      while (1)
      {
        uint64_t v13 = *v11;
        *uint64_t v11 = *v12;
        *double v12 = v13;
        int v14 = *((_DWORD *)v11 + 2);
        *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
        *((_DWORD *)v12 + 2) = v14;
        int v15 = *((_DWORD *)v11 + 3);
        *((_DWORD *)v11 + 3) = *((_DWORD *)v12 + 3);
        *((_DWORD *)v12 + 3) = v15;
        v11 += 2;
        v12 += 2;
        if (v12 == a3) {
          break;
        }
        if (v11 == a2) {
          a2 = v12;
        }
      }
      double v12 = a2;
    }
    while (v11 != a2);
  }
  return result;
}

uint64_t quasar::DeserializedFeatureMatrix::DeserializedFeatureMatrix(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)a1 = &unk_1F0A56E80;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = a5;
  kaldi::quasar::SparseMatrix<float>::SparseMatrix(a1 + 24, a6);
  kaldi::Matrix<float>::Matrix(a1 + 64, a7);
  kaldi::Matrix<float>::Matrix(a1 + 104, a8);
  return a1;
}

void sub_1B2359040(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v2);
  std::__tree<int>::destroy(v1 + 40, *(void **)(v1 + 48));
  _Unwind_Resume(a1);
}

void quasar::DeserializedFeatureMatrix::~DeserializedFeatureMatrix(quasar::DeserializedFeatureMatrix *this)
{
  *(void *)this = &unk_1F0A56E80;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 104);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 64);
  std::__tree<int>::destroy((uint64_t)this + 40, *((void **)this + 6));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A56E80;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 104);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 64);
  std::__tree<int>::destroy((uint64_t)this + 40, *((void **)this + 6));
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::DeserializedFeatureMatrix::Dim(quasar::DeserializedFeatureMatrix *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t quasar::DeserializedFeatureMatrix::ChunkSize(quasar::DeserializedFeatureMatrix *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t quasar::DeserializedFeatureMatrix::FrameDurationMs(quasar::DeserializedFeatureMatrix *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t quasar::DeserializedFeatureMatrix::FrameDurationMsForAlignment(quasar::DeserializedFeatureMatrix *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t kaldi::FeatureMatrixItf::GetAllFeat(kaldi::FeatureMatrixItf *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 72))();
}

uint64_t kaldi::FeatureMatrixItf::GetAllAedFeat(kaldi::FeatureMatrixItf *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 80))();
}

uint64_t kaldi::FeatureMatrixItf::GetAllFusionFeat(kaldi::FeatureMatrixItf *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 88))();
}

uint64_t quasar::DeserializedFeatureMatrix::GetCachedAllFeat(quasar::DeserializedFeatureMatrix *this)
{
  return (uint64_t)this + 24;
}

uint64_t quasar::DeserializedFeatureMatrix::GetCachedAllAedFeat(quasar::DeserializedFeatureMatrix *this)
{
  return (uint64_t)this + 64;
}

uint64_t quasar::DeserializedFeatureMatrix::GetCachedAllFusionFeat(quasar::DeserializedFeatureMatrix *this)
{
  return (uint64_t)this + 104;
}

uint64_t std::vector<std::pair<std::pair<quasar::PronType,float>,std::string>>::__emplace_back_slow_path<std::pair<quasar::PronType,float>,std::string const&>(uint64_t *a1, void *a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  __n128 v21 = a1 + 2;
  if (v11) {
    double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    double v12 = 0;
  }
  uint64_t v13 = &v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  int v19 = v13;
  int v20 = &v12[32 * v11];
  *(void *)uint64_t v13 = *a2;
  int v14 = (std::string *)(v13 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    uint64_t v13 = v19;
  }
  else
  {
    long long v15 = *a3;
    *((void *)v13 + 3) = *((void *)a3 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  int v19 = v13 + 32;
  std::vector<std::pair<std::pair<quasar::PronType,float>,std::string>>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1B23592D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::pair<quasar::PronType,float>,std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::pair<quasar::PronType,float>,std::string>>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::pair<quasar::PronType,float>,std::string>>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v7 - 32) = v8;
      long long v9 = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(_OWORD *)(v7 - 24) = v9;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 32;
      *((void *)&v15 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::pair<quasar::PronType,float>,std::string>>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::pair<quasar::PronType,float>,std::string>>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,false>(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 < *(_DWORD *)a3) {
    return 1;
  }
  if (*(_DWORD *)a3 < *(_DWORD *)a2) {
    return 0;
  }
  float v3 = *(float *)(a2 + 4);
  float v4 = *(float *)(a3 + 4);
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  uint64_t v8 = *(const void **)(a3 + 8);
  uint64_t v6 = a3 + 8;
  uint64_t v7 = v8;
  int v9 = *(char *)(v6 + 23);
  uint64_t v12 = *(const void **)(a2 + 8);
  uint64_t v10 = a2 + 8;
  unint64_t v11 = v12;
  int v13 = *(char *)(v10 + 23);
  if (v13 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v10 + 23);
  }
  else {
    size_t v14 = *(void *)(v10 + 8);
  }
  if (v13 >= 0) {
    unint64_t v15 = (const void *)v10;
  }
  else {
    unint64_t v15 = v11;
  }
  if (v9 >= 0) {
    size_t v16 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    size_t v16 = *(void *)(v6 + 8);
  }
  if (v9 >= 0) {
    uint64_t v17 = (const void *)v6;
  }
  else {
    uint64_t v17 = v7;
  }
  if (v16 >= v14) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v16;
  }
  int v19 = memcmp(v15, v17, v18);
  if (v19) {
    return v19 < 0;
  }
  else {
    return v14 < v16;
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v5 = a1 + 32;
    if ((uint64_t *)(a1 + 32) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        int v9 = (uint64_t *)v5;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v5, v8))
        {
          uint64_t v14 = *v9;
          long long v15 = *(_OWORD *)(v8 + 40);
          uint64_t v16 = *(void *)(v8 + 56);
          *(void *)(v8 + 40) = 0;
          *(void *)(v8 + 48) = 0;
          *(void *)(v8 + 56) = 0;
          uint64_t v10 = v7;
          while (1)
          {
            std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1 + v10 + 32, a1 + v10);
            if (!v10) {
              break;
            }
            BOOL v11 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v14, a1 + v10 - 32);
            v10 -= 32;
            if (!v11)
            {
              uint64_t v12 = a1 + v10 + 32;
              goto LABEL_10;
            }
          }
          uint64_t v12 = a1;
LABEL_10:
          *(void *)uint64_t v12 = v14;
          uint64_t v13 = v12 + 8;
          if (*(char *)(v12 + 31) < 0) {
            operator delete(*(void **)v13);
          }
          *(_OWORD *)uint64_t v13 = v15;
          *(void *)(v13 + 16) = v16;
        }
        uint64_t v5 = (uint64_t)(v9 + 4);
        v7 += 32;
        uint64_t v8 = (uint64_t)v9;
      }
      while (v9 + 4 != a2);
    }
  }
}

void sub_1B2359A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 32;
    if ((uint64_t *)(a1 + 32) != a2)
    {
      uint64_t v7 = (char *)(a1 + 63);
      do
      {
        uint64_t v8 = (uint64_t *)v5;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v5, v4))
        {
          uint64_t v12 = *v8;
          long long v13 = *(_OWORD *)(v4 + 40);
          uint64_t v14 = *(void *)(v4 + 56);
          *(void *)(v4 + 40) = 0;
          *(void *)(v4 + 48) = 0;
          *(void *)(v4 + 56) = 0;
          int v9 = v7;
          do
          {
            std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100]((uint64_t)(v9 - 31), (uint64_t)(v9 - 63));
            BOOL v10 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v12, (uint64_t)(v9 - 95));
            v9 -= 32;
          }
          while (v10);
          *(void *)(v9 - 31) = v12;
          if (*v9 < 0) {
            operator delete(*(void **)(v9 - 23));
          }
          BOOL v11 = v9 - 23;
          *(_OWORD *)BOOL v11 = v13;
          *((void *)v11 + 2) = v14;
        }
        uint64_t v5 = (uint64_t)(v8 + 4);
        v7 += 32;
        uint64_t v4 = (uint64_t)v8;
      }
      while (v8 + 4 != a2);
    }
  }
}

void sub_1B2359B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, a2, a1);
  uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    int v16 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v16;
    int v17 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v17;
    uint64_t v18 = *(void *)(a2 + 24);
    long long v19 = *(_OWORD *)(a2 + 8);
    uint64_t v20 = *(void *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = v20;
    *(_OWORD *)(a3 + 8) = v19;
    *(void *)(a3 + 24) = v18;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, a2, a1))return 1; {
    int v21 = *(_DWORD *)a1;
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v21;
    int v22 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v22;
    uint64_t v23 = *(void *)(a1 + 24);
    long long v24 = *(_OWORD *)(a1 + 8);
    uint64_t v25 = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v25;
    *(_OWORD *)(a2 + 8) = v24;
    *(void *)(a2 + 24) = v23;
    return 2;
  }
  BOOL v10 = (long long *)(a1 + 8);
  int v11 = *(_DWORD *)a1;
  if (!result)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v11;
    int v26 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v26;
    uint64_t v27 = *(void *)(a1 + 24);
    long long v28 = *v10;
    uint64_t v29 = *(void *)(a2 + 24);
    *BOOL v10 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v29;
    *(_OWORD *)(a2 + 8) = v28;
    *(void *)(a2 + 24) = v27;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, a3, a2))return 1; {
    int v30 = *(_DWORD *)a2;
    }
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v30;
    int v31 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v31;
    uint64_t v32 = *(void *)(a2 + 24);
    long long v33 = *(_OWORD *)(a2 + 8);
    uint64_t v34 = *(void *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = v34;
    *(_OWORD *)(a3 + 8) = v33;
    *(void *)(a3 + 24) = v32;
    return 2;
  }
  *(_DWORD *)a1 = *(_DWORD *)a3;
  *(_DWORD *)a3 = v11;
  int v12 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a3 + 4) = v12;
  uint64_t v13 = *(void *)(a1 + 24);
  long long v14 = *v10;
  uint64_t v15 = *(void *)(a3 + 24);
  *BOOL v10 = *(_OWORD *)(a3 + 8);
  *(void *)(a1 + 24) = v15;
  *(_OWORD *)(a3 + 8) = v14;
  *(void *)(a3 + 24) = v13;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v17 = *(void *)a1;
  long long v18 = *(_OWORD *)(a1 + 8);
  uint64_t v19 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, a2 - 32))
  {
    unint64_t v6 = a1;
    do
      v6 += 32;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v6));
  }
  else
  {
    unint64_t v7 = a1 + 32;
    do
    {
      unint64_t v6 = v7;
      if (v7 >= v4) {
        break;
      }
      BOOL v8 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v7);
      unint64_t v7 = v6 + 32;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 32;
    while (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v4));
  }
  while (v6 < v4)
  {
    int v9 = *(_DWORD *)v6;
    *(_DWORD *)unint64_t v6 = *(_DWORD *)v4;
    *(_DWORD *)unint64_t v4 = v9;
    int v10 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)(v6 + 4) = *(_DWORD *)(v4 + 4);
    *(_DWORD *)(v4 + 4) = v10;
    long long v11 = *(_OWORD *)(v6 + 8);
    uint64_t v21 = *(void *)(v6 + 24);
    long long v20 = v11;
    long long v12 = *(_OWORD *)(v4 + 8);
    *(void *)(v6 + 24) = *(void *)(v4 + 24);
    *(_OWORD *)(v6 + 8) = v12;
    long long v13 = v20;
    *(void *)(v4 + 24) = v21;
    *(_OWORD *)(v4 + 8) = v13;
    do
      v6 += 32;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v6));
    do
      v4 -= 32;
    while (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v4));
  }
  if (v6 - 32 != a1) {
    std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1, v6 - 32);
  }
  *(void *)(v6 - 32) = v17;
  long long v14 = (void **)(v6 - 24);
  if (*(char *)(v6 - 1) < 0) {
    operator delete(*v14);
  }
  long long v15 = v18;
  *(void *)(v6 - 8) = v19;
  *(_OWORD *)long long v14 = v15;
  return v6;
}

void sub_1B2359F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v19 = *(void *)a1;
  uint64_t v21 = *(void *)(a1 + 24);
  long long v20 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  do
  {
    BOOL v7 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, a1 + v6 + 32, (uint64_t)&v19);
    v6 += 32;
  }
  while (v7);
  unint64_t v8 = a1 + v6;
  if (v6 == 32)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      a2 -= 32;
    }
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, a2, (uint64_t)&v19));
  }
  else
  {
    do
      a2 -= 32;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, a2, (uint64_t)&v19));
  }
  unint64_t v9 = a1 + v6;
  if (v8 < a2)
  {
    unint64_t v10 = a2;
    do
    {
      int v11 = *(_DWORD *)v9;
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v10;
      *(_DWORD *)unint64_t v10 = v11;
      int v12 = *(_DWORD *)(v9 + 4);
      *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 + 4);
      *(_DWORD *)(v10 + 4) = v12;
      long long v13 = *(_OWORD *)(v9 + 8);
      uint64_t v23 = *(void *)(v9 + 24);
      long long v22 = v13;
      long long v14 = *(_OWORD *)(v10 + 8);
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      *(_OWORD *)(v9 + 8) = v14;
      long long v15 = v22;
      *(void *)(v10 + 24) = v23;
      *(_OWORD *)(v10 + 8) = v15;
      do
        v9 += 32;
      while (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v9, (uint64_t)&v19));
      do
        v10 -= 32;
      while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v10, (uint64_t)&v19));
    }
    while (v9 < v10);
  }
  if (v9 - 32 != a1) {
    std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1, v9 - 32);
  }
  *(void *)(v9 - 32) = v19;
  int v16 = (void **)(v9 - 24);
  if (*(char *)(v9 - 1) < 0) {
    operator delete(*v16);
  }
  long long v17 = v20;
  *(void *)(v9 - 8) = v21;
  *(_OWORD *)int v16 = v17;
  return v9 - 32;
}

void sub_1B235A150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, a2 - 32, a1))
      {
        int v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 32);
        *(_DWORD *)(a2 - 32) = v8;
        int v9 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 28);
        *(_DWORD *)(a2 - 28) = v9;
        uint64_t v10 = *(void *)(a1 + 24);
        long long v11 = *(_OWORD *)(a1 + 8);
        uint64_t v12 = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 24) = v12;
        *(_OWORD *)(a2 - 24) = v11;
        *(void *)(a2 - 8) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a1 + 32, a2 - 32, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32, a3);
      return 1;
    default:
      uint64_t v13 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a1 + 32, a1 + 64, a3);
      uint64_t v14 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v14, v13))
    {
      uint64_t v21 = *(void *)v14;
      long long v22 = *(_OWORD *)(v14 + 8);
      uint64_t v23 = *(void *)(v14 + 24);
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0;
      uint64_t v17 = v15;
      while (1)
      {
        std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1 + v17 + 96, a1 + v17 + 64);
        if (v17 == -64) {
          break;
        }
        BOOL v18 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v21, a1 + v17 + 32);
        v17 -= 32;
        if (!v18)
        {
          uint64_t v19 = a1 + v17 + 96;
          goto LABEL_12;
        }
      }
      uint64_t v19 = a1;
LABEL_12:
      *(void *)uint64_t v19 = v21;
      uint64_t v20 = v19 + 8;
      if (*(char *)(v19 + 31) < 0) {
        operator delete(*(void **)v20);
      }
      *(_OWORD *)uint64_t v20 = v22;
      *(void *)(v20 + 16) = v23;
      if (++v16 == 8) {
        return v14 + 32 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2) {
      return 1;
    }
  }
}

void sub_1B235A3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a2, a3, a5);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a5, a4, a3))
  {
    int v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    int v12 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v12;
    uint64_t v13 = *(void *)(a3 + 24);
    long long v14 = *(_OWORD *)(a3 + 8);
    uint64_t v15 = *(void *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(void *)(a3 + 24) = v15;
    *(_OWORD *)(a4 + 8) = v14;
    *(void *)(a4 + 24) = v13;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a5, a3, a2))
    {
      int v16 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v16;
      int v17 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v17;
      uint64_t v18 = *(void *)(a2 + 24);
      long long v19 = *(_OWORD *)(a2 + 8);
      uint64_t v20 = *(void *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(a2 + 24) = v20;
      *(_OWORD *)(a3 + 8) = v19;
      *(void *)(a3 + 24) = v18;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a5, a2, a1))
      {
        int v21 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v21;
        int v22 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = v22;
        uint64_t v23 = *(void *)(a1 + 24);
        __n128 result = *(__n128 *)(a1 + 8);
        uint64_t v24 = *(void *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = v24;
        *(__n128 *)(a2 + 8) = result;
        *(void *)(a2 + 24) = v23;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a2, a3, a4, a6);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a6, a5, a4))
  {
    int v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    int v14 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v14;
    uint64_t v15 = *(void *)(a4 + 24);
    long long v16 = *(_OWORD *)(a4 + 8);
    uint64_t v17 = *(void *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(void *)(a4 + 24) = v17;
    *(_OWORD *)(a5 + 8) = v16;
    *(void *)(a5 + 24) = v15;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a6, a4, a3))
    {
      int v18 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v18;
      int v19 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v19;
      uint64_t v20 = *(void *)(a3 + 24);
      long long v21 = *(_OWORD *)(a3 + 8);
      uint64_t v22 = *(void *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(void *)(a3 + 24) = v22;
      *(_OWORD *)(a4 + 8) = v21;
      *(void *)(a4 + 24) = v20;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a6, a3, a2))
      {
        int v23 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v23;
        int v24 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v24;
        uint64_t v25 = *(void *)(a2 + 24);
        long long v26 = *(_OWORD *)(a2 + 8);
        uint64_t v27 = *(void *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(void *)(a2 + 24) = v27;
        *(_OWORD *)(a3 + 8) = v26;
        *(void *)(a3 + 24) = v25;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a6, a2, a1))
        {
          int v28 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v28;
          int v29 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(a2 + 4) = v29;
          uint64_t v30 = *(void *)(a1 + 24);
          __n128 result = *(__n128 *)(a1 + 8);
          uint64_t v31 = *(void *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(void *)(a1 + 24) = v31;
          *(__n128 *)(a2 + 8) = result;
          *(void *)(a2 + 24) = v30;
        }
      }
    }
  }
  return result;
}

uint64_t std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  return a1;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 32 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      int v14 = (_OWORD *)(a1 + 8);
      uint64_t v15 = v6;
      do
      {
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, v15, a1))
        {
          int v16 = *(_DWORD *)v15;
          *(_DWORD *)uint64_t v15 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v16;
          int v17 = *(_DWORD *)(v15 + 4);
          *(_DWORD *)(v15 + 4) = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = v17;
          uint64_t v18 = *(void *)(v15 + 24);
          long long v19 = *(_OWORD *)(v15 + 8);
          uint64_t v20 = *(void *)(a1 + 24);
          *(_OWORD *)(v15 + 8) = *v14;
          *(void *)(v15 + 24) = v20;
          *int v14 = v19;
          *(void *)(a1 + 24) = v18;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a4, v9, a1);
        }
        v15 += 32;
      }
      while (v15 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 33)
    {
      unint64_t v21 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, v6, a4, v21);
        v6 -= 32;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 5)
    {
      uint64_t v10 = (a4 - a1) >> 4;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 32 * (v10 + 1);
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3
        && std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, a1 + 32 * (v10 + 1), v12 + 32))
      {
        v12 += 32;
        uint64_t v11 = v13;
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, v12, v5))
      {
        uint64_t v18 = *(void *)v5;
        __n128 v19 = *(__n128 *)(v5 + 8);
        uint64_t v20 = *(void *)(v5 + 24);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + 24) = 0;
        do
        {
          uint64_t v15 = v12;
          std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](v5, v12);
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = a1 + 32 * v16;
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v16;
          }
          else if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, a1 + 32 * v16, v12 + 32))
          {
            v12 += 32;
          }
          else
          {
            uint64_t v11 = v16;
          }
          uint64_t v5 = v15;
        }
        while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, v12, (uint64_t)&v18));
        *(void *)uint64_t v15 = v18;
        int v17 = (void **)(v15 + 8);
        if (*(char *)(v15 + 31) < 0) {
          operator delete(*v17);
        }
        __n128 result = v19;
        *(void *)(v15 + 24) = v20;
        *(__n128 *)int v17 = result;
      }
    }
  }
  return result;
}

void sub_1B235AA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    int v7 = *(_DWORD *)a1;
    int v8 = *(_DWORD *)(a1 + 4);
    uint64_t v9 = *(void *)(a1 + 8);
    *(void *)int v14 = *(void *)(a1 + 16);
    *(void *)&v14[7] = *(void *)(a1 + 23);
    char v10 = *(unsigned char *)(a1 + 31);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a3, a4);
    uint64_t v12 = v11;
    if (v11 == a2 - 32)
    {
      *(_DWORD *)uint64_t v11 = v7;
      *(_DWORD *)(v11 + 4) = v8;
      if (*(char *)(v11 + 31) < 0) {
        operator delete(*(void **)(v11 + 8));
      }
      *(void *)(v12 + 8) = v9;
      *(void *)(v12 + 16) = *(void *)v14;
      *(void *)(v12 + 23) = *(void *)&v14[7];
      *(unsigned char *)(v12 + 31) = v10;
    }
    else
    {
      std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](v11, a2 - 32);
      uint64_t v13 = v12 + 32;
      *(_DWORD *)(a2 - 32) = v7;
      *(_DWORD *)(a2 - 28) = v8;
      if (*(char *)(a2 - 1) < 0) {
        operator delete(*(void **)(a2 - 24));
      }
      *(void *)(a2 - 24) = v9;
      *(void *)(a2 - 16) = *(void *)v14;
      *(void *)(a2 - 9) = *(void *)&v14[7];
      *(unsigned char *)(a2 - 1) = v10;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, v13, a3, (v13 - a1) >> 5);
    }
  }
}

void sub_1B235ABAC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 32 * v6 + 32;
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, a1 + 32 * v6 + 32, a1 + 32 * v6 + 64))
    {
      v9 += 32;
      uint64_t v10 = v11;
    }
    std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1, v9);
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = a1 + 32 * (v4 >> 1);
    uint64_t v10 = a2 - 32;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v9, a2 - 32))
    {
      uint64_t v14 = *(void *)(a2 - 32);
      long long v15 = *(_OWORD *)(a2 - 24);
      uint64_t v16 = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v12 = v9;
        std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](v10, v9);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = a1 + 32 * v8;
        uint64_t v10 = v12;
      }
      while (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v9, (uint64_t)&v14));
      *(void *)uint64_t v12 = v14;
      uint64_t v13 = (void **)(v12 + 8);
      if (*(char *)(v12 + 31) < 0) {
        operator delete(*v13);
      }
      double result = *(double *)&v15;
      *(_OWORD *)uint64_t v13 = v15;
      *(void *)(v12 + 24) = v16;
    }
  }
  return result;
}

void sub_1B235AD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::CTCAlignedDecoder::CTCAlignedDecoder(uint64_t a1, long long *a2)
{
  float v3 = (void *)quasar::Decoder::Decoder(a1, a2);
  *float v3 = &unk_1F0A1C8C0;
  std::string::basic_string[abi:ne180100]<0>(v3 + 56, "▁");
  return a1;
}

void sub_1B235ADEC(_Unwind_Exception *a1)
{
  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void quasar::CTCAlignedDecoder::makeLatticeFromCTCAlignment()
{
}

void sub_1B235B77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  uint64_t v35 = *(std::__shared_weak_count **)(v33 - 136);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(a1);
}

void quasar::CTCAlignedDecoder::forcedAlignCTC(char **a1@<X1>, std::vector<int>::value_type a2@<W2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  __x[0] = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  unint64_t v5 = a1[1] - *a1;
  if (v5)
  {
    int v119 = 2139095040;
    unint64_t v93 = v5 >> 1;
    uint64_t v8 = (v5 >> 1) & 0xFFFFFFFE;
    unint64_t v9 = (int)v8 + 3;
    std::vector<float>::vector(v118, v9, &v119);
    std::vector<float>::vector(&v116, v9, &v119);
    std::vector<int>::vector(&v115, 1uLL, __x);
    *(_DWORD *)long long v94 = 0;
    std::vector<float>::vector(&v112, 1uLL, v94);
    int v92 = v8;
    uint64_t v10 = *a1;
    if (a1[1] != *a1)
    {
      unint64_t v11 = 0;
      do
      {
        std::vector<int>::pointer end = v115.__end_;
        value = v115.__end_cap_.__value_;
        if (v115.__end_ >= v115.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v115.__begin_;
          int64_t v16 = v115.__end_ - v115.__begin_;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62) {
            goto LABEL_134;
          }
          int64_t v18 = (char *)v115.__end_cap_.__value_ - (char *)v115.__begin_;
          if (((char *)v115.__end_cap_.__value_ - (char *)v115.__begin_) >> 1 > v17) {
            unint64_t v17 = v18 >> 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115.__end_cap_, v19);
            std::vector<int>::pointer begin = v115.__begin_;
            std::vector<int>::pointer end = v115.__end_;
          }
          else
          {
            uint64_t v20 = 0;
          }
          unint64_t v21 = (int *)&v20[4 * v16];
          int *v21 = *(_DWORD *)&v10[4 * v11];
          uint64_t v14 = v21 + 1;
          while (end != begin)
          {
            int v22 = *--end;
            *--unint64_t v21 = v22;
          }
          value = (int *)&v20[4 * v19];
          v115.__begin_ = v21;
          v115.__end_ = v14;
          v115.__end_cap_.__value_ = value;
          if (begin)
          {
            operator delete(begin);
            value = v115.__end_cap_.__value_;
          }
        }
        else
        {
          *v115.__end_ = *(_DWORD *)&v10[4 * v11];
          uint64_t v14 = end + 1;
        }
        v115.__end_ = v14;
        if (v14 >= value)
        {
          std::vector<int>::pointer v24 = v115.__begin_;
          uint64_t v25 = v14 - v115.__begin_;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62) {
LABEL_134:
          }
            std::vector<int>::__throw_length_error[abi:ne180100]();
          uint64_t v27 = (char *)value - (char *)v115.__begin_;
          if (v27 >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115.__end_cap_, v28);
            std::vector<int>::pointer v24 = v115.__begin_;
            uint64_t v14 = v115.__end_;
          }
          else
          {
            int v29 = 0;
          }
          uint64_t v30 = (int *)&v29[4 * v25];
          int *v30 = __x[0];
          int v23 = v30 + 1;
          while (v14 != v24)
          {
            int v31 = *--v14;
            *--uint64_t v30 = v31;
          }
          v115.__begin_ = v30;
          v115.__end_ = v23;
          v115.__end_cap_.__value_ = (int *)&v29[4 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *uint64_t v14 = __x[0];
          int v23 = v14 + 1;
        }
        v115.__end_ = v23;
        if (v11)
        {
          if (*(_DWORD *)&(*a1)[4 * v11] == *(_DWORD *)&(*a1)[4 * (v11 - 1)]) {
            float v32 = INFINITY;
          }
          else {
            float v32 = 0.0;
          }
        }
        else
        {
          float v32 = 0.0;
        }
        uint64_t v34 = v113;
        uint64_t v33 = v114;
        if (v113 >= v114)
        {
          uint64_t v36 = v112;
          uint64_t v37 = v113 - v112;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = (char *)v114 - (char *)v112;
          if (((char *)v114 - (char *)v112) >> 1 > v38) {
            unint64_t v38 = v39 >> 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v114, v40);
            uint64_t v36 = v112;
            uint64_t v34 = v113;
          }
          else
          {
            uint64_t v41 = 0;
          }
          long long v42 = (float *)&v41[4 * v37];
          *long long v42 = v32;
          uint64_t v35 = v42 + 1;
          while (v34 != v36)
          {
            int v43 = *((_DWORD *)v34-- - 1);
            *((_DWORD *)v42-- - 1) = v43;
          }
          uint64_t v33 = (float *)&v41[4 * v40];
          long long v112 = v42;
          unint64_t v113 = v35;
          __int32 v114 = v33;
          if (v36)
          {
            operator delete(v36);
            uint64_t v33 = v114;
          }
        }
        else
        {
          float *v113 = v32;
          uint64_t v35 = v34 + 1;
        }
        unint64_t v113 = v35;
        if (v35 >= v33)
        {
          unint64_t v45 = v112;
          uint64_t v46 = v35 - v112;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = (char *)v33 - (char *)v112;
          if (v48 >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            char v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v114, v49);
            unint64_t v45 = v112;
            uint64_t v35 = v113;
          }
          else
          {
            char v50 = 0;
          }
          uint64_t v51 = (int *)&v50[4 * v46];
          int *v51 = v119;
          unint64_t v44 = (float *)(v51 + 1);
          while (v35 != v45)
          {
            int v52 = *((_DWORD *)v35-- - 1);
            *--uint64_t v51 = v52;
          }
          long long v112 = (float *)v51;
          unint64_t v113 = v44;
          __int32 v114 = (float *)&v50[4 * v49];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v35 = v119;
          unint64_t v44 = v35 + 1;
        }
        unint64_t v113 = v44;
        ++v11;
        uint64_t v10 = *a1;
      }
      while (v11 < (a1[1] - *a1) >> 2);
    }
    int v53 = v93 | 1;
    unint64_t v54 = *(int *)(a3 + 20);
    std::vector<int>::size_type v55 = (int)(v93 | 1);
    std::vector<int>::value_type v110 = 0;
    std::vector<int>::vector((std::vector<int> *)v94, v55, &v110);
    std::vector<std::vector<int>>::vector(v111, v54, (uint64_t)v94);
    if (*(void *)v94)
    {
      *(void *)&v94[8] = *(void *)v94;
      operator delete(*(void **)v94);
    }
    LODWORD(v56) = *(_DWORD *)(a3 + 20);
    if ((int)v56 >= 1)
    {
      uint64_t v57 = 0;
      if (v53 <= 1) {
        unsigned int v58 = 1;
      }
      else {
        unsigned int v58 = v93 | 1;
      }
      uint64_t v59 = 4 * v58;
      do
      {
        if (v57)
        {
          uint64_t v60 = v116;
          if ((v93 & 0x80000000) == 0)
          {
            unint64_t v61 = 0;
            long long v62 = (void *)(v111[0] + 24 * v57);
            unint64_t v63 = v112;
            std::vector<int>::pointer v64 = v115.__begin_;
            uint64_t v65 = *(void *)(a3 + 8);
            uint64_t v66 = v116 + 8;
            std::string v67 = (char *)v118[0] + 4;
            do
            {
              float v68 = *(float *)&v67[v61 + 4];
              *(float *)(v66 + v61) = v68;
              float v69 = *(float *)&v67[v61];
              if (v69 < v68)
              {
                *(float *)(v66 + v61) = v69;
                *(_DWORD *)(*v62 + v61) = 1;
                float v68 = v69;
              }
              float v70 = *(float *)&v67[v61 - 4];
              if (v70 <= v63[v61 / 4]) {
                float v70 = v63[v61 / 4];
              }
              if (v70 < v68)
              {
                *(float *)(v66 + v61) = v70;
                *(_DWORD *)(*v62 + v61) = 2;
                float v68 = v70;
              }
              *(float *)(v66 + v61) = v68 - *(float *)(v65 + 4 * *(_DWORD *)(a3 + 24) * (int)v57 + 4 * v64[v61 / 4]);
              v61 += 4;
            }
            while (v59 != v61);
          }
        }
        else
        {
          uint64_t v71 = *(void *)(a3 + 8);
          uint64_t v60 = v116;
          *(float *)(v116 + 8) = -*(float *)(v71 + 4 * __x[0]);
          *(float *)(v60 + 12) = -*(float *)(v71 + 4 * *(int *)*a1);
        }
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v118, (char *)v60, *((uint64_t *)&v116 + 1), (*((void *)&v116 + 1) - v60) >> 2);
        std::vector<float>::vector(v94, v9, &v119);
        if ((void)v116)
        {
          *((void *)&v116 + 1) = v116;
          operator delete((void *)v116);
        }
        long long v116 = *(_OWORD *)v94;
        uint64_t v117 = *(void *)&v94[16];
        ++v57;
        uint64_t v56 = *(int *)(a3 + 20);
      }
      while (v57 < v56);
      std::vector<int>::size_type v55 = v53;
    }
    if (quasar::gLogLevel > 3)
    {
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v95 = 0u;
      memset(v94, 0, sizeof(v94));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"cost of best path in CTC forced alignment: ", 43);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v94);
      LODWORD(v56) = *(_DWORD *)(a3 + 20);
    }
    if ((int)v56 <= 0)
    {
      int64_t v78 = (_DWORD *)a4[1];
    }
    else
    {
      int v72 = 0;
      unsigned int v73 = v92 - (*((float *)v118[0] + v92 + 2) >= *((float *)v118[0] + v55));
      uint64_t v74 = a4 + 2;
      std::string v75 = (_DWORD *)a4[1];
      do
      {
        uint64_t v76 = v73;
        std::vector<int>::pointer v77 = v115.__begin_;
        if ((unint64_t)v75 >= *v74)
        {
          unint64_t v79 = (_DWORD *)*a4;
          uint64_t v80 = (uint64_t)((uint64_t)v75 - *a4) >> 2;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v82 = *v74 - (void)v79;
          if (v82 >> 1 > v81) {
            unint64_t v81 = v82 >> 1;
          }
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v83 = v81;
          }
          if (v83)
          {
            uint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v83);
            unint64_t v79 = (_DWORD *)*a4;
            std::string v75 = (_DWORD *)a4[1];
          }
          else
          {
            uint64_t v84 = 0;
          }
          uint64_t v85 = &v84[4 * v80];
          *(_DWORD *)uint64_t v85 = v77[v76];
          int64_t v78 = v85 + 4;
          while (v75 != v79)
          {
            int v86 = *--v75;
            *((_DWORD *)v85 - 1) = v86;
            v85 -= 4;
          }
          *a4 = (unint64_t)v85;
          a4[1] = (unint64_t)v78;
          a4[2] = (unint64_t)&v84[4 * v83];
          if (v79) {
            operator delete(v79);
          }
        }
        else
        {
          _DWORD *v75 = v115.__begin_[v73];
          int64_t v78 = v75 + 1;
        }
        a4[1] = (unint64_t)v78;
        unsigned int v73 = v76 - *(_DWORD *)(*(void *)(v111[0] + 24 * ((int)v56 + ~v72++)) + 4 * v76);
        LODWORD(v56) = *(_DWORD *)(a3 + 20);
        std::string v75 = v78;
      }
      while (v72 < (int)v56);
    }
    unint64_t v87 = *a4;
    if ((_DWORD *)*a4 != v78)
    {
      uint64_t v88 = v78 - 1;
      if ((unint64_t)(v78 - 1) > v87)
      {
        unint64_t v89 = v87 + 4;
        do
        {
          int v90 = *(_DWORD *)(v89 - 4);
          *(_DWORD *)(v89 - 4) = *v88;
          *v88-- = v90;
          BOOL v91 = v89 >= (unint64_t)v88;
          v89 += 4;
        }
        while (!v91);
      }
    }
    *(void *)long long v94 = v111;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    if (v112)
    {
      unint64_t v113 = v112;
      operator delete(v112);
    }
    if (v115.__begin_)
    {
      v115.__end_ = v115.__begin_;
      operator delete(v115.__begin_);
    }
    if ((void)v116)
    {
      *((void *)&v116 + 1) = v116;
      operator delete((void *)v116);
    }
    if (v118[0])
    {
      v118[1] = v118[0];
      operator delete(v118[0]);
    }
  }
}

void sub_1B235C054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  long long __p = (void *)(v15 - 232);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  unint64_t v17 = *(void **)(v15 - 208);
  if (v17)
  {
    *(void *)(v15 - 200) = v17;
    operator delete(v17);
  }
  int64_t v18 = *(void **)(v15 - 184);
  if (v18)
  {
    *(void *)(v15 - 176) = v18;
    operator delete(v18);
  }
  unint64_t v19 = *(void **)(v15 - 160);
  if (v19)
  {
    *(void *)(v15 - 152) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)(v15 - 136);
  if (v20)
  {
    *(void *)(v15 - 128) = v20;
    operator delete(v20);
  }
  unint64_t v21 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::CTCAlignedDecoder::compactLatticeToString(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  kaldi::WriteCompactLattice(v6, 0, a2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v8);
}

void sub_1B235C2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::CTCAlignedDecoder::latticeToString(uint64_t a1, uint64_t a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  kaldi::WriteLattice(v6, 0, a2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E4FBA408];
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v8);
}

void sub_1B235C42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::CTCAlignedDecoder::getDecoderContextKey@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CTCAlignedDecoder");
}

void std::__shared_ptr_emplace<std::vector<quasar::Token>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D4F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<quasar::Token>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D4F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<std::vector<quasar::Token>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,int,int,int,float,BOOL,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, float *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v10) {
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v18 = 0x124924924924924;
  }
  else {
    unint64_t v18 = v10;
  }
  unint64_t v26 = a1 + 2;
  if (v18) {
    unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v18);
  }
  else {
    unint64_t v19 = 0;
  }
  int v22 = v19;
  int v23 = (std::string *)&v19[224 * v9];
  uint64_t v25 = &v19[224 * v18];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float,BOOL,BOOL>((uint64_t)(a1 + 2), v23, a2, a3, a4, a5, a6, a7, a8);
  std::vector<int>::pointer v24 = &v23[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v22);
  uint64_t v20 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v22);
  return v20;
}

void sub_1B235C650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float,BOOL,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, float *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v28 = *(std::string *)a3;
  }
  int v15 = *a4;
  int v16 = *a5;
  int v17 = *a6;
  float v18 = *a7;
  int v19 = *a8;
  int v20 = *a9;
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  memset(v23, 0, sizeof(v23));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, (long long *)&v28, v15, v16, v17, v19 != 0, v20 != 0, (long long *)v26, v18, (long long *)v24, v23, 0, (long long *)__p, 0, 0);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v23;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_1B235C7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  long long __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeConfidenceDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 58), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[56], a2, 16, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 83), (uint64_t)__p, 1, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 86), (uint64_t)__p, 0, 20, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-expand");
  std::string::basic_string[abi:ne180100]<0>(__p, "If >0, the max amount by which lattices will be expanded.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 89), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-slot-depth");
  std::string::basic_string[abi:ne180100]<0>(__p, "If >0, the max number of words to allow in each slot of the confusion network.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 724, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename for confidence model file, format <FEATURE> <WEIGHT> (one per line)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 66), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "alt-confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename for confidence model file, format <FEATURE> <WEIGHT> (one per line)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 69), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "eps-confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename for epsilon confidence model file, format <FEATURE> <WEIGHT> (one per line)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 72), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "scale-low");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic scaling factor (divisor) for low-end, eg, 2 (for a standard divisor of 12 = 0.08333)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 508, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "scale-high");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic scaling factor (divisor) for high-end, eg, 20 (for a standard divisor of 12 = 0.08333)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 64), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods, default 0.08333");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 62), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "do-acoustic-stability");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of acoustic stability features (at multiple acoustic scales) on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 654, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-alternatives");
  std::string::basic_string[abi:ne180100]<0>(__p, "Control whether or not to process alternatives in the sausage network, or run in 1-Best mode, using true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 650, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-sausage");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of features derived from the structure of the sausage network on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 653, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-rank");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of rank-based features (at multiple acoustic scales) on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 652, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-faninout");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of contextual posterior features related to fan-in and fan-out context on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 651, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-post");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of lattice state posteriors (used for time-based-posterior and other measures) on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 655, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "do-use-confmodel");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of confidence score from the model off, effectively generating the time-based posterior as the confidence score,turn on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 81), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "do-add-epsilon");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of epsilon confidence score on, this will use the supplied epsilon confidence model parameters score,turn on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 82), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "decode-mbr");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, do Minimum Bayes Risk decoding (else, Maximum a Posteriori)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 649, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of NBest hypotheses to produce hypotheses (with confidence) for.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 90), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Prune incoming lattice to this beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 716, (uint64_t)__p, 0, 116, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B235D180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeConfidenceDecoder::finishInit(quasar::OnlineLatticeConfidenceDecoder *this)
{
  int v2 = (quasar::OnlineLatticeConfidenceDecoder *)((char *)this + 32);
  quasar::SystemConfig::Version::Version(&v27, 16, 1);
  if (quasar::SystemConfig::Version::operator>(v2, &v27))
  {
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 56), v2, 0, *((unsigned __int8 *)this + 441), 1);
    uint64_t v3 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 56), "<?>");
    if (v3 != -1)
    {
      int v4 = v3;
      uint64_t v5 = *((int *)this + 116);
      if (v5 && v3 != v5 && quasar::gLogLevel >= 5)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v27 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Silence label is set to ", 24);
        uint64_t v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but does not match the auto-determined silence label ", 54);
        char v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)". Will use latter.", 18);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v27);
      }
      *((_DWORD *)this + 116) = v4;
    }
  }
  if (*((char *)this + 687) < 0) {
    uint64_t v8 = *((void *)this + 84);
  }
  else {
    uint64_t v8 = *((unsigned __int8 *)this + 687);
  }
  if (v8)
  {
    quasar::ModelLoader::readWordBoundaryInfo(*((void **)this + 46), (unsigned int *)this + 116, (uint64_t)this + 664, (uint64_t)this + 688, (uint64_t *)&v27);
    long long v9 = v27;
    long long v27 = 0uLL;
    unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 61);
    *((_OWORD *)this + 30) = v9;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      if (*((void *)&v27 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
      }
    }
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::WordConf,std::allocator<kaldi::quasar::WordConf>,std::string &,void>((uint64_t)this + 528, &v27);
  long long v11 = v27;
  long long v27 = 0uLL;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 76);
  *(_OWORD *)((char *)this + 600) = v11;
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::WordConf,std::allocator<kaldi::quasar::WordConf>,std::string &,void>((uint64_t)this + 552, &v27);
  long long v13 = v27;
  long long v27 = 0uLL;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 78);
  *(_OWORD *)((char *)this + 616) = v13;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::WordConf,std::allocator<kaldi::quasar::WordConf>,std::string &,void>((uint64_t)this + 576, &v27);
  long long v15 = v27;
  long long v27 = 0uLL;
  int v16 = (std::__shared_weak_count *)*((void *)this + 80);
  *(_OWORD *)((char *)this + 632) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  int v17 = (uint64_t **)*((void *)this + 77);
  int v18 = *((char *)v17 + 23);
  if (v18 < 0)
  {
    if (v17[1] != (uint64_t *)4) {
      goto LABEL_34;
    }
    int v17 = (uint64_t **)*v17;
  }
  else if (v18 != 4)
  {
    goto LABEL_34;
  }
  if (*(_DWORD *)v17 == 1280070990)
  {
    uint64_t v19 = *((void *)this + 75);
    uint64_t v20 = *((void *)this + 76);
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)this + 77) = v19;
    unint64_t v21 = (std::__shared_weak_count *)*((void *)this + 78);
    *((void *)this + 78) = v20;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
LABEL_34:
  char v22 = (uint64_t **)*((void *)this + 79);
  int v23 = *((char *)v22 + 23);
  if (v23 < 0)
  {
    if (v22[1] != (uint64_t *)4) {
      goto LABEL_44;
    }
    char v22 = (uint64_t **)*v22;
  }
  else if (v23 != 4)
  {
    goto LABEL_44;
  }
  if (*(_DWORD *)v22 == 1280070990)
  {
    uint64_t v24 = *((void *)this + 75);
    uint64_t v25 = *((void *)this + 76);
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)this + 79) = v24;
    unint64_t v26 = (std::__shared_weak_count *)*((void *)this + 80);
    *((void *)this + 80) = v25;
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
  }
LABEL_44:
  if (quasar::gLogLevel >= 4)
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v27 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Finished initializing OnlineLatticeConfidenceDecoder.", 53);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v27);
  }
}

void sub_1B235D59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::OnlineLatticeConfidenceDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(*a3 + 152) + 24))(*(void *)(*a3 + 152)) != -1)
  {
    v32[24] = 1;
    kaldi::Timer::Reset((kaldi::Timer *)v32, v5);
    uint64_t v33 = 0;
    float v6 = *(float *)(a1 + 716);
    if (v6 > 0.0) {
      kaldi::PruneLattice<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(*(void **)(*a3 + 152), v6);
    }
    uint64_t v7 = *a3;
    uint64_t v9 = *(void *)(*a3 + 152);
    uint64_t v8 = *(void *)(*a3 + 160);
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      uint64_t v7 = *a3;
    }
    if (*(unsigned char *)(v7 + 145))
    {
      kaldi::TopSortCompactLatticeIfNeeded(v9);
      long long v29 = 0u;
      long long v30 = 0u;
      int v31 = 1065353216;
      float v10 = *(float *)(a1 + 496);
      if (v10 == 1.0)
      {
        float v10 = *(float *)(*a3 + 504);
        *(float *)(a1 + 496) = v10;
      }
      float64x2_t v11 = vmulq_n_f64((float64x2_t)xmmword_1B25AC660, (float)(1.0 / v10));
      __asm { FMOV            V1.2D, #1.0 }
      *(float32x2_t *)(a1 + 500) = vcvt_f32_f64(vdivq_f64(_Q1, v11));
      float v17 = *(float *)(a1 + 508);
      if (v17 > 0.0)
      {
        *(float *)(a1 + 500) = 1.0 / v17;
        *(float *)(a1 + 504) = 1.0 / *(float *)(a1 + 512);
      }
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = 0;
      long long v24 = 0u;
      long long v23 = 0u;
      int v25 = 1065353216;
      long long v21 = 0u;
      long long v20 = 0u;
      int v22 = 1065353216;
      std::allocate_shared[abi:ne180100]<fst::SymbolTable,std::allocator<fst::SymbolTable>,char const(&)[15],void>((uint64_t)&__str, "sausage-labels");
    }
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  return 2;
}

void sub_1B235ED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a31);
  if (STACK[0x2A0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2A0]);
  }
  if (STACK[0x2B0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2B0]);
  }
  if (STACK[0x2C0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2C0]);
  }
  if (STACK[0x2D0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2D0]);
  }
  a31 = (uint64_t)&STACK[0x2D8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  uint64_t v33 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v33;
    operator delete(v33);
  }
  long long v34 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v34;
    operator delete(v34);
  }
  long long v35 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v35;
    operator delete(v35);
  }
  a31 = (uint64_t)&STACK[0x338];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::~__hash_table((uint64_t)&STACK[0x350]);
  a31 = (uint64_t)&STACK[0x380];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (uint64_t)&STACK[0x398];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  a31 = (uint64_t)&STACK[0x3B0];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(&STACK[0x3C8]);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(&STACK[0x3D8]);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(&STACK[0x3E8]);
  if (STACK[0x408]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x408]);
  }
  if (STACK[0x418]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x418]);
  }
  if (STACK[0x428]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x428]);
  }
  if (STACK[0x438]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x438]);
  }
  if (STACK[0x448]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x448]);
  }
  if (STACK[0x458]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x458]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x460]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x490]);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v31 - 240);
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeConfidenceDecoder::supportsEager(quasar::OnlineLatticeConfidenceDecoder *this)
{
  return 1;
}

void quasar::OnlineLatticeConfidenceDecoder::~OnlineLatticeConfidenceDecoder(void **this)
{
  quasar::OnlineLatticeConfidenceDecoder::~OnlineLatticeConfidenceDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  *this = &unk_1F0A57F88;
  if (*((char *)this + 711) < 0) {
    operator delete(this[86]);
  }
  if (*((char *)this + 687) < 0) {
    operator delete(this[83]);
  }
  int v2 = (std::__shared_weak_count *)this[80];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[78];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)this[76];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 599) < 0) {
    operator delete(this[72]);
  }
  if (*((char *)this + 575) < 0) {
    operator delete(this[69]);
  }
  if (*((char *)this + 551) < 0) {
    operator delete(this[66]);
  }
  clockid_t v5 = (std::__shared_weak_count *)this[61];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  float v6 = (std::__shared_weak_count *)this[57];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::WordConf,std::allocator<kaldi::quasar::WordConf>,std::string &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x120uLL);
  double result = std::__shared_ptr_emplace<kaldi::quasar::WordConf>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::WordConf>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B235F2FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::WordConf>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::WordConf>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F5D8;
  std::allocator<kaldi::quasar::WordConf>::construct[abi:ne180100]<kaldi::quasar::WordConf,std::string &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B235F36C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::WordConf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::WordConf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::WordConf>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<kaldi::quasar::WordConf>::construct[abi:ne180100]<kaldi::quasar::WordConf,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  kaldi::quasar::WordConf::WordConf(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B235F46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<fst::SymbolTable,std::allocator<fst::SymbolTable>,char const(&)[15],void>(uint64_t a1, char *a2)
{
  uint64_t v3 = operator new(0x28uLL);
  std::__shared_ptr_emplace<fst::SymbolTable>::__shared_ptr_emplace[abi:ne180100]<char const(&)[15],std::allocator<fst::SymbolTable>,0>(v3, a2);
}

void sub_1B235F4D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SymbolTable>::__shared_ptr_emplace[abi:ne180100]<char const(&)[15],std::allocator<fst::SymbolTable>,0>(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E1F0;
  std::allocator<fst::SymbolTable>::construct[abi:ne180100]<fst::SymbolTable,char const(&)[15]>((int)&v2, a1 + 3, __s);
}

void sub_1B235F540(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::SymbolTable>::construct[abi:ne180100]<fst::SymbolTable,char const(&)[15]>(int a1, void *a2, char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  fst::SymbolTable::SymbolTable(a2);
}

void sub_1B235F5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1B235F834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  double result = std::pair<std::string const,kaldi::quasar::ScoreTuple>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B235F8C4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,kaldi::quasar::ScoreTuple>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  return this;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1B235FB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (uint64_t)(a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float v24 = *(float *)(a2 - 16);
          float v25 = *(float *)v11;
          if (v24 >= *(float *)v11)
          {
            if (v25 < v24) {
              return result;
            }
            unint64_t v27 = *(void *)(a2 - 8);
            unint64_t v26 = *(void *)(v11 + 8);
            if (v27 >= v26) {
              return result;
            }
          }
          else
          {
            unint64_t v26 = *(void *)(v11 + 8);
            unint64_t v27 = *(void *)(a2 - 8);
          }
          *(float *)unint64_t v11 = v24;
          *(float *)(a2 - 16) = v25;
          *(void *)(v11 + 8) = v27;
          *(void *)(a2 - 8) = v26;
          return result;
        case 3uLL:
          return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11, v11 + 16, a2 - 16);
        case 4uLL:
          return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11, v11 + 16, v11 + 32, a2 - 16);
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11, v11 + 16, v11 + 32, v11 + 48, a2 - 16);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,std::pair<float,unsigned long> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = v11 + 16 * (v15 >> 1);
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11, v11 + 16 * (v15 >> 1), a2 - 16);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11 + 16, v17 - 16, a2 - 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11 + 32, v11 + 16 + 16 * v16, a2 - 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v17 - 16, v17, v11 + 16 + 16 * v16);
      float v18 = *(float *)v11;
      *(_DWORD *)unint64_t v11 = *(_DWORD *)v17;
      *(float *)uint64_t v17 = v18;
      uint64_t v19 = *(void *)(v11 + 8);
      *(void *)(v11 + 8) = *(void *)(v17 + 8);
      *(void *)(v17 + 8) = v19;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11 + 16 * (v15 >> 1), v11, a2 - 16);
      if (a5) {
        goto LABEL_16;
      }
    }
    float v20 = *(float *)(v11 - 16);
    if (v20 >= *(float *)v11 && (*(float *)v11 < v20 || *(void *)(v11 - 8) >= *(void *)(v11 + 8)))
    {
      double result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned long> *,std::__less<void,void> &>(v11, a2);
      unint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned long> *,std::__less<void,void> &>(v11, a2);
    if ((v22 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11, v21);
    unint64_t v11 = v21 + 16;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v21 + 16, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v21;
      if (v23) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v23)
    {
LABEL_19:
      double result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,false>(v10, v21, a3, -v13, a5 & 1);
      unint64_t v11 = v21 + 16;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11, a2);
  }
  else
  {
    return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v11, a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 16;
  if (result + 16 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = v2;
    float v6 = *(float *)(v5 + 16);
    float v7 = *(float *)v5;
    if (v6 >= *(float *)v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      unint64_t v8 = *(void *)(v5 + 24);
      unint64_t v9 = *(void *)(v5 + 8);
      if (v8 >= v9) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v8 = *(void *)(v5 + 24);
      unint64_t v9 = *(void *)(v5 + 8);
    }
    *(float *)(v5 + 16) = v7;
    *(void *)(v4 + 8) = v9;
    uint64_t v10 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v11 = v3;
    while (1)
    {
      float v12 = *(float *)(result + v11 - 16);
      if (v6 >= v12) {
        break;
      }
      unint64_t v13 = *(void *)(result + v11 - 8);
LABEL_12:
      v5 -= 16;
      uint64_t v14 = result + v11;
      *(float *)uint64_t v14 = v12;
      *(void *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        uint64_t v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      uint64_t v10 = result + v11;
      unint64_t v13 = *(void *)(result + v11 - 8);
      if (v8 >= v13) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    uint64_t v10 = v5;
LABEL_18:
    *(float *)uint64_t v10 = v6;
    *(void *)(v10 + 8) = v8;
LABEL_19:
    uint64_t v2 = v4 + 16;
    v3 += 16;
  }
  while (v4 + 16 != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 16;
    if (result + 16 != a2)
    {
      for (uint64_t i = result + 8; ; i += 16)
      {
        uint64_t v4 = result;
        double result = v2;
        float v5 = *(float *)(v4 + 16);
        float v6 = *(float *)v4;
        if (v5 < *(float *)v4) {
          break;
        }
        if (v6 >= v5)
        {
          unint64_t v7 = *(void *)(v4 + 24);
          if (v7 < *(void *)(v4 + 8)) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 16;
        if (result + 16 == a2) {
          return result;
        }
      }
      unint64_t v7 = *(void *)(v4 + 24);
LABEL_6:
      for (uint64_t j = i; ; j -= 16)
      {
        *(float *)(j + 8) = v6;
        *(void *)(j + 16) = *(void *)j;
        float v6 = *(float *)(j - 24);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(void *)(j - 16))) {
          break;
        }
      }
      *(float *)(j - 8) = v5;
      *(void *)uint64_t j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3 = *(float *)a2;
  float v4 = *(float *)a1;
  if (*(float *)a2 >= *(float *)a1 && (v4 < v3 || *(void *)(a2 + 8) >= *(void *)(a1 + 8)))
  {
    float v9 = *(float *)a3;
    if (*(float *)a3 >= v3)
    {
      if (v3 < v9) {
        return 0;
      }
      unint64_t v11 = *(void *)(a3 + 8);
      unint64_t v10 = *(void *)(a2 + 8);
      if (v11 >= v10) {
        return 0;
      }
    }
    else
    {
      unint64_t v10 = *(void *)(a2 + 8);
      unint64_t v11 = *(void *)(a3 + 8);
    }
    *(float *)a2 = v9;
    *(float *)a3 = v3;
    *(void *)(a2 + 8) = v11;
    *(void *)(a3 + 8) = v10;
    float v12 = *(float *)a2;
    float v13 = *(float *)a1;
    if (*(float *)a2 >= *(float *)a1)
    {
      if (v13 < v12) {
        return 1;
      }
      unint64_t v15 = *(void *)(a2 + 8);
      unint64_t v14 = *(void *)(a1 + 8);
      if (v15 >= v14) {
        return 1;
      }
    }
    else
    {
      unint64_t v14 = *(void *)(a1 + 8);
      unint64_t v15 = *(void *)(a2 + 8);
    }
    *(float *)a1 = v12;
    *(float *)a2 = v13;
    *(void *)(a1 + 8) = v15;
    uint64_t result = 2;
    *(void *)(a2 + 8) = v14;
  }
  else
  {
    float v5 = *(float *)a3;
    if (*(float *)a3 < v3)
    {
      unint64_t v6 = *(void *)(a3 + 8);
LABEL_6:
      *(float *)a1 = v5;
      *(float *)a3 = v4;
      uint64_t v7 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v6;
      *(void *)(a3 + 8) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      unint64_t v6 = *(void *)(a3 + 8);
      unint64_t v16 = *(void *)(a2 + 8);
      if (v6 < v16) {
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v16 = *(void *)(a2 + 8);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    unint64_t v17 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v16;
    *(void *)(a2 + 8) = v17;
    float v18 = *(float *)a3;
    if (*(float *)a3 >= v4)
    {
      if (v4 < v18) {
        return 1;
      }
      unint64_t v19 = *(void *)(a3 + 8);
      if (v19 >= v17) {
        return 1;
      }
    }
    else
    {
      unint64_t v19 = *(void *)(a3 + 8);
    }
    *(float *)a2 = v18;
    *(float *)a3 = v4;
    *(void *)(a2 + 8) = v19;
    uint64_t result = 2;
    *(void *)(a3 + 8) = v17;
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned long> *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  float v2 = *(float *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  float v4 = *(float *)(a2 - 16);
  if (*(float *)a1 >= v4 && (v4 < v2 || v3 >= *(void *)(a2 - 8)))
  {
    for (unint64_t i = a1 + 16; i < a2 && v2 >= *(float *)i && (*(float *)i < v2 || v3 >= *(void *)(i + 8)); i += 16)
      ;
  }
  else
  {
    unint64_t i = a1;
    do
    {
      float v6 = *(float *)(i + 16);
      i += 16;
      float v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(void *)(i + 8)));
  }
  if (i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(void *)(a2 + 8); a2 -= 16)
    {
      float v8 = *(float *)(a2 - 16);
      float v4 = v8;
    }
  }
  if (i < a2)
  {
    float v9 = *(float *)i;
    float v10 = *(float *)a2;
    do
    {
      *(float *)unint64_t i = v10;
      *(float *)a2 = v9;
      float v11 = *(float *)(i + 16);
      i += 16;
      float v9 = v11;
      uint64_t v12 = *(void *)(i - 8);
      *(void *)(i - 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(void *)(i + 8)))
      {
        float v13 = *(float *)(i + 16);
        i += 16;
        float v9 = v13;
      }
      do
      {
        do
        {
          float v14 = *(float *)(a2 - 16);
          a2 -= 16;
          float v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(void *)(a2 + 8));
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(i - 16);
    *(void *)(a1 + 8) = *(void *)(i - 8);
  }
  *(float *)(i - 16) = v2;
  *(void *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned long> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  float v3 = *(float *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  while (1)
  {
    float v5 = *(float *)(a1 + v2 + 16);
    if (v5 >= v3 && (v3 < v5 || *(void *)(a1 + v2 + 24) >= v4)) {
      break;
    }
    v2 += 16;
  }
  unint64_t v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      float v7 = *(float *)(a2 - 16);
      a2 -= 16;
      float v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(void *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        float v9 = *(float *)(a2 - 16);
        a2 -= 16;
        float v10 = v9;
        if (v9 < v3) {
          break;
        }
        if (v3 < v10) {
          goto LABEL_19;
        }
      }
      while (*(void *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    unint64_t v13 = a1 + v2 + 16;
  }
  else
  {
    float v12 = *(float *)a2;
    unint64_t v13 = a1 + v2 + 16;
    unint64_t v14 = a2;
    do
    {
      *(float *)unint64_t v13 = v12;
      *(float *)unint64_t v14 = v5;
      uint64_t v15 = *(void *)(v13 + 8);
      *(void *)(v13 + 8) = *(void *)(v14 + 8);
      *(void *)(v14 + 8) = v15;
      do
      {
        do
        {
          float v16 = *(float *)(v13 + 16);
          v13 += 16;
          float v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(void *)(v13 + 8) < v4);
      do
      {
        float v17 = *(float *)(v14 - 16);
        v14 -= 16;
        float v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(void *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v13 - 16);
    *(void *)(a1 + 8) = *(void *)(v13 - 8);
  }
  *(float *)(v13 - 16) = v3;
  *(void *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(float *)(a2 - 16);
      float v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        unint64_t v8 = *(void *)(a1 + 8);
        unint64_t v9 = *(void *)(a2 - 8);
LABEL_30:
        *(float *)a1 = v6;
        *(float *)(a2 - 16) = v7;
        *(void *)(a1 + 8) = v9;
        *(void *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        unint64_t v9 = *(void *)(a2 - 8);
        unint64_t v8 = *(void *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  float v14 = *(float *)v11;
  float v15 = *(float *)v10;
  if (*(float *)v11 >= *(float *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v16 = *(void *)(v11 + 8);
    unint64_t v17 = *(void *)(v10 + 8);
  }
  *(float *)uint64_t v11 = v15;
  *(void *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    float v21 = *(float *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      unint64_t v22 = *(void *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 32;
LABEL_20:
        *(float *)uint64_t v18 = v14;
        *(void *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      unint64_t v22 = *(void *)(v20 + 24);
    }
    v10 -= 16;
    *(float *)(v20 + 32) = v21;
    *(void *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a2, a3);
  float v9 = *(float *)a4;
  float v10 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    unint64_t v12 = *(void *)(a4 + 8);
    unint64_t v11 = *(void *)(a3 + 8);
    if (v12 >= v11) {
      return result;
    }
  }
  else
  {
    unint64_t v11 = *(void *)(a3 + 8);
    unint64_t v12 = *(void *)(a4 + 8);
  }
  *(float *)a3 = v9;
  *(float *)a4 = v10;
  *(void *)(a3 + 8) = v12;
  *(void *)(a4 + 8) = v11;
  float v13 = *(float *)a3;
  float v14 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v14 < v13) {
      return result;
    }
    unint64_t v16 = *(void *)(a3 + 8);
    unint64_t v15 = *(void *)(a2 + 8);
    if (v16 >= v15) {
      return result;
    }
  }
  else
  {
    unint64_t v15 = *(void *)(a2 + 8);
    unint64_t v16 = *(void *)(a3 + 8);
  }
  *(float *)a2 = v13;
  *(float *)a3 = v14;
  *(void *)(a2 + 8) = v16;
  *(void *)(a3 + 8) = v15;
  float v17 = *(float *)a2;
  float v18 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    unint64_t v19 = *(void *)(a1 + 8);
    unint64_t v20 = *(void *)(a2 + 8);
LABEL_15:
    *(float *)a1 = v17;
    *(float *)a2 = v18;
    *(void *)(a1 + 8) = v20;
    *(void *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    unint64_t v20 = *(void *)(a2 + 8);
    unint64_t v19 = *(void *)(a1 + 8);
    if (v20 < v19) {
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a2, a3, a4);
  float v11 = *(float *)a5;
  float v12 = *(float *)a4;
  if (*(float *)a5 >= *(float *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    unint64_t v14 = *(void *)(a5 + 8);
    unint64_t v13 = *(void *)(a4 + 8);
    if (v14 >= v13) {
      return result;
    }
  }
  else
  {
    unint64_t v13 = *(void *)(a4 + 8);
    unint64_t v14 = *(void *)(a5 + 8);
  }
  *(float *)a4 = v11;
  *(float *)a5 = v12;
  *(void *)(a4 + 8) = v14;
  *(void *)(a5 + 8) = v13;
  float v15 = *(float *)a4;
  float v16 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v16 < v15) {
      return result;
    }
    unint64_t v18 = *(void *)(a4 + 8);
    unint64_t v17 = *(void *)(a3 + 8);
    if (v18 >= v17) {
      return result;
    }
  }
  else
  {
    unint64_t v17 = *(void *)(a3 + 8);
    unint64_t v18 = *(void *)(a4 + 8);
  }
  *(float *)a3 = v15;
  *(float *)a4 = v16;
  *(void *)(a3 + 8) = v18;
  *(void *)(a4 + 8) = v17;
  float v19 = *(float *)a3;
  float v20 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v20 < v19) {
      return result;
    }
    unint64_t v22 = *(void *)(a3 + 8);
    unint64_t v21 = *(void *)(a2 + 8);
    if (v22 >= v21) {
      return result;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(a2 + 8);
    unint64_t v22 = *(void *)(a3 + 8);
  }
  *(float *)a2 = v19;
  *(float *)a3 = v20;
  *(void *)(a2 + 8) = v22;
  *(void *)(a3 + 8) = v21;
  float v23 = *(float *)a2;
  float v24 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    unint64_t v25 = *(void *)(a1 + 8);
    unint64_t v26 = *(void *)(a2 + 8);
LABEL_9:
    *(float *)a1 = v23;
    *(float *)a2 = v24;
    *(void *)(a1 + 8) = v26;
    *(void *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    unint64_t v26 = *(void *)(a2 + 8);
    unint64_t v25 = *(void *)(a1 + 8);
    if (v26 < v25) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 16 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      while (1)
      {
        float v15 = *(float *)v14;
        float v16 = *(float *)a1;
        if (*(float *)v14 >= *(float *)a1)
        {
          if (v16 < v15) {
            goto LABEL_12;
          }
          unint64_t v17 = *(void *)(v14 + 8);
          unint64_t v18 = *(void *)(a1 + 8);
          if (v17 >= v18) {
            goto LABEL_12;
          }
        }
        else
        {
          unint64_t v17 = *(void *)(v14 + 8);
          unint64_t v18 = *(void *)(a1 + 8);
        }
        *(float *)uint64_t v14 = v16;
        *(float *)a1 = v15;
        *(void *)(v14 + 8) = v18;
        *(void *)(a1 + 8) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a4, v9, a1);
LABEL_12:
        v14 += 16;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      uint64_t v19 = (unint64_t)v8 >> 4;
      uint64_t v20 = a2 - 16;
      do
      {
        float v21 = *(float *)a1;
        uint64_t v22 = *(void *)(a1 + 8);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *(float *)uint64_t v23 = v21;
          *(void *)(v23 + 8) = v22;
        }
        else
        {
          *(_DWORD *)uint64_t v23 = *(_DWORD *)v20;
          *(void *)(v23 + 8) = *(void *)(v20 + 8);
          *(float *)uint64_t v20 = v21;
          *(void *)(v20 + 8) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v20 -= 16;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = result + 16 * v7;
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        float v10 = *(float *)(v8 + 16);
        if (*(float *)v8 < v10 || v10 >= *(float *)v8 && *(void *)(result + 16 * v7 + 8) < *(void *)(v8 + 24))
        {
          v8 += 16;
          uint64_t v7 = v9;
        }
      }
      float v11 = *(float *)v8;
      float v12 = *(float *)a4;
      if (*(float *)v8 >= *(float *)a4)
      {
        if (v12 >= v11)
        {
          unint64_t v14 = *(void *)(v8 + 8);
          unint64_t v13 = *(void *)(a4 + 8);
          if (v14 < v13) {
            return result;
          }
        }
        else
        {
          unint64_t v13 = *(void *)(a4 + 8);
          unint64_t v14 = *(void *)(v8 + 8);
        }
        *(float *)a4 = v11;
        *(void *)(a4 + 8) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v16 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v15 = result + 16 * v7;
            uint64_t v17 = v16 + 2;
            if (v17 < a3)
            {
              float v18 = *(float *)(v15 + 16);
              if (*(float *)v15 < v18
                || v18 >= *(float *)v15 && *(void *)(result + 16 * v7 + 8) < *(void *)(v15 + 24))
              {
                v15 += 16;
                uint64_t v7 = v17;
              }
            }
            float v19 = *(float *)v15;
            if (*(float *)v15 < v12) {
              break;
            }
            unint64_t v20 = *(void *)(v15 + 8);
            if (v12 >= v19 && v20 < v13) {
              break;
            }
            *(float *)uint64_t v8 = v19;
            *(void *)(v8 + 8) = v20;
            uint64_t v8 = v15;
            if (v5 < v7) {
              goto LABEL_14;
            }
          }
        }
        uint64_t v15 = v8;
LABEL_14:
        *(float *)uint64_t v15 = v12;
        *(void *)(v15 + 8) = v13;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 += 16 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      float v10 = *(float *)(a1 + 16);
      if (*(float *)a1 < v10 || v10 >= *(float *)a1 && *(void *)(v6 + 16 * v7 + 8) < *(void *)(a1 + 24))
      {
        a1 += 16;
        uint64_t v3 = v9;
      }
    }
    float result = *(float *)a1;
    *(_DWORD *)uint64_t v6 = *(_DWORD *)a1;
    *(void *)(v6 + 8) = *(void *)(a1 + 8);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 16 * (v4 >> 1);
    float v7 = *(float *)v6;
    float v8 = *(float *)(a2 - 16);
    if (*(float *)v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      unint64_t v10 = *(void *)(result + 16 * v5 + 8);
      unint64_t v9 = *(void *)(a2 - 8);
      if (v10 >= v9) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *(void *)(a2 - 8);
      unint64_t v10 = *(void *)(v6 + 8);
    }
    *(float *)(a2 - 16) = v7;
    *(void *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v12 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v11 = result + 16 * v5;
        float v13 = *(float *)v11;
        if (*(float *)v11 >= v8)
        {
          if (v8 < v13) {
            break;
          }
          unint64_t v14 = *(void *)(result + 16 * v5 + 8);
          if (v14 >= v9) {
            break;
          }
        }
        else
        {
          unint64_t v14 = *(void *)(v11 + 8);
        }
        *(float *)uint64_t v6 = v13;
        *(void *)(v6 + 8) = v14;
        uint64_t v6 = result + 16 * v5;
        if (v12 <= 1) {
          goto LABEL_13;
        }
      }
    }
    uint64_t v11 = v6;
LABEL_13:
    *(float *)uint64_t v11 = v8;
    *(void *)(v11 + 8) = v9;
  }
  return result;
}

void *BM_malloc(size_t a1)
{
  uint64_t v2 = *(void ***)mallocListTLS();
  if (!v2) {
    operator new();
  }
  uint64_t v3 = (void *)freeListsTLS();
  unint64_t v4 = (void *)*v3;
  if (!*v3)
  {
    unint64_t v5 = v3;
    unint64_t v4 = malloc_type_calloc(0x10uLL, 8uLL, 0x2004093837F09uLL);
    void *v5 = v4;
  }
  uint64_t v6 = (void *)allocCountsTLS();
  float v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    float v8 = v6;
    float v7 = malloc_type_calloc(0x10uLL, 4uLL, 0x100004052888210uLL);
    *float v8 = v7;
  }
  size_t v9 = a1 - 1;
  if (a1 - 1 < 0x78)
  {
    unint64_t v11 = (v9 >> 3) + 1;
    float result = (void *)v4[v11];
    if (!result)
    {
      size_t v12 = 0x100000 - 8 * (0x20000 % v11);
      float result = malloc_type_malloc(v12, 0xA6B1BAA0uLL);
      if (!result) {
        return result;
      }
      float v13 = result;
      unint64_t v14 = (unint64_t)v2[2];
      uint64_t v15 = v2[1];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = ((char *)v15 - (unsigned char *)*v2) >> 3;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v14 - (void)*v2;
        uint64_t v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
          uint64_t v19 = v17 + 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          float v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v2 + 2), v20);
        }
        else {
          float v21 = 0;
        }
        uint64_t v22 = &v21[8 * v17];
        uint64_t v23 = &v21[8 * v20];
        *(void *)uint64_t v22 = v13;
        uint64_t v16 = v22 + 8;
        unint64_t v25 = (char *)*v2;
        float v24 = (char *)v2[1];
        if (v24 != *v2)
        {
          do
          {
            uint64_t v26 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v22 - 1) = v26;
            v22 -= 8;
          }
          while (v24 != v25);
          float v24 = (char *)*v2;
        }
        const quasar::SystemConfig::Version *v2 = v22;
        v2[1] = v16;
        v2[2] = v23;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *uint64_t v15 = result;
        uint64_t v16 = v15 + 1;
      }
      size_t v27 = ~(v9 >> 3);
      v2[1] = v16;
      float result = (void *)((char *)v13 + v12);
      unint64_t v28 = (unint64_t)&v13[v27] + v12;
      unint64_t v29 = v4[v11];
      if (v28 >= (unint64_t)v13)
      {
        uint64_t v30 = 8 * v27;
        do
        {
          float result = (void *)((char *)result + v30);
          *float result = v29;
          v4[v11] = result;
          unint64_t v29 = v28;
          v28 += v30;
        }
        while (&result[(unint64_t)v30 / 8] >= v13);
      }
      else
      {
        float result = (void *)v4[v11];
      }
      ++v7[v11];
    }
    v4[v11] = *result;
  }
  else
  {
    return malloc_type_malloc(a1, 0x99638375uLL);
  }
  return result;
}

void BM_free(void *a1, uint64_t a2)
{
  unint64_t v4 = (char **)freeListsTLS();
  unint64_t v5 = *v4;
  if (!*v4)
  {
    unint64_t v5 = (char *)malloc_type_calloc(0x10uLL, 8uLL, 0x2004093837F09uLL);
    void *v4 = v5;
  }
  if ((unint64_t)(a2 - 1) < 0x78)
  {
    uint64_t v6 = &v5[(a2 - 1) & 0xFFFFFFFFFFFFFFF8];
    *a1 = *((void *)v6 + 1);
    *((void *)v6 + 1) = a1;
  }
  else
  {
    free(a1);
  }
}

void BM_freeThread()
{
  v0 = (void ****)mallocListTLS();
  uint64_t v1 = *v0;
  if (!*v0) {
    operator new();
  }
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      free(v4);
    }
    while (v2 != v3);
    uint64_t v2 = *v1;
  }
  v1[1] = v2;
  TLSWrapper<std::vector<void *>,1,true>::release(v0);
  unint64_t v5 = (void **)allocCountsTLS();
  if (*v5)
  {
    free(*v5);
    char *v5 = 0;
  }
  uint64_t v6 = (void **)freeListsTLS();
  if (*v6)
  {
    free(*v6);
    char *v6 = 0;
  }
}

void *TLSWrapper<std::vector<void *>,1,true>::release(void *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    float result = (void *)MEMORY[0x1B3EA8670](v1, 0x80C40D6874129);
    void *v2 = 0;
  }
  return result;
}

uint64_t BM_printstats()
{
  uint64_t result = allocCountsTLS();
  uint64_t v1 = *(void *)result;
  if (!*(void *)result)
  {
    uint64_t v2 = (void *)result;
    uint64_t result = (uint64_t)malloc_type_calloc(0x10uLL, 4uLL, 0x100004052888210uLL);
    uint64_t v1 = result;
    void *v2 = result;
  }
  uint64_t v3 = 0;
  unint64_t v4 = (FILE **)MEMORY[0x1E4F143C8];
  do
  {
    if (*(_DWORD *)(v1 + 4 * v3)) {
      uint64_t result = fprintf(*v4, "%u blocks of %u-word chunks\n", *(_DWORD *)(v1 + 4 * v3), v3);
    }
    ++v3;
  }
  while (v3 != 16);
  return result;
}

void quasar::QuasarEuclid::~QuasarEuclid(void **this)
{
  *this = &unk_1F0A52370;
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  unint64_t v4 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void quasar::QuasarEuclid::createQuasarEuclid(uint64_t a1, int a2, unsigned int a3)
{
  void v37[2] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v34, "euclid");
  if (a3 < 2)
  {
    if (a2 != 1)
    {
      if (!a2)
      {
        if ((v36 & 0x80u) == 0) {
          size_t v5 = v36;
        }
        else {
          size_t v5 = *(void *)v35;
        }
        uint64_t v6 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 1);
        if (SBYTE7(v18) < 0) {
          uint64_t v6 = (void **)__p[0];
        }
        if (v5)
        {
          if ((v36 & 0x80u) == 0) {
            float v7 = (void **)&v34;
          }
          else {
            float v7 = v34;
          }
          memmove(v6, v7, v5);
        }
        *(_WORD *)((char *)v6 + v5) = 46;
        float v8 = std::string::append((std::string *)__p, "grapheme-encoder");
        size_t v9 = (void **)v8->__r_.__value_.__r.__words[0];
        v37[0] = v8->__r_.__value_.__l.__size_;
        *(void *)((char *)v37 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if ((char)v36 < 0) {
          operator delete(v34);
        }
        long long v34 = v9;
        *(void *)long long v35 = v37[0];
        *(void *)&v35[7] = *(void *)((char *)v37 + 7);
        unsigned __int8 v36 = v10;
        if (SBYTE7(v18) < 0) {
          operator delete(__p[0]);
        }
        operator new();
      }
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unrecognized EuclidEncoderType:", 31);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if ((v36 & 0x80u) == 0) {
      size_t v11 = v36;
    }
    else {
      size_t v11 = *(void *)v35;
    }
    size_t v12 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 1);
    if (SBYTE7(v18) < 0) {
      size_t v12 = (void **)__p[0];
    }
    if (v11)
    {
      if ((v36 & 0x80u) == 0) {
        float v13 = (void **)&v34;
      }
      else {
        float v13 = v34;
      }
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)v12 + v11) = 46;
    unint64_t v14 = std::string::append((std::string *)__p, "phoneme-encoder");
    uint64_t v15 = (void **)v14->__r_.__value_.__r.__words[0];
    v37[0] = v14->__r_.__value_.__l.__size_;
    *(void *)((char *)v37 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((char)v36 < 0) {
      operator delete(v34);
    }
    long long v34 = v15;
    *(void *)long long v35 = v37[0];
    *(void *)&v35[7] = *(void *)((char *)v37 + 7);
    unsigned __int8 v36 = v16;
    if (SBYTE7(v18) < 0) {
      operator delete(__p[0]);
    }
    operator new();
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unrecognized EuclidInitFlag: ", 29);
  std::ostream::operator<<();
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B2361804()
{
  MEMORY[0x1B3EA8670](v0, 0x10B3C40FFC5DC83);
  JUMPOUT(0x1B2361868);
}

void sub_1B2361830(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B2361868);
}

void sub_1B2361854(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B2361864(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(exception_object);
}

void quasar::QuasarEuclid::registerParams(quasar::QuasarEuclid *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "version");
  std::string::basic_string[abi:ne180100]<0>(__p, "Euclid asset version in semantic versioning format(MAJOR.MINOR.PATCH)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2361920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::QuasarEuclid::QuasarEuclid(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)a1 = &unk_1F0A52370;
  *(unsigned char *)(a1 + 8) = a6;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), "0.0.0");
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (*(char *)(a3 + 23) >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v9 = *(void *)(a3 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v9 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if (*(char *)(a3 + 23) >= 0) {
      size_t v11 = (const void *)a3;
    }
    else {
      size_t v11 = *(const void **)a3;
    }
    memmove(p_p, v11, v9);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v9) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::QuasarEuclid::registerParams((quasar::QuasarEuclid *)a1, (quasar::SystemConfig *)a2);
  quasar::SystemConfig::readPtree((uint64_t)a2, a3);
}

void sub_1B2361D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    quasar::QuasarEuclid::QuasarEuclid(a13);
  }
  JUMPOUT(0x1B2361D5CLL);
}

void sub_1B2361D40(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if ((a11 & 0x80000000) == 0)
  {
    if (*(char *)(v12 + 143) < 0) {
      operator delete(*v13);
    }
    if (*(char *)(v12 + 119) < 0) {
      operator delete(*a5);
    }
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((uint64_t *)va);
    if (*(char *)(v12 + 71) < 0) {
      operator delete(*a3);
    }
    uint64_t v15 = *(void *)(v12 + 40);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    uint64_t v16 = *(void *)(v12 + 24);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B2361D68);
}

void sub_1B2361D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 + 143) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v22 + 119) < 0) {
    operator delete(*a12);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v22 + 71) < 0) {
    operator delete(*a10);
  }
  long long v25 = *(std::__shared_weak_count **)(v22 + 40);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  long long v26 = *(std::__shared_weak_count **)(v22 + 24);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(a1);
}

void sub_1B2361D74()
{
}

void *std::shared_ptr<quasar::TextEmbedder>::operator=[abi:ne180100]<quasar::TextEmbedder,std::default_delete<quasar::TextEmbedder>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::TextEmbedder>::shared_ptr[abi:ne180100]<quasar::TextEmbedder,std::default_delete<quasar::TextEmbedder>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void quasar::loadNearestNeighborSearch(uint64_t a1, const void **a2, char a3)
{
  char v13 = a3;
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  long long v6 = &v10;
  std::string::basic_string[abi:ne180100]((uint64_t)&v10, v5 + 1);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v7 = a2;
    }
    else {
      char v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
  float v8 = std::string::append(&v10, "nearest-neighbor-search");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::getPtreeOptional(a1, (uint64_t)__p);
}

void sub_1B2361F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::QuasarEuclid::findNearestNeighbors(uint64_t a1@<X0>, long long *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  if (!*(void *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 144))
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v22 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"No nearest neighbor created due to EuclidInitFlag during init. Try to reload the asset", 86);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
      }
      quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v22);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v17 = 0u;
      int v18 = 1065353216;
      quasar::SystemConfig::readJsonFile((uint64_t)&v22, a1 + 96, &v19, (uint64_t)__p, 1, 1);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
      __p[0] = &v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      quasar::loadNearestNeighborSearch((uint64_t)&v22, (const void **)(a1 + 120), *(unsigned char *)(a1 + 8));
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, "No nearest neighbor asset configured");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v22);
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3 >= 1)
  {
    quasar::QuasarEuclid::preprocessInput(a1, (uint64_t)a2, 1, __p);
    std::string::size_type v12 = (void *)BYTE7(v17);
    char v13 = BYTE7(v17);
    if (SBYTE7(v17) < 0) {
      std::string::size_type v12 = __p[1];
    }
    if (v12)
    {
      quasar::QuasarEuclid::computeEmbeddingVectorWithPreprocessedInput((void *)a1, (uint64_t)__p, (uint64_t)&v22);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      if (a4) {
        uint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v19, a2);
      }
      quasar::NearestNeighborSearch::findNearestNeighbors(*(void *)(a1 + 32), (uint64_t)&v22, a3, &v19, a5, &v14);
      std::vector<std::pair<std::string,float>>::__vdeallocate(a6);
      *(_OWORD *)a6 = v14;
      a6[2] = v15;
      uint64_t v15 = 0;
      long long v14 = 0uLL;
      long long v39 = (void **)&v14;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v39);
      *(void *)&long long v14 = &v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
      if ((_BYTE)v24) {
        kaldi::CuVector<float>::~CuVector(&v22);
      }
      char v13 = BYTE7(v17);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
}

uint64_t quasar::QuasarEuclid::preprocessInput@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a4, a3);
}

void sub_1B2362308(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::QuasarEuclid::computeEmbeddingVectorWithPreprocessedInput@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 32) = 0;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    long long v6 = result;
    (*(void (**)(void *__return_ptr))(*result + 24))(v7);
    uint64_t result = std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((void *)a3, (uint64_t)v7);
    if (v8) {
      uint64_t result = kaldi::CuVector<float>::~CuVector(v7);
    }
    if (!*(unsigned char *)(a3 + 32))
    {
      quasar::QuasarEuclid::inferEmbeddingVectorWithPreprocessedInput(v6, a2, (uint64_t)v7);
      uint64_t result = std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((void *)a3, (uint64_t)v7);
      if (v8) {
        return kaldi::CuVector<float>::~CuVector(v7);
      }
    }
  }
  return result;
}

void sub_1B23623F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    kaldi::CuVector<float>::~CuVector(&a10);
  }
  if (*(unsigned char *)(v14 + 32)) {
    kaldi::CuVector<float>::~CuVector((void *)v14);
  }
  _Unwind_Resume(exception_object);
}

float quasar::QuasarEuclid::computeDistance(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  float v4 = -1.0;
  if (v3)
  {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a3 + 8);
    }
    if (v6)
    {
      quasar::QuasarEuclid::computeEmbeddingVector(a1, a2, (uint64_t)v11);
      quasar::QuasarEuclid::computeEmbeddingVector(a1, a3, (uint64_t)v9);
      if (v12 && v10) {
        float v4 = quasar::computeL2Dist((uint64_t)v11, (uint64_t)v9);
      }
      if (v10) {
        kaldi::CuVector<float>::~CuVector(v9);
      }
      if (v12) {
        kaldi::CuVector<float>::~CuVector(v11);
      }
    }
  }
  return v4;
}

void sub_1B23624F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a13) {
    kaldi::CuVector<float>::~CuVector(&a9);
  }
  if (a19) {
    kaldi::CuVector<float>::~CuVector(&a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::QuasarEuclid::computeEmbeddingVector(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  LOBYTE(v8[0]) = 0;
  char v9 = 0;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    quasar::QuasarEuclid::preprocessInput((uint64_t)a1, a2, 0, __p);
    quasar::QuasarEuclid::computeEmbeddingVectorWithPreprocessedInput(a1, (uint64_t)__p, a3);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::__optional_move_base<kaldi::CuVector<float>,false>::__optional_move_base[abi:ne180100](a3, (uint64_t)v8);
  }
  if (v9) {
    kaldi::CuVector<float>::~CuVector(v8);
  }
}

void sub_1B23625C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a19) {
    kaldi::CuVector<float>::~CuVector(&a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QuasarEuclid::getMaxInputLength(quasar::TextEmbedder **this)
{
  return quasar::TextEmbedder::getMaxInputLength(this[2]);
}

uint64_t quasar::QuasarEuclid::getEmbeddingDim(quasar::TextEmbedder **this)
{
  return quasar::TextEmbedder::getEmbeddingDim(this[2]);
}

std::string *quasar::QuasarEuclid::getAssetVersionInVector@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[9], this[10], 0xAAAAAAAAAAAAAAABLL * (((char *)this[10] - (char *)this[9]) >> 3));
}

void *quasar::QuasarEuclid::inferEmbeddingVectorWithPreprocessedInput@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    v6[1] = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    v6[0] = &unk_1F0A517C0;
    quasar::TextEmbedder::computeTextEmbeddingVector((_DWORD *)result[2], a2, (uint64_t)v6);
    char v5 = v7;
    if (v7)
    {
      kaldi::CuVector<float>::CuVector((void *)a3, (uint64_t)v6);
      char v5 = 1;
    }
    else
    {
      *(unsigned char *)a3 = 0;
    }
    *(unsigned char *)(a3 + 32) = v5;
    return kaldi::CuVector<float>::~CuVector(v6);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return result;
}

void sub_1B23626DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::QuasarEuclidGrapheme::findNearestNeighbors(uint64_t a1@<X0>, long long *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
}

void quasar::QuasarEuclidGrapheme::lookupEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    quasar::NearestNeighborSearch::lookupEmbedding(v3, a2, 0, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void quasar::QuasarEuclidPhoneme::findNearestNeighbors(uint64_t a1@<X0>, long long *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
}

void quasar::QuasarEuclidPhoneme::lookupEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    quasar::NearestNeighborSearch::lookupEmbedding(v3, a2, 1, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void quasar::QuasarEuclidGrapheme::~QuasarEuclidGrapheme(void **this)
{
  quasar::QuasarEuclid::~QuasarEuclid(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::QuasarEuclidPhoneme::~QuasarEuclidPhoneme(void **this)
{
  quasar::QuasarEuclid::~QuasarEuclid(this);
  JUMPOUT(0x1B3EA8670);
}

void *std::allocate_shared[abi:ne180100]<quasar::NearestNeighborSearch,std::allocator<quasar::NearestNeighborSearch>,quasar::SystemConfig &,std::string &,BOOL &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned __int8 *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x138uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string &,BOOL &,std::allocator<quasar::NearestNeighborSearch>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B2362818(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string &,BOOL &,std::allocator<quasar::NearestNeighborSearch>,0>(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60E20;
  quasar::NearestNeighborSearch::NearestNeighborSearch(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1B2362878(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::__on_zero_shared(uint64_t a1)
{
}

void quasar::NearestNeighborSearch::~NearestNeighborSearch(void **this)
{
  if (*((char *)this + 279) < 0) {
    operator delete(this[32]);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[15];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  kaldi::CuVector<float>::~CuVector(this + 10);
  uint64_t v3 = (std::__shared_weak_count *)this[9];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[7];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this);
}

uint64_t std::__optional_move_base<kaldi::CuVector<float>,false>::__optional_move_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    kaldi::CuVector<float>::CuVector((void *)a1, a2);
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

void sub_1B2362A10(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32)) {
    kaldi::CuVector<float>::~CuVector((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<quasar::TextEmbedder>::shared_ptr[abi:ne180100]<quasar::TextEmbedder,std::default_delete<quasar::TextEmbedder>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::TextEmbedder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::TextEmbedder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::TextEmbedder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void quasar::readFst(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v68 = *(std::string *)a2;
  }
  long long v69 = *(_OWORD *)(a2 + 24);
  long long v70 = *(_OWORD *)(a2 + 40);
  int v71 = *(_DWORD *)(a2 + 56);
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v65 = -1;
  uint64_t v6 = (unsigned char *)v69;
  if (!(void)v69)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    char v7 = fst::FstHeader::Read((uint64_t)v60, a1, (uint64_t)__p, 0);
    if (SBYTE7(v44) < 0) {
      operator delete(__p[0]);
    }
    if ((v7 & 1) == 0)
    {
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: error reading FST header.", 38);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    uint64_t v6 = v60;
    *(void *)&long long v69 = v60;
  }
  uint64_t v8 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  uint64_t v9 = v6[55];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v6[55];
  }
  else {
    uint64_t v10 = *((void *)v6 + 5);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(v8 + 8);
  }
  if (v10 != v11) {
    goto LABEL_119;
  }
  if (v12 >= 0) {
    char v13 = (unsigned __int8 *)v8;
  }
  else {
    char v13 = *(unsigned __int8 **)v8;
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*((const void **)v6 + 4), v13, *((void *)v6 + 5))) {
      goto LABEL_119;
    }
  }
  else if (v6[55])
  {
    uint64_t v14 = v6 + 32;
    while (*v14 == *v13)
    {
      ++v14;
      ++v13;
      if (!--v9) {
        goto LABEL_25;
      }
    }
LABEL_119:
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"FST with arc type ", 18);
    int v35 = (char)v6[55];
    if (v35 >= 0) {
      uint64_t v36 = (uint64_t)(v6 + 32);
    }
    else {
      uint64_t v36 = *((void *)v6 + 4);
    }
    if (v35 >= 0) {
      uint64_t v37 = v6[55];
    }
    else {
      uint64_t v37 = *((void *)v6 + 5);
    }
    long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" not supported.\n", 16);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_25:
  *a3 = 0;
  uint64_t v15 = v6 + 8;
  int v16 = v6[31];
  if ((v16 & 0x80) == 0)
  {
    if (v6[31] > 0xEu)
    {
      if (v16 != 15)
      {
        long long v17 = (uint64_t *)(v6 + 8);
        if (v16 != 16)
        {
          if (v16 != 18) {
            goto LABEL_100;
          }
          BOOL v18 = *(void *)v15 == 0x5F64656375646572 && *((void *)v6 + 2) == 0x637564736E617274;
          if (!v18 || *((_WORD *)v6 + 12) != 29285) {
            goto LABEL_100;
          }
LABEL_107:
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read();
        }
LABEL_72:
        uint64_t v27 = *v17;
        uint64_t v28 = v17[1];
        if (v27 == 0x5F64656375646572 && v28 == 0x726F747065636361) {
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read();
        }
LABEL_100:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v6 + 1, "reduced_quantized_transducer"))
        {
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v6 + 1, "reduced_quantized_acceptor"))
        {
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v6 + 1, "squeezed_transducer"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v6 + 1, "squeezed_acceptor"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v6 + 1, "squeezed_quantized_transducer"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v6 + 1, "squeezed_quantized_acceptor"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v6 + 1, "enumeration"))
        {
          fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Read();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v6 + 1, "quantized_enumeration"))
        {
          fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Read();
        }
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: unsupported FST type: ", 35);
        int v40 = (char)v6[31];
        if (v40 >= 0) {
          uint64_t v41 = (uint64_t)(v6 + 8);
        }
        else {
          uint64_t v41 = *((void *)v6 + 1);
        }
        if (v40 >= 0) {
          uint64_t v42 = v6[31];
        }
        else {
          uint64_t v42 = *((void *)v6 + 2);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      if (*(void *)v15 != 0x75715F6D6172676ELL || *(void *)(v6 + 15) != 0x64657A69746E6175) {
        goto LABEL_100;
      }
LABEL_91:
      fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Read();
    }
    if (v16 != 5)
    {
      if (v16 != 6) {
        goto LABEL_100;
      }
      if (*(_DWORD *)v15 != 1952671094 || *((_WORD *)v6 + 6) != 29295) {
        goto LABEL_100;
      }
LABEL_85:
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read();
    }
    if (*(_DWORD *)v15 != 1936617315 || v6[12] != 116)
    {
      if (*(_DWORD *)v15 != 1634887534 || v6[12] != 109) {
        goto LABEL_100;
      }
LABEL_112:
      fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Read();
    }
LABEL_106:
    fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read();
  }
  uint64_t v20 = *((void *)v6 + 2);
  if (v20 == 5)
  {
    if (**(_DWORD **)v15 == 1936617315 && *(unsigned char *)(*(void *)v15 + 4) == 116) {
      goto LABEL_106;
    }
    uint64_t v20 = *((void *)v6 + 2);
    if (v20 == 5)
    {
      if (**(_DWORD **)v15 == 1634887534 && *(unsigned char *)(*(void *)v15 + 4) == 109) {
        goto LABEL_112;
      }
      if ((v16 & 0x80) == 0) {
        goto LABEL_100;
      }
    }
  }
  else if (v20 == 6 && **(_DWORD **)v15 == 1952671094 && *(_WORD *)(*(void *)v15 + 4) == 29295)
  {
    goto LABEL_85;
  }
  if (v20 == 15)
  {
    if (**(void **)v15 == 0x75715F6D6172676ELL && *(void *)(*(void *)v15 + 7) == 0x64657A69746E6175) {
      goto LABEL_91;
    }
    uint64_t v20 = *((void *)v6 + 2);
  }
  if (v20 == 18)
  {
    if (**(void **)v15 == 0x5F64656375646572
      && *(void *)(*(void *)v15 + 8) == 0x637564736E617274
      && *(_WORD *)(*(void *)v15 + 16) == 29285)
    {
      goto LABEL_107;
    }
    uint64_t v20 = *((void *)v6 + 2);
  }
  if (v20 != 16) {
    goto LABEL_100;
  }
  long long v17 = *(uint64_t **)v15;
  goto LABEL_72;
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Read()
{
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Read()
{
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read()
{
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read()
{
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read()
{
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read()
{
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read()
{
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read()
{
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read()
{
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read()
{
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Read()
{
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Read()
{
}

double quasar::ModelLoader::ModelLoader(quasar::ModelLoader *this)
{
  *(void *)this = &unk_1F0A51D08;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 80) = 1065353216;
  *((_DWORD *)this + 90) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *((_DWORD *)this + 110) = 1065353216;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  *(_OWORD *)((char *)this + 475) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 64) = 850045863;
  *((_DWORD *)this + 154) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 561) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  return result;
}

void quasar::ModelLoader::~ModelLoader(std::mutex *this)
{
  this->__m_.__sig = (uint64_t)&unk_1F0A51D08;
  quasar::ModelLoader::releaseDispatchResource((quasar::ModelLoader *)this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this[9].__m_.__opaque);
  std::mutex::~mutex(this + 8);
  uint64_t v2 = *(std::__shared_weak_count **)&this[7].__m_.__opaque[48];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[6].__m_.__opaque[16]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[5].__m_.__opaque[40]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this[5].__m_.__opaque);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[4].__m_.__opaque[24]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[3].__m_.__opaque[48]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[3].__m_.__opaque[8]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[2].__m_.__opaque[32]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[2]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[1].__m_.__opaque[16]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this->__m_.__opaque[40]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this->__m_.__opaque);
}

{
  uint64_t vars8;

  quasar::ModelLoader::~ModelLoader(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::ModelLoader::releaseDispatchResource(quasar::ModelLoader *this)
{
  if (*((void *)this + 60))
  {
    if (*((void *)this + 59))
    {
      unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 489);
      if (v2)
      {
        dispatch_release(*((dispatch_object_t *)this + 60));
        uint64_t v3 = *((void *)this + 59);
        dispatch_release(v3);
      }
    }
  }
}

BOOL quasar::fileExists()
{
  v4[19] = *MEMORY[0x1E4F143B8];
  std::ifstream::basic_ifstream(v2);
  BOOL v0 = *(_DWORD *)&v3[*(void *)(v2[0] - 24) + 16] == 0;
  v2[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v2 + *(void *)(v2[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v3);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v4);
  return v0;
}

void quasar::ModelLoader::readNnetWordMap(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v76 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v75 = *(std::string *)a3;
  }
  quasar::MakeCacheKey<std::string,std::string>((uint64_t)&v76, (uint64_t)&v75);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 128), (unsigned __int8 *)v77))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ":");
    quasar::splitAndTrimNoEmpty((const std::string *)a2, (char *)__p, v74);
    if (SBYTE7(v55) < 0) {
      operator delete(__p[0]);
    }
    memset(&v73, 0, sizeof(v73));
    uint64_t v10 = (char *)v74[0];
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74[1] - v74[0]) >> 3);
    if (v11 == 2)
    {
      if (*(char *)(v74[0] + 23) >= 0) {
        size_t v21 = *(unsigned __int8 *)(v74[0] + 23);
      }
      else {
        size_t v21 = *(void *)(v74[0] + 8);
      }
      long long v22 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v21 + 1);
      if (SBYTE7(v55) < 0) {
        long long v22 = (void **)__p[0];
      }
      if (v21)
      {
        if (v10[23] >= 0) {
          long long v23 = v10;
        }
        else {
          long long v23 = *(char **)v10;
        }
        memmove(v22, v23, v21);
      }
      *(_WORD *)((char *)v22 + v21) = 46;
      int v24 = *(char *)(a3 + 23);
      if (v24 >= 0) {
        long long v25 = (const std::string::value_type *)a3;
      }
      else {
        long long v25 = *(const std::string::value_type **)a3;
      }
      if (v24 >= 0) {
        std::string::size_type v26 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v26 = *(void *)(a3 + 8);
      }
      uint64_t v27 = std::string::append((std::string *)__p, v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v80 = v27->__r_.__value_.__r.__words[2];
      long long v79 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v55) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v29 = v74[0];
      if (*(char *)(v74[0] + 47) >= 0) {
        size_t v30 = *(unsigned __int8 *)(v74[0] + 47);
      }
      else {
        size_t v30 = *(void *)(v74[0] + 32);
      }
      long long v31 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v30 + 1);
      if (SBYTE7(v55) < 0) {
        long long v31 = (void **)__p[0];
      }
      if (v30)
      {
        if (*(char *)(v29 + 47) >= 0) {
          long long v32 = (const void *)(v29 + 24);
        }
        else {
          long long v32 = *(const void **)(v29 + 24);
        }
        memmove(v31, v32, v30);
      }
      *(_WORD *)((char *)v31 + v30) = 46;
      int v33 = *(char *)(a3 + 23);
      if (v33 >= 0) {
        long long v34 = (const std::string::value_type *)a3;
      }
      else {
        long long v34 = *(const std::string::value_type **)a3;
      }
      if (v33 >= 0) {
        std::string::size_type v35 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v35 = *(void *)(a3 + 8);
      }
      uint64_t v36 = std::string::append((std::string *)__p, v34, v35);
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      std::string::size_type v72 = v36->__r_.__value_.__r.__words[2];
      long long v71 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v55) < 0) {
        operator delete(__p[0]);
      }
      BOOL v38 = quasar::fileExists();
      if (((v38 | quasar::fileExists()) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"leftNnetWordmapExist || rightNnetWordmapExist", 45);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      if (v38) {
        long long v39 = (const std::string *)&v79;
      }
      else {
        long long v39 = (const std::string *)&v71;
      }
      std::string::operator=(&v73, v39);
      if (SHIBYTE(v72) < 0) {
        operator delete((void *)v71);
      }
      if (SHIBYTE(v80) < 0) {
        operator delete((void *)v79);
      }
    }
    else if (v11 == 1)
    {
      if (*(char *)(a2 + 23) >= 0) {
        size_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v12 = *(void *)(a2 + 8);
      }
      char v13 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 1);
      if (SBYTE7(v55) < 0) {
        char v13 = (void **)__p[0];
      }
      if (v12)
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v14 = (const void *)a2;
        }
        else {
          uint64_t v14 = *(const void **)a2;
        }
        memmove(v13, v14, v12);
      }
      *(_WORD *)((char *)v13 + v12) = 46;
      int v15 = *(char *)(a3 + 23);
      if (v15 >= 0) {
        int v16 = (const std::string::value_type *)a3;
      }
      else {
        int v16 = *(const std::string::value_type **)a3;
      }
      if (v15 >= 0) {
        std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v17 = *(void *)(a3 + 8);
      }
      BOOL v18 = std::string::append((std::string *)__p, v16, v17);
      std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
      *(void *)&long long v79 = v18->__r_.__value_.__l.__size_;
      *(void *)((char *)&v79 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
      char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      v73.__r_.__value_.__r.__words[0] = v19;
      v73.__r_.__value_.__l.__size_ = v79;
      *(std::string::size_type *)((char *)&v73.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v79 + 7);
      *((unsigned char *)&v73.__r_.__value_.__s + 23) = v20;
      if (SBYTE7(v55) < 0) {
        operator delete(__p[0]);
      }
    }
    else if ((quasar::gLogLevel & 0x80000000) == 0)
    {
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      int v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Malformed wordmap files. fileBasename=", 38);
      int v41 = *(char *)(a2 + 23);
      if (v41 >= 0) {
        uint64_t v42 = a2;
      }
      else {
        uint64_t v42 = *(void *)a2;
      }
      if (v41 >= 0) {
        uint64_t v43 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v43 = *(void *)(a2 + 8);
      }
      long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", fileExtension=", 16);
      int v46 = *(char *)(a3 + 23);
      if (v46 >= 0) {
        uint64_t v47 = a3;
      }
      else {
        uint64_t v47 = *(void *)a3;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v48 = *(void *)(a3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
      quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
    }
    char v53 = 0;
    kaldi::Input::Input(&v71, &v73, &v53);
    long long v49 = (void *)kaldi::Input::Stream((kaldi::Input *)&v71);
    if (*(_DWORD *)((char *)v49 + *(void *)(*v49 - 24) + 32) && (quasar::gLogLevel & 0x80000000) == 0)
    {
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v55 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      long long v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not read the NNLM word map file ", 38);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v51 = &v73;
      }
      else {
        long long v51 = (std::string *)v73.__r_.__value_.__r.__words[0];
      }
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v73.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, size);
      quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
    }
    _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6quasar15NnlmDecoderWordENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a4);
    fst::FstReadOptions::FstReadOptions(__p, &v73, 0, 0, 0);
    LODWORD(v57) = 2;
    kaldi::quasar::NnlmDecoderWord::ReadMapped(*a4, (uint64_t)__p);
  }
  __p[0] = v77;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 128, (unsigned __int8 *)v77, (uint64_t)&std::piecewise_construct, (long long **)__p);
  *a4 = *((void *)v8 + 5);
  uint64_t v9 = *((void *)v8 + 6);
  a4[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  if (v78 < 0) {
    operator delete(v77[0]);
  }
}

void sub_1B2364338(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B23643A0);
}

uint64_t quasar::MakeCacheKey<std::string,std::string>(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *(void *)a2;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B2364510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::loadIntoTFInferenceNet(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  memset(v1, 0, sizeof(v1));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Compile with USE_TENSORFLOW=ON to use TensorFlow models", 55);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v1);
}

void quasar::ModelLoader::readNeuralNetwork(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, unsigned __int8 **a6@<X5>, void *a7@<X8>)
{
  char v94 = a3;
  char v93 = a4;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v90 = *(std::string *)a2;
  }
  quasar::MakeCacheKey<std::string,BOOL,BOOL>((uint64_t)&v90);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 48), (unsigned __int8 *)v91))
  {
    BOOL IsOne = 0;
    if (*a6) {
      BOOL IsOne = quasar::ModelLoader::EmbeddedMlockContext::IsOne(*a6, (unsigned __int8 *)a2);
    }
    *a7 = 0;
    a7[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, ".pb");
    size_t v14 = *(unsigned __int8 *)(a2 + 23);
    size_t v15 = *(void *)(a2 + 8);
    if ((v14 & 0x80u) == 0) {
      size_t v16 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v16 = *(void *)(a2 + 8);
    }
    int v17 = (char)v88;
    if ((v88 & 0x80u) == 0) {
      size_t v18 = v88;
    }
    else {
      size_t v18 = v87;
    }
    BOOL v19 = v16 >= v18;
    size_t v20 = v16 - v18;
    if (!v19)
    {
      BOOL v21 = 0;
      goto LABEL_42;
    }
    if ((v14 & 0x80) != 0)
    {
      if (v18 == -1 || v15 < v20) {
LABEL_182:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v15 - v20 >= v18) {
        size_t v23 = v18;
      }
      else {
        size_t v23 = v15 - v20;
      }
      uint64_t v24 = *(void *)a2;
    }
    else
    {
      if (v18 == -1) {
        goto LABEL_182;
      }
      BOOL v19 = v14 >= v20;
      size_t v22 = v14 - v20;
      if (!v19) {
        goto LABEL_182;
      }
      if (v22 >= v18) {
        size_t v23 = v18;
      }
      else {
        size_t v23 = v22;
      }
      uint64_t v24 = a2;
    }
    if ((v88 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    int v26 = memcmp((const void *)(v24 + v20), p_p, v23);
    BOOL v21 = v23 == v18 && v26 == 0;
LABEL_42:
    int v28 = v21 & a5;
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v28) {
      quasar::ModelLoader::loadIntoTFInferenceNet(&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, ".bnns.mil");
    size_t v29 = *(unsigned __int8 *)(a2 + 23);
    size_t v30 = *(void *)(a2 + 8);
    if ((v29 & 0x80u) == 0) {
      size_t v31 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v31 = *(void *)(a2 + 8);
    }
    unsigned __int8 v32 = v88;
    if ((v88 & 0x80u) == 0) {
      size_t v33 = v88;
    }
    else {
      size_t v33 = v87;
    }
    BOOL v19 = v31 >= v33;
    size_t v34 = v31 - v33;
    if (!v19) {
      goto LABEL_52;
    }
    if ((v29 & 0x80) != 0)
    {
      if (v33 == -1 || v30 < v34) {
LABEL_183:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v30 - v34 >= v33) {
        size_t v55 = v33;
      }
      else {
        size_t v55 = v30 - v34;
      }
      uint64_t v56 = *(void *)a2;
    }
    else
    {
      if (v33 == -1) {
        goto LABEL_183;
      }
      BOOL v19 = v29 >= v34;
      size_t v54 = v29 - v34;
      if (!v19) {
        goto LABEL_183;
      }
      if (v54 >= v33) {
        size_t v55 = v33;
      }
      else {
        size_t v55 = v54;
      }
      uint64_t v56 = a2;
    }
    if ((v88 & 0x80u) == 0) {
      long long v66 = &__p;
    }
    else {
      long long v66 = __p;
    }
    int v67 = memcmp((const void *)(v56 + v34), v66, v55);
    if (v55 == v33 && !v67)
    {
      BOOL v53 = 1;
      if ((v32 & 0x80) == 0)
      {
LABEL_85:
        if (v53) {
          goto LABEL_86;
        }
        goto LABEL_132;
      }
LABEL_131:
      operator delete(__p);
      if (v53) {
LABEL_86:
      }
        std::allocate_shared[abi:ne180100]<kaldi::quasar::CEInferenceNet,std::allocator<kaldi::quasar::CEInferenceNet>,std::string const&,BOOL &,void>((uint64_t)v84, a2);
LABEL_132:
      std::allocate_shared[abi:ne180100]<kaldi::nnet1::Nnet1InferenceNet,std::allocator<kaldi::nnet1::Nnet1InferenceNet>,std::string const&,BOOL &,BOOL &,BOOL &,void>();
    }
LABEL_52:
    std::string::basic_string[abi:ne180100]<0>(v84, ".pt");
    unint64_t v35 = *(unsigned __int8 *)(a2 + 23);
    unint64_t v36 = *(void *)(a2 + 8);
    if ((v35 & 0x80u) == 0) {
      unint64_t v37 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      unint64_t v37 = *(void *)(a2 + 8);
    }
    unsigned __int8 v38 = v85;
    if ((v85 & 0x80u) == 0) {
      size_t v39 = v85;
    }
    else {
      size_t v39 = (size_t)v84[1];
    }
    BOOL v19 = v37 >= v39;
    unint64_t v40 = v37 - v39;
    if (!v19) {
      goto LABEL_59;
    }
    if ((v35 & 0x80) != 0)
    {
      if (v39 == -1 || v36 < v40) {
LABEL_184:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v36 - v40 >= v39) {
        size_t v58 = v39;
      }
      else {
        size_t v58 = v36 - v40;
      }
      uint64_t v59 = *(void *)a2;
    }
    else
    {
      if (v39 == -1) {
        goto LABEL_184;
      }
      BOOL v19 = v35 >= v40;
      size_t v57 = v35 - v40;
      if (!v19) {
        goto LABEL_184;
      }
      if (v57 >= v39) {
        size_t v58 = v39;
      }
      else {
        size_t v58 = v57;
      }
      uint64_t v59 = a2;
    }
    if ((v85 & 0x80u) == 0) {
      long long v68 = v84;
    }
    else {
      long long v68 = (void **)v84[0];
    }
    int v69 = memcmp((const void *)(v59 + v40), v68, v58);
    if (v58 == v39 && !v69)
    {
      BOOL v53 = 1;
      if ((v38 & 0x80) == 0)
      {
LABEL_84:
        if ((v88 & 0x80) == 0) {
          goto LABEL_85;
        }
        goto LABEL_131;
      }
LABEL_83:
      operator delete(v84[0]);
      goto LABEL_84;
    }
LABEL_59:
    std::string::basic_string[abi:ne180100]<0>(v82, ".espresso/code.nitroir");
    unint64_t v41 = *(unsigned __int8 *)(a2 + 23);
    unint64_t v42 = *(void *)(a2 + 8);
    if ((v41 & 0x80u) == 0) {
      unint64_t v43 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      unint64_t v43 = *(void *)(a2 + 8);
    }
    unsigned __int8 v44 = v83;
    if ((v83 & 0x80u) == 0) {
      size_t v45 = v83;
    }
    else {
      size_t v45 = (size_t)v82[1];
    }
    BOOL v19 = v43 >= v45;
    unint64_t v46 = v43 - v45;
    if (!v19) {
      goto LABEL_66;
    }
    if ((v41 & 0x80) != 0)
    {
      if (v45 == -1 || v42 < v46) {
LABEL_185:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v42 - v46 >= v45) {
        size_t v61 = v45;
      }
      else {
        size_t v61 = v42 - v46;
      }
      uint64_t v62 = *(void *)a2;
    }
    else
    {
      if (v45 == -1) {
        goto LABEL_185;
      }
      BOOL v19 = v41 >= v46;
      size_t v60 = v41 - v46;
      if (!v19) {
        goto LABEL_185;
      }
      if (v60 >= v45) {
        size_t v61 = v45;
      }
      else {
        size_t v61 = v60;
      }
      uint64_t v62 = a2;
    }
    if ((v83 & 0x80u) == 0) {
      long long v70 = v82;
    }
    else {
      long long v70 = (void **)v82[0];
    }
    int v71 = memcmp((const void *)(v62 + v46), v70, v61);
    if (v61 == v45 && !v71)
    {
      BOOL v53 = 1;
      if ((v44 & 0x80) == 0)
      {
LABEL_82:
        if ((v85 & 0x80) == 0) {
          goto LABEL_84;
        }
        goto LABEL_83;
      }
LABEL_81:
      operator delete(v82[0]);
      goto LABEL_82;
    }
LABEL_66:
    std::string::basic_string[abi:ne180100]<0>(v80, ".espresso.net");
    unint64_t v47 = *(unsigned __int8 *)(a2 + 23);
    unint64_t v48 = *(void *)(a2 + 8);
    if ((v47 & 0x80u) == 0) {
      unint64_t v49 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      unint64_t v49 = *(void *)(a2 + 8);
    }
    unsigned __int8 v50 = v81;
    if ((v81 & 0x80u) == 0) {
      size_t v51 = v81;
    }
    else {
      size_t v51 = (size_t)v80[1];
    }
    BOOL v19 = v49 >= v51;
    unint64_t v52 = v49 - v51;
    if (!v19) {
      goto LABEL_73;
    }
    if ((v47 & 0x80) != 0)
    {
      if (v51 == -1 || v48 < v52) {
LABEL_186:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v48 - v52 >= v51) {
        size_t v64 = v51;
      }
      else {
        size_t v64 = v48 - v52;
      }
      uint64_t v65 = *(void *)a2;
    }
    else
    {
      if (v51 == -1) {
        goto LABEL_186;
      }
      BOOL v19 = v47 >= v52;
      size_t v63 = v47 - v52;
      if (!v19) {
        goto LABEL_186;
      }
      if (v63 >= v51) {
        size_t v64 = v51;
      }
      else {
        size_t v64 = v63;
      }
      uint64_t v65 = a2;
    }
    if ((v81 & 0x80u) == 0) {
      std::string::size_type v72 = v80;
    }
    else {
      std::string::size_type v72 = (void **)v80[0];
    }
    int v73 = memcmp((const void *)(v65 + v52), v72, v64);
    if (v64 == v51 && !v73)
    {
      BOOL v53 = 1;
      if ((v50 & 0x80) != 0) {
LABEL_79:
      }
        operator delete(v80[0]);
LABEL_80:
      if ((v83 & 0x80) == 0) {
        goto LABEL_82;
      }
      goto LABEL_81;
    }
LABEL_73:
    std::string::basic_string[abi:ne180100]<0>(v78, ".bundle");
    if (kaldi::EndsWith((uint64_t **)a2, v78) || kaldi::quasar::isEspressoV2Mil((uint64_t *)a2))
    {
      BOOL v53 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v76, ".pb");
      if (kaldi::EndsWith((uint64_t **)a2, v76))
      {
        BOOL v53 = 1;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v74, ".mlmodelc");
        BOOL v53 = kaldi::EndsWith((uint64_t **)a2, v74);
        if (v75 < 0) {
          operator delete(v74[0]);
        }
      }
      if (v77 < 0) {
        operator delete(v76[0]);
      }
    }
    if (v79 < 0) {
      operator delete(v78[0]);
    }
    if ((v81 & 0x80) != 0) {
      goto LABEL_79;
    }
    goto LABEL_80;
  }
  std::string __p = v91;
  size_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 48, (unsigned __int8 *)v91, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  uint64_t v13 = *((void *)v12 + 6);
  *a7 = *((void *)v12 + 5);
  a7[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  if (v92 < 0) {
    operator delete(v91[0]);
  }
}

void sub_1B2364C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::MakeCacheKey<std::string,BOOL,BOOL>(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  int v2 = *(char *)(a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v3, v4);
  std::ostream::operator<<();
  std::ostream::operator<<();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v6[1] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v8);
}

void sub_1B2364EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::ModelLoader::EmbeddedMlockContext::IsOne(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  uint64_t v4 = a1[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 >= 0) {
    char v7 = a1;
  }
  else {
    char v7 = *(unsigned __int8 **)a1;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v7, *((void *)a2 + 1))) {
      return *((float *)a1 + 6) == 1.0;
    }
    return 0;
  }
  if (a2[23])
  {
    while (*a2 == *v7)
    {
      ++a2;
      ++v7;
      if (!--v2) {
        return *((float *)a1 + 6) == 1.0;
      }
    }
    return 0;
  }
  return *((float *)a1 + 6) == 1.0;
}

unsigned __int8 *quasar::ModelLoader::readAcousticEncoder@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 88;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 88), (unsigned __int8 *)a2))
  {
    std::allocate_shared[abi:ne180100]<kaldi::quasar::CEAcousticEncoderNet,std::allocator<kaldi::quasar::CEAcousticEncoderNet>,std::string const&,void>(&v11);
    size_t v12 = a2;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v12);
    long long v9 = v11;
    long long v11 = 0uLL;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v8 + 6);
    *(_OWORD *)(v8 + 40) = v9;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
    }
  }
  *(void *)&long long v11 = a2;
  double result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v11);
  uint64_t v7 = *((void *)result + 6);
  *a3 = *((void *)result + 5);
  a3[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1B2365040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ModelLoader::readFeedForwardNetwork(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, unsigned __int8 a6@<W5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = 0;
  a8[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ".mlmodelc");
  unint64_t v16 = *(unsigned __int8 *)(a2 + 23);
  unint64_t v17 = *(void *)(a2 + 8);
  if ((v16 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v18 = *(void *)(a2 + 8);
  }
  int v19 = (char)v39;
  if ((v39 & 0x80u) == 0) {
    size_t v20 = v39;
  }
  else {
    size_t v20 = (size_t)__p[1];
  }
  BOOL v26 = v18 >= v20;
  unint64_t v21 = v18 - v20;
  if (!v26)
  {
    BOOL v22 = 0;
    if (((char)v39 & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_40:
    operator delete(__p[0]);
    if (v22) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
  uint64_t v36 = a1;
  unsigned __int8 v23 = a6;
  char v24 = a3;
  char v25 = a4;
  if ((v16 & 0x80) != 0)
  {
    if (v20 == -1 || v17 < v21) {
LABEL_46:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    int v27 = a5;
    if (v17 - v21 >= v20) {
      size_t v29 = v20;
    }
    else {
      size_t v29 = v17 - v21;
    }
    uint64_t v30 = *(void *)a2;
  }
  else
  {
    BOOL v26 = v20 != -1 && v16 >= v21;
    if (!v26) {
      goto LABEL_46;
    }
    int v27 = a5;
    size_t v28 = v16 - v21;
    if (v28 >= v20) {
      size_t v29 = v20;
    }
    else {
      size_t v29 = v28;
    }
    uint64_t v30 = a2;
  }
  if ((v39 & 0x80u) == 0) {
    unsigned __int8 v32 = __p;
  }
  else {
    unsigned __int8 v32 = (void **)__p[0];
  }
  int v33 = memcmp((const void *)(v30 + v21), v32, v29);
  BOOL v22 = v29 == v20 && v33 == 0;
  a5 = v27;
  a4 = v25;
  a3 = v24;
  a6 = v23;
  a1 = v36;
  if (v19 < 0) {
    goto LABEL_40;
  }
LABEL_9:
  if (v22)
  {
LABEL_10:
    quasar::ModelLoader::readCoreMLModel(a1, (unsigned __int8 *)a2, a6, __p);
    *(_OWORD *)a8 = *(_OWORD *)__p;
    return;
  }
LABEL_41:
  uint64_t v35 = *(void *)(a7 + 8);
  v37[0] = *(unsigned __int8 **)a7;
  v37[1] = (unsigned __int8 *)v35;
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  quasar::ModelLoader::readNeuralNetwork(a1, a2, a3, a4, a5, v37, __p);
  *(_OWORD *)a8 = *(_OWORD *)__p;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35);
  }
}

void sub_1B2365224(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ModelLoader::readCoreMLModel(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = (std::mutex *)(a1 + 512);
  std::mutex::lock((std::mutex *)(a1 + 512));
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 288), a2))
  {
    *(void *)&long long v19 = a2;
    long long v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 288, a2, (uint64_t)&std::piecewise_construct, (long long **)&v19);
    uint64_t v10 = *((void *)v9 + 6);
    *a4 = *((void *)v9 + 5);
    a4[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v11 = *(std::__shared_weak_count **)(a1 + 504);
    uint64_t v17 = *(void *)(a1 + 496);
    unint64_t v18 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    kaldi::ReadCoreMLModelNet((long long *)a2, a3, &v17, &v19);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    size_t v20 = a2;
    size_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 288, a2, (uint64_t)&std::piecewise_construct, (long long **)&v20);
    uint64_t v14 = *((void *)&v19 + 1);
    uint64_t v13 = v19;
    if (*((void *)&v19 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    size_t v15 = (std::__shared_weak_count *)*((void *)v12 + 6);
    *((void *)v12 + 5) = v13;
    *((void *)v12 + 6) = v14;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      uint64_t v13 = v19;
    }
    uint64_t v16 = *((void *)&v19 + 1);
    *a4 = v13;
    a4[1] = v16;
    if (v16)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
    }
  }
  std::mutex::unlock(v8);
}

void sub_1B2365390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readNeuralNetworkLm(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, kaldi::InferenceNetItf **a6@<X8>, float a7@<S0>)
{
  float v66 = a7;
  int v65 = a5;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v62 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v61 = *(std::string *)a3;
  }
  quasar::MakeCacheKey<std::string,std::string,BOOL,float,int>((uint64_t)&v62, (uint64_t)&v61);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 21, (unsigned __int8 *)v63))
  {
    __p[0] = v63;
    size_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 21), (unsigned __int8 *)v63, (uint64_t)&std::piecewise_construct, (long long **)__p);
    uint64_t v13 = (atomic_ullong *)*((void *)v12 + 6);
    *a6 = (kaldi::InferenceNetItf *)*((void *)v12 + 5);
    a6[1] = (kaldi::InferenceNetItf *)v13;
    if (v13) {
      atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
    }
    goto LABEL_54;
  }
  *a6 = 0;
  a6[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ":");
  quasar::splitAndTrimNoEmpty((const std::string *)a2, (char *)__p, v60);
  if (SBYTE7(v33) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = v60[0];
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v60[1] - v60[0]) >> 3);
  if (v15 == 2)
  {
    v52[0] = 0;
    v52[1] = 0;
    quasar::ModelLoader::readNeuralNetwork((uint64_t)a1, v60[0], a4, 1, 0, v52, __p);
    v51[0] = 0;
    v51[1] = 0;
    quasar::ModelLoader::readNeuralNetwork((uint64_t)a1, v14 + 24, a4, 1, 0, v51, &v57);
    quasar::ModelLoader::readNnetWordMap((uint64_t)a1, a2, a3, (uint64_t *)&v55);
    uint64_t v17 = (kaldi::InferenceNetItf *)__p[0];
    if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 168))(__p[0])
      && (unint64_t v18 = v57,
          (*(unsigned int (**)(const kaldi::quasar::NnlmDecoderWord *))(*(void *)v57 + 168))(v57)))
    {
      BOOL v53 = v17;
      size_t v54 = v55;
      unint64_t v49 = v18;
      std::allocate_shared[abi:ne180100]<kaldi::quasar::FofeLmEvaluator,std::allocator<kaldi::quasar::FofeLmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,void>(&v54, &v53, &v49, &v66, &v65, v50);
    }
    else
    {
      int v25 = (*(uint64_t (**)(kaldi::InferenceNetItf *))(*(void *)v17 + 160))(v17);
      BOOL v26 = v57;
      if (v25 && (*(unsigned int (**)(const kaldi::quasar::NnlmDecoderWord *))(*(void *)v57 + 160))(v57))
      {
        BOOL v53 = v17;
        size_t v54 = v55;
        unint64_t v49 = v26;
        std::allocate_shared[abi:ne180100]<kaldi::quasar::RnnlmEvaluator,std::allocator<kaldi::quasar::RnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,void>(&v54, &v53, &v49, &v66, &v65, v50);
      }
      else
      {
        BOOL v53 = v17;
        size_t v54 = v55;
        unint64_t v49 = v26;
        std::allocate_shared[abi:ne180100]<kaldi::quasar::DnnlmEvaluator,std::allocator<kaldi::quasar::DnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,void>(&v54, &v53, &v49, &v66, v50);
      }
    }
    char v24 = v50[0];
    unsigned __int8 v23 = v50[1];
    *a6 = v50[0];
    a6[1] = v23;
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
  }
  else
  {
    if (v15 != 1)
    {
      if ((quasar::gLogLevel & 0x80000000) == 0)
      {
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Malformed LM neural network file name, fileBasename=", 52);
        int v20 = *(char *)(a2 + 23);
        if (v20 >= 0) {
          uint64_t v21 = a2;
        }
        else {
          uint64_t v21 = *(void *)a2;
        }
        if (v20 >= 0) {
          uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v22 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
      }
      unsigned __int8 v23 = 0;
      char v24 = 0;
      goto LABEL_46;
    }
    v59[0] = 0;
    v59[1] = 0;
    quasar::ModelLoader::readNeuralNetwork((uint64_t)a1, a2, a4, 1, 0, v59, __p);
    quasar::ModelLoader::readNnetWordMap((uint64_t)a1, a2, a3, (uint64_t *)&v57);
    uint64_t v16 = (kaldi::InferenceNetItf *)__p[0];
    if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 168))(__p[0]))
    {
      v50[0] = v57;
      BOOL v53 = 0;
      size_t v54 = v16;
      std::allocate_shared[abi:ne180100]<kaldi::quasar::FofeLmEvaluator,std::allocator<kaldi::quasar::FofeLmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,void>(v50, &v54, (uint64_t)&v53, &v66, &v65, &v55);
    }
    else if ((*(unsigned int (**)(kaldi::InferenceNetItf *))(*(void *)v16 + 160))(v16))
    {
      v50[0] = v57;
      BOOL v53 = 0;
      size_t v54 = v16;
      std::allocate_shared[abi:ne180100]<kaldi::quasar::RnnlmEvaluator,std::allocator<kaldi::quasar::RnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,void>(v50, &v54, (uint64_t)&v53, &v66, &v65, &v55);
    }
    else
    {
      v50[0] = v57;
      BOOL v53 = 0;
      size_t v54 = v16;
      std::allocate_shared[abi:ne180100]<kaldi::quasar::DnnlmEvaluator,std::allocator<kaldi::quasar::DnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,void>(v50, &v54, (uint64_t)&v53, &v66, &v55);
    }
    char v24 = v55;
    unsigned __int8 v23 = (const kaldi::quasar::NnlmDecoderWord *)v56;
    *a6 = v55;
    a6[1] = v23;
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
LABEL_46:
  size_t v57 = (const kaldi::quasar::NnlmDecoderWord *)v63;
  int v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 21), (unsigned __int8 *)v63, (uint64_t)&std::piecewise_construct, (long long **)&v57);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v23 + 1, 1uLL, memory_order_relaxed);
  }
  size_t v28 = (std::__shared_weak_count *)*((void *)v27 + 6);
  *((void *)v27 + 5) = v24;
  *((void *)v27 + 6) = v23;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  size_t v29 = a1 + 56;
  unint64_t v30 = a1[57];
  if (v30 >= a1[58])
  {
    uint64_t v31 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v29, (long long *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v29, (long long *)a2);
    uint64_t v31 = v30 + 24;
  }
  a1[57] = v31;
  __p[0] = v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_54:
  if (v64 < 0) {
    operator delete(v63[0]);
  }
}

void sub_1B2365968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 224);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v14 - 208);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::string __p = (void *)(v14 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v14 - 81) < 0) {
    operator delete(*(void **)(v14 - 104));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::MakeCacheKey<std::string,std::string,BOOL,float,int>(uint64_t a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *(void *)a2;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::ostream::operator<<();
  std::ostream::operator<<();
  std::ostream::operator<<();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B2365C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *quasar::ModelLoader::readFstNetwork@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v4[0] = 0;
  v4[1] = 0;
  return quasar::ModelLoader::readFstNetwork(a1, a2, v4, a3);
}

unsigned __int8 *quasar::ModelLoader::readFstNetwork@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)a2))
  {
    kaldi::Input::Input(v29, a2, 0);
    uint64_t v14 = (void *)kaldi::Input::Stream((kaldi::Input *)v29);
    if (!*(_DWORD *)((char *)v14 + *(void *)(*v14 - 24) + 32))
    {
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)uint64_t v22 = 0u;
      *(_OWORD *)unsigned __int8 v23 = 0u;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = -1;
      uint64_t v15 = kaldi::Input::Stream((kaldi::Input *)v29);
      if (fst::FstHeader::Read((uint64_t)v21, v15, a2, 0))
      {
        fst::FstReadOptions::FstReadOptions(__p, a2, v21, 0, 0);
        LODWORD(v33) = 2;
        if (*a3) {
          DWORD2(v33) = quasar::ModelLoader::EmbeddedMlockContext::GetFraction(*a3, (unsigned __int8 *)a2);
        }
        uint64_t v16 = kaldi::Input::Stream((kaldi::Input *)v29);
        quasar::readFst(v16, (uint64_t)__p, &v47);
      }
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: error reading FST header.", 38);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not open decoding-graph FST ", 34);
    int v18 = *(char *)(a2 + 23);
    if (v18 >= 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = *(void *)a2;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v20 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"found object in map for fst ", 28);
    int v9 = *(char *)(a2 + 23);
    if (v9 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    if (v9 >= 0) {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v11 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  __p[0] = (void *)a2;
  double result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)__p);
  uint64_t v13 = *((void *)result + 6);
  *a4 = *((void *)result + 5);
  a4[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1B2365FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  if (a28 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a10);
  kaldi::Input::~Input((kaldi::Input *)&a22);
  _Unwind_Resume(a1);
}

float quasar::ModelLoader::EmbeddedMlockContext::GetFraction(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  uint64_t v4 = a1[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  float v6 = 0.0;
  if (v3 != v4) {
    return v6;
  }
  if (v5 >= 0) {
    int v8 = a1;
  }
  else {
    int v8 = *(unsigned __int8 **)a1;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v8, *((void *)a2 + 1))) {
      return v6;
    }
    return *((float *)a1 + 6);
  }
  if (!a2[23]) {
    return *((float *)a1 + 6);
  }
  while (*a2 == *v8)
  {
    ++a2;
    ++v8;
    if (!--v2) {
      return *((float *)a1 + 6);
    }
  }
  return v6;
}

uint64_t quasar::ModelLoader::readWordBoundaryInfo@<X0>(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  int v12 = *((unsigned __int8 *)a2 + 8);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v25 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  quasar::MakeCacheKey<int,int,BOOL,std::string,std::string>(v10, v11, v12 != 0, (uint64_t)&v25, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 51, (unsigned __int8 *)v26);
  if (v13)
  {
    *a5 = *((void *)v13 + 5);
    uint64_t v14 = *((void *)v13 + 6);
    a5[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<kaldi::WordBoundaryInfo,std::allocator<kaldi::WordBoundaryInfo>,kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&,void>((uint64_t)a2, a3, a4, a5);
    long long v31 = v26;
    uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 51), (unsigned __int8 *)v26, (uint64_t)&std::piecewise_construct, (long long **)&v31);
    uint64_t v17 = *a5;
    uint64_t v16 = a5[1];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    int v18 = (std::__shared_weak_count *)*((void *)v15 + 6);
    *((void *)v15 + 5) = v17;
    *((void *)v15 + 6) = v16;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    unint64_t v19 = a1[57];
    if (v19 >= a1[58])
    {
      unint64_t v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 56, (long long *)a3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(a1 + 56), (long long *)a3);
      unint64_t v20 = v19 + 24;
    }
    a1[57] = v20;
    uint64_t v21 = *(unsigned __int8 *)(a4 + 23);
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a4 + 8);
    }
    if (v21)
    {
      if (v20 >= a1[58])
      {
        uint64_t v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 56, (long long *)a4);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(a1 + 56), (long long *)a4);
        uint64_t v22 = v20 + 24;
      }
      a1[57] = v22;
    }
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  v28[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v28[1] = MEMORY[0x1E4FBA470] + 16;
  if (v29 < 0) {
    operator delete((void *)v28[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v30);
}

void sub_1B2366408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t quasar::MakeCacheKey<int,int,BOOL,std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::ostream::operator<<();
  std::ostream::operator<<();
  uint64_t v7 = (void *)std::ostream::operator<<();
  int v8 = *(char *)(a4 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = *(void *)a4;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a4 + 8);
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  int v12 = *(char *)(a5 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = *(void *)a5;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a5 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v16[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v18);
}

void sub_1B2366610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::writeFst(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[71] = *MEMORY[0x1E4F143B8];
  std::ofstream::basic_ofstream(v12);
  if (v12[16]) {
    quasar::ModelLoader::writeFst(a1, a2);
  }
  memset(v11, 0, sizeof(v11));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Writing FST: unable to open file to write: ", 43);
  int v8 = *(char *)(a4 + 23);
  if (v8 >= 0) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = *(void *)a4;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a4 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
}

void sub_1B23667E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ModelLoader::writeFst(int a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(a2 + 23) > 0xEu)
    {
      if (v3 != 15)
      {
        uint64_t v4 = (uint64_t *)a2;
        if (v3 != 16)
        {
          if (v3 != 18) {
            goto LABEL_76;
          }
          BOOL v5 = *(void *)a2 == 0x5F64656375646572 && *(void *)(a2 + 8) == 0x637564736E617274;
          if (!v5 || *(_WORD *)(a2 + 16) != 29285) {
            goto LABEL_76;
          }
LABEL_83:
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFst();
        }
LABEL_48:
        uint64_t v14 = *v4;
        uint64_t v15 = v4[1];
        if (v14 == 0x5F64656375646572 && v15 == 0x726F747065636361) {
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFst();
        }
LABEL_76:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "reduced_quantized_transducer"))
        {
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFst();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "reduced_quantized_acceptor"))
        {
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFst();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "squeezed_transducer"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFst();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "squeezed_acceptor"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFst();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "squeezed_quantized_transducer"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFst();
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a2, "squeezed_quantized_acceptor"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFst();
        }
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        memset(v22, 0, sizeof(v22));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Writing FST: unsupported FST type: ", 35);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, a2);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v22);
      }
      if (*(void *)a2 != 0x75715F6D6172676ELL || *(void *)(a2 + 7) != 0x64657A69746E6175) {
        goto LABEL_76;
      }
LABEL_67:
      fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFst();
    }
    if (v3 != 5)
    {
      if (v3 != 6) {
        goto LABEL_76;
      }
      if (*(_DWORD *)a2 != 1952671094 || *(_WORD *)(a2 + 4) != 29295) {
        goto LABEL_76;
      }
LABEL_61:
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
    }
    if (*(_DWORD *)a2 != 1936617315 || *(unsigned char *)(a2 + 4) != 116)
    {
      if (*(_DWORD *)a2 != 1634887534 || *(unsigned char *)(a2 + 4) != 109) {
        goto LABEL_76;
      }
LABEL_88:
      fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFst();
    }
LABEL_82:
    fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst();
  }
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7 == 5)
  {
    if (**(_DWORD **)a2 == 1936617315 && *(unsigned char *)(*(void *)a2 + 4) == 116) {
      goto LABEL_82;
    }
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7 == 5)
    {
      if (**(_DWORD **)a2 == 1634887534 && *(unsigned char *)(*(void *)a2 + 4) == 109) {
        goto LABEL_88;
      }
      if ((v3 & 0x80) == 0) {
        goto LABEL_76;
      }
    }
  }
  else if (v7 == 6 && **(_DWORD **)a2 == 1952671094 && *(_WORD *)(*(void *)a2 + 4) == 29295)
  {
    goto LABEL_61;
  }
  if (v7 == 15)
  {
    if (**(void **)a2 == 0x75715F6D6172676ELL && *(void *)(*(void *)a2 + 7) == 0x64657A69746E6175) {
      goto LABEL_67;
    }
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7 == 18)
  {
    if (**(void **)a2 == 0x5F64656375646572
      && *(void *)(*(void *)a2 + 8) == 0x637564736E617274
      && *(_WORD *)(*(void *)a2 + 16) == 29285)
    {
      goto LABEL_83;
    }
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7 != 16) {
    goto LABEL_76;
  }
  uint64_t v4 = *(uint64_t **)a2;
  goto LABEL_48;
}

void sub_1B2366DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::ModelLoader::readTransitionModel(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v7 = 208;
  if (a3) {
    uint64_t v7 = 248;
  }
  uint64_t v8 = a1 + v7;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + v7), a2);
  if (v9)
  {
    uint64_t v10 = *((void *)v9 + 6);
    *a4 = *((void *)v9 + 5);
    a4[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = (char *)operator new(0x110uLL);
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(_OWORD *)(v11 + 24) = 0u;
    *(void *)uint64_t v11 = &unk_1F0A5E998;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 168) = 0u;
    *(_OWORD *)(v11 + 184) = 0u;
    *(_OWORD *)(v11 + 200) = 0u;
    *(_OWORD *)(v11 + 216) = 0u;
    *(_OWORD *)(v11 + 232) = 0u;
    *(_OWORD *)(v11 + 248) = 0u;
    *a4 = v11 + 24;
    a4[1] = v11;
    unsigned __int8 v16 = 0;
    kaldi::Input::Input(v15, a2, &v16);
    int v12 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v15);
    kaldi::TransitionModel::Read((std::vector<int> *)v11 + 1, v12, v16, a3);
    char v17 = a2;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (long long **)&v17);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)v13 + 6);
    *((void *)v13 + 5) = v11 + 24;
    *((void *)v13 + 6) = v11;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    kaldi::Input::~Input((kaldi::Input *)v15);
  }
}

void sub_1B2367028(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readContextDependency(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 328;
  float v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 328), a2);
  if (v6)
  {
    uint64_t v7 = *((void *)v6 + 6);
    *a3 = *((void *)v6 + 5);
    a3[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    v8[1] = 0;
    v8[2] = 0;
    *uint64_t v8 = &unk_1F0A5EA78;
    void v8[4] = 0;
    v8[5] = 0;
    void v8[3] = &unk_1F0A47A30;
    *a3 = v8 + 3;
    a3[1] = v8;
    unsigned __int8 v12 = 0;
    kaldi::Input::Input(&v13, a2, &v12);
    uint64_t v9 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v13);
    kaldi::ContextDependency::Read((uint64_t)(v8 + 3), v9, v12);
    kaldi::Input::~Input((kaldi::Input *)&v13);
    uint64_t v13 = a2;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (long long **)&v13);
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
    *((void *)v10 + 5) = v8 + 3;
    *((void *)v10 + 6) = v8;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_1B236717C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readSymbolTable(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v9 = a1 + 368;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 368), (unsigned __int8 *)a2))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"found object in map for symbol table ", 37);
      int v11 = *(char *)(a2 + 23);
      if (v11 >= 0) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = *(void *)a2;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v40);
    }
    *(void *)&long long v40 = a2;
    uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v40);
    uint64_t v15 = v14;
    if (a4 && ((*(uint64_t (**)(void))(**((void **)v14 + 5) + 144))(*((void *)v14 + 5)) & 1) == 0)
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Requested SymbolTable implementation with support for efficient reverse symbol lookups, ", 88);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"but previous call did not enforce that requirement and the result was cached. ", 78);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "Use a fresh ModelLoader instance to work-around the problem.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v40);
    }
    uint64_t v16 = *((void *)v15 + 6);
    *a5 = *((void *)v15 + 5);
    a5[1] = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    switch(a3)
    {
      case 1:
        quasar::SymbolMap::ReadMarisa<std::shared_ptr<fst::SymbolTable>>(a2);
      case 2:
        if (a4) {
          quasar::SymbolMap::ReadAndSortQuasarBinary<std::shared_ptr<fst::SymbolTable>>(a2, &v40);
        }
        else {
          quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>(a2, &v40);
        }
        long long v17 = v40;
        *(_OWORD *)a5 = v40;
        if (!(void)v17) {
          goto LABEL_28;
        }
        *(void *)&long long v40 = a2;
        uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)&v40);
        if (*((void *)&v17 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v19 = (std::__shared_weak_count *)*((void *)v18 + 6);
        *(_OWORD *)(v18 + 40) = v17;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        break;
      case 3:
        quasar::SymbolMap::ReadFstBinary<std::shared_ptr<fst::SymbolTable>>(a2, &v40);
      case 4:
        quasar::SymbolMap::ReadFstText<std::shared_ptr<fst::SymbolTable>>(a2, &v40);
      default:
LABEL_28:
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v22 = (const char *)a2;
        }
        else {
          uint64_t v22 = *(const char **)a2;
        }
        if (!stat(v22, &v39))
        {
          long long v55 = 0uLL;
          long long v56 = 0uLL;
          long long v53 = 0uLL;
          long long v54 = 0uLL;
          long long v51 = 0uLL;
          long long v52 = 0uLL;
          long long v49 = 0uLL;
          long long v50 = 0uLL;
          long long v47 = 0uLL;
          long long v48 = 0uLL;
          long long v45 = 0uLL;
          long long v46 = 0uLL;
          long long v43 = 0uLL;
          long long v44 = 0uLL;
          long long v41 = 0uLL;
          long long v42 = 0uLL;
          long long v40 = 0uLL;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Failed to read symbol table file. ", 34);
          long long v23 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" bytes, table type ", 19);
          long long v24 = (void *)std::ostream::operator<<();
          long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", path: ", 8);
          int v26 = *(char *)(a2 + 23);
          if (v26 >= 0) {
            uint64_t v27 = a2;
          }
          else {
            uint64_t v27 = *(void *)a2;
          }
          if (v26 >= 0) {
            uint64_t v28 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v28 = *(void *)(a2 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v40);
        }
        long long v55 = 0uLL;
        long long v56 = 0uLL;
        long long v53 = 0uLL;
        long long v54 = 0uLL;
        long long v51 = 0uLL;
        long long v52 = 0uLL;
        long long v49 = 0uLL;
        long long v50 = 0uLL;
        long long v47 = 0uLL;
        long long v48 = 0uLL;
        long long v45 = 0uLL;
        long long v46 = 0uLL;
        long long v43 = 0uLL;
        long long v44 = 0uLL;
        long long v41 = 0uLL;
        long long v42 = 0uLL;
        long long v40 = 0uLL;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
        long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Failed to read symbol table file. ", 34);
        long long v30 = __error();
        long long v31 = strerror(*v30);
        size_t v32 = strlen(v31);
        long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", table type ", 13);
        long long v34 = (void *)std::ostream::operator<<();
        long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", path: ", 8);
        int v36 = *(char *)(a2 + 23);
        if (v36 >= 0) {
          uint64_t v37 = a2;
        }
        else {
          uint64_t v37 = *(void *)a2;
        }
        if (v36 >= 0) {
          uint64_t v38 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v38 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v40);
    }
  }
}

void sub_1B23675C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t quasar::ModelLoader::compileModel(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".espresso.net");
  unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  unint64_t v4 = *(void *)(a2 + 8);
  if ((v3 & 0x80u) == 0) {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  int v6 = SBYTE7(v32);
  if ((SBYTE7(v32) & 0x80u) == 0) {
    uint64_t v7 = (void *)BYTE7(v32);
  }
  else {
    uint64_t v7 = __p[1];
  }
  BOOL v18 = v5 >= (unint64_t)v7;
  unint64_t v8 = v5 - (void)v7;
  if (!v18)
  {
    BOOL v9 = 0;
    if ((SBYTE7(v32) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if ((v3 & 0x80) != 0)
  {
    if (v7 == (void *)-1 || v4 < v8) {
LABEL_69:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v4 - v8 >= (unint64_t)v7) {
      size_t v20 = (size_t)v7;
    }
    else {
      size_t v20 = v4 - v8;
    }
    uint64_t v21 = *(void *)a2;
  }
  else
  {
    BOOL v18 = v7 != (void *)-1 && v3 >= v8;
    if (!v18) {
      goto LABEL_69;
    }
    size_t v19 = v3 - v8;
    if (v19 >= (unint64_t)v7) {
      size_t v20 = (size_t)v7;
    }
    else {
      size_t v20 = v19;
    }
    uint64_t v21 = a2;
  }
  if ((SBYTE7(v32) & 0x80u) == 0) {
    uint64_t v28 = __p;
  }
  else {
    uint64_t v28 = (void **)__p[0];
  }
  int v29 = memcmp((const void *)(v21 + v8), v28, v20);
  BOOL v9 = (void *)v20 == v7 && v29 == 0;
  if (v6 < 0) {
LABEL_9:
  }
    operator delete(__p[0]);
LABEL_10:
  if (v9)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Compiling espresso model: ", 26);
      int v11 = *(char *)(a2 + 23);
      if (v11 >= 0) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = *(void *)a2;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    if (espresso_ane_cache_has_network()) {
      std::allocate_shared[abi:ne180100]<kaldi::quasar::CEInferenceNet,std::allocator<kaldi::quasar::CEInferenceNet>,std::string const&,void>((uint64_t)&v48, a2);
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skipping already compiled ANE model: ", 37);
      int v15 = *(char *)(a2 + 23);
      if (v15 >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = *(void *)a2;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v17 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    return 1;
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Model is not in espresso format: ", 33);
      int v23 = *(char *)(a2 + 23);
      if (v23 >= 0) {
        uint64_t v24 = a2;
      }
      else {
        uint64_t v24 = *(void *)a2;
      }
      if (v23 >= 0) {
        uint64_t v25 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v25 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    return 0;
  }
}

void sub_1B2367914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
}

uint64_t quasar::ModelLoader::purgeModel(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".espresso.net");
  unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  unint64_t v4 = *(void *)(a2 + 8);
  if ((v3 & 0x80u) == 0) {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  int v6 = SBYTE7(v42);
  if ((SBYTE7(v42) & 0x80u) == 0) {
    uint64_t v7 = (void *)BYTE7(v42);
  }
  else {
    uint64_t v7 = __p[1];
  }
  BOOL v19 = v5 >= (unint64_t)v7;
  unint64_t v8 = v5 - (void)v7;
  if (!v19)
  {
    BOOL v9 = 0;
    if ((SBYTE7(v42) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if ((v3 & 0x80) != 0)
  {
    if (v7 == (void *)-1 || v4 < v8) {
LABEL_86:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v4 - v8 >= (unint64_t)v7) {
      size_t v21 = (size_t)v7;
    }
    else {
      size_t v21 = v4 - v8;
    }
    uint64_t v22 = *(void *)a2;
  }
  else
  {
    BOOL v19 = v7 != (void *)-1 && v3 >= v8;
    if (!v19) {
      goto LABEL_86;
    }
    size_t v20 = v3 - v8;
    if (v20 >= (unint64_t)v7) {
      size_t v21 = (size_t)v7;
    }
    else {
      size_t v21 = v20;
    }
    uint64_t v22 = a2;
  }
  if ((SBYTE7(v42) & 0x80u) == 0) {
    int v29 = __p;
  }
  else {
    int v29 = (void **)__p[0];
  }
  int v30 = memcmp((const void *)(v22 + v8), v29, v21);
  BOOL v9 = (void *)v21 == v7 && v30 == 0;
  if (v6 < 0) {
LABEL_9:
  }
    operator delete(__p[0]);
LABEL_10:
  if (!v9)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Model is not in espresso format: ", 33);
      int v24 = *(char *)(a2 + 23);
      if (v24 >= 0) {
        uint64_t v25 = a2;
      }
      else {
        uint64_t v25 = *(void *)a2;
      }
      if (v24 >= 0) {
        uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v26 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      goto LABEL_46;
    }
    return 0;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Purging espresso model: ", 24);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  if (espresso_ane_cache_has_network())
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to check ANE cache existence, network: ", 46);
      int v15 = *(char *)(a2 + 23);
      if (v15 >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = *(void *)a2;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v17 = *(void *)(a2 + 8);
      }
      BOOL v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", status: ", 10);
      std::ostream::operator<<();
LABEL_46:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      return 0;
    }
    return 0;
  }
  if (espresso_ane_cache_purge_network())
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to purge model from ANE cache, network: ", 47);
      int v33 = *(char *)(a2 + 23);
      if (v33 >= 0) {
        uint64_t v34 = a2;
      }
      else {
        uint64_t v34 = *(void *)a2;
      }
      if (v33 >= 0) {
        uint64_t v35 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v35 = *(void *)(a2 + 8);
      }
      long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", status: ", 10);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    return 0;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Successfully purged model from ANE cache: ", 42);
    int v38 = *(char *)(a2 + 23);
    if (v38 >= 0) {
      uint64_t v39 = a2;
    }
    else {
      uint64_t v39 = *(void *)a2;
    }
    if (v38 >= 0) {
      uint64_t v40 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v40 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  return 1;
}

void sub_1B2367E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ModelLoader::makeMilANEReadyOnLowEnd(uint64_t this)
{
  return this;
}

uint64_t quasar::ModelLoader::milIsANEReadyOnLowEnd(quasar::ModelLoader *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 488);
  return v1 & 1;
}

dispatch_group_t quasar::ModelLoader::enableParallelLoading(quasar::ModelLoader *this)
{
  *((void *)this + 59) = dispatch_queue_create("backgroundLoading", 0);
  dispatch_group_t result = dispatch_group_create();
  *((void *)this + 60) = result;
  atomic_store(1u, (unsigned __int8 *)this + 489);
  return result;
}

BOOL quasar::ModelLoader::isParallelLoadingEnabled(uint64_t a1, uint64_t **a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 489));
  if ((v2 & 1) == 0) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ".mlmodelc");
  unint64_t v5 = *((unsigned __int8 *)a2 + 23);
  unint64_t v6 = (unint64_t)a2[1];
  if ((v5 & 0x80u) == 0) {
    unint64_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v7 = (unint64_t)a2[1];
  }
  int v8 = (char)v20;
  if ((v20 & 0x80u) == 0) {
    size_t v9 = v20;
  }
  else {
    size_t v9 = (size_t)__p[1];
  }
  BOOL v12 = v7 >= v9;
  unint64_t v10 = v7 - v9;
  if (!v12)
  {
    BOOL v3 = 0;
    if (((char)v20 & 0x80000000) == 0) {
      return v3;
    }
LABEL_11:
    operator delete(__p[0]);
    return v3;
  }
  if ((v5 & 0x80) != 0)
  {
    if (v9 == -1 || v6 < v10) {
LABEL_42:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v6 - v10 >= v9) {
      size_t v14 = v9;
    }
    else {
      size_t v14 = v6 - v10;
    }
    a2 = (uint64_t **)*a2;
  }
  else
  {
    BOOL v12 = v9 != -1 && v5 >= v10;
    if (!v12) {
      goto LABEL_42;
    }
    size_t v13 = v5 - v10;
    if (v13 >= v9) {
      size_t v14 = v9;
    }
    else {
      size_t v14 = v13;
    }
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  int v17 = memcmp((char *)a2 + v10, v16, v14);
  BOOL v3 = v14 == v9 && v17 == 0;
  if (v8 < 0) {
    goto LABEL_11;
  }
  return v3;
}

uint64_t quasar::ModelLoader::keepANEModelLoadedEnabled(uint64_t this)
{
  return this;
}

BOOL quasar::ModelLoader::isKeepANEModelLoadedEnabled(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 490));
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, ".mlmodelc");
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
    unint64_t v6 = *(void *)(a2 + 8);
    if ((v5 & 0x80u) == 0) {
      unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      unint64_t v7 = *(void *)(a2 + 8);
    }
    unsigned __int8 v8 = v34;
    if ((v34 & 0x80u) == 0) {
      size_t v9 = v34;
    }
    else {
      size_t v9 = (size_t)v33[1];
    }
    BOOL v11 = v7 >= v9;
    unint64_t v10 = v7 - v9;
    if (!v11) {
      goto LABEL_37;
    }
    if ((v5 & 0x80) != 0)
    {
      if (v9 == -1 || v6 < v10) {
LABEL_72:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v6 - v10 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v6 - v10;
      }
      uint64_t v14 = *(void *)a2;
    }
    else
    {
      BOOL v11 = v9 != -1 && v5 >= v10;
      if (!v11) {
        goto LABEL_72;
      }
      size_t v12 = v5 - v10;
      if (v12 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v12;
      }
      uint64_t v14 = a2;
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v16 = v33;
    }
    else {
      uint64_t v16 = (void **)v33[0];
    }
    int v17 = memcmp((const void *)(v14 + v10), v16, v13);
    if (v13 == v9 && v17 == 0)
    {
      BOOL isEspressoV2Mil = 1;
      if ((v8 & 0x80) == 0) {
        return isEspressoV2Mil;
      }
      goto LABEL_47;
    }
LABEL_37:
    std::string::basic_string[abi:ne180100]<0>(__p, ".bundle");
    unint64_t v19 = *(unsigned __int8 *)(a2 + 23);
    unint64_t v20 = *(void *)(a2 + 8);
    if ((v19 & 0x80u) == 0) {
      unint64_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      unint64_t v21 = *(void *)(a2 + 8);
    }
    unsigned __int8 v22 = v32;
    if ((v32 & 0x80u) == 0) {
      size_t v23 = v32;
    }
    else {
      size_t v23 = (size_t)__p[1];
    }
    BOOL v11 = v21 >= v23;
    unint64_t v24 = v21 - v23;
    if (!v11) {
      goto LABEL_44;
    }
    if ((v19 & 0x80) != 0)
    {
      if (v23 == -1 || v20 < v24) {
LABEL_73:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v20 - v24 >= v23) {
        size_t v27 = v23;
      }
      else {
        size_t v27 = v20 - v24;
      }
      uint64_t v28 = *(void *)a2;
    }
    else
    {
      if (v23 == -1) {
        goto LABEL_73;
      }
      BOOL v11 = v19 >= v24;
      size_t v26 = v19 - v24;
      if (!v11) {
        goto LABEL_73;
      }
      if (v26 >= v23) {
        size_t v27 = v23;
      }
      else {
        size_t v27 = v26;
      }
      uint64_t v28 = a2;
    }
    if ((v32 & 0x80u) == 0) {
      int v29 = __p;
    }
    else {
      int v29 = (void **)__p[0];
    }
    int v30 = memcmp((const void *)(v28 + v24), v29, v27);
    if (v27 == v23 && !v30)
    {
      BOOL isEspressoV2Mil = 1;
      if ((v22 & 0x80) == 0)
      {
LABEL_46:
        if ((v34 & 0x80) == 0) {
          return isEspressoV2Mil;
        }
LABEL_47:
        operator delete(v33[0]);
        return isEspressoV2Mil;
      }
LABEL_45:
      operator delete(__p[0]);
      goto LABEL_46;
    }
LABEL_44:
    BOOL isEspressoV2Mil = kaldi::quasar::isEspressoV2Mil((uint64_t *)a2);
    if ((v32 & 0x80) == 0) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  return 0;
}

void sub_1B236825C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ModelLoader::getModelInitializeContext@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 504);
  *a2 = *(void *)(this + 496);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void quasar::ModelLoader::setModelInitializeContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 504);
  *(void *)(a1 + 496) = v3;
  *(void *)(a1 + 504) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

NSObject *quasar::ModelLoader::waitUntilLoadingFinishes(quasar::ModelLoader *this)
{
  dispatch_group_t result = *((void *)this + 60);
  if (result) {
    return dispatch_group_wait(result, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t quasar::ModelLoader::getDispatchQueue(quasar::ModelLoader *this)
{
  return *((void *)this + 59);
}

uint64_t quasar::ModelLoader::getDispatchGroup(quasar::ModelLoader *this)
{
  return *((void *)this + 60);
}

uint64_t quasar::ModelLoader::enableEmbeddedMlock(uint64_t this, char a2)
{
  *(unsigned char *)(this + 576) = a2;
  return this;
}

void quasar::ModelLoader::setEmbeddedMlockOverrides(quasar::ModelLoader *this, const quasar::PTree *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 584);
  uint64_t v3 = quasar::PTree::begin(a2);
  if (v3 != quasar::PTree::end(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
    quasar::PTree::getString(v3 + 24, (uint64_t)__p);
  }
  if (quasar::gLogLevel > 3)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ModelLoader embedded mlock overrides: ", 38);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
}

void sub_1B2368488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

std::string *quasar::ModelLoader::requestEmbeddedMlock@<X0>(std::string *result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>, float a4@<S0>)
{
  float v9 = a4;
  if (result[24].__r_.__value_.__s.__data_[0])
  {
    p_std::string::size_type size = (uint64_t)&result[24].__r_.__value_.__l.__size_;
    long long v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&result[24].__r_.__value_.__l.__size_, a2);
    if (v7)
    {
      long long v8 = (float *)(v7 + 40);
    }
    else
    {
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,float &>(p_size, a2, (uint64_t)a2, &v9);
      long long v8 = &v9;
    }
    return std::allocate_shared[abi:ne180100]<quasar::ModelLoader::EmbeddedMlockContext,std::allocator<quasar::ModelLoader::EmbeddedMlockContext>,std::string const&,float &,void>((long long *)a2, v8, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t quasar::ModelLoader::dumpInCoreStats(quasar::ModelLoader *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = sysconf(29);
  if (v31 == -1)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"could not sysconf(_SC_PAGESIZE): ", 33);
    __error();
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  for (unint64_t i = (void *)*((void *)this + 3); i; unint64_t i = (void *)*i)
  {
    __p[0] = v34;
    __p[1] = &v31;
    *(void *)&long long v15 = &v33;
    *((void *)&v15 + 1) = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(i + 2), (void **)__p);
  }
  for (uint64_t j = (void *)*((void *)this + 38); j; uint64_t j = (void *)*j)
  {
    v42[0] = v34;
    v42[1] = &v31;
    v42[2] = &v33;
    v42[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(j + 2), v42);
  }
  for (k = (void *)*((void *)this + 28); k; k = (void *)*k)
  {
    v41[0] = v34;
    v41[1] = &v31;
    _OWORD v41[2] = &v33;
    v41[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(k + 2), v41);
  }
  for (m = (void *)*((void *)this + 33); m; m = (void *)*m)
  {
    v40[0] = v34;
    v40[1] = &v31;
    v40[2] = &v33;
    v40[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(m + 2), v40);
  }
  for (n = (void *)*((void *)this + 43); n; n = (void *)*n)
  {
    v39[0] = v34;
    v39[1] = &v31;
    v39[2] = &v33;
    v39[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(n + 2), v39);
  }
  for (iunint64_t i = (void *)*((void *)this + 48); ii; iunint64_t i = (void *)*ii)
  {
    v38[0] = v34;
    v38[1] = &v31;
    v38[2] = &v33;
    v38[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(ii + 2), v38);
  }
  uint64_t v9 = *((void *)this + 56);
  uint64_t v8 = *((void *)this + 57);
  if (v9 != v8)
  {
    v37[0] = v34;
    v37[1] = &v31;
    void v37[2] = &v33;
    void v37[3] = &v32;
    do
    {
      quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>(v9, v37);
      v9 += 24;
    }
    while (v9 != v8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"total ", 6);
  long long v10 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" pages loaded of ", 17);
  long long v11 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  std::stringbuf::str();
  if ((SBYTE7(v15) & 0x80u) == 0) {
    long long v12 = __p;
  }
  else {
    long long v12 = (void **)__p[0];
  }
  fputs((const char *)v12, (FILE *)*MEMORY[0x1E4F143C8]);
  if (SBYTE7(v15) < 0) {
    operator delete(__p[0]);
  }
  v34[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v34[1] = MEMORY[0x1E4FBA470] + 16;
  if (v35 < 0) {
    operator delete((void *)v34[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v36);
}

void sub_1B23688F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Read()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B2368C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v6 - 169) < 0) {
    operator delete(*(void **)(v5 + 144));
  }
  fst::FstHeader::~FstHeader((void **)va);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = (void *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 64) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 68) = _D0;
  *(void *)a1 = &unk_1F0A38518;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__str, "ngram");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*v3)
  {
    (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    *uint64_t v3 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    *(void *)(a1 + 48) = 0;
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x25A555550001;
  return a1;
}

void sub_1B2368E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((void *)(v15 + 344));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((void *)(v15 + 280));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(v16);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Read()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B2369194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v6 - 169) < 0) {
    operator delete(*(void **)(v5 + 144));
  }
  fst::FstHeader::~FstHeader((void **)va);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = (void *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 64) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 68) = _D0;
  *(void *)a1 = &unk_1F0A38550;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (*v3)
  {
    (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    *uint64_t v3 = 0;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    *(void *)(a1 + 48) = 0;
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x25A555550001;
  return a1;
}

void sub_1B2369394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((void *)(v15 + 344));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((void *)(v15 + 280));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(v16);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read()
{
}

void sub_1B236964C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3BAB0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1B2369794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read()
{
}

void sub_1B2369A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3BB20;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1B2369B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read()
{
}

void sub_1B2369E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3BAE8;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1B2369F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read()
{
}

void sub_1B236A200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3BB58;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1B236A348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B236A8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

void fst::SqueezedQuantizationOptions<false,false>::Read()
{
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3C330;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(void *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1B236AB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 144);
  *(void *)(v15 + 144) = 0;
  if (v17) {
    MEMORY[0x1B3EA8670](v17, 0x1000C40451B5BE8);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B236B0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3C3A0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(void *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1B236B244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 144);
  *(void *)(v15 + 144) = 0;
  if (v17) {
    MEMORY[0x1B3EA8670](v17, 0x1000C40451B5BE8);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B236B7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

void fst::SqueezedQuantizationOptions<false,true>::Read()
{
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3C368;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(void *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1B236BA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 144);
  *(void *)(v15 + 144) = 0;
  if (v17) {
    MEMORY[0x1B3EA8670](v17, 0x1000C40504FFAC1);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B236BFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3C3D8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(void *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1B236C16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void *)(v15 + 144);
  *(void *)(v15 + 144) = 0;
  if (v17) {
    MEMORY[0x1B3EA8670](v17, 0x1000C40451B5BE8);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Read()
{
  long long v3 = 0u;
  long long v2 = 0u;
  long long v1 = 0u;
  long long v0 = 0u;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = -1;
  operator new();
}

void sub_1B236C898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a21);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  fst::FstHeader::~FstHeader(&a39);
  uint64_t v46 = *(void *)(v44 - 176);
  *(void *)(v44 - 176) = 0;
  if (v46) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100](v44 - 176, v46);
  }
  long long v47 = *(std::__shared_weak_count **)(v44 - 160);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  fst::FstHeader::~FstHeader((void **)(v44 - 144));
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  long long v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3E350;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "enumeration");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x555550001;
  return a1;
}

void sub_1B236CB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  uint64_t *v17 = 0;
  if (v19) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v17, v19);
  }
  uint64_t v20 = *(void *)(v15 + 72);
  *(void *)(v15 + 72) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *v16;
  uint64_t *v16 = 0;
  if (v21) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100]((uint64_t)v16, v21);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~EnumerationFstImpl(void *a1)
{
  *a1 = &unk_1F0A3E350;
  uint64_t v4 = a1[10];
  long long v2 = a1 + 10;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = a1[9];
  a1[9] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[8];
  a1[8] = 0;
  if (v6) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100]((uint64_t)(a1 + 8), v6);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~EnumerationFstImpl(void *a1)
{
  *a1 = &unk_1F0A3E350;
  uint64_t v4 = a1[10];
  long long v2 = a1 + 10;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = a1[9];
  a1[9] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[8];
  a1[8] = 0;
  if (v6) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100]((uint64_t)(a1 + 8), v6);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasSequentialStates()
{
  return 1;
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Copy()
{
}

void sub_1B236CDB8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40F083FB34);
  _Unwind_Resume(a1);
}

void std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 216);
    if (v3)
    {
      *(void *)(a2 + 224) = v3;
      operator delete(v3);
    }
    std::__tree<int>::destroy(a2 + 192, *(void **)(a2 + 200));
    *(void *)(a2 + 16) = &unk_1F0A3F738;
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher((void *)(a2 + 24));
    JUMPOUT(0x1B3EA8670);
  }
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetWeight(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 8;
  char v3 = fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Find(a1 + 8, a2);
  FstCheck(v3, "(const_cast<fst::SortedMatcher<InnerFstT>*>(&matcher_)->Find(label)) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value(v2) + 8;
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Final(uint64_t a1)
{
  return a1 + 152;
}

void *fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39008;
  uint64_t v2 = a1[3];
  if (v2)
  {
    (**(void (***)(void))v2)(a1[3]);
    *(void *)(v2 + 64) = a1[17];
    a1[17] = v2;
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  a1[10] = &unk_1F0A36B08;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36B08;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36B08;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Copy()
{
}

void sub_1B236D080(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 72))
  {
    *(unsigned char *)(result + 72) = 0;
  }
  else
  {
    uint64_t v1 = *(void *)(result + 24);
    ++*(void *)(v1 + 48);
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v1);
  }
  return result;
}

float fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Final_(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  int v3 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
  if (v3 <= 0) {
    return *(float *)(*(void *)(v2 + 104) + 8 * -v3);
  }
  else {
    return INFINITY;
  }
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Priority_(uint64_t a1, int a2)
{
  return fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Size()
{
  return 64;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena(void *a1)
{
  *a1 = &unk_1F0A37AC0;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  uint64_t vars8;

  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::Size()
{
  return 72;
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39008;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::MemoryPool((void *)(a1 + 80), 1);
}

void fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36B08;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B236D420(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37AC0;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B236D4C8(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      uint64_t v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 74) = 1;
    }
    uint64_t v6 = *(void *)(v3 + 24);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
      uint64_t v7 = *(void *)(v3 + 24);
    }
    else
    {
      uint64_t v8 = *(void *)(v3 + 136);
      if (v8)
      {
        *(void *)(v3 + 136) = *(void *)(v8 + 64);
      }
      else
      {
        uint64_t v8 = fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Allocate((void *)(v3 + 88), 1);
        *(void *)(v8 + 64) = 0;
      }
      uint64_t v7 = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator(v8, *(void *)(v3 + 8), a2);
      *(void *)(v3 + 24) = v7;
    }
    int v9 = *(_DWORD *)(v7 + 56);
    *(_DWORD *)(v7 + 56) = v9 & 0xFFFFFFEF;
    if (v9 != 15 && v9 != (v9 & 0xFFFFFFEF)) {
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v7);
    }
    dispatch_group_t result = fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void *)(v3 + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1B236D654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Search(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(_DWORD *)(a1 + 32)) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  int v4 = *(_DWORD *)(v2 + 56);
  unsigned int v5 = v4 & 0xFFFFFFF0 | v3;
  *(_DWORD *)(v2 + 56) = v5;
  if (v4 != 15 && v4 != v5) {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v2);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(v7 + 48) = 0;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v7);
    uint64_t v8 = *(void *)(a1 + 24);
    int v9 = (void *)(v8 + 48);
    unint64_t v10 = *(void *)(v8 + 48);
    if (v10 < *(void *)(v8 + 40))
    {
      while (1)
      {
        uint64_t v11 = *(_DWORD *)(a1 + 32) ? 28 : 24;
        int v12 = *(_DWORD *)(v8 + v11);
        int v13 = *(_DWORD *)(a1 + 40);
        BOOL v14 = v12 == v13;
        int v15 = v12 <= v13 ? 0 : 7;
        if (v14) {
          int v15 = 1;
        }
        if (v15) {
          break;
        }
        *int v9 = v10 + 1;
        fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v8);
        uint64_t v8 = *(void *)(a1 + 24);
        int v9 = (void *)(v8 + 48);
        unint64_t v10 = *(void *)(v8 + 48);
        if (v10 >= *(void *)(v8 + 40)) {
          return 0;
        }
      }
      uint64_t result = 0;
      if (v15 == 1) {
        return 1;
      }
      return result;
    }
    return 0;
  }
  unint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 24);
  unint64_t v18 = 0;
  if (!v16)
  {
LABEL_32:
    *(void *)(v17 + 48) = v18;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v17);
    return 0;
  }
  while (1)
  {
    unint64_t v19 = (v16 + v18) >> 1;
    *(void *)(v17 + 48) = v19;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v17);
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v20 = *(_DWORD *)(a1 + 32) ? 28 : 24;
    int v21 = *(_DWORD *)(v17 + v20);
    int v22 = *(_DWORD *)(a1 + 40);
    if (v21 <= v22) {
      break;
    }
    unint64_t v16 = (v16 + v18) >> 1;
LABEL_31:
    if (v18 >= v16) {
      goto LABEL_32;
    }
  }
  if (v21 < v22)
  {
    unint64_t v18 = v19 + 1;
    goto LABEL_31;
  }
  while (v19 > v18)
  {
    *(void *)(v17 + 48) = --v19;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v17);
    uint64_t v17 = *(void *)(a1 + 24);
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v24 = 28;
    }
    else {
      uint64_t v24 = 24;
    }
    if (*(_DWORD *)(v17 + v24) != *(_DWORD *)(a1 + 40))
    {
      *(void *)(v17 + 48) = v19 + 1;
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v17);
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(void *)(v3 + 48) >= *(void *)(v3 + 40)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  int v6 = *(_DWORD *)(v3 + 56);
  unsigned int v7 = v6 & 0xFFFFFFF0 | v5;
  *(_DWORD *)(v3 + 56) = v7;
  BOOL v8 = v6 == 15 || v6 == v7;
  if (!v8)
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v3);
    int v4 = *(_DWORD *)(a1 + 32);
  }
  BOOL v8 = v4 == 0;
  uint64_t v9 = 28;
  if (v8) {
    uint64_t v9 = 24;
  }
  return *(_DWORD *)(*(void *)(a1 + 24) + v9) != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = v4 | 0xF;
  if (v4 != 15 && v4 != (v4 | 0xF))
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v3);
    uint64_t v3 = *(void *)(a1 + 24);
  }
  return v3 + 24;
}

void std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(uint64_t a1, fst::EnumerationData *a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3E350;
  fst::EnumerationData::Copy(a2);
}

void sub_1B236DCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *v16;
  uint64_t *v16 = 0;
  if (v18) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v16, v18);
  }
  uint64_t v19 = *(void *)(v15 + 72);
  *(void *)(v15 + 72) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(v15 + 64);
  *(void *)(v15 + 64) = 0;
  if (v20) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100](v15 + 64, v20);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::EnumerationData::Copy(fst::EnumerationData *this)
{
}

void sub_1B236DE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x1B3EA8670](v10, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t *fst::EnumerationData::EnumerationData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *a1;
  }
  FstCheck(*(void *)(v3 + 24) != 0, "(region_->Size()) > (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return a1;
}

void sub_1B236DEB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::VirtualStateSpaceManager(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::FstStateDenseDistribution(a1 + 2, a3);
}

void sub_1B236E288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  long long v23 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 224) = v23;
    operator delete(v23);
  }
  std::__tree<int>::destroy(v20, *(void **)(v19 + 200));
  *(void *)(v19 + 16) = &unk_1F0A3F738;
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher((void *)(v19 + 24));
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationData::TeleportationPoint(fst::EnumerationData *this, int a2)
{
  FstCheck(a2 >= 0, "(idx) >= (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(_DWORD *)(*(void *)(*(void *)this + 8) + 8) > a2, "(idx) < (Header().num_teleportation_points)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return *(void *)(*(void *)this + 8) + 12 * a2 + 40;
}

uint64_t fst::EnumerationData::SubFst(fst::EnumerationData *this, int a2)
{
  FstCheck(a2 >= 0, "(idx) >= (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(_DWORD *)(*(void *)(*(void *)this + 8) + 4) > a2, "(idx) < (NumSubFsts())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return *(void *)(*(void *)this + 8) + 12 * *(int *)(*(void *)(*(void *)this + 8) + 8) + 20 * a2 + 40;
}

void fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::FstStateDenseDistribution(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3F738;
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher((uint64_t)(a1 + 1), a2, 0, 1);
}

void sub_1B236E4D8(_Unwind_Exception *a1)
{
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(v1);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39008;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_1B236E660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,int const&,int &>(uint64_t **a1, int *a2, _DWORD *a3, int *a4)
{
  BOOL v8 = a1 + 1;
  unsigned int v7 = a1[1];
  if (v7)
  {
    int v9 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t **)v7;
        int v11 = *((_DWORD *)v7 + 7);
        if (v9 >= v11) {
          break;
        }
        unsigned int v7 = *v10;
        BOOL v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      unsigned int v7 = v10[1];
      if (!v7)
      {
        BOOL v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v10 = a1 + 1;
LABEL_10:
    int v12 = (uint64_t *)operator new(0x28uLL);
    int v13 = *a4;
    *((_DWORD *)v12 + 7) = *a3;
    *((_DWORD *)v12 + 8) = v13;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3E350;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 72) = v7;
  operator new();
}

void sub_1B236E900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  uint64_t *v17 = 0;
  if (v19) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v17, v19);
  }
  uint64_t v20 = *(void *)(v15 + 72);
  *(void *)(v15 + 72) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *v16;
  uint64_t *v16 = 0;
  if (v21) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100]((uint64_t)v16, v21);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~EnumerationFst(void *a1)
{
  fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 72) + 24))();
}

float fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons()
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumInputEpsilons();
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Copy()
{
}

void sub_1B236EBA8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(v2 + 80) + 240);
  return result;
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::InitArcIterator()
{
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::IsMemoryMapped(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 72) + 152))();
}

uint64_t fst::ImplToExpandedFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 80) + 240);
}

void *fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A43F78;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

float fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Final(uint64_t a1, int a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 80) + 184) <= a2) {
    return INFINITY;
  }
  int v2 = a2;
  float v4 = (*(float (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  float v5 = v4;
  if (v4 != INFINITY)
  {
    uint64_t v6 = *(void *)(a1 + 80);
    if (*(_DWORD *)(v6 + 184) <= v2)
    {
      int v7 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(v6, v2);
      uint64_t v8 = *(fst::EnumerationData **)v6;
      int v9 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v7);
      uint64_t v10 = (_DWORD *)fst::EnumerationData::SubFst(v8, *v9);
      uint64_t v11 = *(void *)(v6 + 216);
      if (v7 >= (unint64_t)((*(void *)(v6 + 224) - v11) >> 2)) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      int v2 = *v10 + v2 - *(_DWORD *)(v11 + 4 * v7);
    }
    if (v2 != **(_DWORD **)(**(void **)v6 + 8))
    {
      float v5 = NAN;
      if (v4 != -INFINITY)
      {
        float v12 = *(float *)(v6 + 176);
        float v5 = NAN;
        if (v12 != -INFINITY)
        {
          BOOL v13 = v12 == INFINITY || v4 == INFINITY;
          float v14 = v4 + v12;
          if (v13) {
            return INFINITY;
          }
          else {
            return v14;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(uint64_t a1, int a2)
{
  FstCheck(*(_DWORD *)(a1 + 184) <= a2, "(IsMainGraph(virtual_state_id)) == (false)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  float v5 = (uint64_t *)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 200);
  if (v4)
  {
    do
    {
      int v6 = *(_DWORD *)(v4 + 28);
      BOOL v7 = v6 <= a2;
      if (v6 <= a2) {
        uint64_t v8 = (uint64_t *)(v4 + 8);
      }
      else {
        uint64_t v8 = (uint64_t *)v4;
      }
      if (!v7) {
        float v5 = (uint64_t *)v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
  }
  if (v5 == *(uint64_t **)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    int v9 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v10 = (void *)fst::cerr(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unable to find teleportation point index for virtual state ", 59);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v12 = *v5;
  if (*v5)
  {
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 8);
    }
    while (v12);
  }
  else
  {
    do
    {
      uint64_t v13 = v5[2];
      BOOL v14 = *(void *)v13 == (void)v5;
      float v5 = (uint64_t *)v13;
    }
    while (v14);
  }
  return *(unsigned int *)(v13 + 32);
}

void sub_1B236EF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumArcs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int HasVirtualBackoffArc = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasVirtualBackoffArc(*(void *)(a1 + 80), a2);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  int v7 = *(_DWORD *)(v6 + 184);
  if (HasVirtualBackoffArc)
  {
    if (v7 > (int)v2) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v2) + 1;
    }
    int v8 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(v6, v2);
    int v9 = *(fst::EnumerationData **)v6;
    uint64_t v10 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v8);
    uint64_t v11 = (_DWORD *)fst::EnumerationData::SubFst(v9, *v10);
    uint64_t v12 = *(void *)(v6 + 216);
    if (v8 < (unint64_t)((*(void *)(v6 + 224) - v12) >> 2))
    {
      uint64_t v2 = (*v11 + v2 - *(_DWORD *)(v12 + 4 * v8));
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v2) + 1;
    }
LABEL_12:
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 <= (int)v2)
  {
    int v14 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(v6, v2);
    uint64_t v15 = *(fst::EnumerationData **)v6;
    unint64_t v16 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v14);
    char v17 = (_DWORD *)fst::EnumerationData::SubFst(v15, *v16);
    uint64_t v18 = *(void *)(v6 + 216);
    if (v14 >= (unint64_t)((*(void *)(v6 + 224) - v18) >> 2)) {
      goto LABEL_12;
    }
    uint64_t v2 = (*v17 + v2 - *(_DWORD *)(v18 + 4 * v14));
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40);
  return v19(v5, v2);
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasVirtualBackoffArc(uint64_t a1, int a2)
{
  int v4 = a2;
  if (*(_DWORD *)(a1 + 184) <= a2)
  {
    int v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
    uint64_t v6 = *(fst::EnumerationData **)a1;
    int v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v5);
    int v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    uint64_t v9 = *(void *)(a1 + 216);
    if (v5 >= (unint64_t)((*(void *)(a1 + 224) - v9) >> 2)) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    int v4 = *v8 + a2 - *(_DWORD *)(v9 + 4 * v5);
  }
  if (v4 == **(_DWORD **)(**(void **)a1 + 8))
  {
    char v10 = 0;
  }
  else if (*(_DWORD *)(a1 + 184) <= a2)
  {
    char v10 = 1;
  }
  else
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator((uint64_t)v14, *(void *)(a1 + 8), a2);
    BOOL v12 = v16 < v15 && v14[6] == 0;
    char v10 = !v12;
  }
  return v10 & 1;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumInputEpsilons()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  long long v0 = fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  uint64_t v1 = (void *)fst::cerr(v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"NumInputEpsilons is not implemented on EnumerationFst since it cannot be computed efficiently.", 94);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B236F270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  if (*(_DWORD *)(v3 + 184) > a2
    && ((fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator((uint64_t)v6, *(void *)(v3 + 8), a2), v8 < v7)? (BOOL v4 = v6[6] == 0): (BOOL v4 = 0), v4))
  {
    return 1;
  }
  else
  {
    return fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasVirtualBackoffArc(v3, a2);
  }
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::InitArcIterator()
{
}

void sub_1B236F370(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40C8A3FF7BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ArcIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A37830;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 56) = -1;
  *(void *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator(a1 + 80, *(void *)(a2 + 72), 0);
  *(unsigned char *)(a1 + 144) = 0;
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::SetState(a1, a3);
  return a1;
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::SetState(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (*(_DWORD *)(v4 + 184) <= (int)a2)
  {
    int v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(*(void *)(*(void *)(a1 + 8) + 80), a2);
    uint64_t v6 = *(fst::EnumerationData **)v4;
    unint64_t v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v4, v5);
    unint64_t v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    uint64_t v9 = *(void *)(v4 + 216);
    if (v5 >= (unint64_t)((*(void *)(v4 + 224) - v9) >> 2)) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    a2 = (*v8 + v2 - *(_DWORD *)(v9 + 4 * v5));
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, a2);
  *(unsigned char *)(a1 + 144) = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasVirtualBackoffArc(*(void *)(*(void *)(a1 + 8) + 80), v2);
  *(_DWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 56) = fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumArcs(*(void *)(a1 + 8), v2);
  char v10 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 56);
  return v10(a1);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::~ArcIterator()
{
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Reinit(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 64) >= *(void *)(a1 + 56);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144) && !*(void *)(a1 + 64)) {
    return a1 + 36;
  }
  else {
    return a1 + 20;
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Next_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64) + 1;
  *(void *)(a1 + 64) = v2;
  FstCheck(v2 != 0, "(i_) >= (1)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  if (!*(unsigned char *)(a1 + 144) || *(void *)(a1 + 64) >= 2uLL)
  {
    ++*(void *)(a1 + 128);
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1 + 80);
  }
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Reset_(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1 + 80);
  *(void *)(a1 + 64) = 0;
  if (*(unsigned char *)(a1 + 144))
  {
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeBackoffArc(a1);
  }
  else
  {
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(a1);
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 144);
  if (*(unsigned char *)(a1 + 144)) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = a1 + 80;
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = a2 - v4;
  }
  *(void *)(a1 + 128) = v7;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v6);
  *(void *)(a1 + 64) = a2;
  if (a2 || !*(unsigned char *)(a1 + 144))
  {
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(a1);
  }
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::SetFlags_(uint64_t a1, char a2, int a3)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v5 = ~a3;
  int v6 = a2 & 0xF;
  int v7 = v4 & ~a3 | v6;
  *(_DWORD *)(a1 + 136) = v7;
  if (v4 != 15 && v4 != v7) {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1 + 80);
  }
  int v9 = *(_DWORD *)(a1 + 72);
  int v10 = v9 & v5 | v6;
  *(_DWORD *)(a1 + 72) = v10;
  if (v9 != 15 && v9 != v10)
  {
    if (*(unsigned char *)(a1 + 144) && !*(void *)(a1 + 64))
    {
      fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeBackoffArc(a1);
    }
    else
    {
      fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(a1);
    }
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1 < *(void *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 144)) {
      FstCheck(v1 != 0, "(i_) >= (1)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
    }
    int v3 = *(_DWORD *)(a1 + 72);
    *(void *)(a1 + 20) = *(void *)(a1 + 104);
    if ((v3 & 0xFu) - 1 >= 2)
    {
      if ((v3 & 8) != 0)
      {
        uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
        int v5 = *(_DWORD *)(a1 + 16);
        int v6 = *(_DWORD *)(a1 + 116);
        if (*(_DWORD *)(v4 + 184) <= v5)
        {
          int v9 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(*(void *)(*(void *)(a1 + 8) + 80), v5);
          int v10 = *(fst::EnumerationData **)v4;
          uint64_t v11 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v4, v9);
          BOOL v12 = (_DWORD *)fst::EnumerationData::SubFst(v10, *v11);
          uint64_t v13 = *(void *)(v4 + 216);
          if (v9 >= (unint64_t)((*(void *)(v4 + 224) - v13) >> 2)) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
          int v6 = *(_DWORD *)(v13 + 4 * v9) + v6 - *v12;
        }
        else
        {
          int v7 = *(_DWORD *)(v4 + 188);
          int v8 = v6 - v7;
          if (v6 >= v7)
          {
            FstCheck(v8 < *(_DWORD *)(*(void *)(**(void **)v4 + 8) + 8), "(teleportation_point_idx) < (metadata_.NumTeleportationPoints())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
            int v6 = *(_DWORD *)(*(void *)(v4 + 216) + 4 * v8);
          }
        }
        *(_DWORD *)(a1 + 32) = v6;
        int v3 = *(_DWORD *)(a1 + 72);
      }
      if ((v3 & 4) != 0)
      {
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 112);
        if (*(_DWORD *)(a1 + 20))
        {
          uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 80);
          int v15 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(v14 + 184) <= v15)
          {
            int v16 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(*(void *)(*(void *)(a1 + 8) + 80), *(_DWORD *)(a1 + 16));
            char v17 = *(fst::EnumerationData **)v14;
            uint64_t v18 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v14, v16);
            uint64_t v19 = (_DWORD *)fst::EnumerationData::SubFst(v17, *v18);
            uint64_t v20 = *(void *)(v14 + 216);
            if (v16 >= (unint64_t)((*(void *)(v14 + 224) - v20) >> 2)) {
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            int v15 = *v19 + v15 - *(_DWORD *)(v20 + 4 * v16);
          }
          if (v15 != **(_DWORD **)(**(void **)v14 + 8))
          {
            float v21 = *(float *)(a1 + 28);
            float v22 = NAN;
            if (v21 != -INFINITY)
            {
              float v23 = *(float *)(v14 + 176);
              float v22 = NAN;
              if (v23 != -INFINITY)
              {
                float v22 = INFINITY;
                BOOL v24 = v23 == INFINITY || v21 == INFINITY;
                float v25 = v21 + v23;
                if (!v24) {
                  float v22 = v25;
                }
              }
            }
            *(float *)(a1 + 28) = v22;
          }
        }
      }
    }
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeBackoffArc(uint64_t a1)
{
  FstCheck(*(unsigned char *)(a1 + 144), "(has_virtual_backoff_arc_) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  int v2 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ((v2 & 0xFu) - 1 >= 2)
  {
    if ((v2 & 8) != 0)
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 80);
      int v4 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(v3 + 184) <= v4)
      {
        int v6 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(*(void *)(*(void *)(a1 + 8) + 80), v4);
        int v5 = (_DWORD *)(fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v3, v6) + 8);
        int v2 = *(_DWORD *)(a1 + 72);
      }
      else
      {
        int v5 = *(_DWORD **)(**(void **)v3 + 8);
      }
      *(_DWORD *)(a1 + 48) = *v5;
    }
    if ((v2 & 4) != 0) {
      *(float *)(a1 + 44) = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetBackoffWeight(*(void *)(*(void *)(a1 + 8) + 80), *(_DWORD *)(a1 + 16));
    }
  }
}

float fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetBackoffWeight(uint64_t a1, int a2)
{
  int v4 = a2;
  if (*(_DWORD *)(a1 + 184) <= a2)
  {
    int v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
    int v6 = *(fst::EnumerationData **)a1;
    int v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v5);
    int v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    uint64_t v9 = *(void *)(a1 + 216);
    if (v5 >= (unint64_t)((*(void *)(a1 + 224) - v9) >> 2)) {
      goto LABEL_18;
    }
    int v4 = *v8 + a2 - *(_DWORD *)(v9 + 4 * v5);
  }
  FstCheck(v4 != **(_DWORD **)(**(void **)a1 + 8), "(IsUnigramState(virtual_state_id)) == (false)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  int v10 = *(_DWORD *)(a1 + 184);
  int v11 = a2;
  if (v10 > a2) {
    goto LABEL_7;
  }
  int v12 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
  uint64_t v13 = *(fst::EnumerationData **)a1;
  uint64_t v14 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v12);
  int v15 = (_DWORD *)fst::EnumerationData::SubFst(v13, *v14);
  uint64_t v16 = *(void *)(a1 + 216);
  if (v12 >= (unint64_t)((*(void *)(a1 + 224) - v16) >> 2)) {
LABEL_18:
  }
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  int v11 = *v15 + a2 - *(_DWORD *)(v16 + 4 * v12);
  int v10 = *(_DWORD *)(a1 + 184);
LABEL_7:
  char v17 = *(fst::EnumerationData **)a1;
  if (v10 <= a2)
  {
    int v20 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
    float v21 = (int *)fst::EnumerationData::TeleportationPoint(v17, v20);
    fst::EnumerationData::SubFst(*(fst::EnumerationData **)a1, *v21);
    int v22 = *(_DWORD *)(a1 + 184);
    if (v22 <= a2)
    {
      int v24 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
      float v23 = (int *)(fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v24) + 8);
      int v22 = *(_DWORD *)(a1 + 184);
    }
    else
    {
      float v23 = *(int **)(**(void **)a1 + 8);
    }
    int v25 = *v23;
    FstCheck(v22 > *v23, "(IsMainGraph(backoff_state_id)) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
    if (*(_DWORD *)(a1 + 184) > v25)
    {
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator((uint64_t)__p, *(void *)(a1 + 8), v25);
      if (v35 < v34 && !v33)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        long long v26 = fst::LogMessage::LogMessage((fst *)v30, (uint64_t)__p);
        long long v27 = (void *)fst::cerr(v26);
        long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Backing off to a state with an explicit back-off arc ", 53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"is not supported and will yield an unnormalized model.", 54);
        fst::LogMessage::~LogMessage((fst::LogMessage *)v30);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher((uint64_t)__p, *(void *)(a1 + 8), 0, 1);
  }
  float v18 = *(float *)(a1 + 180);
  float v19 = expf(*(float *)(*(void *)(*(void *)v17 + 8)
                      + 12 * *(int *)(*(void *)(*(void *)v17 + 8) + 8)
                      + 20 * *(int *)(*(void *)(*(void *)v17 + 8) + 4)
                      + 4 * *(int *)(*(void *)(*(void *)v17 + 8) + 36)
                      + 4 * v11
                      + 40));
  return v18 + log1pf(-v19);
}

void sub_1B23703EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double fst::NegLogDiff(fst *this, double a2, double a3, BOOL *a4, double a5)
{
  double v5 = a2;
  if (a3 != INFINITY)
  {
    if (a2 >= a3)
    {
      if (a2 - a3 >= a5)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          uint64_t v9 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
          int v10 = (void *)fst::cerr(v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"NegLogDiff: undefined ", 22);
          int v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
          std::ostream::operator<<();
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        if (this) {
          *(unsigned char *)this = 1;
        }
      }
      return INFINITY;
    }
    else
    {
      long double v7 = exp(a3 - a2);
      return a3 - log(v7 + -1.0);
    }
  }
  return v5;
}

void sub_1B23705B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Read()
{
  long long v3 = 0u;
  long long v2 = 0u;
  long long v1 = 0u;
  long long v0 = 0u;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = -1;
  operator new();
}

void sub_1B2370CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a21);
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  fst::FstHeader::~FstHeader(&a39);
  uint64_t v46 = *(void *)(v44 - 176);
  *(void *)(v44 - 176) = 0;
  if (v46) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100](v44 - 176, v46);
  }
  long long v47 = *(std::__shared_weak_count **)(v44 - 160);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  fst::FstHeader::~FstHeader((void **)(v44 - 144));
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  long long v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3E390;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "quantized_enumeration");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | 0x555550001;
  return a1;
}

void sub_1B2370FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  uint64_t *v17 = 0;
  if (v19) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v17, v19);
  }
  uint64_t v20 = *(void *)(v15 + 72);
  *(void *)(v15 + 72) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *v16;
  uint64_t *v16 = 0;
  if (v21) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100]((uint64_t)v16, v21);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~EnumerationFstImpl(void *a1)
{
  *a1 = &unk_1F0A3E390;
  uint64_t v4 = a1[10];
  long long v2 = a1 + 10;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = a1[9];
  a1[9] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[8];
  a1[8] = 0;
  if (v6) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100]((uint64_t)(a1 + 8), v6);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~EnumerationFstImpl(void *a1)
{
  *a1 = &unk_1F0A3E390;
  uint64_t v4 = a1[10];
  long long v2 = a1 + 10;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  uint64_t v5 = a1[9];
  a1[9] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[8];
  a1[8] = 0;
  if (v6) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100]((uint64_t)(a1 + 8), v6);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasSequentialStates()
{
  return 1;
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Copy()
{
}

void sub_1B23711E0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C40F083FB34);
  _Unwind_Resume(a1);
}

void std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 216);
    if (v3)
    {
      *(void *)(a2 + 224) = v3;
      operator delete(v3);
    }
    std::__tree<int>::destroy(a2 + 192, *(void **)(a2 + 200));
    *(void *)(a2 + 16) = &unk_1F0A3F758;
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher((void *)(a2 + 24));
    JUMPOUT(0x1B3EA8670);
  }
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetWeight(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 8;
  char v3 = fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Find(a1 + 8, a2);
  FstCheck(v3, "(const_cast<fst::SortedMatcher<InnerFstT>*>(&matcher_)->Find(label)) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value(v2) + 8;
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Final(uint64_t a1)
{
  return a1 + 152;
}

void *fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39088;
  uint64_t v2 = a1[3];
  if (v2)
  {
    (**(void (***)(void))v2)(a1[3]);
    *(void *)(v2 + 64) = a1[17];
    a1[17] = v2;
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  a1[10] = &unk_1F0A36B30;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36B30;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36B30;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Copy()
{
}

void sub_1B23714A8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

float fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Next_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    *(unsigned char *)(a1 + 72) = 0;
  }
  else
  {
    uint64_t v1 = *(void *)(a1 + 24);
    ++*(void *)(v1 + 48);
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v1);
  }
  return result;
}

float fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Final_(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  int v3 = *(_DWORD *)(*(void *)(v2 + 72) + 4 * a2);
  if (v3 <= 0) {
    return *(float *)(*(void *)(v2 + 104) + 8 * -v3);
  }
  else {
    return INFINITY;
  }
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Priority_(uint64_t a1, int a2)
{
  return fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Size()
{
  return 64;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena(void *a1)
{
  *a1 = &unk_1F0A37AE8;
  uint64_t v2 = a1 + 3;
  for (unint64_t i = (void *)a1[4]; i != v2; unint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  uint64_t vars8;

  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::Size()
{
  return 72;
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39088;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::MemoryPool((void *)(a1 + 80), 1);
}

void fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36B30;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B2371848(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37AE8;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B23718F0(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetState(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16) != a2)
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      uint64_t v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(v3 + 74) = 1;
    }
    uint64_t v6 = *(void *)(v3 + 24);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
      uint64_t v7 = *(void *)(v3 + 24);
    }
    else
    {
      uint64_t v8 = *(void *)(v3 + 136);
      if (v8)
      {
        *(void *)(v3 + 136) = *(void *)(v8 + 64);
      }
      else
      {
        uint64_t v8 = fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Allocate((void *)(v3 + 88), 1);
        *(void *)(v8 + 64) = 0;
      }
      uint64_t v7 = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator(v8, *(void *)(v3 + 8), a2);
      *(void *)(v3 + 24) = v7;
    }
    int v9 = *(_DWORD *)(v7 + 56);
    *(_DWORD *)(v7 + 56) = v9 & 0xFFFFFFEF;
    if (v9 != 15 && v9 != (v9 & 0xFFFFFFEF)) {
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v7);
    }
    float result = fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(void *)(v3 + 8), a2);
    *(void *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1B2371A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = a2 == 0;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Search(a1) & 1) != 0
        || *(unsigned char *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Search(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (*(_DWORD *)(a1 + 32)) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  int v4 = *(_DWORD *)(v2 + 56);
  unsigned int v5 = v4 & 0xFFFFFFF0 | v3;
  *(_DWORD *)(v2 + 56) = v5;
  if (v4 != 15 && v4 != v5) {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v2);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(v7 + 48) = 0;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v7);
    uint64_t v8 = *(void *)(a1 + 24);
    int v9 = (void *)(v8 + 48);
    unint64_t v10 = *(void *)(v8 + 48);
    if (v10 < *(void *)(v8 + 40))
    {
      while (1)
      {
        uint64_t v11 = *(_DWORD *)(a1 + 32) ? 28 : 24;
        int v12 = *(_DWORD *)(v8 + v11);
        int v13 = *(_DWORD *)(a1 + 40);
        BOOL v14 = v12 == v13;
        int v15 = v12 <= v13 ? 0 : 7;
        if (v14) {
          int v15 = 1;
        }
        if (v15) {
          break;
        }
        *int v9 = v10 + 1;
        fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v8);
        uint64_t v8 = *(void *)(a1 + 24);
        int v9 = (void *)(v8 + 48);
        unint64_t v10 = *(void *)(v8 + 48);
        if (v10 >= *(void *)(v8 + 40)) {
          return 0;
        }
      }
      uint64_t result = 0;
      if (v15 == 1) {
        return 1;
      }
      return result;
    }
    return 0;
  }
  unint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 24);
  unint64_t v18 = 0;
  if (!v16)
  {
LABEL_32:
    *(void *)(v17 + 48) = v18;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v17);
    return 0;
  }
  while (1)
  {
    unint64_t v19 = (v16 + v18) >> 1;
    *(void *)(v17 + 48) = v19;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v17);
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v20 = *(_DWORD *)(a1 + 32) ? 28 : 24;
    int v21 = *(_DWORD *)(v17 + v20);
    int v22 = *(_DWORD *)(a1 + 40);
    if (v21 <= v22) {
      break;
    }
    unint64_t v16 = (v16 + v18) >> 1;
LABEL_31:
    if (v18 >= v16) {
      goto LABEL_32;
    }
  }
  if (v21 < v22)
  {
    unint64_t v18 = v19 + 1;
    goto LABEL_31;
  }
  while (v19 > v18)
  {
    *(void *)(v17 + 48) = --v19;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v17);
    uint64_t v17 = *(void *)(a1 + 24);
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v24 = 28;
    }
    else {
      uint64_t v24 = 24;
    }
    if (*(_DWORD *)(v17 + v24) != *(_DWORD *)(a1 + 40))
    {
      *(void *)(v17 + 48) = v19 + 1;
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v17);
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(void *)(v3 + 48) >= *(void *)(v3 + 40)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  if (v4) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  int v6 = *(_DWORD *)(v3 + 56);
  unsigned int v7 = v6 & 0xFFFFFFF0 | v5;
  *(_DWORD *)(v3 + 56) = v7;
  BOOL v8 = v6 == 15 || v6 == v7;
  if (!v8)
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v3);
    int v4 = *(_DWORD *)(a1 + 32);
  }
  BOOL v8 = v4 == 0;
  uint64_t v9 = 28;
  if (v8) {
    uint64_t v9 = 24;
  }
  return *(_DWORD *)(*(void *)(a1 + 24) + v9) != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return a1 + 56;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = v4 | 0xF;
  if (v4 != 15 && v4 != (v4 | 0xF))
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v3);
    uint64_t v3 = *(void *)(a1 + 24);
  }
  return v3 + 24;
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(uint64_t a1, fst::EnumerationData *a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3E390;
  fst::EnumerationData::Copy(a2);
}

void sub_1B23720A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = *v16;
  uint64_t *v16 = 0;
  if (v18) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v16, v18);
  }
  uint64_t v19 = *(void *)(v15 + 72);
  *(void *)(v15 + 72) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(v15 + 64);
  *(void *)(v15 + 64) = 0;
  if (v20) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100](v15 + 64, v20);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::VirtualStateSpaceManager(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::FstStateDenseDistribution(a1 + 2, a3);
}

void sub_1B2372524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  float v23 = *v21;
  if (*v21)
  {
    *(void *)(v19 + 224) = v23;
    operator delete(v23);
  }
  std::__tree<int>::destroy(v20, *(void **)(v19 + 200));
  *(void *)(v19 + 16) = &unk_1F0A3F758;
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher((void *)(v19 + 24));
  _Unwind_Resume(a1);
}

void fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::FstStateDenseDistribution(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A3F758;
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher((uint64_t)(a1 + 1), a2, 0, 1);
}

void sub_1B2372650(_Unwind_Exception *a1)
{
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(v1);
  _Unwind_Resume(a1);
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39088;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_1B23727D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A3E390;
  uint64_t v6 = *a2;
  *a2 = 0;
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *a3;
  *a3 = 0;
  *(void *)(a1 + 72) = v7;
  operator new();
}

void sub_1B23729B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *v17;
  uint64_t *v17 = 0;
  if (v19) {
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v17, v19);
  }
  uint64_t v20 = *(void *)(v15 + 72);
  *(void *)(v15 + 72) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *v16;
  uint64_t *v16 = 0;
  if (v21) {
    std::default_delete<fst::EnumerationData const>::operator()[abi:ne180100]((uint64_t)v16, v21);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~EnumerationFst(void *a1)
{
  fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 72) + 24))();
}

float fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons()
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumInputEpsilons();
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumOutputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Copy()
{
}

void sub_1B2372C5C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(void *)(v2 + 80) + 240);
  return result;
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::InitArcIterator()
{
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::IsMemoryMapped(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 72) + 152))();
}

uint64_t fst::ImplToExpandedFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 80) + 240);
}

void *fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A44030;
  uint64_t v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

float fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Final(uint64_t a1, int a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 80) + 184) <= a2) {
    return INFINITY;
  }
  int v2 = a2;
  float v4 = (*(float (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  float v5 = v4;
  if (v4 != INFINITY)
  {
    uint64_t v6 = *(void *)(a1 + 80);
    if (*(_DWORD *)(v6 + 184) <= v2)
    {
      int v7 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(v6, v2);
      uint64_t v8 = *(fst::EnumerationData **)v6;
      uint64_t v9 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v7);
      unint64_t v10 = (_DWORD *)fst::EnumerationData::SubFst(v8, *v9);
      uint64_t v11 = *(void *)(v6 + 216);
      if (v7 >= (unint64_t)((*(void *)(v6 + 224) - v11) >> 2)) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      int v2 = *v10 + v2 - *(_DWORD *)(v11 + 4 * v7);
    }
    if (v2 != **(_DWORD **)(**(void **)v6 + 8))
    {
      float v5 = NAN;
      if (v4 != -INFINITY)
      {
        float v12 = *(float *)(v6 + 176);
        float v5 = NAN;
        if (v12 != -INFINITY)
        {
          BOOL v13 = v12 == INFINITY || v4 == INFINITY;
          float v14 = v4 + v12;
          if (v13) {
            return INFINITY;
          }
          else {
            return v14;
          }
        }
      }
    }
  }
  return v5;
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(uint64_t a1, int a2)
{
  FstCheck(*(_DWORD *)(a1 + 184) <= a2, "(IsMainGraph(virtual_state_id)) == (false)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  float v5 = (uint64_t *)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 200);
  if (v4)
  {
    do
    {
      int v6 = *(_DWORD *)(v4 + 28);
      BOOL v7 = v6 <= a2;
      if (v6 <= a2) {
        uint64_t v8 = (uint64_t *)(v4 + 8);
      }
      else {
        uint64_t v8 = (uint64_t *)v4;
      }
      if (!v7) {
        float v5 = (uint64_t *)v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
  }
  if (v5 == *(uint64_t **)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v9 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    unint64_t v10 = (void *)fst::cerr(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unable to find teleportation point index for virtual state ", 59);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v12 = *v5;
  if (*v5)
  {
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 8);
    }
    while (v12);
  }
  else
  {
    do
    {
      uint64_t v13 = v5[2];
      BOOL v14 = *(void *)v13 == (void)v5;
      float v5 = (uint64_t *)v13;
    }
    while (v14);
  }
  return *(unsigned int *)(v13 + 32);
}

void sub_1B2373010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumArcs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int HasVirtualBackoffArc = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasVirtualBackoffArc(*(void *)(a1 + 80), a2);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  int v7 = *(_DWORD *)(v6 + 184);
  if (HasVirtualBackoffArc)
  {
    if (v7 > (int)v2) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v2) + 1;
    }
    int v8 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(v6, v2);
    uint64_t v9 = *(fst::EnumerationData **)v6;
    unint64_t v10 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v8);
    uint64_t v11 = (_DWORD *)fst::EnumerationData::SubFst(v9, *v10);
    uint64_t v12 = *(void *)(v6 + 216);
    if (v8 < (unint64_t)((*(void *)(v6 + 224) - v12) >> 2))
    {
      uint64_t v2 = (*v11 + v2 - *(_DWORD *)(v12 + 4 * v8));
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v2) + 1;
    }
LABEL_12:
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 <= (int)v2)
  {
    int v14 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(v6, v2);
    uint64_t v15 = *(fst::EnumerationData **)v6;
    unint64_t v16 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v14);
    char v17 = (_DWORD *)fst::EnumerationData::SubFst(v15, *v16);
    uint64_t v18 = *(void *)(v6 + 216);
    if (v14 >= (unint64_t)((*(void *)(v6 + 224) - v18) >> 2)) {
      goto LABEL_12;
    }
    uint64_t v2 = (*v17 + v2 - *(_DWORD *)(v18 + 4 * v14));
  }
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40);
  return v19(v5, v2);
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasVirtualBackoffArc(uint64_t a1, int a2)
{
  int v4 = a2;
  if (*(_DWORD *)(a1 + 184) <= a2)
  {
    int v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
    uint64_t v6 = *(fst::EnumerationData **)a1;
    int v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v5);
    int v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    uint64_t v9 = *(void *)(a1 + 216);
    if (v5 >= (unint64_t)((*(void *)(a1 + 224) - v9) >> 2)) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    int v4 = *v8 + a2 - *(_DWORD *)(v9 + 4 * v5);
  }
  if (v4 == **(_DWORD **)(**(void **)a1 + 8))
  {
    char v10 = 0;
  }
  else if (*(_DWORD *)(a1 + 184) <= a2)
  {
    char v10 = 1;
  }
  else
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator((uint64_t)v14, *(void *)(a1 + 8), a2);
    BOOL v12 = v16 < v15 && v14[6] == 0;
    char v10 = !v12;
  }
  return v10 & 1;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumInputEpsilons()
{
  std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  long long v0 = fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  uint64_t v1 = (void *)fst::cerr(v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"NumInputEpsilons is not implemented on EnumerationFst since it cannot be computed efficiently.", 94);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B2373324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 80);
  if (*(_DWORD *)(v3 + 184) > a2
    && ((fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator((uint64_t)v6, *(void *)(v3 + 8), a2), v8 < v7)? (BOOL v4 = v6[6] == 0): (BOOL v4 = 0), v4))
  {
    return 1;
  }
  else
  {
    return fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasVirtualBackoffArc(v3, a2);
  }
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::InitArcIterator()
{
}

void sub_1B2373424(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40C8A3FF7BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ArcIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A37898;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 56) = -1;
  *(void *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator(a1 + 80, *(void *)(a2 + 72), 0);
  *(unsigned char *)(a1 + 144) = 0;
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::SetState(a1, a3);
  return a1;
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::SetState(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
  if (*(_DWORD *)(v4 + 184) <= (int)a2)
  {
    int v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(*(void *)(*(void *)(a1 + 8) + 80), a2);
    uint64_t v6 = *(fst::EnumerationData **)v4;
    unint64_t v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v4, v5);
    unint64_t v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    uint64_t v9 = *(void *)(v4 + 216);
    if (v5 >= (unint64_t)((*(void *)(v4 + 224) - v9) >> 2)) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    a2 = (*v8 + v2 - *(_DWORD *)(v9 + 4 * v5));
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, a2);
  *(unsigned char *)(a1 + 144) = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasVirtualBackoffArc(*(void *)(*(void *)(a1 + 8) + 80), v2);
  *(_DWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 56) = fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumArcs(*(void *)(a1 + 8), v2);
  char v10 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 56);
  return v10(a1);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::~ArcIterator()
{
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Reinit(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Done_(uint64_t a1)
{
  return *(void *)(a1 + 64) >= *(void *)(a1 + 56);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144) && !*(void *)(a1 + 64)) {
    return a1 + 36;
  }
  else {
    return a1 + 20;
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Next_(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64) + 1;
  *(void *)(a1 + 64) = v2;
  FstCheck(v2 != 0, "(i_) >= (1)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  if (!*(unsigned char *)(a1 + 144) || *(void *)(a1 + 64) >= 2uLL)
  {
    ++*(void *)(a1 + 128);
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1 + 80);
  }
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Position_(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Reset_(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1 + 80);
  *(void *)(a1 + 64) = 0;
  if (*(unsigned char *)(a1 + 144))
  {
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeBackoffArc(a1);
  }
  else
  {
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(a1);
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 144);
  if (*(unsigned char *)(a1 + 144)) {
    BOOL v5 = a2 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = a1 + 80;
  if (v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = a2 - v4;
  }
  *(void *)(a1 + 128) = v7;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v6);
  *(void *)(a1 + 64) = a2;
  if (a2 || !*(unsigned char *)(a1 + 144))
  {
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(a1);
  }
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::SetFlags_(uint64_t a1, char a2, int a3)
{
  int v4 = *(_DWORD *)(a1 + 136);
  int v5 = ~a3;
  int v6 = a2 & 0xF;
  int v7 = v4 & ~a3 | v6;
  *(_DWORD *)(a1 + 136) = v7;
  if (v4 != 15 && v4 != v7) {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1 + 80);
  }
  int v9 = *(_DWORD *)(a1 + 72);
  int v10 = v9 & v5 | v6;
  *(_DWORD *)(a1 + 72) = v10;
  if (v9 != 15 && v9 != v10)
  {
    if (*(unsigned char *)(a1 + 144) && !*(void *)(a1 + 64))
    {
      fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeBackoffArc(a1);
    }
    else
    {
      fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(a1);
    }
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1 < *(void *)(a1 + 56))
  {
    if (*(unsigned char *)(a1 + 144)) {
      FstCheck(v1 != 0, "(i_) >= (1)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
    }
    int v3 = *(_DWORD *)(a1 + 72);
    *(void *)(a1 + 20) = *(void *)(a1 + 104);
    if ((v3 & 0xFu) - 1 >= 2)
    {
      if ((v3 & 8) != 0)
      {
        uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 80);
        int v5 = *(_DWORD *)(a1 + 16);
        int v6 = *(_DWORD *)(a1 + 116);
        if (*(_DWORD *)(v4 + 184) <= v5)
        {
          int v9 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(*(void *)(*(void *)(a1 + 8) + 80), v5);
          int v10 = *(fst::EnumerationData **)v4;
          uint64_t v11 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v4, v9);
          BOOL v12 = (_DWORD *)fst::EnumerationData::SubFst(v10, *v11);
          uint64_t v13 = *(void *)(v4 + 216);
          if (v9 >= (unint64_t)((*(void *)(v4 + 224) - v13) >> 2)) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
          int v6 = *(_DWORD *)(v13 + 4 * v9) + v6 - *v12;
        }
        else
        {
          int v7 = *(_DWORD *)(v4 + 188);
          int v8 = v6 - v7;
          if (v6 >= v7)
          {
            FstCheck(v8 < *(_DWORD *)(*(void *)(**(void **)v4 + 8) + 8), "(teleportation_point_idx) < (metadata_.NumTeleportationPoints())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
            int v6 = *(_DWORD *)(*(void *)(v4 + 216) + 4 * v8);
          }
        }
        *(_DWORD *)(a1 + 32) = v6;
        int v3 = *(_DWORD *)(a1 + 72);
      }
      if ((v3 & 4) != 0)
      {
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 112);
        if (*(_DWORD *)(a1 + 20))
        {
          uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 80);
          int v15 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(v14 + 184) <= v15)
          {
            int v16 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(*(void *)(*(void *)(a1 + 8) + 80), *(_DWORD *)(a1 + 16));
            char v17 = *(fst::EnumerationData **)v14;
            uint64_t v18 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v14, v16);
            uint64_t v19 = (_DWORD *)fst::EnumerationData::SubFst(v17, *v18);
            uint64_t v20 = *(void *)(v14 + 216);
            if (v16 >= (unint64_t)((*(void *)(v14 + 224) - v20) >> 2)) {
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            int v15 = *v19 + v15 - *(_DWORD *)(v20 + 4 * v16);
          }
          if (v15 != **(_DWORD **)(**(void **)v14 + 8))
          {
            float v21 = *(float *)(a1 + 28);
            float v22 = NAN;
            if (v21 != -INFINITY)
            {
              float v23 = *(float *)(v14 + 176);
              float v22 = NAN;
              if (v23 != -INFINITY)
              {
                float v22 = INFINITY;
                BOOL v24 = v23 == INFINITY || v21 == INFINITY;
                float v25 = v21 + v23;
                if (!v24) {
                  float v22 = v25;
                }
              }
            }
            *(float *)(a1 + 28) = v22;
          }
        }
      }
    }
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeBackoffArc(uint64_t a1)
{
  FstCheck(*(unsigned char *)(a1 + 144), "(has_virtual_backoff_arc_) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  int v2 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ((v2 & 0xFu) - 1 >= 2)
  {
    if ((v2 & 8) != 0)
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 80);
      int v4 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(v3 + 184) <= v4)
      {
        int v6 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(*(void *)(*(void *)(a1 + 8) + 80), v4);
        int v5 = (_DWORD *)(fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v3, v6) + 8);
        int v2 = *(_DWORD *)(a1 + 72);
      }
      else
      {
        int v5 = *(_DWORD **)(**(void **)v3 + 8);
      }
      *(_DWORD *)(a1 + 48) = *v5;
    }
    if ((v2 & 4) != 0) {
      *(float *)(a1 + 44) = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetBackoffWeight(*(void *)(*(void *)(a1 + 8) + 80), *(_DWORD *)(a1 + 16));
    }
  }
}

float fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetBackoffWeight(uint64_t a1, int a2)
{
  int v4 = a2;
  if (*(_DWORD *)(a1 + 184) <= a2)
  {
    int v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
    int v6 = *(fst::EnumerationData **)a1;
    int v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v5);
    int v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    uint64_t v9 = *(void *)(a1 + 216);
    if (v5 >= (unint64_t)((*(void *)(a1 + 224) - v9) >> 2)) {
      goto LABEL_18;
    }
    int v4 = *v8 + a2 - *(_DWORD *)(v9 + 4 * v5);
  }
  FstCheck(v4 != **(_DWORD **)(**(void **)a1 + 8), "(IsUnigramState(virtual_state_id)) == (false)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  int v10 = *(_DWORD *)(a1 + 184);
  int v11 = a2;
  if (v10 > a2) {
    goto LABEL_7;
  }
  int v12 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
  uint64_t v13 = *(fst::EnumerationData **)a1;
  uint64_t v14 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v12);
  int v15 = (_DWORD *)fst::EnumerationData::SubFst(v13, *v14);
  uint64_t v16 = *(void *)(a1 + 216);
  if (v12 >= (unint64_t)((*(void *)(a1 + 224) - v16) >> 2)) {
LABEL_18:
  }
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  int v11 = *v15 + a2 - *(_DWORD *)(v16 + 4 * v12);
  int v10 = *(_DWORD *)(a1 + 184);
LABEL_7:
  char v17 = *(fst::EnumerationData **)a1;
  if (v10 <= a2)
  {
    int v20 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
    float v21 = (int *)fst::EnumerationData::TeleportationPoint(v17, v20);
    fst::EnumerationData::SubFst(*(fst::EnumerationData **)a1, *v21);
    int v22 = *(_DWORD *)(a1 + 184);
    if (v22 <= a2)
    {
      int v24 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
      float v23 = (int *)(fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v24) + 8);
      int v22 = *(_DWORD *)(a1 + 184);
    }
    else
    {
      float v23 = *(int **)(**(void **)a1 + 8);
    }
    int v25 = *v23;
    FstCheck(v22 > *v23, "(IsMainGraph(backoff_state_id)) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
    if (*(_DWORD *)(a1 + 184) > v25)
    {
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator((uint64_t)__p, *(void *)(a1 + 8), v25);
      if (v35 < v34 && !v33)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        long long v26 = fst::LogMessage::LogMessage((fst *)v30, (uint64_t)__p);
        long long v27 = (void *)fst::cerr(v26);
        long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Backing off to a state with an explicit back-off arc ", 53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"is not supported and will yield an unnormalized model.", 54);
        fst::LogMessage::~LogMessage((fst::LogMessage *)v30);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher((uint64_t)__p, *(void *)(a1 + 8), 0, 1);
  }
  float v18 = *(float *)(a1 + 180);
  float v19 = expf(*(float *)(*(void *)(*(void *)v17 + 8)
                      + 12 * *(int *)(*(void *)(*(void *)v17 + 8) + 8)
                      + 20 * *(int *)(*(void *)(*(void *)v17 + 8) + 4)
                      + 4 * *(int *)(*(void *)(*(void *)v17 + 8) + 36)
                      + 4 * v11
                      + 40));
  return v18 + log1pf(-v19);
}

void sub_1B23744A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN5kaldi6quasar15NnlmDecoderWordENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  int v2 = operator new(0xE8uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN5kaldi6quasar15NnlmDecoderWordENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2374594(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN5kaldi6quasar15NnlmDecoderWordENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F290;
  kaldi::quasar::NnlmDecoderWord::NnlmDecoderWord((kaldi::quasar::NnlmDecoderWord *)(a1 + 3));
  return a1;
}

void sub_1B23745F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::NnlmDecoderWord>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::NnlmDecoderWord>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::NnlmDecoderWord>::__on_zero_shared(uint64_t a1)
{
}

void kaldi::quasar::NnlmDecoderWord::~NnlmDecoderWord(kaldi::quasar::NnlmDecoderWord *this)
{
  uint64_t v2 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  std::__tree<int>::destroy((uint64_t)this + 48, *((void **)this + 7));
  if (*((unsigned char *)this + 40))
  {
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      MEMORY[0x1B3EA8630](v3, 0x1000C8077774924);
    }
  }
  if (*((unsigned char *)this + 16))
  {
    if (*(void *)this) {
      MEMORY[0x1B3EA8630](*(void *)this, 0x1000C8077774924);
    }
  }
}

void std::allocate_shared[abi:ne180100]<kaldi::quasar::CEInferenceNet,std::allocator<kaldi::quasar::CEInferenceNet>,std::string const&,BOOL &,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = operator new(0x250uLL);
  std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::allocator<kaldi::quasar::CEInferenceNet>,0>(v3, a2);
}

void sub_1B23747BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::allocator<kaldi::quasar::CEInferenceNet>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F1B0;
  kaldi::quasar::CEInferenceNet::CEInferenceNet((uint64_t)(a1 + 3), a2);
}

void sub_1B2374820(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F1B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F1B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<kaldi::nnet1::Nnet1InferenceNet,std::allocator<kaldi::nnet1::Nnet1InferenceNet>,std::string const&,BOOL &,BOOL &,BOOL &,void>()
{
  long long v0 = operator new(0x1C0uLL);
  std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,BOOL &,std::allocator<kaldi::nnet1::Nnet1InferenceNet>,0>(v0);
}

void sub_1B2374938(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,BOOL &,std::allocator<kaldi::nnet1::Nnet1InferenceNet>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EF80;
  kaldi::nnet1::Nnet1InferenceNet::Nnet1InferenceNet(a1 + 3);
}

void sub_1B23749A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEAcousticEncoderNet,std::allocator<kaldi::quasar::CEAcousticEncoderNet>,std::string const&,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x118uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<kaldi::quasar::CEAcousticEncoderNet>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B23749FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<kaldi::quasar::CEAcousticEncoderNet>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F370;
  kaldi::quasar::CEAcousticEncoderNet::CEAcousticEncoderNet(a1 + 3);
  return a1;
}

void sub_1B2374A58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::__on_zero_shared(uint64_t a1)
{
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::FofeLmEvaluator,std::allocator<kaldi::quasar::FofeLmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, uint64_t a3@<X3>, float *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0x250uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,std::allocator<kaldi::quasar::FofeLmEvaluator>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B2374B64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,std::allocator<kaldi::quasar::FofeLmEvaluator>,0>(void *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, uint64_t a4, float *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F258;
  kaldi::quasar::FofeLmEvaluator::FofeLmEvaluator((kaldi::quasar::FofeLmEvaluator *)(a1 + 3), *a2, *a3, 0, *a5, *a6, 0x2000, 0x20000);
  return a1;
}

void sub_1B2374BDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::RnnlmEvaluator,std::allocator<kaldi::quasar::RnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, uint64_t a3@<X3>, float *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0x1F0uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,std::allocator<kaldi::quasar::RnnlmEvaluator>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B2374D04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,std::allocator<kaldi::quasar::RnnlmEvaluator>,0>(void *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, uint64_t a4, float *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F220;
  kaldi::quasar::RnnlmEvaluator::RnnlmEvaluator((kaldi::quasar::RnnlmEvaluator *)(a1 + 3), *a2, *a3, 0, *a5, *a6, 0x2000, 0, 0x20000);
  return a1;
}

void sub_1B2374D80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::DnnlmEvaluator,std::allocator<kaldi::quasar::DnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, uint64_t a3@<X3>, float *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0x148uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,std::allocator<kaldi::quasar::DnnlmEvaluator>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B2374E98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,std::allocator<kaldi::quasar::DnnlmEvaluator>,0>(void *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, uint64_t a4, float *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F1E8;
  kaldi::quasar::DnnlmEvaluator::DnnlmEvaluator((kaldi::quasar::DnnlmEvaluator *)(a1 + 3), *a2, *a3, 0, *a5, 0x2000, 0x20000);
  return a1;
}

void sub_1B2374F0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::FofeLmEvaluator,std::allocator<kaldi::quasar::FofeLmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, kaldi::InferenceNetItf **a3@<X3>, float *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0x250uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,std::allocator<kaldi::quasar::FofeLmEvaluator>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B2375034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,std::allocator<kaldi::quasar::FofeLmEvaluator>,0>(void *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, kaldi::InferenceNetItf **a4, float *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F258;
  kaldi::quasar::FofeLmEvaluator::FofeLmEvaluator((kaldi::quasar::FofeLmEvaluator *)(a1 + 3), *a2, *a3, *a4, *a5, *a6, 0x2000, 0x20000);
  return a1;
}

void sub_1B23750AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::RnnlmEvaluator,std::allocator<kaldi::quasar::RnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, kaldi::InferenceNetItf **a3@<X3>, float *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  int v12 = operator new(0x1F0uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,std::allocator<kaldi::quasar::RnnlmEvaluator>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1B2375138(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,std::allocator<kaldi::quasar::RnnlmEvaluator>,0>(void *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, kaldi::InferenceNetItf **a4, float *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F220;
  kaldi::quasar::RnnlmEvaluator::RnnlmEvaluator((kaldi::quasar::RnnlmEvaluator *)(a1 + 3), *a2, *a3, *a4, *a5, *a6, 0x2000, 0, 0x20000);
  return a1;
}

void sub_1B23751B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::DnnlmEvaluator,std::allocator<kaldi::quasar::DnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, kaldi::InferenceNetItf **a3@<X3>, float *a4@<X4>, void *a5@<X8>)
{
  int v10 = operator new(0x148uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,std::allocator<kaldi::quasar::DnnlmEvaluator>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B2375230(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,std::allocator<kaldi::quasar::DnnlmEvaluator>,0>(void *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, kaldi::InferenceNetItf **a4, float *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F1E8;
  kaldi::quasar::DnnlmEvaluator::DnnlmEvaluator((kaldi::quasar::DnnlmEvaluator *)(a1 + 3), *a2, *a3, *a4, *a5, 0x2000, 0x20000);
  return a1;
}

void sub_1B23752A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<kaldi::WordBoundaryInfo,std::allocator<kaldi::WordBoundaryInfo>,kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  int v8 = operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&,std::allocator<kaldi::WordBoundaryInfo>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B2375318(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&,std::allocator<kaldi::WordBoundaryInfo>,0>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EA40;
  std::allocator<kaldi::WordBoundaryInfo>::construct[abi:ne180100]<kaldi::WordBoundaryInfo,kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1B2375390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::WordBoundaryInfo>::construct[abi:ne180100]<kaldi::WordBoundaryInfo,kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v9 = *(std::string *)a4;
  }
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  kaldi::WordBoundaryInfo::WordBoundaryInfo(a2, a3, &v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1B2375460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<kaldi::ContextDependency>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EA78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::ContextDependency>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EA78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::ContextDependency>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::allocate_shared[abi:ne180100]<kaldi::quasar::CEInferenceNet,std::allocator<kaldi::quasar::CEInferenceNet>,std::string const&,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = operator new(0x250uLL);
  std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<kaldi::quasar::CEInferenceNet>,0>(v3, a2);
}

void sub_1B23755F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<kaldi::quasar::CEInferenceNet>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F1B0;
  kaldi::quasar::CEInferenceNet::CEInferenceNet((uint64_t)(a1 + 3), a2);
}

void sub_1B237565C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,double &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double *a4)
{
  std::string v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    int v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (unint64_t i = *v15; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::string const&,double &>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    void *v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1B23758D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

float std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::string const&,double &>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x30uLL);
  *(void *)(a5 + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  unint64_t v11 = (std::string *)(v10 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 16);
  }
  float result = *a4;
  *((float *)v10 + 10) = result;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_1B2375998(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::ModelLoader::EmbeddedMlockContext,std::allocator<quasar::ModelLoader::EmbeddedMlockContext>,std::string const&,float &,void>@<X0>(long long *a1@<X1>, float *a2@<X2>, void *a3@<X8>)
{
  char v6 = (std::string *)operator new(0x38uLL);
  float result = std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::__shared_ptr_emplace[abi:ne180100]<std::string const&,float &,std::allocator<quasar::ModelLoader::EmbeddedMlockContext>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_1B2375A04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::__shared_ptr_emplace[abi:ne180100]<std::string const&,float &,std::allocator<quasar::ModelLoader::EmbeddedMlockContext>,0>(std::string *a1, long long *a2, float *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5F840;
  quasar::ModelLoader::EmbeddedMlockContext::EmbeddedMlockContext(a1 + 1, a2, *a3);
  return a1;
}

void sub_1B2375A64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

std::string *quasar::ModelLoader::EmbeddedMlockContext::EmbeddedMlockContext(std::string *this, long long *a2, float a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  float v6 = 1.0;
  if (a3 <= 1.0) {
    float v6 = a3;
  }
  if (v6 < 0.0) {
    float v6 = 0.0;
  }
  *(float *)&this[1].__r_.__value_.__l.__data_ = v6;
  return this;
}

void quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>(uint64_t a1, void **a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  memset(v50, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, ".mlmodelc");
  size_t v4 = *(unsigned __int8 *)(a1 + 23);
  size_t v5 = *(void *)(a1 + 8);
  if ((v4 & 0x80u) == 0) {
    size_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v6 = *(void *)(a1 + 8);
  }
  int v7 = SBYTE7(v53);
  if ((SBYTE7(v53) & 0x80u) == 0) {
    size_t v8 = BYTE7(v53);
  }
  else {
    size_t v8 = *((void *)&__p + 1);
  }
  BOOL v14 = v6 >= v8;
  size_t v9 = v6 - v8;
  if (!v14)
  {
    BOOL v10 = 0;
    if ((SBYTE7(v53) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if ((v4 & 0x80) != 0)
  {
    if (v8 == -1 || v5 < v9) {
LABEL_122:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v5 - v9 >= v8) {
      size_t v16 = v8;
    }
    else {
      size_t v16 = v5 - v9;
    }
    unint64_t v17 = *(const char **)a1;
  }
  else
  {
    BOOL v14 = v8 != -1 && v4 >= v9;
    if (!v14) {
      goto LABEL_122;
    }
    size_t v15 = v4 - v9;
    if (v15 >= v8) {
      size_t v16 = v8;
    }
    else {
      size_t v16 = v15;
    }
    unint64_t v17 = (const char *)a1;
  }
  if ((SBYTE7(v53) & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (long long *)__p;
  }
  int v30 = memcmp(&v17[v9], p_p, v16);
  BOOL v10 = v16 == v8 && v30 == 0;
  if (v7 < 0) {
LABEL_9:
  }
    operator delete((void *)__p);
LABEL_10:
  if (v10)
  {
    if (*(char *)(a1 + 23) >= 0) {
      size_t v11 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v11 = *(void *)(a1 + 8);
    }
    unint64_t v12 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 10);
    if (SBYTE7(v53) < 0) {
      unint64_t v12 = (long long *)__p;
    }
    if (v11)
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint8x8_t v13 = (const char *)a1;
      }
      else {
        uint8x8_t v13 = *(const char **)a1;
      }
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, "/*.weights");
    if (SHIBYTE(v50[2]) < 0) {
      operator delete(v50[0]);
    }
    *(_OWORD *)long long v50 = __p;
    v50[2] = (char *)v53;
    goto LABEL_96;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ".espresso.net");
  size_t v18 = *(unsigned __int8 *)(a1 + 23);
  size_t v19 = *(void *)(a1 + 8);
  if ((v18 & 0x80u) == 0) {
    size_t v20 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v20 = *(void *)(a1 + 8);
  }
  int v21 = SBYTE7(v53);
  if ((SBYTE7(v53) & 0x80u) == 0) {
    size_t v22 = BYTE7(v53);
  }
  else {
    size_t v22 = *((void *)&__p + 1);
  }
  BOOL v14 = v20 >= v22;
  size_t v23 = v20 - v22;
  if (!v14)
  {
    BOOL v24 = 0;
    if ((SBYTE7(v53) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_88;
  }
  if ((v18 & 0x80) != 0)
  {
    if (v22 == -1 || v19 < v23) {
LABEL_123:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v19 - v23 >= v22) {
      size_t v26 = v22;
    }
    else {
      size_t v26 = v19 - v23;
    }
    uint64_t v27 = *(void *)a1;
  }
  else
  {
    if (v22 == -1) {
      goto LABEL_123;
    }
    BOOL v14 = v18 >= v23;
    size_t v25 = v18 - v23;
    if (!v14) {
      goto LABEL_123;
    }
    if (v25 >= v22) {
      size_t v26 = v22;
    }
    else {
      size_t v26 = v25;
    }
    uint64_t v27 = a1;
  }
  if ((SBYTE7(v53) & 0x80u) == 0) {
    char v32 = &__p;
  }
  else {
    char v32 = (long long *)__p;
  }
  int v33 = memcmp((const void *)(v27 + v23), v32, v26);
  BOOL v24 = v26 == v22 && v33 == 0;
  if ((v21 & 0x80000000) == 0)
  {
LABEL_42:
    if (!v24) {
      goto LABEL_96;
    }
    goto LABEL_89;
  }
LABEL_88:
  operator delete((void *)__p);
  if (!v24) {
    goto LABEL_96;
  }
LABEL_89:
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v35 = (const char *)a1;
  }
  else {
    unint64_t v35 = *(const char **)a1;
  }
  uint64_t v36 = dirname_r(v35, (char *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v49, v36);
  long long v37 = std::string::append((std::string *)&v49, "/*.weights");
  int v38 = (char *)v37->__r_.__value_.__r.__words[0];
  v51[0] = v37->__r_.__value_.__l.__size_;
  *(void *)((char *)v51 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
  char v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v50[2]) < 0) {
    operator delete(v50[0]);
  }
  v50[0] = v38;
  v50[1] = (char *)v51[0];
  *(char **)((char *)&v50[1] + 7) = *(char **)((char *)v51 + 7);
  HIBYTE(v50[2]) = v39;
  if (SHIBYTE(v49.gl_offs) < 0) {
    operator delete((void *)v49.gl_pathc);
  }
LABEL_96:
  if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v50[2]))
    {
      uint64_t v40 = (const char *)v50;
      goto LABEL_101;
    }
LABEL_110:
    quasar::ModelLoader::dumpInCoreStats(void)const::$_0::operator()(a2, a1);
    goto LABEL_119;
  }
  if (!v50[1]) {
    goto LABEL_110;
  }
  uint64_t v40 = v50[0];
LABEL_101:
  if (glob(v40, 0, 0, &v49))
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"could not find weights for: ", 28);
      int v42 = *(char *)(a1 + 23);
      if (v42 >= 0) {
        uint64_t v43 = a1;
      }
      else {
        uint64_t v43 = *(void *)a1;
      }
      if (v42 >= 0) {
        uint64_t v44 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v44 = *(void *)(a1 + 8);
      }
      long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
    }
  }
  else
  {
    size_t gl_pathc = v49.gl_pathc;
    if (v49.gl_pathc)
    {
      size_t v47 = 0;
      do
      {
        long long v48 = v49.gl_pathv[v47];
        if (v48)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, v48);
          quasar::ModelLoader::dumpInCoreStats(void)const::$_0::operator()(a2, (uint64_t)&__p);
          if (SBYTE7(v53) < 0) {
            operator delete((void *)__p);
          }
          size_t gl_pathc = v49.gl_pathc;
        }
        ++v47;
      }
      while (v47 < gl_pathc);
    }
    globfree(&v49);
  }
LABEL_119:
  if (SHIBYTE(v50[2]) < 0) {
    operator delete(v50[0]);
  }
}

void sub_1B2375FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ModelLoader::dumpInCoreStats(void)const::$_0::operator()(void **a1, uint64_t a2)
{
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":\n", 2);
  if (*(char *)(a2 + 23) >= 0) {
    size_t v9 = (const char *)a2;
  }
  else {
    size_t v9 = *(const char **)a2;
  }
  int v10 = open(v9, 0);
  if (v10 == -1)
  {
    if (quasar::gLogLevel < 2) {
      return;
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)int v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"could not open: ", 16);
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a2 + 8);
    }
LABEL_41:
    size_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    __error();
    std::ostream::operator<<();
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v30);
    return;
  }
  int v11 = v10;
  off_t v12 = lseek(v10, 0, 2);
  if (v12 == -1)
  {
    if (quasar::gLogLevel < 2) {
      return;
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)int v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"could not lseek: ", 17);
    int v23 = *(char *)(a2 + 23);
    if (v23 >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    if (v23 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a2 + 8);
    }
    goto LABEL_41;
  }
  int64_t v13 = v12;
  lseek(v11, 0, 0);
  BOOL v14 = mmap(0, v13, 1, 1, v11, 0);
  if (v14 == (void *)-1)
  {
    if (quasar::gLogLevel < 2) {
      return;
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    *(_OWORD *)int v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"could not mmap: ", 16);
    int v24 = *(char *)(a2 + 23);
    if (v24 >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    if (v24 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a2 + 8);
    }
    goto LABEL_41;
  }
  size_t v15 = v14;
  close(v11);
  std::vector<char>::vector((std::vector<char> *)v30, v13 / *a1[1] + 1);
  mincore(v15, v13, v30[0]);
  munmap(v15, v13);
  size_t v16 = v30[0];
  unint64_t v17 = v30[1];
  if (v30[0] == v30[1])
  {
    int v18 = 0;
  }
  else
  {
    int v18 = 0;
    do
    {
      if (*v16)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"#", 1);
        ++v18;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)".", 1);
      }
      ++v16;
    }
    while (v16 != v17);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\nloaded ", 8);
  size_t v26 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" pages of ", 10);
  uint64_t v27 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" = ", 3);
  long long v28 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"%\n", 2);
  *a1[2] += v18;
  long long v29 = v30[0];
  *a1[3] += v30[1] - v30[0];
  if (v29)
  {
    v30[1] = v29;
    operator delete(v29);
  }
}

void sub_1B23764B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void kaldi::quasar::CEDecoderConfig::Read(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v3 = *(void *)(a2 + 8);
  }
  size_t v4 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v3 + 7);
  if (v7 < 0) {
    size_t v4 = (void **)__p[0];
  }
  if (v3)
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v5 = (const void *)a2;
    }
    else {
      int v5 = *(const void **)a2;
    }
    memmove(v4, v5, v3);
  }
  strcpy((char *)v4 + v3, ".config");
  kaldi::Input::Input(v8, __p, v9);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  kaldi::Input::Stream((kaldi::Input *)v8);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void sub_1B237766C(_Unwind_Exception *a1)
{
  kaldi::Input::~Input((kaldi::Input *)(v1 - 112));
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEDecoder::CEDecoder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 288) = 0x8000000005;
  *(_DWORD *)(a1 + 296) = 256;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = xmmword_1B25AD3C0;
  *(_DWORD *)(a1 + 368) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 472) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 7);
  if (v8 < 0) {
    p_p = __p;
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const void *)a2;
    }
    else {
      uint64_t v6 = *(const void **)a2;
    }
    memmove(p_p, v6, v4);
  }
  strcpy((char *)p_p + v4, ".config");
  kaldi::quasar::CEDecoderConfig::Read(a1, a2);
}

void sub_1B2377AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  uint64_t v18 = v16[59];
  v16[59] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v16[58];
  v16[58] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = v16[57];
  v16[57] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v16[56];
  v16[56] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = v16[55];
  v16[55] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  long long __p = v16 + 52;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long __p = v16 + 49;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v23 = v16[48];
  v16[48] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  kaldi::quasar::CEDecoderConfig::~CEDecoderConfig((kaldi::quasar::CEDecoderConfig *)v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEDecoder::BeamSize(kaldi::quasar::CEDecoder *this)
{
  return *((unsigned int *)this + 72);
}

void *kaldi::quasar::CEDecoder::ResetStates(kaldi::quasar::CEDecoder *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 392);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 49);
  size_t v3 = (void *)((char *)this + 416);
  float result = std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100]((void *)this + 52);
  if (*((void *)this + 27) != *((void *)this + 28))
  {
    uint64_t v6 = *((void *)this + 33);
    for (uint64_t i = *((void *)this + 34); v6 != i; v6 += 24)
    {
      (*(void (**)(void **__return_ptr))(**((void **)this + 48) + 56))(&v32);
      size_t v9 = (void *)*((void *)this + 50);
      unint64_t v8 = *((void *)this + 51);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v12 = ((uint64_t)v9 - *v2) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v8 - *v2;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        long long v37 = (char *)this + 408;
        if (v15) {
          size_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 408, v15);
        }
        else {
          size_t v16 = 0;
        }
        unint64_t v17 = &v16[8 * v12];
        long long v33 = v16;
        long long v34 = v17;
        long long v36 = &v16[8 * v15];
        uint64_t v18 = v32;
        long long v32 = 0;
        *(void *)unint64_t v17 = v18;
        long long v35 = v17 + 8;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v2, &v33);
        int v11 = (void *)*((void *)this + 50);
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&v33);
      }
      else
      {
        int v10 = v32;
        long long v32 = 0;
        *size_t v9 = v10;
        int v11 = v9 + 1;
        *((void *)this + 50) = v11;
      }
      *((void *)this + 50) = v11;
      uint64_t v19 = v32;
      long long v32 = 0;
      if (v19) {
        (*(void (**)(void *))(*v19 + 8))(v19);
      }
      (*(void (**)(void **__return_ptr))(**((void **)this + 48) + 56))(&v32);
      uint64_t v21 = (void *)*((void *)this + 53);
      unint64_t v20 = *((void *)this + 54);
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v24 = ((uint64_t)v21 - *v3) >> 3;
        if ((unint64_t)(v24 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v25 = v20 - *v3;
        uint64_t v26 = v25 >> 2;
        if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
          uint64_t v26 = v24 + 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        long long v37 = (char *)this + 432;
        if (v27) {
          long long v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 432, v27);
        }
        else {
          long long v28 = 0;
        }
        long long v29 = &v28[8 * v24];
        long long v33 = v28;
        long long v34 = v29;
        long long v36 = &v28[8 * v27];
        int v30 = v32;
        long long v32 = 0;
        *(void *)long long v29 = v30;
        long long v35 = v29 + 8;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)this + 52, &v33);
        uint64_t v23 = (void *)*((void *)this + 53);
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&v33);
      }
      else
      {
        uint64_t v22 = v32;
        long long v32 = 0;
        void *v21 = v22;
        uint64_t v23 = v21 + 1;
        *((void *)this + 53) = v23;
      }
      *((void *)this + 53) = v23;
      float result = v32;
      long long v32 = 0;
      if (result) {
        float result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
    }
    uint64_t v31 = *((unsigned int *)this + 89);
    if ((v31 & 0x80000000) == 0) {
      return (void *)kaldi::quasar::ResetMask(*(kaldi::quasar **)(*v2 + 8 * v31), v5);
    }
  }
  return result;
}

void sub_1B2377F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEDecoder::~CEDecoder(kaldi::quasar::CEDecoder *this)
{
  uint64_t v2 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  unint64_t v8 = (void **)((char *)this + 416);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)((char *)this + 392);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  kaldi::quasar::CEDecoderConfig::~CEDecoderConfig(this);
}

uint64_t kaldi::quasar::CEDecoder::Engine(kaldi::quasar::CEDecoder *this)
{
  return (uint64_t)this + 384;
}

uint64_t kaldi::quasar::ResetMask(kaldi::quasar *this, kaldi::quasar::ComputeEngineBufferItf *a2)
{
  uint64_t result = kaldi::quasar::ComputeEngineBufferItf::GetSize(this);
  if (result >= 1)
  {
    uint64_t v4 = *(uint64_t (**)(kaldi::quasar *, uint64_t, void))(*(void *)this + 96);
    return v4(this, 1, (result - 1));
  }
  return result;
}

BOOL kaldi::quasar::CEDecoder::IsPrintable(kaldi::quasar::CEDecoder *this, int a2)
{
  return *((_DWORD *)this + 91) <= a2 && *((_DWORD *)this + 92) >= a2;
}

uint64_t kaldi::quasar::CEDecoder::MaxEncoderSize(kaldi::quasar::CEDecoder *this)
{
  return *((unsigned int *)this + 74);
}

uint64_t kaldi::quasar::CEDecoder::StartOfTranscript(kaldi::quasar::CEDecoder *this)
{
  return (uint64_t)this + 304;
}

uint64_t kaldi::quasar::CEDecoder::StartOfPrevious(kaldi::quasar::CEDecoder *this)
{
  return (uint64_t)this + 328;
}

void *kaldi::quasar::CEDecoder::GetStates@<X0>(kaldi::quasar::CEDecoder *this@<X0>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  uint64_t v5 = result + 3;
  *uint64_t result = &unk_1F0A62B38;
  result[4] = 0;
  result[5] = 0;
  *a2 = result + 3;
  a2[1] = result;
  uint64_t v6 = (kaldi::quasar::ComputeEngineBufferItf **)*((void *)this + 49);
  uint64_t v7 = (kaldi::quasar::ComputeEngineBufferItf **)*((void *)this + 50);
  if (v6 != v7)
  {
    unint64_t v8 = result;
    size_t v9 = result + 5;
    do
    {
      uint64_t v10 = *((void *)this + 48);
      kaldi::quasar::ComputeEngineBufferItf::GetShape(*v6, (char **)__p);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v10 + 56))(&v24, v10, __p);
      uint64_t v12 = (void *)v8[4];
      unint64_t v11 = v8[5];
      if ((unint64_t)v12 >= v11)
      {
        uint64_t v15 = ((uint64_t)v12 - *v5) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v11 - *v5;
        uint64_t v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        v25[4] = v9;
        if (v18) {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v9, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = &v19[8 * v15];
        v25[0] = v19;
        v25[1] = v20;
        void v25[3] = &v19[8 * v18];
        uint64_t v21 = v24;
        uint64_t v24 = 0;
        *(void *)unint64_t v20 = v21;
        v25[2] = v20 + 8;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(v5, v25);
        uint64_t v14 = (void *)v8[4];
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v25);
      }
      else
      {
        uint64_t v13 = v24;
        uint64_t v24 = 0;
        *uint64_t v12 = v13;
        uint64_t v14 = v12 + 1;
        void v8[4] = v14;
      }
      void v8[4] = v14;
      uint64_t v22 = v24;
      uint64_t v24 = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t result = (void *)kaldi::quasar::ComputeEngineBufferItf::CopyFrom(*(kaldi::quasar::ComputeEngineBufferItf **)(v8[4] - 8), *v6++);
    }
    while (v6 != v7);
  }
  return result;
}

void sub_1B23783CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEDecoder::SetStates(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 392);
  if (*(void *)(result + 400) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = kaldi::quasar::ComputeEngineBufferItf::CopyFrom(*(kaldi::quasar::ComputeEngineBufferItf **)(v2 + 8 * v5), *(const kaldi::quasar::ComputeEngineBufferItf **)(*a2 + 8 * v5));
      ++v5;
      uint64_t v2 = *(void *)(v4 + 392);
    }
    while (v5 < (*(void *)(v4 + 400) - v2) >> 3);
  }
  return result;
}

void kaldi::quasar::CEDecoder::Compute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int32x2_t *a5, int32x2_t *a6, int32x2_t *a7)
{
  uint64_t v119 = 0;
  v120 = 0;
  unint64_t v121 = 0;
  long long v117 = 0uLL;
  unint64_t v118 = 0;
  uint64_t v114 = 0;
  std::vector<int> v115 = 0;
  unint64_t v116 = 0;
  uint64_t v14 = *(int *)(a1 + 288);
  uint64_t v15 = operator new(0x10uLL);
  uint64_t v16 = (kaldi::quasar::ComputeEngineItf **)(a1 + 384);
  long long v108 = v15 + 2;
  long long v109 = v15 + 2;
  *uint64_t v15 = v14;
  v15[1] = 1;
  long long __p = v15;
  uint64_t v17 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 440);
  *(void *)(a1 + 440) = 0;
  unint64_t v113 = v17;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 384, a2, (uint64_t)&__p, &v113, (kaldi::quasar::ComputeEngineBufferItf **)v122);
  unint64_t v18 = v122[0];
  v122[0] = 0;
  uint64_t v19 = *(void *)(a1 + 440);
  *(void *)(a1 + 440) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    unint64_t v20 = v122[0];
    v122[0] = 0;
    if (v20) {
      (*((void (**)(void **))*v20 + 1))(v20);
    }
  }
  uint64_t v21 = v113;
  unint64_t v113 = 0;
  if (v21) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v21 + 8))(v21);
  }
  if (__p)
  {
    long long v108 = __p;
    operator delete(__p);
  }
  uint64_t v22 = *(int *)(a1 + 288);
  uint64_t v23 = operator new(0x10uLL);
  long long v108 = v23 + 2;
  long long v109 = v23 + 2;
  void *v23 = v22;
  v23[1] = 1;
  long long __p = v23;
  uint64_t v24 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 448);
  *(void *)(a1 + 448) = 0;
  long long v112 = v24;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 384, a3, (uint64_t)&__p, &v112, (kaldi::quasar::ComputeEngineBufferItf **)v122);
  uint64_t v25 = v122[0];
  v122[0] = 0;
  uint64_t v26 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = v25;
  if (v26)
  {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    unint64_t v27 = v122[0];
    v122[0] = 0;
    if (v27) {
      (*((void (**)(void **))*v27 + 1))(v27);
    }
  }
  long long v28 = v112;
  long long v112 = 0;
  if (v28) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v28 + 8))(v28);
  }
  if (__p)
  {
    long long v108 = __p;
    operator delete(__p);
  }
  std::string::size_type v29 = *(void *)(a1 + 440);
  int v30 = v120;
  if ((unint64_t)v120 >= v121)
  {
    long long v32 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, (long long *)a1, *(void *)(a1 + 440));
  }
  else
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      long long v31 = *(_OWORD *)a1;
      v120->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    }
    v30[1].__r_.__value_.__r.__words[0] = v29;
    long long v32 = (std::string *)((char *)v30 + 32);
  }
  v120 = v32;
  long long v33 = (long long *)(a1 + 48);
  std::string::size_type v34 = *(void *)(a1 + 448);
  if ((unint64_t)v32 >= v121)
  {
    long long v36 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, v33, *(void *)(a1 + 448));
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      long long v35 = *v33;
      v32->__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v35;
    }
    v32[1].__r_.__value_.__r.__words[0] = v34;
    long long v36 = (std::string *)((char *)v32 + 32);
  }
  v120 = v36;
  long long v37 = (long long *)(a1 + 24);
  uint64_t v38 = *a4;
  if ((unint64_t)v36 >= v121)
  {
    long long v40 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, v37, v38);
  }
  else
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v39 = *v37;
      v36->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v39;
    }
    v36[1].__r_.__value_.__r.__words[0] = v38;
    long long v40 = (std::string *)((char *)v36 + 32);
  }
  long long v106 = a7;
  v120 = v40;
  uint64_t v41 = *(void *)(a1 + 216);
  if (*(void *)(a1 + 224) == v41)
  {
    long long v63 = v115;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    do
    {
      uint64_t v44 = v41 + v42;
      std::string::size_type v45 = *(void *)(*(void *)(a1 + 392) + 8 * v43);
      long long v46 = v120;
      if ((unint64_t)v120 >= v121)
      {
        long long v48 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v119, (long long *)v44, *(void *)(*(void *)(a1 + 392) + 8 * v43));
      }
      else
      {
        if (*(char *)(v44 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v120, *(const std::string::value_type **)(v41 + v42), *(void *)(v41 + v42 + 8));
        }
        else
        {
          long long v47 = *(_OWORD *)v44;
          v120->__r_.__value_.__r.__words[2] = *(void *)(v44 + 16);
          *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
        }
        v46[1].__r_.__value_.__r.__words[0] = v45;
        long long v48 = (std::string *)((char *)v46 + 32);
      }
      v120 = v48;
      uint64_t v49 = *(void *)(a1 + 416);
      uint64_t v50 = *(void *)(v49 + 8 * v43);
      if (v50)
      {
        long long v51 = (void *)*((void *)&v117 + 1);
        if (*((void *)&v117 + 1) >= v118)
        {
          uint64_t v53 = (uint64_t)(*((void *)&v117 + 1) - v117) >> 3;
          if ((unint64_t)(v53 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v54 = (uint64_t)(v118 - v117) >> 2;
          if (v54 <= v53 + 1) {
            unint64_t v54 = v53 + 1;
          }
          if (v118 - (unint64_t)v117 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v54;
          }
          long long v111 = &v118;
          if (v55) {
            long long v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v118, v55);
          }
          else {
            long long v56 = 0;
          }
          long long v57 = &v56[8 * v53];
          long long __p = v56;
          long long v108 = v57;
          std::vector<int>::value_type v110 = &v56[8 * v55];
          uint64_t v58 = *(void *)(v49 + 8 * v43);
          *(void *)(v49 + 8 * v43) = 0;
          *(void *)long long v57 = v58;
          long long v109 = v57 + 8;
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer((uint64_t *)&v117, &__p);
          long long v52 = (void *)*((void *)&v117 + 1);
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&__p);
        }
        else
        {
          *(void *)(v49 + 8 * v43) = 0;
          void *v51 = v50;
          long long v52 = v51 + 1;
        }
        *((void *)&v117 + 1) = v52;
      }
      uint64_t v59 = *(void *)(a1 + 240);
      uint64_t v60 = v59 + v42;
      long long v61 = v115;
      if ((unint64_t)v115 >= v116)
      {
        long long v63 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v114, (long long *)v60);
      }
      else
      {
        if (*(char *)(v60 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v115, *(const std::string::value_type **)(v59 + v42), *(void *)(v59 + v42 + 8));
        }
        else
        {
          long long v62 = *(_OWORD *)v60;
          v115->__r_.__value_.__r.__words[2] = *(void *)(v60 + 16);
          *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v62;
        }
        long long v63 = v61 + 1;
      }
      std::vector<int> v115 = v63;
      ++v43;
      uint64_t v41 = *(void *)(a1 + 216);
      v42 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 224) - v41) >> 3) > v43);
  }
  long long v64 = (long long *)(a1 + 72);
  if ((unint64_t)v63 >= v116)
  {
    long long v66 = a6;
    long long v65 = a5;
    long long v67 = v106;
    uint64_t v69 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v114, v64);
  }
  else
  {
    long long v66 = a6;
    long long v65 = a5;
    long long v67 = v106;
    if (*(char *)(a1 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(v63, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
    }
    else
    {
      long long v68 = *v64;
      v63->__r_.__value_.__r.__words[2] = *(void *)(a1 + 88);
      *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v68;
    }
    uint64_t v69 = v63 + 1;
  }
  std::vector<int> v115 = v69;
  long long v70 = (long long *)(a1 + 96);
  if ((unint64_t)v69 >= v116)
  {
    std::string::size_type v72 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v114, v70);
  }
  else
  {
    if (*(char *)(a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
    }
    else
    {
      long long v71 = *v70;
      v69->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
      *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v71;
    }
    std::string::size_type v72 = v69 + 1;
  }
  std::vector<int> v115 = v72;
  int v73 = (long long *)(a1 + 120);
  if ((unint64_t)v72 >= v116)
  {
    char v75 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v114, v73);
  }
  else
  {
    if (*(char *)(a1 + 143) < 0)
    {
      std::string::__init_copy_ctor_external(v72, *(const std::string::value_type **)(a1 + 120), *(void *)(a1 + 128));
    }
    else
    {
      long long v74 = *v73;
      v72->__r_.__value_.__r.__words[2] = *(void *)(a1 + 136);
      *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v74;
    }
    char v75 = v72 + 1;
  }
  std::vector<int> v115 = v75;
  std::string v76 = *v16;
  long long __p = 0;
  long long v108 = 0;
  long long v109 = 0;
  (*(void (**)(kaldi::quasar::ComputeEngineItf *, uint64_t *, uint64_t *, void **, long long *))(*(void *)v76 + 128))(v76, &v119, &v114, &__p, &v117);
  v122[0] = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v122);
  uint64_t v77 = *((void *)&v117 + 1);
  uint64_t v78 = *(void *)(a1 + 472);
  *(void *)(a1 + 472) = *(void *)(*((void *)&v117 + 1) - 8);
  *(void *)(v77 - 8) = v78;
  if (v67)
  {
    uint64_t v79 = *(void *)(a1 + 472);
    int v80 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 176))(v79);
    uint64_t v81 = (*(uint64_t (**)(uint64_t, void))(*(void *)v79 + 184))(v79, (v80 - 1));
    kaldi::quasar::CopyBufferToMatrix(v79, 0xFFFFFFFFLL, v81, v67);
  }
  uint64_t v82 = *((void *)&v117 + 1);
  uint64_t v84 = *((void *)&v117 + 1) - 8;
  uint64_t v83 = *(void *)(*((void *)&v117 + 1) - 8);
  *(void *)(*((void *)&v117 + 1) - 8) = 0;
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  *((void *)&v117 + 1) = v84;
  uint64_t v85 = *(void *)(a1 + 464);
  *(void *)(a1 + 464) = *(void *)(v82 - 16);
  *(void *)(v82 - 16) = v85;
  if (v66)
  {
    uint64_t v86 = *(void *)(a1 + 464);
    int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 176))(v86);
    uint64_t v88 = (*(uint64_t (**)(uint64_t, void))(*(void *)v86 + 184))(v86, (v87 - 1));
    kaldi::quasar::CopyBufferToMatrix(v86, 0xFFFFFFFFLL, v88, v66);
  }
  uint64_t v89 = *((void *)&v117 + 1);
  uint64_t v91 = *((void *)&v117 + 1) - 8;
  uint64_t v90 = *(void *)(*((void *)&v117 + 1) - 8);
  *(void *)(*((void *)&v117 + 1) - 8) = 0;
  if (v90) {
    (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
  }
  *((void *)&v117 + 1) = v91;
  uint64_t v92 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = *(void *)(v89 - 16);
  *(void *)(v89 - 16) = v92;
  if (v65)
  {
    uint64_t v93 = *(void *)(a1 + 456);
    int v94 = (*(uint64_t (**)(uint64_t))(*(void *)v93 + 176))(v93);
    uint64_t v95 = (*(uint64_t (**)(uint64_t, void))(*(void *)v93 + 184))(v93, (v94 - 1));
    kaldi::quasar::CopyBufferToMatrix(v93, 0xFFFFFFFFLL, v95, v65);
  }
  uint64_t v97 = *((void *)&v117 + 1) - 8;
  uint64_t v96 = *(void *)(*((void *)&v117 + 1) - 8);
  *(void *)(*((void *)&v117 + 1) - 8) = 0;
  if (v96) {
    (*(void (**)(uint64_t))(*(void *)v96 + 8))(v96);
  }
  *((void *)&v117 + 1) = v97;
  if (*(void *)(a1 + 400) - *(void *)(a1 + 392) != v97 - (void)v117)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"input_states_.size() == outputs.size()", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  long long v98 = (void *)(a1 + 416);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)(a1 + 416));
  *(_OWORD *)(a1 + 416) = v117;
  *(void *)(a1 + 432) = v118;
  unint64_t v118 = 0;
  long long v117 = 0uLL;
  uint64_t v99 = *(void *)(a1 + 392);
  if (*(void *)(a1 + 400) != v99)
  {
    unint64_t v100 = 0;
    do
    {
      uint64_t Size = kaldi::quasar::ComputeEngineBufferItf::GetSize(*(kaldi::quasar::ComputeEngineBufferItf **)(v99 + 8 * v100));
      if (Size == kaldi::quasar::ComputeEngineBufferItf::GetSize(*(kaldi::quasar::ComputeEngineBufferItf **)(*v98 + 8 * v100)))
      {
        kaldi::quasar::ComputeEngineBufferItf::CopyFrom(*(kaldi::quasar::ComputeEngineBufferItf **)(*(void *)(a1 + 392) + 8 * v100), *(const kaldi::quasar::ComputeEngineBufferItf **)(*(void *)(a1 + 416) + 8 * v100));
      }
      else
      {
        kaldi::quasar::ComputeEngineItf::CreateCopyFloat(*v16, *(const kaldi::quasar::ComputeEngineBufferItf **)(*v98 + 8 * v100), &__p);
        uint64_t v102 = *(void *)(a1 + 392);
        long long v103 = __p;
        long long __p = 0;
        uint64_t v104 = *(void *)(v102 + 8 * v100);
        *(void *)(v102 + 8 * v100) = v103;
        if (v104) {
          (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
        }
        long long v105 = __p;
        long long __p = 0;
        if (v105) {
          (*(void (**)(void *))(*(void *)v105 + 8))(v105);
        }
      }
      ++v100;
      uint64_t v99 = *(void *)(a1 + 392);
    }
    while (v100 < (*(void *)(a1 + 400) - v99) >> 3);
  }
  long long __p = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long __p = &v117;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  long long __p = &v119;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void kaldi::quasar::CEDecoderConfig::~CEDecoderConfig(kaldi::quasar::CEDecoderConfig *this)
{
  uint64_t v2 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 41);
  if (v3)
  {
    *((void *)this + 42) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 38);
  if (v4)
  {
    *((void *)this + 39) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void **)((char *)this + 264);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v5 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::SeevaBeamSearchBigLm::InitAuxiliaryCrumbs(kaldi::quasar::SeevaBeamSearchBigLm *this)
{
  std::vector<int>::size_type v2 = *(int *)(*((void *)this + 2) + 152);
  std::vector<int>::vector(&v7, v2, (const std::vector<int>::value_type *)this + 142);
  uint64_t v3 = (void *)*((void *)this + 79);
  if (v3)
  {
    *((void *)this + 80) = v3;
    operator delete(v3);
  }
  *(std::vector<int> *)((char *)this + 632) = v7;
  std::vector<int>::vector(&v7, v2, (const std::vector<int>::value_type *)this + 143);
  uint64_t v4 = (void *)*((void *)this + 82);
  if (v4)
  {
    *((void *)this + 83) = v4;
    operator delete(v4);
  }
  *(std::vector<int> *)((char *)this + 656) = v7;
  uint64_t v5 = *((void *)this + 86);
  uint64_t v6 = *((void *)this + 85);
  while (v5 != v6)
  {
    v5 -= 48;
    std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::destroy[abi:ne180100]((uint64_t)this + 696, v5);
  }
  *((void *)this + 86) = v6;
}

void kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(uint64_t a1, int a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 16) + 152);
  v100[0] = *(_DWORD *)(*(void *)(a1 + 16) + 152);
  unint64_t v10 = *(int *)(*(void *)(a1 + 560) + 220);
  if (a2)
  {
    if (a4 != (char *)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    }
    unint64_t v11 = *(float **)v6;
    unint64_t v12 = *(int *)(a1 + 44);
    uint64_t v13 = *(void *)v6 + 4 * v12;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    long long __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&__p, v11, v13, v12);
    kaldi::quasar::argsortn<float,false>((uint64_t *)&__p, v10, &v99);
    goto LABEL_18;
  }
  kaldi::quasar::SeevaBeamSearchBase::MaskEos(a1, (void *)a3);
  kaldi::quasar::SeevaBeamSearchBase::UpdateBeamLength((void *)a1);
  if (v6 != (char *)a3) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  }
  if ((int)v9 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(unsigned int *)(a1 + 44);
    uint64_t v16 = *(float **)v6;
    do
    {
      if ((int)v15 >= 1)
      {
        unint64_t v17 = *(void *)(a1 + 120) + *(void *)(a1 + 112) - 1;
        uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8 * (v17 / 0xAA)) + 24 * (v17 % 0xAA));
        uint64_t v19 = v15;
        unint64_t v20 = v16;
        do
        {
          *unint64_t v20 = *(float *)(v18 + 4 * v14) + *v20;
          ++v20;
          --v19;
        }
        while (v19);
      }
      ++v14;
      v16 += (int)v15;
    }
    while (v14 != v9);
  }
  if (*(float *)(*(void *)(a1 + 16) + 8) != 0.0)
  {
    kaldi::quasar::SeevaBeamSearchBase::ApplyLengthNorm(a1, (uint64_t)v6, (float **)&__p);
    kaldi::quasar::argsortn<float,false>((uint64_t *)&__p, v10, &v99);
LABEL_18:
    uint64_t v22 = *(_DWORD **)a5;
    if (*(void *)a5)
    {
      *(void *)(a5 + 8) = v22;
      operator delete(v22);
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
    }
    *(std::vector<int> *)a5 = v99;
    memset(&v99, 0, sizeof(v99));
    if (__p)
    {
      uint64_t v97 = (__n128 *)__p;
      operator delete(__p);
    }
    goto LABEL_22;
  }
  kaldi::quasar::argsortn<float,false>((uint64_t *)v6, v10, &v99);
  uint64_t v21 = *(_DWORD **)a5;
  if (*(void *)a5)
  {
    *(void *)(a5 + 8) = v21;
    operator delete(v21);
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  *(std::vector<int> *)a5 = v99;
LABEL_22:
  uint64_t v23 = *(_DWORD **)a5;
  memset(&v99, 0, sizeof(v99));
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v99, v23, (uint64_t)&v23[v10], v10);
  long long __p = 0;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  if ((int)v10 < 1)
  {
    long long v63 = 0;
    long long v64 = 0;
  }
  else
  {
    uint64_t v81 = a5;
    int v82 = v9;
    uint64_t v25 = 0;
    do
    {
      uint64_t v26 = v99.__begin_[v25];
      int v27 = *(_DWORD *)(a1 + 44);
      int v28 = (int)v26 / v27;
      float v29 = *(float *)(*(void *)v6 + 4 * v26);
      int v95 = 0;
      uint64_t v30 = *(unsigned int *)(*(void *)(a1 + 656) + 4 * ((int)v26 / v27));
      unsigned int v94 = 0;
      int v95 = v30;
      unsigned int v94 = *(_DWORD *)(*(void *)(a1 + 632) + 4 * ((int)v26 / v27));
      uint64_t v92 = 0;
      double v93 = 0.0;
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      int v87 = 0;
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      kaldi::quasar::SeevaBeamSearchBigLm::Traverse(a1, v30, v94, (int)v26 % v27, &v90, &v87, (int **)&v85);
      long long v31 = v6;
      long long v32 = v85;
      if ((int)((unint64_t)(v86 - (unsigned char *)v85) >> 2) >= 1)
      {
        uint64_t v33 = 0;
        uint64_t v34 = v28;
        double v35 = v29;
        uint64_t v36 = (v86 - (unsigned char *)v85) & 0x3FFFFFFFCLL;
        do
        {
          switch(*(_DWORD *)((char *)v85 + v33))
          {
            case 0:
              int v95 = *(_DWORD *)(a1 + 572);
              float v41 = *(float *)(*(void *)(a1 + 560) + 212);
              goto LABEL_55;
            case 1:
              int v95 = *(_DWORD *)(a1 + 572);
              double v42 = 0.0;
              break;
            case 2:
            case 4:
              long long v37 = (char *)v90 + 4 * v33;
              int v38 = *((_DWORD *)v37 + 3);
              goto LABEL_41;
            case 3:
              long long v39 = (char *)v90 + 4 * v33;
              int v95 = *((_DWORD *)v39 + 3);
              goto LABEL_51;
            case 5:
              long long v37 = (char *)v87 + 4 * v33;
              unsigned int v94 = *((_DWORD *)v37 + 3);
              int v38 = *(_DWORD *)(a1 + 572);
LABEL_41:
              int v95 = v38;
              float v40 = *((float *)v37 + 2);
              float v50 = *(float *)(*(void *)(a1 + 560) + 212);
              goto LABEL_54;
            case 6:
              long long v51 = (char *)v90 + 4 * v33;
              int v95 = *((_DWORD *)v51 + 3);
              long long v52 = (char *)v87 + 4 * v33;
              unsigned int v94 = *((_DWORD *)v52 + 3);
              float v53 = *((float *)v51 + 2);
              float v54 = NAN;
              if (v53 != -INFINITY)
              {
                float v55 = *((float *)v52 + 2);
                float v54 = NAN;
                if (v55 != -INFINITY)
                {
                  float v54 = INFINITY;
                  BOOL v56 = v55 == INFINITY || v53 == INFINITY;
                  float v57 = v53 + v55;
                  if (!v56) {
                    float v54 = v57;
                  }
                }
              }
              double v42 = v54;
              break;
            case 7:
              unint64_t v43 = (char *)v90 + 4 * v33;
              int v95 = *((_DWORD *)v43 + 3);
              uint64_t v44 = (char *)v87 + 4 * v33;
              unsigned int v94 = *((_DWORD *)v44 + 3);
              float v45 = *((float *)v43 + 2);
              float v46 = NAN;
              if (v45 != -INFINITY)
              {
                float v47 = *((float *)v44 + 2);
                float v46 = NAN;
                if (v47 != -INFINITY)
                {
                  float v46 = INFINITY;
                  BOOL v48 = v47 == INFINITY || v45 == INFINITY;
                  float v49 = v45 + v47;
                  if (!v48) {
                    float v46 = v49;
                  }
                }
              }
              float v41 = v46 + *(float *)(*(void *)(a1 + 560) + 212);
              goto LABEL_55;
            case 8:
              int v95 = *(_DWORD *)(a1 + 572);
              long long v39 = (char *)v87 + 4 * v33;
LABEL_51:
              float v41 = *((float *)v39 + 2);
              goto LABEL_55;
            case 9:
              int v95 = *(_DWORD *)(a1 + 572);
              float v40 = *((float *)v87 + v33 + 2);
              goto LABEL_53;
            case 0xA:
              uint64_t v58 = (char *)v90 + 4 * v33;
              int v95 = *((_DWORD *)v58 + 3);
              float v40 = *((float *)v87 + v33 + 2) + *((float *)v58 + 2);
LABEL_53:
              float v50 = *(float *)(*(void *)(a1 + 560) + 216);
LABEL_54:
              float v41 = v40 + v50;
LABEL_55:
              double v42 = v41;
              break;
            default:
              double v42 = v93;
              break;
          }
          double v93 = -v42;
          uint64_t v59 = *(void *)(a1 + 560);
          double v60 = v35 - *(float *)(v59 + 208) * v42;
          double v84 = v60;
          double v83 = 0.0;
          float v61 = *(float *)(v59 + 228);
          if (v61 > 0.0)
          {
            unint64_t v62 = *(void *)(a1 + 216) + *(void *)(a1 + 208) - 1;
            double v60 = v60
                * kaldi::quasar::InverseLengthPenaltyValue((kaldi::quasar *)*(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 184) + 8 * (v62 / 0xAA))+ 24 * (v62 % 0xAA))+ 4 * v34), v61);
          }
          double v83 = v60;
          std::vector<kaldi::quasar::LmScoreState>::emplace_back<double &,double &,int &,int &,double &,int &>(&__p, &v83, &v84, &v99.__begin_[v25], (int *)&v94, &v93, &v95);
          v33 += 4;
        }
        while (v36 != v33);
        long long v32 = v85;
      }
      if (v32)
      {
        uint64_t v86 = v32;
        operator delete(v32);
      }
      uint64_t v6 = v31;
      if (v87)
      {
        uint64_t v88 = v87;
        operator delete(v87);
      }
      if (v90)
      {
        uint64_t v91 = v90;
        operator delete(v90);
      }
      ++v25;
    }
    while (v25 != v10);
    long long v64 = (__n128 *)__p;
    long long v63 = v97;
    a5 = v81;
    LODWORD(v9) = v82;
  }
  if ((char *)v63 - (char *)v64 < 3073)
  {
    long long v65 = 0;
    uint64_t v67 = 0;
  }
  else
  {
    long long v65 = std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::LmScoreState>(0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v64) >> 3));
    uint64_t v67 = v66;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(v64, v63, 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v64) >> 3), (uint64_t)v65, v67, v24);
  if (v65) {
    operator delete(v65);
  }
  if ((int)v10 >= 1)
  {
    long long v68 = *(float **)v6;
    uint64_t v69 = *(_DWORD **)a5;
    uint64_t v70 = v10;
    long long v71 = (int *)((char *)__p + 8);
    do
    {
      uint64_t v72 = *v71;
      LODWORD(v68[v72]) = *(v71 - 1);
      *v69++ = v72;
      v71 += 6;
      --v70;
    }
    while (v70);
  }
  unint64_t v73 = *(void *)(a1 + 688);
  if (v73 >= *(void *)(a1 + 696))
  {
    uint64_t v74 = std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__emplace_back_slow_path<int const&>((uint64_t *)(a1 + 680), v100);
    LODWORD(v9) = v100[0];
  }
  else
  {
    kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb::Cookiecrumb(*(kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb **)(a1 + 688), v9);
    uint64_t v74 = v73 + 48;
    *(void *)(a1 + 688) = v73 + 48;
  }
  *(void *)(a1 + 688) = v74;
  if ((int)v9 >= 1)
  {
    uint64_t v75 = 0;
    uint64_t v76 = *(void *)(v74 - 24);
    uint64_t v77 = *(void *)(v74 - 48);
    uint64_t v78 = *(void *)(a1 + 656);
    uint64_t v79 = (int *)((char *)__p + 20);
    do
    {
      *(_DWORD *)(v76 + 4 * v75) = *(v79 - 2);
      *(_DWORD *)(v77 + 4 * v75) = *(v79 - 1);
      int v80 = *v79;
      v79 += 6;
      *(_DWORD *)(v78 + 4 * v75++) = v80;
    }
    while (v75 < v100[0]);
  }
  if (a1 + 632 != v74 - 24) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 632), *(char **)(v74 - 24), *(void *)(v74 - 16), (uint64_t)(*(void *)(v74 - 16) - *(void *)(v74 - 24)) >> 2);
  }
  if (__p)
  {
    uint64_t v97 = (__n128 *)__p;
    operator delete(__p);
  }
  if (v99.__begin_)
  {
    v99.__end_ = v99.__begin_;
    operator delete(v99.__begin_);
  }
}

void sub_1B237992C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaBeamSearchBigLm::Traverse(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void **a5@<X4>, void **a6@<X5>, int **a7@<X8>)
{
  int v11 = a2;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  uint64_t v14 = a1 + 408;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a1 + 408, a2);
  if (*(_DWORD *)(a1 + 36) == a4)
  {
    float v15 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 392) + 16))(*(void *)(a1 + 392), a3);
    float v16 = v15;
    unint64_t v17 = (char *)a6[2];
    uint64_t v18 = (char *)a6[1];
    if (v18 >= v17)
    {
      uint64_t v24 = (v18 - (unsigned char *)*a6) >> 4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v17 - (unsigned char *)*a6;
      if (v26 >> 3 > v25) {
        unint64_t v25 = v26 >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27) {
        int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a6 + 2), v27);
      }
      else {
        int v28 = 0;
      }
      uint64_t v81 = (float *)&v28[16 * v24];
      int v82 = &v28[16 * v27];
      float v81[2] = v16;
      uint64_t v19 = (char *)(v81 + 4);
      double v84 = (char *)*a6;
      double v83 = (char *)a6[1];
      if (v83 != *a6)
      {
        do
        {
          *((_OWORD *)v81 - 1) = *((_OWORD *)v83 - 1);
          v81 -= 4;
          v83 -= 16;
        }
        while (v83 != v84);
        double v83 = (char *)*a6;
      }
      *a6 = v81;
      a6[1] = v19;
      a6[2] = v82;
      if (v83) {
        operator delete(v83);
      }
    }
    else
    {
      *((float *)v18 + 2) = v15;
      uint64_t v19 = v18 + 16;
    }
    a6[1] = v19;
    if (*(_DWORD *)(a1 + 572) == v11)
    {
      unint64_t v85 = (unint64_t)a7[2];
      uint64_t v79 = a7[1];
      if ((unint64_t)v79 < v85)
      {
        int v80 = 8;
        goto LABEL_397;
      }
      uint64_t v90 = *a7;
      uint64_t v91 = v79 - *a7;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v93 = v85 - (void)v90;
      if (v93 >> 1 > v92) {
        unint64_t v92 = v93 >> 1;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        int v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v94);
        uint64_t v90 = *a7;
        uint64_t v79 = a7[1];
      }
      else
      {
        int v95 = 0;
      }
      uint64_t v124 = &v95[4 * v91];
      long long v125 = &v95[4 * v94];
      *(_DWORD *)uint64_t v124 = 8;
      long long v126 = (int *)(v124 + 4);
      while (v79 != v90)
      {
        int v127 = *--v79;
        *((_DWORD *)v124 - 1) = v127;
        v124 -= 4;
      }
    }
    else if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, 0))
    {
      uint64_t v86 = (_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(v14);
      unint64_t v87 = (unint64_t)a5[2];
      uint64_t v88 = a5[1];
      if ((unint64_t)v88 >= v87)
      {
        uint64_t v114 = ((char *)v88 - (unsigned char *)*a5) >> 4;
        unint64_t v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v116 = v87 - (void)*a5;
        if (v116 >> 3 > v115) {
          unint64_t v115 = v116 >> 3;
        }
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v117 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v117 = v115;
        }
        if (v117) {
          unint64_t v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v117);
        }
        else {
          unint64_t v118 = 0;
        }
        v162 = &v118[16 * v114];
        v163 = &v118[16 * v117];
        *(_OWORD *)v162 = *v86;
        uint64_t v89 = v162 + 16;
        v165 = (char *)*a5;
        v164 = (char *)a5[1];
        if (v164 != *a5)
        {
          do
          {
            *((_OWORD *)v162 - 1) = *((_OWORD *)v164 - 1);
            v162 -= 16;
            v164 -= 16;
          }
          while (v164 != v165);
          v164 = (char *)*a5;
        }
        *a5 = v162;
        a5[1] = v89;
        a5[2] = v163;
        if (v164) {
          operator delete(v164);
        }
      }
      else
      {
        *uint64_t v88 = *v86;
        uint64_t v89 = v88 + 1;
      }
      a5[1] = v89;
      unint64_t v166 = (unint64_t)a7[2];
      uint64_t v79 = a7[1];
      if ((unint64_t)v79 < v166)
      {
        int v80 = 10;
        goto LABEL_397;
      }
      uint64_t v90 = *a7;
      uint64_t v167 = v79 - *a7;
      unint64_t v168 = v167 + 1;
      if ((unint64_t)(v167 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v169 = v166 - (void)v90;
      if (v169 >> 1 > v168) {
        unint64_t v168 = v169 >> 1;
      }
      if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v170 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v170 = v168;
      }
      if (v170)
      {
        v171 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v170);
        uint64_t v90 = *a7;
        uint64_t v79 = a7[1];
      }
      else
      {
        v171 = 0;
      }
      uint64_t v124 = &v171[4 * v167];
      long long v125 = &v171[4 * v170];
      *(_DWORD *)uint64_t v124 = 10;
      long long v126 = (int *)(v124 + 4);
      while (v79 != v90)
      {
        int v172 = *--v79;
        *((_DWORD *)v124 - 1) = v172;
        v124 -= 4;
      }
    }
    else
    {
      unint64_t v96 = (unint64_t)a7[2];
      uint64_t v79 = a7[1];
      if ((unint64_t)v79 < v96)
      {
        int v80 = 9;
        goto LABEL_397;
      }
      uint64_t v90 = *a7;
      uint64_t v109 = v79 - *a7;
      unint64_t v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v111 = v96 - (void)v90;
      if (v111 >> 1 > v110) {
        unint64_t v110 = v111 >> 1;
      }
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v112 = v110;
      }
      if (v112)
      {
        unint64_t v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v112);
        uint64_t v90 = *a7;
        uint64_t v79 = a7[1];
      }
      else
      {
        unint64_t v113 = 0;
      }
      uint64_t v124 = &v113[4 * v109];
      long long v125 = &v113[4 * v112];
      *(_DWORD *)uint64_t v124 = 9;
      long long v126 = (int *)(v124 + 4);
      while (v79 != v90)
      {
        int v153 = *--v79;
        *((_DWORD *)v124 - 1) = v153;
        v124 -= 4;
      }
    }
    goto LABEL_415;
  }
  if (*(_DWORD *)(a1 + 624) <= a4 && *(_DWORD *)(a1 + 628) >= a4)
  {
    unint64_t v78 = (unint64_t)a7[2];
    uint64_t v79 = a7[1];
    if ((unint64_t)v79 < v78)
    {
      int v80 = 1;
LABEL_397:
      *uint64_t v79 = v80;
      v161 = v79 + 1;
      goto LABEL_398;
    }
    uint64_t v90 = *a7;
    uint64_t v104 = v79 - *a7;
    unint64_t v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v106 = v78 - (void)v90;
    if (v106 >> 1 > v105) {
      unint64_t v105 = v106 >> 1;
    }
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v107 = v105;
    }
    if (v107)
    {
      long long v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v107);
      uint64_t v90 = *a7;
      uint64_t v79 = a7[1];
    }
    else
    {
      long long v108 = 0;
    }
    uint64_t v124 = &v108[4 * v104];
    long long v125 = &v108[4 * v107];
    *(_DWORD *)uint64_t v124 = 1;
    long long v126 = (int *)(v124 + 4);
    while (v79 != v90)
    {
      int v152 = *--v79;
      *((_DWORD *)v124 - 1) = v152;
      v124 -= 4;
    }
LABEL_415:
    *a7 = (int *)v124;
    a7[1] = v126;
    a7[2] = (int *)v125;
    if (v90) {
      operator delete(v90);
    }
    goto LABEL_417;
  }
  if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, a4 + 1))
  {
    int v29 = *(_DWORD *)(a1 + 44) + 1;
    if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, v29))
    {
      if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, 0))
      {
        uint64_t v97 = (_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(v14);
        unint64_t v98 = (unint64_t)a5[2];
        std::vector<int> v99 = a5[1];
        if ((unint64_t)v99 >= v98)
        {
          uint64_t v154 = ((char *)v99 - (unsigned char *)*a5) >> 4;
          unint64_t v155 = v154 + 1;
          if ((unint64_t)(v154 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v156 = v98 - (void)*a5;
          if (v156 >> 3 > v155) {
            unint64_t v155 = v156 >> 3;
          }
          if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v157 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v157 = v155;
          }
          if (v157) {
            v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v157);
          }
          else {
            v158 = 0;
          }
          v192 = &v158[16 * v154];
          v193 = &v158[16 * v157];
          *(_OWORD *)v192 = *v97;
          unint64_t v100 = v192 + 16;
          v195 = (char *)*a5;
          v194 = (char *)a5[1];
          if (v194 != *a5)
          {
            do
            {
              *((_OWORD *)v192 - 1) = *((_OWORD *)v194 - 1);
              v192 -= 16;
              v194 -= 16;
            }
            while (v194 != v195);
            v194 = (char *)*a5;
          }
          *a5 = v192;
          a5[1] = v100;
          a5[2] = v193;
          if (v194) {
            operator delete(v194);
          }
        }
        else
        {
          *std::vector<int> v99 = *v97;
          unint64_t v100 = v99 + 1;
        }
        a5[1] = v100;
        unint64_t v196 = (unint64_t)a7[2];
        uint64_t v79 = a7[1];
        if ((unint64_t)v79 < v196)
        {
          int v80 = 2;
          goto LABEL_397;
        }
        uint64_t v90 = *a7;
        uint64_t v197 = v79 - *a7;
        unint64_t v198 = v197 + 1;
        if ((unint64_t)(v197 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v199 = v196 - (void)v90;
        if (v199 >> 1 > v198) {
          unint64_t v198 = v199 >> 1;
        }
        if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v200 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v200 = v198;
        }
        if (v200)
        {
          v201 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v200);
          uint64_t v90 = *a7;
          uint64_t v79 = a7[1];
        }
        else
        {
          v201 = 0;
        }
        uint64_t v124 = &v201[4 * v197];
        long long v125 = &v201[4 * v200];
        *(_DWORD *)uint64_t v124 = 2;
        long long v126 = (int *)(v124 + 4);
        while (v79 != v90)
        {
          int v202 = *--v79;
          *((_DWORD *)v124 - 1) = v202;
          v124 -= 4;
        }
      }
      else if ((*(unsigned int (**)(void, uint64_t, void, long long *))(**(void **)(a1 + 392) + 32))(*(void *)(a1 + 392), a3, *(unsigned int *)(a1 + 552), &v271))
      {
        unint64_t v128 = (unint64_t)a6[2];
        long long v129 = a6[1];
        if ((unint64_t)v129 >= v128)
        {
          uint64_t v182 = ((char *)v129 - (unsigned char *)*a6) >> 4;
          unint64_t v183 = v182 + 1;
          if ((unint64_t)(v182 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v184 = v128 - (void)*a6;
          if (v184 >> 3 > v183) {
            unint64_t v183 = v184 >> 3;
          }
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v185 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v185 = v183;
          }
          if (v185) {
            v186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a6 + 2), v185);
          }
          else {
            v186 = 0;
          }
          v256 = &v186[16 * v182];
          v257 = &v186[16 * v185];
          *(_OWORD *)v256 = v271;
          long long v130 = v256 + 16;
          v259 = (char *)*a6;
          v258 = (char *)a6[1];
          if (v258 != *a6)
          {
            do
            {
              *((_OWORD *)v256 - 1) = *((_OWORD *)v258 - 1);
              v256 -= 16;
              v258 -= 16;
            }
            while (v258 != v259);
            v258 = (char *)*a6;
          }
          *a6 = v256;
          a6[1] = v130;
          a6[2] = v257;
          if (v258) {
            operator delete(v258);
          }
        }
        else
        {
          _OWORD *v129 = v271;
          long long v130 = v129 + 1;
        }
        a6[1] = v130;
        unint64_t v260 = (unint64_t)a7[2];
        uint64_t v79 = a7[1];
        if ((unint64_t)v79 < v260)
        {
          int v80 = 5;
          goto LABEL_397;
        }
        uint64_t v90 = *a7;
        uint64_t v261 = v79 - *a7;
        unint64_t v262 = v261 + 1;
        if ((unint64_t)(v261 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v263 = v260 - (void)v90;
        if (v263 >> 1 > v262) {
          unint64_t v262 = v263 >> 1;
        }
        if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v264 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v264 = v262;
        }
        if (v264)
        {
          v265 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v264);
          uint64_t v90 = *a7;
          uint64_t v79 = a7[1];
        }
        else
        {
          v265 = 0;
        }
        uint64_t v124 = &v265[4 * v261];
        long long v125 = &v265[4 * v264];
        *(_DWORD *)uint64_t v124 = 5;
        long long v126 = (int *)(v124 + 4);
        while (v79 != v90)
        {
          int v267 = *--v79;
          *((_DWORD *)v124 - 1) = v267;
          v124 -= 4;
        }
      }
      else
      {
        unint64_t v159 = (unint64_t)a7[2];
        v160 = a7[1];
        if ((unint64_t)v160 < v159)
        {
          int *v160 = 0;
          v161 = v160 + 1;
LABEL_398:
          long long v126 = v161;
LABEL_417:
          a7[1] = v126;
          return;
        }
        uint64_t v90 = *a7;
        uint64_t v187 = v160 - *a7;
        unint64_t v188 = v187 + 1;
        if ((unint64_t)(v187 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v189 = v159 - (void)v90;
        if (v189 >> 1 > v188) {
          unint64_t v188 = v189 >> 1;
        }
        if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v190 = v188;
        }
        if (v190)
        {
          v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v190);
          uint64_t v90 = *a7;
          v160 = a7[1];
        }
        else
        {
          v191 = 0;
        }
        uint64_t v124 = &v191[4 * v187];
        long long v125 = &v191[4 * v190];
        *(_DWORD *)uint64_t v124 = 0;
        long long v126 = (int *)(v124 + 4);
        while (v160 != v90)
        {
          int v266 = *--v160;
          *((_DWORD *)v124 - 1) = v266;
          v124 -= 4;
        }
      }
      goto LABEL_415;
    }
    uint64_t v268 = (uint64_t)(a7 + 2);
    while (1)
    {
      uint64_t v30 = (_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(v14);
      long long v31 = v30;
      uint64_t v33 = a5[1];
      unint64_t v32 = (unint64_t)a5[2];
      if ((unint64_t)v33 >= v32)
      {
        uint64_t v35 = ((char *)v33 - (unsigned char *)*a5) >> 4;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 60) {
          goto LABEL_420;
        }
        uint64_t v37 = v32 - (void)*a5;
        if (v37 >> 3 > v36) {
          unint64_t v36 = v37 >> 3;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38) {
          long long v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v38);
        }
        else {
          long long v39 = 0;
        }
        float v40 = &v39[16 * v35];
        *(_OWORD *)float v40 = *v31;
        double v42 = (char *)*a5;
        float v41 = (char *)a5[1];
        unint64_t v43 = v40;
        if (v41 != *a5)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v41 - 1);
            v43 -= 16;
            v41 -= 16;
          }
          while (v41 != v42);
          float v41 = (char *)*a5;
        }
        uint64_t v34 = v40 + 16;
        *a5 = v43;
        a5[1] = v40 + 16;
        a5[2] = &v39[16 * v38];
        if (v41) {
          operator delete(v41);
        }
      }
      else
      {
        _OWORD *v33 = *v30;
        uint64_t v34 = v33 + 1;
      }
      a5[1] = v34;
      if ((*(unsigned int (**)(void, uint64_t, void, long long *))(**(void **)(a1 + 392) + 32))(*(void *)(a1 + 392), a3, *((unsigned int *)v31 + 1), &v271))
      {
        float v45 = a7[1];
        unint64_t v44 = (unint64_t)a7[2];
        if ((unint64_t)v45 >= v44)
        {
          float v49 = *a7;
          uint64_t v50 = v45 - *a7;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = v44 - (void)v49;
          if (v52 >> 1 > v51) {
            unint64_t v51 = v52 >> 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            float v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v268, v53);
            float v49 = *a7;
            float v45 = a7[1];
          }
          else
          {
            float v54 = 0;
          }
          unint64_t v62 = &v54[4 * v50];
          *(_DWORD *)unint64_t v62 = 6;
          float v55 = (int *)(v62 + 4);
          while (v45 != v49)
          {
            int v63 = *--v45;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
LABEL_81:
          *a7 = (int *)v62;
          a7[1] = v55;
          a7[2] = (int *)&v54[4 * v53];
          if (v49) {
            operator delete(v49);
          }
          goto LABEL_83;
        }
        int v46 = 6;
      }
      else
      {
        int v47 = (*(uint64_t (**)(void, uint64_t, void, long long *))(**(void **)(a1 + 392) + 32))(*(void *)(a1 + 392), a3, *(unsigned int *)(a1 + 552), &v271);
        float v45 = a7[1];
        unint64_t v48 = (unint64_t)a7[2];
        if (v47)
        {
          if ((unint64_t)v45 >= v48)
          {
            float v49 = *a7;
            uint64_t v56 = v45 - *a7;
            unint64_t v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v58 = v48 - (void)v49;
            if (v58 >> 1 > v57) {
              unint64_t v57 = v58 >> 1;
            }
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v57;
            }
            if (v53)
            {
              float v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v268, v53);
              float v49 = *a7;
              float v45 = a7[1];
            }
            else
            {
              float v54 = 0;
            }
            unint64_t v62 = &v54[4 * v56];
            *(_DWORD *)unint64_t v62 = 7;
            float v55 = (int *)(v62 + 4);
            while (v45 != v49)
            {
              int v64 = *--v45;
              *((_DWORD *)v62 - 1) = v64;
              v62 -= 4;
            }
            goto LABEL_81;
          }
          int v46 = 7;
        }
        else
        {
          if ((unint64_t)v45 >= v48)
          {
            float v49 = *a7;
            uint64_t v59 = v45 - *a7;
            unint64_t v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v61 = v48 - (void)v49;
            if (v61 >> 1 > v60) {
              unint64_t v60 = v61 >> 1;
            }
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v60;
            }
            if (v53)
            {
              float v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v268, v53);
              float v49 = *a7;
              float v45 = a7[1];
            }
            else
            {
              float v54 = 0;
            }
            unint64_t v62 = &v54[4 * v59];
            *(_DWORD *)unint64_t v62 = 4;
            float v55 = (int *)(v62 + 4);
            while (v45 != v49)
            {
              int v65 = *--v45;
              *((_DWORD *)v62 - 1) = v65;
              v62 -= 4;
            }
            goto LABEL_81;
          }
          int v46 = 4;
        }
      }
      *float v45 = v46;
      float v55 = v45 + 1;
LABEL_83:
      a7[1] = v55;
      uint64_t v67 = a6[1];
      unint64_t v66 = (unint64_t)a6[2];
      if ((unint64_t)v67 >= v66)
      {
        uint64_t v69 = ((char *)v67 - (unsigned char *)*a6) >> 4;
        unint64_t v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 60) {
LABEL_420:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v71 = v66 - (void)*a6;
        if (v71 >> 3 > v70) {
          unint64_t v70 = v71 >> 3;
        }
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v70;
        }
        if (v72) {
          unint64_t v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a6 + 2), v72);
        }
        else {
          unint64_t v73 = 0;
        }
        uint64_t v74 = &v73[16 * v69];
        *(_OWORD *)uint64_t v74 = v271;
        uint64_t v76 = (char *)*a6;
        uint64_t v75 = (char *)a6[1];
        uint64_t v77 = v74;
        if (v75 != *a6)
        {
          do
          {
            *((_OWORD *)v77 - 1) = *((_OWORD *)v75 - 1);
            v77 -= 16;
            v75 -= 16;
          }
          while (v75 != v76);
          uint64_t v75 = (char *)*a6;
        }
        long long v68 = v74 + 16;
        *a6 = v77;
        a6[1] = v74 + 16;
        a6[2] = &v73[16 * v72];
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        *uint64_t v67 = v271;
        long long v68 = v67 + 1;
      }
      a6[1] = v68;
      if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, ++v29)) {
        return;
      }
    }
  }
  uint64_t v20 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(v14);
  if (*(_DWORD *)(v20 + 4))
  {
    unint64_t v21 = (unint64_t)a5[2];
    uint64_t v22 = a5[1];
    if ((unint64_t)v22 >= v21)
    {
      uint64_t v119 = ((char *)v22 - (unsigned char *)*a5) >> 4;
      unint64_t v120 = v119 + 1;
      if ((unint64_t)(v119 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v121 = v21 - (void)*a5;
      if (v121 >> 3 > v120) {
        unint64_t v120 = v121 >> 3;
      }
      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v122 = v120;
      }
      if (v122) {
        long long v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v122);
      }
      else {
        long long v123 = 0;
      }
      v173 = &v123[16 * v119];
      v174 = &v123[16 * v122];
      *(_OWORD *)v173 = *(_OWORD *)v20;
      uint64_t v23 = (unsigned int *)(v173 + 16);
      v176 = (char *)*a5;
      v175 = (char *)a5[1];
      if (v175 != *a5)
      {
        do
        {
          *((_OWORD *)v173 - 1) = *((_OWORD *)v175 - 1);
          v173 -= 16;
          v175 -= 16;
        }
        while (v175 != v176);
        v175 = (char *)*a5;
      }
      *a5 = v173;
      a5[1] = v23;
      a5[2] = v174;
      if (v175) {
        operator delete(v175);
      }
    }
    else
    {
      *uint64_t v22 = *(_OWORD *)v20;
      uint64_t v23 = (unsigned int *)(v22 + 1);
    }
    a5[1] = v23;
LABEL_323:
    v221 = (unsigned int *)*a5;
    if (*a5 == v23) {
      return;
    }
    while (1)
    {
      if ((*(unsigned int (**)(void, uint64_t, void, long long *))(**(void **)(a1 + 392) + 32))(*(void *)(a1 + 392), a3, v221[1], &v271))
      {
        v223 = a7[1];
        unint64_t v222 = (unint64_t)a7[2];
        if ((unint64_t)v223 >= v222)
        {
          v227 = *a7;
          uint64_t v228 = v223 - *a7;
          unint64_t v229 = v228 + 1;
          if ((unint64_t)(v228 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v230 = v222 - (void)v227;
          if (v230 >> 1 > v229) {
            unint64_t v229 = v230 >> 1;
          }
          if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v231 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v231 = v229;
          }
          if (v231)
          {
            v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v231);
            v227 = *a7;
            v223 = a7[1];
          }
          else
          {
            v232 = 0;
          }
          v240 = &v232[4 * v228];
          *(_DWORD *)v240 = 6;
          v233 = (int *)(v240 + 4);
          while (v223 != v227)
          {
            int v241 = *--v223;
            *((_DWORD *)v240 - 1) = v241;
            v240 -= 4;
          }
LABEL_369:
          *a7 = (int *)v240;
          a7[1] = v233;
          a7[2] = (int *)&v232[4 * v231];
          if (v227) {
            operator delete(v227);
          }
          goto LABEL_371;
        }
        int v224 = 6;
      }
      else
      {
        int v225 = (*(uint64_t (**)(void, uint64_t, void, long long *))(**(void **)(a1 + 392) + 32))(*(void *)(a1 + 392), a3, *(unsigned int *)(a1 + 552), &v271);
        v223 = a7[1];
        unint64_t v226 = (unint64_t)a7[2];
        if (v225)
        {
          if ((unint64_t)v223 >= v226)
          {
            v227 = *a7;
            uint64_t v234 = v223 - *a7;
            unint64_t v235 = v234 + 1;
            if ((unint64_t)(v234 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v236 = v226 - (void)v227;
            if (v236 >> 1 > v235) {
              unint64_t v235 = v236 >> 1;
            }
            if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v231 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v231 = v235;
            }
            if (v231)
            {
              v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v231);
              v227 = *a7;
              v223 = a7[1];
            }
            else
            {
              v232 = 0;
            }
            v240 = &v232[4 * v234];
            *(_DWORD *)v240 = 7;
            v233 = (int *)(v240 + 4);
            while (v223 != v227)
            {
              int v242 = *--v223;
              *((_DWORD *)v240 - 1) = v242;
              v240 -= 4;
            }
            goto LABEL_369;
          }
          int v224 = 7;
        }
        else
        {
          if ((unint64_t)v223 >= v226)
          {
            v227 = *a7;
            uint64_t v237 = v223 - *a7;
            unint64_t v238 = v237 + 1;
            if ((unint64_t)(v237 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v239 = v226 - (void)v227;
            if (v239 >> 1 > v238) {
              unint64_t v238 = v239 >> 1;
            }
            if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v231 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v231 = v238;
            }
            if (v231)
            {
              v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v231);
              v227 = *a7;
              v223 = a7[1];
            }
            else
            {
              v232 = 0;
            }
            v240 = &v232[4 * v237];
            *(_DWORD *)v240 = 4;
            v233 = (int *)(v240 + 4);
            while (v223 != v227)
            {
              int v243 = *--v223;
              *((_DWORD *)v240 - 1) = v243;
              v240 -= 4;
            }
            goto LABEL_369;
          }
          int v224 = 4;
        }
      }
      int *v223 = v224;
      v233 = v223 + 1;
LABEL_371:
      a7[1] = v233;
      v245 = a6[1];
      unint64_t v244 = (unint64_t)a6[2];
      if ((unint64_t)v245 >= v244)
      {
        uint64_t v247 = ((char *)v245 - (unsigned char *)*a6) >> 4;
        unint64_t v248 = v247 + 1;
        if ((unint64_t)(v247 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v249 = v244 - (void)*a6;
        if (v249 >> 3 > v248) {
          unint64_t v248 = v249 >> 3;
        }
        if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v250 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v250 = v248;
        }
        if (v250) {
          v251 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a6 + 2), v250);
        }
        else {
          v251 = 0;
        }
        v252 = &v251[16 * v247];
        *(_OWORD *)v252 = v271;
        v254 = (char *)*a6;
        v253 = (char *)a6[1];
        v255 = v252;
        if (v253 != *a6)
        {
          do
          {
            *((_OWORD *)v255 - 1) = *((_OWORD *)v253 - 1);
            v255 -= 16;
            v253 -= 16;
          }
          while (v253 != v254);
          v253 = (char *)*a6;
        }
        v246 = v252 + 16;
        *a6 = v255;
        a6[1] = v252 + 16;
        a6[2] = &v251[16 * v250];
        if (v253) {
          operator delete(v253);
        }
      }
      else
      {
        _OWORD *v245 = v271;
        v246 = v245 + 1;
      }
      a6[1] = v246;
      v221 += 4;
      if (v221 == v23) {
        return;
      }
    }
  }
  uint64_t v101 = *(void *)(a1 + 400);
  uint64_t v102 = *(unsigned int *)(v20 + 12);
  unint64_t v274 = 0;
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v101 + 136))(v101, v102, &v271);
  if ((void)v271) {
    long long v103 = (int *)(*(uint64_t (**)(void))(*(void *)v271 + 32))(v271);
  }
  else {
    long long v103 = (int *)(*((void *)&v271 + 1) + 16 * v274);
  }
  int v270 = *v103;
  int v269 = *(_DWORD *)(a1 + 44);
  if (*v103 > v269)
  {
    while (1)
    {
      if ((void)v271)
      {
        if ((*(uint64_t (**)(void))(*(void *)v271 + 24))(v271)) {
          goto LABEL_317;
        }
        if ((void)v271)
        {
          long long v131 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v271 + 32))(v271);
          goto LABEL_177;
        }
      }
      else if (v274 >= v272)
      {
        goto LABEL_317;
      }
      long long v131 = (_OWORD *)(*((void *)&v271 + 1) + 16 * v274);
LABEL_177:
      long long v133 = a5[1];
      unint64_t v132 = (unint64_t)a5[2];
      if ((unint64_t)v133 >= v132)
      {
        uint64_t v135 = ((char *)v133 - (unsigned char *)*a5) >> 4;
        unint64_t v136 = v135 + 1;
        if ((unint64_t)(v135 + 1) >> 60) {
          goto LABEL_423;
        }
        uint64_t v137 = v132 - (void)*a5;
        if (v137 >> 3 > v136) {
          unint64_t v136 = v137 >> 3;
        }
        if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v138 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v138 = v136;
        }
        if (v138) {
          long long v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v138);
        }
        else {
          long long v139 = 0;
        }
        long long v140 = &v139[16 * v135];
        *(_OWORD *)long long v140 = *v131;
        v142 = (char *)*a5;
        char v141 = (char *)a5[1];
        v143 = v140;
        if (v141 != *a5)
        {
          do
          {
            *((_OWORD *)v143 - 1) = *((_OWORD *)v141 - 1);
            v143 -= 16;
            v141 -= 16;
          }
          while (v141 != v142);
          char v141 = (char *)*a5;
        }
        long long v134 = v140 + 16;
        *a5 = v143;
        a5[1] = v140 + 16;
        a5[2] = &v139[16 * v138];
        if (v141) {
          operator delete(v141);
        }
      }
      else
      {
        _OWORD *v133 = *v131;
        long long v134 = v133 + 1;
      }
      a5[1] = v134;
      float v144 = *(float *)(v20 + 8);
      float v145 = NAN;
      if (v144 != -INFINITY)
      {
        float v146 = *((float *)v134 - 2);
        float v145 = NAN;
        if (v146 != -INFINITY)
        {
          float v145 = INFINITY;
          BOOL v147 = v146 == INFINITY || v144 == INFINITY;
          float v148 = v144 + v146;
          if (!v147) {
            float v145 = v148;
          }
        }
      }
      *((float *)v134 - 2) = v145;
      if ((void)v271) {
        (*(void (**)(void))(*(void *)v271 + 40))(v271);
      }
      else {
        ++v274;
      }
    }
  }
  unint64_t v149 = (unint64_t)a5[2];
  v150 = a5[1];
  if ((unint64_t)v150 >= v149)
  {
    uint64_t v177 = ((char *)v150 - (unsigned char *)*a5) >> 4;
    unint64_t v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 60) {
LABEL_423:
    }
      std::vector<int>::__throw_length_error[abi:ne180100]();
    uint64_t v179 = v149 - (void)*a5;
    if (v179 >> 3 > v178) {
      unint64_t v178 = v179 >> 3;
    }
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v180 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v180 = v178;
    }
    if (v180) {
      v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v180);
    }
    else {
      v181 = 0;
    }
    v203 = &v181[16 * v177];
    v204 = &v181[16 * v180];
    *(_OWORD *)v203 = *(_OWORD *)v20;
    v151 = v203 + 16;
    v206 = (char *)*a5;
    v205 = (char *)a5[1];
    if (v205 != *a5)
    {
      do
      {
        *((_OWORD *)v203 - 1) = *((_OWORD *)v205 - 1);
        v203 -= 16;
        v205 -= 16;
      }
      while (v205 != v206);
      v205 = (char *)*a5;
    }
    *a5 = v203;
    a5[1] = v151;
    a5[2] = v204;
    if (v205) {
      operator delete(v205);
    }
  }
  else
  {
    _OWORD *v150 = *(_OWORD *)v20;
    v151 = v150 + 1;
  }
  a5[1] = v151;
  unint64_t v207 = (unint64_t)a7[2];
  v208 = a7[1];
  if ((unint64_t)v208 >= v207)
  {
    v210 = *a7;
    uint64_t v211 = v208 - *a7;
    unint64_t v212 = v211 + 1;
    if ((unint64_t)(v211 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v213 = v207 - (void)v210;
    if (v213 >> 1 > v212) {
      unint64_t v212 = v213 >> 1;
    }
    if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v214 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v214 = v212;
    }
    if (v214)
    {
      v215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v214);
      v210 = *a7;
      v208 = a7[1];
    }
    else
    {
      v215 = 0;
    }
    v216 = (int *)&v215[4 * v211];
    v217 = (int *)&v215[4 * v214];
    int *v216 = 3;
    v209 = v216 + 1;
    while (v208 != v210)
    {
      int v218 = *--v208;
      *--v216 = v218;
    }
    *a7 = v216;
    a7[1] = v209;
    a7[2] = v217;
    if (v210) {
      operator delete(v210);
    }
  }
  else
  {
    int *v208 = 3;
    v209 = v208 + 1;
  }
  a7[1] = v209;
LABEL_317:
  if ((void)v271)
  {
    (*(void (**)(void))(*(void *)v271 + 8))(v271);
    int v219 = v270;
    int v220 = v269;
  }
  else
  {
    int v219 = v270;
    int v220 = v269;
    if (v273) {
      --*v273;
    }
  }
  if (v219 > v220)
  {
    uint64_t v23 = (unsigned int *)a5[1];
    goto LABEL_323;
  }
}

void sub_1B237AFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::quasar::LmScoreState>::emplace_back<double &,double &,int &,int &,double &,int &>(void **a1, double *a2, double *a3, int *a4, int *a5, double *a6, int *a7)
{
  float v16 = a1[2];
  uint64_t v14 = (uint64_t)(a1 + 2);
  uint64_t v15 = v16;
  unint64_t v17 = *(void *)(v14 - 8);
  if (v17 >= (unint64_t)v16)
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)*a1) >> 3);
    unint64_t v26 = v25 + 1;
    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (unsigned char *)*a1) >> 3);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x555555555555555) {
      unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v28 = v26;
    }
    int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v14, v28);
    uint64_t v30 = (float *)&v29[24 * v25];
    unint64_t v32 = &v29[24 * v31];
    float v33 = *a2;
    float v34 = *a3;
    int v35 = *a4;
    int v36 = *a5;
    float v37 = *a6;
    int v38 = *a7;
    float *v30 = v33;
    v30[1] = v34;
    *((_DWORD *)v30 + 2) = v35;
    *((_DWORD *)v30 + 3) = v36;
    v30[4] = v37;
    *((_DWORD *)v30 + 5) = v38;
    uint64_t v24 = (char *)(v30 + 6);
    float v40 = (char *)*a1;
    long long v39 = (char *)a1[1];
    if (v39 != *a1)
    {
      do
      {
        long long v41 = *(_OWORD *)(v39 - 24);
        *((void *)v30 - 1) = *((void *)v39 - 1);
        *(_OWORD *)(v30 - 6) = v41;
        v30 -= 6;
        v39 -= 24;
      }
      while (v39 != v40);
      long long v39 = (char *)*a1;
    }
    *a1 = v30;
    a1[1] = v24;
    a1[2] = v32;
    if (v39) {
      operator delete(v39);
    }
  }
  else
  {
    float v18 = *a2;
    float v19 = *a3;
    int v20 = *a4;
    int v21 = *a5;
    float v22 = *a6;
    int v23 = *a7;
    *(float *)unint64_t v17 = v18;
    *(float *)(v17 + 4) = v19;
    *(_DWORD *)(v17 + 8) = v20;
    *(_DWORD *)(v17 + 12) = v21;
    *(float *)(v17 + 16) = v22;
    *(_DWORD *)(v17 + 20) = v23;
    uint64_t v24 = (char *)(v17 + 24);
  }
  a1[1] = v24;
  return v24 - 24;
}

void *std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::LmScoreState>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x555555555555555) {
    unint64_t v1 = 0x555555555555555;
  }
  else {
    unint64_t v1 = a1;
  }
  std::vector<int>::size_type v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    uint64_t result = operator new(24 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    std::vector<int> v7 = a1;
    if (a3 == 2)
    {
      unint64_t v8 = (__n128 *)((char *)a2 - 24);
      result.n128_u32[0] = a2[-2].n128_u32[2];
      if (result.n128_f32[0] > a1->n128_f32[0])
      {
        unint64_t v9 = a1[1].n128_u64[0];
        uint64_t result = *a1;
        unint64_t v10 = a2[-1].n128_u64[1];
        *a1 = *v8;
        a1[1].n128_u64[0] = v10;
        *unint64_t v8 = result;
        a2[-1].n128_u64[1] = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v20 = a4;
      unint64_t v21 = a3 >> 1;
      float v22 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      unint64_t v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v24 = std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(a1, v22, v23, a4, result);
        uint64_t v25 = v20 + 24 * v21;
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((__n128 *)((char *)v7 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v25, v24).n128_u64[0];
        unint64_t v26 = (__n128 *)(v20 + 24 * a3);
        unint64_t v27 = (__n128 *)v25;
        while (v27 != v26)
        {
          if (v27->n128_f32[0] <= *(float *)v20)
          {
            uint64_t result = *(__n128 *)v20;
            v7[1].n128_u64[0] = *(void *)(v20 + 16);
            __n128 *v7 = result;
            v20 += 24;
          }
          else
          {
            uint64_t result = *v27;
            v7[1].n128_u64[0] = v27[1].n128_u64[0];
            __n128 *v7 = result;
            unint64_t v27 = (__n128 *)((char *)v27 + 24);
          }
          std::vector<int> v7 = (__n128 *)((char *)v7 + 24);
          if (v20 == v25)
          {
            if (v27 != v26)
            {
              unint64_t v28 = 0;
              do
              {
                int v29 = (__n128 *)((char *)v7 + v28);
                uint64_t result = *(__n128 *)((char *)v27 + v28);
                v29[1].n128_u64[0] = v27[1].n128_u64[v28 / 8];
                __n128 *v29 = result;
                v28 += 24;
              }
              while ((__n128 *)((char *)v27 + v28) != v26);
            }
            return result;
          }
        }
        if (v20 != v25)
        {
          uint64_t v30 = 0;
          do
          {
            uint64_t v31 = (__n128 *)((char *)v7 + v30);
            uint64_t result = *(__n128 *)(v20 + v30);
            v31[1].n128_u64[0] = *(void *)(v20 + v30 + 16);
            *uint64_t v31 = result;
            v30 += 24;
          }
          while (v20 + v30 != v25);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(a1, v22, v23, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v20, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((char *)v7, (char *)v7 + 24 * (a3 >> 1), (long long *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if (a1 != a2)
    {
      unint64_t v12 = &a1[1].n128_u32[2];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a1;
        do
        {
          uint64_t v15 = v12;
          result.n128_u32[0] = *v12;
          if (*(float *)v12 > v14->n128_f32[0])
          {
            __n128 v32 = *(__n128 *)((char *)v14 + 28);
            unsigned __int32 v33 = v14[2].n128_u32[3];
            uint64_t v16 = v13;
            while (1)
            {
              unint64_t v17 = (char *)a1 + v16;
              *(__n128 *)(v17 + 24) = *(__n128 *)((char *)a1 + v16);
              *((void *)v17 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v16);
              if (!v16) {
                break;
              }
              v16 -= 24;
              if (result.n128_f32[0] <= *((float *)v17 - 6))
              {
                uint64_t v18 = (uint64_t)&a1[1].n128_i64[1] + v16;
                goto LABEL_15;
              }
            }
            uint64_t v18 = (uint64_t)a1;
LABEL_15:
            *(_DWORD *)uint64_t v18 = result.n128_u32[0];
            uint64_t result = v32;
            *(__n128 *)(v18 + 4) = v32;
            *(_DWORD *)(v18 + 20) = v33;
          }
          unint64_t v12 = v15 + 6;
          v13 += 24;
          uint64_t v14 = (__n128 *)v15;
        }
        while (v15 + 6 != (unsigned __int32 *)a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v5 = (__n128 *)a4;
    unint64_t v8 = a1;
    if (a3 == 2)
    {
      unint64_t v9 = (__n128 *)((char *)a2 - 24);
      if (a2[-2].n128_f32[2] <= a1->n128_f32[0])
      {
        __n128 v19 = *a1;
        *(void *)(a4 + 16) = a1[1].n128_u64[0];
        *(__n128 *)a4 = v19;
        uint64_t result = *v9;
        unint64_t v11 = a2[-1].n128_u64[1];
      }
      else
      {
        __n128 v10 = *v9;
        *(void *)(a4 + 16) = a2[-1].n128_u64[1];
        *(__n128 *)a4 = v10;
        uint64_t result = *a1;
        unint64_t v11 = a1[1].n128_u64[0];
      }
      *(void *)(a4 + 40) = v11;
      *(__n128 *)(a4 + 24) = result;
    }
    else if (a3 == 1)
    {
      uint64_t result = *a1;
      *(void *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(a1, v20, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((char *)v8 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      unint64_t v21 = (__n128 *)((char *)v8 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if (v21->n128_f32[0] <= v8->n128_f32[0])
        {
          uint64_t result = *v8;
          v5[1].n128_u64[0] = v8[1].n128_u64[0];
          __n128 *v5 = result;
          unint64_t v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          uint64_t result = *v21;
          v5[1].n128_u64[0] = v21[1].n128_u64[0];
          __n128 *v5 = result;
          unint64_t v21 = (__n128 *)((char *)v21 + 24);
        }
        uint64_t v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            unint64_t v22 = 0;
            do
            {
              unint64_t v23 = (__n128 *)((char *)v5 + v22);
              uint64_t result = *(__n128 *)((char *)v21 + v22);
              v23[1].n128_u64[0] = v21[1].n128_u64[v22 / 8];
              __n128 *v23 = result;
              v22 += 24;
            }
            while ((__n128 *)((char *)v21 + v22) != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        unint64_t v24 = 0;
        do
        {
          uint64_t v25 = (__n128 *)((char *)v5 + v24);
          uint64_t result = *(__n128 *)((char *)v8 + v24);
          v25[1].n128_u64[0] = v8[1].n128_u64[v24 / 8];
          *uint64_t v25 = result;
          v24 += 24;
        }
        while ((__n128 *)((char *)v8 + v24) != v20);
      }
    }
    else if (a1 != a2)
    {
      uint64_t result = *a1;
      *(void *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
      unint64_t v12 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = a4;
        do
        {
          uint64_t v15 = v14;
          float v16 = *(float *)v14;
          v14 += 24;
          uint64_t v17 = v14;
          if (v12->n128_f32[0] > v16)
          {
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
            *(void *)(v14 + 16) = *(void *)(v15 + 16);
            uint64_t v17 = a4;
            if (v15 != a4)
            {
              uint64_t v18 = v13;
              while (1)
              {
                uint64_t v17 = a4 + v18;
                if (v12->n128_f32[0] <= *(float *)(a4 + v18 - 24)) {
                  break;
                }
                *(_OWORD *)uint64_t v17 = *(_OWORD *)(a4 + v18 - 24);
                *(void *)(v17 + 16) = *(void *)(a4 + v18 - 8);
                v18 -= 24;
                if (!v18)
                {
                  uint64_t v17 = a4;
                  break;
                }
              }
            }
          }
          uint64_t result = *v12;
          *(void *)(v17 + 16) = v12[1].n128_u64[0];
          *(__n128 *)uint64_t v17 = result;
          unint64_t v12 = (__n128 *)((char *)v12 + 24);
          v13 += 24;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(char *result, char *a2, long long *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    unint64_t v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (*(float *)a2 <= *(float *)&v11[v12])
      {
        v12 += 24;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v15 = -v13;
      uint64_t v61 = a3;
      __src = a6;
      uint64_t v60 = a7;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          float v55 = &v11[v12];
          uint64_t v64 = *(void *)&v11[v12 + 16];
          long long v63 = *(_OWORD *)&v11[v12];
          long long v56 = *(_OWORD *)a2;
          *((void *)v55 + 2) = *((void *)a2 + 2);
          *(_OWORD *)float v55 = v56;
          *(_OWORD *)a2 = v63;
          *((void *)a2 + 2) = v64;
          return result;
        }
        if (v13 > 0) {
          uint64_t v15 = 1 - v13;
        }
        uint64_t v25 = v15 >> 1;
        __n128 v19 = &v11[24 * (v15 >> 1) + v12];
        uint64_t v18 = (long long *)a2;
        if (a2 != (char *)a3)
        {
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - a2) >> 3);
          uint64_t v18 = (long long *)a2;
          do
          {
            unint64_t v27 = v26 >> 1;
            unint64_t v28 = (float *)v18 + 6 * (v26 >> 1);
            float v30 = *v28;
            int v29 = (long long *)(v28 + 6);
            v26 += ~(v26 >> 1);
            if (v30 > *(float *)v19) {
              uint64_t v18 = v29;
            }
            else {
              unint64_t v26 = v27;
            }
          }
          while (v26);
        }
        uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - a2) >> 3);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v16 = v9;
        }
        else {
          uint64_t v16 = v9 + 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = (long long *)&a2[24 * (v16 >> 1)];
        __n128 v19 = a2;
        if (a2 - v11 != v12)
        {
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11 - v12) >> 3);
          __n128 v19 = &v11[v12];
          do
          {
            unint64_t v21 = v20 >> 1;
            unint64_t v22 = (float *)&v19[24 * (v20 >> 1)];
            float v24 = *v22;
            unint64_t v23 = (char *)(v22 + 6);
            v20 += ~(v20 >> 1);
            if (*(float *)v18 > v24) {
              unint64_t v20 = v21;
            }
            else {
              __n128 v19 = v23;
            }
          }
          while (v20);
        }
        uint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v11 - v12) >> 3);
      }
      a4 = -v25 - v13;
      uint64_t v31 = v9 - v17;
      uint64_t v32 = v25;
      unsigned __int32 v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::LmScoreState *>,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(v19, (long long *)a2, v18);
      uint64_t v34 = v32;
      int v35 = v33;
      if (v34 + v17 >= v9 - (v34 + v17) - v13)
      {
        uint64_t v38 = v34;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(v33, v18, v61, a4, v31, __src, v60);
        a2 = v19;
        a7 = v60;
        uint64_t v31 = v17;
        a6 = __src;
        a4 = v38;
        a3 = v35;
        v11 += v12;
      }
      else
      {
        int v36 = v19;
        uint64_t v37 = v17;
        a6 = __src;
        a7 = v60;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(&v11[v12], v36, v33, v34, v37, __src, v60);
        unint64_t v11 = (char *)v35;
        a2 = (char *)v18;
        a3 = v61;
      }
      uint64_t v9 = v31;
      if (!v31) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v49 = 0;
        do
        {
          uint64_t v50 = &a6[v49];
          long long v51 = *(_OWORD *)&v11[v49];
          *((void *)v50 + 2) = *(void *)&v11[v49 + 16];
          *(_OWORD *)uint64_t v50 = v51;
          v49 += 24;
        }
        while (&v11[v49] != a2);
        if (v49)
        {
          uint64_t v52 = a6;
          while (a2 != (char *)a3)
          {
            if (*(float *)a2 <= *(float *)v52)
            {
              long long v54 = *(_OWORD *)v52;
              *((void *)v11 + 2) = *((void *)v52 + 2);
              *(_OWORD *)unint64_t v11 = v54;
              v52 += 24;
            }
            else
            {
              long long v53 = *(_OWORD *)a2;
              *((void *)v11 + 2) = *((void *)a2 + 2);
              *(_OWORD *)unint64_t v11 = v53;
              a2 += 24;
            }
            v11 += 24;
            if (&a6[v49] == v52) {
              return result;
            }
          }
          return (char *)memmove(v11, v52, a6 - v52 + v49);
        }
      }
    }
    else if (a3 != (long long *)a2)
    {
      uint64_t v39 = 0;
      do
      {
        float v40 = &a6[v39];
        long long v41 = *(_OWORD *)&a2[v39];
        *((void *)v40 + 2) = *(void *)&a2[v39 + 16];
        *(_OWORD *)float v40 = v41;
        v39 += 24;
      }
      while (&a2[v39] != (char *)a3);
      if (v39)
      {
        double v42 = (float *)&a6[v39];
        uint64_t v43 = (uint64_t)a3 - 24;
        while (a2 != v11)
        {
          float v44 = *(v42 - 6);
          float v45 = *((float *)a2 - 6);
          BOOL v46 = v44 <= v45;
          if (v44 <= v45) {
            int v47 = (char *)(v42 - 6);
          }
          else {
            int v47 = a2 - 24;
          }
          if (v44 > v45) {
            a2 -= 24;
          }
          long long v48 = *(_OWORD *)v47;
          if (v46) {
            v42 -= 6;
          }
          *(void *)(v43 + 16) = *((void *)v47 + 2);
          *(_OWORD *)uint64_t v43 = v48;
          v43 -= 24;
          if (v42 == (float *)a6) {
            return result;
          }
        }
        uint64_t v57 = 0;
        do
        {
          uint64_t v58 = v43 + v57 * 4;
          long long v59 = *(_OWORD *)&v42[v57 - 6];
          *(void *)(v58 + 16) = *(void *)&v42[v57 - 2];
          *(_OWORD *)uint64_t v58 = v59;
          v57 -= 6;
        }
        while (&v42[v57] != (float *)a6);
      }
    }
  }
  return result;
}

long long *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::LmScoreState *>,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(char *__src, long long *a2, long long *a3)
{
  BOOL v4 = a3;
  if (__src != (char *)a2)
  {
    if (a2 == a3)
    {
      return (long long *)__src;
    }
    else if (__src + 24 == (char *)a2)
    {
      long long v9 = *(_OWORD *)__src;
      uint64_t v11 = *((void *)__src + 2);
      int64_t v6 = (char *)a3 - (char *)a2;
      memmove(__src, a2, (char *)a3 - (char *)a2);
      BOOL v4 = (long long *)&__src[v6];
      long long *v4 = v9;
      *((void *)v4 + 2) = v11;
    }
    else if ((long long *)((char *)a2 + 24) == a3)
    {
      BOOL v4 = (long long *)(__src + 24);
      long long v10 = *(long long *)((char *)a3 - 24);
      uint64_t v12 = *((void *)a3 - 1);
      size_t v7 = (char *)a3 - 24 - __src;
      if ((char *)a3 - 24 != __src) {
        memmove(__src + 24, __src, v7);
      }
      *(_OWORD *)__src = v10;
      *((void *)__src + 2) = v12;
    }
    else
    {
      return std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((long long *)__src, a2, a3);
    }
  }
  return v4;
}

long long *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(long long *a1, long long *a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if (v3 == 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3))
  {
    if (a1 != a2 && a2 != a3)
    {
      BOOL v4 = (long long *)((char *)a1 + 24);
      uint64_t v5 = (long long *)((char *)a2 + 24);
      do
      {
        uint64_t v6 = *((void *)v4 - 1);
        long long v7 = *(long long *)((char *)v4 - 24);
        uint64_t v8 = *((void *)v5 - 1);
        *(long long *)((char *)v4 - 24) = *(long long *)((char *)v5 - 24);
        *((void *)v4 - 1) = v8;
        *(long long *)((char *)v5 - 24) = v7;
        *((void *)v5 - 1) = v6;
        if (v4 == a2) {
          break;
        }
        BOOL v4 = (long long *)((char *)v4 + 24);
        BOOL v9 = v5 == a3;
        uint64_t v5 = (long long *)((char *)v5 + 24);
      }
      while (!v9);
    }
  }
  else
  {
    uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      uint64_t v12 = v11;
      unint64_t v11 = v10;
      uint64_t v10 = v12 % v10;
    }
    while (v10);
    if (v11)
    {
      uint64_t v13 = (long long *)((char *)a1 + 24 * v11);
      do
      {
        long long v14 = *(long long *)((char *)v13 - 24);
        uint64_t v15 = *((void *)v13 - 1);
        uint64_t v13 = (long long *)((char *)v13 - 24);
        long long v26 = v14;
        uint64_t v27 = v15;
        uint64_t v16 = (long long *)((char *)v13 + 8 * (((char *)a2 - (char *)a1) >> 3));
        uint64_t v17 = v13;
        do
        {
          uint64_t v18 = v16;
          long long v19 = *v16;
          *((void *)v17 + 2) = *((void *)v16 + 2);
          long long *v17 = v19;
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)v16) >> 3);
          uint64_t v16 = (long long *)((char *)v16 + 8 * (((char *)a2 - (char *)a1) >> 3));
          BOOL v21 = __OFSUB__(v3, v20);
          uint64_t v23 = v3 - v20;
          char v22 = (v23 < 0) ^ v21;
          float v24 = (long long *)((char *)a1 + 24 * v23);
          if (!v22) {
            uint64_t v16 = v24;
          }
          uint64_t v17 = v18;
        }
        while (v16 != v13);
        *((void *)v18 + 2) = v27;
        long long *v18 = v26;
      }
      while (v13 != a1);
    }
    return (long long *)((char *)a1 + 8 * (((char *)a3 - (char *)a2) >> 3));
  }
  return a2;
}

uint64_t std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__emplace_back_slow_path<int const&>(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  long long v14 = (kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *)&v10[48 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[48 * v9];
  kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb::Cookiecrumb(v14, *a2);
  uint64_t v15 = (kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *)((char *)v14 + 48);
  std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B237BF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb::Cookiecrumb(kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *this, int a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  uint64_t v3 = (char *)this + 24;
  *(_OWORD *)this = 0u;
  std::vector<int>::size_type v4 = a2;
  std::vector<float>::vector(&v8, a2);
  unint64_t v5 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v5;
    operator delete(v5);
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  *(std::vector<int> *)this = v8;
  std::vector<int>::vector(&v8, v4);
  uint64_t v6 = *(void **)v3;
  if (*(void *)v3)
  {
    *((void *)this + 4) = v6;
    operator delete(v6);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
  }
  *((std::vector<int> *)this + 1) = v8;
  return this;
}

void sub_1B237BFEC(_Unwind_Exception *exception_object)
{
  std::vector<int>::size_type v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(void *)(v7 - 32) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 8) = *(void *)(a3 + 40);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    if ((int)a2 < 128 || a2 - 160 < 0x60)
    {
      char v9 = a2;
      unint64_t v7 = *(void *)(a3 + 16);
      long long v8 = &v9;
    }
    else
    {
      uint64_t v5 = 0;
      while (s_pszCodePage1252ToUnicode[v5 + 1] != a2)
      {
        v5 += 2;
        if (v5 == 66) {
          return 1;
        }
      }
      char v10 = s_pszCodePage1252ToUnicode[v5];
      unint64_t v7 = *(void *)(a3 + 16);
      long long v8 = &v10;
    }
    goto LABEL_16;
  }
  if ((int)a2 <= 127)
  {
    char v11 = a2;
    unint64_t v7 = *(void *)(a3 + 16);
    long long v8 = &v11;
LABEL_16:
    TBuffer<char>::insert(a3, v7, v8, 1uLL);
    return 0;
  }
  if (a2 <= 0x7FF)
  {
    char v12 = (a2 >> 6) | 0xC0;
    TBuffer<char>::insert(a3, *(void *)(a3 + 16), &v12, 1uLL);
    char v13 = a2 & 0x3F | 0x80;
    unint64_t v7 = *(void *)(a3 + 16);
    long long v8 = &v13;
    goto LABEL_16;
  }
  if (!HIWORD(a2))
  {
    char v14 = (a2 >> 12) | 0xE0;
    TBuffer<char>::insert(a3, *(void *)(a3 + 16), &v14, 1uLL);
    char v15 = (a2 >> 6) & 0x3F | 0x80;
    TBuffer<char>::insert(a3, *(void *)(a3 + 16), &v15, 1uLL);
    char v16 = a2 & 0x3F | 0x80;
    unint64_t v7 = *(void *)(a3 + 16);
    long long v8 = &v16;
    goto LABEL_16;
  }
  return 0;
}

BOOL TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  do
  {
    unsigned int v6 = *a2;
    if (!*a2) {
      break;
    }
    ++a2;
  }
  while (!TLocaleInfo::unicodeToMultiByte(a1, v6, a3));
  return v6 != 0;
}

uint64_t TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  char v10 = a3;
  unint64_t v11 = a4;
  unint64_t v12 = 0;
  char v14 = 0;
  while (1)
  {
    unsigned int v6 = *a2;
    if (!*a2) {
      break;
    }
    ++a2;
    if (TLocaleInfo::unicodeToMultiByte(a1, v6, (uint64_t)&v10))
    {
      uint64_t v7 = 0xFFFFFFFFLL;
      goto LABEL_12;
    }
  }
  if (v12 >= v11)
  {
    if (v14)
    {
      char v9 = 0;
      TBuffer<char>::insert((uint64_t)&v10, v12--, &v9, 1uLL);
    }
    else if (v11)
    {
      *((unsigned char *)v10 + v11 - 1) = 0;
    }
  }
  else
  {
    *((unsigned char *)v10 + v12) = 0;
  }
  uint64_t v7 = (v12 + 1);
LABEL_12:
  if (v14 && v10 != &v13 && v10) {
    MEMORY[0x1B3EA8630]();
  }
  return v7;
}

void sub_1B237C478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a45 && a10 != &a13)
  {
    if (a10) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned int v3 = *a2;
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    if ((char)v3 <= -97)
    {
      unsigned int v3 = s_pszCodePage1252ToUnicode[2 * v3 - 255];
      if (v3 == 0xFFFF) {
        uint64_t result = 0xFFFFFFFFLL;
      }
      else {
        uint64_t result = 1;
      }
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((v3 & 0x80) == 0)
  {
LABEL_7:
    uint64_t result = 1;
LABEL_8:
    *a3 = v3;
    return result;
  }
  if ((v3 & 0xE0) == 0xC0)
  {
    int v5 = v3 & 0x1F;
    *a3 = v5;
    if (v3 >= 0xC2)
    {
      uint64_t result = 2;
      goto LABEL_19;
    }
LABEL_16:
    uint64_t result = 0xFFFFFFFFLL;
    unsigned int v3 = 0xFFFF;
    goto LABEL_8;
  }
  if ((v3 & 0xF0) != 0xE0) {
    goto LABEL_16;
  }
  int v5 = v3 & 0xF;
  *a3 = v5;
  if (v3 == 237)
  {
    if ((a2[1] & 0xE0) != 0x80) {
      goto LABEL_16;
    }
  }
  else if (v3 == 224 && (a2[1] & 0xE0) != 0xA0)
  {
    goto LABEL_16;
  }
  uint64_t result = 3;
LABEL_19:
  uint64_t v6 = result - 1;
  uint64_t v7 = (char *)(a2 + 1);
  while (1)
  {
    char v8 = *v7++;
    int v9 = v8 & 0xC0;
    int v10 = v8 & 0x3F | (v5 << 6);
    int v11 = v9 == 128 ? v10 : 0xFFFF;
    *a3 = v11;
    if (v9 != 128) {
      break;
    }
    int v5 = v10;
    if (!--v6) {
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!*a2) {
    return 0;
  }
  std::vector<int>::size_type v4 = a2;
  while (1)
  {
    int v9 = 0;
    int v6 = TLocaleInfo::multiByteToUnicode(a1, v4, &v9);
    if (v6 == -1) {
      break;
    }
    int v7 = v6;
    int v10 = v9;
    TBuffer<wchar_t>::insert(a3, *(void *)(a3 + 16), &v10, 1uLL);
    v4 += v7;
    if (!*v4) {
      return 0;
    }
  }
  return 1;
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a3)
  {
    int v6 = a2;
    if (*a2)
    {
      unint64_t v9 = 0;
      while (1)
      {
        int v14 = 0;
        int v10 = TLocaleInfo::multiByteToUnicode(a1, v6, &v14);
        v9 += v10;
        if (v10 == -1 || v9 > a3) {
          break;
        }
        uint64_t v12 = v10;
        int v15 = v14;
        TBuffer<wchar_t>::insert(a4, *(void *)(a4 + 16), &v15, 1uLL);
        v6 += v12;
        if (v9 >= a3 || *v6 == 0) {
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_1B237C8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B237CA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B237CB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B237CEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c62_ZTSNSt3__110shared_ptrIN6quasar25SilencePosteriorGeneratorEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c62_ZTSNSt3__110shared_ptrIN6quasar25SilencePosteriorGeneratorEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_1B237D024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B237D0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EARCaesuraSilencePosteriorGenerator;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGenerator,std::allocator<quasar::SilencePosteriorGenerator>,std::string,unsigned long &,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__shared_ptr_emplace[abi:ne180100]<std::string,unsigned long &,std::allocator<quasar::SilencePosteriorGenerator>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B237D200(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__shared_ptr_emplace[abi:ne180100]<std::string,unsigned long &,std::allocator<quasar::SilencePosteriorGenerator>,0>(void *a1, uint64_t a2, unsigned int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A617C0;
  quasar::SilencePosteriorGenerator::SilencePosteriorGenerator(a1 + 3, a2, *a3, 0, 120);
  return a1;
}

void sub_1B237D268(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *quasar::ptt::operator<<(void *a1)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", (", 3);
  unsigned int v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::vector<int>::size_type v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"))", 2);
  return a1;
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"PartialPath(", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"prevId=", 7);
  unsigned int v3 = (void *)std::ostream::operator<<();
  std::vector<int>::size_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"observation=", 12);
  int v5 = (void *)std::ostream::operator<<();
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ilabel=", 7);
  int v7 = (void *)std::ostream::operator<<();
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"olabel=", 7);
  unint64_t v9 = (void *)std::ostream::operator<<();
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"totalCost=", 10);
  int v11 = (void *)std::ostream::operator<<();
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"totalAcousticCost=", 18);
  uint64_t v13 = (void *)std::ostream::operator<<();
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nextState=", 10);
  char v16 = quasar::ptt::operator<<(v15);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  return a1;
}

void quasar::ptt::UnigramPhoneticConfusion::loadFromPhonomapFst(quasar::ptt::UnigramPhoneticConfusion *this, const quasar::filesystem::Path *a2, float a3)
{
  kaldi::quasar::Vocab::OOvWord(this, (std::string *)__p);
  std::vector<int>::size_type v4 = (void *)fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read((uint64_t)__p);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  if ((*(uint64_t (**)(void *))(*v4 + 112))(v4))
  {
    if ((*(uint64_t (**)(void *))(*v4 + 120))(v4))
    {
      uint64_t v5 = (*(uint64_t (**)(void *))(*v4 + 112))(v4);
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 120))(v5);
      uint64_t v7 = (*(uint64_t (**)(void *))(*v4 + 120))(v4);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7);
      kaldi::Matrix<float>::Matrix((uint64_t)&v23, v6, v8, 0, 0);
      uint64_t v9 = *(void *)(v4[1] + 64);
      unint64_t v10 = *(void *)(v4[1] + 72) - v9;
      if ((int)(v10 >> 3) >= 1)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v23;
        int v13 = v24;
        uint64_t v14 = (v10 >> 3);
        do
        {
          uint64_t v15 = *(void *)(v9 + 8 * v11);
          uint64_t v17 = *(void *)(v15 + 24);
          uint64_t v16 = *(void *)(v15 + 32);
          uint64_t v19 = v16 - v17;
          BOOL v18 = v16 == v17;
          if (v16 == v17) {
            uint64_t v20 = 0;
          }
          else {
            uint64_t v20 = v17;
          }
          if (!v18)
          {
            unint64_t v21 = v19 >> 4;
            if (v21 <= 1) {
              unint64_t v21 = 1;
            }
            char v22 = (float *)(v20 + 8);
            do
            {
              *(float *)&v12[v13 * *((_DWORD *)v22 - 2) + *((int *)v22 - 1)] = *v22 * a3;
              v22 += 4;
              --v21;
            }
            while (v21);
          }
          ++v11;
        }
        while (v11 != v14);
      }
      _DWORD *v23 = 0;
      operator new();
    }
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v26 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Phonomap FST does not have output symbols attached.", 51);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v26 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Phonomap FST does not have input symbols attached.", 50);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B237D618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::UnigramPhoneticConfusion::UnigramPhoneticConfusion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A58D20;
  uint64_t v3 = a1 + 8;
  kaldi::Matrix<float>::Matrix(a1 + 8, a2);
  for (unint64_t i = 0; i < (int)kaldi::MatrixBase<float>::NumRows(v3); ++i)
  {
    uint64_t v5 = 0;
    for (unint64_t j = 0; j < (int)kaldi::MatrixBase<float>::NumCols(v3); ++j)
    {
      if (i | j)
      {
        float v7 = *(float *)(*(void *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * (int)i + (v5 >> 30));
        if (v7 == 0.0)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v13 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Confusion matrix contains zero weight at (", 42);
          uint64_t v9 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
          unint64_t v10 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)").", 2);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v13);
        }
        if (v7 < 0.0)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v13 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Confusion matrix contains negative weight at (", 46);
          uint64_t v11 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          uint64_t v12 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)").", 2);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v13);
        }
      }
      v5 += 0x100000000;
    }
  }
  return a1;
}

void sub_1B237D8AC(_Unwind_Exception *a1)
{
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::UnigramPhoneticConfusion::start(quasar::ptt::UnigramPhoneticConfusion *this)
{
  return 0;
}

unint64_t quasar::ptt::UnigramPhoneticConfusion::score(quasar::ptt::UnigramPhoneticConfusion *this, int a2, unsigned int a3, uint64_t a4)
{
  return a3 | (unint64_t)(a4 << 32);
}

BOOL quasar::ptt::UnigramPhoneticConfusion::write(quasar::ptt::UnigramPhoneticConfusion *this, const quasar::filesystem::Path *a2)
{
  v8[19] = *MEMORY[0x1E4F143B8];
  kaldi::quasar::Vocab::OOvWord(a2, &__p);
  std::ofstream::basic_ofstream(&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::MatrixBase<float>::Write((_DWORD *)this + 2, &v6, 0, 0);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v7[*(void *)(v6 - 24) - 8], *(_DWORD *)&v7[*(void *)(v6 - 24) + 24] | 4);
  }
  BOOL v3 = *(_DWORD *)&v7[*(void *)(v6 - 24) + 24] == 0;
  uint64_t v6 = *MEMORY[0x1E4FBA400];
  *(void *)&v7[*(void *)(v6 - 24) - 8] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1B3EA7CF0](v7);
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](v8);
  return v3;
}

void sub_1B237DA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ptt::UnigramPhoneticConfusion::write(uint64_t a1, void *a2)
{
  return 1;
}

void *quasar::ptt::operator<<(void *a1, uint64_t a2)
{
  std::vector<int>::size_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"DynamicGraph::Arc(", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ilabel=", 7);
  uint64_t v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"olabel=", 7);
  float v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"weight=", 7);
  float v10 = *(float *)(a2 + 8);
  if (v10 == INFINITY)
  {
    uint64_t v11 = "Infinity";
    uint64_t v12 = 8;
  }
  else
  {
    if (v10 != -INFINITY)
    {
      long long v13 = (void *)std::ostream::operator<<();
      goto LABEL_6;
    }
    uint64_t v11 = "-Infinity";
    uint64_t v12 = 9;
  }
  long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
LABEL_6:
  long long v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nextstate=(", 11);
  long long v15 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  long long v16 = (void *)std::ostream::operator<<();
  long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"), ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  return a1;
}

double quasar::ptt::Decoder::Params::Params(quasar::ptt::Decoder::Params *this)
{
  *(_DWORD *)this = 1097859072;
  double result = NAN;
  *(void *)((char *)this + 4) = -1;
  *(void *)((char *)this + 12) = 0x3F800000FFFFFFFFLL;
  *((_WORD *)this + 10) = 0;
  *((unsigned char *)this + 22) = 0;
  *((void *)this + 3) = 0x4000000000020000;
  *((_DWORD *)this + 8) = 6291456;
  return result;
}

void quasar::ptt::Decoder::Params::registerParams(quasar::ptt::Decoder::Params *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "process-emitting-max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum size of frontier during ProcessedEmitting");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 4, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "process-non-emitting-initial-queue-max-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum size of queue used during ProcessNonEmitting (if set, should also set option for expansion queue)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 8, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "process-non-emitting-expansion-queue-max-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum size of queue used during ProcessNonEmitting (if set, should also set option for initial queue)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 12, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lg-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scale factor applied to LG log-probabilities");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 16, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lg-fst-is-weight-sorted");
  std::string::basic_string[abi:ne180100]<0>(__p, "If set, the LG FST arcs are expected to be sorted according to their weight");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 20, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lg-fst-ilabel-epsion-arcs-first");
  std::string::basic_string[abi:ne180100]<0>(__p, "If set, arcs with ilabel epsilons are first; only works when LG arcs are weight-sorted");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 21, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "validate-lg-fst");
  std::string::basic_string[abi:ne180100]<0>(__p, "If set, the decoder will verify the structure of the LG FST upon intialization");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 22, (uint64_t)__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "big-g-cache-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Size of cache to use for the Big G DeterministicFST.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "hash-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls behavior of the underlying hash list");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 28, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder max total tokens");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 32, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B237E150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ptt::Decoder::create(_DWORD *a1, uint64_t a2, const void *a3, uint64_t *a4, uint64_t *a5)
{
  std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(a4, a5, &v12);
  long long v29 = v12;
  if ((int)a1[6] >= 1)
  {
    std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&,void>((uint64_t *)&v29, a1 + 6, &v12);
    long long v7 = v12;
    long long v12 = 0uLL;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)&v29 + 1);
    long long v29 = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (*((void *)&v12 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
    }
  }
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v29 + 1);
    if (*((void *)&v29 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    int v11 = a1[2];
    int v10 = a1[3];
    if (v11 <= 0 && v10 < 1) {
      operator new();
    }
    if (v11 > 0)
    {
      if (v10 > 0) {
        operator new();
      }
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"process_non_emitting_expansion_queue_max_size be configured.", 60);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v12);
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"process_non_emitting_initial_queue_max_size should be configured.", 65);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v12);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"LG FST should be squeezed_quantized. This is due to an technical limitation.", 76);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v12);
}

void sub_1B237E51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~DynamicGraph((uint64_t)&a9);
  int v11 = *(std::__shared_weak_count **)(v9 - 72);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~DynamicGraph(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x10E0C4059286A48);
  }
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x90uLL);
  double result = std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B237E63C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E3B0;
  std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B237E6B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::vector<int>::size_type v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  long long v15 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v12 = *a4;
  long long v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v11 = _D0;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(a2, &v14, &v12, &v11);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1B237E74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  double result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B237E7C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(void *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5E340;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B237E834(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&>(uint64_t a1, void *a2, uint64_t *a3, int *a4)
{
  std::vector<int>::size_type v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v5, *a4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1B237E8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::DecoderImpl(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F0A1CA98;
  long long v6 = *a2;
  long long v7 = a2[1];
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 48) = &unk_1F0A58D20;
  kaldi::Matrix<float>::Matrix(a1 + 56, a3 + 8);
  *(void *)(a1 + 96) = *(void *)a4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a4 + 8);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  quasar::ptt::DynamicArrayPartialPathStorage<quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>>::DynamicArrayPartialPathStorage((unint64_t *)(a1 + 128), *(int *)(a1 + 40));
}

void sub_1B237EA5C(_Unwind_Exception *a1)
{
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier(v7);
  quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::~TopKSet(v6);
  quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::~TopKSet(v5);
  uint64_t v10 = *(void *)(v4 + 136);
  if (v10) {
    MEMORY[0x1B3EA8630](v10, 0x1000C808AA14F5FLL);
  }
  quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~DynamicGraph(v3);
  *uint64_t v8 = v1;
  kaldi::Matrix<float>::~Matrix(v2);
  _Unwind_Resume(a1);
}

void *quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 20;
  if (a2) {
    uint64_t v5 = 16;
  }
  uint64_t v6 = *(int *)(a1 + v5);
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v7 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    uint64_t v8 = (void *)fst::cerr(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Maximum queue size should be specified when using weight-sorted-set implementation", 82);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  v14[0] = &unk_1F0A1D140;
  v14[1] = a1;
  uint64_t v14[3] = v14;
  std::__function::__value_func<float ()(std::pair<int,std::pair<int,int>>)>::__value_func[abi:ne180100](a3, (uint64_t)v14);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  uint64_t v9 = a3 + 48;
  *(void *)(v9 - 16) = v6;
  *(void *)(v9 - 8) = v9;
  return std::__function::__value_func<float ()(std::pair<int,std::pair<int,int>>)>::~__value_func[abi:ne180100](v14);
}

void sub_1B237EBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::~TopKSet(uint64_t a1)
{
  std::__tree<int>::destroy(a1 + 40, *(void **)(a1 + 48));
  return std::__function::__value_func<float ()(std::pair<int,std::pair<int,int>>)>::~__value_func[abi:ne180100]((void *)a1);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(uint64_t a1)
{
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::decode(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 304);
  if (v9 != -1)
  {
    uint64_t v10 = *(void *)(a1 + 320);
    do
    {
      uint64_t v11 = (uint64_t *)(v10 + 16 * v9);
      v11[1] = 0;
      uint64_t v9 = *v11;
    }
    while (v9 != -1);
  }
  uint64_t v12 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = -1;
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 344);
    do
    {
      uint64_t v14 = v12;
      uint64_t v12 = *(void *)(v12 + 16);
      *(void *)(v14 + 16) = v13;
      uint64_t v13 = v14;
    }
    while (v12);
    *(void *)(a1 + 344) = v14;
  }
  long long v16 = (void *)(a1 + 200);
  long long v15 = *(void **)(a1 + 200);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2139095040;
  std::__tree<int>::destroy(a1 + 192, v15);
  *(void *)(a1 + 192) = a1 + 200;
  void *v16 = 0;
  *(void *)(a1 + 208) = 0;
  std::__tree<int>::destroy(a1 + 256, *(void **)(a1 + 264));
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  *(void *)(a1 + 144) = 0;
  unsigned int v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 24))(*(void *)(a1 + 96));
  unsigned int v18 = (***(uint64_t (****)(void))(a1 + 104))();
  LODWORD(v41) = 0;
  *(void *)((char *)&v41 + 4) = v17 | ((unint64_t)v18 << 32);
  long long v19 = *(void **)(a1 + 280);
  uint64_t v20 = v19[2];
  if ((unint64_t)(v20 + 1) >= *v19)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::ptt::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
  long long v38 = a4;
  uint64_t v21 = v41;
  void v19[2] = v20 + 1;
  uint64_t v22 = v19[1] + 36 * (int)v20;
  *(_DWORD *)uint64_t v22 = v20;
  *(void *)(v22 + 12) = 0;
  *(void *)(v22 + 4) = 0;
  *(_DWORD *)(v22 + 20) = 0;
  *(void *)(v22 + 24) = v21;
  *(_DWORD *)(v22 + 32) = v18;
  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert((uint64_t *)(a1 + 296), v21, v18, v20);
  ++*(void *)(a1 + 376);
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(a1, *(float *)(a1 + 8));
  if (quasar::gLogLevel >= 6)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Frontier after ProcessNonemitting size=", 39);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v41);
  }
  uint64_t v23 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v24 = 0;
    int v25 = quasar::gLogLevel;
    do
    {
      if (v25 >= 6)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Processing frame ", 17);
        long long v26 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" with observation ", 18);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v41);
        uint64_t v23 = *a2;
      }
      float v27 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmitting(a1, *(_DWORD *)(v23 + 4 * v24));
      if (quasar::gLogLevel >= 6)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Frontier after ProcessEmitting size=", 36);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v41);
      }
      if (a5)
      {
        long long v41 = 0uLL;
        *(void *)&long long v42 = 0;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t *)&v41, 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "AfterProcessEmitting");
        std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::operator()(a5, v24);
        if (v40 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = &v41;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(a1, v27);
      if (quasar::gLogLevel >= 6)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Frontier after ProcessNonemitting size=", 39);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v41);
      }
      if (a5)
      {
        long long v41 = 0uLL;
        *(void *)&long long v42 = 0;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t *)&v41, 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "AfterProcessNonemitting");
        std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::operator()(a5, v24);
        if (v40 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = &v41;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      int v25 = quasar::gLogLevel;
      if (quasar::gLogLevel >= 6)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"NumPaths=", 9);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v41);
        int v25 = quasar::gLogLevel;
      }
      ++v24;
      uint64_t v23 = *a2;
    }
    while (v24 != (a2[1] - *a2) >> 2);
  }
  if (a5)
  {
    long long v41 = 0uLL;
    *(void *)&long long v42 = 0;
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 1, (uint64_t *)&v41, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "AfterDecoding");
    std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::operator()(a5, -1);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = &v41;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (v38)
  {
    uint64_t v29 = *v38;
    uint64_t v28 = v38[1];
    if (v28 != *v38)
    {
      uint64_t v30 = v28 - 16;
      long long v31 = (void (***)(void))(v28 - 16);
      long long v32 = (void (***)(void))(v28 - 16);
      do
      {
        long long v33 = *v32;
        v32 -= 2;
        (*v33)(v31);
        v30 -= 16;
        BOOL v34 = v31 == (void (***)(void))v29;
        long long v31 = v32;
      }
      while (!v34);
    }
    v38[1] = v29;
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, a3, 1, v38, 0);
  }
  return 1;
}

void sub_1B237F2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void sub_1B237F320(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::string __p = &a18;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (a2 == 1)
  {
    int v25 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&a18, "INFO");
    long long v26 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&a18);
    float v27 = (void *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Max tokens ", 11);
    uint64_t v28 = (void *)std::ostream::operator<<();
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" exceeded - ", 12);
    uint64_t v30 = (const char *)(*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
    size_t v31 = strlen(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
    if (a23 < 0) {
      operator delete(a18);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B237F25CLL);
  }
  JUMPOUT(0x1B237F300);
}

void sub_1B237F374(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2 == 1)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    uint64_t v21 = fst::LogMessage::LogMessage((fst *)&a12, (uint64_t)&__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Max tokens ", 11);
    uint64_t v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" exceeded - ", 12);
    int v25 = (const char *)(*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
    size_t v26 = strlen(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
    if (a20 < 0) {
      operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B237F25CLL);
  }
  JUMPOUT(0x1B237F300);
}

void sub_1B237F380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  JUMPOUT(0x1B237F390);
}

void sub_1B237F454(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B237F300);
}

void quasar::ptt::DynamicArrayPartialPathStorage<quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>>::DynamicArrayPartialPathStorage(unint64_t *a1, unint64_t a2)
{
  *a1 = a2;
  is_mul_ok(a2, 0x24uLL);
  operator new[]();
}

void std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::~__func()
{
}

void *std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F0A1D140;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1D140;
  a2[1] = v2;
  return result;
}

float std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<float,false>::__call[abi:ne180100]<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1} &,std::pair<int,std::pair<int,int>>>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::target_type()
{
}

float std::__invoke_void_return_wrapper<float,false>::__call[abi:ne180100]<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1} &,std::pair<int,std::pair<int,int>>>(uint64_t *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *a1;
  uint64_t v4 = HIDWORD(*(void *)a2);
  int v5 = 73244475 * (*(void *)a2 ^ ((int)*(void *)a2 >> 16));
  unint64_t v6 = ((((73244475 * (v5 ^ (v5 >> 16))) ^ ((73244475 * (v5 ^ (v5 >> 16))) >> 16)) - 1640531527) ^ 3u) + 192;
  int v7 = 73244475 * ((*(uint64_t *)a2 >> 48) ^ v4);
  unint64_t v8 = (((73244475 * (v7 ^ (v7 >> 16))) ^ ((73244475 * (v7 ^ (v7 >> 16))) >> 16))
      - 1640531527
      + (v6 << 6)
      + (v6 >> 2)) ^ v6;
  int v9 = 73244475 * ((73244475 * (v2 ^ (v2 >> 16))) ^ ((73244475 * (v2 ^ (v2 >> 16))) >> 16));
  unint64_t v10 = ((v9 ^ (v9 >> 16)) - 1640531527 + (v8 << 6) + (v8 >> 2)) ^ v8;
  uint64_t v11 = *(void *)(*a1 + 320);
  uint64_t v12 = *(void *)(v11 + 16 * (v10 % *(void *)(*a1 + 312)));
  if (v12 == -1)
  {
    uint64_t v14 = (_DWORD **)(v3 + 296);
    goto LABEL_5;
  }
  uint64_t v13 = *(_DWORD **)(v11 + 16 * v12 + 8);
  do
  {
    uint64_t v14 = (_DWORD **)(v13 + 4);
LABEL_5:
    uint64_t v13 = *v14;
  }
  while (*v13 != *(void *)a2 || v13[1] != v4 || v13[2] != v2);
  return *(float *)(*(void *)(v3 + 136) + 36 * (int)v13[3] + 16);
}

uint64_t std::__function::__value_func<float ()(std::pair<int,std::pair<int,int>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<float ()(std::pair<int,std::pair<int,int>>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Frontier(uint64_t a1, uint64_t a2, float a3)
{
  *(void *)a1 = a2;
  *(float *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1B2565910;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, 0x3E8uLL);
  return a1;
}

void sub_1B237F864(_Unwind_Exception *a1)
{
  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::~HashList(v1);
  _Unwind_Resume(a1);
}

void *kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::~HashList(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      ++v3;
      uint64_t v2 = *(void *)(v2 + 16);
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (void *)a1[7];
  int v5 = (unsigned char *)a1[8];
  if (v5 == (unsigned char *)v4)
  {
    uint64_t v7 = 0;
    uint64_t v4 = (void *)a1[8];
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1B3EA8630](v4[v6], 0x1020C803ED2C137);
        uint64_t v4 = (void *)a1[7];
        int v5 = (unsigned char *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (unsigned char *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    unint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    int v9 = (void *)std::ostream::operator<<();
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v4 = (void *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t quasar::ptt::IsLGGraphValid<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(uint64_t a1, int a2)
{
  int v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v17);
  while (v17)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17)) {
      goto LABEL_25;
    }
    if (!v17) {
      goto LABEL_7;
    }
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
LABEL_8:
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator((uint64_t)v12, a1, v5);
    unsigned __int8 v6 = 0;
    float v7 = -INFINITY;
    while (v16 < v15)
    {
      if (!a2) {
        goto LABEL_13;
      }
      int v8 = v13;
      if (((v13 == 0) & v6) == 1)
      {
        if (quasar::gLogLevel >= 2)
        {
          memset(v11, 0, sizeof(v11));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Observed epsilon arc after observing non-epsilon arc.", 53);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v11);
        }
LABEL_21:
        uint64_t v9 = 0;
        goto LABEL_22;
      }
      if (v13)
      {
LABEL_13:
        v4.n128_f32[0] = v14;
        if (v14 < v7) {
          goto LABEL_21;
        }
        int v8 = v13;
        float v7 = v14;
      }
      v6 |= v8 != 0;
      ++v16;
      v4.n128_f32[0] = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc((uint64_t)v12);
    }
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    else {
      ++v19;
    }
  }
  if (v19 < v18)
  {
LABEL_7:
    int v5 = v19;
    goto LABEL_8;
  }
LABEL_25:
  uint64_t v9 = 1;
LABEL_22:
  if (v17) {
    (*(void (**)(uint64_t, __n128))(*(void *)v17 + 8))(v17, v4);
  }
  return v9;
}

void sub_1B237FC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  uint64_t v11 = *(void *)(v9 - 72);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 != -1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    do
    {
      int v5 = (uint64_t *)(v4 + 16 * v3);
      v5[1] = 0;
      uint64_t v3 = *v5;
    }
    while (v3 != -1);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    do
    {
      uint64_t v8 = v6;
      uint64_t v6 = *(void *)(v6 + 16);
      *(void *)(v8 + 16) = v7;
      uint64_t v7 = v8;
    }
    while (v6);
    *(void *)(a1 + 64) = v8;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::~HashList(v2);
  return a1;
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A1CA98;
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier(a1 + 280);
  std::__tree<int>::destroy(a1 + 256, *(void **)(a1 + 264));
  std::__function::__value_func<float ()(std::pair<int,std::pair<int,int>>)>::~__value_func[abi:ne180100]((void *)(a1 + 216));
  std::__tree<int>::destroy(a1 + 192, *(void **)(a1 + 200));
  std::__function::__value_func<float ()(std::pair<int,std::pair<int,int>>)>::~__value_func[abi:ne180100]((void *)(a1 + 152));
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C808AA14F5FLL);
  }
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x10E0C4059286A48);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 112);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)(a1 + 48) = &unk_1F0A58D20;
  kaldi::Matrix<float>::~Matrix(a1 + 56);
  return a1;
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(uint64_t a1, float a2)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Process non-emitting with cutoff=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v60);
  }
  unint64_t v6 = *(void *)(a1 + 296);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v3 = 36;
    do
    {
      if (*(float *)(*(void *)(a1 + 136) + 36 * *(int *)(v6 + 12) + 16) <= a2)
      {
        ++v7;
        unint64_t v2 = v2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v6 + 8);
        quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::push_back((void *)(a1 + 152), *(void *)v6, v2);
      }
      unint64_t v6 = *(void *)(v6 + 16);
    }
    while (v6);
  }
  if (quasar::gLogLevel > 5)
  {
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Process non-emitting considered ", 32);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" initial states.", 16);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v60);
  }
  if (*(void *)(a1 + 208))
  {
    uint64_t v9 = (uint64_t **)(a1 + 192);
    uint64_t v10 = *(void *)(a1 + 192);
  }
  else
  {
    if (!*(void *)(a1 + 272))
    {
      int v12 = -1;
      unint64_t v11 = -1;
      goto LABEL_15;
    }
    uint64_t v9 = (uint64_t **)(a1 + 256);
    uint64_t v10 = *(void *)(a1 + 256);
  }
  unint64_t v11 = *(void *)(v10 + 32);
  int v12 = *(_DWORD *)(v10 + 40);
  std::__tree<std::string>::__remove_node_pointer(v9, (uint64_t *)v10);
  operator delete((void *)v10);
LABEL_15:
  uint64_t v58 = v11;
  unint64_t v13 = HIDWORD(v11);
  while (1)
  {
    int v59 = v12;
    if (v11 == -1 && v13 == -1 && v12 == -1) {
      break;
    }
    uint64_t v14 = v58;
    int v15 = 73244475 * ((73244475 * (v58 ^ ((int)v58 >> 16))) ^ ((int)(73244475 * (v58 ^ ((int)v58 >> 16))) >> 16));
    unint64_t v16 = (((v15 ^ (v15 >> 16)) - 1640531527) ^ 3u) + 192;
    int v17 = 73244475
        * ((73244475 * ((v58 >> 48) ^ HIDWORD(v58))) ^ ((int)(73244475 * ((v58 >> 48) ^ HIDWORD(v58))) >> 16));
    unint64_t v18 = ((v17 ^ (v17 >> 16)) - 1640531527 + (v16 << 6) + (v16 >> 2)) ^ v16;
    int v19 = 73244475 * ((73244475 * (v12 ^ (v12 >> 16))) ^ ((73244475 * (v12 ^ (v12 >> 16))) >> 16));
    unint64_t v20 = ((v19 ^ (v19 >> 16)) - 1640531527 + (v18 << 6) + (v18 >> 2)) ^ v18;
    uint64_t v21 = *(void *)(a1 + 320);
    uint64_t v22 = *(void *)(v21 + 16 * (v20 % *(void *)(a1 + 312)));
    uint64_t v23 = (_DWORD **)(a1 + 296);
    if (v22 != -1) {
      uint64_t v23 = (_DWORD **)(*(void *)(v21 + 16 * v22 + 8) + 16);
    }
    uint64_t v24 = v12;
    while (1)
    {
      int v25 = *v23;
      if (*v25 == v58 && v25[1] == HIDWORD(v58) && v25[2] == v12) {
        break;
      }
      uint64_t v23 = (_DWORD **)(v25 + 4);
    }
    int v27 = v25[3];
    uint64_t v28 = *(void *)(a1 + 136);
    uint64_t v29 = v28 + 36 * v27;
    if (quasar::gLogLevel >= 6)
    {
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v60 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
      uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Considering ", 12);
      size_t v31 = quasar::ptt::operator<<(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" (ID: ", 6);
      long long v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)").", 2);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v60);
    }
    if (*(float *)(v28 + 36 * v27 + 16) <= a2)
    {
      uint64_t v33 = *(void *)(a1 + 120);
      if (!v33) {
        operator new();
      }
      int v34 = v59;
      uint64_t v36 = *(void *)(v33 + 48);
      uint64_t v35 = v33 + 48;
      *(_DWORD *)(v35 - 32) = HIDWORD(v58);
      *(_DWORD *)(v35 - 28) = v34;
      *(_DWORD *)(v35 - 24) = v34;
      (*(void (**)(void))(v36 + 16))();
      uint64_t v37 = *(void *)(a1 + 120);
      if (*(void *)(v37 + 96) < *(void *)(v37 + 88))
      {
        while (1)
        {
          uint64_t v38 = *(unsigned int *)(v37 + 76);
          if (v38)
          {
            (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v37 + 8) + 32))(*(void *)(v37 + 8), *(unsigned int *)(v37 + 24), v38, v37 + 28);
            float v39 = *(float *)(v37 + 80);
            float v40 = NAN;
            if (v39 != -INFINITY)
            {
              float v41 = *(float *)(v37 + 36);
              float v40 = NAN;
              if (v41 != -INFINITY)
              {
                float v40 = INFINITY;
                BOOL v42 = v41 == INFINITY || v39 == INFINITY;
                float v43 = v39 + v41;
                if (!v42) {
                  float v40 = v43;
                }
              }
            }
            unsigned int v44 = *(_DWORD *)(v37 + 72);
            int v45 = *(_DWORD *)(v37 + 32);
            *(_DWORD *)(v37 + 112) = v44;
            *(_DWORD *)(v37 + 116) = v45;
            long long v46 = (int *)(v37 + 40);
          }
          else
          {
            unsigned int v44 = *(_DWORD *)(v37 + 72);
            *(void *)(v37 + 112) = v44;
            float v40 = *(float *)(v37 + 80);
            long long v46 = (int *)(v37 + 24);
          }
          *(float *)(v37 + 120) = v40;
          int v47 = *v46;
          *(_DWORD *)(v37 + 124) = *(_DWORD *)(v37 + 84);
          *(_DWORD *)(v37 + 128) = v47;
          if (quasar::gLogLevel >= 6)
          {
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v69 = 0u;
            long long v70 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v60 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
            long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Considering expanding ", 22);
            long long v49 = quasar::ptt::operator<<(v48, v37 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v60);
            unsigned int v44 = *(_DWORD *)(v37 + 112);
          }
          if (*(unsigned char *)(a1 + 29) && !v44) {
            break;
          }
          uint64_t v56 = -1;
          int v57 = -1;
          unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v24;
          if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, 0, a2, v14, v3, v27, v29, (int *)(v37 + 112), 1, (int *)&v56, 0, 0) & 1) == 0)
          {
            if (quasar::gLogLevel >= 6)
            {
              long long v75 = 0u;
              long long v76 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              long long v71 = 0u;
              long long v72 = 0u;
              long long v69 = 0u;
              long long v70 = 0u;
              long long v67 = 0u;
              long long v68 = 0u;
              long long v65 = 0u;
              long long v66 = 0u;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              long long v60 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Exiting arc-loop early.", 23);
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v60);
            }
            goto LABEL_65;
          }
          if (quasar::gLogLevel >= 6)
          {
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v69 = 0u;
            long long v70 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v60 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
            long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Arc expansion led to next state ", 32);
            long long v53 = quasar::ptt::operator<<(v52);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v60);
          }
          int v50 = v57;
          if (v56 != -1 || v57 != -1)
          {
            uint64_t v51 = v56;
LABEL_56:
            quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::push_back((void *)(a1 + 216), v51, v50);
          }
LABEL_57:
          ++*(void *)(v37 + 96);
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v37 + 48);
          if (*(void *)(v37 + 96) >= *(void *)(v37 + 88)) {
            goto LABEL_65;
          }
        }
        *(void *)&long long v60 = -1;
        DWORD2(v60) = -1;
        unint64_t v6 = v6 & 0xFFFFFFFF00000000 | v24;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, 0, a2, v14, v6, v27, v29, (int *)(v37 + 112), 0, (int *)&v60, 0, 0);
        int v50 = DWORD2(v60);
        if ((void)v60 == -1 && DWORD2(v60) == -1) {
          goto LABEL_57;
        }
        uint64_t v51 = v60;
        goto LABEL_56;
      }
    }
LABEL_65:
    if (*(void *)(a1 + 208))
    {
      long long v54 = (uint64_t **)(a1 + 192);
LABEL_69:
      long long v55 = *v54;
      unint64_t v11 = (*v54)[4];
      int v12 = *((_DWORD *)*v54 + 10);
      std::__tree<std::string>::__remove_node_pointer(v54, *v54);
      operator delete(v55);
      goto LABEL_70;
    }
    if (*(void *)(a1 + 272))
    {
      long long v54 = (uint64_t **)(a1 + 256);
      goto LABEL_69;
    }
    int v12 = -1;
    unint64_t v11 = -1;
LABEL_70:
    unint64_t v13 = HIDWORD(v11);
    uint64_t v58 = v11;
  }
}

void sub_1B23806D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

float quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmitting(uint64_t a1, int a2)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Process emitting with observation ", 34);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
  }
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::NextIteration(a1 + 280, (uint64_t)v64);
  uint64_t v5 = v64[0];
  uint64_t v4 = v64[1];
  float v6 = v65;
  if (quasar::gLogLevel >= 6)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"prevFrontierBestHashListElement=", 32);
    uint64_t v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"prevFrontierBestCost=", 21);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
  }
  float v9 = *(float *)(a1 + 8);
  if ((LODWORD(v6) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v10 = 1.0e10;
  }
  else {
    float v10 = v6;
  }
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(a1, v5, &__p);
  float WeightCutoffUpperBound = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ComputeNextWeightCutoffUpperBound(a1, v4, a2);
  float v12 = v10 + v9;
  if (quasar::gLogLevel >= 6)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"adaptiveBeam=", 13);
    unint64_t v13 = (void *)std::ostream::operator<<();
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"weightCutoff=", 13);
    int v15 = (void *)std::ostream::operator<<();
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"nextWeightCutoffUpperBound=", 27);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
  }
  int v17 = v63;
  if (v63 != __p)
  {
    uint64_t v55 = 0;
    unint64_t v18 = 0;
    int v17 = __p;
    do
    {
      uint64_t v19 = v17[v18];
      *(void *)long long v61 = *(void *)v19;
      int v20 = *(_DWORD *)(v19 + 12);
      *(_DWORD *)&v61[8] = *(_DWORD *)(v19 + 8);
      uint64_t v21 = *(void *)(a1 + 136);
      uint64_t v58 = v21 + 36 * v20;
      int v59 = v20;
      if (quasar::gLogLevel >= 6)
      {
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v70 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Considering ", 12);
        uint64_t v23 = quasar::ptt::operator<<(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" with ID ", 9);
        uint64_t v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
      }
      float v25 = *(float *)(v21 + 36 * v59 + 16);
      if (v25 < v12 && v25 < WeightCutoffUpperBound)
      {
        uint64_t v32 = *(void *)(a1 + 120);
        uint64_t v33 = HIDWORD(*(void *)&v61[4]);
        if (!v32) {
          operator new();
        }
        uint64_t v35 = *(void *)(v32 + 48);
        uint64_t v34 = v32 + 48;
        *(_DWORD *)(v34 - 32) = *(_DWORD *)&v61[4];
        *(_DWORD *)(v34 - 28) = v33;
        *(_DWORD *)(v34 - 24) = v33;
        (*(void (**)(void))(v35 + 16))();
        uint64_t v36 = v33;
        uint64_t v37 = *(void *)(a1 + 120);
        uint64_t v57 = *(void *)v61;
        while (*(void *)(v37 + 96) < *(void *)(v37 + 88))
        {
          uint64_t v38 = *(unsigned int *)(v37 + 76);
          if (v38)
          {
            (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v37 + 8) + 32))(*(void *)(v37 + 8), *(unsigned int *)(v37 + 24), v38, v37 + 28);
            float v39 = *(float *)(v37 + 80);
            float v40 = NAN;
            if (v39 != -INFINITY)
            {
              float v41 = *(float *)(v37 + 36);
              float v40 = NAN;
              if (v41 != -INFINITY)
              {
                float v40 = INFINITY;
                BOOL v42 = v41 == INFINITY || v39 == INFINITY;
                float v43 = v39 + v41;
                if (!v42) {
                  float v40 = v43;
                }
              }
            }
            unsigned int v44 = *(_DWORD *)(v37 + 72);
            int v45 = *(_DWORD *)(v37 + 32);
            *(_DWORD *)(v37 + 112) = v44;
            *(_DWORD *)(v37 + 116) = v45;
            long long v46 = (int *)(v37 + 40);
          }
          else
          {
            unsigned int v44 = *(_DWORD *)(v37 + 72);
            *(void *)(v37 + 112) = v44;
            float v40 = *(float *)(v37 + 80);
            long long v46 = (int *)(v37 + 24);
          }
          *(float *)(v37 + 120) = v40;
          int v47 = *v46;
          *(_DWORD *)(v37 + 124) = *(_DWORD *)(v37 + 84);
          *(_DWORD *)(v37 + 128) = v47;
          if (quasar::gLogLevel >= 6)
          {
            long long v81 = 0u;
            long long v82 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v70 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
            long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Considering expanding ", 22);
            long long v49 = quasar::ptt::operator<<(v48, v37 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
            unsigned int v44 = *(_DWORD *)(v37 + 112);
          }
          if (v44)
          {
            uint64_t v60 = 0;
            unint64_t v2 = v2 & 0xFFFFFFFF00000000 | v36;
            if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, a2, WeightCutoffUpperBound, v57, v2, v59, v58, (int *)(v37 + 112), 1, 0, &v60, 0) & 1) == 0)
            {
              if (quasar::gLogLevel >= 6)
              {
                long long v81 = 0u;
                long long v82 = 0u;
                long long v79 = 0u;
                long long v80 = 0u;
                long long v77 = 0u;
                long long v78 = 0u;
                long long v75 = 0u;
                long long v76 = 0u;
                long long v73 = 0u;
                long long v74 = 0u;
                long long v71 = 0u;
                long long v72 = 0u;
                long long v70 = 0u;
                long long v68 = 0u;
                long long v69 = 0u;
                long long v66 = 0u;
                long long v67 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Exiting arc-loop early.", 23);
                quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
              }
              break;
            }
            if (v60 && (float)(v9 + *(float *)(v60 + 16)) < WeightCutoffUpperBound) {
              float WeightCutoffUpperBound = v9 + *(float *)(v60 + 16);
            }
          }
          else if (quasar::gLogLevel >= 6)
          {
            long long v81 = 0u;
            long long v82 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v70 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
            int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Skipping ", 9);
            uint64_t v51 = quasar::ptt::operator<<(v50, v37 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" since it is an epsilon arc.", 28);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
          }
          ++*(void *)(v37 + 96);
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v37 + 48);
        }
        if (quasar::gLogLevel >= 6)
        {
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v70 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Considering the case where we ignore observation ", 49);
          long long v52 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
        }
        *(void *)&long long v66 = 0;
        unint64_t v54 = v54 & 0xFFFFFFFF00000000 | v36;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<false,true>(a1, a2, v57, v36, v59, v58, WeightCutoffUpperBound, 0, 0, 0, (uint64_t *)&v66, 0);
        if ((void)v66 && (float)(v9 + *(float *)(v66 + 16)) < WeightCutoffUpperBound) {
          float WeightCutoffUpperBound = v9 + *(float *)(v66 + 16);
        }
      }
      else if (quasar::gLogLevel >= 6)
      {
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v70 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
        int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Skipping ", 9);
        uint64_t v28 = quasar::ptt::operator<<(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" (ID: ", 6);
        uint64_t v29 = (void *)std::ostream::operator<<();
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"since cost exceeds ", 19);
        size_t v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
      }
      *(void *)(v19 + 16) = *(void *)(a1 + 344);
      *(void *)(a1 + 344) = v19;
      ++v18;
      int v17 = __p;
      v55 += 8;
    }
    while (v18 < ((char *)v63 - (unsigned char *)__p) >> 3);
  }
  if (quasar::gLogLevel >= 6)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"nextWeightCutoffUpperBound=", 27);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
    int v17 = __p;
  }
  if (v17)
  {
    long long v63 = v17;
    operator delete(v17);
  }
  return WeightCutoffUpperBound;
}

void sub_1B2381028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(uint64_t a1, unint64_t a2, int a3, uint64_t *a4, int a5)
{
  int v59 = 0;
  uint64_t v60 = 0;
  unint64_t v61 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)&v59, *(void *)(a1 + 376));
  int v40 = a5;
  for (uint64_t i = *(void *)(a1 + 296); i; uint64_t i = *(void *)(i + 16))
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
      unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Considering path ", 17);
      float v12 = quasar::ptt::operator<<(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (ID: ", 6);
      unint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)").", 2);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
    }
    int v14 = *(_DWORD *)(i + 12);
    uint64_t v15 = *(void *)(a1 + 136);
    float v16 = *(float *)(v15 + 36 * v14 + 16);
    if (a3)
    {
      float v17 = (*(float (**)(void, void))(**(void **)(a1 + 96) + 32))(*(void *)(a1 + 96), *(unsigned int *)(v15 + 36 * v14 + 28));
      (*(void (**)(void, void))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104), *(unsigned int *)(v15 + 36 * v14 + 32));
      float v18 = NAN;
      if (v17 != -INFINITY && v9 != -INFINITY)
      {
        float v18 = INFINITY;
        BOOL v19 = v9 == INFINITY || v17 == INFINITY;
        float v9 = v17 + v9;
        if (!v19) {
          float v18 = v9;
        }
      }
      float v16 = v16 + v18;
    }
    if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      int v20 = v60;
      if ((unint64_t)v60 >= v61)
      {
        uint64_t v22 = ((char *)v60 - (char *)v59) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v61 - (void)v59;
        if ((uint64_t)(v61 - (void)v59) >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        size_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v61, v25);
        uint64_t v28 = (float *)&v26[8 * v22];
        *uint64_t v28 = v16;
        v28[1] = *(float *)(i + 12);
        uint64_t v30 = v59;
        uint64_t v29 = v60;
        size_t v31 = v28;
        if (v60 != v59)
        {
          do
          {
            uint64_t v32 = *((void *)v29 - 1);
            v29 -= 2;
            *((void *)v31 - 1) = v32;
            v31 -= 2;
          }
          while (v29 != v30);
          uint64_t v29 = v59;
        }
        uint64_t v21 = v28 + 2;
        int v59 = v31;
        uint64_t v60 = v28 + 2;
        unint64_t v61 = (unint64_t)&v26[8 * v27];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        float *v60 = v16;
        v20[1] = *(float *)(i + 12);
        uint64_t v21 = v20 + 2;
      }
      uint64_t v60 = v21;
    }
  }
  unint64_t v33 = ((char *)v60 - (char *)v59) >> 3;
  if (v33 >= a2) {
    unint64_t v34 = a2;
  }
  else {
    unint64_t v34 = ((char *)v60 - (char *)v59) >> 3;
  }
  if (v40)
  {
    unint64_t v35 = 126 - 2 * __clz(v33);
    if (v60 == v59) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v35;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,false>((uint64_t)v59, (unint64_t)v60, (uint64_t)&v42, v36, 1);
  }
  else if (v33 > a2)
  {
    uint64_t v37 = &v59[2 * v34];
    if (v37 != v60) {
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v59, v37, (uint64_t)v60, v9);
    }
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(a4, v34);
  if (v34)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Extracting path with ID ", 24);
      uint64_t v38 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and expected cost ", 19);
      float v39 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)".", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
    }
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetPath();
  }
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
}

void sub_1B2381614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = *(void **)(v13 - 128);
  if (v15)
  {
    *(void *)(v13 - 120) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *quasar::ptt::TooManyTokensError::TooManyTokensError(std::runtime_error *this, const char *a2)
{
  double result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1F0A58CF8;
  return result;
}

void quasar::ptt::TooManyTokensError::~TooManyTokensError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  int v9 = 73244475 * ((73244475 * (a2 ^ ((int)a2 >> 16))) ^ ((int)(73244475 * (a2 ^ ((int)a2 >> 16))) >> 16));
  unint64_t v10 = (((v9 ^ (v9 >> 16)) - 1640531527) ^ 3u) + 192;
  int v11 = 73244475 * ((73244475 * ((a2 >> 48) ^ HIDWORD(a2))) ^ ((int)(73244475 * ((a2 >> 48) ^ HIDWORD(a2))) >> 16));
  unint64_t v12 = ((v11 ^ (v11 >> 16)) - 1640531527 + (v10 << 6) + (v10 >> 2)) ^ v10;
  int v13 = 73244475 * ((73244475 * (a3 ^ (a3 >> 16))) ^ ((73244475 * (a3 ^ (a3 >> 16))) >> 16));
  unint64_t v14 = (((v13 ^ (v13 >> 16)) - 1640531527 + (v12 << 6) + (v12 >> 2)) ^ v12) % a1[2];
  uint64_t v15 = (uint64_t *)(a1[3] + 16 * v14);
  uint64_t result = kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::New((uint64_t)a1);
  *(_DWORD *)uint64_t result = v6;
  *(_DWORD *)(result + 4) = v8;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  float v17 = v15 + 1;
  uint64_t v18 = v15[1];
  if (v18)
  {
    *(void *)(result + 16) = *(void *)(v18 + 16);
    *(void *)(v18 + 16) = result;
    uint64_t *v17 = result;
  }
  else
  {
    uint64_t v19 = a1[1];
    int v20 = a1;
    if (v19 != -1) {
      int v20 = (uint64_t *)(*(void *)(a1[3] + 16 * v19 + 8) + 16);
    }
    *int v20 = result;
    *(void *)(result + 16) = 0;
    uint64_t *v17 = result;
    *uint64_t v15 = v19;
    a1[1] = v14;
  }
  return result;
}

uint64_t kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::New(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    operator new[]();
  }
  *(void *)(a1 + 48) = *(void *)(result + 16);
  return result;
}

char *quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::push_back(void *a1, uint64_t a2, int a3)
{
  *(void *)uint64_t v15 = a2;
  *(_DWORD *)&v15[8] = a3;
  uint64_t result = (char *)std::function<float ()(std::pair<int,std::pair<int,int>>)>::operator()((uint64_t)a1, a2, a3);
  float v7 = v6;
  unint64_t v8 = (uint64_t **)(a1 + 5);
  if (a1[7] < a1[4]) {
    goto LABEL_8;
  }
  uint64_t v11 = a1[6];
  unint64_t v10 = a1 + 6;
  uint64_t v9 = v11;
  if (v11)
  {
    do
    {
      uint64_t v12 = v9;
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    do
    {
      uint64_t v12 = v10[2];
      BOOL v13 = *(void *)v12 == (void)v10;
      unint64_t v10 = (void *)v12;
    }
    while (v13);
  }
  if (v6 < *(float *)(v12 + 28))
  {
    std::__tree<std::string>::__remove_node_pointer(v8, (uint64_t *)v12);
    operator delete((void *)v12);
LABEL_8:
    *(void *)&long long v14 = LODWORD(v7) | (unint64_t)(a2 << 32);
    *((void *)&v14 + 1) = *(void *)&v15[4];
    return std::__tree<std::pair<float,std::pair<int,std::pair<int,int>>>>::__emplace_unique_key_args<std::pair<float,std::pair<int,std::pair<int,int>>>,std::pair<float,std::pair<int,std::pair<int,int>>>>(v8, (uint64_t)&v14, &v14);
  }
  return result;
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int *a8, int a9, int *a10, uint64_t *a11, float *a12)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Evaluating to expand path with graph arc ", 41);
    int v20 = quasar::ptt::operator<<(v19, (uint64_t)a8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" w.r.t. observation ", 20);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  float v22 = *((float *)a8 + 2);
  float v23 = *(float *)(a1 + 24) * v22;
  if (a6)
  {
    float v24 = NAN;
    if (v23 != -INFINITY)
    {
      float v25 = *(float *)(a7 + 16);
      if (v25 != -INFINITY)
      {
        BOOL v26 = v25 == INFINITY || v23 == INFINITY;
        float v27 = v23 + v25;
        if (v26) {
          float v24 = INFINITY;
        }
        else {
          float v24 = v27;
        }
      }
    }
    if (!a9) {
      goto LABEL_18;
    }
  }
  else
  {
    float v24 = *(float *)(a1 + 24) * v22;
    if (!a9) {
      goto LABEL_18;
    }
  }
  if (*(unsigned char *)(a1 + 28) && v24 > a3) {
    return 0;
  }
LABEL_18:
  float v29 = *(float *)(*(void *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2 + 4 * *a8);
  if (quasar::gLogLevel >= 6)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  LODWORD(v39) = 0;
  *(void *)((char *)&v39 + 4) = *(void *)(a8 + 3);
  unint64_t v30 = v39;
  uint64_t v31 = HIDWORD(*(void *)((char *)&v39 + 4));
  float v32 = NAN;
  if (v24 == -INFINITY
    || v29 == -INFINITY
    || (v29 != INFINITY ? (v33 = v24 == INFINITY) : (v33 = 1), !v33 ? (float v32 = v24 + v29) : (float v32 = INFINITY), v32 >= a3))
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Dropping path due to cut-off.", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    }
    uint64_t v35 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      unint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Expanding path with nextState=", 30);
      quasar::ptt::operator<<(v34);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    }
    uint64_t v35 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Expand((uint64_t *)(a1 + 280), a6, a2, *a8, a8[1], v30, v31, v32, v29 + *(float *)(a7 + 20));
  }
  if (a10)
  {
    unint64_t v36 = HIDWORD(v30);
    if (v35) {
      int v37 = v30;
    }
    else {
      int v37 = -1;
    }
    if (!v35) {
      LODWORD(v36) = -1;
    }
    *a10 = v37;
    a10[1] = v36;
    if (v35) {
      int v38 = v31;
    }
    else {
      int v38 = -1;
    }
    a10[2] = v38;
  }
  if (a11) {
    *a11 = v35;
  }
  if (a12) {
    *a12 = v32;
  }
  return 1;
}

void sub_1B2381F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<float ()(std::pair<int,std::pair<int,int>>)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  int v6 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
}

char *std::__tree<std::pair<float,std::pair<int,std::pair<int,int>>>>::__emplace_unique_key_args<std::pair<float,std::pair<int,std::pair<int,int>>>,std::pair<float,std::pair<int,std::pair<int,int>>>>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<std::pair<float,std::pair<int,std::pair<int,int>>>>::__find_equal<std::pair<float,std::pair<int,std::pair<int,int>>>>((uint64_t)a1, &v9, a2);
  int v6 = (char *)*v5;
  if (!*v5)
  {
    float v7 = (uint64_t **)v5;
    int v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__tree<std::pair<float,std::pair<int,std::pair<int,int>>>>::__find_equal<std::pair<float,std::pair<int,std::pair<int,int>>>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = v4;
        uint64_t v9 = (uint64_t)v4 + 28;
        if (!std::less<std::pair<float,std::pair<int,std::pair<int,int>>>>::operator()[abi:ne180100](v7, a3, (uint64_t)v4 + 28))break; {
        uint64_t v4 = (void *)*v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::pair<float,std::pair<int,std::pair<int,int>>>>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::pair<float,std::pair<int,std::pair<int,int>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(float *)a2 < *(float *)a3) {
    return 1;
  }
  if (*(float *)a3 < *(float *)a2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 4);
  int v4 = *(_DWORD *)(a3 + 4);
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = *(_DWORD *)(a3 + 8);
  if (v5 < v6) {
    return 1;
  }
  return v6 >= v5 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a3 + 12);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Expand(uint64_t *a1, int a2, int a3, int a4, int a5, unint64_t a6, int a7, float a8, float a9)
{
  int v11 = a4;
  int v12 = a3;
  unint64_t v92 = a6;
  int v93 = a7;
  float v17 = a1 + 2;
  unint64_t v18 = HIDWORD(a6);
  int v19 = 73244475 * ((73244475 * (a6 ^ ((int)a6 >> 16))) ^ ((int)(73244475 * (a6 ^ ((int)a6 >> 16))) >> 16));
  unint64_t v20 = (((v19 ^ (v19 >> 16)) - 1640531527) ^ 3u) + 192;
  int v21 = 73244475
      * ((73244475 * (HIDWORD(a6) ^ (SHIDWORD(a6) >> 16))) ^ ((73244475 * (HIDWORD(a6) ^ (SHIDWORD(a6) >> 16))) >> 16));
  unint64_t v22 = ((v21 ^ (v21 >> 16)) - 1640531527 + (v20 << 6) + (v20 >> 2)) ^ v20;
  int v23 = (73244475 * (a7 ^ (a7 >> 16))) ^ ((73244475 * (a7 ^ (a7 >> 16))) >> 16);
  unint64_t v24 = (((73244475 * v23) ^ ((73244475 * v23) >> 16)) - 1640531527 + (v22 << 6) + (v22 >> 2)) ^ v22;
  uint64_t v25 = a1[5];
  unint64_t v26 = v24 % a1[4];
  uint64_t v27 = *(void *)(v25 + 16 * v26 + 8);
  if (v27)
  {
    uint64_t v28 = *(void *)(v25 + 16 * v26);
    float v29 = a1 + 2;
    if (v28 != -1) {
      float v29 = (uint64_t *)(*(void *)(v25 + 16 * v28 + 8) + 16);
    }
    uint64_t v30 = *(void *)(v27 + 16);
    for (uint64_t i = *v29; ; uint64_t i = *(void *)(i + 16))
    {
      if (i == v30) {
        goto LABEL_12;
      }
      if (*(_DWORD *)i == a6 && *(_DWORD *)(i + 4) == HIDWORD(a6) && *(_DWORD *)(i + 8) == a7) {
        break;
      }
    }
    int v48 = *(_DWORD *)(i + 12);
    if (v48)
    {
      uint64_t v49 = *(void *)(*a1 + 8);
      if (quasar::gLogLevel >= 6)
      {
        int v70 = a5;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v75 = 0u;
        uint64_t v50 = v49;
        int v51 = v48;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        int v69 = v51;
        uint64_t v49 = v50;
        long long v52 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" ", 1);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        a5 = v70;
        int v11 = a4;
        int v48 = v69;
        int v12 = a3;
      }
      if (*(float *)(v49 + 36 * v48 + 16) <= a8)
      {
        if (quasar::gLogLevel >= 6)
        {
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v75 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
          uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Skipping path replacement for state ", 36);
          unint64_t v61 = quasar::ptt::operator<<(v60);
          long long v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" since cost of new candidate ", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"(", 1);
          long long v63 = (void *)std::ostream::operator<<();
          long long v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") exceeds cost of existing candidate ", 37);
          float v65 = quasar::ptt::operator<<(v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        }
        return 0;
      }
      if (quasar::gLogLevel >= 6)
      {
        int v71 = a5;
        int v73 = v11;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v75 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Replacing existing path for state ", 34);
        long long v54 = quasar::ptt::operator<<(v53);
        long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" with new path due to lower cost ", 33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"(", 1);
        long long v56 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" vs. ", 5);
        long long v57 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)").", 2);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        a5 = v71;
        int v11 = v73;
      }
      uint64_t v37 = *a1;
      uint64_t v38 = *(void *)(*a1 + 16);
      uint64_t v58 = v38 + 1;
      if ((unint64_t)(v38 + 1) >= *(void *)*a1) {
        goto LABEL_52;
      }
LABEL_46:
      char v39 = 0;
      *(void *)(v37 + 16) = v58;
      if ((v38 & 0x80000000) != 0) {
        return 0;
      }
      goto LABEL_16;
    }
    if (quasar::gLogLevel >= 6)
    {
      int v59 = a5;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v75 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Expanding search with initial path.", 35);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
      a5 = v59;
      int v11 = a4;
    }
    uint64_t v37 = *a1;
    uint64_t v38 = *(void *)(*a1 + 16);
    uint64_t v58 = v38 + 1;
    if ((unint64_t)(v38 + 1) < *(void *)*a1) {
      goto LABEL_46;
    }
LABEL_52:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::ptt::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
LABEL_12:
  if (quasar::gLogLevel >= 6)
  {
    int v34 = a5;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Expanding search with path leading to state ", 44);
    unint64_t v36 = quasar::ptt::operator<<(v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
    a5 = v34;
    int v11 = a4;
  }
  uint64_t v37 = *a1;
  uint64_t v38 = *(void *)(*a1 + 16);
  if ((unint64_t)(v38 + 1) >= *(void *)*a1) {
    goto LABEL_52;
  }
  uint64_t i = 0;
  *(void *)(v37 + 16) = v38 + 1;
  char v39 = 1;
  if ((v38 & 0x80000000) != 0) {
    return 0;
  }
LABEL_16:
  uint64_t v40 = *(void *)(v37 + 8) + 36 * v38;
  *(_DWORD *)uint64_t v40 = a2;
  *(_DWORD *)(v40 + 4) = v12;
  *(_DWORD *)(v40 + 8) = v11;
  *(_DWORD *)(v40 + 12) = a5;
  *(float *)(v40 + 16) = a8;
  *(float *)(v40 + 20) = a9;
  *(_DWORD *)(v40 + 24) = a6;
  *(_DWORD *)(v40 + 28) = v18;
  *(_DWORD *)(v40 + 32) = a7;
  if (v39) {
    kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert(v17, a6, a7, v38);
  }
  else {
    *(_DWORD *)(i + 12) = v38;
  }
  ++a1[12];
  if (quasar::gLogLevel >= 6)
  {
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"New partial path: ", 18);
    quasar::ptt::operator<<(v41);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
  }
  if (a8 < *((float *)a1 + 28))
  {
    *((float *)a1 + 28) = a8;
    uint64_t v42 = a1[5];
    unint64_t v43 = v24 % a1[4];
    uint64_t j = *(void *)(v42 + 16 * v43 + 8);
    if (j)
    {
      uint64_t v45 = *(void *)(v42 + 16 * v43);
      if (v45 != -1) {
        float v17 = (uint64_t *)(*(void *)(v42 + 16 * v45 + 8) + 16);
      }
      uint64_t v46 = *(void *)(j + 16);
      for (uint64_t j = *v17; j != v46; uint64_t j = *(void *)(j + 16))
      {
        if (*(_DWORD *)j == a6 && *(_DWORD *)(j + 4) == v18 && *(_DWORD *)(j + 8) == a7) {
          goto LABEL_34;
        }
      }
      uint64_t j = 0;
    }
LABEL_34:
    a1[13] = j;
  }
  return v40;
}

void sub_1B23827C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::NextIteration(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 != -1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    do
    {
      int v5 = (uint64_t *)(v4 + 16 * v3);
      v5[1] = 0;
      uint64_t v3 = *v5;
    }
    while (v3 != -1);
  }
  uint64_t v7 = (void *)(a1 + 96);
  unint64_t v6 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  uint64_t v9 = *(void *)(a1 + 104);
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 112);
  unint64_t v10 = (unint64_t)(float)(*(float *)(a1 + 8) * (float)v6);
  if (*(void *)(a1 + 32) < v10)
  {
    if (quasar::gLogLevel >= 6)
    {
      memset(v13, 0, sizeof(v13));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Expand hash list number of buckets from ", 40);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" to ", 4);
      int v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v13);
    }
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, v10);
  }
  void *v7 = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
}

void sub_1B2382944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    uint64_t v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = a3 + 2;
    do
    {
      if ((unint64_t)v6 >= *v7)
      {
        uint64_t v8 = (uint64_t)&v6[-*a3] >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = *v7 - *a3;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v11);
        }
        else {
          int v12 = 0;
        }
        BOOL v13 = &v12[8 * v8];
        *(void *)BOOL v13 = v5;
        unint64_t v6 = v13 + 8;
        uint64_t v15 = (char *)*a3;
        long long v14 = (char *)a3[1];
        if (v14 != (char *)*a3)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          long long v14 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v6;
        a3[2] = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)unint64_t v6 = v5;
        v6 += 8;
      }
      a3[1] = v6;
      uint64_t v5 = *(void *)(v5 + 16);
    }
    while (v5);
    float v17 = (char *)*a3;
  }
  else
  {
    float v17 = 0;
    unint64_t v6 = 0;
  }
  unint64_t v18 = *(int *)(a1 + 12);
  if (v18)
  {
    unint64_t v19 = (v6 - v17) >> 3;
    if (v19 > v18)
    {
      uint64_t v28 = a1 + 128;
      uint64_t result = std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(v17, &v17[8 * v18], v6, &v28);
      int v21 = (uint64_t *)a3[1];
      uint64_t v22 = *a3 + 8 * v18;
      if ((uint64_t *)v22 != v21)
      {
        uint64_t v23 = *(void *)(a1 + 344);
        unint64_t v24 = (uint64_t *)(*a3 + 8 * v18);
        do
        {
          uint64_t v25 = *v24++;
          *(void *)(v25 + 16) = v23;
          *(void *)(a1 + 344) = v25;
          uint64_t v23 = v25;
        }
        while (v24 != v21);
        a3[1] = v22;
      }
      return result;
    }
  }
  else
  {
    unint64_t v19 = (v6 - v17) >> 3;
  }
  unint64_t v26 = 126 - 2 * __clz(v19);
  if (v6 == v17) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v26;
  }
  return (char *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **,false>((uint64_t)v17, (unint64_t *)v6, (uint64_t)&v29, v27, 1);
}

void sub_1B2382B18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ComputeNextWeightCutoffUpperBound(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = (unint64_t)"mandFstINS_6ArcTplINS_17TropicalWeightTplIfEEiEENSt3__110shared_ptrINS_24DeterministicOnDemandFstIS4_EEEEEE";
  if (!a2) {
    return 1.0e10;
  }
  *(void *)char v29 = *(void *)a2;
  int v25 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)&unsigned char v29[8] = *(_DWORD *)(a2 + 8);
  float v5 = *(float *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = HIDWORD(*(void *)&v29[4]);
  if (!v7) {
    operator new();
  }
  uint64_t v10 = *(void *)(v7 + 48);
  uint64_t v9 = v7 + 48;
  *(_DWORD *)(v9 - 32) = *(_DWORD *)&v29[4];
  *(_DWORD *)(v9 - 28) = v8;
  *(_DWORD *)(v9 - 24) = v8;
  (*(void (**)(void))(v10 + 16))();
  uint64_t v11 = *(void *)(a1 + 120);
  if (*(void *)(v11 + 96) >= *(void *)(v11 + 88)) {
    return 1.0e10;
  }
  uint64_t v12 = *(void *)v29;
  float v13 = 1.0e10;
  while (1)
  {
    uint64_t v14 = *(unsigned int *)(v11 + 76);
    if (v14)
    {
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v11 + 8) + 32))(*(void *)(v11 + 8), *(unsigned int *)(v11 + 24), v14, v11 + 28);
      float v15 = *(float *)(v11 + 80);
      float v16 = NAN;
      if (v15 != -INFINITY)
      {
        float v17 = *(float *)(v11 + 36);
        float v16 = NAN;
        if (v17 != -INFINITY)
        {
          float v16 = INFINITY;
          BOOL v18 = v17 == INFINITY || v15 == INFINITY;
          float v19 = v15 + v17;
          if (!v18) {
            float v16 = v19;
          }
        }
      }
      unsigned int v20 = *(_DWORD *)(v11 + 72);
      int v21 = *(_DWORD *)(v11 + 32);
      *(_DWORD *)(v11 + 112) = v20;
      *(_DWORD *)(v11 + 116) = v21;
      uint64_t v22 = (int *)(v11 + 40);
    }
    else
    {
      unsigned int v20 = *(_DWORD *)(v11 + 72);
      *(void *)(v11 + 112) = v20;
      float v16 = *(float *)(v11 + 80);
      uint64_t v22 = (int *)(v11 + 24);
    }
    *(float *)(v11 + 120) = v16;
    int v23 = *v22;
    *(_DWORD *)(v11 + 124) = *(_DWORD *)(v11 + 84);
    *(_DWORD *)(v11 + 128) = v23;
    if (!v20) {
      goto LABEL_21;
    }
    unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v8;
    if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,false>(a1, a3, v13, v12, v3, v25, v6 + 36 * v25, (float *)(v11 + 112), 1, 0, 0, &v28) & 1) == 0)break; {
    if ((float)(v5 + v28) < v13)
    }
      float v13 = v5 + v28;
LABEL_21:
    ++*(void *)(v11 + 96);
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v11 + 48);
    if (*(void *)(v11 + 96) >= *(void *)(v11 + 88)) {
      return v13;
    }
  }
  if (quasar::gLogLevel >= 6)
  {
    memset(v27, 0, sizeof(v27));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Exiting arc-loop early.", 23);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v27);
  }
  return v13;
}

void sub_1B2382E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<false,true>(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, float a7, uint64_t a8, int a9, int *a10, uint64_t *a11, float *a12)
{
  *(void *)uint64_t v50 = a3;
  *(_DWORD *)&v50[8] = a4;
  if (quasar::gLogLevel >= 6)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Evaluating to expand path where we ignore observation ", 54);
    BOOL v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
  }
  if (a5)
  {
    float v19 = *(float *)(a6 + 16);
    float v20 = v19 + 0.0;
    if (v19 == INFINITY) {
      float v20 = INFINITY;
    }
    if (v19 == -INFINITY) {
      float v20 = NAN;
    }
    float v21 = v20;
    if (!a9) {
      goto LABEL_14;
    }
  }
  else
  {
    float v21 = 0.0;
    if (!a9) {
      goto LABEL_14;
    }
  }
  if (*(unsigned char *)(a1 + 28) && v21 > a7) {
    return 0;
  }
LABEL_14:
  float v23 = *(float *)(*(void *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2);
  if (quasar::gLogLevel >= 6)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
  }
  LODWORD(v33) = 0;
  *(void *)((char *)&v33 + 4) = *(void *)&v50[4];
  unint64_t v24 = v33;
  uint64_t v25 = HIDWORD(*(void *)&v50[4]);
  float v26 = NAN;
  if (v21 == -INFINITY
    || v23 == -INFINITY
    || (v23 != INFINITY ? (v27 = v21 == INFINITY) : (v27 = 1), !v27 ? (float v26 = v21 + v23) : (float v26 = INFINITY), v26 >= a7))
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Dropping path due to cut-off.", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
    }
    uint64_t v29 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      float v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Expanding path with nextState=", 30);
      quasar::ptt::operator<<(v28);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
    }
    uint64_t v29 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Expand((uint64_t *)(a1 + 280), a5, a2, 0, 0, v24, v25, v26, v23 + *(float *)(a6 + 20));
  }
  if (a10)
  {
    unint64_t v30 = HIDWORD(v24);
    if (v29) {
      int v31 = v24;
    }
    else {
      int v31 = -1;
    }
    if (!v29) {
      LODWORD(v30) = -1;
    }
    *a10 = v31;
    a10[1] = v30;
    if (v29) {
      int v32 = v25;
    }
    else {
      int v32 = -1;
    }
    a10[2] = v32;
  }
  if (a11) {
    *a11 = v29;
  }
  if (a12) {
    *a12 = v26;
  }
  return 1;
}

void sub_1B23831C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(char *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      float v13 = a2;
      do
      {
        uint64_t v14 = *(void *)v13;
        if (*(float *)(*(void *)(*a4 + 8) + 36 * *(int *)(*(void *)v13 + 12) + 16) < *(float *)(*(void *)(*a4 + 8) + 36 * *(int *)(*(void *)a1 + 12) + 16))
        {
          *(void *)float v13 = *(void *)a1;
          *(void *)a1 = v14;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>((uint64_t)a1, a4, v9, a1);
        }
        v13 += 8;
      }
      while (v13 != a3);
    }
    if (v8 >= 9)
    {
      uint64_t v15 = (unint64_t)v8 >> 3;
      float v16 = a2 - 8;
      do
      {
        uint64_t v17 = *(void *)a1;
        BOOL v18 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(a1, (uint64_t)a4, v15);
        if (v16 == v18)
        {
          *(void *)BOOL v18 = v17;
        }
        else
        {
          *(void *)BOOL v18 = *(void *)v16;
          *(void *)float v16 = v17;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>((uint64_t)a1, (uint64_t)(v18 + 8), (uint64_t)a4, (v18 + 8 - a1) >> 3);
        }
        v16 -= 8;
      }
      while (v15-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(uint64_t result, uint64_t *a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) | 1;
      uint64_t v8 = (void *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      uint64_t v10 = *a2;
      if (v9 >= a3)
      {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        uint64_t v11 = *(void *)(v10 + 8);
        if (*(float *)(v11 + 36 * *(int *)(*v8 + 12) + 16) < *(float *)(v11 + 36 * *(int *)(v8[1] + 12) + 16))
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      uint64_t v12 = *v8;
      uint64_t v13 = *a4;
      int v14 = *(_DWORD *)(*a4 + 12);
      if (*(float *)(v11 + 36 * *(int *)(*v8 + 12) + 16) >= *(float *)(v11 + 36 * v14 + 16))
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 8 * v7);
          uint64_t v16 = v15 + 2;
          uint64_t v17 = *a2;
          if (v16 >= a3)
          {
            uint64_t v18 = *(void *)(v17 + 8);
          }
          else
          {
            uint64_t v18 = *(void *)(v17 + 8);
            if (*(float *)(v18 + 36 * *(int *)(*v8 + 12) + 16) < *(float *)(v18 + 36 * *(int *)(v8[1] + 12) + 16))
            {
              ++v8;
              uint64_t v7 = v16;
            }
          }
          uint64_t v12 = *v8;
        }
        while (*(float *)(v18 + 36 * *(int *)(*v8 + 12) + 16) >= *(float *)(v18 + 36 * v14 + 16));
        *a4 = v13;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    result += v3 + 1;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3
      && *(float *)(*(void *)(*(void *)a2 + 8) + 36 * *(int *)(*result + 12) + 16) < *(float *)(*(void *)(*(void *)a2 + 8) + 36 * *(int *)(result[1] + 12) + 16))
    {
      ++result;
      uint64_t v3 = v8;
    }
    void *v6 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    int v10 = *(_DWORD *)(v9 + 12);
    if (*(float *)(*(void *)(*(void *)a3 + 8) + 36 * *(int *)(*v5 + 12) + 16) < *(float *)(*(void *)(*(void *)a3 + 8) + 36 * v10 + 16))
    {
      do
      {
        uint64_t v11 = v5;
        void *v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v11;
      }
      while (*(float *)(*(void *)(*(void *)a3 + 8) + 36 * *(int *)(*v5 + 12) + 16) < *(float *)(*(void *)(*(void *)a3 + 8) + 36 * v10 + 16));
      *uint64_t v11 = v8;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v10 = (unint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    int v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v22 = *(a2 - 1);
          unint64_t v23 = *v11;
          if (v22 < *v11)
          {
            *uint64_t v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, a2 - 1);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, v11 + 2, a2 - 1);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,fst::LatticeStringRepository<int>::Entry const**>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11, &v11[v15 >> 1], a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11 + 1, v17 - 1, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v11 + 2, &v11[v16 + 1], a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v17 - 1, v17, &v11[v16 + 1]);
      unint64_t v18 = *v11;
      *uint64_t v11 = *v17;
      unint64_t *v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(&v11[v15 >> 1], v11, a2 - 1);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(v11 - 1) >= *v11)
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v11, (uint64_t *)a2);
      uint64_t v11 = (unint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    float v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>(v11, v19);
    uint64_t v11 = v19 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>(v19 + 1, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **,false>(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  unint64_t v24 = v11 + 1;
  BOOL v26 = v11 == a2 || v24 == a2;
  if (a5)
  {
    if (!v26)
    {
      uint64_t v27 = 0;
      float v28 = v11;
      do
      {
        unint64_t v30 = *v28;
        unint64_t v29 = v28[1];
        float v28 = v24;
        if (v29 < v30)
        {
          uint64_t v31 = v27;
          while (1)
          {
            *(unint64_t *)((char *)v11 + v31 + 8) = v30;
            if (!v31) {
              break;
            }
            unint64_t v30 = *(unint64_t *)((char *)v11 + v31 - 8);
            v31 -= 8;
            if (v29 >= v30)
            {
              int v32 = (unint64_t *)((char *)v11 + v31 + 8);
              goto LABEL_50;
            }
          }
          int v32 = v11;
LABEL_50:
          *int v32 = v29;
        }
        unint64_t v24 = v28 + 1;
        v27 += 8;
      }
      while (v28 + 1 != a2);
    }
  }
  else if (!v26)
  {
    do
    {
      unint64_t v34 = *v10;
      unint64_t v33 = v10[1];
      int v10 = v24;
      if (v33 < v34)
      {
        do
        {
          unint64_t *v24 = v34;
          unint64_t v34 = *(v24 - 2);
          --v24;
        }
        while (v33 < v34);
        unint64_t *v24 = v33;
      }
      unint64_t v24 = v10 + 1;
    }
    while (v10 + 1 != a2);
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 1);
      unint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    unint64_t v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        unint64_t v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          unint64_t v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      unint64_t *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,false>(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, float *a8, int a9, uint64_t a10, uint64_t a11, float *a12)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    float v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Evaluating to expand path with graph arc ", 41);
    char v20 = quasar::ptt::operator<<(v19, (uint64_t)a8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" w.r.t. observation ", 20);
    BOOL v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
  }
  float v22 = a8[2];
  float v23 = *(float *)(a1 + 24) * v22;
  if (a6)
  {
    float v24 = NAN;
    if (v23 != -INFINITY)
    {
      float v25 = *(float *)(a7 + 16);
      if (v25 != -INFINITY)
      {
        BOOL v26 = v25 == INFINITY || v23 == INFINITY;
        float v27 = v23 + v25;
        if (v26) {
          float v24 = INFINITY;
        }
        else {
          float v24 = v27;
        }
      }
    }
    if (!a9) {
      goto LABEL_18;
    }
  }
  else
  {
    float v24 = *(float *)(a1 + 24) * v22;
    if (!a9) {
      goto LABEL_18;
    }
  }
  if (*(unsigned char *)(a1 + 28) && v24 > a3) {
    return 0;
  }
LABEL_18:
  float v29 = *(float *)(*(void *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2 + 4 * *(int *)a8);
  if (quasar::gLogLevel >= 6)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
  }
  float v30 = NAN;
  if (v24 != -INFINITY && v29 != -INFINITY)
  {
    if (v29 == INFINITY || v24 == INFINITY) {
      float v30 = INFINITY;
    }
    else {
      float v30 = v24 + v29;
    }
  }
  if (a12) {
    *a12 = v30;
  }
  return 1;
}

void sub_1B2383D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::emplace_back<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v13];
    uint64_t v16 = *(void *)(a2 + 8);
    *((void *)v15 + 1) = v16;
    ++*(_DWORD *)(v16 + 56);
    *(void *)uint64_t v15 = &unk_1F0A45D90;
    void v18[2] = v15 + 16;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 8);
    v7[1] = v8;
    ++*(_DWORD *)(v8 + 56);
    void *v7 = &unk_1F0A45D90;
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_1B2383ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetPath()
{
}

void sub_1B2384300(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, float *a2, uint64_t a3, float k)
{
  if ((float *)a3 == a2) {
    return;
  }
  uint64_t v4 = a3;
  while (1)
  {
    unint64_t v7 = (v4 - a1) >> 3;
    if (v7 < 2) {
      return;
    }
    if (v7 == 3)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, v4 - 8);
      return;
    }
    if (v7 == 2)
    {
      float v40 = *(float *)(v4 - 8);
      float v41 = *(float *)a1;
      if (v40 >= *(float *)a1)
      {
        if (v41 < v40) {
          return;
        }
        int v43 = *(_DWORD *)(v4 - 4);
        int v42 = *(_DWORD *)(a1 + 4);
        if (v43 >= v42) {
          return;
        }
      }
      else
      {
        int v42 = *(_DWORD *)(a1 + 4);
        int v43 = *(_DWORD *)(v4 - 4);
      }
      *(float *)a1 = v40;
      *(float *)(v4 - 8) = v41;
      *(_DWORD *)(a1 + 4) = v43;
      *(_DWORD *)(v4 - 4) = v42;
      return;
    }
    if (v4 - a1 <= 63)
    {
      std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>(a1, v4, k);
      return;
    }
    unint64_t v8 = v7 >> 1;
    uint64_t v9 = a1 + 8 * (v7 >> 1);
    unint64_t v10 = v4 - 8;
    int v11 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, v9, v4 - 8);
    k = *(float *)a1;
    float v12 = *(float *)v9;
    if (*(float *)a1 < *(float *)v9 || v12 >= k && *(_DWORD *)(a1 + 4) < *(_DWORD *)(a1 + 8 * v8 + 4))
    {
      unint64_t v13 = v4 - 8;
      goto LABEL_9;
    }
    unint64_t v13 = v4 - 16;
    if (a1 != v4 - 16)
    {
      while (1)
      {
        float v20 = *(float *)v13;
        if (*(float *)v13 < v12 || v12 >= v20 && *(_DWORD *)(v13 + 4) < *(_DWORD *)(a1 + 8 * v8 + 4)) {
          break;
        }
        v13 -= 8;
        if (v13 == a1) {
          goto LABEL_32;
        }
      }
      *(float *)a1 = v20;
      *(float *)unint64_t v13 = k;
      int v32 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(v13 + 4);
      *(_DWORD *)(v13 + 4) = v32;
      ++v11;
LABEL_9:
      if (a1 + 8 >= v13)
      {
        uint64_t i = 1;
      }
      else
      {
        for (uint64_t i = 1; ; ++i)
        {
          float v15 = *(float *)v9;
          for (unint64_t j = a1 + 8 * i; ; j += 8)
          {
            k = *(float *)j;
            if (*(float *)j >= v15 && (v15 < k || *(_DWORD *)(j + 4) >= *(_DWORD *)(v9 + 4))) {
              break;
            }
            ++i;
          }
          uint64_t v17 = (float *)(v13 - 8);
          float v18 = *(float *)(v13 - 8);
          if (v18 >= v15)
          {
            do
            {
              if (v15 >= v18 && *(_DWORD *)(v13 - 4) < *(_DWORD *)(v9 + 4)) {
                break;
              }
              float v18 = *(float *)(v13 - 16);
              v13 -= 8;
            }
            while (v18 >= v15);
            uint64_t v17 = (float *)(v13 - 8);
          }
          if (j >= (unint64_t)v17) {
            break;
          }
          *(float *)unint64_t j = v18;
          float *v17 = k;
          int v19 = *(_DWORD *)(j + 4);
          *(_DWORD *)(j + 4) = *(_DWORD *)(v13 - 4);
          *(_DWORD *)(v13 - 4) = v19;
          ++v11;
          if (j == v9) {
            uint64_t v9 = (uint64_t)v17;
          }
          unint64_t v13 = (unint64_t)v17;
        }
      }
      float v25 = (float *)(a1 + 8 * i);
      if (v25 == (float *)v9) {
        goto LABEL_47;
      }
      k = *(float *)v9;
      float v26 = *v25;
      if (*(float *)v9 >= *v25)
      {
        if (v26 < k) {
          goto LABEL_47;
        }
        int v28 = *(_DWORD *)(v9 + 4);
        int v27 = *(_DWORD *)(a1 + 8 * i + 4);
        if (v28 >= v27) {
          goto LABEL_47;
        }
      }
      else
      {
        int v27 = *(_DWORD *)(a1 + 8 * i + 4);
        int v28 = *(_DWORD *)(v9 + 4);
      }
      *float v25 = k;
      *(float *)uint64_t v9 = v26;
      *(_DWORD *)(a1 + 8 * i + 4) = v28;
      *(_DWORD *)(v9 + 4) = v27;
      ++v11;
LABEL_47:
      if (v25 == a2) {
        return;
      }
      if (!v11)
      {
        if (v25 <= a2)
        {
          long long v33 = v25 + 2;
          if (v25 + 2 == (float *)v4) {
            return;
          }
          float v34 = *v25;
          while (1)
          {
            k = *v33;
            if (*v33 < v34 || v34 >= k && *((_DWORD *)v33 + 1) < *((_DWORD *)v33 - 1)) {
              break;
            }
            v33 += 2;
            float v34 = k;
            if (v33 == (float *)v4) {
              return;
            }
          }
        }
        else
        {
          if (i == 1) {
            return;
          }
          float v29 = (float *)(a1 + 12);
          float v30 = *(float *)a1;
          uint64_t v31 = 8 * i - 8;
          while (1)
          {
            k = *(v29 - 1);
            if (k < v30 || v30 >= k && *(_DWORD *)v29 < *((_DWORD *)v29 - 2)) {
              break;
            }
            v29 += 2;
            float v30 = k;
            v31 -= 8;
            if (!v31) {
              return;
            }
          }
        }
      }
      BOOL v21 = v25 + 2;
      if (v25 > a2)
      {
        uint64_t v4 = (uint64_t)v25;
        BOOL v21 = (float *)a1;
      }
      goto LABEL_82;
    }
LABEL_32:
    BOOL v21 = (float *)(a1 + 8);
    float v22 = *(float *)v10;
    if (k >= *(float *)v10 && (v22 < k || *(_DWORD *)(a1 + 4) >= *(_DWORD *)(v4 - 4))) {
      break;
    }
LABEL_70:
    if (v21 == (float *)v10) {
      return;
    }
    while (1)
    {
      float v35 = *(float *)a1;
      for (k = *v21; v35 >= k && (k < v35 || *(_DWORD *)(a1 + 4) >= *((_DWORD *)v21 + 1)); k = v36)
      {
        float v36 = v21[2];
        v21 += 2;
      }
      do
      {
        do
        {
          float v37 = *(float *)(v10 - 8);
          v10 -= 8;
          float v38 = v37;
        }
        while (v35 < v37);
      }
      while (v38 >= v35 && *(_DWORD *)(a1 + 4) < *(_DWORD *)(v10 + 4));
      if ((unint64_t)v21 >= v10) {
        break;
      }
      float *v21 = v38;
      *(float *)unint64_t v10 = k;
      int v39 = *((_DWORD *)v21 + 1);
      v21[1] = *(float *)(v10 + 4);
      *(_DWORD *)(v10 + 4) = v39;
      v21 += 2;
    }
    if (v21 > a2) {
      return;
    }
LABEL_82:
    a1 = (uint64_t)v21;
    if ((float *)v4 == a2) {
      return;
    }
  }
  while (v21 != (float *)v10)
  {
    float v23 = *v21;
    if (k < *v21)
    {
      int v24 = *((_DWORD *)v21 + 1);
LABEL_69:
      float *v21 = v22;
      *(float *)(v4 - 8) = v23;
      v21[1] = *(float *)(v4 - 4);
      *(_DWORD *)(v4 - 4) = v24;
      v21 += 2;
      goto LABEL_70;
    }
    if (v23 >= k)
    {
      int v24 = *((_DWORD *)v21 + 1);
      if (*(_DWORD *)(a1 + 4) < v24) {
        goto LABEL_69;
      }
    }
    v21 += 2;
  }
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, uint64_t a2, float result)
{
  while (a1 != a2 - 8)
  {
    uint64_t v3 = a1;
    a1 += 8;
    if (v3 != a2 && a1 != a2)
    {
      uint64_t v4 = a1;
      uint64_t v5 = v3;
      do
      {
        BOOL result = *(float *)v4;
        if (*(float *)v4 < *(float *)v5 || *(float *)v5 >= result && *(_DWORD *)(v4 + 4) < *(_DWORD *)(v5 + 4)) {
          uint64_t v5 = v4;
        }
        v4 += 8;
      }
      while (v4 != a2);
      if (v5 != v3)
      {
        BOOL result = *(float *)v3;
        *(_DWORD *)uint64_t v3 = *(_DWORD *)v5;
        *(float *)uint64_t v5 = result;
        int v6 = *(_DWORD *)(v3 + 4);
        *(_DWORD *)(v3 + 4) = *(_DWORD *)(v5 + 4);
        *(_DWORD *)(v5 + 4) = v6;
      }
    }
  }
  return result;
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::DecoderImpl(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F0A1CAC0;
  long long v6 = *a2;
  long long v7 = a2[1];
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  *(void *)(a1 + 48) = &unk_1F0A58D20;
  kaldi::Matrix<float>::Matrix(a1 + 56, a3 + 8);
  *(void *)(a1 + 96) = *(void *)a4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a4 + 8);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  quasar::ptt::DynamicArrayPartialPathStorage<quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>>::DynamicArrayPartialPathStorage((unint64_t *)(a1 + 128), *(int *)(a1 + 40));
}

void sub_1B2384A60(_Unwind_Exception *a1)
{
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier(v7);
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](v6);
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](v5);
  uint64_t v10 = *(void *)(v4 + 136);
  if (v10) {
    MEMORY[0x1B3EA8630](v10, 0x1000C808AA14F5FLL);
  }
  quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~DynamicGraph(v3);
  *unint64_t v8 = v1;
  kaldi::Matrix<float>::~Matrix(v2);
  _Unwind_Resume(a1);
}

double quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::operator()@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  if (*(int *)(a1 + 16) > 0 || *(int *)(a1 + 20) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    uint64_t v4 = (void *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Maximum queue size is unsupported for deque queue implementation", 64);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  double result = 0.0;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return result;
}

void sub_1B2384B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(void *a1)
{
  *a1 = &unk_1F0A1CAC0;
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier((uint64_t)(a1 + 31));
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](a1 + 25);
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](a1 + 19);
  uint64_t v2 = a1[17];
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C808AA14F5FLL);
  }
  uint64_t v3 = a1[15];
  a1[15] = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x10E0C4059286A48);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[14];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  a1[6] = &unk_1F0A58D20;
  kaldi::Matrix<float>::~Matrix((uint64_t)(a1 + 7));
  return a1;
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(void *a1)
{
  *a1 = &unk_1F0A1CAC0;
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier((uint64_t)(a1 + 31));
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](a1 + 25);
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](a1 + 19);
  uint64_t v2 = a1[17];
  if (v2) {
    MEMORY[0x1B3EA8630](v2, 0x1000C808AA14F5FLL);
  }
  uint64_t v3 = a1[15];
  a1[15] = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x10E0C4059286A48);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[14];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  a1[6] = &unk_1F0A58D20;
  kaldi::Matrix<float>::~Matrix((uint64_t)(a1 + 7));
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::decode(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 272);
  if (v10 != -1)
  {
    uint64_t v11 = *(void *)(a1 + 288);
    do
    {
      float v12 = (uint64_t *)(v11 + 16 * v10);
      v12[1] = 0;
      uint64_t v10 = *v12;
    }
    while (v10 != -1);
  }
  uint64_t v13 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = -1;
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 312);
    do
    {
      uint64_t v15 = v13;
      uint64_t v13 = *(void *)(v13 + 16);
      *(void *)(v15 + 16) = v14;
      uint64_t v14 = v15;
    }
    while (v13);
    *(void *)(a1 + 312) = v15;
  }
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 2139095040;
  uint64_t v16 = *(void ***)(a1 + 160);
  uint64_t v17 = *(void *)(a1 + 168);
  *(void *)(a1 + 192) = 0;
  unint64_t v18 = v17 - (void)v16;
  if (v18 >= 0x11)
  {
    do
    {
      operator delete(*v16);
      uint64_t v19 = *(void *)(a1 + 168);
      uint64_t v16 = (void **)(*(void *)(a1 + 160) + 8);
      *(void *)(a1 + 160) = v16;
      unint64_t v18 = v19 - (void)v16;
    }
    while (v18 > 0x10);
  }
  if (v18 >> 3 == 1)
  {
    uint64_t v20 = 170;
  }
  else
  {
    if (v18 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v20 = 341;
  }
  *(void *)(a1 + 184) = v20;
LABEL_15:
  BOOL v21 = *(void ***)(a1 + 208);
  uint64_t v22 = *(void *)(a1 + 216);
  *(void *)(a1 + 240) = 0;
  unint64_t v23 = v22 - (void)v21;
  if (v23 >= 0x11)
  {
    do
    {
      operator delete(*v21);
      uint64_t v24 = *(void *)(a1 + 216);
      BOOL v21 = (void **)(*(void *)(a1 + 208) + 8);
      *(void *)(a1 + 208) = v21;
      unint64_t v23 = v24 - (void)v21;
    }
    while (v23 > 0x10);
  }
  if (v23 >> 3 == 1)
  {
    uint64_t v25 = 170;
  }
  else
  {
    if (v23 >> 3 != 2) {
      goto LABEL_22;
    }
    uint64_t v25 = 341;
  }
  *(void *)(a1 + 232) = v25;
LABEL_22:
  *(void *)(a1 + 144) = 0;
  unsigned int v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 24))(*(void *)(a1 + 96));
  unsigned int v27 = (***(uint64_t (****)(void))(a1 + 104))();
  LODWORD(v50) = 0;
  *(void *)((char *)&v50 + 4) = v26 | ((unint64_t)v27 << 32);
  int v28 = *(void **)(a1 + 248);
  uint64_t v29 = v28[2];
  if ((unint64_t)(v29 + 1) >= *v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::ptt::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
  long long v47 = a4;
  uint64_t v30 = v50;
  v28[2] = v29 + 1;
  uint64_t v31 = v28[1] + 36 * (int)v29;
  *(_DWORD *)uint64_t v31 = v29;
  *(void *)(v31 + 12) = 0;
  *(void *)(v31 + 4) = 0;
  *(_DWORD *)(v31 + 20) = 0;
  *(void *)(v31 + 24) = v30;
  *(_DWORD *)(v31 + 32) = v27;
  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert((uint64_t *)(a1 + 264), v30, v27, v29);
  ++*(void *)(a1 + 344);
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(a1, *(float *)(a1 + 8));
  if (quasar::gLogLevel >= 6)
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Frontier after ProcessNonemitting size=", 39);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v50);
  }
  unint64_t v46 = a3;
  uint64_t v32 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v33 = 0;
    int v34 = quasar::gLogLevel;
    do
    {
      if (v34 >= 6)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v50 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Processing frame ", 17);
        float v35 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" with observation ", 18);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v50);
        uint64_t v32 = *a2;
      }
      float v36 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessEmitting(a1, *(_DWORD *)(v32 + 4 * v33));
      if (quasar::gLogLevel >= 6)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v50 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Frontier after ProcessEmitting size=", 36);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v50);
      }
      if (a5)
      {
        long long v50 = 0uLL;
        *(void *)&long long v51 = 0;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t *)&v50, 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "AfterProcessEmitting");
        std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::operator()(a5, v33);
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = &v50;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(a1, v36);
      if (quasar::gLogLevel >= 6)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v50 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Frontier after ProcessNonemitting size=", 39);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v50);
      }
      if (a5)
      {
        long long v50 = 0uLL;
        *(void *)&long long v51 = 0;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t *)&v50, 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "AfterProcessNonemitting");
        std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::operator()(a5, v33);
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = &v50;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      int v34 = quasar::gLogLevel;
      if (quasar::gLogLevel >= 6)
      {
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v50 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"NumPaths=", 9);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v50);
        int v34 = quasar::gLogLevel;
      }
      ++v33;
      uint64_t v32 = *a2;
    }
    while (v33 != (a2[1] - *a2) >> 2);
  }
  if (a5)
  {
    long long v50 = 0uLL;
    *(void *)&long long v51 = 0;
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 1, (uint64_t *)&v50, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "AfterDecoding");
    std::function<void ()(unsigned long,std::string const&,std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>> const&)>::operator()(a5, -1);
    if (v49 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = &v50;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (a4)
  {
    uint64_t v38 = *a4;
    uint64_t v37 = v47[1];
    if (v37 != *v47)
    {
      uint64_t v39 = v37 - 16;
      float v40 = (void (***)(void))(v37 - 16);
      float v41 = (void (***)(void))(v37 - 16);
      do
      {
        int v42 = *v41;
        v41 -= 2;
        (*v42)(v40);
        v39 -= 16;
        BOOL v43 = v40 == (void (***)(void))v38;
        float v40 = v41;
      }
      while (!v43);
    }
    v47[1] = v38;
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, v46, 1, v47, 0);
  }
  return 1;
}

void sub_1B23853E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void sub_1B238544C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::string __p = &a18;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (a2 == 1)
  {
    uint64_t v25 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&a18, "INFO");
    unsigned int v26 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&a18);
    unsigned int v27 = (void *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Max tokens ", 11);
    int v28 = (void *)std::ostream::operator<<();
    uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" exceeded - ", 12);
    uint64_t v30 = (const char *)(*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
    size_t v31 = strlen(v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
    if (a23 < 0) {
      operator delete(a18);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B2385388);
  }
  JUMPOUT(0x1B238542CLL);
}

void sub_1B23854A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2 == 1)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    BOOL v21 = fst::LogMessage::LogMessage((fst *)&a12, (uint64_t)&__p);
    uint64_t v22 = (void *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Max tokens ", 11);
    unint64_t v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" exceeded - ", 12);
    uint64_t v25 = (const char *)(*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
    size_t v26 = strlen(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
    if (a20 < 0) {
      operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1B2385388);
  }
  JUMPOUT(0x1B238542CLL);
}

void sub_1B23854AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  JUMPOUT(0x1B23854BCLL);
}

void sub_1B2385580(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B238542CLL);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Frontier(uint64_t a1, uint64_t a2, float a3)
{
  *(void *)a1 = a2;
  *(float *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1B2565910;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, 0x3E8uLL);
  return a1;
}

void sub_1B2385620(_Unwind_Exception *a1)
{
  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::~HashList(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 170;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    char v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(uint64_t a1, float a2)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Process non-emitting with cutoff=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v69);
  }
  uint64_t v6 = *(void *)(a1 + 264);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v2 = 36;
    do
    {
      if (*(float *)(*(void *)(a1 + 136) + 36 * *(int *)(v6 + 12) + 16) <= a2)
      {
        ++v7;
        std::deque<std::pair<int,std::pair<int,int>>>::push_back((void *)(a1 + 152), (uint64_t *)v6);
      }
      uint64_t v6 = *(void *)(v6 + 16);
    }
    while (v6);
  }
  if (quasar::gLogLevel > 5)
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Process non-emitting considered ", 32);
    char v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" initial states.", 16);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v69);
  }
  uint64_t v9 = *(void *)(a1 + 192);
  if (v9)
  {
    uint64_t v10 = v9 - 1;
    unint64_t v11 = *(void *)(*(void *)(a1 + 160) + 8 * ((*(void *)(a1 + 184) + v10) / 0x155uLL))
        + 12 * ((*(void *)(a1 + 184) + v10) % 0x155uLL);
    unint64_t v12 = *(void *)v11;
    int v13 = *(_DWORD *)(v11 + 8);
    *(void *)(a1 + 192) = v10;
    uint64_t v14 = (void *)(a1 + 152);
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 240);
    if (!v15)
    {
      int v13 = -1;
      unint64_t v12 = -1;
      goto LABEL_15;
    }
    uint64_t v16 = v15 - 1;
    unint64_t v17 = *(void *)(*(void *)(a1 + 208) + 8 * ((*(void *)(a1 + 232) + v16) / 0x155uLL))
        + 12 * ((*(void *)(a1 + 232) + v16) % 0x155uLL);
    unint64_t v12 = *(void *)v17;
    int v13 = *(_DWORD *)(v17 + 8);
    *(void *)(a1 + 240) = v16;
    uint64_t v14 = (void *)(a1 + 200);
  }
  std::deque<std::pair<int,std::pair<int,int>>>::__maybe_remove_back_spare[abi:ne180100](v14, 1);
LABEL_15:
  uint64_t v67 = v12;
  unint64_t v18 = HIDWORD(v12);
  while (1)
  {
    int v68 = v13;
    if (v12 == -1 && v18 == -1 && v13 == -1) {
      break;
    }
    uint64_t v19 = v67;
    int v20 = 73244475 * ((73244475 * (v67 ^ ((int)v67 >> 16))) ^ ((int)(73244475 * (v67 ^ ((int)v67 >> 16))) >> 16));
    unint64_t v21 = (((v20 ^ (v20 >> 16)) - 1640531527) ^ 3u) + 192;
    int v22 = 73244475
        * ((73244475 * ((v67 >> 48) ^ HIDWORD(v67))) ^ ((int)(73244475 * ((v67 >> 48) ^ HIDWORD(v67))) >> 16));
    unint64_t v23 = ((v22 ^ (v22 >> 16)) - 1640531527 + (v21 << 6) + (v21 >> 2)) ^ v21;
    int v24 = 73244475 * ((73244475 * (v13 ^ (v13 >> 16))) ^ ((73244475 * (v13 ^ (v13 >> 16))) >> 16));
    unint64_t v25 = ((v24 ^ (v24 >> 16)) - 1640531527 + (v23 << 6) + (v23 >> 2)) ^ v23;
    uint64_t v26 = *(void *)(a1 + 288);
    uint64_t v27 = *(void *)(v26 + 16 * (v25 % *(void *)(a1 + 280)));
    int v28 = (_DWORD **)(a1 + 264);
    if (v27 != -1) {
      int v28 = (_DWORD **)(*(void *)(v26 + 16 * v27 + 8) + 16);
    }
    uint64_t v29 = v13;
    while (1)
    {
      uint64_t v30 = *v28;
      if (*v30 == v67 && v30[1] == HIDWORD(v67) && v30[2] == v13) {
        break;
      }
      int v28 = (_DWORD **)(v30 + 4);
    }
    int v32 = v30[3];
    uint64_t v33 = *(void *)(a1 + 136);
    uint64_t v34 = v33 + 36 * v32;
    if (quasar::gLogLevel >= 6)
    {
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
      float v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Considering ", 12);
      float v36 = quasar::ptt::operator<<(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" (ID: ", 6);
      uint64_t v37 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)").", 2);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v69);
    }
    if (*(float *)(v33 + 36 * v32 + 16) <= a2)
    {
      uint64_t v38 = *(void *)(a1 + 120);
      if (!v38) {
        operator new();
      }
      int v39 = v68;
      uint64_t v41 = *(void *)(v38 + 48);
      uint64_t v40 = v38 + 48;
      *(_DWORD *)(v40 - 32) = HIDWORD(v67);
      *(_DWORD *)(v40 - 28) = v39;
      *(_DWORD *)(v40 - 24) = v39;
      (*(void (**)(void))(v41 + 16))();
      uint64_t v42 = *(void *)(a1 + 120);
      if (*(void *)(v42 + 96) < *(void *)(v42 + 88))
      {
        while (1)
        {
          uint64_t v43 = *(unsigned int *)(v42 + 76);
          if (v43)
          {
            (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v42 + 8) + 32))(*(void *)(v42 + 8), *(unsigned int *)(v42 + 24), v43, v42 + 28);
            float v44 = *(float *)(v42 + 80);
            float v45 = NAN;
            if (v44 != -INFINITY)
            {
              float v46 = *(float *)(v42 + 36);
              float v45 = NAN;
              if (v46 != -INFINITY)
              {
                float v45 = INFINITY;
                BOOL v47 = v46 == INFINITY || v44 == INFINITY;
                float v48 = v44 + v46;
                if (!v47) {
                  float v45 = v48;
                }
              }
            }
            unsigned int v49 = *(_DWORD *)(v42 + 72);
            int v50 = *(_DWORD *)(v42 + 32);
            *(_DWORD *)(v42 + 112) = v49;
            *(_DWORD *)(v42 + 116) = v50;
            long long v51 = (int *)(v42 + 40);
          }
          else
          {
            unsigned int v49 = *(_DWORD *)(v42 + 72);
            *(void *)(v42 + 112) = v49;
            float v45 = *(float *)(v42 + 80);
            long long v51 = (int *)(v42 + 24);
          }
          *(float *)(v42 + 120) = v45;
          int v52 = *v51;
          *(_DWORD *)(v42 + 124) = *(_DWORD *)(v42 + 84);
          *(_DWORD *)(v42 + 128) = v52;
          if (quasar::gLogLevel >= 6)
          {
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v69 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
            long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Considering expanding ", 22);
            long long v54 = quasar::ptt::operator<<(v53, v42 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v69);
            unsigned int v49 = *(_DWORD *)(v42 + 112);
          }
          if (*(unsigned char *)(a1 + 29) && !v49) {
            break;
          }
          uint64_t v65 = -1;
          int v66 = -1;
          unint64_t v2 = v2 & 0xFFFFFFFF00000000 | v29;
          if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, 0, a2, v19, v2, v32, v34, (int *)(v42 + 112), 1, (int *)&v65, 0, 0) & 1) == 0)
          {
            if (quasar::gLogLevel >= 6)
            {
              long long v84 = 0u;
              long long v85 = 0u;
              long long v82 = 0u;
              long long v83 = 0u;
              long long v80 = 0u;
              long long v81 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              long long v76 = 0u;
              long long v77 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              long long v72 = 0u;
              long long v73 = 0u;
              long long v70 = 0u;
              long long v71 = 0u;
              long long v69 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Exiting arc-loop early.", 23);
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v69);
            }
            goto LABEL_65;
          }
          if (quasar::gLogLevel >= 6)
          {
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v69 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
            long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Arc expansion led to next state ", 32);
            long long v57 = quasar::ptt::operator<<(v56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v69);
          }
          if (v65 != -1 || v66 != -1)
          {
            long long v55 = &v65;
LABEL_56:
            std::deque<std::pair<int,std::pair<int,int>>>::push_front(a1 + 200, v55);
          }
LABEL_57:
          ++*(void *)(v42 + 96);
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v42 + 48);
          if (*(void *)(v42 + 96) >= *(void *)(v42 + 88)) {
            goto LABEL_65;
          }
        }
        *(void *)&long long v69 = -1;
        DWORD2(v69) = -1;
        unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v29;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, 0, a2, v19, v3, v32, v34, (int *)(v42 + 112), 0, (int *)&v69, 0, 0);
        if ((void)v69 == -1 && DWORD2(v69) == -1) {
          goto LABEL_57;
        }
        long long v55 = (uint64_t *)&v69;
        goto LABEL_56;
      }
    }
LABEL_65:
    uint64_t v58 = *(void *)(a1 + 192);
    if (v58)
    {
      uint64_t v59 = v58 - 1;
      unint64_t v60 = *(void *)(*(void *)(a1 + 160) + 8 * ((*(void *)(a1 + 184) + v59) / 0x155uLL))
          + 12 * ((*(void *)(a1 + 184) + v59) % 0x155uLL);
      unint64_t v12 = *(void *)v60;
      int v13 = *(_DWORD *)(v60 + 8);
      *(void *)(a1 + 192) = v59;
      long long v61 = (void *)(a1 + 152);
LABEL_69:
      std::deque<std::pair<int,std::pair<int,int>>>::__maybe_remove_back_spare[abi:ne180100](v61, 1);
      goto LABEL_70;
    }
    uint64_t v62 = *(void *)(a1 + 240);
    if (v62)
    {
      uint64_t v63 = v62 - 1;
      unint64_t v64 = *(void *)(*(void *)(a1 + 208) + 8 * ((*(void *)(a1 + 232) + v63) / 0x155uLL))
          + 12 * ((*(void *)(a1 + 232) + v63) % 0x155uLL);
      unint64_t v12 = *(void *)v64;
      int v13 = *(_DWORD *)(v64 + 8);
      *(void *)(a1 + 240) = v63;
      long long v61 = (void *)(a1 + 200);
      goto LABEL_69;
    }
    int v13 = -1;
    unint64_t v12 = -1;
LABEL_70:
    unint64_t v18 = HIDWORD(v12);
    uint64_t v67 = v12;
  }
}

void sub_1B2385FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

float quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessEmitting(uint64_t a1, int a2)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Process emitting with observation ", 34);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
  }
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::NextIteration(a1 + 248, (uint64_t)v64);
  uint64_t v5 = v64[0];
  uint64_t v4 = v64[1];
  float v6 = v65;
  if (quasar::gLogLevel >= 6)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"prevFrontierBestHashListElement=", 32);
    uint64_t v7 = (void *)std::ostream::operator<<();
    char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"prevFrontierBestCost=", 21);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
  }
  float v9 = *(float *)(a1 + 8);
  if ((LODWORD(v6) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v10 = 1.0e10;
  }
  else {
    float v10 = v6;
  }
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(a1, v5, &__p);
  float WeightCutoffUpperBound = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ComputeNextWeightCutoffUpperBound(a1, v4, a2);
  float v12 = v10 + v9;
  if (quasar::gLogLevel >= 6)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"adaptiveBeam=", 13);
    int v13 = (void *)std::ostream::operator<<();
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"weightCutoff=", 13);
    uint64_t v15 = (void *)std::ostream::operator<<();
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"nextWeightCutoffUpperBound=", 27);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
  }
  unint64_t v17 = v63;
  if (v63 != __p)
  {
    uint64_t v55 = 0;
    unint64_t v18 = 0;
    unint64_t v17 = __p;
    do
    {
      uint64_t v19 = v17[v18];
      *(void *)long long v61 = *(void *)v19;
      int v20 = *(_DWORD *)(v19 + 12);
      *(_DWORD *)&v61[8] = *(_DWORD *)(v19 + 8);
      uint64_t v21 = *(void *)(a1 + 136);
      uint64_t v58 = v21 + 36 * v20;
      int v59 = v20;
      if (quasar::gLogLevel >= 6)
      {
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v70 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
        int v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Considering ", 12);
        unint64_t v23 = quasar::ptt::operator<<(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" with ID ", 9);
        int v24 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
      }
      float v25 = *(float *)(v21 + 36 * v59 + 16);
      if (v25 < v12 && v25 < WeightCutoffUpperBound)
      {
        uint64_t v32 = *(void *)(a1 + 120);
        uint64_t v33 = HIDWORD(*(void *)&v61[4]);
        if (!v32) {
          operator new();
        }
        uint64_t v35 = *(void *)(v32 + 48);
        uint64_t v34 = v32 + 48;
        *(_DWORD *)(v34 - 32) = *(_DWORD *)&v61[4];
        *(_DWORD *)(v34 - 28) = v33;
        *(_DWORD *)(v34 - 24) = v33;
        (*(void (**)(void))(v35 + 16))();
        uint64_t v36 = v33;
        uint64_t v37 = *(void *)(a1 + 120);
        uint64_t v57 = *(void *)v61;
        while (*(void *)(v37 + 96) < *(void *)(v37 + 88))
        {
          uint64_t v38 = *(unsigned int *)(v37 + 76);
          if (v38)
          {
            (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v37 + 8) + 32))(*(void *)(v37 + 8), *(unsigned int *)(v37 + 24), v38, v37 + 28);
            float v39 = *(float *)(v37 + 80);
            float v40 = NAN;
            if (v39 != -INFINITY)
            {
              float v41 = *(float *)(v37 + 36);
              float v40 = NAN;
              if (v41 != -INFINITY)
              {
                float v40 = INFINITY;
                BOOL v42 = v41 == INFINITY || v39 == INFINITY;
                float v43 = v39 + v41;
                if (!v42) {
                  float v40 = v43;
                }
              }
            }
            unsigned int v44 = *(_DWORD *)(v37 + 72);
            int v45 = *(_DWORD *)(v37 + 32);
            *(_DWORD *)(v37 + 112) = v44;
            *(_DWORD *)(v37 + 116) = v45;
            float v46 = (int *)(v37 + 40);
          }
          else
          {
            unsigned int v44 = *(_DWORD *)(v37 + 72);
            *(void *)(v37 + 112) = v44;
            float v40 = *(float *)(v37 + 80);
            float v46 = (int *)(v37 + 24);
          }
          *(float *)(v37 + 120) = v40;
          int v47 = *v46;
          *(_DWORD *)(v37 + 124) = *(_DWORD *)(v37 + 84);
          *(_DWORD *)(v37 + 128) = v47;
          if (quasar::gLogLevel >= 6)
          {
            long long v81 = 0u;
            long long v82 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v70 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
            float v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Considering expanding ", 22);
            unsigned int v49 = quasar::ptt::operator<<(v48, v37 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
            unsigned int v44 = *(_DWORD *)(v37 + 112);
          }
          if (v44)
          {
            uint64_t v60 = 0;
            unint64_t v2 = v2 & 0xFFFFFFFF00000000 | v36;
            if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, a2, WeightCutoffUpperBound, v57, v2, v59, v58, (int *)(v37 + 112), 1, 0, &v60, 0) & 1) == 0)
            {
              if (quasar::gLogLevel >= 6)
              {
                long long v81 = 0u;
                long long v82 = 0u;
                long long v79 = 0u;
                long long v80 = 0u;
                long long v77 = 0u;
                long long v78 = 0u;
                long long v75 = 0u;
                long long v76 = 0u;
                long long v73 = 0u;
                long long v74 = 0u;
                long long v71 = 0u;
                long long v72 = 0u;
                long long v70 = 0u;
                long long v68 = 0u;
                long long v69 = 0u;
                long long v66 = 0u;
                long long v67 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Exiting arc-loop early.", 23);
                quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
              }
              break;
            }
            if (v60 && (float)(v9 + *(float *)(v60 + 16)) < WeightCutoffUpperBound) {
              float WeightCutoffUpperBound = v9 + *(float *)(v60 + 16);
            }
          }
          else if (quasar::gLogLevel >= 6)
          {
            long long v81 = 0u;
            long long v82 = 0u;
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            long long v75 = 0u;
            long long v76 = 0u;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v70 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
            int v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Skipping ", 9);
            long long v51 = quasar::ptt::operator<<(v50, v37 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" since it is an epsilon arc.", 28);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
          }
          ++*(void *)(v37 + 96);
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v37 + 48);
        }
        if (quasar::gLogLevel >= 6)
        {
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v70 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Considering the case where we ignore observation ", 49);
          int v52 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
        }
        *(void *)&long long v66 = 0;
        unint64_t v54 = v54 & 0xFFFFFFFF00000000 | v36;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<false,true>(a1, a2, v57, v36, v59, v58, WeightCutoffUpperBound, 0, 0, 0, (uint64_t *)&v66, 0);
        if ((void)v66 && (float)(v9 + *(float *)(v66 + 16)) < WeightCutoffUpperBound) {
          float WeightCutoffUpperBound = v9 + *(float *)(v66 + 16);
        }
      }
      else if (quasar::gLogLevel >= 6)
      {
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v70 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
        uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"Skipping ", 9);
        int v28 = quasar::ptt::operator<<(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" (ID: ", 6);
        uint64_t v29 = (void *)std::ostream::operator<<();
        uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"since cost exceeds ", 19);
        size_t v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
      }
      *(void *)(v19 + 16) = *(void *)(a1 + 312);
      *(void *)(a1 + 312) = v19;
      ++v18;
      unint64_t v17 = __p;
      v55 += 8;
    }
    while (v18 < ((char *)v63 - (unsigned char *)__p) >> 3);
  }
  if (quasar::gLogLevel >= 6)
  {
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v70 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v66);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66, (uint64_t)"nextWeightCutoffUpperBound=", 27);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v66);
    unint64_t v17 = __p;
  }
  if (v17)
  {
    uint64_t v63 = v17;
    operator delete(v17);
  }
  return WeightCutoffUpperBound;
}

void sub_1B238692C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(uint64_t a1, unint64_t a2, int a3, uint64_t *a4, int a5)
{
  int v59 = 0;
  uint64_t v60 = 0;
  unint64_t v61 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)&v59, *(void *)(a1 + 344));
  int v40 = a5;
  for (uint64_t i = *(void *)(a1 + 264); i; uint64_t i = *(void *)(i + 16))
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
      unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Considering path ", 17);
      float v12 = quasar::ptt::operator<<(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (ID: ", 6);
      int v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)").", 2);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
    }
    int v14 = *(_DWORD *)(i + 12);
    uint64_t v15 = *(void *)(a1 + 136);
    float v16 = *(float *)(v15 + 36 * v14 + 16);
    if (a3)
    {
      float v17 = (*(float (**)(void, void))(**(void **)(a1 + 96) + 32))(*(void *)(a1 + 96), *(unsigned int *)(v15 + 36 * v14 + 28));
      (*(void (**)(void, void))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104), *(unsigned int *)(v15 + 36 * v14 + 32));
      float v18 = NAN;
      if (v17 != -INFINITY && v9 != -INFINITY)
      {
        float v18 = INFINITY;
        BOOL v19 = v9 == INFINITY || v17 == INFINITY;
        float v9 = v17 + v9;
        if (!v19) {
          float v18 = v9;
        }
      }
      float v16 = v16 + v18;
    }
    if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      int v20 = v60;
      if ((unint64_t)v60 >= v61)
      {
        uint64_t v22 = ((char *)v60 - (char *)v59) >> 3;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v61 - (void)v59;
        if ((uint64_t)(v61 - (void)v59) >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v61, v25);
        int v28 = (float *)&v26[8 * v22];
        *int v28 = v16;
        v28[1] = *(float *)(i + 12);
        uint64_t v30 = v59;
        uint64_t v29 = v60;
        size_t v31 = v28;
        if (v60 != v59)
        {
          do
          {
            uint64_t v32 = *((void *)v29 - 1);
            v29 -= 2;
            *((void *)v31 - 1) = v32;
            v31 -= 2;
          }
          while (v29 != v30);
          uint64_t v29 = v59;
        }
        uint64_t v21 = v28 + 2;
        int v59 = v31;
        uint64_t v60 = v28 + 2;
        unint64_t v61 = (unint64_t)&v26[8 * v27];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        float *v60 = v16;
        v20[1] = *(float *)(i + 12);
        uint64_t v21 = v20 + 2;
      }
      uint64_t v60 = v21;
    }
  }
  unint64_t v33 = ((char *)v60 - (char *)v59) >> 3;
  if (v33 >= a2) {
    unint64_t v34 = a2;
  }
  else {
    unint64_t v34 = ((char *)v60 - (char *)v59) >> 3;
  }
  if (v40)
  {
    unint64_t v35 = 126 - 2 * __clz(v33);
    if (v60 == v59) {
      uint64_t v36 = 0;
    }
    else {
      uint64_t v36 = v35;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,false>((uint64_t)v59, (unint64_t)v60, (uint64_t)&v42, v36, 1);
  }
  else if (v33 > a2)
  {
    uint64_t v37 = &v59[2 * v34];
    if (v37 != v60) {
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v59, v37, (uint64_t)v60, v9);
    }
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(a4, v34);
  if (v34)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Extracting path with ID ", 24);
      uint64_t v38 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and expected cost ", 19);
      float v39 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)".", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
    }
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetPath();
  }
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
}

void sub_1B2386EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = *(void **)(v13 - 128);
  if (v15)
  {
    *(void *)(v13 - 120) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::pair<int,std::pair<int,int>>>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<int,std::pair<int,int>>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int *a8, int a9, int *a10, uint64_t *a11, float *a12)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    BOOL v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Evaluating to expand path with graph arc ", 41);
    int v20 = quasar::ptt::operator<<(v19, (uint64_t)a8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" w.r.t. observation ", 20);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  float v22 = *((float *)a8 + 2);
  float v23 = *(float *)(a1 + 24) * v22;
  if (a6)
  {
    float v24 = NAN;
    if (v23 != -INFINITY)
    {
      float v25 = *(float *)(a7 + 16);
      if (v25 != -INFINITY)
      {
        BOOL v26 = v25 == INFINITY || v23 == INFINITY;
        float v27 = v23 + v25;
        if (v26) {
          float v24 = INFINITY;
        }
        else {
          float v24 = v27;
        }
      }
    }
    if (!a9) {
      goto LABEL_18;
    }
  }
  else
  {
    float v24 = *(float *)(a1 + 24) * v22;
    if (!a9) {
      goto LABEL_18;
    }
  }
  if (*(unsigned char *)(a1 + 28) && v24 > a3) {
    return 0;
  }
LABEL_18:
  float v29 = *(float *)(*(void *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2 + 4 * *a8);
  if (quasar::gLogLevel >= 6)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  LODWORD(v39) = 0;
  *(void *)((char *)&v39 + 4) = *(void *)(a8 + 3);
  unint64_t v30 = v39;
  uint64_t v31 = HIDWORD(*(void *)((char *)&v39 + 4));
  float v32 = NAN;
  if (v24 == -INFINITY
    || v29 == -INFINITY
    || (v29 != INFINITY ? (v33 = v24 == INFINITY) : (v33 = 1), !v33 ? (float v32 = v24 + v29) : (float v32 = INFINITY), v32 >= a3))
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Dropping path due to cut-off.", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    }
    uint64_t v35 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      unint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Expanding path with nextState=", 30);
      quasar::ptt::operator<<(v34);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    }
    uint64_t v35 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Expand((uint64_t *)(a1 + 248), a6, a2, *a8, a8[1], v30, v31, v32, v29 + *(float *)(a7 + 20));
  }
  if (a10)
  {
    unint64_t v36 = HIDWORD(v30);
    if (v35) {
      int v37 = v30;
    }
    else {
      int v37 = -1;
    }
    if (!v35) {
      LODWORD(v36) = -1;
    }
    *a10 = v37;
    a10[1] = v36;
    if (v35) {
      int v38 = v31;
    }
    else {
      int v38 = -1;
    }
    a10[2] = v38;
  }
  if (a11) {
    *a11 = v35;
  }
  if (a12) {
    *a12 = v32;
  }
  return 1;
}

void sub_1B2387364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

int64x2_t std::deque<std::pair<int,std::pair<int,int>>>::push_front(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::pair<int,std::pair<int,int>>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x155));
  uint64_t v7 = *v6 + 12 * (v4 % 0x155);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4092;
  }
  uint64_t v8 = *a2;
  *(_DWORD *)(v7 - 4) = *((_DWORD *)a2 + 2);
  *(void *)(v7 - 12) = v8;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B255FD00);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::pair<int,std::pair<int,int>>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    BOOL v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFFCuLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  float v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B2387700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<int,std::pair<int,int>>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 341 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x155) {
    a2 = 1;
  }
  if (v5 < 0x2AA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Expand(uint64_t *a1, int a2, int a3, int a4, int a5, unint64_t a6, int a7, float a8, float a9)
{
  int v11 = a4;
  int v12 = a3;
  unint64_t v92 = a6;
  int v93 = a7;
  uint64_t v17 = a1 + 2;
  unint64_t v18 = HIDWORD(a6);
  int v19 = 73244475 * ((73244475 * (a6 ^ ((int)a6 >> 16))) ^ ((int)(73244475 * (a6 ^ ((int)a6 >> 16))) >> 16));
  unint64_t v20 = (((v19 ^ (v19 >> 16)) - 1640531527) ^ 3u) + 192;
  int v21 = 73244475
      * ((73244475 * (HIDWORD(a6) ^ (SHIDWORD(a6) >> 16))) ^ ((73244475 * (HIDWORD(a6) ^ (SHIDWORD(a6) >> 16))) >> 16));
  unint64_t v22 = ((v21 ^ (v21 >> 16)) - 1640531527 + (v20 << 6) + (v20 >> 2)) ^ v20;
  int v23 = (73244475 * (a7 ^ (a7 >> 16))) ^ ((73244475 * (a7 ^ (a7 >> 16))) >> 16);
  unint64_t v24 = (((73244475 * v23) ^ ((73244475 * v23) >> 16)) - 1640531527 + (v22 << 6) + (v22 >> 2)) ^ v22;
  uint64_t v25 = a1[5];
  unint64_t v26 = v24 % a1[4];
  uint64_t v27 = *(void *)(v25 + 16 * v26 + 8);
  if (v27)
  {
    uint64_t v28 = *(void *)(v25 + 16 * v26);
    float v29 = a1 + 2;
    if (v28 != -1) {
      float v29 = (uint64_t *)(*(void *)(v25 + 16 * v28 + 8) + 16);
    }
    uint64_t v30 = *(void *)(v27 + 16);
    for (uint64_t i = *v29; ; uint64_t i = *(void *)(i + 16))
    {
      if (i == v30) {
        goto LABEL_12;
      }
      if (*(_DWORD *)i == a6 && *(_DWORD *)(i + 4) == HIDWORD(a6) && *(_DWORD *)(i + 8) == a7) {
        break;
      }
    }
    int v48 = *(_DWORD *)(i + 12);
    if (v48)
    {
      uint64_t v49 = *(void *)(*a1 + 8);
      if (quasar::gLogLevel >= 6)
      {
        int v70 = a5;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v75 = 0u;
        uint64_t v50 = v49;
        int v51 = v48;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        int v69 = v51;
        uint64_t v49 = v50;
        uint64_t v52 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" ", 1);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        a5 = v70;
        int v11 = a4;
        int v48 = v69;
        int v12 = a3;
      }
      if (*(float *)(v49 + 36 * v48 + 16) <= a8)
      {
        if (quasar::gLogLevel >= 6)
        {
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v75 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
          uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Skipping path replacement for state ", 36);
          unint64_t v61 = quasar::ptt::operator<<(v60);
          uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" since cost of new candidate ", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"(", 1);
          uint64_t v63 = (void *)std::ostream::operator<<();
          unint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") exceeds cost of existing candidate ", 37);
          float v65 = quasar::ptt::operator<<(v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        }
        return 0;
      }
      if (quasar::gLogLevel >= 6)
      {
        int v71 = a5;
        int v73 = v11;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v75 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Replacing existing path for state ", 34);
        long long v54 = quasar::ptt::operator<<(v53);
        long long v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" with new path due to lower cost ", 33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"(", 1);
        long long v56 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" vs. ", 5);
        long long v57 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)").", 2);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        a5 = v71;
        int v11 = v73;
      }
      uint64_t v37 = *a1;
      uint64_t v38 = *(void *)(*a1 + 16);
      uint64_t v58 = v38 + 1;
      if ((unint64_t)(v38 + 1) >= *(void *)*a1) {
        goto LABEL_52;
      }
LABEL_46:
      char v39 = 0;
      *(void *)(v37 + 16) = v58;
      if ((v38 & 0x80000000) != 0) {
        return 0;
      }
      goto LABEL_16;
    }
    if (quasar::gLogLevel >= 6)
    {
      int v59 = a5;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v75 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Expanding search with initial path.", 35);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
      a5 = v59;
      int v11 = a4;
    }
    uint64_t v37 = *a1;
    uint64_t v38 = *(void *)(*a1 + 16);
    uint64_t v58 = v38 + 1;
    if ((unint64_t)(v38 + 1) < *(void *)*a1) {
      goto LABEL_46;
    }
LABEL_52:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::ptt::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
LABEL_12:
  if (quasar::gLogLevel >= 6)
  {
    int v34 = a5;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Expanding search with path leading to state ", 44);
    uint64_t v36 = quasar::ptt::operator<<(v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
    a5 = v34;
    int v11 = a4;
  }
  uint64_t v37 = *a1;
  uint64_t v38 = *(void *)(*a1 + 16);
  if ((unint64_t)(v38 + 1) >= *(void *)*a1) {
    goto LABEL_52;
  }
  uint64_t i = 0;
  *(void *)(v37 + 16) = v38 + 1;
  char v39 = 1;
  if ((v38 & 0x80000000) != 0) {
    return 0;
  }
LABEL_16:
  uint64_t v40 = *(void *)(v37 + 8) + 36 * v38;
  *(_DWORD *)uint64_t v40 = a2;
  *(_DWORD *)(v40 + 4) = v12;
  *(_DWORD *)(v40 + 8) = v11;
  *(_DWORD *)(v40 + 12) = a5;
  *(float *)(v40 + 16) = a8;
  *(float *)(v40 + 20) = a9;
  *(_DWORD *)(v40 + 24) = a6;
  *(_DWORD *)(v40 + 28) = v18;
  *(_DWORD *)(v40 + 32) = a7;
  if (v39) {
    kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert(v17, a6, a7, v38);
  }
  else {
    *(_DWORD *)(i + 12) = v38;
  }
  ++a1[12];
  if (quasar::gLogLevel >= 6)
  {
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"New partial path: ", 18);
    quasar::ptt::operator<<(v41);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
  }
  if (a8 < *((float *)a1 + 28))
  {
    *((float *)a1 + 28) = a8;
    uint64_t v42 = a1[5];
    unint64_t v43 = v24 % a1[4];
    uint64_t j = *(void *)(v42 + 16 * v43 + 8);
    if (j)
    {
      uint64_t v45 = *(void *)(v42 + 16 * v43);
      if (v45 != -1) {
        uint64_t v17 = (uint64_t *)(*(void *)(v42 + 16 * v45 + 8) + 16);
      }
      uint64_t v46 = *(void *)(j + 16);
      for (uint64_t j = *v17; j != v46; uint64_t j = *(void *)(j + 16))
      {
        if (*(_DWORD *)j == a6 && *(_DWORD *)(j + 4) == v18 && *(_DWORD *)(j + 8) == a7) {
          goto LABEL_34;
        }
      }
      uint64_t j = 0;
    }
LABEL_34:
    a1[13] = j;
  }
  return v40;
}

void sub_1B2387E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<int,std::pair<int,int>>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 341 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x155)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      uint64_t v46 = a1 + 3;
      std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      unint64_t v43 = (char *)__p;
      long long v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      long long v41 = operator new(0xFFCuLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              unint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                float v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)float v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              long long v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              unint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              unint64_t v43 = v22;
              long long v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      unint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      char v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      long long v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 170;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 341;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        long long v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFFCuLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        int v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFFCuLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 170;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 341;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 341;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B2388178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::NextIteration(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 != -1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    do
    {
      uint64_t v5 = (uint64_t *)(v4 + 16 * v3);
      v5[1] = 0;
      uint64_t v3 = *v5;
    }
    while (v3 != -1);
  }
  uint64_t v7 = (void *)(a1 + 96);
  unint64_t v6 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = -1;
  uint64_t v9 = *(void *)(a1 + 104);
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 112);
  unint64_t v10 = (unint64_t)(float)(*(float *)(a1 + 8) * (float)v6);
  if (*(void *)(a1 + 32) < v10)
  {
    if (quasar::gLogLevel >= 6)
    {
      memset(v13, 0, sizeof(v13));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Expand hash list number of buckets from ", 40);
      unint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" to ", 4);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v13);
    }
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, v10);
  }
  void *v7 = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
}

void sub_1B2388300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    uint64_t v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = a3 + 2;
    do
    {
      if ((unint64_t)v6 >= *v7)
      {
        uint64_t v8 = (uint64_t)&v6[-*a3] >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = *v7 - *a3;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v11);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = &v12[8 * v8];
        *(void *)uint64_t v13 = v5;
        unint64_t v6 = v13 + 8;
        int64_t v15 = (char *)*a3;
        BOOL v14 = (char *)a3[1];
        if (v14 != (char *)*a3)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          BOOL v14 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v6;
        a3[2] = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(void *)unint64_t v6 = v5;
        v6 += 8;
      }
      a3[1] = v6;
      uint64_t v5 = *(void *)(v5 + 16);
    }
    while (v5);
    BOOL v17 = (char *)*a3;
  }
  else
  {
    BOOL v17 = 0;
    unint64_t v6 = 0;
  }
  unint64_t v18 = *(int *)(a1 + 12);
  if (v18)
  {
    unint64_t v19 = (v6 - v17) >> 3;
    if (v19 > v18)
    {
      uint64_t v28 = a1 + 128;
      int64x2_t result = std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(v17, &v17[8 * v18], v6, &v28);
      int64_t v21 = (uint64_t *)a3[1];
      uint64_t v22 = *a3 + 8 * v18;
      if ((uint64_t *)v22 != v21)
      {
        uint64_t v23 = *(void *)(a1 + 312);
        unint64_t v24 = (uint64_t *)(*a3 + 8 * v18);
        do
        {
          uint64_t v25 = *v24++;
          *(void *)(v25 + 16) = v23;
          *(void *)(a1 + 312) = v25;
          uint64_t v23 = v25;
        }
        while (v24 != v21);
        a3[1] = v22;
      }
      return result;
    }
  }
  else
  {
    unint64_t v19 = (v6 - v17) >> 3;
  }
  unint64_t v26 = 126 - 2 * __clz(v19);
  if (v6 == v17) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v26;
  }
  return (char *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **,false>((uint64_t)v17, (unint64_t *)v6, (uint64_t)&v29, v27, 1);
}

void sub_1B23884D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ComputeNextWeightCutoffUpperBound(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = (unint64_t)"mandFstINS_6ArcTplINS_17TropicalWeightTplIfEEiEENSt3__110shared_ptrINS_24DeterministicOnDemandFstIS4_EEEEEE";
  if (!a2) {
    return 1.0e10;
  }
  *(void *)char v29 = *(void *)a2;
  int v25 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)&unsigned char v29[8] = *(_DWORD *)(a2 + 8);
  float v5 = *(float *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = HIDWORD(*(void *)&v29[4]);
  if (!v7) {
    operator new();
  }
  uint64_t v10 = *(void *)(v7 + 48);
  uint64_t v9 = v7 + 48;
  *(_DWORD *)(v9 - 32) = *(_DWORD *)&v29[4];
  *(_DWORD *)(v9 - 28) = v8;
  *(_DWORD *)(v9 - 24) = v8;
  (*(void (**)(void))(v10 + 16))();
  uint64_t v11 = *(void *)(a1 + 120);
  if (*(void *)(v11 + 96) >= *(void *)(v11 + 88)) {
    return 1.0e10;
  }
  uint64_t v12 = *(void *)v29;
  float v13 = 1.0e10;
  while (1)
  {
    uint64_t v14 = *(unsigned int *)(v11 + 76);
    if (v14)
    {
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v11 + 8) + 32))(*(void *)(v11 + 8), *(unsigned int *)(v11 + 24), v14, v11 + 28);
      float v15 = *(float *)(v11 + 80);
      float v16 = NAN;
      if (v15 != -INFINITY)
      {
        float v17 = *(float *)(v11 + 36);
        float v16 = NAN;
        if (v17 != -INFINITY)
        {
          float v16 = INFINITY;
          BOOL v18 = v17 == INFINITY || v15 == INFINITY;
          float v19 = v15 + v17;
          if (!v18) {
            float v16 = v19;
          }
        }
      }
      unsigned int v20 = *(_DWORD *)(v11 + 72);
      int v21 = *(_DWORD *)(v11 + 32);
      *(_DWORD *)(v11 + 112) = v20;
      *(_DWORD *)(v11 + 116) = v21;
      uint64_t v22 = (int *)(v11 + 40);
    }
    else
    {
      unsigned int v20 = *(_DWORD *)(v11 + 72);
      *(void *)(v11 + 112) = v20;
      float v16 = *(float *)(v11 + 80);
      uint64_t v22 = (int *)(v11 + 24);
    }
    *(float *)(v11 + 120) = v16;
    int v23 = *v22;
    *(_DWORD *)(v11 + 124) = *(_DWORD *)(v11 + 84);
    *(_DWORD *)(v11 + 128) = v23;
    if (!v20) {
      goto LABEL_21;
    }
    unint64_t v3 = v3 & 0xFFFFFFFF00000000 | v8;
    if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,false>(a1, a3, v13, v12, v3, v25, v6 + 36 * v25, (float *)(v11 + 112), 1, 0, 0, &v28) & 1) == 0)break; {
    if ((float)(v5 + v28) < v13)
    }
      float v13 = v5 + v28;
LABEL_21:
    ++*(void *)(v11 + 96);
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v11 + 48);
    if (*(void *)(v11 + 96) >= *(void *)(v11 + 88)) {
      return v13;
    }
  }
  if (quasar::gLogLevel >= 6)
  {
    memset(v27, 0, sizeof(v27));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Exiting arc-loop early.", 23);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v27);
  }
  return v13;
}

void sub_1B2388808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<false,true>(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, float a7, uint64_t a8, int a9, int *a10, uint64_t *a11, float *a12)
{
  *(void *)uint64_t v50 = a3;
  *(_DWORD *)&v50[8] = a4;
  if (quasar::gLogLevel >= 6)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Evaluating to expand path where we ignore observation ", 54);
    BOOL v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
  }
  if (a5)
  {
    float v19 = *(float *)(a6 + 16);
    float v20 = v19 + 0.0;
    if (v19 == INFINITY) {
      float v20 = INFINITY;
    }
    if (v19 == -INFINITY) {
      float v20 = NAN;
    }
    float v21 = v20;
    if (!a9) {
      goto LABEL_14;
    }
  }
  else
  {
    float v21 = 0.0;
    if (!a9) {
      goto LABEL_14;
    }
  }
  if (*(unsigned char *)(a1 + 28) && v21 > a7) {
    return 0;
  }
LABEL_14:
  float v23 = *(float *)(*(void *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2);
  if (quasar::gLogLevel >= 6)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
  }
  LODWORD(v33) = 0;
  *(void *)((char *)&v33 + 4) = *(void *)&v50[4];
  unint64_t v24 = v33;
  uint64_t v25 = HIDWORD(*(void *)&v50[4]);
  float v26 = NAN;
  if (v21 == -INFINITY
    || v23 == -INFINITY
    || (v23 != INFINITY ? (v27 = v21 == INFINITY) : (v27 = 1), !v27 ? (float v26 = v21 + v23) : (float v26 = INFINITY), v26 >= a7))
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Dropping path due to cut-off.", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
    }
    uint64_t v29 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      float v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Expanding path with nextState=", 30);
      quasar::ptt::operator<<(v28);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
    }
    uint64_t v29 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Expand((uint64_t *)(a1 + 248), a5, a2, 0, 0, v24, v25, v26, v23 + *(float *)(a6 + 20));
  }
  if (a10)
  {
    unint64_t v30 = HIDWORD(v24);
    if (v29) {
      int v31 = v24;
    }
    else {
      int v31 = -1;
    }
    if (!v29) {
      LODWORD(v30) = -1;
    }
    *a10 = v31;
    a10[1] = v30;
    if (v29) {
      int v32 = v25;
    }
    else {
      int v32 = -1;
    }
    a10[2] = v32;
  }
  if (a11) {
    *a11 = v29;
  }
  if (a12) {
    *a12 = v26;
  }
  return 1;
}

void sub_1B2388B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,false>(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, float *a8, int a9, uint64_t a10, uint64_t a11, float *a12)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    float v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Evaluating to expand path with graph arc ", 41);
    float v20 = quasar::ptt::operator<<(v19, (uint64_t)a8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" w.r.t. observation ", 20);
    float v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
  }
  float v22 = a8[2];
  float v23 = *(float *)(a1 + 24) * v22;
  if (a6)
  {
    float v24 = NAN;
    if (v23 != -INFINITY)
    {
      float v25 = *(float *)(a7 + 16);
      if (v25 != -INFINITY)
      {
        BOOL v26 = v25 == INFINITY || v23 == INFINITY;
        float v27 = v23 + v25;
        if (v26) {
          float v24 = INFINITY;
        }
        else {
          float v24 = v27;
        }
      }
    }
    if (!a9) {
      goto LABEL_18;
    }
  }
  else
  {
    float v24 = *(float *)(a1 + 24) * v22;
    if (!a9) {
      goto LABEL_18;
    }
  }
  if (*(unsigned char *)(a1 + 28) && v24 > a3) {
    return 0;
  }
LABEL_18:
  float v29 = *(float *)(*(void *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2 + 4 * *(int *)a8);
  if (quasar::gLogLevel >= 6)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
  }
  float v30 = NAN;
  if (v24 != -INFINITY && v29 != -INFINITY)
  {
    if (v29 == INFINITY || v24 == INFINITY) {
      float v30 = INFINITY;
    }
    else {
      float v30 = v24 + v29;
    }
  }
  if (a12) {
    *a12 = v30;
  }
  return 1;
}

void sub_1B2388DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetPath()
{
}

void sub_1B2389210(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::~CoreMLTensorData(id *this)
{
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(this);
}

{
  uint64_t vars8;

  kaldi::quasar::CoreMLTensorData::~CoreMLTensorData(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::CoreMLNetworkConfig::CoreMLNetworkConfig(uint64_t a1, long long *a2)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F0A50D90;
  unint64_t v3 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(unsigned char *)(a1 + 88) = 0;
  return a1;
}

void sub_1B2389370(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkConfig::Read(uint64_t a1, uint64_t *a2, char a3, unsigned __int8 *a4)
{
  memset(&__str, 0, sizeof(__str));
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v41 = 0;
  long long v4 = a2 + 4;
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    uint64_t v8 = (char *)(a1 + 88);
    long long v35 = (uint64_t **)(a1 + 64);
    while (1)
    {
      long long v37 = 0;
      size_t v38 = 0;
      uint64_t v39 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v37);
      uint64_t v9 = a4[23];
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *((void *)a4 + 1);
      }
      int v11 = HIBYTE(v39);
      if (!v9) {
        break;
      }
      size_t v12 = v39 >= 0 ? HIBYTE(v39) : v38;
      if (v12 != v9) {
        break;
      }
      if (v10 >= 0) {
        float v13 = a4;
      }
      else {
        float v13 = *(unsigned __int8 **)a4;
      }
      if (v39 < 0)
      {
        float v19 = v37;
        if (!memcmp(v37, v13, v38))
        {
          operator delete(v19);
          goto LABEL_59;
        }
LABEL_27:
        size_t v20 = v38;
        if (v38 == 10)
        {
          int v17 = 1;
          BOOL v18 = (void **)v37;
          goto LABEL_29;
        }
LABEL_35:
        if (v20 == 14)
        {
          int v17 = 1;
          BOOL v18 = (void **)v37;
          goto LABEL_37;
        }
LABEL_43:
        if (v20 != 13) {
          goto LABEL_65;
        }
        BOOL v18 = (void **)v37;
        goto LABEL_50;
      }
      if (!HIBYTE(v39)) {
        goto LABEL_59;
      }
      uint64_t v14 = &v37;
      uint64_t v15 = HIBYTE(v39);
      do
      {
        if (*(unsigned __int8 *)v14 != *v13) {
          goto LABEL_21;
        }
        uint64_t v14 = (void **)((char *)v14 + 1);
        ++v13;
        --v15;
      }
      while (v15);
      int v16 = 0;
      if ((v39 & 0x8000000000000000) == 0)
      {
LABEL_57:
        if (!v16) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
LABEL_19:
      operator delete(v37);
      if ((v16 & 1) == 0) {
        goto LABEL_59;
      }
LABEL_58:
      if ((*((unsigned char *)v4 + *(void *)(*a2 - 24)) & 2) != 0) {
        goto LABEL_59;
      }
    }
LABEL_21:
    if (v39 < 0) {
      goto LABEL_27;
    }
    int v17 = 0;
    BOOL v18 = &v37;
    switch(HIBYTE(v39))
    {
      case 0xAu:
LABEL_29:
        float v21 = *v18;
        int v22 = *((unsigned __int16 *)v18 + 4);
        if (v21 != (void *)0x6F6974636E75463CLL || v22 != 15982)
        {
          if (!v17) {
            goto LABEL_65;
          }
          size_t v20 = v38;
          goto LABEL_35;
        }
        kaldi::ReadToken(a2, a3, (uint64_t)&__str);
        break;
      case 0xDu:
        goto LABEL_50;
      case 0xEu:
LABEL_37:
        float v24 = *v18;
        uint64_t v25 = *(uint64_t *)((char *)v18 + 6);
        if (v24 == (void *)0x5474757074754F3CLL && v25 == 0x3E726F736E655474)
        {
          kaldi::ReadToken(a2, a3, (uint64_t)v40);
          kaldi::quasar::StripColon((uint64_t)v40, __p);
          long long v43 = __p;
          float v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v43);
          std::string::operator=((std::string *)((char *)v27 + 56), &__str);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (v17)
          {
            size_t v20 = v38;
            goto LABEL_43;
          }
          if (v11 != 13) {
            goto LABEL_65;
          }
          BOOL v18 = &v37;
LABEL_50:
          float v28 = *v18;
          uint64_t v29 = *(uint64_t *)((char *)v18 + 5);
          if (v28 != (void *)0x6F4E776F6C6C413CLL || v29 != 0x3E5550436E6F4E77)
          {
LABEL_65:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
            if (v39 >= 0) {
              long long v32 = &v37;
            }
            else {
              long long v32 = (void **)v37;
            }
            if (v39 >= 0) {
              uint64_t v33 = HIBYTE(v39);
            }
            else {
              uint64_t v33 = v38;
            }
            long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", a typo in config file?", 24);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
          kaldi::ReadBasicType<BOOL>(a2, a3, v8);
        }
        break;
      default:
        goto LABEL_65;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
    int v16 = 1;
    if ((v39 & 0x8000000000000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_19;
  }
LABEL_59:
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1B2389734(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 129) < 0) {
    operator delete(*(void **)(v1 - 152));
  }
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::StripColon(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = std::string::find((const std::string *)a1, 58, 0);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      float v5 = *(const std::string::value_type **)a1;
      std::string::size_type v6 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(a2, (const std::string *)a1, 0, v4, (std::allocator<char> *)&v7);
  }
}

void kaldi::quasar::CoreMLNetworkConfig::CreateComputeEngine(kaldi::quasar::CoreMLNetworkConfig *this)
{
}

void sub_1B2389864(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C40BB9C649ALL);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::CoreMLNetworkPlan(std::string *this, const kaldi::quasar::CoreMLNetworkConfig *a2)
{
  this->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A50B38;
  this->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F0A511C0;
  this->__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 8);
  std::string::size_type v4 = *((void *)a2 + 3);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 2);
  this[1].__r_.__value_.__l.__size_ = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  LOWORD(this[1].__r_.__value_.__r.__words[2]) = *((_WORD *)a2 + 16);
  this->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F0A50D90;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 7);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v5;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[3], (const void ***)a2 + 8);
  this[4].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 88);
  operator new();
}

void sub_1B23899B8(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::LoadNetwork(uint64_t a1, uint64_t *a2, int a3)
{
  id v6 = objc_alloc_init(MEMORY[0x1E4F1E988]);
  char v7 = v6;
  if ((a3 & 1) == 0) {
    [v6 setComputeUnits:0];
  }
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (uint64_t *)*a2;
  }
  uint64_t v9 = [NSString stringWithUTF8String:v8];
  int v10 = [v9 stringByStandardizingPath];

  int v11 = (void *)MEMORY[0x1E4F1CB10];
  id v12 = v10;
  float v13 = objc_msgSend(v11, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v12, "fileSystemRepresentation"), 1, 0);
  id v26 = 0;
  uint64_t v14 = [MEMORY[0x1E4F1E970] modelWithContentsOfURL:v13 configuration:v7 error:&v26];
  id v15 = v26;
  int v16 = *(void ***)(a1 + 104);
  int v17 = *v16;
  void *v16 = (void *)v14;

  if (!**(void **)(a1 + 104))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    float v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not load ", 15);
    id v22 = [v15 description];
    float v23 = (const char *)[v22 UTF8String];
    size_t v24 = strlen(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  id v18 = objc_alloc_init(MEMORY[0x1E4F1E9D8]);
  uint64_t v19 = *(void *)(a1 + 104);
  size_t v20 = *(void **)(v19 + 8);
  *(void *)(v19 + 8) = v18;

  [*(id *)(*(void *)(a1 + 104) + 8) setUsesCPUOnly:a3 ^ 1u];
}

void sub_1B2389BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::~CoreMLNetworkPlan(kaldi::quasar::CoreMLNetworkPlan *this)
{
  *(void *)this = &unk_1F0A50B38;
  std::string::size_type v4 = (id *)*((void *)this + 13);
  uint64_t v2 = (void *)((char *)this + 104);
  unint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<kaldi::quasar::CoreMLNetworkPlanObjCData>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  kaldi::quasar::CoreMLNetworkConfig::~CoreMLNetworkConfig((kaldi::quasar::CoreMLNetworkPlan *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::CoreMLNetworkPlan::~CoreMLNetworkPlan(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::CoreMLNetworkPlan::CreateData()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_1B2389D38(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

void sub_1B2389DB8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

void sub_1B2389E30(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

void sub_1B2389EA8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::CreateZeroedDataInt32(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned long>::vector(&__dst, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != *(void *)a2) {
    memmove(__dst, *(const void **)a2, v3 - *(void *)a2);
  }
  operator new();
}

void sub_1B2389F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x1093C407E1975CCLL);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::CreateZeroedDataFloat(uint64_t a1, uint64_t a2)
{
  std::vector<unsigned long>::vector(&__dst, (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != *(void *)a2) {
    memmove(__dst, *(const void **)a2, v3 - *(void *)a2);
  }
  operator new();
}

void sub_1B238A020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x1B3EA8670](v11, 0x1093C407E1975CCLL);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::CreateConcat(uint64_t a1, uint64_t ***a2, int a3)
{
  if (*a2 != a2[1])
  {
    std::string __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    char v7 = *a2;
    uint64_t v8 = a2[1];
    while (v7 != v8)
    {
      id v9 = *((id *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData(a1, *v7, (uint64_t *)&__p) + 4);
      objc_msgSend(v6, "addObject:", v9, __p, v14, v15);

      ++v7;
    }
    int v10 = (void *)MEMORY[0x1E4F1E9A0];
    uint64_t v11 = objc_msgSend(v6, "lastObject", __p, v14, v15);
    uint64_t v12 = objc_msgSend(v10, "multiArrayByConcatenatingMultiArrays:alongAxis:dataType:", v6, a3, objc_msgSend(v11, "dataType"));

    [MEMORY[0x1E4F1E948] featureValueWithMultiArray:v12];
    objc_claimAutoreleasedReturnValue();
    operator new();
  }
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  operator new();
}

void sub_1B238A1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  MEMORY[0x1B3EA8670](v12, 0x1093C407E1975CCLL);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData(uint64_t a1, uint64_t *lpsrc, uint64_t *a3)
{
  if (!lpsrc)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "src");
    goto LABEL_24;
  }
  uint64_t v6 = *lpsrc;
  if (v7) {
    return v7;
  }
  if ((*(unsigned int (**)(uint64_t *))(v6 + 176))(lpsrc) != 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "src->GetNumDims() == 2");
LABEL_24:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  double v8 = kaldi::Matrix<float>::Matrix((uint64_t)v25);
  (*(void (**)(uint64_t *, unsigned char *, double))(*lpsrc + 24))(lpsrc, v25, v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(*(void *)a1 + 40))(&v24, a1, v25);
  unint64_t v9 = a3[2];
  int v10 = (void *)a3[1];
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v13 = ((uint64_t)v10 - *a3) >> 3;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - *a3;
    uint64_t v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    v26[4] = a3 + 2;
    if (v16) {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v16);
    }
    else {
      int v17 = 0;
    }
    id v18 = &v17[8 * v13];
    v26[0] = v17;
    v26[1] = v18;
    void v26[3] = &v17[8 * v16];
    uint64_t v19 = v24;
    uint64_t v24 = 0;
    *(void *)id v18 = v19;
    v26[2] = v18 + 8;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a3, v26);
    uint64_t v12 = (void *)a3[1];
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v26);
  }
  else
  {
    uint64_t v11 = v24;
    uint64_t v24 = 0;
    *int v10 = v11;
    uint64_t v12 = v10 + 1;
    a3[1] = (uint64_t)v12;
  }
  a3[1] = (uint64_t)v12;
  uint64_t v20 = v24;
  uint64_t v24 = 0;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    uint64_t v12 = (void *)a3[1];
  }
  float v21 = (const void *)*(v12 - 1);
  if (!v21
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"converted_data", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  char v7 = v22;
  kaldi::Matrix<float>::~Matrix((uint64_t)v25);
  return v7;
}

void *kaldi::quasar::CoreMLNetworkPlan::CreateSplit@<X0>(kaldi::quasar::CoreMLNetworkPlan *this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, void *a3@<X8>)
{
  int v6 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)a2 + 184))(a2, 0);
  int64x2_t result = std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(a3, v6);
  if (v6)
  {
    memset(v16, 0, sizeof(v16));
    double v8 = objc_msgSend(*((id *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData((uint64_t)this, (uint64_t *)a2, v16) + 4), "shape");
    kaldi::quasar::ShapeArrayToSizeVector(v8, (uint64_t **)__p);

    unint64_t v9 = (uint64_t *)__p[0];
    int v10 = __p[1];
    *(void *)__p[0] = 1;
    uint64_t v11 = v10 - (unsigned char *)v9;
    if (v11)
    {
      unint64_t v12 = v11 >> 3;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      uint64_t v13 = 1;
      do
      {
        uint64_t v14 = *v9++;
        v13 *= v14;
        --v12;
      }
      while (v12);
    }
    operator new();
  }
  return result;
}

void sub_1B238A7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::string __p = &a12;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShapeArrayToSizeVector(void *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v4 = v3;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * i), "unsignedIntegerValue", (void)v21);
        uint64_t v9 = v8;
        uint64_t v11 = a2[1];
        unint64_t v10 = (unint64_t)a2[2];
        if ((unint64_t)v11 >= v10)
        {
          uint64_t v13 = *a2;
          uint64_t v14 = v11 - *a2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v10 - (void)v13;
          if (v16 >> 2 > v15) {
            unint64_t v15 = v16 >> 2;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            id v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v17);
            uint64_t v13 = *a2;
            uint64_t v11 = a2[1];
          }
          else
          {
            id v18 = 0;
          }
          uint64_t v19 = (uint64_t *)&v18[8 * v14];
          *uint64_t v19 = v9;
          unint64_t v12 = v19 + 1;
          while (v11 != v13)
          {
            uint64_t v20 = *--v11;
            *--uint64_t v19 = v20;
          }
          *a2 = v19;
          a2[1] = v12;
          a2[2] = (uint64_t *)&v18[8 * v17];
          if (v13) {
            operator delete(v13);
          }
        }
        else
        {
          *uint64_t v11 = v8;
          unint64_t v12 = v11 + 1;
        }
        a2[1] = v12;
      }
      uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v5);
  }
}

void sub_1B238A9E4(_Unwind_Exception *a1)
{
  id v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CoreMLNetworkPlan::CreateSlice(kaldi::quasar::CoreMLNetworkPlan *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4)
{
  (*(void (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 176))(a2);
  int v8 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, void))(*(void *)a2 + 184))(a2, 0);
  if (!v8)
  {
    std::string __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    operator new();
  }
  if (a3 || a4 != (uint64_t)v8)
  {
    std::string __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v11 = objc_msgSend(*((id *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData((uint64_t)this, (uint64_t *)a2, (uint64_t *)&__p) + 4), "shape");
    kaldi::quasar::ShapeArrayToSizeVector(v11, (uint64_t **)v19);

    unint64_t v12 = (char *)v19[0];
    int64_t v13 = (char *)v19[1] - (char *)v19[0];
    *(void *)v19[0] = a4 - a3;
    if ((unint64_t)v13 >= 9)
    {
      unint64_t v14 = v13 >> 3;
      if (v14 <= 2) {
        unint64_t v14 = 2;
      }
      unint64_t v15 = v14 - 1;
      uint64_t v16 = (uint64_t *)(v12 + 8);
      uint64_t v17 = 1;
      do
      {
        uint64_t v18 = *v16++;
        v17 *= v18;
        --v15;
      }
      while (v15);
    }
    operator new();
  }
  uint64_t v9 = *(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(void *)a2 + 16);
  return v9(a2);
}

void sub_1B238AC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12)
{
  (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  std::string __p = &a12;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1B238AD08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  MEMORY[0x1B3EA8670](v13, 0x1093C407E1975CCLL);
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B238AD00);
}

void sub_1B238AD38()
{
}

void kaldi::quasar::CoreMLNetworkPlan::Run(uint64_t a1, long long **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      uint64_t v11 = (void *)*((void *)v9 + 3);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v12 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v25 = v11;
      unint64_t v13 = v27;
      if (v27 >= v28)
      {
        uint64_t v15 = (uint64_t)(v27 - v26) >> 5;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v28 - v26;
        if ((uint64_t)(v28 - v26) >> 4 > v16) {
          unint64_t v16 = v17 >> 4;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        v29[4] = (void **)&v28;
        uint64_t v19 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v28, v18);
        uint64_t v20 = &v19[4 * v15];
        v29[0] = v19;
        v29[1] = v20;
        v29[3] = &v19[4 * v21];
        long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v20[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v20 = v22;
        memset(&__p, 0, sizeof(__p));
        v20[3] = v25;
        void v29[2] = v20 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v26, v29);
        unint64_t v23 = v27;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v29);
        unint64_t v27 = v23;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v27 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v13 = v14;
        memset(&__p, 0, sizeof(__p));
        *(void *)(v13 + 24) = v25;
        unint64_t v27 = v13 + 32;
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 128))(a1, &v26, a3, a4, a5);
  v29[0] = (void **)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
}

void sub_1B238AF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  std::string __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::Run(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5)
{
  if (*a4 != a4[1])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Can't deal with this yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  id v9 = **(id **)(a1 + 104);
  memset(v11, 0, 24);
  unint64_t v10 = kaldi::quasar::CoreMLNetworkPlanObjCData::MakeFeatureProvider(*(id **)(a1 + 104), a1, a2, v11);
  kaldi::quasar::RunWithProvider(v10, v9, *(void **)(*(void *)(a1 + 104) + 8), a3, a5);

  long long v12 = (void **)v11;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_1B238B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v12 - 56) = &a10;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 56));

  _Unwind_Resume(a1);
}

id kaldi::quasar::CoreMLNetworkPlanObjCData::MakeFeatureProvider(id *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v8 = [*a1 modelDescription];
  id v9 = [v8 inputDescriptionsByName];

  id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  if (*a3 != v12)
  {
    do
    {
      uint64_t v13 = v11;
      if (*(char *)(v11 + 23) < 0) {
        uint64_t v13 = *(void *)v11;
      }
      long long v14 = *(uint64_t **)(v11 + 24);
      uint64_t v15 = [NSString stringWithUTF8String:v13];
      unint64_t v16 = [v9 objectForKeyedSubscript:v15];
      if (!v16)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
        unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"No input in model for ", 22);
        int v24 = *(char *)(v11 + 23);
        if (v24 >= 0) {
          uint64_t v25 = v11;
        }
        else {
          uint64_t v25 = *(void *)v11;
        }
        if (v24 >= 0) {
          uint64_t v26 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          uint64_t v26 = *(void *)(v11 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
      TensorData = (kaldi::quasar::CoreMLTensorData *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData(a2, v14, a4);
      unint64_t v18 = kaldi::quasar::CoreMLTensorData::GetFeatureValue(TensorData, v16);
      [v10 setObject:v18 forKey:v15];

      v11 += 32;
    }
    while (v11 != v12);
  }
  kaldi::quasar::CoreMLNetworkPlanObjCData::FillBlankInputs(*a1, v10);
  id v31 = 0;
  uint64_t v19 = (void *)[objc_alloc(MEMORY[0x1E4F1E928]) initWithDictionary:v10 error:&v31];
  id v20 = v31;
  uint64_t v21 = v20;
  if (!v19)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"CoreML feature provider creation failed: ", 41);
    id v28 = [v21 description];
    uint64_t v29 = (const char *)[v28 UTF8String];
    size_t v30 = strlen(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }

  return v19;
}

void sub_1B238B2F0()
{
  JUMPOUT(0x1B238B304);
}

void kaldi::quasar::RunWithProvider(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v10 = a2;
  id v54 = a3;
  uint64_t v11 = objc_msgSend(v10, "predictionFromFeatures:options:error:", v9);
  id v12 = 0;
  id v13 = v11;
  id v56 = v9;
  id v14 = v12;
  long long v55 = v14;
  if (!v13)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v64);
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    obuint64_t j = [v56 featureNames];
    uint64_t v29 = [obj countByEnumeratingWithState:&v60 objects:v65 count:16];
    if (v29)
    {
      uint64_t v38 = *(void *)v61;
      do
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          if (*(void *)v61 != v38) {
            objc_enumerationMutation(obj);
          }
          id v53 = *(id *)(*((void *)&v60 + 1) + 8 * i);
          long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"\n", 1);
          id v41 = v53;
          long long v42 = (const char *)[v41 UTF8String];
          size_t v43 = strlen(v42);
          long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v42, v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" => ", 4);
          long long v45 = [v56 featureValueForName:v41];
          long long v46 = [v45 multiArrayValue];
          long long v47 = [v46 shape];
          long long v48 = [v47 description];
          long long v49 = v48;
          if (!v48)
          {
            long long v48 = [v45 debugDescription];
            id v10 = v48;
          }
          uint64_t v50 = (const char *)[v48 UTF8String];
          size_t v51 = strlen(v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v50, v51);
          if (!v49) {
        }
          }
        uint64_t v29 = [obj countByEnumeratingWithState:&v60 objects:v65 count:16];
      }
      while (v29);
    }

    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    size_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"CoreML evaluation failed: ", 26);
    std::stringbuf::str();
    if ((v58 & 0x80u) == 0) {
      id v31 = __p;
    }
    else {
      id v31 = (void **)__p[0];
    }
    if ((v58 & 0x80u) == 0) {
      uint64_t v32 = v58;
    }
    else {
      uint64_t v32 = (uint64_t)__p[1];
    }
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
    long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", ", 2);
    id v35 = [v55 description];
    long long v36 = (const char *)[v35 UTF8String];
    size_t v37 = strlen(v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);

    if ((char)v58 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }

  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__clear[abi:ne180100](a5);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  uint64_t v15 = *a4;
  if (*a4 != a4[1])
  {
    uint64_t v16 = *a4;
    if (*(char *)(v15 + 23) < 0) {
      uint64_t v16 = *(void *)v15;
    }
    [NSString stringWithUTF8String:v16];
    [v13 featureValueForName:objc_claimAutoreleasedReturnValue()];
    if (objc_claimAutoreleasedReturnValue()) {
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Got nothing for needed output ", 30);
    int v18 = *(char *)(v15 + 23);
    if (v18 >= 0) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = *(void *)v15;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      uint64_t v20 = *(void *)(v15 + 8);
    }
    uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" in [", 5);
    unint64_t v23 = [v13 featureNames];
    int v24 = [v23 allObjects];
    id v25 = [v24 componentsJoinedByString:@", "];
    uint64_t v26 = (const char *)[v25 UTF8String];
    size_t v27 = strlen(v26);
    id v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"]", 1);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
}

void sub_1B238B9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)va);

  _Unwind_Resume(v16);
}

void sub_1B238B9EC()
{
}

void sub_1B238B9F8()
{
  MEMORY[0x1B3EA8670](v0, 0x1093C407E1975CCLL);

  _Unwind_Resume(v3);
}

void kaldi::quasar::CoreMLNetworkPlan::RunBatch(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t *a5)
{
  if (*a4 != a4[1])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v61, "Can't deal with this yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v61);
  }
  id v47 = **(id **)(a1 + 104);
  memset(v60, 0, sizeof(v60));
  long long v48 = kaldi::quasar::CoreMLNetworkPlanObjCData::MakeBatchProvider(*(id **)(a1 + 104), a1, a2, v60);
  uint64_t v7 = *a5;
  int v8 = (char *)a5[1];
  while (v8 != (char *)v7)
  {
    v8 -= 24;
    v61[0] = v8;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
  }
  a5[1] = v7;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  if ([v48 count] == 1)
  {
    [v48 featuresAtIndex:0];
    unsigned __int8 v58 = 0;
    uint64_t v59 = 0;
    long long v49 = v57 = 0;
    kaldi::quasar::RunWithProvider(v49, v47, *(void **)(*(void *)(a1 + 104) + 8), a3, (uint64_t *)&v57);
    id v9 = v57;
    for (uint64_t i = v58; v9 != i; ++v9)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      v61[4] = &v56;
      uint64_t v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v56, 1uLL);
      v61[0] = v11;
      v61[1] = v11;
      v61[3] = &v11[v12];
      uint64_t v13 = *v9;
      *id v9 = 0;
      *uint64_t v11 = v13;
      v61[2] = v11 + 1;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v54, v61);
      uint64_t v14 = v55;
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v61);
      uint64_t v55 = v14;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(a5, (uint64_t)&v54);
      v61[0] = &v54;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
    }
    v61[0] = &v57;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v16 = *(void *)(*(void *)(a1 + 104) + 8);
    id v53 = 0;
    uint64_t v17 = [v47 predictionsFromBatch:v48 options:v16 error:&v53];
    id v18 = v53;
    id v19 = v17;
    id v20 = v48;
    id v21 = v18;
    long long v49 = v19;
    long long v46 = v21;
    if (!v19)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
      size_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"CoreML batch evaluation failed: ", 32);
      id v38 = [v20 description];
      uint64_t v39 = (const char *)[v38 UTF8String];
      size_t v40 = strlen(v39);
      id v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
      long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", ", 2);
      id v43 = [v46 description];
      long long v44 = (const char *)[v43 UTF8String];
      size_t v45 = strlen(v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v44, v45);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v61);
    }

    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize(a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    for (unint64_t j = 0; j < objc_msgSend(v49, "count", v46); ++j)
    {
      uint64_t v52 = [v49 featuresAtIndex:j];
      uint64_t v23 = *a3;
      if (a3[1] != *a3)
      {
        uint64_t v24 = *a3;
        if (*(char *)(v23 + 23) < 0) {
          uint64_t v24 = *(void *)v23;
        }
        [NSString stringWithUTF8String:v24];
        [v52 featureValueForName:objc_claimAutoreleasedReturnValue()];
        if (objc_claimAutoreleasedReturnValue())
        {
          if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3)) {
            operator new();
          }
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        id v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Got nothing for needed output ", 30);
        int v26 = *(char *)(v23 + 23);
        if (v26 >= 0) {
          uint64_t v27 = v23;
        }
        else {
          uint64_t v27 = *(void *)v23;
        }
        if (v26 >= 0) {
          uint64_t v28 = *(unsigned __int8 *)(v23 + 23);
        }
        else {
          uint64_t v28 = *(void *)(v23 + 8);
        }
        uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
        size_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" in [", 5);
        id v31 = [v52 featureNames];
        uint64_t v32 = [v31 allObjects];
        id v33 = [v32 componentsJoinedByString:@", "];
        long long v34 = (const char *)[v33 UTF8String];
        size_t v35 = strlen(v34);
        long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v34, v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"]", 1);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v61);
      }
    }
    uint64_t v15 = v46;
  }

  v61[0] = v60;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
}

void sub_1B238C10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(&a28);

  long long v36 = (void **)&v37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v36);

  _Unwind_Resume(a1);
}

void sub_1B238C150(_Unwind_Exception *a1)
{
  id v9 = &v10;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v9);

  _Unwind_Resume(a1);
}

id kaldi::quasar::CoreMLNetworkPlanObjCData::MakeBatchProvider(id *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a3;
  if (*a3 == a3[1])
  {
    id v34 = objc_alloc(MEMORY[0x1E4F1E918]);
    id v33 = (void *)[v34 initWithFeatureProviderArray:MEMORY[0x1E4F1CBF0]];
  }
  else
  {
    uint64_t v10 = *(void *)(v4 + 24);
    uint64_t v9 = *(void *)(v4 + 32);
    id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v45 = v10;
    uint64_t v46 = v9;
    unint64_t v48 = (v9 - v10) >> 3;
    if (v9 != v10)
    {
      if (v48 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = (v9 - v10) >> 3;
      }
      do
      {
        id v13 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
        [v11 addObject:v13];

        --v12;
      }
      while (v12);
    }
    uint64_t v14 = [*a1 modelDescription];
    id v47 = [v14 inputDescriptionsByName];

    uint64_t v15 = *a3;
    uint64_t v44 = a3[1];
    if (*a3 != v44)
    {
      if (v48 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v48;
      }
      do
      {
        uint64_t v17 = v15;
        if (*(char *)(v15 + 23) < 0) {
          uint64_t v17 = *(void *)v15;
        }
        id v18 = objc_msgSend(NSString, "stringWithUTF8String:", v17, v44);
        id v19 = [v47 objectForKeyedSubscript:v18];
        if (!v19)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
          size_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"No input in model for ", 22);
          int v41 = *(char *)(v15 + 23);
          if (v41 >= 0) {
            uint64_t v42 = v15;
          }
          else {
            uint64_t v42 = *(void *)v15;
          }
          if (v41 >= 0) {
            uint64_t v43 = *(unsigned __int8 *)(v15 + 23);
          }
          else {
            uint64_t v43 = *(void *)(v15 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v54);
        }
        if (v48 != (uint64_t)(*(void *)(v15 + 32) - *(void *)(v15 + 24)) >> 3)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"data_batch.size() == batch_count", 32);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v54);
        }
        if (v46 != v45)
        {
          for (uint64_t i = 0; i != v16; ++i)
          {
            TensorData = (kaldi::quasar::CoreMLTensorData *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData(a2, *(uint64_t **)(*(void *)(v15 + 24) + 8 * i), a4);
            long long v22 = kaldi::quasar::CoreMLTensorData::GetFeatureValue(TensorData, v19);
            uint64_t v23 = [v11 objectAtIndexedSubscript:i];
            [v23 setObject:v22 forKey:v18];
          }
        }

        v15 += 48;
      }
      while (v15 != v44);
    }
    id v24 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v25 = v11;
    uint64_t v26 = [v25 countByEnumeratingWithState:&v50 objects:v55 count:16];
    if (v26)
    {
      uint64_t v27 = *(void *)v51;
      do
      {
        for (uint64_t j = 0; j != v26; ++j)
        {
          if (*(void *)v51 != v27) {
            objc_enumerationMutation(v25);
          }
          uint64_t v29 = *(void *)(*((void *)&v50 + 1) + 8 * j);
          id v30 = objc_alloc(MEMORY[0x1E4F1E928]);
          id v49 = 0;
          id v31 = (void *)[v30 initWithDictionary:v29 error:&v49];
          id v32 = v49;
          if (!v31)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
            long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"CoreML feature provider creation failed: ", 41);
            id v37 = [v32 description];
            id v38 = (const char *)[v37 UTF8String];
            size_t v39 = strlen(v38);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v38, v39);

            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v54);
          }
          [v24 addObject:v31];
        }
        uint64_t v26 = [v25 countByEnumeratingWithState:&v50 objects:v55 count:16];
      }
      while (v26);
    }

    id v33 = (void *)[objc_alloc(MEMORY[0x1E4F1E918]) initWithFeatureProviderArray:v24];
  }
  return v33;
}

void sub_1B238C674(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize(uint64_t *a1, unint64_t a2)
{
  id v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      int v8 = v3;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void kaldi::quasar::CoreMLTensorData::Copy(kaldi::quasar::CoreMLTensorData *this)
{
}

void sub_1B238C7A8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::CopyToMatrix(uint64_t a1, int32x2_t *a2)
{
  unint64_t v4 = (void *)MEMORY[0x1B3EA9930]();
  kaldi::quasar::MLMultiArrayToMatrix(*(void **)(a1 + 32), a2);
}

{
  void *v4;
  uint64_t vars8;

  unint64_t v4 = (void *)MEMORY[0x1B3EA9930]();
  kaldi::quasar::MLMultiArrayToMatrix(*(void **)(a1 + 32), a2 + 1);
}

void kaldi::quasar::CoreMLTensorData::CopyToVector(uint64_t a1, void *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void *)MEMORY[0x1B3EA9930]();
  id v5 = *(id *)(a1 + 32);
  [v5 shape];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v7 = [v6 countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v41;
    uint64_t v9 = 1;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v41 != v8) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(id *)(*((void *)&v40 + 1) + 8 * i);
        uint64_t v12 = [v11 unsignedIntegerValue];

        v9 *= v12;
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v40 objects:v45 count:16];
    }
    while (v7);
  }
  else
  {
    uint64_t v9 = 1;
  }

  if ((unint64_t)[v6 count] >= 2)
  {
    id v13 = objc_alloc(MEMORY[0x1E4F1E9A0]);
    uint64_t v14 = [NSNumber numberWithUnsignedInteger:v9];
    uint64_t v44 = v14;
    uint64_t v15 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v44 count:1];
    id v39 = 0;
    uint64_t v16 = [v13 initWithShape:v15 dataType:65568 error:&v39];
    id v17 = v39;

    if (!v16)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"could not make temporary array: ", 32);
      id v24 = [v17 description];
      id v25 = (const char *)[v24 UTF8String];
      size_t v26 = strlen(v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v36);
    }
    id v35 = v17;
    char v18 = [v5 vectorizeIntoMultiArray:v16 storageOrder:0 error:&v35];
    id v19 = v35;

    if ((v18 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      id v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"vectorizeIntoMultiArray: failed: ", 33);
      id v32 = [v19 description];
      id v33 = (const char *)[v32 UTF8String];
      size_t v34 = strlen(v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v36);
    }

    id v5 = (id)v16;
  }
  uint64_t v20 = [v5 dataType];
  if (v20 == 65600)
  {
    kaldi::CuVector<float>::Resize((uint64_t)a2, v9, 0);
    uint64_t v22 = [v5 dataPointer];
    uint64_t v38 = 0;
    uint64_t v36 = v22;
    uint64_t v37 = v9;
    kaldi::CuVectorBase<float>::CopyFromVec<double>((uint64_t)a2, (uint64_t)&v36);
  }
  else
  {
    if (v20 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Unexpected output from CoreML: ", 31);
      id v28 = [v5 description];
      uint64_t v29 = (const char *)[v28 UTF8String];
      size_t v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v36);
    }
    uint64_t v21 = [v5 dataPointer];
    uint64_t v38 = 0;
    uint64_t v36 = v21;
    uint64_t v37 = v9;
    kaldi::CuVector<float>::Resize((uint64_t)a2, v9, 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>(a2, (uint64_t)&v36);
  }
}

void sub_1B238CC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::CopyToStdVector(uint64_t a1, std::vector<unsigned int> *a2)
{
  unint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    a2->__end_ = a2->__begin_;
    unsigned int v5 = [v4 int64Value];
    unsigned int v6 = v5;
    std::vector<unsigned int>::pointer end = a2->__end_;
    value = a2->__end_cap_.__value_;
    if (end >= value)
    {
      std::vector<unsigned int>::pointer begin = a2->__begin_;
      uint64_t v15 = end - a2->__begin_;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = (char *)value - (char *)begin;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        id v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v18);
        std::vector<unsigned int>::pointer begin = a2->__begin_;
        std::vector<unsigned int>::pointer end = a2->__end_;
      }
      else
      {
        id v19 = 0;
      }
      uint64_t v23 = (unsigned int *)&v19[4 * v15];
      id v24 = (unsigned int *)&v19[4 * v18];
      unsigned int *v23 = v6;
      uint64_t v9 = v23 + 1;
      while (end != begin)
      {
        unsigned int v25 = *--end;
        *--uint64_t v23 = v25;
      }
      a2->__begin_ = v23;
      a2->__end_ = v9;
      a2->__end_cap_.__value_ = v24;
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *std::vector<unsigned int>::pointer end = v5;
      uint64_t v9 = end + 1;
    }
    a2->__end_ = v9;
  }
  else
  {
    int64_t v10 = [*(id *)(a1 + 32) count];
    std::vector<int>::resize(a2, v10);
    if ([*(id *)(a1 + 32) dataType] == 131104)
    {
      std::vector<unsigned int>::pointer v11 = a2->__begin_;
      uint64_t v12 = (const void *)[*(id *)(a1 + 32) dataPointer];
      size_t v13 = (char *)a2->__end_ - (char *)a2->__begin_;
      memcpy(v11, v12, v13);
    }
    else if (v10 >= 1)
    {
      for (unint64_t i = 0; i != v10; ++i)
      {
        uint64_t v21 = [*(id *)(a1 + 32) objectAtIndexedSubscript:i];
        unsigned int v22 = [v21 intValue];
        if (i >= a2->__end_ - a2->__begin_) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        a2->__begin_[i] = v22;
      }
    }
  }
}

void sub_1B238CEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::CopyToStdVector(uint64_t a1, float **a2)
{
  unint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    a2[1] = *a2;
    [v4 doubleValue];
    float v6 = v5;
    uint64_t v7 = a2[1];
    unint64_t v8 = (unint64_t)a2[2];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v14 = *a2;
      uint64_t v15 = v7 - *a2;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v8 - (void)v14;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        id v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v18);
        uint64_t v14 = *a2;
        uint64_t v7 = a2[1];
      }
      else
      {
        id v19 = 0;
      }
      uint64_t v23 = (float *)&v19[4 * v15];
      id v24 = (float *)&v19[4 * v18];
      float *v23 = v6;
      uint64_t v9 = v23 + 1;
      while (v7 != v14)
      {
        int v25 = *((_DWORD *)v7-- - 1);
        *((_DWORD *)v23-- - 1) = v25;
      }
      *a2 = v23;
      a2[1] = v9;
      a2[2] = v24;
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      float *v7 = v6;
      uint64_t v9 = v7 + 1;
    }
    a2[1] = v9;
  }
  else
  {
    int64_t v10 = [*(id *)(a1 + 32) count];
    if ([*(id *)(a1 + 32) dataType] == 65568)
    {
      std::vector<float>::resize((uint64_t)a2, v10);
      std::vector<unsigned int>::pointer v11 = *a2;
      uint64_t v12 = (const void *)[*(id *)(a1 + 32) dataPointer];
      size_t v13 = (char *)a2[1] - (char *)*a2;
      memcpy(v11, v12, v13);
    }
    else if (v10 >= 1)
    {
      for (unint64_t i = 0; i != v10; ++i)
      {
        uint64_t v21 = [*(id *)(a1 + 32) objectAtIndexedSubscript:i];
        [v21 floatValue];
        if (i >= a2[1] - *a2) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        (*a2)[i] = v22;
      }
    }
  }
}

void sub_1B238D0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *kaldi::quasar::CoreMLTensorData::FlatRangeCopy(kaldi::quasar::CoreMLTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc, int a3, int a4, int a5)
{
  if ([v9[4] dataType] != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Asked for float32 of a non-float32 buffer");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  uint64_t v10 = [v9[4] dataPointer];
  std::vector<unsigned int>::pointer v11 = (void *)((*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(void *)this + 144))(this)
               + 4 * a5);
  return memcpy(v11, (const void *)(v10 + 4 * a3), 4 * (a4 - a3));
}

float kaldi::quasar::CoreMLTensorData::FlatRangeCopy(kaldi::quasar::CoreMLTensorData *this, int *a2, unsigned int a3, int a4)
{
  uint64_t v7 = (*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(void *)this + 144))(this);
  if (a3)
  {
    uint64_t v9 = (float *)(v7 + 4 * a4);
    uint64_t v10 = a3;
    do
    {
      int v11 = *a2++;
      float result = (float)v11;
      *v9++ = (float)v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

void *kaldi::quasar::CoreMLTensorData::FlatRangeCopy(kaldi::quasar::CoreMLTensorData *this, const float *a2, unsigned int a3, int a4)
{
  float v6 = (void *)((*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(void *)this + 144))(this) + 4 * a4);
  return memcpy(v6, a2, 4 * a3);
}

float kaldi::quasar::CoreMLTensorData::AssignScalar(kaldi::quasar::CoreMLTensorData *this, int a2, int a3)
{
  if (*((void *)this + 5))
  {
    uint64_t v5 = [MEMORY[0x1E4F1E948] featureValueWithInt64:a2];
    float v6 = (void *)*((void *)this + 5);
    *((void *)this + 5) = v5;
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(void *)this + 144))(this);
    float result = (float)a2;
    *(float *)(v9 + 4 * a3) = (float)a2;
  }
  return result;
}

void kaldi::quasar::CoreMLTensorData::AssignScalar(kaldi::quasar::CoreMLTensorData *this, float a2, int a3)
{
  if (*((void *)this + 5))
  {
    uint64_t v4 = [MEMORY[0x1E4F1E948] featureValueWithDouble:a2];
    uint64_t v5 = (void *)*((void *)this + 5);
    *((void *)this + 5) = v4;
  }
  else
  {
    *(float *)((*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(void *)this + 144))(this) + 4 * a3) = a2;
  }
}

float kaldi::quasar::CoreMLTensorData::GetFloatScalar(kaldi::quasar::CoreMLTensorData *this, int a2)
{
  id v3 = (void *)*((void *)this + 5);
  if (v3)
  {
    [v3 doubleValue];
    return v4;
  }
  else
  {
    if ([*((id *)this + 4) dataType] != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Asked for float32 of a non-float32 buffer");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
    }
    return *(float *)([*((id *)this + 4) dataPointer] + 4 * a2);
  }
}

uint64_t kaldi::quasar::CoreMLTensorData::GetWritableDataFloat(id *this)
{
  if ([this[4] dataType] != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Asked for float32 of a non-float32 buffer");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  id v2 = this[4];
  return [v2 dataPointer];
}

uint64_t kaldi::quasar::CoreMLTensorData::GetDataFloat(id *this)
{
  if ([this[4] dataType] != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Asked for float32 of a non-float32 buffer");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  id v2 = this[4];
  return [v2 dataPointer];
}

uint64_t kaldi::quasar::CoreMLTensorData::GetNumDims(kaldi::quasar::CoreMLTensorData *this)
{
  if (*((void *)this + 5)) {
    return 0;
  }
  id v2 = [*((id *)this + 4) shape];
  uint64_t v1 = [v2 count];

  return v1;
}

void sub_1B238D610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CoreMLTensorData::GetDimSize(id *this, int a2)
{
  id v3 = [this[4] shape];
  double v4 = [v3 objectAtIndexedSubscript:a2];
  uint64_t v5 = [v4 integerValue];

  return v5;
}

void sub_1B238D67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::Reshape()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::CoreMLNetworkConfig::~CoreMLNetworkConfig(kaldi::quasar::CoreMLNetworkConfig *this)
{
  kaldi::quasar::CoreMLNetworkConfig::~CoreMLNetworkConfig(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A50D90;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(this);
}

id kaldi::quasar::CoreMLTensorData::GetFeatureValue(kaldi::quasar::CoreMLTensorData *this, MLFeatureDescription *a2)
{
  id v3 = a2;
  double v4 = v3;
  if (v3)
  {
    uint64_t v5 = [(MLFeatureDescription *)v3 type];
    if ((unint64_t)(v5 - 1) < 2)
    {
      if (*((void *)this + 4))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"t_ == nil", 9);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
      }
      id v6 = *((id *)this + 5);
LABEL_15:
      uint64_t v14 = v6;
      goto LABEL_18;
    }
    if (v5 != 5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Unsupported CoreML input type ", 30);
      id v21 = [(MLFeatureDescription *)v4 description];
      float v22 = (const char *)[v21 UTF8String];
      size_t v23 = strlen(v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
  }
  if (!*((void *)this + 5))
  {
    if (!*((void *)this + 4))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"t_ != nil", 9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
    objc_msgSend(MEMORY[0x1E4F1E948], "featureValueWithMultiArray:");
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_15;
  }
  uint64_t v7 = [(MLFeatureDescription *)v4 multiArrayConstraint];
  unint64_t v8 = [v7 shape];

  if (![v8 count])
  {

    unint64_t v8 = &unk_1F0A741B0;
  }
  id v25 = 0;
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F1E9A0]) initWithShape:v8 dataType:65568 error:&v25];
  id v10 = v25;
  if (!v9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    unint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Could not make temporary MultiArray: ", 37);
    id v17 = [v10 description];
    unint64_t v18 = (const char *)[v17 UTF8String];
    size_t v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  uint64_t v11 = [*((id *)this + 5) type];
  if (v11 == 1)
  {
    size_t v13 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(*((id *)this + 5), "int64Value"));
    [v9 fillWithNumber:v13];
  }
  else
  {
    if (v11 != 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"unsupported MLFeatureValue type", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
    uint64_t v12 = NSNumber;
    [*((id *)this + 5) doubleValue];
    size_t v13 = objc_msgSend(v12, "numberWithDouble:");
    [v9 fillWithNumber:v13];
  }

  uint64_t v14 = [MEMORY[0x1E4F1E948] featureValueWithMultiArray:v9];

LABEL_18:
  return v14;
}

void sub_1B238DB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlanObjCData::FillBlankInputs(void *a1, void *a2)
{
  id v3 = a2;
  double v4 = [a1 modelDescription];
  uint64_t v5 = [v4 inputDescriptionsByName];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZN5kaldi6quasar25CoreMLNetworkPlanObjCData15FillBlankInputsEP7MLModelP19NSMutableDictionaryIP8NSStringP14MLFeatureValueE_block_invoke;
  void v7[3] = &unk_1E6000268;
  id v6 = v3;
  id v8 = v6;
  [v5 enumerateKeysAndObjectsUsingBlock:v7];
}

void sub_1B238DBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZN5kaldi6quasar25CoreMLNetworkPlanObjCData15FillBlankInputsEP7MLModelP19NSMutableDictionaryIP8NSStringP14MLFeatureValueE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([v6 isOptional] & 1) == 0)
  {
    uint64_t v7 = [*(id *)(a1 + 32) objectForKey:v5];

    if (!v7)
    {
      if ([v6 type] != 5)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
        uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unsupported CoreML required non-MultiArray input: ", 50);
        uint64_t v15 = (const char *)[v5 UTF8String];
        size_t v16 = strlen(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
      id v8 = [v6 multiArrayConstraint];
      uint64_t v9 = [v8 shape];
      id v21 = 0;
      id v10 = (void *)[objc_alloc(MEMORY[0x1E4F1E9A0]) initWithShape:v9 dataType:65568 error:&v21];
      id v11 = v21;
      if (!v10)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
        id v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not build blank array: ", 29);
        id v18 = [v11 debugDescription];
        size_t v19 = (const char *)[v18 UTF8String];
        size_t v20 = strlen(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
      [v10 fillWithNumber:&unk_1F0A741F8];
      uint64_t v12 = *(void **)(a1 + 32);
      size_t v13 = [MEMORY[0x1E4F1E948] featureValueWithMultiArray:v10];
      [v12 setObject:v13 forKey:v5];
    }
  }
}

void sub_1B238DE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

kaldi::quasar::CoreMLTensorData *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(kaldi::quasar::CoreMLTensorData *this, const kaldi::quasar::CoreMLTensorData *a2)
{
  double v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(this);
  void *v4 = &unk_1F0A509E8;
  v4[4] = 0;
  id v5 = (void **)(v4 + 4);
  v4[5] = 0;
  id v6 = (void *)*((void *)a2 + 5);
  if (v6)
  {
    uint64_t v7 = [v6 copy];
    id v8 = (void *)*((void *)this + 5);
    *((void *)this + 5) = v7;

    id v9 = 0;
  }
  else
  {
    id v10 = objc_alloc(MEMORY[0x1E4F1E9A0]);
    id v11 = [*((id *)a2 + 4) shape];
    id v29 = 0;
    uint64_t v12 = [v10 initWithShape:v11 dataType:65568 error:&v29];
    id v13 = v29;
    uint64_t v14 = *v5;
    void *v5 = (void *)v12;

    uint64_t v15 = *v5;
    if (!*v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"CoreMLTensorData copy failed: ", 30);
      id v20 = [v13 description];
      id v21 = (const char *)[v20 UTF8String];
      size_t v22 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
    size_t v16 = (void *)*((void *)a2 + 4);
    id v27 = v13;
    char v17 = [v16 copyIntoMultiArray:v15 error:&v27];
    id v9 = v27;

    if ((v17 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      size_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Copy failed: ", 13);
      id v24 = [v9 description];
      id v25 = (const char *)[v24 UTF8String];
      size_t v26 = strlen(v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
  }

  return this;
}

void sub_1B238E074(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::MLMultiArrayToMatrix(void *a1, int32x2_t *a2)
{
  id v3 = a1;
  double v4 = [v3 shape];
  id v5 = [v3 strides];
  uint64_t v6 = [v4 count];
  if (v6 == 2)
  {
    uint64_t v12 = [v4 objectAtIndexedSubscript:0];
    uint64_t v11 = [v12 intValue];

    id v13 = [v4 objectAtIndexedSubscript:1];
    uint64_t v8 = [v13 intValue];

    id v9 = [v5 objectAtIndexedSubscript:0];
    int v10 = [v9 longValue];
  }
  else
  {
    if (v6 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected output shape from CoreML: ", 37);
      id v16 = [v4 description];
      char v17 = (const char *)[v16 UTF8String];
      size_t v18 = strlen(v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    uint64_t v7 = [v4 objectAtIndexedSubscript:0];
    uint64_t v8 = [v7 intValue];

    id v9 = [v5 objectAtIndexedSubscript:0];
    int v10 = [v9 longValue];
    uint64_t v11 = 1;
  }

  uint64_t v14 = [v3 dataType];
  if (v14 == 65600)
  {
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v23, [v3 dataPointer], v11, v8, v10);
    kaldi::Matrix<float>::Resize(a2, v11, v8, 0, 0);
    kaldi::MatrixBase<float>::CopyFromMat<double>((uint64_t)a2, (uint64_t)v23, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
  }
  else
  {
    if (v14 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      size_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected output from CoreML: ", 31);
      id v20 = [v3 description];
      id v21 = (const char *)[v20 UTF8String];
      size_t v22 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v23, [v3 dataPointer], v11, v8, v10);
    kaldi::Matrix<float>::operator=(a2, (uint64_t)v23);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
  }
}

void sub_1B238E384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::default_delete<kaldi::quasar::CoreMLNetworkPlanObjCData>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x1B3EA8670);
  }
}

void *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(void *a1, int **a2, int a3)
{
  uint64_t v6 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  void *v6 = &unk_1F0A509E8;
  void v6[4] = 0;
  uint64_t v7 = v6 + 4;
  v6[5] = 0;
  kaldi::quasar::CoreMLTensorData::CopyFromStdVector((uint64_t)v6, a2, a3);
  if (!*v7 && !a1[5])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"t_ || fv_", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return a1;
}

void kaldi::quasar::CoreMLTensorData::CopyFromStdVector(uint64_t a1, int **a2, int a3)
{
  uint64_t v23[2] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    v23[0] = &unk_1F0A740A0;
    id v5 = [NSNumber numberWithUnsignedLong:a2[1] - *a2];
    v23[1] = v5;
    uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:2];
  }
  else
  {
    id v5 = [NSNumber numberWithUnsignedLong:a2[1] - *a2];
    size_t v22 = v5;
    uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v22 count:1];
  }
  uint64_t v7 = (void *)v6;

  id v21 = 0;
  uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1E9A0]) initWithShape:v7 dataType:65568 error:&v21];
  id v9 = v21;
  uint64_t v11 = *(void **)(a1 + 32);
  int v10 = (id *)(a1 + 32);
  *int v10 = (id)v8;

  if (!*v10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    id v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"CoreMLTensorData create failed: ", 32);
    id v17 = [v9 description];
    size_t v18 = (const char *)[v17 UTF8String];
    size_t v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  uint64_t v12 = (float *)[*v10 dataPointer];
  id v13 = *a2;
  uint64_t v14 = a2[1];
  while (v13 != v14)
  {
    int v15 = *v13++;
    *v12++ = (float)v15;
  }
}

void sub_1B238E744(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  void *v6 = &unk_1F0A509E8;
  void v6[4] = 0;
  uint64_t v7 = v6 + 4;
  v6[5] = 0;
  kaldi::quasar::CoreMLTensorData::CopyFromStdVector((uint64_t)v6, a2, a3);
  if (!*v7 && !a1[5])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"t_ || fv_", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return a1;
}

void kaldi::quasar::CoreMLTensorData::CopyFromStdVector(uint64_t a1, uint64_t a2, int a3)
{
  void v19[2] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    v19[0] = &unk_1F0A740A0;
    id v5 = [NSNumber numberWithUnsignedLong:(uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2];
    v19[1] = v5;
    uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v19 count:2];
  }
  else
  {
    id v5 = [NSNumber numberWithUnsignedLong:(uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2];
    size_t v18 = v5;
    uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v18 count:1];
  }
  uint64_t v7 = (void *)v6;

  id v17 = 0;
  uint64_t v8 = [objc_alloc(MEMORY[0x1E4F1E9A0]) initWithShape:v7 dataType:65568 error:&v17];
  id v9 = v17;
  uint64_t v11 = *(void **)(a1 + 32);
  int v10 = (id *)(a1 + 32);
  *int v10 = (id)v8;

  if (!*v10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"CoreMLTensorData create failed: ", 32);
    id v13 = [v9 description];
    uint64_t v14 = (const char *)[v13 UTF8String];
    size_t v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  memcpy((void *)[*v10 dataPointer], *(const void **)a2, *(void *)(a2 + 8) - *(void *)a2);
}

void sub_1B238EA64(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(void *a1, uint64_t a2)
{
  double v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  void *v4 = &unk_1F0A509E8;
  v4[4] = 0;
  id v5 = v4 + 4;
  v4[5] = 0;
  kaldi::quasar::CoreMLTensorData::CopyFromMatrix((uint64_t)v4, a2);
  if (!*v5 && !a1[5])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"t_ || fv_", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return a1;
}

void kaldi::quasar::CoreMLTensorData::CopyFromMatrix(uint64_t a1, uint64_t a2)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  double v4 = [NSNumber numberWithInt:kaldi::MatrixBase<float>::NumRows(a2)];
  v30[0] = v4;
  id v5 = [NSNumber numberWithInt:kaldi::MatrixBase<float>::NumCols(a2)];
  v30[1] = v5;
  uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObjects:v30 count:2];

  id v29 = 0;
  uint64_t v7 = [objc_alloc(MEMORY[0x1E4F1E9A0]) initWithShape:v6 dataType:65568 error:&v29];
  id v8 = v29;
  id v9 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v7;

  int v10 = *(void **)(a1 + 32);
  if (!v10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    id v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"CoreMLTensorData create failed: ", 32);
    id v25 = [v8 description];
    size_t v26 = (const char *)[v25 UTF8String];
    size_t v27 = strlen(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  uint64_t v11 = [v10 strides];
  uint64_t v12 = [v11 objectAtIndexedSubscript:0];
  int v13 = [v12 intValue];

  if (v13 == fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(a2)
    && ([v11 objectAtIndexedSubscript:1],
        uint64_t v14 = objc_claimAutoreleasedReturnValue(),
        BOOL v15 = [v14 intValue] == 1,
        v14,
        v15))
  {
    id v16 = (void *)[*(id *)(a1 + 32) dataPointer];
    id v17 = *(const void **)a2;
    int v18 = kaldi::MatrixBase<float>::NumCols(a2);
    int v19 = kaldi::MatrixBase<float>::NumRows(a2);
    memcpy(v16, v17, 4 * v19 * v18);
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    size_t v22 = 4 * (int)kaldi::MatrixBase<float>::NumCols(a2);
    uint64_t v23 = 4 * v13;
    while (v21 < (int)kaldi::MatrixBase<float>::NumRows(a2))
    {
      memcpy((void *)([*(id *)(a1 + 32) dataPointer] + v20), (const void *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v21++), v22);
      v20 += v23;
    }
  }
}

void sub_1B238EE2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(void *a1, void *a2)
{
  double v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  void *v4 = &unk_1F0A509E8;
  v4[4] = 0;
  id v5 = (id *)(v4 + 4);
  v4[5] = 0;
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v7 = (void *)*a2;
  id v8 = (void *)a2[1];
  if ((void *)*a2 == v8)
  {
    uint64_t v13 = [MEMORY[0x1E4F1E948] featureValueWithDouble:0.0];
    uint64_t v14 = (void *)a1[5];
    a1[5] = v13;

    id v11 = 0;
  }
  else
  {
    do
    {
      id v9 = [NSNumber numberWithUnsignedLong:*v7];
      [v6 addObject:v9];

      ++v7;
    }
    while (v7 != v8);
    id v21 = 0;
    uint64_t v10 = [objc_alloc(MEMORY[0x1E4F1E9A0]) initWithShape:v6 dataType:65568 error:&v21];
    id v11 = v21;
    id v12 = *v5;
    id *v5 = (id)v10;

    if (!*v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      id v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"CoreMLTensorData copy failed: ", 30);
      id v17 = [v11 description];
      int v18 = (const char *)[v17 UTF8String];
      size_t v19 = strlen(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
    [*v5 fillWithNumber:&unk_1F0A740B8];
  }

  return a1;
}

void sub_1B238F078(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(v1);
  _Unwind_Resume(a1);
}

kaldi::quasar::CoreMLTensorData *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(kaldi::quasar::CoreMLTensorData *this, MLFeatureValue *a2)
{
  id v3 = a2;
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(this);
  *(void *)this = &unk_1F0A509E8;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fv", 2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  unint64_t v4 = [(MLFeatureValue *)v3 type];
  if (v4 >= 3)
  {
    if (v4 != 5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unsupported feature type: ", 26);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
    }
    id v6 = [(MLFeatureValue *)v3 multiArrayValue];
    kaldi::quasar::CoreMLTensorData::SetFromMultiArray(this, v6);
  }
  else
  {
    uint64_t v5 = [(MLFeatureValue *)v3 copy];
    id v6 = (MLMultiArray *)*((void *)this + 5);
    *((void *)this + 5) = v5;
  }

  return this;
}

void kaldi::quasar::CoreMLTensorData::SetFromMultiArray(kaldi::quasar::CoreMLTensorData *this, MLMultiArray *a2)
{
  unint64_t v4 = a2;
  uint64_t v5 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;

  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"ma", 2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  uint64_t v6 = [(MLMultiArray *)v4 dataType];
  if (v6 > 65599)
  {
    if (v6 == 65600)
    {
      id v13 = objc_alloc(MEMORY[0x1E4F1E9A0]);
      uint64_t v14 = [(MLMultiArray *)v4 shape];
      id v27 = 0;
      uint64_t v15 = [v13 initWithShape:v14 dataType:65568 error:&v27];
      id v10 = v27;
      id v16 = (void *)*((void *)this + 4);
      *((void *)this + 4) = v15;

      if (!*((void *)this + 4))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
        size_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Could not make MLMultiArray: ", 29);
        id v23 = [v10 description];
        id v24 = (const char *)[v23 UTF8String];
        size_t v25 = strlen(v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
      }
      id v17 = v4;
      vDSP_vdpsp((const double *)-[MLMultiArray dataPointer](v17, "dataPointer"), 1, (float *)[*((id *)this + 4) dataPointer], 1, -[MLMultiArray count](v17, "count"));
    }
    else
    {
      if (v6 != 131104) {
        goto LABEL_15;
      }
      id v7 = objc_alloc(MEMORY[0x1E4F1E9A0]);
      id v8 = [(MLMultiArray *)v4 shape];
      id v26 = 0;
      uint64_t v9 = [v7 initWithShape:v8 dataType:65568 error:&v26];
      id v10 = v26;
      id v11 = (void *)*((void *)this + 4);
      *((void *)this + 4) = v9;

      if (!*((void *)this + 4))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
        int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Could not make MLMultiArray: ", 29);
        id v19 = [v10 description];
        uint64_t v20 = (const char *)[v19 UTF8String];
        size_t v21 = strlen(v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
      }
      id v12 = v4;
      vDSP_vflt32((const int *)-[MLMultiArray dataPointer](v12, "dataPointer"), 1, (float *)[*((id *)this + 4) dataPointer], 1, -[MLMultiArray count](v12, "count"));
    }

    goto LABEL_13;
  }
  if (v6 != 65552 && v6 != 65568)
  {
LABEL_15:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"not supported MLMultiArray data type: ", 38);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  objc_storeStrong((id *)this + 4, a2);
LABEL_13:
}

void std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      id v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      id v12 = 0;
    }
    uint64_t v15 = v12;
    id v16 = &v12[24 * v8];
    int v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    id v17 = &v16[v14];
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v15);
  }
}

void sub_1B238F738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4C910;
  *(void *)(a1 + 88) = &unk_1F0A4CA48;
  *(void *)(a1 + 96) = &unk_1F0A4CA70;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4C910;
  *(void *)(a1 + 88) = &unk_1F0A4CA48;
  *(void *)(a1 + 96) = &unk_1F0A4CA70;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_1B238F9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  size_t v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 360) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 192) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  uint64_t v17 = *(void *)(v10 + 184);
  *(void *)(v10 + 184) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  __n128 v4 = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 120) = v4;
  v4.n128_u64[0] = *(void *)(a2 + 136);
  *(void *)(a1 + 136) = v4.n128_u64[0];
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v4.n128_u32[0] = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 148) = v4.n128_u32[0];
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
    *(unsigned char *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  uint64_t v5 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v5) {
    (*(void (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v4);
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v6 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v6) {
    (*(void (**)(uint64_t, __n128))(*(void *)v6 + 16))(v6, v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v7);
  }
}

void sub_1B238FD28(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4C910;
  id v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4CA48;
  id v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A4CA70;
  __n128 v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(void *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  uint64_t v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 360) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(void *)(a1 + 328) = v6;
    operator delete(v6);
  }
  unint64_t v9 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  unint64_t v9 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  unint64_t v9 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_1B239001C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitData(int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6 = v69;
  int v73 = 0x40000000;
  int v74 = -1073741824;
  int v72 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[36], &v71);
  int v70 = -1;
  memset(v69, 0, sizeof(v69));
  uint64_t v7 = a1 + 29;
  uint64_t v8 = a1 + 28;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_189;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v69);
    if (SHIBYTE(v69[2]) < 0)
    {
      uint64_t v12 = v69[1];
      switch(v69[1])
      {
        case 6:
          BOOL v13 = *(_DWORD *)v69[0] == 1684099132 && *(_WORD *)(v69[0] + 4) == 15960;
          uint64_t v10 = a1 + 32;
          if (v13) {
            goto LABEL_169;
          }
          BOOL v14 = *(_DWORD *)v69[0] == 1684099132 && *(_WORD *)(v69[0] + 4) == 15961;
          uint64_t v10 = a1 + 33;
          if (v14) {
            goto LABEL_169;
          }
          if (v69[1] != 15) {
            goto LABEL_29;
          }
LABEL_24:
          BOOL v15 = *(void *)v69[0] == 0x61526E7261654C3CLL && *(void *)(v69[0] + 7) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 34;
          if (v15) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_29:
          if (v12 != 19) {
            goto LABEL_38;
          }
          BOOL v18 = *(void *)v69[0] == 0x61654C736169423CLL
             && *(void *)(v69[0] + 8) == 0x6F43657461526E72
             && *(void *)(v69[0] + 11) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 35;
          if (v18) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_38:
          if (v12 != 12) {
            goto LABEL_44;
          }
          if (*(void *)v69[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v69[0] + 8) == 1046766949) {
            goto LABEL_168;
          }
          uint64_t v12 = v69[1];
LABEL_44:
          if (v12 != 18) {
            goto LABEL_53;
          }
          if (*(void *)v69[0] == 0x6E6569646172473CLL
            && *(void *)(v69[0] + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v69[0] + 16) == 15973)
          {
            goto LABEL_76;
          }
          uint64_t v12 = v69[1];
LABEL_53:
          if (v12 != 9) {
            goto LABEL_182;
          }
          BOOL v22 = *(void *)v69[0] == 0x6461724778614D3CLL && *(unsigned char *)(v69[0] + 8) == 62;
          uint64_t v16 = a1 + 37;
          if (v22) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_182:
          if (v12 != 12) {
            goto LABEL_175;
          }
          uint64_t v6 = (void *)v69[0];
          goto LABEL_184;
        case 0xALL:
          if (*(void *)v69[0] != 0x61654D736169423CLL || *(_WORD *)(v69[0] + 8) != 15982)
          {
            BOOL v40 = *(void *)v69[0] == 0x654C5870616D463CLL && *(_WORD *)(v69[0] + 8) == 15982;
            uint64_t v10 = a1 + 26;
            if (!v40)
            {
              BOOL v41 = *(void *)v69[0] == 0x654C5970616D463CLL && *(_WORD *)(v69[0] + 8) == 15982;
              uint64_t v10 = a1 + 27;
              if (!v41)
              {
                BOOL v42 = *(void *)v69[0] == 0x654C58746C69463CLL && *(_WORD *)(v69[0] + 8) == 15982;
                uint64_t v10 = a1 + 28;
                if (!v42)
                {
                  BOOL v32 = *(void *)v69[0] == 0x654C59746C69463CLL && *(_WORD *)(v69[0] + 8) == 15982;
LABEL_147:
                  uint64_t v10 = a1 + 29;
                  if (!v32) {
                    goto LABEL_175;
                  }
                }
              }
            }
            goto LABEL_169;
          }
LABEL_170:
          uint64_t v16 = &v74;
          break;
        case 0xBLL:
          if (*(void *)v69[0] != 0x6E6152736169423CLL || *(void *)(v69[0] + 3) != 0x3E65676E61527361)
          {
            BOOL v44 = *(void *)v69[0] == 0x745358746C69463CLL && *(void *)(v69[0] + 3) == 0x3E7065745358746CLL;
            uint64_t v10 = a1 + 30;
            if (!v44)
            {
              BOOL v35 = *(void *)v69[0] == 0x745359746C69463CLL && *(void *)(v69[0] + 3) == 0x3E7065745359746CLL;
LABEL_160:
              uint64_t v10 = a1 + 31;
              if (!v35) {
                goto LABEL_175;
              }
            }
            goto LABEL_169;
          }
LABEL_171:
          uint64_t v16 = &v73;
          break;
        case 0xDLL:
          if (*(void *)v69[0] != 0x74536D617261503CLL || *(void *)(v69[0] + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
LABEL_167:
          uint64_t v16 = &v72;
          break;
        case 0xFLL:
          goto LABEL_24;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch(HIBYTE(v69[2]))
      {
        case 6:
          BOOL v9 = LODWORD(v69[0]) == 1684099132 && WORD2(v69[0]) == 15960;
          uint64_t v10 = a1 + 32;
          if (!v9)
          {
            BOOL v11 = LODWORD(v69[0]) == 1684099132 && WORD2(v69[0]) == 15961;
            uint64_t v10 = a1 + 33;
            if (!v11) {
              goto LABEL_175;
            }
          }
          goto LABEL_169;
        case 9:
          goto LABEL_123;
        case 0xA:
          if (v69[0] == 0x61654D736169423CLL && LOWORD(v69[1]) == 15982) {
            goto LABEL_170;
          }
          BOOL v29 = v69[0] == 0x654C5870616D463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 26;
          if (v29) {
            goto LABEL_169;
          }
          BOOL v30 = v69[0] == 0x654C5970616D463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 27;
          if (v30) {
            goto LABEL_169;
          }
          BOOL v31 = v69[0] == 0x654C58746C69463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 28;
          if (v31) {
            goto LABEL_169;
          }
          BOOL v32 = v69[0] == 0x654C59746C69463CLL && LOWORD(v69[1]) == 15982;
          goto LABEL_147;
        case 0xB:
          if (v69[0] == 0x6E6152736169423CLL && *(void *)((char *)v69 + 3) == 0x3E65676E61527361) {
            goto LABEL_171;
          }
          BOOL v34 = v69[0] == 0x745358746C69463CLL && *(void *)((char *)v69 + 3) == 0x3E7065745358746CLL;
          uint64_t v10 = a1 + 30;
          if (v34) {
            goto LABEL_169;
          }
          BOOL v35 = v69[0] == 0x745359746C69463CLL && *(void *)((char *)v69 + 3) == 0x3E7065745359746CLL;
          goto LABEL_160;
        case 0xC:
          goto LABEL_118;
        case 0xD:
          if (v69[0] != 0x74536D617261503CLL || *(void *)((char *)v69 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
          goto LABEL_167;
        case 0xF:
          BOOL v36 = v69[0] == 0x61526E7261654C3CLL && *(void *)((char *)v69 + 7) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 34;
          if (v36) {
            break;
          }
          if (HIBYTE(v69[2]) != 9) {
            goto LABEL_117;
          }
          goto LABEL_123;
        case 0x12:
          goto LABEL_68;
        case 0x13:
          BOOL v24 = v69[0] == 0x61654C736169423CLL
             && v69[1] == 0x6F43657461526E72
             && *(void *)((char *)&v69[1] + 3) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 35;
          if (v24) {
            break;
          }
          if (HIBYTE(v69[2]) == 9) {
            goto LABEL_123;
          }
          if (HIBYTE(v69[2]) == 18)
          {
LABEL_68:
            if (v69[0] == 0x6E6569646172473CLL && v69[1] == 0x7079546D726F4E74 && LOWORD(v69[2]) == 15973)
            {
LABEL_76:
              kaldi::ReadToken(a2, 0, (uint64_t)&v71);
              goto LABEL_173;
            }
          }
          else
          {
LABEL_117:
            if (HIBYTE(v69[2]) != 12) {
              goto LABEL_175;
            }
LABEL_118:
            if (v69[0] == 0x536D6F646E61523CLL && LODWORD(v69[1]) == 1046766949)
            {
LABEL_168:
              uint64_t v10 = &v70;
LABEL_169:
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v10);
              goto LABEL_173;
            }
          }
          if (HIBYTE(v69[2]) != 9)
          {
            if (HIBYTE(v69[2]) == 12)
            {
LABEL_184:
              if (*v6 == 0x6E6F706D6F432F3CLL && *((_DWORD *)v6 + 2) == 1047817829)
              {
LABEL_189:
                a1[36] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v71);
                int v52 = a1[2];
                int v54 = a1[26];
                int v53 = a1[27];
                int v55 = v52 / (v53 * v54);
                if (!(v52 % (v53 * v54)))
                {
                  int v56 = (v54 + 2 * a1[32] - a1[28]) / a1[30] + 1;
                  int v57 = a1[3];
                  int v58 = v56 + v56 * ((v53 + 2 * a1[33] - a1[29]) / a1[31]);
                  uint64_t v59 = (v57 / v58);
                  if (!(v57 % v58))
                  {
                    if (v70 >= 1) {
                      kaldi::UniformRandomNumber::SetRandomSeeds(a3, v70);
                    }
                    kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v68, a3);
                    kaldi::Matrix<float>::Matrix((uint64_t)v66, v59, (*v8 * v55 * *v7), 0, 0);
                    if ((int)v59 >= 1)
                    {
                      int v60 = 0;
                      int v61 = *v8;
                      int v62 = *v7;
                      do
                      {
                        if (v62 * v55 * v61 >= 1)
                        {
                          uint64_t v63 = 0;
                          do
                          {
                            float v64 = *(float *)&v72;
                            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v68, 0);
                            *(float *)(v66[0] + 4 * v60 * v67 + 4 * v63++) = v64 * v65;
                            int v61 = *v8;
                            int v62 = *v7;
                          }
                          while (v63 < *v8 * v55 * *v7);
                        }
                        ++v60;
                      }
                      while (v60 != v59);
                    }
                    kaldi::MatrixBase<float>::NumRows((uint64_t)v66);
                    kaldi::MatrixBase<float>::NumCols((uint64_t)v66);
                    kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>();
                  }
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
                }
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
              }
            }
LABEL_175:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
            uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unknown token ", 14);
            if (v69[2] >= 0) {
              id v47 = v69;
            }
            else {
              id v47 = (void *)v69[0];
            }
            if (v69[2] >= 0) {
              uint64_t v48 = HIBYTE(v69[2]);
            }
            else {
              uint64_t v48 = v69[1];
            }
            id v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
            long long v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
          }
LABEL_123:
          BOOL v38 = v69[0] == 0x6461724778614D3CLL && LOBYTE(v69[1]) == 62;
          uint64_t v16 = a1 + 37;
          if (!v38) {
            goto LABEL_175;
          }
          break;
        default:
          goto LABEL_175;
      }
    }
    kaldi::ReadBasicType<float>(a2, 0, (float *)v16);
LABEL_173:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_1B2390CD8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>()
{
}

void sub_1B2390DE8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(uint64_t a1)
{
  id v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(void *)(a1 + 152) = 0;
  }
  size_t v3 = *(int *)(a1 + 104);
  size_t v4 = *(int *)(a1 + 108);
  int v5 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  size_t v6 = *(int *)(a1 + 128);
  size_t v7 = *(int *)(a1 + 132);
  size_t v8 = *(int *)(a1 + 112);
  size_t v9 = *(int *)(a1 + 116);
  size_t v10 = *(int *)(a1 + 120);
  size_t v11 = *(int *)(a1 + 124);
  int v12 = ((int)v3 + 2 * (int)v6 - (int)v8) / (int)v10 + 1;
  int v13 = ((int)v4 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  int v14 = *(_DWORD *)(a1 + 12) / (v13 * v12);
  in_desc.width = v3;
  in_desc.height = v4;
  in_desc.channels = v5;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&in_desc.data_scale = 1065353216;
  out_desc.width = v12;
  out_desc.height = v13;
  out_desc.channels = v14;
  out_desc.row_stride = v12;
  out_desc.image_stride = v13 * v12;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v10;
  layer_params.y_stride = v11;
  layer_params.x_padding = v6;
  layer_params.y_padding = v7;
  layer_params.k_width = v8;
  layer_params.k_height = v9;
  layer_params.in_channels = v5;
  layer_params.out_channels = v14;
  *(void *)&layer_params.weights.data_type = 0x3F80000000010020;
  uint64_t v15 = *(void *)(a1 + 184);
  uint64_t v16 = *(void *)(a1 + 192);
  layer_params.weights.unsigned int data = *(const void **)(v15 + 8);
  layer_params.weights.data_table = 0;
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.bias.unsigned int data = *(const void **)(v16 + 8);
  layer_params.bias.data_scale = 1.0;
  layer_params.bias.data_table = 0;
  uint64_t v17 = *(unsigned int *)(v15 + 16);
  if (v17 == *(_DWORD *)(v15 + 24))
  {
    BNNSFilterParameters filter_params = *(BNNSFilterParameters *)ymmword_1B25AD9F0;
    double result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(void *)(a1 + 152) = result;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level < 0)
    {
      uint64_t v20 = *(unsigned int *)(v15 + 20);
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
      uint64_t v19 = *(void *)(a1 + 184);
      uint64_t v17 = *(unsigned int *)(v19 + 16);
      uint64_t v20 = *(unsigned int *)(v19 + 20);
    }
    memset(&v23, 0, sizeof(v23));
    kaldi::Matrix<float>::Matrix((uint64_t)v22, v20, v17, 1, 1);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(*(void *)(a1 + 184), v22, 111);
    int v21 = kaldi::MatrixBase<float>::NumCols((uint64_t)v22);
    if (v21 != fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v22)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.unsigned int data = *(const void **)v22;
    *(void *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v23);
    return (void *)kaldi::Matrix<float>::~Matrix((uint64_t)v22);
  }
  return result;
}

void sub_1B2391054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::ReadData(float *a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v37 = *((_DWORD *)a1 + 26);
    int v36 = *((_DWORD *)a1 + 27);
    if (*((_DWORD *)a1 + 2) % (v36 * v37))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    }
    else
    {
      int v38 = (v37 + 2 * *((_DWORD *)a1 + 32) - *((_DWORD *)a1 + 28)) / *((_DWORD *)a1 + 30) + 1;
      if (!(*((_DWORD *)a1 + 3)
           % (v38 + v38 * ((v36 + 2 * *((_DWORD *)a1 + 33) - *((_DWORD *)a1 + 29)) / *((_DWORD *)a1 + 31)))))
        kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    memset(v44, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v44);
    if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
    {
      uint64_t v6 = v44;
      switch(HIBYTE(v44[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          BOOL v7 = v44[0] == (void *)0x6461724778614D3CLL && LOBYTE(v44[1]) == 62;
          uint64_t v8 = a1 + 37;
          if (!v7) {
            goto LABEL_8;
          }
          goto LABEL_109;
        case 0xA:
LABEL_69:
          BOOL v23 = v44[0] == (void *)0x654C5870616D463CLL && LOWORD(v44[1]) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 26);
          if (v23) {
            goto LABEL_138;
          }
          if (HIBYTE(v44[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v44[2]) != 10) {
            goto LABEL_137;
          }
          BOOL v24 = v44[0] == (void *)0x654C5970616D463CLL && LOWORD(v44[1]) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 27);
          if (!v24) {
            goto LABEL_79;
          }
          goto LABEL_138;
        case 0xB:
LABEL_89:
          BOOL v27 = v44[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v44 + 3) == (void *)0x3E7065745358746CLL;
          uint64_t v17 = (uint64_t)(a1 + 30);
          if (v27) {
            goto LABEL_138;
          }
          if (HIBYTE(v44[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v44[2]) != 11) {
            goto LABEL_137;
          }
          BOOL v28 = v44[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v44 + 3) == (void *)0x3E7065745359746CLL;
          uint64_t v17 = (uint64_t)(a1 + 31);
          if (!v28) {
            goto LABEL_137;
          }
          goto LABEL_138;
        case 0xF:
          BOOL v29 = v44[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v44 + 7) == (void *)0x3E66656F43657461;
          uint64_t v8 = a1 + 34;
          if (!v29) {
            goto LABEL_137;
          }
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v44[0] != (void *)0x6E6569646172473CLL
            || v44[1] != (void *)0x7079546D726F4E74
            || LOWORD(v44[2]) != 15973)
          {
            uint64_t v6 = v44;
            switch(HIBYTE(v44[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          BOOL v20 = v44[0] == (void *)0x61654C736169423CLL
             && v44[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v44[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v8 = a1 + 35;
          if (!v20)
          {
            switch(HIBYTE(v44[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    uint64_t v9 = v44[1];
    if (v44[1] == (void *)15)
    {
      BOOL v10 = *(void *)v44[0] == 0x61526E7261654C3CLL && *(void *)((char *)v44[0] + 7) == 0x3E66656F43657461;
      uint64_t v8 = a1 + 34;
      if (v10) {
        goto LABEL_109;
      }
    }
    if (v44[1] == (void *)19)
    {
      BOOL v12 = *(void *)v44[0] == 0x61654C736169423CLL
         && *((void *)v44[0] + 1) == 0x6F43657461526E72
         && *(void *)((char *)v44[0] + 11) == 0x3E66656F43657461;
      uint64_t v8 = a1 + 35;
      if (v12) {
        goto LABEL_109;
      }
      uint64_t v9 = v44[1];
    }
    if (v9 == (void *)18)
    {
      if (*(void *)v44[0] == 0x6E6569646172473CLL
        && *((void *)v44[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v44[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v43 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *((_DWORD *)a1 + 36) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_139;
      }
      uint64_t v9 = v44[1];
    }
    if (v9 != (void *)9) {
      goto LABEL_39;
    }
    BOOL v15 = *(void *)v44[0] == 0x6461724778614D3CLL && *((unsigned char *)v44[0] + 8) == 62;
    uint64_t v8 = a1 + 37;
    if (!v15)
    {
      uint64_t v9 = v44[1];
LABEL_39:
      if (v9 == (void *)10)
      {
        BOOL v16 = *(void *)v44[0] == 0x654C5870616D463CLL && *((_WORD *)v44[0] + 4) == 15982;
        uint64_t v17 = (uint64_t)(a1 + 26);
        if (v16) {
          goto LABEL_138;
        }
        uint64_t v9 = v44[1];
        if (v44[1] == (void *)10)
        {
          BOOL v18 = *(void *)v44[0] == 0x654C5970616D463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 27);
          if (v18) {
            goto LABEL_138;
          }
          if ((HIBYTE(v44[2]) & 0x80) == 0)
          {
            if (HIBYTE(v44[2]) != 6)
            {
              if (HIBYTE(v44[2]) != 10) {
                goto LABEL_137;
              }
LABEL_79:
              BOOL v25 = v44[0] == (void *)0x654C58746C69463CLL && LOWORD(v44[1]) == 15982;
              uint64_t v17 = (uint64_t)(a1 + 28);
              if (!v25)
              {
                BOOL v26 = v44[0] == (void *)0x654C59746C69463CLL && LOWORD(v44[1]) == 15982;
                uint64_t v17 = (uint64_t)(a1 + 29);
                if (!v26) {
                  goto LABEL_137;
                }
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v17);
              goto LABEL_139;
            }
LABEL_101:
            uint64_t v6 = v44;
LABEL_133:
            BOOL v34 = *(_DWORD *)v6 == 1684099132 && *((_WORD *)v6 + 2) == 15960;
            uint64_t v17 = (uint64_t)(a1 + 32);
            if (!v34) {
              goto LABEL_137;
            }
            goto LABEL_138;
          }
          BOOL v30 = *(void *)v44[0] == 0x654C58746C69463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 28);
          if (v30) {
            goto LABEL_138;
          }
          uint64_t v9 = v44[1];
          BOOL v31 = *(void *)v44[0] == 0x654C59746C69463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 29);
          if (v31) {
            goto LABEL_138;
          }
          if ((HIBYTE(v44[2]) & 0x80) == 0) {
            goto LABEL_8;
          }
        }
      }
      if (v9 != (void *)11) {
        goto LABEL_131;
      }
      BOOL v32 = *(void *)v44[0] == 0x745358746C69463CLL && *(void *)((char *)v44[0] + 3) == 0x3E7065745358746CLL;
      uint64_t v17 = (uint64_t)(a1 + 30);
      if (v32) {
        goto LABEL_138;
      }
      uint64_t v9 = v44[1];
      if (v44[1] != (void *)11) {
        goto LABEL_131;
      }
      BOOL v33 = *(void *)v44[0] == 0x745359746C69463CLL && *(void *)((char *)v44[0] + 3) == 0x3E7065745359746CLL;
      uint64_t v17 = (uint64_t)(a1 + 31);
      if (v33) {
        goto LABEL_138;
      }
      if ((HIBYTE(v44[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v44[2]) == 6) {
          goto LABEL_101;
        }
      }
      else
      {
LABEL_131:
        if (v9 == (void *)6)
        {
          uint64_t v6 = (void **)v44[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      BOOL v35 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, "<PadY>");
      uint64_t v17 = (uint64_t)(a1 + 33);
      if (!v35)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        id v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v44[2]) >= 0) {
          BOOL v40 = v44;
        }
        else {
          BOOL v40 = (void **)v44[0];
        }
        if (SHIBYTE(v44[2]) >= 0) {
          uint64_t v41 = HIBYTE(v44[2]);
        }
        else {
          uint64_t v41 = (uint64_t)v44[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v8);
LABEL_139:
    if (SHIBYTE(v44[2]) < 0) {
      operator delete(v44[0]);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadX>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadY>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1B2391CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t *a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1[23], a2, a3, a4);
  uint64_t v8 = a1[24];
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  return (*(_DWORD *)(*(void *)(a1 + 192) + 16)
                      + *(_DWORD *)(*(void *)(a1 + 184) + 16) * *(_DWORD *)(*(void *)(a1 + 184) + 20));
}

const void **kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  uint64_t v5 = a1[23];
  int v6 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, v5);
  uint64_t v7 = a1[24];
  int v8 = *(_DWORD *)(v7 + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(void *))(*a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v10);
  }
  uint64_t v5 = a1[23];
  int v6 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = *(char **)a2;
  LODWORD(v11) = v6;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v5, &v10);
  uint64_t v7 = (_DWORD *)a1[24];
  int v8 = v7[4];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)(*(void *)a2 + 4 * v6);
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)&v10);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  float v2 = kaldi::CuMatrixBase<float>::Sum(*(void *)(a1 + 184));
  double v3 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 192));
  return v2 + *(float *)&v3;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix(v7, *(unsigned int *)(*(void *)(a1 + 184) + 20), *(unsigned int *)(*(void *)(a1 + 184) + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 184), (uint64_t)v7, 111, a2, 1.0);
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 192) + 16);
  v6[0] = &unk_1F0A517C0;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(a1 + 192), (uint64_t)v6, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1B239203C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  (*(void (**)(uint64_t *, void *, void))(*a1 + 168))(a1, v17, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" OutSizeX:", 10);
  float v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  double v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<float>(a1[23]);
  if ((v16 & 0x80u) == 0) {
    int v6 = v15;
  }
  else {
    int v6 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v7 = v16;
  }
  else {
    uint64_t v7 = (uint64_t)v15[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(a1[24]);
  if ((v14 & 0x80u) == 0) {
    BOOL v10 = __p;
  }
  else {
    BOOL v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v19);
}

void sub_1B2392328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v33, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 200));
  if ((v32 & 0x80u) == 0) {
    uint64_t v4 = v31;
  }
  else {
    uint64_t v4 = (void **)v31[0];
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v5 = v32;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v31[1];
  }
  int v6 = std::string::append(&v33, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v34, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v30 & 0x80u) == 0) {
    BOOL v10 = v29;
  }
  else {
    BOOL v10 = (void **)v29[0];
  }
  if ((v30 & 0x80u) == 0) {
    std::string::size_type v11 = v30;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v29[1];
  }
  uint64_t v12 = std::string::append(&v35, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v14 = std::string::append(&v36, "\n  bias_grad");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 224));
  if ((v28 & 0x80u) == 0) {
    unsigned __int8 v16 = v27;
  }
  else {
    unsigned __int8 v16 = (void **)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    std::string::size_type v17 = v28;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v27[1];
  }
  char v18 = std::string::append(&v37, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  BOOL v20 = std::string::append(&v38, ", lr-coef ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v26 & 0x80u) == 0) {
    BOOL v22 = __p;
  }
  else {
    BOOL v22 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v23 = v26;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)__p[1];
  }
  BOOL v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((char)v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1B2392610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 57) < 0) {
    operator delete(*(void **)(v52 - 80));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B239270C()
{
}

void sub_1B2392714()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 || !*(unsigned char *)(a1 + 17)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateCpu(a1, a2, a3, a4);
  }
  else {
    BNNSFilterApplyBatch(*(void **)(a1 + 152), *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = *(_DWORD *)(a1 + 104);
  int v7 = *(_DWORD *)(a1 + 108);
  int v73 = (v6 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v72 = (v7 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v70 = (v73 + 1);
  uint64_t v71 = (v72 + 1);
  int v8 = v71 * v70;
  int v9 = *(_DWORD *)(a1 + 8);
  int v74 = *(_DWORD *)(a1 + 12);
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  long long v79 = (uint64_t *)(a1 + 296);
  uint64_t v11 = *(void *)(a1 + 296);
  unint64_t v12 = *(int *)(a1 + 80);
  int v77 = v71 * v70;
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v11) >> 3) < v12)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v79, v12);
    int v8 = v71 * v70;
    uint64_t v11 = *v79;
  }
  int v13 = a4;
  unsigned __int8 v14 = (uint64_t *)(v11 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 4) < v8)
  {
    std::vector<kaldi::CuMatrix<float>>::resize(v14, v8);
    int v8 = v71 * v70;
  }
  if (v8 >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(*(void *)(a1 + 296) + 24 * v13) + v15), v10, *(unsigned int *)(*(void *)(a1 + 184) + 16), 0, 0);
      v15 += 48;
    }
    while (48 * v77 != v15);
  }
  long long v76 = (uint64_t *)(a1 + 160);
  unint64_t v16 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 4) < v16) {
    std::vector<kaldi::CuMatrix<float>>::resize(v76, v16);
  }
  int v17 = *(_DWORD *)(a1 + 132);
  int v18 = *(_DWORD *)(a1 + 108);
  int v19 = *(_DWORD *)(a1 + 116);
  int v83 = -v17;
  int v80 = v13;
  if (v17 + v18 - v19 < -v17) {
    goto LABEL_65;
  }
  int v20 = 0;
  int v21 = *(_DWORD *)(a1 + 128);
  int v22 = *(_DWORD *)(a1 + 104);
  int v23 = *(_DWORD *)(a1 + 112);
  int v82 = v9 / (v7 * v6);
  do
  {
    int v24 = -v21;
    if (v21 + v22 - v23 < -v21) {
      goto LABEL_64;
    }
    uint64_t v25 = v20;
    do
    {
      uint64_t v81 = v25;
      memset(__p, 0, 24);
      if (v82 < 1) {
        goto LABEL_60;
      }
      std::vector<int>::pointer end = 0;
      int v27 = 0;
      int v28 = v24 + v22 * v83;
      int v29 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v29 < 1) {
          goto LABEL_59;
        }
        for (int i = 0; i < v29; ++i)
        {
          if (v23 < 1) {
            continue;
          }
          int v31 = 0;
          int v32 = i + v83;
          do
          {
            if (v32 < 0 || (int v33 = *(_DWORD *)(a1 + 108), v32 >= v33))
            {
              value = __p[0].__end_cap_.__value_;
            }
            else
            {
              value = __p[0].__end_cap_.__value_;
              if (v31 + v24 >= 0)
              {
                int v35 = *(_DWORD *)(a1 + 104);
                if (v31 + v24 < v35)
                {
                  int v36 = v28 + v31 + (i + v33 * v27) * v35;
                  if (end < __p[0].__end_cap_.__value_)
                  {
                    *end++ = v36;
                    goto LABEL_56;
                  }
                  std::vector<int>::pointer begin = __p[0].__begin_;
                  uint64_t v46 = end - __p[0].__begin_;
                  unint64_t v47 = v46 + 1;
                  if ((unint64_t)(v46 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  int64_t v48 = (char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_;
                  if (((char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_) >> 1 > v47) {
                    unint64_t v47 = v48 >> 1;
                  }
                  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v41 = v47;
                  }
                  if (v41)
                  {
                    BOOL v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v41);
                    std::vector<int>::pointer begin = __p[0].__begin_;
                    std::vector<int>::pointer end = __p[0].__end_;
                  }
                  else
                  {
                    BOOL v42 = 0;
                  }
                  uint64_t v43 = (int *)&v42[4 * v46];
                  int *v43 = v36;
                  BOOL v44 = v43 + 1;
                  while (end != begin)
                  {
                    int v49 = *--end;
                    *--uint64_t v43 = v49;
                  }
                  goto LABEL_53;
                }
              }
            }
            if (end < value)
            {
              *end++ = -1;
              goto LABEL_56;
            }
            std::vector<int>::pointer begin = __p[0].__begin_;
            uint64_t v38 = end - __p[0].__begin_;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v40 = (char *)value - (char *)__p[0].__begin_;
            if (v40 >> 1 > v39) {
              unint64_t v39 = v40 >> 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              BOOL v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v41);
              std::vector<int>::pointer begin = __p[0].__begin_;
              std::vector<int>::pointer end = __p[0].__end_;
            }
            else
            {
              BOOL v42 = 0;
            }
            uint64_t v43 = (int *)&v42[4 * v38];
            int *v43 = -1;
            BOOL v44 = v43 + 1;
            while (end != begin)
            {
              int v45 = *--end;
              *--uint64_t v43 = v45;
            }
LABEL_53:
            __p[0].__begin_ = v43;
            __p[0].__end_ = v44;
            __p[0].__end_cap_.__value_ = (int *)&v42[4 * v41];
            if (begin) {
              operator delete(begin);
            }
            std::vector<int>::pointer end = v44;
LABEL_56:
            __p[0].__end_ = end;
            ++v31;
            int v23 = *(_DWORD *)(a1 + 112);
          }
          while (v31 < v23);
          int v29 = *(_DWORD *)(a1 + 116);
        }
LABEL_59:
        ++v27;
      }
      while (v27 != v82);
LABEL_60:
      int v13 = v80;
      kaldi::CuMatrixBase<float>::CopyCols(*(void *)(*v79 + 24 * v80) + 48 * v81, a2, (uint64_t *)__p);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      uint64_t v25 = v81 + 1;
      v24 += *(_DWORD *)(a1 + 120);
      int v22 = *(_DWORD *)(a1 + 104);
      int v21 = *(_DWORD *)(a1 + 128);
      int v23 = *(_DWORD *)(a1 + 112);
    }
    while (v24 <= v21 + v22 - v23);
    int v18 = *(_DWORD *)(a1 + 108);
    int v17 = *(_DWORD *)(a1 + 132);
    int v20 = v81 + 1;
    int v19 = *(_DWORD *)(a1 + 116);
LABEL_64:
    v83 += *(_DWORD *)(a1 + 124);
  }
  while (v83 <= v17 + v18 - v19);
LABEL_65:
  uint64_t v50 = (v74 / v77);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*v76 + 48 * v13), *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 3, 0);
  if (v77 >= 1)
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    int v53 = 0;
    uint64_t v54 = 0;
    do
    {
      uint64_t v55 = *(void *)(a1 + 160) + 48 * v80;
      int v56 = v53 + *(_DWORD *)(v55 + 28);
      int v57 = *(int **)(v55 + 32);
      __p[0].__end_ = (std::vector<int>::pointer)(*(void *)(v55 + 8) + v52);
      LODWORD(__p[0].__end_cap_.__value_) = v74 / v77;
      *(int **)((char *)&__p[0].__end_cap_.__value_ + 4) = *(int **)(v55 + 20);
      HIDWORD(__p[1].__begin_) = v56;
      __p[1].__end_ = v57;
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, *(void *)(a1 + 192), 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)__p, *(void *)(*(void *)(a1 + 296) + 24 * v80) + v51, CblasNoTrans, *(void *)(a1 + 184), CblasTrans, 1.0, 1.0);
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1F0A472A0;
      memset(&__p[0].__end_, 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
      v54 += (int)v50;
      v53 -= v50;
      v52 += 4 * (int)v50;
      v51 += 48;
    }
    while (48 * v77 != v51);
  }
  std::vector<int>::vector(__p, *(int *)(a1 + 12));
  if ((int)v50 >= 1)
  {
    uint64_t v58 = 0;
    uint64x2_t v59 = (uint64x2_t)vdupq_n_s64(v70 - 1);
    int64x2_t v60 = vdupq_n_s64(2uLL);
    uint64_t v61 = 1;
    do
    {
      if ((v72 & 0x80000000) == 0)
      {
        uint64_t v62 = 0;
        uint64_t v63 = &__p[0].__begin_[v61];
        int v64 = v58;
        do
        {
          if ((v73 & 0x80000000) == 0)
          {
            float v65 = v63;
            uint64_t v66 = (v70 + 1) & 0x1FFFFFFFELL;
            int v67 = v64;
            int64x2_t v68 = (int64x2_t)xmmword_1B255FA20;
            do
            {
              int32x2_t v69 = vmovn_s64((int64x2_t)vcgeq_u64(v59, (uint64x2_t)v68));
              if (v69.i8[0]) {
                *(v65 - 1) = v67;
              }
              if (v69.i8[4]) {
                int *v65 = v50 + v67;
              }
              int64x2_t v68 = vaddq_s64(v68, v60);
              v67 += 2 * v50;
              v65 += 2;
              v66 -= 2;
            }
            while (v66);
          }
          ++v62;
          v64 += v50 * v70;
          v63 += v73 + 1;
        }
        while (v62 != v71);
      }
      ++v58;
      v61 += (int)v71 * (uint64_t)(int)v70;
    }
    while (v58 != v50);
  }
  kaldi::CuMatrixBase<float>::CopyCols(a3, *v76 + 48 * v80, (uint64_t *)__p);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
}

void sub_1B2392E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v8 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v9 = v8 + 1;
  int v10 = (*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v11 = (v10 + 1);
  int v12 = v11 * (v8 + 1);
  unint64_t v24 = a6;
  uint64_t v13 = (*(_DWORD *)(a1 + 12) / v12);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 160) + 48 * a6), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3, 0);
  std::vector<int>::vector(&v27, *(int *)(a1 + 12));
  if ((int)v13 >= 1)
  {
    int v14 = 0;
    uint64_t v15 = 0;
    for (uint64_t i = 0; i != v13; ++i)
    {
      if ((v10 & 0x80000000) == 0)
      {
        uint64_t v17 = 0;
        int v18 = &v27.__begin_[v15];
        int v19 = v14;
        do
        {
          uint64_t v20 = (v8 + 1);
          int v21 = v19;
          int v22 = v18;
          if ((v8 & 0x80000000) == 0)
          {
            do
            {
              *int v22 = v21;
              v22 += v13;
              ++v21;
              --v20;
            }
            while (v20);
          }
          ++v17;
          v18 += v9 * v13;
          v19 += v9;
        }
        while (v17 != v11);
      }
      ++v15;
      v14 += v12;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(void *)(a1 + 160) + 48 * (int)v24, a4, (uint64_t *)&v27);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v26, v12);
  uint64_t v23 = *(void *)(a1 + 24);
  if (v24 < (*(void *)(a1 + 32) - v23) >> 3) {
    kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v23 + 8 * v24), -1);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v25);
}

void sub_1B239348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  a24 = v24 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  unsigned __int8 v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(unsigned char *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 144);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), *(void *)(a1 + 248) + 48 * a2, a3);
      uint64_t v9 = *(void *)(*(void *)(a1 + 224) + 8 * a2);
      uint64_t v10 = *(void *)(a1 + 272) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      uint64_t v11 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), (int *)(*(void *)(a1 + 248) + 48 * a2), v4);
      uint64_t v13 = *(void *)(*(void *)(a1 + 224) + 8 * v11);
      int v14 = (void *)(*(void *)(a1 + 272) + 32 * v11);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v13, v14, v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    uint64_t v7 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), v4);
    uint64_t v12 = *(void *)(*(void *)(a1 + 224) + 8 * v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v12, v4);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 344))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 200), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 224), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v3);
    if (v3 >= 1) {
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 320), v3);
    *(unsigned char *)(a1 + 344) = 1;
  }
}

void sub_1B23939B0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v7 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  int v8 = v7 + v7 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  int v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(*(void *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v10 = *(void *)(a1 + 200);
  *(void *)(*(void *)(v10 + 8 * a5) + 32) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 224) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(void *)(v10 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(void *)(*(void *)(a1 + 224) + 8 * a5));
  if (v8 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    int v15 = v9 / v8;
    uint64_t v20 = 4 * (v9 / v8);
    uint64_t v21 = v9 / v8;
    uint64_t v16 = 48 * v8;
    do
    {
      uint64_t v17 = *(void *)(a1 + 160) + 48 * a5;
      int v18 = v13 + *(_DWORD *)(v17 + 28);
      uint64_t v19 = *(void *)(v17 + 32);
      v22[1] = *(void *)(v17 + 8) + v12;
      LODWORD(v22[2]) = v15;
      *(void *)((char *)&v22[2] + 4) = *(void *)(v17 + 20);
      HIDWORD(v22[3]) = v18;
      v22[4] = v19;
      v22[0] = &unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(*(void *)(a1 + 200) + 8 * a5), (uint64_t)v22, CblasTrans, *(void *)(*(void *)(a1 + 296) + 24 * a5) + v11, CblasNoTrans, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(void *)(*(void *)(a1 + 224) + 8 * a5), (uint64_t)v22, 1.0, 1.0);
      v22[0] = &unk_1F0A472A0;
      memset(&v22[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
      v14 += v21;
      v13 -= v15;
      v12 += v20;
      v11 += 48;
    }
    while (v16 != v11);
  }
}

void sub_1B2393BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v14, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, void))(*(void *)v8 + 112))(v8, a2, v15, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, void))(*(void *)v8 + 128))(v8, a2, v15, a3, v14, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = *(_DWORD *)(a1[23] + 16) * *(_DWORD *)(a1[23] + 20);
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(a1[24] + 16) + a3), 0);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = (char *)*a4;
  LODWORD(v12) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v11, **(void **)(v8 + 200));
  int v9 = *(_DWORD *)(a1[24] + 16);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v12) = v9;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 224), (uint64_t)&v11);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
}

void sub_1B2393DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 352);
  unint64_t v3 = *(void *)(a1 + 360) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *a3 = *(_DWORD *)(*(void *)(a1 + 192) + 16)
      + *(_DWORD *)(*(void *)(a1 + 184) + 16) * *(_DWORD *)(*(void *)(a1 + 184) + 20);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v7 = *(void *)(a1 + 208) - v6;
  if (v7 && (uint64_t v8 = *(void *)(a1 + 232) - *(void *)(a1 + 224)) != 0)
  {
    uint64_t v9 = v7 >> 3;
    uint64_t v10 = v8 >> 3;
    int v11 = *(_DWORD *)(a1 + 80);
    if (v11 == 1) {
      int v11 = 0;
    }
    uint64_t v12 = v11;
    uint64_t v13 = v10 - 1;
    if (v9 - 1 != v11 || v13 != v11)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"  ", 2);
      int v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
    int v15 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v6 + 8 * v11));
    int v16 = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 224) + 8 * v12)) + v15;
  }
  else
  {
    int v16 = 0;
  }
  *a2 = v16;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v5, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v5);
    }
    int v4 = *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + *(_DWORD *)(*(void *)(a1 + 184) + 16) * *(_DWORD *)(*(void *)(a1 + 184) + 20);
    if (v4 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      kaldi::NewCuSubOrMat<float>(*(void *)(a1 + 184), a2 != 0);
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v5, "(nlinparams + bias_->Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v5);
}

void sub_1B2394488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_1B2394504(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_1B2394578(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 208) - 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 232) - 8);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4CA98;
  *(void *)(a1 + 88) = &unk_1F0A4CBD0;
  *(void *)(a1 + 96) = &unk_1F0A4CBF8;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4CA98;
  *(void *)(a1 + 88) = &unk_1F0A4CBD0;
  *(void *)(a1 + 96) = &unk_1F0A4CBF8;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(a1, a2);
  return a1;
}

void sub_1B2394894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  uint64_t v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 360) = v14;
    operator delete(v14);
  }
  int v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 192) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
    *(unsigned char *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_1B2394B94(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4CA98;
  uint64_t v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4CBD0;
  unint64_t v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A4CBF8;
  uint64_t v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(void *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  long long v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 360) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(void *)(a1 + 328) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  uint64_t v8 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_1B2394E6C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitData(int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6 = v69;
  int v73 = 0x40000000;
  int v74 = -1073741824;
  int v72 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[36], &v71);
  int v70 = -1;
  memset(v69, 0, sizeof(v69));
  uint64_t v7 = a1 + 29;
  uint64_t v8 = a1 + 28;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_189;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v69);
    if (SHIBYTE(v69[2]) < 0)
    {
      uint64_t v12 = v69[1];
      switch(v69[1])
      {
        case 6:
          BOOL v13 = *(_DWORD *)v69[0] == 1684099132 && *(_WORD *)(v69[0] + 4) == 15960;
          uint64_t v10 = a1 + 32;
          if (v13) {
            goto LABEL_169;
          }
          BOOL v14 = *(_DWORD *)v69[0] == 1684099132 && *(_WORD *)(v69[0] + 4) == 15961;
          uint64_t v10 = a1 + 33;
          if (v14) {
            goto LABEL_169;
          }
          if (v69[1] != 15) {
            goto LABEL_29;
          }
LABEL_24:
          BOOL v15 = *(void *)v69[0] == 0x61526E7261654C3CLL && *(void *)(v69[0] + 7) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 34;
          if (v15) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_29:
          if (v12 != 19) {
            goto LABEL_38;
          }
          BOOL v18 = *(void *)v69[0] == 0x61654C736169423CLL
             && *(void *)(v69[0] + 8) == 0x6F43657461526E72
             && *(void *)(v69[0] + 11) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 35;
          if (v18) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_38:
          if (v12 != 12) {
            goto LABEL_44;
          }
          if (*(void *)v69[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v69[0] + 8) == 1046766949) {
            goto LABEL_168;
          }
          uint64_t v12 = v69[1];
LABEL_44:
          if (v12 != 18) {
            goto LABEL_53;
          }
          if (*(void *)v69[0] == 0x6E6569646172473CLL
            && *(void *)(v69[0] + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v69[0] + 16) == 15973)
          {
            goto LABEL_76;
          }
          uint64_t v12 = v69[1];
LABEL_53:
          if (v12 != 9) {
            goto LABEL_182;
          }
          BOOL v22 = *(void *)v69[0] == 0x6461724778614D3CLL && *(unsigned char *)(v69[0] + 8) == 62;
          uint64_t v16 = a1 + 37;
          if (v22) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_182:
          if (v12 != 12) {
            goto LABEL_175;
          }
          uint64_t v6 = (void *)v69[0];
          goto LABEL_184;
        case 0xALL:
          if (*(void *)v69[0] != 0x61654D736169423CLL || *(_WORD *)(v69[0] + 8) != 15982)
          {
            BOOL v40 = *(void *)v69[0] == 0x654C5870616D463CLL && *(_WORD *)(v69[0] + 8) == 15982;
            uint64_t v10 = a1 + 26;
            if (!v40)
            {
              BOOL v41 = *(void *)v69[0] == 0x654C5970616D463CLL && *(_WORD *)(v69[0] + 8) == 15982;
              uint64_t v10 = a1 + 27;
              if (!v41)
              {
                BOOL v42 = *(void *)v69[0] == 0x654C58746C69463CLL && *(_WORD *)(v69[0] + 8) == 15982;
                uint64_t v10 = a1 + 28;
                if (!v42)
                {
                  BOOL v32 = *(void *)v69[0] == 0x654C59746C69463CLL && *(_WORD *)(v69[0] + 8) == 15982;
LABEL_147:
                  uint64_t v10 = a1 + 29;
                  if (!v32) {
                    goto LABEL_175;
                  }
                }
              }
            }
            goto LABEL_169;
          }
LABEL_170:
          uint64_t v16 = &v74;
          break;
        case 0xBLL:
          if (*(void *)v69[0] != 0x6E6152736169423CLL || *(void *)(v69[0] + 3) != 0x3E65676E61527361)
          {
            BOOL v44 = *(void *)v69[0] == 0x745358746C69463CLL && *(void *)(v69[0] + 3) == 0x3E7065745358746CLL;
            uint64_t v10 = a1 + 30;
            if (!v44)
            {
              BOOL v35 = *(void *)v69[0] == 0x745359746C69463CLL && *(void *)(v69[0] + 3) == 0x3E7065745359746CLL;
LABEL_160:
              uint64_t v10 = a1 + 31;
              if (!v35) {
                goto LABEL_175;
              }
            }
            goto LABEL_169;
          }
LABEL_171:
          uint64_t v16 = &v73;
          break;
        case 0xDLL:
          if (*(void *)v69[0] != 0x74536D617261503CLL || *(void *)(v69[0] + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
LABEL_167:
          uint64_t v16 = &v72;
          break;
        case 0xFLL:
          goto LABEL_24;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch(HIBYTE(v69[2]))
      {
        case 6:
          BOOL v9 = LODWORD(v69[0]) == 1684099132 && WORD2(v69[0]) == 15960;
          uint64_t v10 = a1 + 32;
          if (!v9)
          {
            BOOL v11 = LODWORD(v69[0]) == 1684099132 && WORD2(v69[0]) == 15961;
            uint64_t v10 = a1 + 33;
            if (!v11) {
              goto LABEL_175;
            }
          }
          goto LABEL_169;
        case 9:
          goto LABEL_123;
        case 0xA:
          if (v69[0] == 0x61654D736169423CLL && LOWORD(v69[1]) == 15982) {
            goto LABEL_170;
          }
          BOOL v29 = v69[0] == 0x654C5870616D463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 26;
          if (v29) {
            goto LABEL_169;
          }
          BOOL v30 = v69[0] == 0x654C5970616D463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 27;
          if (v30) {
            goto LABEL_169;
          }
          BOOL v31 = v69[0] == 0x654C58746C69463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 28;
          if (v31) {
            goto LABEL_169;
          }
          BOOL v32 = v69[0] == 0x654C59746C69463CLL && LOWORD(v69[1]) == 15982;
          goto LABEL_147;
        case 0xB:
          if (v69[0] == 0x6E6152736169423CLL && *(void *)((char *)v69 + 3) == 0x3E65676E61527361) {
            goto LABEL_171;
          }
          BOOL v34 = v69[0] == 0x745358746C69463CLL && *(void *)((char *)v69 + 3) == 0x3E7065745358746CLL;
          uint64_t v10 = a1 + 30;
          if (v34) {
            goto LABEL_169;
          }
          BOOL v35 = v69[0] == 0x745359746C69463CLL && *(void *)((char *)v69 + 3) == 0x3E7065745359746CLL;
          goto LABEL_160;
        case 0xC:
          goto LABEL_118;
        case 0xD:
          if (v69[0] != 0x74536D617261503CLL || *(void *)((char *)v69 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
          goto LABEL_167;
        case 0xF:
          BOOL v36 = v69[0] == 0x61526E7261654C3CLL && *(void *)((char *)v69 + 7) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 34;
          if (v36) {
            break;
          }
          if (HIBYTE(v69[2]) != 9) {
            goto LABEL_117;
          }
          goto LABEL_123;
        case 0x12:
          goto LABEL_68;
        case 0x13:
          BOOL v24 = v69[0] == 0x61654C736169423CLL
             && v69[1] == 0x6F43657461526E72
             && *(void *)((char *)&v69[1] + 3) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 35;
          if (v24) {
            break;
          }
          if (HIBYTE(v69[2]) == 9) {
            goto LABEL_123;
          }
          if (HIBYTE(v69[2]) == 18)
          {
LABEL_68:
            if (v69[0] == 0x6E6569646172473CLL && v69[1] == 0x7079546D726F4E74 && LOWORD(v69[2]) == 15973)
            {
LABEL_76:
              kaldi::ReadToken(a2, 0, (uint64_t)&v71);
              goto LABEL_173;
            }
          }
          else
          {
LABEL_117:
            if (HIBYTE(v69[2]) != 12) {
              goto LABEL_175;
            }
LABEL_118:
            if (v69[0] == 0x536D6F646E61523CLL && LODWORD(v69[1]) == 1046766949)
            {
LABEL_168:
              uint64_t v10 = &v70;
LABEL_169:
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v10);
              goto LABEL_173;
            }
          }
          if (HIBYTE(v69[2]) != 9)
          {
            if (HIBYTE(v69[2]) == 12)
            {
LABEL_184:
              if (*v6 == 0x6E6F706D6F432F3CLL && *((_DWORD *)v6 + 2) == 1047817829)
              {
LABEL_189:
                a1[36] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v71);
                int v52 = a1[2];
                int v54 = a1[26];
                int v53 = a1[27];
                int v55 = v52 / (v53 * v54);
                if (!(v52 % (v53 * v54)))
                {
                  int v56 = (v54 + 2 * a1[32] - a1[28]) / a1[30] + 1;
                  int v57 = a1[3];
                  int v58 = v56 + v56 * ((v53 + 2 * a1[33] - a1[29]) / a1[31]);
                  uint64_t v59 = (v57 / v58);
                  if (!(v57 % v58))
                  {
                    if (v70 >= 1) {
                      kaldi::UniformRandomNumber::SetRandomSeeds(a3, v70);
                    }
                    kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v68, a3);
                    kaldi::Matrix<float>::Matrix((uint64_t)v66, v59, (*v8 * v55 * *v7), 0, 0);
                    if ((int)v59 >= 1)
                    {
                      int v60 = 0;
                      int v61 = *v8;
                      int v62 = *v7;
                      do
                      {
                        if (v62 * v55 * v61 >= 1)
                        {
                          uint64_t v63 = 0;
                          do
                          {
                            float v64 = *(float *)&v72;
                            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v68, 0);
                            *(float *)(v66[0] + 4 * v60 * v67 + 4 * v63++) = v64 * v65;
                            int v61 = *v8;
                            int v62 = *v7;
                          }
                          while (v63 < *v8 * v55 * *v7);
                        }
                        ++v60;
                      }
                      while (v60 != v59);
                    }
                    kaldi::MatrixBase<float>::NumRows((uint64_t)v66);
                    kaldi::MatrixBase<float>::NumCols((uint64_t)v66);
                    kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>();
                  }
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
                }
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
              }
            }
LABEL_175:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
            uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unknown token ", 14);
            if (v69[2] >= 0) {
              unint64_t v47 = v69;
            }
            else {
              unint64_t v47 = (void *)v69[0];
            }
            if (v69[2] >= 0) {
              uint64_t v48 = HIBYTE(v69[2]);
            }
            else {
              uint64_t v48 = v69[1];
            }
            int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
            uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
          }
LABEL_123:
          BOOL v38 = v69[0] == 0x6461724778614D3CLL && LOBYTE(v69[1]) == 62;
          uint64_t v16 = a1 + 37;
          if (!v38) {
            goto LABEL_175;
          }
          break;
        default:
          goto LABEL_175;
      }
    }
    kaldi::ReadBasicType<float>(a2, 0, (float *)v16);
LABEL_173:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_1B2395AF8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>()
{
}

void sub_1B2395BFC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(void *)(a1 + 152) = 0;
  }
  size_t v3 = *(int *)(a1 + 104);
  size_t v4 = *(int *)(a1 + 108);
  int v5 = *(_DWORD *)(a1 + 12);
  int v6 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  size_t v7 = *(int *)(a1 + 128);
  size_t v8 = *(int *)(a1 + 132);
  size_t v9 = *(int *)(a1 + 112);
  size_t v10 = *(int *)(a1 + 116);
  size_t v11 = *(int *)(a1 + 120);
  size_t v12 = *(int *)(a1 + 124);
  int v13 = ((int)v3 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  int v14 = ((int)v4 + 2 * (int)v8 - (int)v10) / (int)v12 + 1;
  in_desc.width = v3;
  in_desc.height = v4;
  in_desc.channels = v6;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&in_desc.data_scale = 1065353216;
  out_desc.width = v13;
  out_desc.height = v14;
  out_desc.channels = v5 / (v14 * v13);
  out_desc.row_stride = v13;
  out_desc.image_stride = v14 * v13;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v11;
  layer_params.y_stride = v12;
  layer_params.x_padding = v7;
  layer_params.y_padding = v8;
  layer_params.k_width = v9;
  layer_params.k_height = v10;
  layer_params.in_channels = v6;
  layer_params.out_channels = out_desc.channels;
  layer_params.weights.data_type = BNNSDataTypeInt8;
  layer_params.weights.unsigned int data = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data(*(void *)(a1 + 184));
  uint64_t v15 = *(void *)(a1 + 184);
  uint64_t v16 = *(void *)(a1 + 192);
  float v17 = *(float *)(v15 + 12);
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.weights.data_scale = 1.0 / v17;
  layer_params.weights.data_bias = 0.0;
  layer_params.weights.data_table = 0;
  BOOL v18 = *(const void **)(v16 + 8);
  *(void *)&layer_params.bias.data_scale = 1065353216;
  layer_params.bias.unsigned int data = v18;
  layer_params.bias.data_table = 0;
  layer_params.activation.function = BNNSActivationFunctionIdentity;
  kaldi::QuantizedMatrixBase<short>::NumCols(v15);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  int v19 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  if (v19 == kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)))
  {
    BNNSFilterParameters filter_params = *(BNNSFilterParameters *)ymmword_1B25AD9F0;
    double result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(void *)(a1 + 152) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    memset(&v24, 0, sizeof(v24));
    uint64_t v21 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
    uint64_t v22 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::Matrix<float>::Matrix((uint64_t)v23, v21, v22, 1, 1);
    kaldi::MatrixBase<float>::CopyFromMat<signed char>((uint64_t)v23, *(float **)(a1 + 184), 111);
    LODWORD(v21) = kaldi::MatrixBase<float>::NumCols((uint64_t)v23);
    if (v21 != fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v23)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.unsigned int data = (const void *)v23[0];
    *(void *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v24);
    return (void *)kaldi::Matrix<float>::~Matrix((uint64_t)v23);
  }
  return result;
}

void sub_1B2395EA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(float *a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v37 = *((_DWORD *)a1 + 26);
    int v36 = *((_DWORD *)a1 + 27);
    if (*((_DWORD *)a1 + 2) % (v36 * v37))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    }
    else
    {
      int v38 = (v37 + 2 * *((_DWORD *)a1 + 32) - *((_DWORD *)a1 + 28)) / *((_DWORD *)a1 + 30) + 1;
      if (!(*((_DWORD *)a1 + 3)
           % (v38 + v38 * ((v36 + 2 * *((_DWORD *)a1 + 33) - *((_DWORD *)a1 + 29)) / *((_DWORD *)a1 + 31)))))
        kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    memset(v44, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v44);
    if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
    {
      uint64_t v6 = v44;
      switch(HIBYTE(v44[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          BOOL v7 = v44[0] == (void *)0x6461724778614D3CLL && LOBYTE(v44[1]) == 62;
          uint64_t v8 = a1 + 37;
          if (!v7) {
            goto LABEL_8;
          }
          goto LABEL_109;
        case 0xA:
LABEL_69:
          BOOL v23 = v44[0] == (void *)0x654C5870616D463CLL && LOWORD(v44[1]) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 26);
          if (v23) {
            goto LABEL_138;
          }
          if (HIBYTE(v44[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v44[2]) != 10) {
            goto LABEL_137;
          }
          BOOL v24 = v44[0] == (void *)0x654C5970616D463CLL && LOWORD(v44[1]) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 27);
          if (!v24) {
            goto LABEL_79;
          }
          goto LABEL_138;
        case 0xB:
LABEL_89:
          BOOL v27 = v44[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v44 + 3) == (void *)0x3E7065745358746CLL;
          uint64_t v17 = (uint64_t)(a1 + 30);
          if (v27) {
            goto LABEL_138;
          }
          if (HIBYTE(v44[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v44[2]) != 11) {
            goto LABEL_137;
          }
          BOOL v28 = v44[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v44 + 3) == (void *)0x3E7065745359746CLL;
          uint64_t v17 = (uint64_t)(a1 + 31);
          if (!v28) {
            goto LABEL_137;
          }
          goto LABEL_138;
        case 0xF:
          BOOL v29 = v44[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v44 + 7) == (void *)0x3E66656F43657461;
          uint64_t v8 = a1 + 34;
          if (!v29) {
            goto LABEL_137;
          }
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v44[0] != (void *)0x6E6569646172473CLL
            || v44[1] != (void *)0x7079546D726F4E74
            || LOWORD(v44[2]) != 15973)
          {
            uint64_t v6 = v44;
            switch(HIBYTE(v44[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          BOOL v20 = v44[0] == (void *)0x61654C736169423CLL
             && v44[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v44[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v8 = a1 + 35;
          if (!v20)
          {
            switch(HIBYTE(v44[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    uint64_t v9 = v44[1];
    if (v44[1] == (void *)15)
    {
      BOOL v10 = *(void *)v44[0] == 0x61526E7261654C3CLL && *(void *)((char *)v44[0] + 7) == 0x3E66656F43657461;
      uint64_t v8 = a1 + 34;
      if (v10) {
        goto LABEL_109;
      }
    }
    if (v44[1] == (void *)19)
    {
      BOOL v12 = *(void *)v44[0] == 0x61654C736169423CLL
         && *((void *)v44[0] + 1) == 0x6F43657461526E72
         && *(void *)((char *)v44[0] + 11) == 0x3E66656F43657461;
      uint64_t v8 = a1 + 35;
      if (v12) {
        goto LABEL_109;
      }
      uint64_t v9 = v44[1];
    }
    if (v9 == (void *)18)
    {
      if (*(void *)v44[0] == 0x6E6569646172473CLL
        && *((void *)v44[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v44[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v43 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *((_DWORD *)a1 + 36) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_139;
      }
      uint64_t v9 = v44[1];
    }
    if (v9 != (void *)9) {
      goto LABEL_39;
    }
    BOOL v15 = *(void *)v44[0] == 0x6461724778614D3CLL && *((unsigned char *)v44[0] + 8) == 62;
    uint64_t v8 = a1 + 37;
    if (!v15)
    {
      uint64_t v9 = v44[1];
LABEL_39:
      if (v9 == (void *)10)
      {
        BOOL v16 = *(void *)v44[0] == 0x654C5870616D463CLL && *((_WORD *)v44[0] + 4) == 15982;
        uint64_t v17 = (uint64_t)(a1 + 26);
        if (v16) {
          goto LABEL_138;
        }
        uint64_t v9 = v44[1];
        if (v44[1] == (void *)10)
        {
          BOOL v18 = *(void *)v44[0] == 0x654C5970616D463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 27);
          if (v18) {
            goto LABEL_138;
          }
          if ((HIBYTE(v44[2]) & 0x80) == 0)
          {
            if (HIBYTE(v44[2]) != 6)
            {
              if (HIBYTE(v44[2]) != 10) {
                goto LABEL_137;
              }
LABEL_79:
              BOOL v25 = v44[0] == (void *)0x654C58746C69463CLL && LOWORD(v44[1]) == 15982;
              uint64_t v17 = (uint64_t)(a1 + 28);
              if (!v25)
              {
                BOOL v26 = v44[0] == (void *)0x654C59746C69463CLL && LOWORD(v44[1]) == 15982;
                uint64_t v17 = (uint64_t)(a1 + 29);
                if (!v26) {
                  goto LABEL_137;
                }
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v17);
              goto LABEL_139;
            }
LABEL_101:
            uint64_t v6 = v44;
LABEL_133:
            BOOL v34 = *(_DWORD *)v6 == 1684099132 && *((_WORD *)v6 + 2) == 15960;
            uint64_t v17 = (uint64_t)(a1 + 32);
            if (!v34) {
              goto LABEL_137;
            }
            goto LABEL_138;
          }
          BOOL v30 = *(void *)v44[0] == 0x654C58746C69463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 28);
          if (v30) {
            goto LABEL_138;
          }
          uint64_t v9 = v44[1];
          BOOL v31 = *(void *)v44[0] == 0x654C59746C69463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 29);
          if (v31) {
            goto LABEL_138;
          }
          if ((HIBYTE(v44[2]) & 0x80) == 0) {
            goto LABEL_8;
          }
        }
      }
      if (v9 != (void *)11) {
        goto LABEL_131;
      }
      BOOL v32 = *(void *)v44[0] == 0x745358746C69463CLL && *(void *)((char *)v44[0] + 3) == 0x3E7065745358746CLL;
      uint64_t v17 = (uint64_t)(a1 + 30);
      if (v32) {
        goto LABEL_138;
      }
      uint64_t v9 = v44[1];
      if (v44[1] != (void *)11) {
        goto LABEL_131;
      }
      BOOL v33 = *(void *)v44[0] == 0x745359746C69463CLL && *(void *)((char *)v44[0] + 3) == 0x3E7065745359746CLL;
      uint64_t v17 = (uint64_t)(a1 + 31);
      if (v33) {
        goto LABEL_138;
      }
      if ((HIBYTE(v44[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v44[2]) == 6) {
          goto LABEL_101;
        }
      }
      else
      {
LABEL_131:
        if (v9 == (void *)6)
        {
          uint64_t v6 = (void **)v44[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      BOOL v35 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, "<PadY>");
      uint64_t v17 = (uint64_t)(a1 + 33);
      if (!v35)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v44[2]) >= 0) {
          BOOL v40 = v44;
        }
        else {
          BOOL v40 = (void **)v44[0];
        }
        if (SHIBYTE(v44[2]) >= 0) {
          uint64_t v41 = HIBYTE(v44[2]);
        }
        else {
          uint64_t v41 = (uint64_t)v44[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v8);
LABEL_139:
    if (SHIBYTE(v44[2]) < 0) {
      operator delete(v44[0]);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadX>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadY>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1B2396AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::QuantizedMatrix<signed char>::Write(*(int **)(a1 + 184), a2, a3, a4);
  uint64_t v8 = *(void *)(a1 + 192);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  int v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  return *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v2;
}

const void **kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  int v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v5;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v10, *(float **)(a1 + 184));
  uint64_t v7 = *(void *)(a1 + 192);
  int v8 = *(_DWORD *)(v7 + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  int v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  int v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v5;
  uint64_t v7 = *(unsigned int **)(a1 + 184);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = *(char **)a2;
  LODWORD(v12) = v6;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v7, &v11);
  int v8 = *(_DWORD **)(a1 + 192);
  int v9 = v8[4];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = (char *)(*(void *)a2 + 4 * v6);
  LODWORD(v12) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v8, (uint64_t)&v11);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  double v2 = kaldi::QuantizedMatrixBase<signed char>::Sum(*(int **)(a1 + 184));
  float v3 = *(float *)&v2;
  double v4 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 192));
  return v3 + *(float *)&v4;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1B2396E34()
{
  uint64_t v2 = *(unsigned int *)(*(void *)(v0 + 192) + 16);
  v4[0] = &unk_1F0A517C0;
  memset(&v4[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v4, v2, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v4);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(v0 + 192), (uint64_t)v4, v1, 1.0);
  kaldi::CuVector<float>::~CuVector(v4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v5);
}

void sub_1B2396EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v17, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" OutSizeX:", 10);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  double v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<signed char>(*(kaldi::quasar::Vocab **)(a1 + 184));
  if ((v16 & 0x80u) == 0) {
    int v6 = v15;
  }
  else {
    int v6 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v7 = v16;
  }
  else {
    uint64_t v7 = (uint64_t)v15[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 192));
  if ((v14 & 0x80u) == 0) {
    BOOL v10 = __p;
  }
  else {
    BOOL v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v19);
}

void sub_1B2397198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v33, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 200));
  if ((v32 & 0x80u) == 0) {
    double v4 = v31;
  }
  else {
    double v4 = (void **)v31[0];
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v5 = v32;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v31[1];
  }
  int v6 = std::string::append(&v33, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v34, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v30 & 0x80u) == 0) {
    BOOL v10 = v29;
  }
  else {
    BOOL v10 = (void **)v29[0];
  }
  if ((v30 & 0x80u) == 0) {
    std::string::size_type v11 = v30;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v29[1];
  }
  uint64_t v12 = std::string::append(&v35, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v14 = std::string::append(&v36, "\n  bias_grad");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 224));
  if ((v28 & 0x80u) == 0) {
    unsigned __int8 v16 = v27;
  }
  else {
    unsigned __int8 v16 = (void **)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    std::string::size_type v17 = v28;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v27[1];
  }
  char v18 = std::string::append(&v37, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  BOOL v20 = std::string::append(&v38, ", lr-coef ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v26 & 0x80u) == 0) {
    uint64_t v22 = __p;
  }
  else {
    uint64_t v22 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v23 = v26;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)__p[1];
  }
  BOOL v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((char)v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1B2397480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 57) < 0) {
    operator delete(*(void **)(v52 - 80));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B239757C()
{
}

void sub_1B2397584()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 || !*(unsigned char *)(a1 + 17)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateCpu(a1, a2, a3, a4);
  }
  else {
    BNNSFilterApplyBatch(*(void **)(a1 + 152), *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = *(_DWORD *)(a1 + 104);
  int v8 = *(_DWORD *)(a1 + 108);
  int v76 = (v7 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v75 = (v8 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v73 = (v76 + 1);
  uint64_t v74 = (v75 + 1);
  int v80 = v74 * v73;
  int v9 = *(_DWORD *)(a1 + 8);
  int v77 = *(_DWORD *)(a1 + 12);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  uint64_t v81 = a2;
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  int v82 = (uint64_t *)(a1 + 296);
  uint64_t v11 = *(void *)(a1 + 296);
  unint64_t v12 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v11) >> 3) < v12)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v82, v12);
    uint64_t v11 = *v82;
  }
  int v13 = a4;
  unsigned __int8 v14 = (uint64_t *)(v11 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 4) < v80) {
    std::vector<kaldi::CuMatrix<float>>::resize(v14, v80);
  }
  if (v80 >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      unsigned __int8 v16 = (int32x2_t *)(*(void *)(*(void *)(a1 + 296) + 24 * v13) + v15);
      uint64_t v17 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
      kaldi::CuMatrix<float>::Resize(v16, v10, v17, 0, 0);
      v15 += 48;
    }
    while (48 * v80 != v15);
  }
  long long v79 = (uint64_t *)(a1 + 160);
  unint64_t v18 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 4) < v18) {
    std::vector<kaldi::CuMatrix<float>>::resize(v79, v18);
  }
  int v19 = *(_DWORD *)(a1 + 132);
  int v20 = *(_DWORD *)(a1 + 108);
  int v21 = *(_DWORD *)(a1 + 116);
  int v86 = -v19;
  int v83 = v13;
  if (v19 + v20 - v21 < -v19) {
    goto LABEL_65;
  }
  int v22 = 0;
  int v23 = *(_DWORD *)(a1 + 128);
  int v24 = *(_DWORD *)(a1 + 104);
  int v25 = *(_DWORD *)(a1 + 112);
  int v85 = v9 / (v8 * v7);
  do
  {
    int v26 = -v23;
    if (v23 + v24 - v25 < -v23) {
      goto LABEL_64;
    }
    uint64_t v27 = v22;
    do
    {
      uint64_t v84 = v27;
      memset(__p, 0, 24);
      if (v85 < 1) {
        goto LABEL_60;
      }
      std::vector<int>::pointer end = 0;
      int v29 = 0;
      int v30 = v26 + v24 * v86;
      int v31 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v31 < 1) {
          goto LABEL_59;
        }
        for (int i = 0; i < v31; ++i)
        {
          if (v25 < 1) {
            continue;
          }
          int v33 = 0;
          int v34 = i + v86;
          do
          {
            if (v34 < 0 || (int v35 = *(_DWORD *)(a1 + 108), v34 >= v35))
            {
              value = __p[0].__end_cap_.__value_;
            }
            else
            {
              value = __p[0].__end_cap_.__value_;
              if (v33 + v26 >= 0)
              {
                int v37 = *(_DWORD *)(a1 + 104);
                if (v33 + v26 < v37)
                {
                  int v38 = v30 + v33 + (i + v35 * v29) * v37;
                  if (end < __p[0].__end_cap_.__value_)
                  {
                    *end++ = v38;
                    goto LABEL_56;
                  }
                  std::vector<int>::pointer begin = __p[0].__begin_;
                  uint64_t v48 = end - __p[0].__begin_;
                  unint64_t v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  int64_t v50 = (char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_;
                  if (((char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_) >> 1 > v49) {
                    unint64_t v49 = v50 >> 1;
                  }
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v49;
                  }
                  if (v43)
                  {
                    BOOL v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v43);
                    std::vector<int>::pointer begin = __p[0].__begin_;
                    std::vector<int>::pointer end = __p[0].__end_;
                  }
                  else
                  {
                    BOOL v44 = 0;
                  }
                  int v45 = (int *)&v44[4 * v48];
                  *int v45 = v38;
                  uint64_t v46 = v45 + 1;
                  while (end != begin)
                  {
                    int v51 = *--end;
                    *--int v45 = v51;
                  }
                  goto LABEL_53;
                }
              }
            }
            if (end < value)
            {
              *end++ = -1;
              goto LABEL_56;
            }
            std::vector<int>::pointer begin = __p[0].__begin_;
            uint64_t v40 = end - __p[0].__begin_;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = (char *)value - (char *)__p[0].__begin_;
            if (v42 >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              BOOL v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v43);
              std::vector<int>::pointer begin = __p[0].__begin_;
              std::vector<int>::pointer end = __p[0].__end_;
            }
            else
            {
              BOOL v44 = 0;
            }
            int v45 = (int *)&v44[4 * v40];
            *int v45 = -1;
            uint64_t v46 = v45 + 1;
            while (end != begin)
            {
              int v47 = *--end;
              *--int v45 = v47;
            }
LABEL_53:
            __p[0].__begin_ = v45;
            __p[0].__end_ = v46;
            __p[0].__end_cap_.__value_ = (int *)&v44[4 * v43];
            if (begin) {
              operator delete(begin);
            }
            std::vector<int>::pointer end = v46;
LABEL_56:
            __p[0].__end_ = end;
            ++v33;
            int v25 = *(_DWORD *)(a1 + 112);
          }
          while (v33 < v25);
          int v31 = *(_DWORD *)(a1 + 116);
        }
LABEL_59:
        ++v29;
      }
      while (v29 != v85);
LABEL_60:
      int v13 = v83;
      kaldi::CuMatrixBase<float>::CopyCols(*(void *)(*v82 + 24 * v83) + 48 * v84, v81, (uint64_t *)__p);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      uint64_t v27 = v84 + 1;
      v26 += *(_DWORD *)(a1 + 120);
      int v24 = *(_DWORD *)(a1 + 104);
      int v23 = *(_DWORD *)(a1 + 128);
      int v25 = *(_DWORD *)(a1 + 112);
    }
    while (v26 <= v23 + v24 - v25);
    int v20 = *(_DWORD *)(a1 + 108);
    int v19 = *(_DWORD *)(a1 + 132);
    int v22 = v84 + 1;
    int v21 = *(_DWORD *)(a1 + 116);
LABEL_64:
    v86 += *(_DWORD *)(a1 + 124);
  }
  while (v86 <= v19 + v20 - v21);
LABEL_65:
  uint64_t v52 = (v77 / v80);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*v79 + 48 * v13), *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 3, 0);
  if (v80 >= 1)
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    int v55 = 0;
    uint64_t v56 = 0;
    do
    {
      uint64_t v57 = *(void *)(a1 + 160) + 48 * v83;
      int v58 = v55 + *(_DWORD *)(v57 + 28);
      uint64_t v59 = *(int **)(v57 + 32);
      __p[0].__end_ = (std::vector<int>::pointer)(*(void *)(v57 + 8) + v54);
      LODWORD(__p[0].__end_cap_.__value_) = v77 / v80;
      *(int **)((char *)&__p[0].__end_cap_.__value_ + 4) = *(int **)(v57 + 20);
      HIDWORD(__p[1].__begin_) = v58;
      __p[1].__end_ = v59;
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, *(void *)(a1 + 192), 1.0, 0.0);
      LODWORD(v60) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)__p, *(void *)(*(void *)(a1 + 296) + 24 * v83) + v53, 111, *(kaldi::quasar::Vocab **)(a1 + 184), 112, v60, 1.0);
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1F0A472A0;
      memset(&__p[0].__end_, 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
      v56 += (int)v52;
      v55 -= v52;
      v54 += 4 * (int)v52;
      v53 += 48;
    }
    while (48 * v80 != v53);
  }
  std::vector<int>::vector(__p, *(int *)(a1 + 12));
  if ((int)v52 >= 1)
  {
    uint64_t v61 = 0;
    uint64x2_t v62 = (uint64x2_t)vdupq_n_s64(v73 - 1);
    int64x2_t v63 = vdupq_n_s64(2uLL);
    uint64_t v64 = 1;
    do
    {
      if ((v75 & 0x80000000) == 0)
      {
        uint64_t v65 = 0;
        uint64_t v66 = &__p[0].__begin_[v64];
        int v67 = v61;
        do
        {
          if ((v76 & 0x80000000) == 0)
          {
            int64x2_t v68 = v66;
            uint64_t v69 = (v73 + 1) & 0x1FFFFFFFELL;
            int v70 = v67;
            int64x2_t v71 = (int64x2_t)xmmword_1B255FA20;
            do
            {
              int32x2_t v72 = vmovn_s64((int64x2_t)vcgeq_u64(v62, (uint64x2_t)v71));
              if (v72.i8[0]) {
                *(v68 - 1) = v70;
              }
              if (v72.i8[4]) {
                *int64x2_t v68 = v52 + v70;
              }
              int64x2_t v71 = vaddq_s64(v71, v63);
              v70 += 2 * v52;
              v68 += 2;
              v69 -= 2;
            }
            while (v69);
          }
          ++v65;
          v67 += v52 * v73;
          v66 += v76 + 1;
        }
        while (v65 != v74);
      }
      ++v61;
      v64 += (int)v74 * (uint64_t)(int)v73;
    }
    while (v61 != v52);
  }
  kaldi::CuMatrixBase<float>::CopyCols(a3, *v79 + 48 * v83, (uint64_t *)__p);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
}

void sub_1B2397C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v10 = v9 + 1;
  int v11 = (*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v12 = (v11 + 1);
  int v13 = v12 * (v9 + 1);
  uint64_t v14 = (*(_DWORD *)(a1 + 12) / v13);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 160) + 48 * a6), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3, 0);
  std::vector<int>::vector(&v27, *(int *)(a1 + 12));
  if ((int)v14 >= 1)
  {
    int v15 = 0;
    uint64_t v16 = 0;
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v11 & 0x80000000) == 0)
      {
        uint64_t v18 = 0;
        int v19 = &v27.__begin_[v16];
        int v20 = v15;
        do
        {
          uint64_t v21 = (v9 + 1);
          int v22 = v20;
          int v23 = v19;
          if ((v9 & 0x80000000) == 0)
          {
            do
            {
              int *v23 = v22;
              v23 += v14;
              ++v22;
              --v21;
            }
            while (v21);
          }
          ++v18;
          v19 += v10 * v14;
          v20 += v10;
        }
        while (v18 != v12);
      }
      ++v16;
      v15 += v13;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(void *)(a1 + 160) + 48 * a6, a4, (uint64_t *)&v27);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v26, v13);
  uint64_t v24 = *(void *)(a1 + 24);
  if (a6 < (unint64_t)((*(void *)(a1 + 32) - v24) >> 3)) {
    kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v24 + 8 * a6), -1);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v25);
}

void sub_1B2398320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  a24 = v24 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  int v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(unsigned char *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 144);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), *(void *)(a1 + 248) + 48 * a2, a3);
      uint64_t v9 = *(void *)(*(void *)(a1 + 224) + 8 * a2);
      uint64_t v10 = *(void *)(a1 + 272) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      uint64_t v11 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), (int *)(*(void *)(a1 + 248) + 48 * a2), v4);
      uint64_t v13 = *(void *)(*(void *)(a1 + 224) + 8 * v11);
      uint64_t v14 = (void *)(*(void *)(a1 + 272) + 32 * v11);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v13, v14, v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    uint64_t v7 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), v4);
    uint64_t v12 = *(void *)(*(void *)(a1 + 224) + 8 * v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v12, v4);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 344))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 200), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 224), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v3);
    if (v3 >= 1)
    {
      kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
      kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 320), v3);
    *(unsigned char *)(a1 + 344) = 1;
  }
}

void sub_1B2398878(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  int v10 = v9 + v9 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  int v11 = *(_DWORD *)(a1 + 12);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  *(_DWORD *)(*(void *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v12 = *(void *)(a1 + 200);
  *(void *)(*(void *)(v12 + 8 * a5) + 32) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 224) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(void *)(v12 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(void *)(*(void *)(a1 + 224) + 8 * a5));
  if (v10 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    int v17 = v11 / v10;
    uint64_t v18 = 48 * v10;
    do
    {
      uint64_t v19 = *(void *)(a1 + 160) + 48 * a5;
      int v20 = v15 + *(_DWORD *)(v19 + 28);
      uint64_t v21 = *(void *)(v19 + 32);
      v22[1] = *(void *)(v19 + 8) + v14;
      LODWORD(v22[2]) = v17;
      *(void *)((char *)&v22[2] + 4) = *(void *)(v19 + 20);
      HIDWORD(v22[3]) = v20;
      v22[4] = v21;
      v22[0] = &unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(*(void *)(a1 + 200) + 8 * a5), (uint64_t)v22, CblasTrans, *(void *)(*(void *)(a1 + 296) + 24 * a5) + v13, CblasNoTrans, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(void *)(*(void *)(a1 + 224) + 8 * a5), (uint64_t)v22, 1.0, 1.0);
      v22[0] = &unk_1F0A472A0;
      memset(&v22[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
      v16 += v17;
      v15 -= v17;
      v14 += 4 * v17;
      v13 += 48;
    }
    while (v18 != v13);
  }
}

void sub_1B2398A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unsupported");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v14, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, void))(*(void *)v8 + 112))(v8, a2, v15, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, void))(*(void *)v8 + 128))(v8, a2, v15, a3, v14, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  LODWORD(a3) = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * a3;
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(*(void *)(a1 + 192) + 16) + a3), 0);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v11 = (char *)*a4;
  LODWORD(v12) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v11, **(void **)(v8 + 200));
  int v9 = *(_DWORD *)(*(void *)(a1 + 192) + 16);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v11 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v12) = v9;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 224), (uint64_t)&v11);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
}

void sub_1B2398CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 352);
  unint64_t v3 = *(void *)(a1 + 360) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  int v6 = *(_DWORD *)(*(void *)(a1 + 192) + 16);
  int v7 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  *a3 = v6 + result * v7;
  uint64_t v9 = *(void *)(a1 + 200);
  uint64_t v10 = *(void *)(a1 + 208) - v9;
  if (v10 && (uint64_t v11 = *(void *)(a1 + 232) - *(void *)(a1 + 224)) != 0)
  {
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v11 >> 3;
    int v14 = *(_DWORD *)(a1 + 80);
    if (v14 == 1) {
      int v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = v13 - 1;
    if (v12 - 1 != v14 || v16 != v14)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      int v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    int v18 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v9 + 8 * v14));
    uint64_t result = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 224) + 8 * v15));
    int v19 = result + v18;
  }
  else
  {
    int v19 = 0;
  }
  *a2 = v19;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v4);
    }
    int v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
    int v3 = *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v2;
    if (v3 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "(nlinparams + bias_->Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v4);
}

void sub_1B2399388(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_1B2399424(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_1B2399498(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 208) - 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 232) - 8);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 56) = xmmword_1B255E480;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(void *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(unsigned char *)(a1 + 86) = 0;
  *(void *)a1 = &unk_1F0A4CC20;
  *(void *)(a1 + 88) = &unk_1F0A4CD58;
  *(void *)(a1 + 96) = &unk_1F0A4CD80;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4CC20;
  *(void *)(a1 + 88) = &unk_1F0A4CD58;
  *(void *)(a1 + 96) = &unk_1F0A4CD80;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<short>>(a1, a2);
  return a1;
}

void sub_1B23997B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  int v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 360) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 192) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 == a2)
  {
    *(unsigned char *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
    *(unsigned char *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_1B2399AB4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A4CC20;
  int v2 = (quasar::Bitmap *)(a1 + 88);
  *(void *)(a1 + 88) = &unk_1F0A4CD58;
  int v3 = (quasar::Bitmap *)(a1 + 96);
  *(void *)(a1 + 96) = &unk_1F0A4CD80;
  uint64_t v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(void *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  long long v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 360) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(void *)(a1 + 328) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v8 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v7 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  uint64_t v8 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(uint64_t a1)
{
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 96);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t vars8;

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_1B2399D8C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitData(int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v6 = v69;
  int v73 = 0x40000000;
  int v74 = -1073741824;
  int v72 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[36], &v71);
  int v70 = -1;
  memset(v69, 0, sizeof(v69));
  uint64_t v7 = a1 + 29;
  uint64_t v8 = a1 + 28;
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_189;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v69);
    if (SHIBYTE(v69[2]) < 0)
    {
      uint64_t v12 = v69[1];
      switch(v69[1])
      {
        case 6:
          BOOL v13 = *(_DWORD *)v69[0] == 1684099132 && *(_WORD *)(v69[0] + 4) == 15960;
          uint64_t v10 = a1 + 32;
          if (v13) {
            goto LABEL_169;
          }
          BOOL v14 = *(_DWORD *)v69[0] == 1684099132 && *(_WORD *)(v69[0] + 4) == 15961;
          uint64_t v10 = a1 + 33;
          if (v14) {
            goto LABEL_169;
          }
          if (v69[1] != 15) {
            goto LABEL_29;
          }
LABEL_24:
          BOOL v15 = *(void *)v69[0] == 0x61526E7261654C3CLL && *(void *)(v69[0] + 7) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 34;
          if (v15) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_29:
          if (v12 != 19) {
            goto LABEL_38;
          }
          BOOL v18 = *(void *)v69[0] == 0x61654C736169423CLL
             && *(void *)(v69[0] + 8) == 0x6F43657461526E72
             && *(void *)(v69[0] + 11) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 35;
          if (v18) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_38:
          if (v12 != 12) {
            goto LABEL_44;
          }
          if (*(void *)v69[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v69[0] + 8) == 1046766949) {
            goto LABEL_168;
          }
          uint64_t v12 = v69[1];
LABEL_44:
          if (v12 != 18) {
            goto LABEL_53;
          }
          if (*(void *)v69[0] == 0x6E6569646172473CLL
            && *(void *)(v69[0] + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v69[0] + 16) == 15973)
          {
            goto LABEL_76;
          }
          uint64_t v12 = v69[1];
LABEL_53:
          if (v12 != 9) {
            goto LABEL_182;
          }
          BOOL v22 = *(void *)v69[0] == 0x6461724778614D3CLL && *(unsigned char *)(v69[0] + 8) == 62;
          uint64_t v16 = a1 + 37;
          if (v22) {
            break;
          }
          uint64_t v12 = v69[1];
LABEL_182:
          if (v12 != 12) {
            goto LABEL_175;
          }
          int v6 = (void *)v69[0];
          goto LABEL_184;
        case 0xALL:
          if (*(void *)v69[0] != 0x61654D736169423CLL || *(_WORD *)(v69[0] + 8) != 15982)
          {
            BOOL v40 = *(void *)v69[0] == 0x654C5870616D463CLL && *(_WORD *)(v69[0] + 8) == 15982;
            uint64_t v10 = a1 + 26;
            if (!v40)
            {
              BOOL v41 = *(void *)v69[0] == 0x654C5970616D463CLL && *(_WORD *)(v69[0] + 8) == 15982;
              uint64_t v10 = a1 + 27;
              if (!v41)
              {
                BOOL v42 = *(void *)v69[0] == 0x654C58746C69463CLL && *(_WORD *)(v69[0] + 8) == 15982;
                uint64_t v10 = a1 + 28;
                if (!v42)
                {
                  BOOL v32 = *(void *)v69[0] == 0x654C59746C69463CLL && *(_WORD *)(v69[0] + 8) == 15982;
LABEL_147:
                  uint64_t v10 = a1 + 29;
                  if (!v32) {
                    goto LABEL_175;
                  }
                }
              }
            }
            goto LABEL_169;
          }
LABEL_170:
          uint64_t v16 = &v74;
          break;
        case 0xBLL:
          if (*(void *)v69[0] != 0x6E6152736169423CLL || *(void *)(v69[0] + 3) != 0x3E65676E61527361)
          {
            BOOL v44 = *(void *)v69[0] == 0x745358746C69463CLL && *(void *)(v69[0] + 3) == 0x3E7065745358746CLL;
            uint64_t v10 = a1 + 30;
            if (!v44)
            {
              BOOL v35 = *(void *)v69[0] == 0x745359746C69463CLL && *(void *)(v69[0] + 3) == 0x3E7065745359746CLL;
LABEL_160:
              uint64_t v10 = a1 + 31;
              if (!v35) {
                goto LABEL_175;
              }
            }
            goto LABEL_169;
          }
LABEL_171:
          uint64_t v16 = &v73;
          break;
        case 0xDLL:
          if (*(void *)v69[0] != 0x74536D617261503CLL || *(void *)(v69[0] + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
LABEL_167:
          uint64_t v16 = &v72;
          break;
        case 0xFLL:
          goto LABEL_24;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch(HIBYTE(v69[2]))
      {
        case 6:
          BOOL v9 = LODWORD(v69[0]) == 1684099132 && WORD2(v69[0]) == 15960;
          uint64_t v10 = a1 + 32;
          if (!v9)
          {
            BOOL v11 = LODWORD(v69[0]) == 1684099132 && WORD2(v69[0]) == 15961;
            uint64_t v10 = a1 + 33;
            if (!v11) {
              goto LABEL_175;
            }
          }
          goto LABEL_169;
        case 9:
          goto LABEL_123;
        case 0xA:
          if (v69[0] == 0x61654D736169423CLL && LOWORD(v69[1]) == 15982) {
            goto LABEL_170;
          }
          BOOL v29 = v69[0] == 0x654C5870616D463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 26;
          if (v29) {
            goto LABEL_169;
          }
          BOOL v30 = v69[0] == 0x654C5970616D463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 27;
          if (v30) {
            goto LABEL_169;
          }
          BOOL v31 = v69[0] == 0x654C58746C69463CLL && LOWORD(v69[1]) == 15982;
          uint64_t v10 = a1 + 28;
          if (v31) {
            goto LABEL_169;
          }
          BOOL v32 = v69[0] == 0x654C59746C69463CLL && LOWORD(v69[1]) == 15982;
          goto LABEL_147;
        case 0xB:
          if (v69[0] == 0x6E6152736169423CLL && *(void *)((char *)v69 + 3) == 0x3E65676E61527361) {
            goto LABEL_171;
          }
          BOOL v34 = v69[0] == 0x745358746C69463CLL && *(void *)((char *)v69 + 3) == 0x3E7065745358746CLL;
          uint64_t v10 = a1 + 30;
          if (v34) {
            goto LABEL_169;
          }
          BOOL v35 = v69[0] == 0x745359746C69463CLL && *(void *)((char *)v69 + 3) == 0x3E7065745359746CLL;
          goto LABEL_160;
        case 0xC:
          goto LABEL_118;
        case 0xD:
          if (v69[0] != 0x74536D617261503CLL || *(void *)((char *)v69 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_175;
          }
          goto LABEL_167;
        case 0xF:
          BOOL v36 = v69[0] == 0x61526E7261654C3CLL && *(void *)((char *)v69 + 7) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 34;
          if (v36) {
            break;
          }
          if (HIBYTE(v69[2]) != 9) {
            goto LABEL_117;
          }
          goto LABEL_123;
        case 0x12:
          goto LABEL_68;
        case 0x13:
          BOOL v24 = v69[0] == 0x61654C736169423CLL
             && v69[1] == 0x6F43657461526E72
             && *(void *)((char *)&v69[1] + 3) == 0x3E66656F43657461;
          uint64_t v16 = a1 + 35;
          if (v24) {
            break;
          }
          if (HIBYTE(v69[2]) == 9) {
            goto LABEL_123;
          }
          if (HIBYTE(v69[2]) == 18)
          {
LABEL_68:
            if (v69[0] == 0x6E6569646172473CLL && v69[1] == 0x7079546D726F4E74 && LOWORD(v69[2]) == 15973)
            {
LABEL_76:
              kaldi::ReadToken(a2, 0, (uint64_t)&v71);
              goto LABEL_173;
            }
          }
          else
          {
LABEL_117:
            if (HIBYTE(v69[2]) != 12) {
              goto LABEL_175;
            }
LABEL_118:
            if (v69[0] == 0x536D6F646E61523CLL && LODWORD(v69[1]) == 1046766949)
            {
LABEL_168:
              uint64_t v10 = &v70;
LABEL_169:
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v10);
              goto LABEL_173;
            }
          }
          if (HIBYTE(v69[2]) != 9)
          {
            if (HIBYTE(v69[2]) == 12)
            {
LABEL_184:
              if (*v6 == 0x6E6F706D6F432F3CLL && *((_DWORD *)v6 + 2) == 1047817829)
              {
LABEL_189:
                a1[36] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v71);
                int v52 = a1[2];
                int v54 = a1[26];
                int v53 = a1[27];
                int v55 = v52 / (v53 * v54);
                if (!(v52 % (v53 * v54)))
                {
                  int v56 = (v54 + 2 * a1[32] - a1[28]) / a1[30] + 1;
                  int v57 = a1[3];
                  int v58 = v56 + v56 * ((v53 + 2 * a1[33] - a1[29]) / a1[31]);
                  uint64_t v59 = (v57 / v58);
                  if (!(v57 % v58))
                  {
                    if (v70 >= 1) {
                      kaldi::UniformRandomNumber::SetRandomSeeds(a3, v70);
                    }
                    kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v68, a3);
                    kaldi::Matrix<float>::Matrix((uint64_t)v66, v59, (*v8 * v55 * *v7), 0, 0);
                    if ((int)v59 >= 1)
                    {
                      int v60 = 0;
                      int v61 = *v8;
                      int v62 = *v7;
                      do
                      {
                        if (v62 * v55 * v61 >= 1)
                        {
                          uint64_t v63 = 0;
                          do
                          {
                            float v64 = *(float *)&v72;
                            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v68, 0);
                            *(float *)(v66[0] + 4 * v60 * v67 + 4 * v63++) = v64 * v65;
                            int v61 = *v8;
                            int v62 = *v7;
                          }
                          while (v63 < *v8 * v55 * *v7);
                        }
                        ++v60;
                      }
                      while (v60 != v59);
                    }
                    kaldi::MatrixBase<float>::NumRows((uint64_t)v66);
                    kaldi::MatrixBase<float>::NumCols((uint64_t)v66);
                    kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>();
                  }
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
                }
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
              }
            }
LABEL_175:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
            uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Unknown token ", 14);
            if (v69[2] >= 0) {
              int v47 = v69;
            }
            else {
              int v47 = (void *)v69[0];
            }
            if (v69[2] >= 0) {
              uint64_t v48 = HIBYTE(v69[2]);
            }
            else {
              uint64_t v48 = v69[1];
            }
            unint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
            int64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)", a typo in config?", 19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
          }
LABEL_123:
          BOOL v38 = v69[0] == 0x6461724778614D3CLL && LOBYTE(v69[1]) == 62;
          uint64_t v16 = a1 + 37;
          if (!v38) {
            goto LABEL_175;
          }
          break;
        default:
          goto LABEL_175;
      }
    }
    kaldi::ReadBasicType<float>(a2, 0, (float *)v16);
LABEL_173:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_1B239AA18(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>()
{
}

void sub_1B239AB1C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(uint64_t a1)
{
  int v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(void *)(a1 + 152) = 0;
  }
  size_t v3 = *(int *)(a1 + 104);
  size_t v4 = *(int *)(a1 + 108);
  int v5 = *(_DWORD *)(a1 + 12);
  int v6 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  size_t v7 = *(int *)(a1 + 128);
  size_t v8 = *(int *)(a1 + 132);
  size_t v9 = *(int *)(a1 + 112);
  size_t v10 = *(int *)(a1 + 116);
  size_t v11 = *(int *)(a1 + 120);
  size_t v12 = *(int *)(a1 + 124);
  int v13 = ((int)v3 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  int v14 = ((int)v4 + 2 * (int)v8 - (int)v10) / (int)v12 + 1;
  in_desc.width = v3;
  in_desc.height = v4;
  in_desc.channels = v6;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&in_desc.data_scale = 1065353216;
  out_desc.width = v13;
  out_desc.height = v14;
  out_desc.channels = v5 / (v14 * v13);
  out_desc.row_stride = v13;
  out_desc.image_stride = v14 * v13;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(void *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v11;
  layer_params.y_stride = v12;
  layer_params.x_padding = v7;
  layer_params.y_padding = v8;
  layer_params.k_width = v9;
  layer_params.k_height = v10;
  layer_params.in_channels = v6;
  layer_params.out_channels = out_desc.channels;
  layer_params.weights.data_type = BNNSDataTypeInt16;
  layer_params.weights.unsigned int data = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data(*(void *)(a1 + 184));
  uint64_t v15 = *(void *)(a1 + 184);
  uint64_t v16 = *(void *)(a1 + 192);
  float v17 = *(float *)(v15 + 12);
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.weights.data_scale = 1.0 / v17;
  layer_params.weights.data_bias = 0.0;
  layer_params.weights.data_table = 0;
  BOOL v18 = *(const void **)(v16 + 8);
  *(void *)&layer_params.bias.data_scale = 1065353216;
  layer_params.bias.unsigned int data = v18;
  layer_params.bias.data_table = 0;
  layer_params.activation.function = BNNSActivationFunctionIdentity;
  kaldi::QuantizedMatrixBase<short>::NumCols(v15);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  int v19 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  if (v19 == kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)))
  {
    BNNSFilterParameters filter_params = *(BNNSFilterParameters *)ymmword_1B25AD9F0;
    double result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(void *)(a1 + 152) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    memset(&v24, 0, sizeof(v24));
    uint64_t v21 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
    uint64_t v22 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::Matrix<float>::Matrix((uint64_t)v23, v21, v22, 1, 1);
    kaldi::MatrixBase<float>::CopyFromMat<short>((uint64_t)v23, *(float **)(a1 + 184), 111);
    LODWORD(v21) = kaldi::MatrixBase<float>::NumCols((uint64_t)v23);
    if (v21 != fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v23)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.unsigned int data = (const void *)v23[0];
    *(void *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v24);
    return (void *)kaldi::Matrix<float>::~Matrix((uint64_t)v23);
  }
  return result;
}

void sub_1B239ADC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::ReadData(float *a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_142:
    int v37 = *((_DWORD *)a1 + 26);
    int v36 = *((_DWORD *)a1 + 27);
    if (*((_DWORD *)a1 + 2) % (v36 * v37))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    }
    else
    {
      int v38 = (v37 + 2 * *((_DWORD *)a1 + 32) - *((_DWORD *)a1 + 28)) / *((_DWORD *)a1 + 30) + 1;
      if (!(*((_DWORD *)a1 + 3)
           % (v38 + v38 * ((v36 + 2 * *((_DWORD *)a1 + 33) - *((_DWORD *)a1 + 29)) / *((_DWORD *)a1 + 31)))))
        kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>();
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    memset(v44, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v44);
    if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
    {
      uint64_t v6 = v44;
      switch(HIBYTE(v44[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          BOOL v7 = v44[0] == (void *)0x6461724778614D3CLL && LOBYTE(v44[1]) == 62;
          uint64_t v8 = a1 + 37;
          if (!v7) {
            goto LABEL_8;
          }
          goto LABEL_109;
        case 0xA:
LABEL_69:
          BOOL v23 = v44[0] == (void *)0x654C5870616D463CLL && LOWORD(v44[1]) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 26);
          if (v23) {
            goto LABEL_138;
          }
          if (HIBYTE(v44[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v44[2]) != 10) {
            goto LABEL_137;
          }
          BOOL v24 = v44[0] == (void *)0x654C5970616D463CLL && LOWORD(v44[1]) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 27);
          if (!v24) {
            goto LABEL_79;
          }
          goto LABEL_138;
        case 0xB:
LABEL_89:
          BOOL v27 = v44[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v44 + 3) == (void *)0x3E7065745358746CLL;
          uint64_t v17 = (uint64_t)(a1 + 30);
          if (v27) {
            goto LABEL_138;
          }
          if (HIBYTE(v44[2]) == 6) {
            goto LABEL_101;
          }
          if (HIBYTE(v44[2]) != 11) {
            goto LABEL_137;
          }
          BOOL v28 = v44[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v44 + 3) == (void *)0x3E7065745359746CLL;
          uint64_t v17 = (uint64_t)(a1 + 31);
          if (!v28) {
            goto LABEL_137;
          }
          goto LABEL_138;
        case 0xF:
          BOOL v29 = v44[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v44 + 7) == (void *)0x3E66656F43657461;
          uint64_t v8 = a1 + 34;
          if (!v29) {
            goto LABEL_137;
          }
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v44[0] != (void *)0x6E6569646172473CLL
            || v44[1] != (void *)0x7079546D726F4E74
            || LOWORD(v44[2]) != 15973)
          {
            uint64_t v6 = v44;
            switch(HIBYTE(v44[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          BOOL v20 = v44[0] == (void *)0x61654C736169423CLL
             && v44[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v44[1] + 3) == (void *)0x3E66656F43657461;
          uint64_t v8 = a1 + 35;
          if (!v20)
          {
            switch(HIBYTE(v44[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    uint64_t v9 = v44[1];
    if (v44[1] == (void *)15)
    {
      BOOL v10 = *(void *)v44[0] == 0x61526E7261654C3CLL && *(void *)((char *)v44[0] + 7) == 0x3E66656F43657461;
      uint64_t v8 = a1 + 34;
      if (v10) {
        goto LABEL_109;
      }
    }
    if (v44[1] == (void *)19)
    {
      BOOL v12 = *(void *)v44[0] == 0x61654C736169423CLL
         && *((void *)v44[0] + 1) == 0x6F43657461526E72
         && *(void *)((char *)v44[0] + 11) == 0x3E66656F43657461;
      uint64_t v8 = a1 + 35;
      if (v12) {
        goto LABEL_109;
      }
      uint64_t v9 = v44[1];
    }
    if (v9 == (void *)18)
    {
      if (*(void *)v44[0] == 0x6E6569646172473CLL
        && *((void *)v44[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v44[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v43 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *((_DWORD *)a1 + 36) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_139;
      }
      uint64_t v9 = v44[1];
    }
    if (v9 != (void *)9) {
      goto LABEL_39;
    }
    BOOL v15 = *(void *)v44[0] == 0x6461724778614D3CLL && *((unsigned char *)v44[0] + 8) == 62;
    uint64_t v8 = a1 + 37;
    if (!v15)
    {
      uint64_t v9 = v44[1];
LABEL_39:
      if (v9 == (void *)10)
      {
        BOOL v16 = *(void *)v44[0] == 0x654C5870616D463CLL && *((_WORD *)v44[0] + 4) == 15982;
        uint64_t v17 = (uint64_t)(a1 + 26);
        if (v16) {
          goto LABEL_138;
        }
        uint64_t v9 = v44[1];
        if (v44[1] == (void *)10)
        {
          BOOL v18 = *(void *)v44[0] == 0x654C5970616D463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 27);
          if (v18) {
            goto LABEL_138;
          }
          if ((HIBYTE(v44[2]) & 0x80) == 0)
          {
            if (HIBYTE(v44[2]) != 6)
            {
              if (HIBYTE(v44[2]) != 10) {
                goto LABEL_137;
              }
LABEL_79:
              BOOL v25 = v44[0] == (void *)0x654C58746C69463CLL && LOWORD(v44[1]) == 15982;
              uint64_t v17 = (uint64_t)(a1 + 28);
              if (!v25)
              {
                BOOL v26 = v44[0] == (void *)0x654C59746C69463CLL && LOWORD(v44[1]) == 15982;
                uint64_t v17 = (uint64_t)(a1 + 29);
                if (!v26) {
                  goto LABEL_137;
                }
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v17);
              goto LABEL_139;
            }
LABEL_101:
            uint64_t v6 = v44;
LABEL_133:
            BOOL v34 = *(_DWORD *)v6 == 1684099132 && *((_WORD *)v6 + 2) == 15960;
            uint64_t v17 = (uint64_t)(a1 + 32);
            if (!v34) {
              goto LABEL_137;
            }
            goto LABEL_138;
          }
          BOOL v30 = *(void *)v44[0] == 0x654C58746C69463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 28);
          if (v30) {
            goto LABEL_138;
          }
          uint64_t v9 = v44[1];
          BOOL v31 = *(void *)v44[0] == 0x654C59746C69463CLL && *((_WORD *)v44[0] + 4) == 15982;
          uint64_t v17 = (uint64_t)(a1 + 29);
          if (v31) {
            goto LABEL_138;
          }
          if ((HIBYTE(v44[2]) & 0x80) == 0) {
            goto LABEL_8;
          }
        }
      }
      if (v9 != (void *)11) {
        goto LABEL_131;
      }
      BOOL v32 = *(void *)v44[0] == 0x745358746C69463CLL && *(void *)((char *)v44[0] + 3) == 0x3E7065745358746CLL;
      uint64_t v17 = (uint64_t)(a1 + 30);
      if (v32) {
        goto LABEL_138;
      }
      uint64_t v9 = v44[1];
      if (v44[1] != (void *)11) {
        goto LABEL_131;
      }
      BOOL v33 = *(void *)v44[0] == 0x745359746C69463CLL && *(void *)((char *)v44[0] + 3) == 0x3E7065745359746CLL;
      uint64_t v17 = (uint64_t)(a1 + 31);
      if (v33) {
        goto LABEL_138;
      }
      if ((HIBYTE(v44[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v44[2]) == 6) {
          goto LABEL_101;
        }
      }
      else
      {
LABEL_131:
        if (v9 == (void *)6)
        {
          uint64_t v6 = (void **)v44[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      BOOL v35 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, "<PadY>");
      uint64_t v17 = (uint64_t)(a1 + 33);
      if (!v35)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::string v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v44[2]) >= 0) {
          BOOL v40 = v44;
        }
        else {
          BOOL v40 = (void **)v44[0];
        }
        if (SHIBYTE(v44[2]) >= 0) {
          uint64_t v41 = HIBYTE(v44[2]);
        }
        else {
          uint64_t v41 = (uint64_t)v44[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v8);
LABEL_139:
    if (SHIBYTE(v44[2]) < 0) {
      operator delete(v44[0]);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_142;
    }
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadX>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadY>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1B239BA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::WriteData(uint64_t a1, void *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  kaldi::QuantizedMatrix<short>::Write(*(int **)(a1 + 184), a2, a3, a4);
  uint64_t v8 = *(void *)(a1 + 192);
  kaldi::CuVectorBase<float>::Write(v8, a2, a3);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  int v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  return *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v2;
}

const void **kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  int v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v5;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v10, *(float **)(a1 + 184));
  uint64_t v7 = *(void *)(a1 + 192);
  int v8 = *(_DWORD *)(v7 + 16);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SetParams(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  int v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  int v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v5;
  uint64_t v7 = *(unsigned int **)(a1 + 184);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = *(char **)a2;
  LODWORD(v12) = v6;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v7, &v11);
  int v8 = *(_DWORD **)(a1 + 192);
  int v9 = v8[4];
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = (char *)(*(void *)a2 + 4 * v6);
  LODWORD(v12) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v8, (uint64_t)&v11);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  double v2 = kaldi::QuantizedMatrixBase<short>::Sum(*(int **)(a1 + 184));
  float v3 = *(float *)&v2;
  double v4 = kaldi::CuVectorBase<float>::Sum(*(void *)(a1 + 192));
  return v3 + *(float *)&v4;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  uint64_t v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1B239BD54()
{
  uint64_t v2 = *(unsigned int *)(*(void *)(v0 + 192) + 16);
  v4[0] = &unk_1F0A517C0;
  memset(&v4[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v4, v2, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v4);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(v0 + 192), (uint64_t)v4, v1, 1.0);
  kaldi::CuVector<float>::~CuVector(v4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v5);
}

void sub_1B239BDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 168))(a1, v17, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" OutSizeX:", 10);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  double v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<short>(*(kaldi::quasar::Vocab **)(a1 + 184));
  if ((v16 & 0x80u) == 0) {
    int v6 = v15;
  }
  else {
    int v6 = (void **)v15[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v7 = v16;
  }
  else {
    uint64_t v7 = (uint64_t)v15[1];
  }
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 192));
  if ((v14 & 0x80u) == 0) {
    BOOL v10 = __p;
  }
  else {
    BOOL v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v16 < 0) {
    operator delete(v15[0]);
  }
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v17[1] = MEMORY[0x1E4FBA470] + 16;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v19);
}

void sub_1B239C0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v33, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 200));
  if ((v32 & 0x80u) == 0) {
    double v4 = v31;
  }
  else {
    double v4 = (void **)v31[0];
  }
  if ((v32 & 0x80u) == 0) {
    std::string::size_type v5 = v32;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v31[1];
  }
  int v6 = std::string::append(&v33, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = std::string::append(&v34, ", lr-coef ");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v30 & 0x80u) == 0) {
    BOOL v10 = v29;
  }
  else {
    BOOL v10 = (void **)v29[0];
  }
  if ((v30 & 0x80u) == 0) {
    std::string::size_type v11 = v30;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)v29[1];
  }
  uint64_t v12 = std::string::append(&v35, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v14 = std::string::append(&v36, "\n  bias_grad");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((void *)(a1 + 224));
  if ((v28 & 0x80u) == 0) {
    unsigned __int8 v16 = v27;
  }
  else {
    unsigned __int8 v16 = (void **)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    std::string::size_type v17 = v28;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v27[1];
  }
  char v18 = std::string::append(&v37, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  BOOL v20 = std::string::append(&v38, ", lr-coef ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v26 & 0x80u) == 0) {
    uint64_t v22 = __p;
  }
  else {
    uint64_t v22 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v23 = v26;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)__p[1];
  }
  BOOL v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((char)v32 < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1B239C3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v52 - 57) < 0) {
    operator delete(*(void **)(v52 - 80));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B239C49C()
{
}

void sub_1B239C4A4()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 || !*(unsigned char *)(a1 + 17)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateCpu(a1, a2, a3, a4);
  }
  else {
    BNNSFilterApplyBatch(*(void **)(a1 + 152), *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7 = *(_DWORD *)(a1 + 104);
  int v8 = *(_DWORD *)(a1 + 108);
  int v76 = (v7 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v75 = (v8 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v73 = (v76 + 1);
  uint64_t v74 = (v75 + 1);
  int v80 = v74 * v73;
  int v9 = *(_DWORD *)(a1 + 8);
  int v77 = *(_DWORD *)(a1 + 12);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  uint64_t v81 = a2;
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  int v82 = (uint64_t *)(a1 + 296);
  uint64_t v11 = *(void *)(a1 + 296);
  unint64_t v12 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 304) - v11) >> 3) < v12)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v82, v12);
    uint64_t v11 = *v82;
  }
  int v13 = a4;
  unsigned __int8 v14 = (uint64_t *)(v11 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 4) < v80) {
    std::vector<kaldi::CuMatrix<float>>::resize(v14, v80);
  }
  if (v80 >= 1)
  {
    uint64_t v15 = 0;
    do
    {
      unsigned __int8 v16 = (int32x2_t *)(*(void *)(*(void *)(a1 + 296) + 24 * v13) + v15);
      uint64_t v17 = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
      kaldi::CuMatrix<float>::Resize(v16, v10, v17, 0, 0);
      v15 += 48;
    }
    while (48 * v80 != v15);
  }
  long long v79 = (uint64_t *)(a1 + 160);
  unint64_t v18 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 4) < v18) {
    std::vector<kaldi::CuMatrix<float>>::resize(v79, v18);
  }
  int v19 = *(_DWORD *)(a1 + 132);
  int v20 = *(_DWORD *)(a1 + 108);
  int v21 = *(_DWORD *)(a1 + 116);
  int v86 = -v19;
  int v83 = v13;
  if (v19 + v20 - v21 < -v19) {
    goto LABEL_65;
  }
  int v22 = 0;
  int v23 = *(_DWORD *)(a1 + 128);
  int v24 = *(_DWORD *)(a1 + 104);
  int v25 = *(_DWORD *)(a1 + 112);
  int v85 = v9 / (v8 * v7);
  do
  {
    int v26 = -v23;
    if (v23 + v24 - v25 < -v23) {
      goto LABEL_64;
    }
    uint64_t v27 = v22;
    do
    {
      uint64_t v84 = v27;
      memset(__p, 0, 24);
      if (v85 < 1) {
        goto LABEL_60;
      }
      std::vector<int>::pointer end = 0;
      int v29 = 0;
      int v30 = v26 + v24 * v86;
      int v31 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v31 < 1) {
          goto LABEL_59;
        }
        for (int i = 0; i < v31; ++i)
        {
          if (v25 < 1) {
            continue;
          }
          int v33 = 0;
          int v34 = i + v86;
          do
          {
            if (v34 < 0 || (int v35 = *(_DWORD *)(a1 + 108), v34 >= v35))
            {
              value = __p[0].__end_cap_.__value_;
            }
            else
            {
              value = __p[0].__end_cap_.__value_;
              if (v33 + v26 >= 0)
              {
                int v37 = *(_DWORD *)(a1 + 104);
                if (v33 + v26 < v37)
                {
                  int v38 = v30 + v33 + (i + v35 * v29) * v37;
                  if (end < __p[0].__end_cap_.__value_)
                  {
                    *end++ = v38;
                    goto LABEL_56;
                  }
                  std::vector<int>::pointer begin = __p[0].__begin_;
                  uint64_t v48 = end - __p[0].__begin_;
                  unint64_t v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 62) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  int64_t v50 = (char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_;
                  if (((char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_) >> 1 > v49) {
                    unint64_t v49 = v50 >> 1;
                  }
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v49;
                  }
                  if (v43)
                  {
                    BOOL v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v43);
                    std::vector<int>::pointer begin = __p[0].__begin_;
                    std::vector<int>::pointer end = __p[0].__end_;
                  }
                  else
                  {
                    BOOL v44 = 0;
                  }
                  int v45 = (int *)&v44[4 * v48];
                  *int v45 = v38;
                  uint64_t v46 = v45 + 1;
                  while (end != begin)
                  {
                    int v51 = *--end;
                    *--int v45 = v51;
                  }
                  goto LABEL_53;
                }
              }
            }
            if (end < value)
            {
              *end++ = -1;
              goto LABEL_56;
            }
            std::vector<int>::pointer begin = __p[0].__begin_;
            uint64_t v40 = end - __p[0].__begin_;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v42 = (char *)value - (char *)__p[0].__begin_;
            if (v42 >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              BOOL v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v43);
              std::vector<int>::pointer begin = __p[0].__begin_;
              std::vector<int>::pointer end = __p[0].__end_;
            }
            else
            {
              BOOL v44 = 0;
            }
            int v45 = (int *)&v44[4 * v40];
            *int v45 = -1;
            uint64_t v46 = v45 + 1;
            while (end != begin)
            {
              int v47 = *--end;
              *--int v45 = v47;
            }
LABEL_53:
            __p[0].__begin_ = v45;
            __p[0].__end_ = v46;
            __p[0].__end_cap_.__value_ = (int *)&v44[4 * v43];
            if (begin) {
              operator delete(begin);
            }
            std::vector<int>::pointer end = v46;
LABEL_56:
            __p[0].__end_ = end;
            ++v33;
            int v25 = *(_DWORD *)(a1 + 112);
          }
          while (v33 < v25);
          int v31 = *(_DWORD *)(a1 + 116);
        }
LABEL_59:
        ++v29;
      }
      while (v29 != v85);
LABEL_60:
      int v13 = v83;
      kaldi::CuMatrixBase<float>::CopyCols(*(void *)(*v82 + 24 * v83) + 48 * v84, v81, (uint64_t *)__p);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      uint64_t v27 = v84 + 1;
      v26 += *(_DWORD *)(a1 + 120);
      int v24 = *(_DWORD *)(a1 + 104);
      int v23 = *(_DWORD *)(a1 + 128);
      int v25 = *(_DWORD *)(a1 + 112);
    }
    while (v26 <= v23 + v24 - v25);
    int v20 = *(_DWORD *)(a1 + 108);
    int v19 = *(_DWORD *)(a1 + 132);
    int v22 = v84 + 1;
    int v21 = *(_DWORD *)(a1 + 116);
LABEL_64:
    v86 += *(_DWORD *)(a1 + 124);
  }
  while (v86 <= v19 + v20 - v21);
LABEL_65:
  uint64_t v52 = (v77 / v80);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*v79 + 48 * v13), *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 3, 0);
  if (v80 >= 1)
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    int v55 = 0;
    uint64_t v56 = 0;
    do
    {
      uint64_t v57 = *(void *)(a1 + 160) + 48 * v83;
      int v58 = v55 + *(_DWORD *)(v57 + 28);
      uint64_t v59 = *(int **)(v57 + 32);
      __p[0].__end_ = (std::vector<int>::pointer)(*(void *)(v57 + 8) + v54);
      LODWORD(__p[0].__end_cap_.__value_) = v77 / v80;
      *(int **)((char *)&__p[0].__end_cap_.__value_ + 4) = *(int **)(v57 + 20);
      HIDWORD(__p[1].__begin_) = v58;
      __p[1].__end_ = v59;
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, *(void *)(a1 + 192), 1.0, 0.0);
      LODWORD(v60) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)__p, *(void *)(*(void *)(a1 + 296) + 24 * v83) + v53, 111, *(kaldi::quasar::Vocab **)(a1 + 184), 112, v60, 1.0);
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1F0A472A0;
      memset(&__p[0].__end_, 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
      v56 += (int)v52;
      v55 -= v52;
      v54 += 4 * (int)v52;
      v53 += 48;
    }
    while (48 * v80 != v53);
  }
  std::vector<int>::vector(__p, *(int *)(a1 + 12));
  if ((int)v52 >= 1)
  {
    uint64_t v61 = 0;
    uint64x2_t v62 = (uint64x2_t)vdupq_n_s64(v73 - 1);
    int64x2_t v63 = vdupq_n_s64(2uLL);
    uint64_t v64 = 1;
    do
    {
      if ((v75 & 0x80000000) == 0)
      {
        uint64_t v65 = 0;
        uint64_t v66 = &__p[0].__begin_[v64];
        int v67 = v61;
        do
        {
          if ((v76 & 0x80000000) == 0)
          {
            int64x2_t v68 = v66;
            uint64_t v69 = (v73 + 1) & 0x1FFFFFFFELL;
            int v70 = v67;
            int64x2_t v71 = (int64x2_t)xmmword_1B255FA20;
            do
            {
              int32x2_t v72 = vmovn_s64((int64x2_t)vcgeq_u64(v62, (uint64x2_t)v71));
              if (v72.i8[0]) {
                *(v68 - 1) = v70;
              }
              if (v72.i8[4]) {
                *int64x2_t v68 = v52 + v70;
              }
              int64x2_t v71 = vaddq_s64(v71, v63);
              v70 += 2 * v52;
              v68 += 2;
              v69 -= 2;
            }
            while (v69);
          }
          ++v65;
          v67 += v52 * v73;
          v66 += v76 + 1;
        }
        while (v65 != v74);
      }
      ++v61;
      v64 += (int)v74 * (uint64_t)(int)v73;
    }
    while (v61 != v52);
  }
  kaldi::CuMatrixBase<float>::CopyCols(a3, *v79 + 48 * v83, (uint64_t *)__p);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
}

void sub_1B239CBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  int v10 = v9 + 1;
  int v11 = (*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  uint64_t v12 = (v11 + 1);
  int v13 = v12 * (v9 + 1);
  uint64_t v14 = (*(_DWORD *)(a1 + 12) / v13);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 160) + 48 * a6), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3, 0);
  std::vector<int>::vector(&v27, *(int *)(a1 + 12));
  if ((int)v14 >= 1)
  {
    int v15 = 0;
    uint64_t v16 = 0;
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v11 & 0x80000000) == 0)
      {
        uint64_t v18 = 0;
        int v19 = &v27.__begin_[v16];
        int v20 = v15;
        do
        {
          uint64_t v21 = (v9 + 1);
          int v22 = v20;
          int v23 = v19;
          if ((v9 & 0x80000000) == 0)
          {
            do
            {
              int *v23 = v22;
              v23 += v14;
              ++v22;
              --v21;
            }
            while (v21);
          }
          ++v18;
          v19 += v10 * v14;
          v20 += v10;
        }
        while (v18 != v12);
      }
      ++v16;
      v15 += v13;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(void *)(a1 + 160) + 48 * a6, a4, (uint64_t *)&v27);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v26, v13);
  uint64_t v24 = *(void *)(a1 + 24);
  if (a6 < (unint64_t)((*(void *)(a1 + 32) - v24) >> 3)) {
    kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v24 + 8 * a6), -1);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v25);
}

void sub_1B239D240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  a24 = v24 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  int v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(unsigned char *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 144);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), *(void *)(a1 + 248) + 48 * a2, a3);
      uint64_t v9 = *(void *)(*(void *)(a1 + 224) + 8 * a2);
      uint64_t v10 = *(void *)(a1 + 272) + 32 * a2;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      uint64_t v11 = a2;
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a3;
      }
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), (int *)(*(void *)(a1 + 248) + 48 * a2), v4);
      uint64_t v13 = *(void *)(*(void *)(a1 + 224) + 8 * v11);
      uint64_t v14 = (void *)(*(void *)(a1 + 272) + 32 * v11);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v13, v14, v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    uint64_t v7 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 320) + 4 * a2) * a3;
    }
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(void *)(*(void *)(a1 + 200) + 8 * a2), v4);
    uint64_t v12 = *(void *)(*(void *)(a1 + 224) + 8 * v7);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v12, v4);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 344))
  {
    int v2 = *(_DWORD *)(a1 + 80);
    if (v2 > 1) {
      int v3 = v2 + 1;
    }
    else {
      int v3 = 1;
    }
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 200), v3);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 224), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v3);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v3);
    if (v3 >= 1)
    {
      kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
      kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
      operator new();
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 320), v3);
    *(unsigned char *)(a1 + 344) = 1;
  }
}

void sub_1B239D798(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  int v10 = v9 + v9 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  int v11 = *(_DWORD *)(a1 + 12);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  *(_DWORD *)(*(void *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  uint64_t v12 = *(void *)(a1 + 200);
  *(void *)(*(void *)(v12 + 8 * a5) + 32) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 224) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(void *)(v12 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(void *)(*(void *)(a1 + 224) + 8 * a5));
  if (v10 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    int v17 = v11 / v10;
    uint64_t v18 = 48 * v10;
    do
    {
      uint64_t v19 = *(void *)(a1 + 160) + 48 * a5;
      int v20 = v15 + *(_DWORD *)(v19 + 28);
      uint64_t v21 = *(void *)(v19 + 32);
      v22[1] = *(void *)(v19 + 8) + v14;
      LODWORD(v22[2]) = v17;
      *(void *)((char *)&v22[2] + 4) = *(void *)(v19 + 20);
      HIDWORD(v22[3]) = v20;
      v22[4] = v21;
      v22[0] = &unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::AddMatMat(*(void *)(*(void *)(a1 + 200) + 8 * a5), (uint64_t)v22, CblasTrans, *(void *)(*(void *)(a1 + 296) + 24 * a5) + v13, CblasNoTrans, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(void *)(*(void *)(a1 + 224) + 8 * a5), (uint64_t)v22, 1.0, 1.0);
      v22[0] = &unk_1F0A472A0;
      memset(&v22[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
      v16 += v17;
      v15 -= v17;
      v14 += 4 * v17;
      v13 += 48;
    }
    while (v18 != v13);
  }
}

void sub_1B239D9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  _OWORD *v4 = 0u;
  v4[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unsupported");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v14, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, void))(*(void *)v8 + 112))(v8, a2, v15, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, void))(*(void *)v8 + 128))(v8, a2, v15, a3, v14, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  LODWORD(a3) = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * a3;
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(*(void *)(a1 + 192) + 16) + a3), 0);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v11 = (char *)*a4;
  LODWORD(v12) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v11, **(void **)(v8 + 200));
  int v9 = *(_DWORD *)(*(void *)(a1 + 192) + 16);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v11 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v12) = v9;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 224), (uint64_t)&v11);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
}

void sub_1B239DC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 84)) {
    return *(float *)(a1 + 56);
  }
  uint64_t v2 = *(void *)(a1 + 352);
  unint64_t v3 = *(void *)(a1 + 360) - v2;
  if (!v3) {
    return NAN;
  }
  unint64_t v4 = v3 >> 2;
  if ((int)v4 <= a2) {
    return NAN;
  }
  int v5 = v4 - 1;
  if (a2 >= 0) {
    int v5 = a2;
  }
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  int v6 = *(_DWORD *)(*(void *)(a1 + 192) + 16);
  int v7 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  uint64_t result = kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
  *a3 = v6 + result * v7;
  uint64_t v9 = *(void *)(a1 + 200);
  uint64_t v10 = *(void *)(a1 + 208) - v9;
  if (v10 && (uint64_t v11 = *(void *)(a1 + 232) - *(void *)(a1 + 224)) != 0)
  {
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v11 >> 3;
    int v14 = *(_DWORD *)(a1 + 80);
    if (v14 == 1) {
      int v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = v13 - 1;
    if (v12 - 1 != v14 || v16 != v14)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      int v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
      uint64_t v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    int v18 = kaldi::CuMatrixBase<float>::CountZeros(*(void *)(v9 + 8 * v14));
    uint64_t result = kaldi::CuVectorBase<float>::CountZeros(*(void *)(*(void *)(a1 + 224) + 8 * v15));
    int v19 = result + v18;
  }
  else
  {
    int v19 = 0;
  }
  *a2 = v19;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "Weights are already vectorized");
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v4, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v4);
    }
    int v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
    int v3 = *(_DWORD *)(*(void *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184)) * v2;
    if (v3 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 176))(a1)) {
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v4, "(nlinparams + bias_->Dim()) == NumParams()");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v4);
}

void sub_1B239E2A8(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_1B239E344(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_1B239E3B8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(void *)(*(void *)(a1 + 208) - 8));
  uint64_t v4 = *(void *)(*(void *)(a1 + 232) - 8);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v4);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 265;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 266;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 267;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  float v7 = *(float *)(a1 + 64);
  float v6 = *(float *)(a1 + 68);
  float v8 = *(float *)(a1 + 72);
  int v9 = *(_DWORD *)(a1 + 76);
  *(void *)(*(void *)(a1 + 184) + 32) = a2;
  *(void *)(*(void *)(a1 + 192) + 24) = a2;
  uint64_t v10 = *(unsigned int *)(a1 + 80);
  if (a3 >= 0) {
    int v11 = a3;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 80);
  }
  if (v10 == 1) {
    int v12 = 0;
  }
  else {
    int v12 = v11;
  }
  unint64_t v13 = v12;
  int v14 = *(uint64_t **)(a1 + 200);
  *(void *)(v14[v12] + 32) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 224) + 8 * v12) + 24) = a2;
  *(void *)(*(void *)(a1 + 248) + 48 * v12 + 32) = a2;
  *(void *)(*(void *)(a1 + 272) + 32 * v12 + 24) = a2;
  if (v12 == v10)
  {
    kaldi::CuMatrixBase<float>::AddMat(v14[v12], *v14, 111, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*(void *)(*(void *)(a1 + 224) + 8 * v13), **(void **)(a1 + 224), 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      uint64_t v15 = 1;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*(void *)(*(void *)(a1 + 200) + 8 * v13), *(void *)(*(void *)(a1 + 200) + 8 * v15), 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*(void *)(*(void *)(a1 + 224) + 8 * v13), *(void *)(*(void *)(a1 + 224) + 8 * v15++), 1.0, 1.0);
      }
      while (v15 < *(int *)(a1 + 80));
    }
    uint64_t v16 = *(int **)(a1 + 320);
    v16[v13] = 0;
    if ((int)v10 >= 1)
    {
      int v17 = 0;
      int v18 = v16;
      do
      {
        int v19 = *v18++;
        v17 += v19;
        v16[v13] = v17;
        --v10;
      }
      while (v10);
    }
  }
  float v20 = *(float *)(a1 + 56);
  if (*(unsigned char *)(a1 + 84)) {
    float v20 = v20 / (float)*(int *)(*(void *)(a1 + 320) + 4 * v13);
  }
  uint64_t v21 = *(void *)(a1 + 352);
  if (v13 >= (*(void *)(a1 + 360) - v21) >> 2)
  {
    LODWORD(v24[0]) = 2143289344;
    std::vector<float>::resize(a1 + 352, (int)v13 + 1, v24);
    uint64_t v21 = *(void *)(a1 + 352);
  }
  *(float *)(v21 + 4 * v13) = v20;
  if (*(float *)(a1 + 148) >= 0.0) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 248))(a1, v13);
  }
  if (v7 != 0.0) {
    kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 184), *(void *)(a1 + 184), 111, (float)-(float)(v20 * v7) * (float)*(int *)(*(void *)(a1 + 320) + 4 * v13), 1.0);
  }
  if (v6 != 0.0) {
    kaldi::cu::RegularizeL1<float>(*(void *)(a1 + 184), *(void *)(*(void *)(a1 + 200) + 8 * v13), (float)(v6 * v20) * (float)*(int *)(*(void *)(a1 + 320) + 4 * v13), v20);
  }
  if (v8 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
    if (*(void *)(a1 + 384) == *(void *)(a1 + 376)) {
      kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 376), v9, v8);
  }
  kaldi::CuMatrixBase<float>::AddMat(*(void *)(a1 + 184), *(void *)(*(void *)(a1 + 200) + 8 * v13), 111, -(float)(v20 * *(float *)(a1 + 136)), 1.0);
  kaldi::CuVectorBase<float>::AddVec(*(void *)(a1 + 192), *(void *)(*(void *)(a1 + 224) + 8 * v13), -(float)(v20 * *(float *)(a1 + 140)), 1.0);
  int v22 = *(unsigned char **)(a1 + 320);
  if (v13 == *(_DWORD *)(a1 + 80))
  {
    int v23 = *(unsigned char **)(a1 + 328);
    if (v22 != v23) {
      bzero(v22, ((v23 - v22 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v22[4 * v13] = 0;
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4CA98;
  *(void *)(a1 + 88) = &unk_1F0A4CBD0;
  *(void *)(a1 + 96) = &unk_1F0A4CBF8;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_1B239E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  int v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 360) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 192) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
  }
  *(unsigned char *)(a1 + 344) = 0;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_1B239EC30(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4CC20;
  *(void *)(a1 + 88) = &unk_1F0A4CD58;
  *(void *)(a1 + 96) = &unk_1F0A4CD80;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_1B239EE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  int v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 360) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 192) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
  }
  *(unsigned char *)(a1 + 344) = 0;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_1B239F11C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::CuSubMatrix<float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    uint64_t v6 = 40 * a2;
    float v7 = (_OWORD *)(v4 + 8);
    do
    {
      _OWORD *v7 = 0uLL;
      v7[1] = 0uLL;
      *((void *)v7 - 1) = &unk_1F0A472A0;
      float v7 = (_OWORD *)((char *)v7 + 40);
      v4 += 40;
      v6 -= 40;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B239F204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4CC20;
  *(void *)(a1 + 88) = &unk_1F0A4CD58;
  *(void *)(a1 + 96) = &unk_1F0A4CD80;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(a1, a2);
  return a1;
}

void sub_1B239F3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  int v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 360) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 192) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
  }
  *(unsigned char *)(a1 + 344) = 0;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_1B239F6B4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A4FA88;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 24), *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(void *)a1 = &unk_1F0A4BA20;
  *(void *)(a1 + 48) = &unk_1F0A4A6D0;
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(void *)a1 = &unk_1F0A4CA98;
  *(void *)(a1 + 88) = &unk_1F0A4CBD0;
  *(void *)(a1 + 96) = &unk_1F0A4CBF8;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<short>>(a1, a2);
  return a1;
}

void sub_1B239F8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  int v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(void *)(v10 + 360) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(void *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v16 = *(void *)(v10 + 192);
  *(void *)(v10 + 192) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(void *)(a2 + 328), (uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 2);
  }
  *(unsigned char *)(a1 + 344) = 0;
  if (a1 != a2) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(void *)(a2 + 360), (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  uint64_t v4 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(void *)(a2 + 384) != *(void *)(a2 + 376)) {
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(void *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
}

void sub_1B239FBA0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void *quasar::CaseMapOptions::options@<X0>(quasar::CaseMapOptions *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x18uLL);
  a2[1] = result + 3;
  a2[2] = result + 3;
  *uint64_t result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 320;
  *a2 = result;
  return result;
}

uint64_t quasar::CaseMapBlock::init(quasar::CaseMapBlock *this)
{
  v14[19] = *MEMORY[0x1E4F143B8];
  int v2 = (void *)((char *)this + 328);
  uint64_t result = quasar::OptionValue<std::string>::value((void *)this + 41);
  uint64_t v4 = *(unsigned __int8 *)(result + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(result + 8);
  }
  if (v4)
  {
    quasar::OptionValue<std::string>::value(v2);
    std::ifstream::basic_ifstream(v12);
    if (v13[15] && (*((unsigned char *)&v13[2] + *(void *)(v12[0] - 24)) & 2) == 0)
    {
      memset(&__p, 0, sizeof(__p));
      long long v5 = (char *)this + 488;
      uint64_t v6 = (std::locale::id *)MEMORY[0x1E4FBA258];
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24)));
        float v7 = std::locale::use_facet(&v11, v6);
        unsigned __int8 v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v11);
        int v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)&__p, v8);
        if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) != 0) {
          break;
        }
        kaldi::Trim(&__p);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v5, (unsigned __int8 *)&__p, (uint64_t)&__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v12[0] = *MEMORY[0x1E4FBA3F8];
    *(uint64_t *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
    MEMORY[0x1B3EA7CF0](v13);
    std::istream::~istream();
    return MEMORY[0x1B3EA8520](v14);
  }
  return result;
}

void sub_1B239FEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, char a17)
{
}

uint64_t virtual thunk to'quasar::CaseMapBlock::init(quasar::CaseMapBlock *this)
{
  return quasar::CaseMapBlock::init((quasar::CaseMapBlock *)((char *)this + *(void *)(*(void *)this - 88)));
}

void quasar::CaseMapBlock::adjustSpan(quasar::CaseMapBlock *this, quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "start");
  quasar::PTree::getInt<int>((uint64_t)this, (uint64_t)__p);
}

void sub_1B23A0080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::CaseMapBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (v7 == v8)
  {
    uint64_t v30 = (uint64_t)a1 + *(void *)(*a1 - 24);
    quasar::ProcessingBlock::send(v30, (uint64_t)a3, 0);
  }
  else
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0;
    uint64_t v42 = 0;
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v40, v7, v8, 0x8F5C28F5C28F5C29 * ((v8 - v7) >> 3));
    int v9 = v40;
    uint64_t v10 = v41;
    if (v40 != v41)
    {
      int v33 = v6 + 3;
      int v31 = v41;
      unsigned __int8 v32 = v6;
      do
      {
        uint64_t v11 = v9[17];
        if (v11 != v9[18] && (quasar::CaseMapBlock::capitalize(v6, v11) & 1) != 0)
        {
          uint64_t v12 = v9[17];
          if (*(char *)(v12 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
            uint64_t v12 = v9[17];
          }
          else
          {
            long long v13 = *(_OWORD *)v12;
            v39.__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
            *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v13;
          }
          quasar::OptionValue<std::string>::value(v33);
          quasar::CaseMapBlock::mapString(v12, 0, (std::string *)v45);
          uint64_t v14 = v9[17];
          if (*(char *)(v14 + 23) < 0) {
            operator delete(*(void **)v14);
          }
          long long v15 = *(_OWORD *)v45;
          *(void *)(v14 + 16) = v46;
          *(_OWORD *)uint64_t v14 = v15;
          uint64_t v16 = v9[17];
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v17 = &v39;
          }
          else {
            int v17 = (std::string *)v39.__r_.__value_.__r.__words[0];
          }
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v39.__r_.__value_.__l.__size_;
          }
          quasar::utf8::codepointsCtr(v17, size, 0, size, (unint64_t)v35);
          if ((_BYTE)v36)
          {
            int v19 = (int)v35[0];
            unint64_t v3 = v3 & 0xFFFFFFFF00000000 | LODWORD(v35[0]);
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)v35;
            BOOL v44 = v35[2];
            memset(v35, 0, sizeof(v35));
            if (quasar::gLogLevel >= 1)
            {
              long long v60 = 0u;
              long long v61 = 0u;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              long long v54 = 0u;
              long long v55 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
              long long v50 = 0u;
              long long v51 = 0u;
              long long v48 = 0u;
              long long v49 = 0u;
              long long v46 = 0u;
              long long v47 = 0u;
              *(_OWORD *)int v45 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
              if (SHIBYTE(v44) >= 0) {
                float v20 = __p;
              }
              else {
                float v20 = (void **)__p[0];
              }
              if (SHIBYTE(v44) >= 0) {
                uint64_t v21 = HIBYTE(v44);
              }
              else {
                uint64_t v21 = (uint64_t)__p[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v20, v21);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v45);
            }
            if (SHIBYTE(v44) < 0) {
              operator delete(__p[0]);
            }
            int v19 = 0;
            v3 &= 0xFFFFFFFF00000000;
            if (!(_BYTE)v36 && SHIBYTE(v35[2]) < 0)
            {
              operator delete(v35[0]);
              int v19 = 0;
            }
          }
          if (*(char *)(v16 + 23) < 0)
          {
            int v23 = *(void **)v16;
            unint64_t v22 = *(void *)(v16 + 8);
          }
          else
          {
            unint64_t v22 = *(unsigned __int8 *)(v16 + 23);
            int v23 = (void *)v16;
          }
          quasar::utf8::codepointsCtr(v23, v22, 0, v22, (unint64_t)v35);
          if ((_BYTE)v36)
          {
            int v24 = (int)v35[0];
            unint64_t v34 = v4 & 0xFFFFFFFF00000000 | LODWORD(v35[0]);
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)v35;
            BOOL v44 = v35[2];
            memset(v35, 0, sizeof(v35));
            if (quasar::gLogLevel >= 1)
            {
              long long v60 = 0u;
              long long v61 = 0u;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              long long v54 = 0u;
              long long v55 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
              long long v50 = 0u;
              long long v51 = 0u;
              long long v48 = 0u;
              long long v49 = 0u;
              long long v46 = 0u;
              long long v47 = 0u;
              *(_OWORD *)int v45 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
              if (SHIBYTE(v44) >= 0) {
                uint64_t v25 = __p;
              }
              else {
                uint64_t v25 = (void **)__p[0];
              }
              if (SHIBYTE(v44) >= 0) {
                uint64_t v26 = HIBYTE(v44);
              }
              else {
                uint64_t v26 = (uint64_t)__p[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v25, v26);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v45);
            }
            if (SHIBYTE(v44) < 0) {
              operator delete(__p[0]);
            }
            int v24 = 0;
            unint64_t v34 = v4 & 0xFFFFFFFF00000000;
            if (!(_BYTE)v36 && SHIBYTE(v35[2]) < 0)
            {
              operator delete(v35[0]);
              int v24 = 0;
            }
          }
          if (v24 != v19)
          {
            uint64_t v27 = quasar::MetaInfo::get((quasar::MetaInfo *)(v9 + 24));
            uint64_t v28 = v27;
            LODWORD(v35[0]) = *(_DWORD *)v27;
            if (*(char *)(v27 + 31) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v35[1], *(const std::string::value_type **)(v27 + 8), *(void *)(v27 + 16));
            }
            else
            {
              long long v29 = *(_OWORD *)(v27 + 8);
              uint64_t v36 = *(void *)(v27 + 24);
              *(_OWORD *)&v35[1] = v29;
            }
            memset(&v37, 0, sizeof(v37));
            std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v37, *(void *)(v28 + 32), *(void *)(v28 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v28 + 40) - *(void *)(v28 + 32)) >> 3));
            char v38 = *(unsigned char *)(v28 + 56);
            std::string::basic_string[abi:ne180100]<0>(v45, "alignment-queries");
            quasar::PTree::getChildOptional((uint64_t)v35, (uint64_t)v45);
          }
          if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v39.__r_.__value_.__l.__data_);
          }
          uint64_t v10 = v31;
          uint64_t v6 = v32;
          unint64_t v4 = v34;
        }
        v9 += 25;
      }
      while (v9 != v10);
    }
    quasar::ProcessingBlock::send((uint64_t)v6 + *(void *)(*v6 - 24), (uint64_t)&v40, 0);
    v45[0] = &v40;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
  }
}

void sub_1B23A0A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (SHIBYTE(a32) < 0) {
    operator delete(__p);
  }
  a17 = &a33;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t quasar::CaseMapBlock::capitalize(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v24 = *(std::string *)a2;
  }
  kaldi::Trim(&v24);
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  kaldi::SplitStringToVector(&v24, " ", 1, (uint64_t)&v21);
  if (v21 == v22)
  {
    uint64_t v3 = 1;
    goto LABEL_37;
  }
  if (!*(unsigned char *)quasar::OptionValue<BOOL>::value(a1 + 23))
  {
    unint64_t v4 = v21;
    std::string::basic_string[abi:ne180100]<0>(&v18, "");
    quasar::CaseMapBlock::mapString((uint64_t)v4, 1u, &__p);
    uint64_t v5 = v4[23];
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v4[23];
    }
    else {
      uint64_t v6 = *((void *)v4 + 1);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (v6 == size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v5 & 0x80) != 0)
      {
        uint64_t v3 = memcmp(*(const void **)v4, p_p, *((void *)v4 + 1)) == 0;
        goto LABEL_29;
      }
      if (v4[23])
      {
        uint64_t v10 = v5 - 1;
        do
        {
          int v12 = *v4++;
          int v11 = v12;
          int v14 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          int v13 = v14;
          BOOL v16 = v10-- != 0;
          uint64_t v3 = v11 == v13;
        }
        while (v11 == v13 && v16);
LABEL_29:
        if ((v8 & 0x80000000) == 0) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
      uint64_t v3 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_31:
        if (v19 < 0) {
          operator delete(v18);
        }
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  uint64_t v3 = 1;
LABEL_33:
  if (a1[64])
  {
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 61, v21))
    {
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = v3;
    }
  }
LABEL_37:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  return v3;
}

void sub_1B23A0D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v19 - 41) < 0) {
    operator delete(*(void **)(v19 - 64));
  }
  _Unwind_Resume(a1);
}

void quasar::CaseMapBlock::mapString(uint64_t a1@<X0>, unsigned int a2@<W2>, std::string *a3@<X8>)
{
  UErrorCode v28 = U_ZERO_ERROR;
  memset(&v27, 0, sizeof(v27));
  if (a2 > 1)
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Unsupported mapping operation", 29);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v10);
    }
LABEL_7:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_25:
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      goto LABEL_26;
    }
LABEL_8:
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    goto LABEL_26;
  }
  if (!ucasemap_open()) {
    goto LABEL_7;
  }
  if (a2 == 1) {
    int v6 = ucasemap_utf8ToLower();
  }
  else {
    int v6 = ucasemap_utf8ToTitle();
  }
  if ((std::vector<char>::pointer)v6 <= (std::vector<char>::pointer)(v27.__end_ - v27.__begin_))
  {
    if ((std::vector<char>::pointer)v6 < (std::vector<char>::pointer)(v27.__end_ - v27.__begin_)) {
      v27.__end_ = &v27.__begin_[v6];
    }
  }
  else
  {
    std::vector<signed char>::__append(&v27, v6 - (unint64_t)(v27.__end_ - v27.__begin_));
  }
  if (v28 >= U_ILLEGAL_ARGUMENT_ERROR && v28 != U_BUFFER_OVERFLOW_ERROR)
  {
    if (quasar::gLogLevel < 2) {
      goto LABEL_24;
    }
LABEL_23:
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Unicode error (ICU): ", 21);
    int v8 = u_errorName(v28);
    size_t v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v10);
LABEL_24:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_8;
  }
  UErrorCode v28 = U_ZERO_ERROR;
  if (a2 == 1) {
    ucasemap_utf8ToLower();
  }
  else {
    ucasemap_utf8ToTitle();
  }
  if (v28 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (quasar::gLogLevel < 2) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  ucasemap_close();
  std::string::basic_string[abi:ne180100](a3, v27.__begin_, v27.__end_ - v27.__begin_);
LABEL_26:
  if (v27.__begin_)
  {
    v27.__end_ = v27.__begin_;
    operator delete(v27.__begin_);
  }
}

void sub_1B23A11E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  long long v11 = *(void **)(v9 - 80);
  if (v11)
  {
    *(void *)(v9 - 72) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::CaseMapBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t quasar::CaseMapBlock::minConfigVersion(quasar::CaseMapBlock *this)
{
  return 167;
}

uint64_t virtual thunk to'quasar::CaseMapBlock::minConfigVersion(quasar::CaseMapBlock *this)
{
  return 167;
}

void quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  unint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      int v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      int v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    unint64_t v4 = v10;
  }
  if (v4)
  {
    long long v11 = v4;
    operator delete(v4);
  }
}

void sub_1B23A1370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::CaseMapBlock::~CaseMapBlock(quasar::CaseMapBlock *this)
{
  *(void *)this = off_1F0A52120;
  int v2 = (char **)((char *)this + 528);
  *((void *)this + 66) = off_1F0A521C8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 488);
  *(void *)this = &unk_1F0A212B0;
  *((void *)this + 66) = &unk_1F0A21338;
  quasar::CaseMapOptions::~CaseMapOptions((quasar::CaseMapBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  uint64_t vars8;

  *(void *)this = off_1F0A52120;
  int v2 = (char **)((char *)this + 528);
  *((void *)this + 66) = off_1F0A521C8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 488);
  *(void *)this = &unk_1F0A212B0;
  *((void *)this + 66) = &unk_1F0A21338;
  quasar::CaseMapOptions::~CaseMapOptions((quasar::CaseMapBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  JUMPOUT(0x1B3EA8670);
}

const char *quasar::CaseMapBlock::blockType(quasar::CaseMapBlock *this)
{
  return "CaseMapBlock";
}

void virtual thunk to'quasar::CaseMapBlock::~CaseMapBlock(quasar::CaseMapBlock *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A52120;
  *((void *)v1 + 66) = off_1F0A521C8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(v1 + 488));
  *(void *)uint64_t v1 = &unk_1F0A212B0;
  *((void *)v1 + 66) = &unk_1F0A21338;
  quasar::CaseMapOptions::~CaseMapOptions((quasar::CaseMapOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 66);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = off_1F0A52120;
  *((void *)v1 + 66) = off_1F0A521C8;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(v1 + 488));
  *(void *)uint64_t v1 = &unk_1F0A212B0;
  *((void *)v1 + 66) = &unk_1F0A21338;
  quasar::CaseMapOptions::~CaseMapOptions((quasar::CaseMapOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 66);
  JUMPOUT(0x1B3EA8670);
}

const char *virtual thunk to'quasar::CaseMapBlock::blockType(quasar::CaseMapBlock *this)
{
  return "CaseMapBlock";
}

void quasar::CaseMapOptions::~CaseMapOptions(quasar::CaseMapOptions *this)
{
  *(void *)this = &unk_1F0A52700;
  *((void *)this + 40) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((void **)this + 58));
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  *((void *)this + 40) = &unk_1F0A52FB8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  *((void *)this + 22) = &unk_1F0A51E58;
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  *((void *)this + 22) = &unk_1F0A52FB8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 34);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  *((void *)this + 2) = &unk_1F0A51DE8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  *((void *)this + 2) = &unk_1F0A52FB8;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

uint64_t TParam::TParam(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = &unk_1F0A34A90;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v12 = a1 + 64;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v13 = a1 + 40;
  uint64_t v14 = a1 + 88;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  MEMORY[0x1B3EA7C30](a1 + 16, a3);
  MEMORY[0x1B3EA7C30](v13, a4);
  *(void *)(a1 + 112) = a5;
  MEMORY[0x1B3EA7C30](v12, a6);
  MEMORY[0x1B3EA7C30](v14, a7);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return a1;
}

void sub_1B23A19E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v2);
  }
  TParam::TParam();
  _Unwind_Resume(a1);
}

uint64_t TParam::TParam(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A34A90;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  MEMORY[0x1B3EA7C30](a1 + 16, a3);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  return a1;
}

void sub_1B23A1AA8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  TParam::TParam();
  _Unwind_Resume(a1);
}

void TParam::~TParam(void **this)
{
  *this = &unk_1F0A34A90;
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t TParam::getValidConfig(TParam *this, uint64_t a2)
{
  unint64_t v2 = *((void *)this + 14);
  while (((v2 >> (a2 + 33)) & 1) == 0)
  {
    if ((v2 >> (a2 + 9))) {
      return a2;
    }
    a2 = *(void *)(*(void *)(*((void *)this + 17) + 64) + 32 * a2);
  }
  a2 += 24;
  return a2;
}

uint64_t TParam::getValidOriginalConfig(TParam *this, uint64_t a2)
{
  for (unint64_t i = *((void *)this + 14);
        ((i >> (a2 + 9)) & 1) == 0;
  return a2;
}

uint64_t TParam::notifyChange(uint64_t this, uint64_t a2)
{
  unint64_t v2 = *(void **)(this + 136);
  if (v2)
  {
    uint64_t v3 = v2[16];
    v2[16] = a2;
    this = (*(uint64_t (**)(void *, uint64_t))(*v2 + 16))(v2, this);
    v2[16] = v3;
  }
  return this;
}

void sub_1B23A1C30(_Unwind_Exception *a1)
{
  *(void *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

uint64_t TParam::getActiveConfigHandle(TParam *this)
{
  return *(void *)(*((void *)this + 17) + 128);
}

uint64_t TParam::flagsSet(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 112) & a2;
  uint64_t v4 = a2;
  return std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,64ul>,true,true>(&v3, 0, (uint64_t)&v4, 0, &v4);
}

BOOL TBoolParam::setValue(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  BOOL v19 = 0;
  {
    operator new();
  }
  char v6 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)a3, &v19);
  BOOL v7 = v19;
  if (v19)
  {
    int v8 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      int v8 = *(unsigned int **)v8;
    }
    loggableUnicode(v8, v17);
    int v9 = v18;
    long long v10 = (void **)v17[0];
    loggableUnicode(a3, __p);
    if (v9 >= 0) {
      uint64_t v12 = v17;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v16 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    tknPrintf("Error: %s : parameter value is out of range, was '%s', expected a BOOLean.\n", v11, v12, v13);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    TBoolParam::set(a1, a2, v6);
  }
  return v7;
}

void sub_1B23A1DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  MEMORY[0x1B3EA8670](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::set(uint64_t this, uint64_t a2, char a3)
{
  *(unsigned char *)(a2 + this + 176) = a3;
  *(void *)(this + 112) |= 1 << (a2 + 33);
  uint64_t v3 = *(void **)(this + 136);
  if (v3)
  {
    uint64_t v4 = v3[16];
    v3[16] = a2;
    this = (*(uint64_t (**)(void *, uint64_t))(*v3 + 16))(v3, this);
    v3[16] = v4;
  }
  return this;
}

void sub_1B23A1EC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

BOOL TBoolParam::setValueOriginal(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  BOOL v19 = 0;
  {
    operator new();
  }
  char v6 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)a3, &v19);
  BOOL v7 = v19;
  if (v19)
  {
    int v8 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      int v8 = *(unsigned int **)v8;
    }
    loggableUnicode(v8, v17);
    int v9 = v18;
    long long v10 = (void **)v17[0];
    loggableUnicode(a3, __p);
    if (v9 >= 0) {
      uint64_t v12 = v17;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v16 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    tknPrintf("Error: %s : parameter value is out of range, was '%s', expected a BOOLean.\n", v11, v12, v13);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    TBoolParam::setOriginal(a1, a2, v6);
  }
  return v7;
}

void sub_1B23A2018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  MEMORY[0x1B3EA8670](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::setOriginal(uint64_t this, uint64_t a2, char a3)
{
  *(unsigned char *)(this + a2 + 152) = a3;
  *(void *)(this + 112) |= 1 << (a2 + 9);
  uint64_t v3 = *(void **)(this + 136);
  if (v3)
  {
    uint64_t v4 = v3[16];
    v3[16] = a2;
    this = (*(uint64_t (**)(void *, uint64_t))(*v3 + 16))(v3, this);
    v3[16] = v4;
  }
  return this;
}

void sub_1B23A2100(_Unwind_Exception *a1)
{
  *(void *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

TIntParam *TIntParam::TIntParam(TIntParam *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  *(void *)TParam::TParam((uint64_t)a1, 2, a2, a3, a4, a8, a9) = &unk_1F0A35900;
  if (a5 > a6
    || (*((_DWORD *)a1 + 38) = a5, *((_DWORD *)a1 + 39) = a6, TIntParam::setOriginal(a1, 0, a7)))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create Int param");
    TException::TException(v18, (long long *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1F0A33D08;
    if (v19 >= 0) {
      uint64_t v14 = (std::exception_vtbl *)&v18[1];
    }
    else {
      uint64_t v14 = v18[1].__vftable;
    }
    conditionalAssert((const char *)v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 205);
    TException::~TException(v18);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "Failed to create Int param");
    TException::TException(exception, (long long *)v18);
    void *exception = &unk_1F0A33D08;
  }
  return a1;
}

{
  return TIntParam::TIntParam(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B23A2288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      TParam::~TParam(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TIntParam::TIntParam(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (TIntParam *)TParam::TParam(a1, 2, a2);
  *(void *)uint64_t v3 = &unk_1F0A35900;
  *((void *)v3 + 19) = 0;
  if (TIntParam::setOriginal(v3, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create Int param");
    TException::TException(v9, (long long *)__p);
    v9[0].__vftable = (std::exception_vtbl *)&unk_1F0A33D08;
    if (v10 >= 0) {
      uint64_t v5 = (std::exception_vtbl *)&v9[1];
    }
    else {
      uint64_t v5 = v9[1].__vftable;
    }
    conditionalAssert((const char *)v5, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 215);
    TException::~TException(v9);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Failed to create Int param");
    TException::TException(exception, (long long *)v9);
    void *exception = &unk_1F0A33D08;
  }
  return a1;
}

void sub_1B23A2464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      TParam::~TParam(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TIntParam::setValue(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  BOOL v18 = 0;
  {
    operator new();
  }
  int v6 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v18);
  if (!v18 && v6 >= *(_DWORD *)(a1 + 152) && v6 <= *(_DWORD *)(a1 + 156)) {
    return TIntParam::set((TIntParam *)a1, a2, v6);
  }
  BOOL v7 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    BOOL v7 = *(unsigned int **)v7;
  }
  loggableUnicode(v7, v16);
  int v8 = v17;
  int v9 = (void **)v16[0];
  loggableUnicode(a3, __p);
  if (v8 >= 0) {
    uint64_t v11 = v16;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v15 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  tknPrintf("Error: %s : parameter value is out of range, was '%s', expected an int in the range [%d,%d].\n", v10, v11, v12, *(unsigned int *)(a1 + 152), *(unsigned int *)(a1 + 156));
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  return 1;
}

void sub_1B23A2640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1B3EA8670](v25, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TIntParam::setValueOriginal(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  BOOL v18 = 0;
  {
    operator new();
  }
  int v6 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v18);
  if (!v18 && v6 >= *(_DWORD *)(a1 + 152) && v6 <= *(_DWORD *)(a1 + 156)) {
    return TIntParam::setOriginal((TIntParam *)a1, a2, v6);
  }
  BOOL v7 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    BOOL v7 = *(unsigned int **)v7;
  }
  loggableUnicode(v7, v16);
  int v8 = v17;
  int v9 = (void **)v16[0];
  loggableUnicode(a3, __p);
  if (v8 >= 0) {
    uint64_t v11 = v16;
  }
  else {
    uint64_t v11 = v9;
  }
  if (v15 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  tknPrintf("Error: %s : parameter value is out of range, was '%s', expected an int in the range [%d,%d].\n", v10, v11, v12, *(unsigned int *)(a1 + 152), *(unsigned int *)(a1 + 156));
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  return 1;
}

void sub_1B23A2810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  MEMORY[0x1B3EA8670](v25, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TIntParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v6 = (uint64_t)*(v14 - 3);
  BOOL v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v14 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  int v8 = *(std::locale **)((char *)&v15.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    int v9 = v8 + 1;
    std::locale::locale(&v17, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v17);
  }
  std::locale::~locale(&v13);
  TParam::getValidConfig(a1, a2);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1B3EA8530](&v16);
}

void sub_1B23A2A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  *(void *)a1 = &unk_1F0A230D0;
  *(void *)(a1 + 112) = &unk_1F0A230F8;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)(a1 + 8));
  *(void *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::wstreambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B23A2B94(_Unwind_Exception *a1)
{
  std::wostream::~wostream();
  MEMORY[0x1B3EA8530](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x1B3EA8530](v2);
  return a1;
}

uint64_t TIntParam::getValueOriginal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  uint64_t v6 = (uint64_t)*(v15 - 3);
  BOOL v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v15 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v15 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  int v8 = *(std::locale **)((char *)&v16.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    int v9 = v8 + 1;
    std::locale::locale(&v18, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v18);
  }
  std::locale::~locale(&v14);
  for (unint64_t i = *(void *)(a1 + 112);
        ((i >> (a2 + 9)) & 1) == 0;
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1B3EA8530](&v17);
}

void sub_1B23A2E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL TFloatParam::setValue(uint64_t a1, uint64_t a2, __int32 *a3)
{
  BOOL v19 = 0;
  {
    operator new();
  }
  double v6 = TLocaleInfo::stringToFloat(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v19);
  BOOL v7 = v19;
  if (v19)
  {
    int v8 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      int v8 = *(unsigned int **)v8;
    }
    loggableUnicode(v8, v17);
    int v9 = v18;
    uint64_t v10 = (void **)v17[0];
    loggableUnicode((unsigned int *)a3, __p);
    if (v9 >= 0) {
      uint64_t v12 = v17;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v16 >= 0) {
      std::locale v13 = __p;
    }
    else {
      std::locale v13 = (void **)__p[0];
    }
    tknPrintf("Error: %s : parameter value is not a float, was '%s'.\n", v11, v12, v13);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    TFloatParam::set(a1, a2, v6);
  }
  return v7;
}

void sub_1B23A300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  MEMORY[0x1B3EA8670](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::set(uint64_t this, uint64_t a2, double a3)
{
  *(double *)(this + 8 * a2 + 344) = a3;
  *(void *)(this + 112) |= 1 << (a2 + 33);
  uint64_t v3 = *(void **)(this + 136);
  if (v3)
  {
    uint64_t v4 = v3[16];
    v3[16] = a2;
    this = (*(uint64_t (**)(void *, uint64_t))(*v3 + 16))(v3, this);
    v3[16] = v4;
  }
  return this;
}

void sub_1B23A30F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

BOOL TFloatParam::setValueOriginal(uint64_t a1, uint64_t a2, __int32 *a3)
{
  BOOL v19 = 0;
  {
    operator new();
  }
  double v6 = TLocaleInfo::stringToFloat(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v19);
  BOOL v7 = v19;
  if (v19)
  {
    int v8 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      int v8 = *(unsigned int **)v8;
    }
    loggableUnicode(v8, v17);
    int v9 = v18;
    uint64_t v10 = (void **)v17[0];
    loggableUnicode((unsigned int *)a3, __p);
    if (v9 >= 0) {
      uint64_t v12 = v17;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v16 >= 0) {
      std::locale v13 = __p;
    }
    else {
      std::locale v13 = (void **)__p[0];
    }
    tknPrintf("Error: %s : parameter value is not a float, was '%s'.\n", v11, v12, v13);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    TFloatParam::setOriginal(a1, a2, v6);
  }
  return v7;
}

void sub_1B23A3244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  MEMORY[0x1B3EA8670](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::setOriginal(uint64_t this, uint64_t a2, double a3)
{
  *(double *)(this + 8 * a2 + 152) = a3;
  *(void *)(this + 112) |= 1 << (a2 + 9);
  uint64_t v3 = *(void **)(this + 136);
  if (v3)
  {
    uint64_t v4 = v3[16];
    v3[16] = a2;
    this = (*(uint64_t (**)(void *, uint64_t))(*v3 + 16))(v3, this);
    v3[16] = v4;
  }
  return this;
}

void sub_1B23A332C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v6 = (uint64_t)*(v14 - 3);
  BOOL v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v14 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  int v8 = *(std::locale **)((char *)&v15.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    int v9 = v8 + 1;
    std::locale::locale(&v17, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v17);
  }
  std::locale::~locale(&v13);
  TParam::getValidConfig(a1, a2);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1B3EA8530](&v16);
}

void sub_1B23A3518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::getValueOriginal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  uint64_t v6 = (uint64_t)*(v15 - 3);
  BOOL v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v15 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v15 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  int v8 = *(std::locale **)((char *)&v16.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    int v9 = v8 + 1;
    std::locale::locale(&v18, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v18);
  }
  std::locale::~locale(&v14);
  for (unint64_t i = *(void *)(a1 + 112);
        ((i >> (a2 + 9)) & 1) == 0;
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1B3EA8530](&v17);
}

void sub_1B23A375C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void *TStringParam::TStringParam(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 *a5, uint64_t a6, uint64_t a7)
{
  int v9 = (void *)TParam::TParam((uint64_t)a1, 4, a2, a3, a4, a6, a7);
  *int v9 = &unk_1F0A337B0;
  bzero(v9 + 19, 0x4C8uLL);
  if (TStringParam::setOriginal(a1, 0, a5))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create String param");
    TException::TException(v15, (long long *)__p);
    v15[0].__vftable = (std::exception_vtbl *)&unk_1F0A33D08;
    if (v16 >= 0) {
      uint64_t v11 = (std::exception_vtbl *)&v15[1];
    }
    else {
      uint64_t v11 = v15[1].__vftable;
    }
    conditionalAssert((const char *)v11, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 338);
    TException::~TException(v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "Failed to create String param");
    TException::TException(exception, (long long *)v15);
    void *exception = &unk_1F0A33D08;
  }
  return a1;
}

void sub_1B23A3908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v23)
  {
LABEL_6:
    std::wstringbuf::string_type __p = v21 + 169;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::wstringbuf::string_type __p = v21 + 166;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::wstringbuf::string_type __p = v21 + 163;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v25 = 144;
    while (1)
    {
      if (SHIBYTE(v21[v25 + 18]) < 0) {
        operator delete(v21[v25 + 16]);
      }
      v25 -= 3;
      if (!(v25 * 8))
      {
        TParam::~TParam(v21);
        _Unwind_Resume(a1);
      }
    }
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TStringParam::setOriginal(void *a1, uint64_t a2, __int32 *a3)
{
  uint64_t v6 = a1[163];
  if (a1[164] != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      int v9 = (const __int32 *)(v6 + v7);
      if (*(char *)(v6 + v7 + 23) < 0) {
        int v9 = *(const __int32 **)v9;
      }
      if (!wcscmp(a3, v9)) {
        break;
      }
      ++v8;
      uint64_t v6 = a1[163];
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((a1[164] - v6) >> 3)) {
        return 1;
      }
    }
  }
  MEMORY[0x1B3EA7C30](&a1[3 * a2 + 19], a3);
  a1[14] |= 1 << (a2 + 9);
  uint64_t v11 = (void *)a1[17];
  if (!v11) {
    return 0;
  }
  uint64_t v12 = v11[16];
  v11[16] = a2;
  (*(void (**)(void *, void *))(*v11 + 16))(v11, a1);
  uint64_t result = 0;
  v11[16] = v12;
  return result;
}

void sub_1B23A3AE4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

void *TStringParam::TStringParam(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)TParam::TParam((uint64_t)a1, 4, a2);
  *uint64_t v3 = &unk_1F0A337B0;
  bzero(v3 + 19, 0x4C8uLL);
  TStringParam::setOriginal(a1, 0, &dword_1B25ADB94);
  return a1;
}

void sub_1B23A3B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = v10 + 169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10 + 166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10 + 163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v12 = 144;
  while (1)
  {
    if (SHIBYTE(v10[v12 + 18]) < 0) {
      operator delete(v10[v12 + 16]);
    }
    v12 -= 3;
    if (!(v12 * 8))
    {
      TParam::~TParam(v10);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t TStringParam::setAllowables(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    unint64_t v8 = *(long long **)(a3 + 8);
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(void *)a3) >> 3);
    if (v9 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3))
    {
      char v14 = (unsigned int *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        char v14 = *(unsigned int **)v14;
      }
      loggableUnicode(v14, __p);
      if (v21 >= 0) {
        char v16 = __p;
      }
      else {
        char v16 = (void **)__p[0];
      }
      tknPrintf("Error: %s : Mismatch in the number of (allowable, grammar) entries", v15, v16);
      goto LABEL_24;
    }
    uint64_t v10 = (std::vector<std::wstring> *)(a1 + 1328);
    if (a1 + 1328 != a3) {
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>(v10, *(std::wstring **)a3, v8, v9);
    }
  }
  if (!a4)
  {
LABEL_9:
    if (a1 + 1304 != a2) {
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::vector<std::wstring> *)(a1 + 1304), *(std::wstring **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
    return 0;
  }
  uint64_t v11 = *(long long **)(a4 + 8);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(void *)a4) >> 3);
  if (v12 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3))
  {
    if (a1 + 1352 != a4) {
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::vector<std::wstring> *)(a1 + 1352), *(std::wstring **)a4, v11, v12);
    }
    goto LABEL_9;
  }
  std::locale v17 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    std::locale v17 = *(unsigned int **)v17;
  }
  loggableUnicode(v17, __p);
  if (v21 >= 0) {
    BOOL v19 = __p;
  }
  else {
    BOOL v19 = (void **)__p[0];
  }
  tknPrintf("Error: %s : Mismatch in the number of (allowable, description) entries", v18, v19);
LABEL_24:
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1B23A3D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TStringParam::set(void *a1, uint64_t a2, __int32 *a3)
{
  uint64_t v6 = a1[163];
  if (a1[164] != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      unint64_t v9 = (const __int32 *)(v6 + v7);
      if (*(char *)(v6 + v7 + 23) < 0) {
        unint64_t v9 = *(const __int32 **)v9;
      }
      if (!wcscmp(a3, v9)) {
        break;
      }
      ++v8;
      uint64_t v6 = a1[163];
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((a1[164] - v6) >> 3)) {
        return 1;
      }
    }
  }
  MEMORY[0x1B3EA7C30](&a1[3 * a2 + 91], a3);
  a1[14] |= 1 << (a2 + 33);
  uint64_t v11 = (void *)a1[17];
  if (!v11) {
    return 0;
  }
  uint64_t v12 = v11[16];
  v11[16] = a2;
  (*(void (**)(void *, void *))(*v11 + 16))(v11, a1);
  uint64_t result = 0;
  v11[16] = v12;
  return result;
}

void sub_1B23A3E90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

uint64_t TStringParam::getGrammarValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)((char *)a1 + 24 * TParam::getValidConfig(a1, a2));
  uint64_t v6 = (const __int32 *)(v5 + 19);
  if (*((char *)v5 + 175) < 0) {
    uint64_t v6 = *(const __int32 **)v6;
  }
  uint64_t v7 = *((void *)a1 + 163);
  if (*((void *)a1 + 164) == v7) {
    goto LABEL_9;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t v10 = (const __int32 *)(v7 + v8);
    if (*(char *)(v7 + v8 + 23) < 0) {
      uint64_t v10 = *(const __int32 **)v10;
    }
    if (!wcscmp(v6, v10)) {
      break;
    }
    ++v9;
    uint64_t v7 = *((void *)a1 + 163);
    v8 += 24;
    if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 164) - v7) >> 3)) {
      goto LABEL_9;
    }
  }
  uint64_t v14 = *((void *)a1 + 166);
  if (v14 != *((void *)a1 + 167))
  {
    uint64_t v12 = (int *)(v14 + v8);
    if ((*(char *)(v14 + v8 + 23) & 0x80000000) == 0 || (uint64_t v12 = *(int **)v12) != 0)
    {
      uint64_t v11 = a3;
      goto LABEL_10;
    }
  }
  if (*(void *)(*((void *)a1 + 17) + 112) > 4uLL)
  {
LABEL_9:
    uint64_t v11 = a3;
    uint64_t v12 = (int *)v6;
LABEL_10:
    return TBuffer<wchar_t>::assign(v11, v12);
  }
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  }
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__str_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__str_.__r_.__value_.__l.__data_);
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1B3EA8530](&v19);
}

void sub_1B23A40AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::wostringstream::~wostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void TParamManager::~TParamManager(TParamManager *this)
{
  *(void *)this = &unk_1F0A33A20;
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (char *)*((void *)this + 5);
  uint64_t v4 = (char *)this + 48;
  if (v3 != (char *)this + 48)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 5);
      if (v5 && (v6 = v5 - 1, uint64_t v7 = *((void *)this + 2), v6 < (*((void *)this + 3) - v7) >> 3))
      {
        uint64_t v8 = *(void *)(v7 + 8 * v6);
        int v9 = TParam::flagsSet(v8, 8);
        if (v8) {
          BOOL v10 = v9 == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      else
      {
        TParam::flagsSet(0, 8);
      }
      uint64_t v11 = (char *)*((void *)v3 + 1);
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (char *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v12 == (void)v3;
          uint64_t v3 = v12;
        }
        while (!v10);
      }
      uint64_t v3 = v12;
    }
    while (v12 != v4);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 88, *((char **)this + 12));
  uint64_t v14 = (void **)((char *)this + 64);
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](&v14);
  std::__tree<int>::destroy((uint64_t)v2, *((void **)this + 6));
  std::locale v13 = (void *)*((void *)this + 2);
  if (v13)
  {
    *((void *)this + 3) = v13;
    operator delete(v13);
  }
}

{
  uint64_t vars8;

  TParamManager::~TParamManager(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t TParamManager::begin@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(this + 40);
  return this;
}

uint64_t TParamManager::end@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = this + 48;
  return this;
}

uint64_t TParamManager::find@<X0>(uint64_t a1@<X0>, const __int32 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = a2;
  uint64_t result = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a1 + 40, &v5);
  *a3 = result;
  return result;
}

uint64_t TParamManager::add(TParamManager *this, TParam *a2)
{
  unint64_t v6 = *((void *)this + 4);
  uint64_t v4 = (char *)this + 32;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    int v9 = (void **)(v4 - 16);
    uint64_t v10 = *((void *)v4 - 2);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v4, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v16 = &v15[8 * v11];
    std::locale v17 = &v15[8 * v14];
    *(void *)char v16 = a2;
    uint64_t v8 = v16 + 8;
    BOOL v19 = (char *)*((void *)this + 2);
    std::wstringbuf v18 = (char *)*((void *)this + 3);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      std::wstringbuf v18 = (char *)*v9;
    }
    *((void *)this + 2) = v16;
    *((void *)this + 3) = v8;
    *((void *)this + 4) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    void *v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 3) = v8;
  char v21 = (const __int32 *)((char *)a2 + 16);
  if (*((char *)a2 + 39) < 0) {
    char v21 = *(const __int32 **)v21;
  }
  uint64_t v22 = ((uint64_t)v8 - *((void *)this + 2)) >> 3;
  long long v24 = v21;
  uint64_t v25 = &v24;
  std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const* const&>,std::tuple<>>((uint64_t **)this + 5, &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25)[5] = v22;
  *((void *)a2 + 17) = this;
  return (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3;
}

unint64_t TParamManager::newConfig(uint64_t a1, __int32 *a2, std::exception_vtbl *a3)
{
  unint64_t v5 = (uint64_t *)(a1 + 64);
  v13[0].__vftable = a3;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v13[1], a2);
  std::vector<std::pair<unsigned long,std::wstring>>::push_back[abi:ne180100](v5, (uint64_t)v13);
  if (v15 < 0) {
    operator delete(v13[1].__vftable);
  }
  unint64_t v7 = ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5) - 1;
  if (v7 >= 0x18)
  {
    tknPrintf("Error: Too many parameter configurations were defined; max number of configurations is %lld\n", v6, 22);
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    TException::TException(v13, (long long *)v11);
    v13[0].__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
    if (v15 >= 0) {
      int v9 = (std::exception_vtbl *)&v13[1];
    }
    else {
      int v9 = v13[1].__vftable;
    }
    conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 556);
    TException::~TException(v13);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    TException::TException(exception, (long long *)v13);
    void *exception = &unk_1F0A33B90;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, a2);
  v11[0] = v13;
  *((void *)std::__tree<std::__value_type<std::wstring,TWordBlock *>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TWordBlock *>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TWordBlock *>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring&&>,std::tuple<>>((uint64_t **)(a1 + 88), (uint64_t)v13, (uint64_t)&std::piecewise_construct, (_OWORD **)v11)+ 7) = v7;
  if (v14 < 0) {
    operator delete(v13[0].__vftable);
  }
  return v7;
}

void sub_1B23A45B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t std::vector<std::pair<unsigned long,std::wstring>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v13);
    }
    else {
      char v14 = 0;
    }
    char v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(void *)char v15 = *(void *)a2;
    long long v16 = *(_OWORD *)(a2 + 8);
    *((void *)v15 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    void v17[2] = v15 + 32;
    std::vector<std::pair<unsigned long,std::wstring>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1B23A4758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void TParamManager::initParam(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t **a6)
{
  uint64_t v350 = *MEMORY[0x1E4F143B8];
  long long v303 = xmmword_1B255FA20;
  v302 = "N";
  if (a4) {
    uint64_t v11 = 2;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v304 = -1;
  v305 = "D";
  uint64_t v306 = v11;
  long long v307 = xmmword_1B255E5F0;
  long long v309 = xmmword_1B2563B40;
  v308 = "V";
  long long v312 = xmmword_1B2563B40;
  uint64_t v310 = 4;
  v311 = "O";
  uint64_t v313 = 4;
  long long v315 = xmmword_1B2563B40;
  v314 = "F";
  uint64_t v316 = 4;
  long long v318 = xmmword_1B2563B40;
  v317 = "S";
  uint64_t v319 = 4;
  long long v321 = xmmword_1B2563B40;
  v320 = "F";
  uint64_t v322 = -1;
  long long v324 = xmmword_1B2563B40;
  v323 = "M";
  uint64_t v325 = -1;
  v326 = "M";
  uint64_t v327 = 2;
  long long v328 = xmmword_1B255E5F0;
  v329 = "A";
  uint64_t v330 = 2;
  long long v331 = xmmword_1B255E5F0;
  v332 = "D";
  uint64_t v333 = v11;
  long long v334 = xmmword_1B25ADB50;
  v335 = "V";
  uint64_t v336 = 2;
  long long v337 = xmmword_1B25ADB50;
  v338 = "R";
  uint64_t v339 = 2;
  long long v340 = xmmword_1B25ADB60;
  int v12 = TFileObject::verify(a2, (uint64_t)&v302, 0xDuLL, 1);
  char v298 = v12;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(&v341, (long long *)&__p);
    v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
    if (v343 >= 0) {
      uint64_t v189 = &v342;
    }
    else {
      uint64_t v189 = (int64x2_t *)v342.i64[0];
    }
    conditionalAssert(v189->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 768);
    TException::~TException(&v341);
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v341, "");
    TException::TException(exception, (long long *)&v341);
    void *exception = &unk_1F0A340F0;
  }
  v297 = 0;
  unint64_t v13 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5;
  v341.__vftable = 0;
  std::vector<wchar_t const*>::vector(v296, v13, &v341);
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5;
  v341.__vftable = 0;
  std::vector<wchar_t const*>::vector(v295, v14, &v341);
  memset(&v294, 0, sizeof(v294));
  memset(&v293, 0, sizeof(v293));
  memset(&v292, 0, sizeof(v292));
  uint64_t Config = TParamManager::getConfig(a1, (__int32 *)"F");
  uint64_t v282 = TParamManager::getConfig(a1, (__int32 *)"S");
  char v277 = a5;
  int v285 = a4;
  v284 = (uint64_t *)a2;
  uint64_t v15 = *(void *)(a2 + 24);
  if (v15)
  {
    char v279 = 0;
    uint64_t v286 = 0;
    v287 = 0;
    v281 = 0;
    v276 = 0;
    v288 = 0;
    uint64_t v289 = 0;
    uint64_t v290 = 0;
    v291 = 0;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"N"))
      {
        char v22 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v298 |= v22;
        v297 = *(std::exception_vtbl **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"D"))
      {
        char v24 = TFileObject::verify((TFileObject *)v15, 0, 1);
        v298 |= v24;
        uint64_t v290 = *(void *)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"O")
        || !wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"V"))
      {
        char v23 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v298 |= v23;
        v291 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"D")) {
        break;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"V"))
      {
        if (*(_DWORD *)(v15 + 40))
        {
          loggableFileObject((uint64_t *)v15);
          if (v342.i8[15] >= 0) {
            long long v26 = &v341;
          }
          else {
            long long v26 = v341.__vftable;
          }
LABEL_37:
          tknPrintf("Error: %sBad attribute declaration, expected an object\n", v25, v26);
LABEL_38:
          if (v342.i8[15] < 0) {
            operator delete(v341.__vftable);
          }
          char v298 = 1;
          goto LABEL_139;
        }
        uint64_t v43 = *(void *)(v15 + 24);
        if (!v43) {
          goto LABEL_139;
        }
        while (2)
        {
          uint64_t v44 = TParamManager::getConfig(a1, *(__int32 **)(v43 + 8));
          if ((unint64_t)(v44 + 1) <= 1)
          {
            loggableFileObject((uint64_t *)v15);
            int v45 = v342.i8[15];
            long long v46 = v341.__vftable;
            loggableUnicode(*(unsigned int **)(v43 + 8), &__p);
            if (v45 >= 0) {
              long long v48 = &v341;
            }
            else {
              long long v48 = (std::exception *)v46;
            }
            std::__split_buffer<std::wstring>::pointer p_p = (std::__split_buffer<std::wstring>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0) {
              std::__split_buffer<std::wstring>::pointer p_p = __p.__first_;
            }
            tknPrintf("Error: %sInvalid configuration name: '%s'\n", v47, v48, p_p);
            goto LABEL_84;
          }
          char v50 = TFileObject::verify((TFileObject *)v43, 0, a3 == 4);
          v298 |= v50;
          if (*((void *)v295[0] + v44))
          {
            loggableFileObject((uint64_t *)v15);
            int v51 = v342.i8[15];
            long long v52 = v341.__vftable;
            loggableUnicode(*(unsigned int **)(v43 + 8), &__p);
            if (v51 >= 0) {
              long long v54 = &v341;
            }
            else {
              long long v54 = (std::exception *)v52;
            }
            std::__split_buffer<std::wstring>::pointer first = (std::__split_buffer<std::wstring>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0) {
              std::__split_buffer<std::wstring>::pointer first = __p.__first_;
            }
            tknPrintf("Error: %sDuplicate parameter setting for '%s' configuration\n", v53, v54, first);
LABEL_84:
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            char v298 = 1;
          }
          else
          {
            *((void *)v295[0] + v44) = *(void *)(v43 + 24);
          }
          uint64_t v43 = *(void *)(v43 + 16);
          if (!v43) {
            goto LABEL_139;
          }
          continue;
        }
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"F"))
      {
        unint64_t v27 = *(void *)(a1 + 112);
        int64x2_t v342 = (int64x2_t)xmmword_1B257E4D0;
        v341.__vftable = (std::exception_vtbl *)&dword_1B25ADB94;
        uint64_t v343 = -1;
        if (TFileObject::verify(v15, (uint64_t)&v341, 1uLL, 1))
        {
          uint64_t v289 = 0;
          char v28 = 1;
          goto LABEL_138;
        }
        uint64_t v56 = *(void *)(v15 + 24);
        if (!v56)
        {
          char v28 = 0;
          uint64_t v289 = 0;
          goto LABEL_137;
        }
        uint64_t v289 = 0;
        char v28 = 0;
        while (2)
        {
          if (TFileObject::verify((TFileObject *)v56, 0, 0))
          {
LABEL_95:
            char v28 = 1;
            goto LABEL_118;
          }
          if (!wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"e"))
          {
            uint64_t v59 = v289 | 1;
          }
          else
          {
            if (v27 <= 2 && !wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"d"))
            {
              loggableFileObject((uint64_t *)v15);
              std::__split_buffer<std::wstring>::pointer v61 = (std::__split_buffer<std::wstring>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0) {
                std::__split_buffer<std::wstring>::pointer v61 = __p.__first_;
              }
              tknPrintf("Warning: %s'deprecated' attribute is not functional\n", v60, v61);
              goto LABEL_114;
            }
            if (!wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"h"))
            {
              uint64_t v59 = v289 | 0x20;
            }
            else if (!wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"r"))
            {
              uint64_t v59 = v289 | 0x100;
            }
            else
            {
              if (wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"u"))
              {
                if (v27 > 2 || wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"p"))
                {
                  loggableFileObject((uint64_t *)v15);
                  std::__split_buffer<std::wstring>::pointer v58 = (std::__split_buffer<std::wstring>::pointer)&__p;
                  if (SHIBYTE(__p.__end_) < 0) {
                    std::__split_buffer<std::wstring>::pointer v58 = __p.__first_;
                  }
                  tknPrintf("Error: %sUnknown flag\n", v57, v58);
                  if (SHIBYTE(__p.__end_) < 0) {
                    operator delete(__p.__first_);
                  }
                  goto LABEL_95;
                }
                loggableFileObject((uint64_t *)v15);
                std::__split_buffer<std::wstring>::pointer v63 = (std::__split_buffer<std::wstring>::pointer)&__p;
                if (SHIBYTE(__p.__end_) < 0) {
                  std::__split_buffer<std::wstring>::pointer v63 = __p.__first_;
                }
                tknPrintf("Warning: %s'persistent' attribute is not functional\n", v62, v63);
LABEL_114:
                if (SHIBYTE(__p.__end_) < 0) {
                  operator delete(__p.__first_);
                }
LABEL_118:
                uint64_t v56 = *(void *)(v56 + 16);
                if (!v56)
                {
                  if ((~(_BYTE)v289 & 0x21) == 0)
                  {
                    loggableFileObject((uint64_t *)v15);
                    std::__split_buffer<std::wstring>::pointer v66 = (std::__split_buffer<std::wstring>::pointer)&__p;
                    if (SHIBYTE(__p.__end_) < 0) {
                      std::__split_buffer<std::wstring>::pointer v66 = __p.__first_;
                    }
                    tknPrintf("Error: %sParam cannot be exposed and hidden at the same time\n", v65, v66);
                    if (SHIBYTE(__p.__end_) < 0) {
                      operator delete(__p.__first_);
                    }
                    char v28 = 1;
                  }
                  if ((v289 & 2) != 0)
                  {
LABEL_138:
                    v298 |= v28 & 1;
                    goto LABEL_139;
                  }
LABEL_137:
                  v289 |= 4uLL;
                  goto LABEL_138;
                }
                continue;
              }
              uint64_t v59 = v289 | 2;
            }
          }
          break;
        }
        uint64_t v289 = v59;
        goto LABEL_118;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"F"))
      {
        if (Config == -1)
        {
          tknPrintf("Error: \"Format\" detected but no format config exists\n", v16);
          char v298 = 1;
        }
        char v42 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v298 |= v42;
        v288 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"S"))
      {
        if (v282 == -1)
        {
          tknPrintf("Error: \"SpellOut\" detected but no spellout config exists\n", v17);
          char v298 = 1;
        }
        char v64 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v298 |= v64;
        v287 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"M"))
      {
        char v67 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v298 |= v67;
        if (a3 != 2)
        {
          loggableFileObject((uint64_t *)v15);
          if (v342.i8[15] >= 0) {
            v232 = &v341;
          }
          else {
            v232 = v341.__vftable;
          }
          tknPrintf("Error: %sInvalid attribute for given parameter type\n", v231, v232);
          if (v342.i8[15] < 0) {
            operator delete(v341.__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v341, (long long *)&__p);
          v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
          if (v343 >= 0) {
            v233 = &v342;
          }
          else {
            v233 = (int64x2_t *)v342.i64[0];
          }
          conditionalAssert(v233->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 905);
          TException::~TException(&v341);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          uint64_t v234 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v341, "");
          TException::TException(v234, (long long *)&v341);
          *uint64_t v234 = &unk_1F0A340F0;
        }
        v276 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"M"))
      {
        char v68 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v298 |= v68;
        if (a3 != 2)
        {
          loggableFileObject((uint64_t *)v15);
          if (v342.i8[15] >= 0) {
            v240 = &v341;
          }
          else {
            v240 = v341.__vftable;
          }
          tknPrintf("Error: %sInvalid attribute for given parameter type\n", v239, v240);
          if (v342.i8[15] < 0) {
            operator delete(v341.__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v341, (long long *)&__p);
          v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
          if (v343 >= 0) {
            int v241 = &v342;
          }
          else {
            int v241 = (int64x2_t *)v342.i64[0];
          }
          conditionalAssert(v241->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 915);
          TException::~TException(&v341);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          int v242 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v341, "");
          TException::TException(v242, (long long *)&v341);
          *int v242 = &unk_1F0A340F0;
        }
        v281 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"A"))
      {
        unint64_t v280 = *(void *)(a1 + 112);
        int64x2_t v342 = vdupq_n_s64(1uLL);
        v341.__vftable = (std::exception_vtbl *)&dword_1B25ADB94;
        long long v345 = xmmword_1B257E4D0;
        uint64_t v343 = -1;
        v344 = "G";
        uint64_t v346 = -1;
        v347 = "D";
        long long v348 = xmmword_1B257E4D0;
        uint64_t v349 = -1;
        if (TFileObject::verify(v15, (uint64_t)&v341, 3uLL, 1))
        {
          char v69 = 1;
          goto LABEL_232;
        }
        uint64_t v70 = *(void *)(v15 + 24);
        if (!v70)
        {
          char v69 = 0;
LABEL_217:
          if (v293.__end_ != v293.__begin_
            && (char *)v294.__end_ - (char *)v294.__begin_ != (char *)v293.__end_ - (char *)v293.__begin_)
          {
            loggableFileObject((uint64_t *)v15);
            std::__split_buffer<std::wstring>::pointer v108 = (std::__split_buffer<std::wstring>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0) {
              std::__split_buffer<std::wstring>::pointer v108 = __p.__first_;
            }
            tknPrintf("Error: %sMismatch in the counts of allowables and Grammar associations\n", v107, v108);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            char v69 = 1;
          }
          if (v292.__end_ != v292.__begin_
            && (char *)v294.__end_ - (char *)v294.__begin_ != (char *)v292.__end_ - (char *)v292.__begin_)
          {
            loggableFileObject((uint64_t *)v15);
            std::__split_buffer<std::wstring>::pointer v110 = (std::__split_buffer<std::wstring>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0) {
              std::__split_buffer<std::wstring>::pointer v110 = __p.__first_;
            }
            tknPrintf("Error: %sMismatch in the counts of allowables and associated descriptions\n", v109, v110);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            char v69 = 1;
          }
          if (a3)
          {
LABEL_232:
            v298 |= v69 & 1;
            char v279 = 1;
            if (a3 == 4 || a3 == 1) {
              goto LABEL_139;
            }
            if (a3) {
              goto LABEL_683;
            }
          }
          else
          {
            if (((0xAAAAAAAAAAAAAAABLL * (((char *)v294.__end_ - (char *)v294.__begin_) >> 3)) | 2) != 2)
            {
              loggableFileObject((uint64_t *)v15);
              std::__split_buffer<std::wstring>::pointer v112 = (std::__split_buffer<std::wstring>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0) {
                std::__split_buffer<std::wstring>::pointer v112 = __p.__first_;
              }
              tknPrintf("Error: %sBoth 'true' and 'false' must be defined for BOOLean allowables\n", v111, v112);
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              char v69 = 1;
            }
            v298 |= v69 & 1;
          }
          if (*(void *)(a1 + 112) <= 5uLL)
          {
LABEL_683:
            loggableFileObject((uint64_t *)v15);
            if (v342.i8[15] >= 0) {
              v273 = &v341;
            }
            else {
              v273 = v341.__vftable;
            }
            tknPrintf("Error: %sInvalid attribute for given parameter type\n", v272, v273);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              unint64_t v274 = &v342;
            }
            else {
              unint64_t v274 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v274->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 927);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            v275 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v275, (long long *)&v341);
            void *v275 = &unk_1F0A340F0;
          }
          char v279 = 1;
          goto LABEL_139;
        }
        char v69 = 0;
        while (2)
        {
          if (TFileObject::verify((TFileObject *)v70, 0, 1))
          {
LABEL_148:
            char v69 = 1;
            goto LABEL_149;
          }
          if (!wcscmp(*(const __int32 **)(v70 + 8), &dword_1B25ADB94))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v299, *(__int32 **)(v70 + 24));
            std::vector<std::wstring>::pointer end = v294.__end_;
            if (v294.__end_ >= v294.__end_cap_.__value_)
            {
              unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * (((char *)v294.__end_ - (char *)v294.__begin_) >> 3);
              unint64_t v78 = v77 + 1;
              if (v77 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v294.__end_cap_.__value_ - (char *)v294.__begin_) >> 3) > v78) {
                unint64_t v78 = 0x5555555555555556 * (((char *)v294.__end_cap_.__value_ - (char *)v294.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v294.__end_cap_.__value_ - (char *)v294.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v79 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v79 = v78;
              }
              __p.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v294.__end_cap_;
              if (v79) {
                int v80 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v294.__end_cap_, v79);
              }
              else {
                int v80 = 0;
              }
              long long v89 = v80 + v77;
              __p.__first_ = v80;
              __p.__begin_ = v89;
              __p.__end_cap_.__value_ = &v80[v79];
              long long v90 = v299;
              v89->__r_.__value_.__r.__words[2] = v300;
              *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
              std::wstring::size_type v300 = 0;
              long long v299 = 0uLL;
              __p.__end_ = v89 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v294, &__p);
              long long v91 = v294.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v294.__end_ = v91;
              if (SHIBYTE(v300) < 0) {
                operator delete((void *)v299);
              }
            }
            else
            {
              long long v74 = v299;
              v294.__end_->__r_.__value_.__r.__words[2] = v300;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v74;
              v294.__end_ = end + 1;
            }
            if (!a3)
            {
              if (wcscmp(*(const __int32 **)(v70 + 24), (const __int32 *)"t")
                && wcscmp(*(const __int32 **)(v70 + 24), (const __int32 *)"f"))
              {
                loggableFileObject((uint64_t *)v15);
                std::__split_buffer<std::wstring>::pointer v93 = (std::__split_buffer<std::wstring>::pointer)&__p;
                if (SHIBYTE(__p.__end_) < 0) {
                  std::__split_buffer<std::wstring>::pointer v93 = __p.__first_;
                }
                tknPrintf("Error: %sBoolean allowables must be 'true' and 'false'\n", v92, v93);
                goto LABEL_214;
              }
              std::vector<std::wstring>::pointer begin = v294.__begin_;
              if ((std::vector<std::wstring>::pointer)((char *)v294.__end_ - (char *)v294.__begin_) == (std::vector<std::wstring>::pointer)48)
              {
                if (SHIBYTE(v294.__begin_->__r_.__value_.__r.__words[2]) < 0) {
                  std::vector<std::wstring>::pointer begin = (std::vector<std::wstring>::pointer)v294.__begin_->__r_.__value_.__l.__data_;
                }
                if (!wcscmp(*(const __int32 **)(v70 + 24), (const __int32 *)begin))
                {
                  loggableFileObject((uint64_t *)v15);
                  std::__split_buffer<std::wstring>::pointer v96 = (std::__split_buffer<std::wstring>::pointer)&__p;
                  if (SHIBYTE(__p.__end_) < 0) {
                    std::__split_buffer<std::wstring>::pointer v96 = __p.__first_;
                  }
                  tknPrintf("Error: %sDuplicate BOOLean allowable\n", v95, v96);
                  goto LABEL_214;
                }
              }
            }
          }
          else if (!wcscmp(*(const __int32 **)(v70 + 8), (const __int32 *)"G"))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v299, *(__int32 **)(v70 + 24));
            std::vector<std::wstring>::pointer v75 = v293.__end_;
            if (v293.__end_ >= v293.__end_cap_.__value_)
            {
              unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v293.__end_ - (char *)v293.__begin_) >> 3);
              unint64_t v82 = v81 + 1;
              if (v81 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v293.__end_cap_.__value_ - (char *)v293.__begin_) >> 3) > v82) {
                unint64_t v82 = 0x5555555555555556 * (((char *)v293.__end_cap_.__value_ - (char *)v293.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v293.__end_cap_.__value_ - (char *)v293.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v83 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v83 = v82;
              }
              __p.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v293.__end_cap_;
              if (v83) {
                uint64_t v84 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v293.__end_cap_, v83);
              }
              else {
                uint64_t v84 = 0;
              }
              uint64_t v97 = v84 + v81;
              __p.__first_ = v84;
              __p.__begin_ = v97;
              __p.__end_cap_.__value_ = &v84[v83];
              long long v98 = v299;
              v97->__r_.__value_.__r.__words[2] = v300;
              *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v98;
              std::wstring::size_type v300 = 0;
              long long v299 = 0uLL;
              __p.__end_ = v97 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v293, &__p);
              std::vector<int> v99 = v293.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v293.__end_ = v99;
              if (SHIBYTE(v300) < 0) {
                operator delete((void *)v299);
              }
            }
            else
            {
              long long v76 = v299;
              v293.__end_->__r_.__value_.__r.__words[2] = v300;
              *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
              v293.__end_ = v75 + 1;
            }
            if (!a3)
            {
              loggableFileObject((uint64_t *)v15);
              std::__split_buffer<std::wstring>::pointer v101 = (std::__split_buffer<std::wstring>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0) {
                std::__split_buffer<std::wstring>::pointer v101 = __p.__first_;
              }
              tknPrintf("Error: %sGrammar attribute not supported in Boolean allowables\n", v100, v101);
              goto LABEL_214;
            }
          }
          else if (!wcscmp(*(const __int32 **)(v70 + 8), (const __int32 *)"D"))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v299, *(__int32 **)(v70 + 24));
            std::vector<std::wstring>::pointer v71 = v292.__end_;
            if (v292.__end_ >= v292.__end_cap_.__value_)
            {
              unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)v292.__end_ - (char *)v292.__begin_) >> 3);
              unint64_t v86 = v85 + 1;
              if (v85 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v292.__end_cap_.__value_ - (char *)v292.__begin_) >> 3) > v86) {
                unint64_t v86 = 0x5555555555555556 * (((char *)v292.__end_cap_.__value_ - (char *)v292.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v292.__end_cap_.__value_ - (char *)v292.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v87 = v86;
              }
              __p.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v292.__end_cap_;
              if (v87) {
                long long v88 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v292.__end_cap_, v87);
              }
              else {
                long long v88 = 0;
              }
              uint64_t v102 = v88 + v85;
              __p.__first_ = v88;
              __p.__begin_ = v102;
              __p.__end_cap_.__value_ = &v88[v87];
              long long v103 = v299;
              v102->__r_.__value_.__r.__words[2] = v300;
              *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
              std::wstring::size_type v300 = 0;
              long long v299 = 0uLL;
              __p.__end_ = v102 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v292, &__p);
              uint64_t v104 = v292.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v292.__end_ = v104;
              if (SHIBYTE(v300) < 0) {
                operator delete((void *)v299);
              }
            }
            else
            {
              long long v72 = v299;
              v292.__end_->__r_.__value_.__r.__words[2] = v300;
              *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
              v292.__end_ = v71 + 1;
            }
            if (v280 <= 5)
            {
              loggableFileObject((uint64_t *)v15);
              std::__split_buffer<std::wstring>::pointer v106 = (std::__split_buffer<std::wstring>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0) {
                std::__split_buffer<std::wstring>::pointer v106 = __p.__first_;
              }
              tknPrintf("Error: %sDescription attribute not supported in allowables if version < 6\n", v105, v106);
LABEL_214:
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              goto LABEL_148;
            }
          }
LABEL_149:
          uint64_t v70 = *(void *)(v70 + 16);
          if (!v70) {
            goto LABEL_217;
          }
          continue;
        }
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"R"))
      {
        char v18 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v298 |= v18;
        uint64_t v19 = TParamManager::nameToParam(a1, *(const __int32 **)(v15 + 24));
        uint64_t v286 = v19;
        if (!v19 || *(_DWORD *)(v19 + 8))
        {
          loggableFileObject((uint64_t *)v15);
          if (v342.i8[15] >= 0) {
            char v21 = &v341;
          }
          else {
            char v21 = v341.__vftable;
          }
          tknPrintf("Error: %sAttribute must reference a previously-defined BOOLean parameter name\n", v20, v21);
          goto LABEL_38;
        }
      }
LABEL_139:
      uint64_t v15 = *(void *)(v15 + 16);
      if (!v15) {
        goto LABEL_246;
      }
    }
    if (*(_DWORD *)(v15 + 40))
    {
      loggableFileObject((uint64_t *)v15);
      if (v342.i8[15] >= 0) {
        long long v26 = &v341;
      }
      else {
        long long v26 = v341.__vftable;
      }
      goto LABEL_37;
    }
    uint64_t v29 = *(void *)(v15 + 24);
    if (!v29) {
      goto LABEL_139;
    }
    while (1)
    {
      uint64_t v30 = TParamManager::getConfig(a1, *(__int32 **)(v29 + 8));
      if ((unint64_t)(v30 + 1) <= 1) {
        break;
      }
      char v36 = TFileObject::verify((TFileObject *)v29, 0, a3 == 4);
      v298 |= v36;
      if (*((void *)v296[0] + v30))
      {
        loggableFileObject((uint64_t *)v15);
        int v37 = v342.i8[15];
        char v38 = v341.__vftable;
        loggableUnicode(*(unsigned int **)(v29 + 8), &__p);
        if (v37 >= 0) {
          uint64_t v40 = &v341;
        }
        else {
          uint64_t v40 = (std::exception *)v38;
        }
        std::__split_buffer<std::wstring>::pointer v41 = (std::__split_buffer<std::wstring>::pointer)&__p;
        if (SHIBYTE(__p.__end_) < 0) {
          std::__split_buffer<std::wstring>::pointer v41 = __p.__first_;
        }
        tknPrintf("Error: %sDuplicate default setting for '%s' configuration\n", v39, v40, v41);
        goto LABEL_58;
      }
      *((void *)v296[0] + v30) = *(void *)(v29 + 24);
LABEL_63:
      uint64_t v29 = *(void *)(v29 + 16);
      if (!v29) {
        goto LABEL_139;
      }
    }
    loggableFileObject((uint64_t *)v15);
    int v31 = v342.i8[15];
    unsigned __int8 v32 = v341.__vftable;
    loggableUnicode(*(unsigned int **)(v29 + 8), &__p);
    if (v31 >= 0) {
      unint64_t v34 = &v341;
    }
    else {
      unint64_t v34 = (std::exception *)v32;
    }
    std::__split_buffer<std::wstring>::pointer v35 = (std::__split_buffer<std::wstring>::pointer)&__p;
    if (SHIBYTE(__p.__end_) < 0) {
      std::__split_buffer<std::wstring>::pointer v35 = __p.__first_;
    }
    tknPrintf("Error: %sInvalid configuration name: '%s'\n", v33, v34, v35);
LABEL_58:
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    if (v342.i8[15] < 0) {
      operator delete(v341.__vftable);
    }
    char v298 = 1;
    goto LABEL_63;
  }
  uint64_t v289 = 0;
  uint64_t v290 = 0;
  v291 = 0;
  v287 = 0;
  v288 = 0;
  v276 = 0;
  v281 = 0;
  uint64_t v286 = 0;
  char v279 = 0;
LABEL_246:
  if (v298)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(&v341, (long long *)&__p);
    v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
    if (v343 >= 0) {
      v191 = &v342;
    }
    else {
      v191 = (int64x2_t *)v342.i64[0];
    }
    conditionalAssert(v191->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 942);
    TException::~TException(&v341);
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    v192 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v341, "");
    TException::TException(v192, (long long *)&v341);
    void *v192 = &unk_1F0A340F0;
  }
  v341.__vftable = v297;
  uint64_t v113 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a1 + 40, (const __int32 **)&v341);
  int v114 = a4;
  unint64_t v115 = v287;
  uint64_t v116 = v288;
  unint64_t v117 = v291;
  uint64_t v118 = v113;
  if (v285)
  {
    if (a1 + 48 != v113)
    {
      if (std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__count_unique<wchar_t const*>((uint64_t)a6, (const __int32 **)&v297))
      {
        if (*(void *)(a1 + 112) >= 7uLL)
        {
          loggableFileObject(v284);
          int v220 = v342.i8[15];
          v221 = v341.__vftable;
          loggableUnicode((unsigned int *)v297, &__p);
          v223 = &v341;
          if (v220 < 0) {
            v223 = (std::exception *)v221;
          }
          if (SHIBYTE(__p.__end_) >= 0) {
            std::__split_buffer<std::wstring>::pointer v224 = (std::__split_buffer<std::wstring>::pointer)&__p;
          }
          else {
            std::__split_buffer<std::wstring>::pointer v224 = __p.__first_;
          }
          tknPrintf("Error: %sParameter '%s' has been overridden multiple times\n", v222, v223, v224);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          if (v342.i8[15] < 0) {
            operator delete(v341.__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v341, (long long *)&__p);
          v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
          if (v343 >= 0) {
            int v225 = &v342;
          }
          else {
            int v225 = (int64x2_t *)v342.i64[0];
          }
          conditionalAssert(v225->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 970);
          TException::~TException(&v341);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          unint64_t v226 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v341, "");
          TException::TException(v226, (long long *)&v341);
          *unint64_t v226 = &unk_1F0A340F0;
        }
        loggableFileObject(v284);
        int v119 = v342.i8[15];
        unint64_t v120 = v341.__vftable;
        loggableUnicode((unsigned int *)v297, &__p);
        unint64_t v122 = &v341;
        if (v119 < 0) {
          unint64_t v122 = (std::exception *)v120;
        }
        if (SHIBYTE(__p.__end_) >= 0) {
          std::__split_buffer<std::wstring>::pointer v123 = (std::__split_buffer<std::wstring>::pointer)&__p;
        }
        else {
          std::__split_buffer<std::wstring>::pointer v123 = __p.__first_;
        }
        tknPrintf("Warning: %sParameter '%s' has been overridden multiple times\n", v121, v122, v123);
        unint64_t v117 = v291;
        if (SHIBYTE(__p.__end_) < 0) {
          operator delete(__p.__first_);
        }
        if (v342.i8[15] < 0) {
          operator delete(v341.__vftable);
        }
      }
      else
      {
        std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(a6, (const __int32 **)&v297, (uint64_t *)&v297);
      }
      uint64_t v139 = *(void *)(v118 + 40);
      if (v139 && (unint64_t v140 = v139 - 1, v141 = *(void *)(a1 + 16), v140 < (*(void *)(a1 + 24) - v141) >> 3))
      {
        uint64_t v142 = *(void *)(v141 + 8 * v140);
        if (!a3) {
          goto LABEL_312;
        }
      }
      else
      {
        uint64_t v142 = 0;
        if (!a3)
        {
LABEL_312:
          if ((v279 & 1) != 0
            && (std::vector<std::wstring>::pointer)((char *)v292.__end_ - (char *)v292.__begin_) == (std::vector<std::wstring>::pointer)48)
          {
            if (v142) {
            else
            }
              v143 = 0;
            std::vector<std::wstring>::pointer data = v294.__begin_;
            if (SHIBYTE(v294.__begin_->__r_.__value_.__r.__words[2]) < 0) {
              std::vector<std::wstring>::pointer data = (std::vector<std::wstring>::pointer)v294.__begin_->__r_.__value_.__l.__data_;
            }
            int v161 = wcscmp((const __int32 *)data, (const __int32 *)"t");
            v162 = &v292.__begin_[v161 == 0];
            if (SHIBYTE(v162->__r_.__value_.__r.__words[2]) < 0) {
              v162 = (std::wstring *)v162->__r_.__value_.__r.__words[0];
            }
            v163 = &v292.__begin_[v161 != 0];
            if (SHIBYTE(v163->__r_.__value_.__r.__words[2]) < 0) {
              v163 = (std::wstring *)v163->__r_.__value_.__r.__words[0];
            }
            MEMORY[0x1B3EA7C30](v143 + 200, v162);
            MEMORY[0x1B3EA7C30](v143 + 224, v163);
          }
          goto LABEL_387;
        }
      }
LABEL_324:
      if (a3 == 2)
      {
        if (v142) {
        else
        }
          float v144 = 0;
        if (v276)
        {
          {
            operator new();
          }
          int v146 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v276, (BOOL *)&v298);
        }
        else
        {
          int v146 = v144[38];
        }
        if (v298)
        {
          loggableFileObject(v284);
          if (v342.i8[15] >= 0) {
            uint64_t v213 = &v341;
          }
          else {
            uint64_t v213 = v341.__vftable;
          }
          tknPrintf("Error: %sParameter min value is not an integer\n", v212, v213);
          if (v342.i8[15] < 0) {
            operator delete(v341.__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v341, (long long *)&__p);
          v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
          if (v343 >= 0) {
            unint64_t v214 = &v342;
          }
          else {
            unint64_t v214 = (int64x2_t *)v342.i64[0];
          }
          conditionalAssert(v214->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1058);
          TException::~TException(&v341);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          v215 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v341, "");
          TException::TException(v215, (long long *)&v341);
          void *v215 = &unk_1F0A340F0;
        }
        if (v281)
        {
          {
            operator new();
          }
          int v147 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v281, (BOOL *)&v298);
          if (v298)
          {
            loggableFileObject(v284);
            if (v342.i8[15] >= 0) {
              unint64_t v149 = &v341;
            }
            else {
              unint64_t v149 = v341.__vftable;
            }
            tknPrintf("Error: %sParameter max value is not an integer\n", v148, v149);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              v150 = &v342;
            }
            else {
              v150 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v150->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1065);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            v151 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v151, (long long *)&v341);
            void *v151 = &unk_1F0A340F0;
          }
        }
        else
        {
          int v147 = v144[39];
        }
        if (v146 > v147)
        {
          loggableFileObject(v284);
          if (v342.i8[15] >= 0) {
            v217 = &v341;
          }
          else {
            v217 = v341.__vftable;
          }
          tknPrintf("Error: %sInvalid range\n", v216, v217);
          if (v342.i8[15] < 0) {
            operator delete(v341.__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v341, (long long *)&__p);
          v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
          if (v343 >= 0) {
            int v218 = &v342;
          }
          else {
            int v218 = (int64x2_t *)v342.i64[0];
          }
          conditionalAssert(v218->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1071);
          TException::~TException(&v341);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          int v219 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v341, "");
          TException::TException(v219, (long long *)&v341);
          *int v219 = &unk_1F0A340F0;
        }
        v144[38] = v146;
        v144[39] = v147;
      }
      else if (a3 == 4 || a3 == 1)
      {
        if (v142) {
        else
        }
          float v145 = 0;
        if (v279)
        {
          int v152 = v293.__begin_ == v293.__end_ ? 0 : &v293;
          int v153 = v292.__begin_ == v292.__end_ ? 0 : &v292;
          if (TStringParam::setAllowables((uint64_t)v145, (uint64_t)&v294, (uint64_t)v152, (uint64_t)v153))
          {
            loggableFileObject(v284);
            if (v342.i8[15] >= 0) {
              uint64_t v236 = &v341;
            }
            else {
              uint64_t v236 = v341.__vftable;
            }
            tknPrintf("Error: %sParameter allowable list is invalid\n", v235, v236);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              uint64_t v237 = &v342;
            }
            else {
              uint64_t v237 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v237->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1092);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            unint64_t v238 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v238, (long long *)&v341);
            *unint64_t v238 = &unk_1F0A340F0;
          }
        }
        if (a3 == 1)
        {
          if (v117)
          {
            {
              operator new();
            }
            unsigned int v154 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v291, (BOOL *)&v298);
            uint64_t v155 = v145[163];
            if (0xAAAAAAAAAAAAAAABLL * ((v145[164] - v155) >> 3) < v154)
            {
              loggableFileObject(v284);
              int v251 = v342.i8[15];
              v252 = v341.__vftable;
              loggableUnicode(v291, &__p);
              v254 = &v341;
              if (v251 < 0) {
                v254 = (std::exception *)v252;
              }
              if (SHIBYTE(__p.__end_) >= 0) {
                std::__split_buffer<std::wstring>::pointer v255 = (std::__split_buffer<std::wstring>::pointer)&__p;
              }
              else {
                std::__split_buffer<std::wstring>::pointer v255 = __p.__first_;
              }
              tknPrintf("Error: %sParameter Original value is out of range, was '%s', expected an int in the range [0,%llu].\n", v253, v254, v255, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145[164] - v145[163]) >> 3));
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              if (v342.i8[15] < 0) {
                operator delete(v341.__vftable);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              TException::TException(&v341, (long long *)&__p);
              v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
              if (v343 >= 0) {
                v256 = &v342;
              }
              else {
                v256 = (int64x2_t *)v342.i64[0];
              }
              conditionalAssert(v256->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1104);
              TException::~TException(&v341);
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              v257 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&v341, "");
              TException::TException(v257, (long long *)&v341);
              void *v257 = &unk_1F0A340F0;
            }
            unint64_t v117 = (unsigned int *)(v155 + 24 * v154);
            if (*((char *)v117 + 23) < 0) {
              unint64_t v117 = *(unsigned int **)v117;
            }
          }
          if (v288)
          {
            {
              operator new();
            }
            unsigned int v156 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v288, (BOOL *)&v298);
            uint64_t v157 = v145[163];
            if (0xAAAAAAAAAAAAAAABLL * ((v145[164] - v157) >> 3) < v156)
            {
              loggableFileObject(v284);
              int v258 = v342.i8[15];
              v259 = v341.__vftable;
              loggableUnicode(v288, &__p);
              uint64_t v261 = &v341;
              if (v258 < 0) {
                uint64_t v261 = (std::exception *)v259;
              }
              if (SHIBYTE(__p.__end_) >= 0) {
                std::__split_buffer<std::wstring>::pointer v262 = (std::__split_buffer<std::wstring>::pointer)&__p;
              }
              else {
                std::__split_buffer<std::wstring>::pointer v262 = __p.__first_;
              }
              tknPrintf("Error: %sParameter Format value is out of range, was '%s', expected an int in the range [0,%llu].\n", v260, v261, v262, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145[164] - v145[163]) >> 3));
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              if (v342.i8[15] < 0) {
                operator delete(v341.__vftable);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              TException::TException(&v341, (long long *)&__p);
              v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
              if (v343 >= 0) {
                uint64_t v263 = &v342;
              }
              else {
                uint64_t v263 = (int64x2_t *)v342.i64[0];
              }
              conditionalAssert(v263->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1115);
              TException::~TException(&v341);
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              unint64_t v264 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&v341, "");
              TException::TException(v264, (long long *)&v341);
              *unint64_t v264 = &unk_1F0A340F0;
            }
            uint64_t v116 = (unsigned int *)(v157 + 24 * v156);
            if (*((char *)v116 + 23) < 0) {
              uint64_t v116 = *(unsigned int **)v116;
            }
          }
          if (v287)
          {
            {
              operator new();
            }
            unsigned int v158 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v287, (BOOL *)&v298);
            uint64_t v159 = v145[163];
            if (0xAAAAAAAAAAAAAAABLL * ((v145[164] - v159) >> 3) < v158)
            {
              loggableFileObject(v284);
              int v265 = v342.i8[15];
              int v266 = v341.__vftable;
              loggableUnicode(v287, &__p);
              uint64_t v268 = &v341;
              if (v265 < 0) {
                uint64_t v268 = (std::exception *)v266;
              }
              if (SHIBYTE(__p.__end_) >= 0) {
                std::__split_buffer<std::wstring>::pointer v269 = (std::__split_buffer<std::wstring>::pointer)&__p;
              }
              else {
                std::__split_buffer<std::wstring>::pointer v269 = __p.__first_;
              }
              tknPrintf("Error: %sParameter SpellOut value is out of range, was '%s', expected an int in the range [0,%llu].\n", v267, v268, v269, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145[164] - v145[163]) >> 3));
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              if (v342.i8[15] < 0) {
                operator delete(v341.__vftable);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              TException::TException(&v341, (long long *)&__p);
              v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
              if (v343 >= 0) {
                int v270 = &v342;
              }
              else {
                int v270 = (int64x2_t *)v342.i64[0];
              }
              conditionalAssert(v270->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1126);
              TException::~TException(&v341);
              if (SHIBYTE(__p.__end_) < 0) {
                operator delete(__p.__first_);
              }
              long long v271 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&v341, "");
              TException::TException(v271, (long long *)&v341);
              *long long v271 = &unk_1F0A340F0;
            }
            unint64_t v115 = (unsigned int *)(v159 + 24 * v158);
            if (*((char *)v115 + 23) < 0) {
              unint64_t v115 = *(unsigned int **)v115;
            }
          }
        }
      }
LABEL_387:
      if (*(char *)(v142 + 111) < 0) {
        uint64_t v164 = *(void *)(v142 + 96);
      }
      else {
        uint64_t v164 = *(unsigned __int8 *)(v142 + 111);
      }
      uint64_t v165 = v286;
      uint64_t v166 = v290;
      if (!v164) {
        goto LABEL_399;
      }
      uint64_t v167 = v117;
      loggableFileObject(v284);
      int v168 = v342.i8[15];
      uint64_t v169 = v341.__vftable;
      loggableUnicode((unsigned int *)v297, &__p);
      v171 = &v341;
      if (v168 < 0) {
        v171 = (std::exception *)v169;
      }
      if (SHIBYTE(__p.__end_) >= 0) {
        std::__split_buffer<std::wstring>::pointer v172 = (std::__split_buffer<std::wstring>::pointer)&__p;
      }
      else {
        std::__split_buffer<std::wstring>::pointer v172 = __p.__first_;
      }
      tknPrintf("Warning: %sParameter '%s' is deprecated\n", v170, v171, v172);
      unint64_t v117 = v167;
      uint64_t v165 = v286;
      uint64_t v166 = v290;
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      if (v342.i8[15] < 0)
      {
        operator delete(v341.__vftable);
        if (!v290)
        {
LABEL_401:
          *(void *)(v142 + 112) |= v289;
          if (v165) {
            *(void *)(v142 + 144) = v165;
          }
          if (*(void *)(a1 + 72) - *(void *)(a1 + 64) >= 0x21uLL)
          {
            uint64_t v173 = 0;
            unint64_t v174 = 1;
            do
            {
              if (*((void *)v296[0] + v174)
                && (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v142 + 40))(v142, v174))
              {
                v175 = &v341;
                loggableFileObject(v284);
                if (v342.i8[15] < 0) {
                  v175 = v341.__vftable;
                }
                uint64_t v176 = *(void *)(a1 + 64) + v173;
                uint64_t v177 = (unsigned int *)(v176 + 40);
                if (*(char *)(v176 + 63) < 0) {
                  uint64_t v177 = *(unsigned int **)v177;
                }
                loggableUnicode(v177, &__p);
                if (SHIBYTE(__p.__end_) >= 0) {
                  std::__split_buffer<std::wstring>::pointer v179 = (std::__split_buffer<std::wstring>::pointer)&__p;
                }
                else {
                  std::__split_buffer<std::wstring>::pointer v179 = __p.__first_;
                }
                tknPrintf("Error: %sIncorrect default setting for '%s' configuration\n", v178, v175, v179);
                if (SHIBYTE(__p.__end_) < 0) {
                  operator delete(__p.__first_);
                }
                if (v342.i8[15] < 0) {
                  operator delete(v341.__vftable);
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, "");
                TException::TException(&v341, (long long *)&__p);
                v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
                if (v343 >= 0) {
                  unint64_t v180 = &v342;
                }
                else {
                  unint64_t v180 = (int64x2_t *)v342.i64[0];
                }
                conditionalAssert(v180->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1148);
                TException::~TException(&v341);
                if (SHIBYTE(__p.__end_) < 0) {
                  operator delete(__p.__first_);
                }
                v181 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&v341, "");
                TException::TException(v181, (long long *)&v341);
                void *v181 = &unk_1F0A340F0;
              }
              if (*((void *)v295[0] + v174)
                && (*(unsigned int (**)(uint64_t, unint64_t))(*(void *)v142 + 32))(v142, v174))
              {
                uint64_t v182 = &v341;
                loggableFileObject(v284);
                if (v342.i8[15] < 0) {
                  uint64_t v182 = v341.__vftable;
                }
                uint64_t v183 = *(void *)(a1 + 64) + v173;
                uint64_t v184 = (unsigned int *)(v183 + 40);
                if (*(char *)(v183 + 63) < 0) {
                  uint64_t v184 = *(unsigned int **)v184;
                }
                loggableUnicode(v184, &__p);
                if (SHIBYTE(__p.__end_) >= 0) {
                  std::__split_buffer<std::wstring>::pointer v186 = (std::__split_buffer<std::wstring>::pointer)&__p;
                }
                else {
                  std::__split_buffer<std::wstring>::pointer v186 = __p.__first_;
                }
                tknPrintf("Error: %sIncorrect value setting for '%s' configuration\n", v185, v182, v186);
                if (SHIBYTE(__p.__end_) < 0) {
                  operator delete(__p.__first_);
                }
                if (v342.i8[15] < 0) {
                  operator delete(v341.__vftable);
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, "");
                TException::TException(&v341, (long long *)&__p);
                v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
                if (v343 >= 0) {
                  uint64_t v187 = &v342;
                }
                else {
                  uint64_t v187 = (int64x2_t *)v342.i64[0];
                }
                conditionalAssert(v187->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1154);
                TException::~TException(&v341);
                if (SHIBYTE(__p.__end_) < 0) {
                  operator delete(__p.__first_);
                }
                unint64_t v188 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&v341, "");
                TException::TException(v188, (long long *)&v341);
                *unint64_t v188 = &unk_1F0A340F0;
              }
              ++v174;
              v173 += 32;
            }
            while (v174 < (uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 5);
          }
          if (v117
            && (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v142 + 40))(v142, 1, v117))
          {
            loggableFileObject(v284);
            if (v342.i8[15] >= 0) {
              v194 = &v341;
            }
            else {
              v194 = v341.__vftable;
            }
            tknPrintf("Error: %sIncorrect setting of Original attribute\n", v193, v194);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              v195 = &v342;
            }
            else {
              v195 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v195->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1162);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            unint64_t v196 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v196, (long long *)&v341);
            *unint64_t v196 = &unk_1F0A340F0;
          }
          if (v116
            && (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v142 + 40))(v142, Config, v116))
          {
            loggableFileObject(v284);
            if (v342.i8[15] >= 0) {
              unint64_t v198 = &v341;
            }
            else {
              unint64_t v198 = v341.__vftable;
            }
            tknPrintf("Error: %sIncorrect setting of Format attribute\n", v197, v198);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              uint64_t v199 = &v342;
            }
            else {
              uint64_t v199 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v199->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1168);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            unint64_t v200 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v200, (long long *)&v341);
            *unint64_t v200 = &unk_1F0A340F0;
          }
          if (v115
            && (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v142 + 40))(v142, v282, v115))
          {
            loggableFileObject(v284);
            if (v342.i8[15] >= 0) {
              int v202 = &v341;
            }
            else {
              int v202 = v341.__vftable;
            }
            tknPrintf("Error: %sIncorrect setting of SpellOut attribute\n", v201, v202);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              v203 = &v342;
            }
            else {
              v203 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v203->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1174);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            v204 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v204, (long long *)&v341);
            void *v204 = &unk_1F0A340F0;
          }
          if (!v114)
          {
            TParamManager::add((TParamManager *)a1, (TParam *)v142);
            goto LABEL_425;
          }
          if (*(char *)(v142 + 111) < 0)
          {
            if (!*(void *)(v142 + 96)) {
              goto LABEL_425;
            }
          }
          else if (!*(unsigned char *)(v142 + 111))
          {
            goto LABEL_425;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v142);
          goto LABEL_425;
        }
      }
      else
      {
LABEL_399:
        if (!v166) {
          goto LABEL_401;
        }
      }
      MEMORY[0x1B3EA7C30](v142 + 40, v166);
      goto LABEL_401;
    }
    if ((v277 & 1) == 0)
    {
      loggableFileObject(v284);
      int v128 = v342.i8[15];
      long long v129 = v341.__vftable;
      loggableUnicode((unsigned int *)v297, &__p);
      long long v131 = &v341;
      if (v128 < 0) {
        long long v131 = (std::exception *)v129;
      }
      if (SHIBYTE(__p.__end_) >= 0) {
        std::__split_buffer<std::wstring>::pointer v132 = (std::__split_buffer<std::wstring>::pointer)&__p;
      }
      else {
        std::__split_buffer<std::wstring>::pointer v132 = __p.__first_;
      }
      tknPrintf("Error: %sParameter '%s' does not exist\n", v130, v131, v132);
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      if (v342.i8[15] < 0) {
        operator delete(v341.__vftable);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(&v341, (long long *)&__p);
      v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
      if (v343 >= 0) {
        long long v133 = &v342;
      }
      else {
        long long v133 = (int64x2_t *)v342.i64[0];
      }
      conditionalAssert(v133->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 955);
      TException::~TException(&v341);
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      long long v134 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v341, "");
      TException::TException(v134, (long long *)&v341);
      void *v134 = &unk_1F0A340F0;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 8))
    {
      if (a1 + 48 == v113)
      {
        if (*(void *)(a1 + 112) > 4uLL)
        {
          if (!*((void *)v296[0] + 1))
          {
            loggableFileObject(v284);
            if (v342.i8[15] >= 0) {
              uint64_t v228 = &v341;
            }
            else {
              uint64_t v228 = v341.__vftable;
            }
            tknPrintf("Error: %s'Root' default setting is mandatory\n", v227, v228);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              unint64_t v229 = &v342;
            }
            else {
              unint64_t v229 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v229->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1009);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            uint64_t v230 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v230, (long long *)&v341);
            *uint64_t v230 = &unk_1F0A340F0;
          }
        }
        else if (!v291)
        {
          loggableFileObject(v284);
          if (v342.i8[15] >= 0) {
            long long v125 = &v341;
          }
          else {
            long long v125 = v341.__vftable;
          }
          tknPrintf("Error: %s'Original' attribute is mandatory\n", v124, v125);
          if (v342.i8[15] < 0) {
            operator delete(v341.__vftable);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v341, (long long *)&__p);
          v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
          if (v343 >= 0) {
            long long v126 = &v342;
          }
          else {
            long long v126 = (int64x2_t *)v342.i64[0];
          }
          conditionalAssert(v126->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1003);
          TException::~TException(&v341);
          if (SHIBYTE(__p.__end_) < 0) {
            operator delete(__p.__first_);
          }
          int v127 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v341, "");
          TException::TException(v127, (long long *)&v341);
          *int v127 = &unk_1F0A340F0;
        }
        switch(a3)
        {
          case 0:
            operator new();
          case 1:
            if (v279) {
              operator new();
            }
            loggableFileObject(v284);
            if (v342.i8[15] >= 0) {
              unint64_t v244 = &v341;
            }
            else {
              unint64_t v244 = v341.__vftable;
            }
            tknPrintf("Error: %s'Allowables' attribute is mandatory\n", v243, v244);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              v245 = &v342;
            }
            else {
              v245 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v245->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1039);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            v246 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v246, (long long *)&v341);
            void *v246 = &unk_1F0A340F0;
          case 2:
            if (v276 && v281) {
              operator new();
            }
            loggableFileObject(v284);
            if (v342.i8[15] >= 0) {
              unint64_t v248 = &v341;
            }
            else {
              unint64_t v248 = v341.__vftable;
            }
            tknPrintf("Error: %s'Min' and 'Max' attributes are mandatory\n", v247, v248);
            if (v342.i8[15] < 0) {
              operator delete(v341.__vftable);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v341, (long long *)&__p);
            v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
            if (v343 >= 0) {
              uint64_t v249 = &v342;
            }
            else {
              uint64_t v249 = (int64x2_t *)v342.i64[0];
            }
            conditionalAssert(v249->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1025);
            TException::~TException(&v341);
            if (SHIBYTE(__p.__end_) < 0) {
              operator delete(__p.__first_);
            }
            unint64_t v250 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v341, "");
            TException::TException(v250, (long long *)&v341);
            *unint64_t v250 = &unk_1F0A340F0;
          case 3:
            operator new();
          case 4:
            operator new();
          default:
            uint64_t v142 = 0;
            v289 |= 8uLL;
            if (a3) {
              goto LABEL_324;
            }
            goto LABEL_312;
        }
      }
      loggableFileObject(v284);
      int v205 = v342.i8[15];
      v206 = v341.__vftable;
      loggableUnicode((unsigned int *)v297, &__p);
      v208 = &v341;
      if (v205 < 0) {
        v208 = (std::exception *)v206;
      }
      if (SHIBYTE(__p.__end_) >= 0) {
        std::__split_buffer<std::wstring>::pointer v209 = (std::__split_buffer<std::wstring>::pointer)&__p;
      }
      else {
        std::__split_buffer<std::wstring>::pointer v209 = __p.__first_;
      }
      tknPrintf("Error: %sParameter '%s' already exists\n", v207, v208, v209);
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      if (v342.i8[15] < 0) {
        operator delete(v341.__vftable);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(&v341, (long long *)&__p);
      v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
      if (v343 >= 0) {
        v210 = &v342;
      }
      else {
        v210 = (int64x2_t *)v342.i64[0];
      }
      conditionalAssert(v210->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 995);
      TException::~TException(&v341);
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      uint64_t v211 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v341, "");
      TException::TException(v211, (long long *)&v341);
      *uint64_t v211 = &unk_1F0A340F0;
    }
    if ((v277 & 1) == 0)
    {
      loggableFileObject(v284);
      if (v342.i8[15] >= 0) {
        unint64_t v136 = &v341;
      }
      else {
        unint64_t v136 = v341.__vftable;
      }
      tknPrintf("Error: %sThis param manager does not support param creation\n", v135, v136);
      if (v342.i8[15] < 0) {
        operator delete(v341.__vftable);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(&v341, (long long *)&__p);
      v341.__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
      if (v343 >= 0) {
        uint64_t v137 = &v342;
      }
      else {
        uint64_t v137 = (int64x2_t *)v342.i64[0];
      }
      conditionalAssert(v137->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 988);
      TException::~TException(&v341);
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      unint64_t v138 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v341, "");
      TException::TException(v138, (long long *)&v341);
      *unint64_t v138 = &unk_1F0A340F0;
    }
  }
LABEL_425:
  v341.__vftable = (std::exception_vtbl *)&v292;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
  v341.__vftable = (std::exception_vtbl *)&v293;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
  v341.__vftable = (std::exception_vtbl *)&v294;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v341);
  if (v295[0])
  {
    v295[1] = v295[0];
    operator delete(v295[0]);
  }
  if (v296[0])
  {
    v296[1] = v296[0];
    operator delete(v296[0]);
  }
}

void sub_1B23A81E4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__pa,uint64_t a44,int a45,__int16 a46,char a47,char a48,std::__split_buffer<std::wstring> *a49,uint64_t a50)
{
  MEMORY[0x1B3EA8670](v51, 0x1070C40ADD13FEBLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if ((a27 & 0x100000000) == 0)
    {
      if (v50) {
        (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
      }
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1B23A886CLL);
}

void sub_1B23A884C()
{
}

void sub_1B23A8858(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B23A885CLL);
  }
  __clang_call_terminate(a1);
}

void sub_1B23A8868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char **a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t *a58)
{
  a58 = (uint64_t *)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  a33 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a36 = &a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void TParamManager::init(TParamManager *this, const TFileObject *a2, char a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = "O";
  long long v17 = xmmword_1B257E4D0;
  uint64_t v18 = -1;
  uint64_t v19 = "O";
  long long v20 = xmmword_1B257E4D0;
  uint64_t v21 = -1;
  char v22 = "O";
  long long v23 = xmmword_1B257E4D0;
  uint64_t v24 = -1;
  uint64_t v25 = "O";
  long long v26 = xmmword_1B257E4D0;
  uint64_t v27 = 3;
  char v28 = "O";
  long long v29 = xmmword_1B257E4D0;
  uint64_t v30 = -1;
  int v31 = "C";
  long long v32 = xmmword_1B257E4D0;
  uint64_t v33 = -1;
  unint64_t v34 = "C";
  long long v35 = xmmword_1B257E4D0;
  uint64_t v36 = -1;
  int v37 = "C";
  long long v38 = xmmword_1B257E4D0;
  uint64_t v39 = -1;
  uint64_t v40 = "C";
  uint64_t v41 = 3;
  long long v42 = xmmword_1B25ADB70;
  uint64_t v43 = "C";
  uint64_t v44 = 3;
  long long v45 = xmmword_1B255E5F0;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v16, 0xAuLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(v14, &__p);
    v14[0].__vftable = (std::exception_vtbl *)&unk_1F0A340F0;
    if (v15 >= 0) {
      uint64_t v10 = (std::exception_vtbl *)&v14[1];
    }
    else {
      uint64_t v10 = v14[1].__vftable;
    }
    conditionalAssert((const char *)v10, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1218);
    TException::~TException(v14);
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)__p);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    TException::TException(exception, (long long *)v14);
    void *exception = &unk_1F0A340F0;
  }
  *((void *)&__p + 1) = 0;
  uint64_t v13 = 0;
  *(void *)&long long __p = (char *)&__p + 8;
  uint64_t v6 = *((void *)a2 + 3);
  if (!v6)
  {
    uint64_t v9 = 0;
    goto LABEL_31;
  }
  do
  {
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      int v8 = 0;
LABEL_15:
      int v7 = 1;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      int v8 = 0;
      int v7 = 0;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      int v7 = 1;
LABEL_19:
      int v8 = 4;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      int v7 = 0;
      goto LABEL_19;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      int v7 = 1;
LABEL_22:
      int v8 = 2;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      int v7 = 0;
      goto LABEL_22;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      int v8 = 1;
      goto LABEL_15;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      int v7 = 0;
      int v8 = 1;
    }
    else
    {
      if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
      {
        int v7 = 1;
      }
      else
      {
        if (wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C")) {
          goto LABEL_24;
        }
        int v7 = 0;
      }
      int v8 = 3;
    }
LABEL_23:
    TParamManager::initParam((uint64_t)this, v6, v8, v7, a3, (uint64_t **)&__p);
LABEL_24:
    uint64_t v6 = *(void *)(v6 + 16);
  }
  while (v6);
  uint64_t v9 = (void *)*((void *)&__p + 1);
LABEL_31:
  std::__tree<int>::destroy((uint64_t)&__p, v9);
}

void sub_1B23A8DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::__tree<int>::destroy((uint64_t)v27, v27[1]);
  _Unwind_Resume(a1);
}

void TParamManager::initialize(TParamManager *this, TInputStream *a2, char a3)
{
  if (*((unsigned char *)a2 + 8))
  {
    if (TInputStream::verifyHeader((uint64_t)a2, "Parameter", (uint64_t)pParameterVersion, 7))
    {
      std::string::basic_string[abi:ne180100]<0>(&__s, "");
      TException::TException(&v36, (long long *)&__s);
      v36.__vftable = (std::exception_vtbl *)&unk_1F0A33B90;
      if (v38[7] >= 0) {
        uint64_t v24 = (const char *)&v37;
      }
      else {
        uint64_t v24 = (const char *)v37;
      }
      conditionalAssert(v24, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1282);
      TException::~TException(&v36);
      if (SHIBYTE(v33) < 0) {
        operator delete(__s);
      }
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v36, "");
      TException::TException(exception, (long long *)&v36);
      void *exception = &unk_1F0A33B90;
    }
    *((void *)this + 14) = *((void *)a2 + 12);
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)v40, a2);
    uint64_t v6 = (const TFileObject *)v40[0];
    if (*((void *)this + 14) >= 5uLL)
    {
      long long v26 = (TFileObject *)v40[0];
      v36.__vftable = (std::exception_vtbl *)v38;
      long long v37 = xmmword_1B25607E0;
      char v39 = 1;
      TInputStream::getStringParameter((uint64_t)a2, "ConfigurationNames", (uint64_t)&v36, &dword_1B25ADB94);
      if (*((void *)&v37 + 1))
      {
        __s = (__int32 *)v34;
        long long v33 = xmmword_1B25607E0;
        char v35 = 1;
        if (*((void *)&v37 + 1) >= (unint64_t)v37)
        {
          if (v39)
          {
            LODWORD(__p[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v36, *((unint64_t *)&v37 + 1), (int *)__p, 1uLL);
            NextToken = (int *)v36.__vftable;
            --*((void *)&v37 + 1);
          }
          else
          {
            NextToken = (int *)v36.__vftable;
            if ((void)v37) {
              *((_DWORD *)v36.__vftable + v37 - 1) = 0;
            }
          }
        }
        else
        {
          NextToken = (int *)v36.__vftable;
          *((_DWORD *)&v36.~exception + *((void *)&v37 + 1)) = 0;
        }
        if (*NextToken)
        {
          char v8 = 0;
          while (1)
          {
            NextToken = getNextToken(NextToken, (uint64_t)&__s, (__int32 *)",");
            if (*((void *)&v33 + 1) >= (unint64_t)v33)
            {
              if (v35)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)__p, 1uLL);
                uint64_t v9 = __s;
                --*((void *)&v33 + 1);
              }
              else
              {
                uint64_t v9 = __s;
                if ((void)v33) {
                  __s[(void)v33 - 1] = 0;
                }
              }
            }
            else
            {
              uint64_t v9 = __s;
              __s[*((void *)&v33 + 1)] = 0;
            }
            uint64_t v10 = wcschr(v9, 58);
            uint64_t v11 = v10;
            if (v10)
            {
              uint64_t Config = TParamManager::getConfig((uint64_t)this, v10 + 1);
              if (Config == -1)
              {
                if (*((void *)&v33 + 1) >= (unint64_t)v33)
                {
                  if (v35)
                  {
                    LODWORD(v27[0]) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)v27, 1uLL);
                    uint64_t v13 = __s;
                    --*((void *)&v33 + 1);
                  }
                  else
                  {
                    uint64_t v13 = __s;
                    if ((void)v33) {
                      __s[(void)v33 - 1] = 0;
                    }
                  }
                }
                else
                {
                  uint64_t v13 = __s;
                  __s[*((void *)&v33 + 1)] = 0;
                }
                loggableUnicode((unsigned int *)v13, __p);
                if (v30 >= 0) {
                  uint64_t v16 = __p;
                }
                else {
                  uint64_t v16 = (void **)__p[0];
                }
                tknPrintf("Error: Parent configuration not defined: '%s'\n", v15, v16);
                if (v30 < 0) {
                  operator delete(__p[0]);
                }
                char v8 = 1;
              }
              unint64_t v14 = *((void *)&v33 + 1);
              if (*((void *)&v33 + 1) >= (unint64_t)v33)
              {
                if (v35)
                {
                  LODWORD(__p[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)__p, 1uLL);
                  unint64_t v14 = --*((void *)&v33 + 1);
                }
                else if ((void)v33)
                {
                  __s[(void)v33 - 1] = 0;
                }
              }
              else
              {
                __s[*((void *)&v33 + 1)] = 0;
              }
              *uint64_t v11 = 0;
            }
            else
            {
              unint64_t v14 = *((void *)&v33 + 1);
              uint64_t Config = 1;
            }
            if (v14 >= (unint64_t)v33)
            {
              if (v35)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, v14, (int *)__p, 1uLL);
                long long v17 = __s;
                --*((void *)&v33 + 1);
              }
              else
              {
                long long v17 = __s;
                if ((void)v33) {
                  __s[(void)v33 - 1] = 0;
                }
              }
            }
            else
            {
              long long v17 = __s;
              __s[v14] = 0;
            }
            if (TParamManager::getConfig((uint64_t)this, v17) == -1)
            {
              if (v8) {
                goto LABEL_62;
              }
              if (*((void *)&v33 + 1) >= (unint64_t)v33)
              {
                if (v35)
                {
                  LODWORD(__p[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)__p, 1uLL);
                  uint64_t v19 = __s;
                  --*((void *)&v33 + 1);
                }
                else
                {
                  uint64_t v19 = __s;
                  if ((void)v33) {
                    __s[(void)v33 - 1] = 0;
                  }
                }
              }
              else
              {
                uint64_t v19 = __s;
                __s[*((void *)&v33 + 1)] = 0;
              }
              TParamManager::newConfig((uint64_t)this, v19, (std::exception_vtbl *)Config);
              char v8 = 0;
              if (!*NextToken) {
                break;
              }
            }
            else
            {
              if (*((void *)&v33 + 1) >= (unint64_t)v33)
              {
                if (v35)
                {
                  LODWORD(v27[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)v27, 1uLL);
                  uint64_t v18 = __s;
                  --*((void *)&v33 + 1);
                }
                else
                {
                  uint64_t v18 = __s;
                  if ((void)v33) {
                    __s[(void)v33 - 1] = 0;
                  }
                }
              }
              else
              {
                uint64_t v18 = __s;
                __s[*((void *)&v33 + 1)] = 0;
              }
              loggableUnicode((unsigned int *)v18, __p);
              if (v30 >= 0) {
                uint64_t v21 = __p;
              }
              else {
                uint64_t v21 = (void **)__p[0];
              }
              tknPrintf("Error: Duplicate configuration name: '%s'\n", v20, v21);
              if (v30 < 0) {
                operator delete(__p[0]);
              }
LABEL_62:
              char v8 = 1;
              if (!*NextToken)
              {
                std::string::basic_string[abi:ne180100]<0>(v27, "");
                TException::TException(__p, (long long *)v27);
                __p[0] = &unk_1F0A340F0;
                if (v31 >= 0) {
                  char v22 = (const char *)&__p[1];
                }
                else {
                  char v22 = (const char *)__p[1];
                }
                conditionalAssert(v22, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1327);
                TException::~TException((std::exception *)__p);
                if (v28 < 0) {
                  operator delete(v27[0]);
                }
                long long v23 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                TException::TException(v23, (long long *)__p);
                void *v23 = &unk_1F0A340F0;
              }
            }
          }
        }
        if (v35 && __s != (__int32 *)v34 && __s) {
          MEMORY[0x1B3EA8630]();
        }
      }
      if (v39 && v36.__vftable != (std::exception_vtbl *)v38 && v36.__vftable) {
        MEMORY[0x1B3EA8630]();
      }
      uint64_t v6 = v26;
    }
    TParamManager::init(this, v6, a3);
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v40);
  }
}

void sub_1B23A957C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, std::exception a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a11 && a24 != 0) {
      MEMORY[0x1B3EA8630]();
    }
  }
  if (LOBYTE(STACK[0x8B0]))
  {
    unint64_t v27 = STACK[0x498];
    if (STACK[0x498] != a12)
    {
      if (v27) {
        MEMORY[0x1B3EA8630](v27, 0x1000C8052888210);
      }
    }
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)(v24 - 168));
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  if (*((unsigned char *)a1 + TParam::getValidConfig(a1, a2) + 152)) {
    uint64_t v4 = "t";
  }
  else {
    uint64_t v4 = "f";
  }
  return TBuffer<wchar_t>::assign(a3, (int *)v4);
}

uint64_t TBoolParam::getValueOriginal(TBoolParam *a1, uint64_t a2, uint64_t a3)
{
  if (TBoolParam::getOriginal(a1, a2)) {
    uint64_t v4 = "t";
  }
  else {
    uint64_t v4 = "f";
  }
  return TBuffer<wchar_t>::assign(a3, (int *)v4);
}

void TFloatParam::~TFloatParam(void **this)
{
  TParam::~TParam(this);
  JUMPOUT(0x1B3EA8670);
}

void TIntParam::~TIntParam(void **this)
{
  TParam::~TParam(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,64ul>,true,true>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

void TLogicException::~TLogicException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'std::wostringstream::~wostringstream(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (v1[95] < 0) {
    operator delete(*((void **)v1 + 9));
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  JUMPOUT(0x1B3EA8530);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  if (v1[95] < 0) {
    operator delete(*((void **)v1 + 9));
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x1B3EA8530](v1 + 112);
  JUMPOUT(0x1B3EA8670);
}

void std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v1 = a1 + 112;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x1B3EA8530](v1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t TBoolParam::TBoolParam(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = TParam::TParam(a1, 0, a2);
  *(void *)uint64_t v3 = &unk_1F0A32E48;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  TBoolParam::setOriginal(v3, 0, 0);
  return a1;
}

void sub_1B23A9CB0(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (SHIBYTE(v1[v3 + 30]) < 0) {
      operator delete(v1[v3 + 28]);
    }
    v3 -= 3;
    if (v3 == -6)
    {
      TParam::~TParam(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t TFloatParam::TFloatParam(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)TParam::TParam(a1, 3, a2);
  *uint64_t v3 = &unk_1F0A330C0;
  TFloatParam::setOriginal((uint64_t)v3, 0, 0.0);
  return a1;
}

void sub_1B23A9D40(_Unwind_Exception *a1)
{
  TParam::~TParam(v1);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::getOriginal(TBoolParam *this, uint64_t a2)
{
  for (unint64_t i = *((void *)this + 14);
        ((i >> (a2 + 9)) & 1) == 0;
  return *((unsigned __int8 *)this + a2 + 152);
}

std::wstringbuf::string_type *__cdecl std::wstringbuf::str(std::wstringbuf::string_type *__return_ptr retstr, std::wstringbuf::string_type *this)
{
  std::wstring::value_type v2 = this[4].__r_.__value_.__s.__data_[0];
  if ((v2 & 0x10) != 0)
  {
    std::string::size_type size = (int *)this[3].__r_.__value_.__r.__words[2];
    std::wstring::pointer data = this[2].__r_.__value_.__l.__data_;
    if (size < data)
    {
      this[3].__r_.__value_.__r.__words[2] = (std::wstring::size_type)data;
      std::string::size_type size = data;
    }
    int64_t v5 = (int *)this[1].__r_.__value_.__r.__words[2];
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = 0uLL;
      retstr->__r_.__value_.__r.__words[2] = 0;
      return this;
    }
    int64_t v5 = (int *)this->__r_.__value_.__r.__words[2];
    std::string::size_type size = (int *)this[1].__r_.__value_.__l.__size_;
  }
  return (std::wstringbuf::string_type *)std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(retstr, v5, size, size - v5);
}

void std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::vector<std::wstring> *this, std::wstring *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<std::wstring>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::wstring *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, v13, begin);
    int v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, (std::wstring *)a3, begin);
  uint64_t v15 = v14;
  std::vector<std::wstring>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1B23A9F44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B23A9F4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>(uint64_t a1, long long *a2, long long *a3, std::wstring *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  int v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::basic_string<char32_t>::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      int v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B23AA000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::wstring *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(std::wstring *__str, std::wstring *a2, std::wstring *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::wstring::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::wstring *)v4;
}

uint64_t std::vector<std::pair<unsigned long,std::wstring>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  std::exception v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<wchar_t const*>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B23AA230(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__count_unique<wchar_t const*>(uint64_t a1, const __int32 **a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((wcscmp(*a2, (const __int32 *)v2[4]) & 0x80000000) == 0)
      {
        if ((wcscmp((const __int32 *)v2[4], *a2) & 0x80000000) == 0) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(uint64_t **a1, const __int32 **a2, uint64_t *a3)
{
  uint64_t v5 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__find_equal<wchar_t const*>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    void v6[4] = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel(kaldi::quasar::TorchEncoderDecoder::AttentionModel *this)
{
  *(void *)this = &unk_1F0A50E08;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 8));
}

void sub_1B23AA3F0(_Unwind_Exception *a1)
{
  kaldi::nnet1::Nnet::~Nnet(v2);
  kaldi::nnet1::Nnet::~Nnet(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(kaldi::quasar::TorchEncoderDecoder::AttentionModel *this)
{
  *(void *)this = &unk_1F0A50E08;
  uint64_t v2 = (kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 1144);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 760));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 384));
  kaldi::nnet1::Nnet::~Nnet(v2);
}

{
  uint64_t vars8;

  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::SetHistoryState(int32x2_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = a1 + 143;
  if (*(int *)(a2 + 20) < 1)
  {
    kaldi::CuMatrix<float>::Resize(v5, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v5, a4, *(unsigned int *)(a2 + 16), 2, 0);
    unsigned __int32 v8 = a1[145].u32[0];
    int32x2_t v9 = a1[147];
    v13[1] = *(void *)&a1[144] + 4 * a1[146].i32[0] * a3;
    v13[0] = &unk_1F0A472D0;
    std::exception v13[2] = v8;
    void v13[3] = v9;
    unsigned int v10 = *(_DWORD *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 32);
    v12[1] = *(void *)(a2 + 8);
    v12[0] = &unk_1F0A472D0;
    uint64_t v12[2] = v10;
    void v12[3] = v11;
    kaldi::CuVectorBase<float>::CopyFromVec(v13, (uint64_t)v12);
  }
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::GetHistoryState(uint64_t a1, int32x2_t *a2, int a3)
{
  kaldi::CuMatrix<float>::Resize(a2, *(_DWORD *)(a1 + 1164) > 0, *(unsigned int *)(a1 + 1160), 0, 0);
  if (a2[2].i32[1] >= 1)
  {
    uint64_t v6 = operator new(4uLL);
    long long __p = v6;
    _DWORD *v6 = a3;
    unsigned __int32 v8 = v6 + 1;
    int32x2_t v9 = v6 + 1;
    kaldi::CuMatrixBase<float>::CopyRows((uint64_t)a2, a1 + 1144, &__p);
    if (__p)
    {
      unsigned __int32 v8 = __p;
      operator delete(__p);
    }
  }
}

void sub_1B23AA668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 1137))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading Whe_", 12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 8), a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Whe_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 8));
      unsigned __int32 v8 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 8));
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
    if (*(unsigned char *)(a1 + 1137)) {
      goto LABEL_8;
    }
  }
  if (*(unsigned char *)(a1 + 1138))
  {
LABEL_8:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading Whd_", 12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 384), a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Whd_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 384));
      int32x2_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 384));
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading Whc_", 12);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
      }
    }
    unsigned int v10 = (uint64_t **)(a1 + 760);
    kaldi::nnet1::Nnet::Read(v10, a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Whc_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)v10);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)v10);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
  }
}

void sub_1B23AA930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t *a4@<X3>, int32x2_t *a5@<X4>, std::vector<unsigned int> *a6@<X8>)
{
  uint64_t v12 = *(unsigned int *)(a3 + 20);
  long long v41 = 0u;
  long long v40 = 0u;
  int32x2_t v39 = (int32x2_t)&unk_1F0A51768;
  char v42 = 0;
  if (*(unsigned char *)(a1 + 1138))
  {
    memset(v37, 0, sizeof(v37));
    int32x2_t v36 = (int32x2_t)&unk_1F0A51768;
    char v38 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 384), a3, &v36, -1, 0);
    kaldi::CuMatrix<float>::Resize(&v39, *(unsigned int *)(a2 + 20), v12, 0, 0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v39, a2, CblasNoTrans, (uint64_t)&v36, CblasTrans, 1.0, 1.0);
LABEL_5:
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v36);
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 1137))
  {
    memset(v37, 0, sizeof(v37));
    int32x2_t v36 = (int32x2_t)&unk_1F0A51768;
    char v38 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, &v36, -1, 0);
    memset(v34, 0, sizeof(v34));
    int32x2_t v33 = (int32x2_t)&unk_1F0A51768;
    char v35 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 384), a3, &v33, -1, 0);
    kaldi::CuMatrix<float>::Resize(&v39, HIDWORD(v37[0]), v12, 0, 0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v39, (uint64_t)&v36, CblasNoTrans, (uint64_t)&v33, CblasTrans, 1.0, 1.0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v33);
    goto LABEL_5;
  }
  kaldi::CuMatrix<float>::Resize(&v39, *(unsigned int *)(a2 + 20), v12, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v39, a2, CblasNoTrans, a3, CblasTrans, 1.0, 1.0);
LABEL_6:
  kaldi::CuMatrix<float>::Transpose((uint64_t)&v39);
  std::vector<unsigned int>::size_type __sz = 0;
  __src = 0;
  uint64_t v32 = 0;
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&v39, (int *)&__sz);
  kaldi::CuMatrix<float>::Resize(a4, v12, *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuMatrix<float>::Resize(a5, v12, DWORD2(v40), 0, 0);
  if ((int)v12 >= 1)
  {
    int v13 = 0;
    do
    {
      memset(v34, 0, 24);
      int32x2_t v33 = (int32x2_t)&unk_1F0A517C0;
      kaldi::CuVector<float>::Resize((uint64_t)&v33, DWORD2(v40), 0);
      *(void *)&v37[0] = v40 + 4 * (int)v41 * v13;
      int32x2_t v36 = (int32x2_t)&unk_1F0A472D0;
      *((void *)&v37[0] + 1) = DWORD2(v40);
      *(void *)&v37[1] = *((void *)&v41 + 1);
      kaldi::CuVector<float>::operator=((uint64_t)&v33, (uint64_t)&v36);
      if (*(unsigned char *)(a1 + 1136))
      {
        kaldi::CuVectorBase<float>::ApplyExp((uint64_t)&v33);
        if (*(_DWORD *)(a1 + 1164) <= v13)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 1144), (v13 + 1), DWORD2(v34[0]), 2, 0);
          unsigned int v18 = *(_DWORD *)(a1 + 1160);
          uint64_t v19 = *(void *)(a1 + 1176);
          *(void *)&v37[0] = *(void *)(a1 + 1152) + 4 * *(_DWORD *)(a1 + 1168) * v13;
          int32x2_t v36 = (int32x2_t)&unk_1F0A472D0;
          *((void *)&v37[0] + 1) = v18;
          *(void *)&v37[1] = v19;
          kaldi::CuVectorBase<float>::CopyFromVec(&v36, (uint64_t)&v33);
        }
        else
        {
          kaldi::CuVector<float>::CuVector(&v36, (uint64_t)&v33);
          unsigned int v14 = *(_DWORD *)(a1 + 1160);
          uint64_t v15 = *(void *)(a1 + 1176);
          v29[1] = *(void *)(a1 + 1152) + 4 * *(_DWORD *)(a1 + 1168) * v13;
          v29[0] = &unk_1F0A472D0;
          void v29[2] = v14;
          v29[3] = v15;
          kaldi::CuVectorBase<float>::DivElements((uint64_t)&v33, (uint64_t)v29);
          unsigned int v16 = *(_DWORD *)(a1 + 1160);
          uint64_t v17 = *(void *)(a1 + 1176);
          v29[1] = *(void *)(a1 + 1152) + 4 * *(_DWORD *)(a1 + 1168) * v13;
          v29[0] = &unk_1F0A472D0;
          void v29[2] = v16;
          v29[3] = v17;
          kaldi::CuVectorBase<float>::AddVec((uint64_t)v29, (uint64_t)&v36, 1.0, 1.0);
          kaldi::CuVector<float>::~CuVector(&v36);
        }
        double v20 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v33);
        kaldi::CuVectorBase<float>::Scale((uint64_t)&v33, 1.0 / *(float *)&v20);
      }
      else
      {
        kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)&v33);
      }
      unsigned __int32 v21 = a5[2].u32[0];
      int32x2_t v22 = a5[4];
      *(void *)&v37[0] = *(void *)&a5[1] + 4 * a5[3].i32[0] * v13;
      int32x2_t v36 = (int32x2_t)&unk_1F0A472D0;
      *((void *)&v37[0] + 1) = v21;
      *(int32x2_t *)&v37[1] = v22;
      kaldi::CuVectorBase<float>::CopyFromVec(&v36, (uint64_t)&v33);
      kaldi::CuMatrix<float>::CuMatrix(&v36, a2, 111);
      kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)&v36, (uint64_t)&v33);
      unsigned __int32 v23 = a4[2].u32[0];
      int32x2_t v24 = a4[4];
      v29[1] = *(void *)&a4[1] + 4 * a4[3].i32[0] * v13;
      v29[0] = &unk_1F0A472D0;
      void v29[2] = v23;
      v29[3] = v24;
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v29, (uint64_t)&v36, 1.0, 111.0);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v36);
      kaldi::CuVector<float>::~CuVector(&v33);
      ++v13;
    }
    while (v12 != v13);
  }
  if (*(unsigned char *)(a1 + 1138))
  {
    memset(v37, 0, sizeof(v37));
    int32x2_t v36 = (int32x2_t)&unk_1F0A51768;
    char v38 = 0;
    kaldi::CuMatrix<float>::Resize(&v36, v12, (*(_DWORD *)(a3 + 16) + a4[2].i32[0]), 0, 0);
    DWORD2(v34[0]) = a4[2].i32[0];
    *(void *)((char *)v34 + 12) = *(void *)((char *)v37 + 12);
    DWORD1(v34[1]) = DWORD1(v37[1]);
    *((void *)&v34[1] + 1) = *((void *)&v37[1] + 1);
    int32x2_t v33 = (int32x2_t)&unk_1F0A472A0;
    *(void *)&v34[0] = *(void *)&v37[0];
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v33, (uint64_t)a4, 111);
    uint64_t v25 = a4[2].i32[0];
    LODWORD(v29[2]) = *(_DWORD *)(a3 + 16);
    *(void *)((char *)&v29[2] + 4) = *(void *)((char *)v37 + 12);
    HIDWORD(v29[3]) = DWORD1(v37[1]) - v25;
    v29[4] = *((void *)&v37[1] + 1);
    v29[0] = &unk_1F0A472A0;
    v29[1] = *(void *)&v37[0] + 4 * v25;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v29, a3, 111);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 760), (uint64_t)&v36, a4, -1, 0);
    kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)a4);
    v29[0] = &unk_1F0A472A0;
    memset(&v29[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v29);
    int32x2_t v33 = (int32x2_t)&unk_1F0A472A0;
    memset(v34, 0, sizeof(v34));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v36);
  }
  else if (*(unsigned char *)(a1 + 1137))
  {
    memset(v37, 0, sizeof(v37));
    int32x2_t v36 = (int32x2_t)&unk_1F0A51768;
    char v38 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 760), (uint64_t)a4, &v36, -1, 0);
    kaldi::CuMatrix<float>::operator=(a4, &v36);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v36);
  }
  a6->__begin_ = 0;
  a6->__end_ = 0;
  a6->__end_cap_.__value_ = 0;
  if (__sz)
  {
    std::vector<int>::resize(a6, (int)__sz);
    std::vector<unsigned int>::pointer begin = a6->__begin_;
    size_t v27 = 4 * (int)__sz;
  }
  else
  {
    size_t v27 = 0;
    std::vector<unsigned int>::pointer begin = 0;
  }
  memcpy(begin, __src, v27);
  if (__src) {
    free(__src);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v39);
}

void sub_1B23AB0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a26);
  kaldi::CuMatrix<float>::~CuMatrix(v26 - 152);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(kaldi::quasar::TorchEncoderDecoder *this)
{
  *(void *)this = &unk_1F0A50E28;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 8));
}

void sub_1B23AB538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, kaldi::quasar::TorchEncoderDecoder::AttentionModel *a14, uint64_t a15, kaldi::nnet1::Nnet *a16, kaldi::nnet1::Nnet *a17, uint64_t a18, kaldi::nnet1::Nnet *a19, kaldi::nnet1::Nnet *a20,kaldi::nnet1::Nnet *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  kaldi::CuMatrix<float>::~CuMatrix(v34);
  long long v37 = *v30;
  if (*v30)
  {
    *(void *)(v29 + 3992) = v37;
    operator delete(v37);
  }
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(v29, v35, v27, v33);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(v29 + 3664), 0);
  uint64_t v38 = *(void *)(v29 + 3656);
  *(void *)(v29 + 3656) = 0;
  if (v38) {
    std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100](v29 + 3656, v38);
  }
  int32x2_t v39 = *(std::__shared_weak_count **)(v29 + 3648);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v40 = *(void *)(v29 + 3632);
  *(void *)(v29 + 3632) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = *v28;
  *char v28 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v29 + 3600, *(void **)(v29 + 3608));
  if (*(char *)(v29 + 3599) < 0) {
    operator delete(*(void **)(v29 + 3576));
  }
  if (*(char *)(v29 + 3575) < 0) {
    operator delete(*(void **)(v29 + 3552));
  }
  kaldi::Vector<float>::Destroy(a15);
  kaldi::CuMatrix<float>::~CuMatrix(a9);
  long long __p = (void *)(v29 + 3408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  kaldi::CuMatrix<float>::~CuMatrix(v32);
  kaldi::CuMatrix<float>::~CuMatrix(v31);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(a12);
  kaldi::CuMatrix<float>::~CuMatrix(a13);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(a14);
  kaldi::nnet1::Nnet::~Nnet(a16);
  kaldi::nnet1::Nnet::~Nnet(a17);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a18, *(void **)(v29 + 1160));
  char v42 = *(std::__shared_weak_count **)(v29 + 1144);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  kaldi::nnet1::Nnet::~Nnet(a19);
  kaldi::nnet1::Nnet::~Nnet(a20);
  kaldi::nnet1::Nnet::~Nnet(a21);
  _Unwind_Resume(a1);
}

void sub_1B23AB704()
{
}

void sub_1B23AB70C()
{
}

void kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(kaldi::quasar::TorchEncoderDecoder *this)
{
  *(void *)this = &unk_1F0A50E28;
  if (*((unsigned char *)this + 3920) && (int)((*((void *)this + 96) - *((void *)this + 95)) >> 3) >= 1) {
    kaldi::nnet1::Nnet::ReleaseComponent((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760), 0);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 4008);
  uint64_t v2 = (void *)*((void *)this + 498);
  if (v2)
  {
    *((void *)this + 499) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 3975) < 0) {
    operator delete(*((void **)this + 494));
  }
  if (*((char *)this + 3951) < 0) {
    operator delete(*((void **)this + 491));
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 3672));
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 458, 0);
  uint64_t v3 = *((void *)this + 457);
  *((void *)this + 457) = 0;
  if (v3) {
    std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)this + 3656, v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 456);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 454);
  *((void *)this + 454) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 453);
  *((void *)this + 453) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 3600, *((void **)this + 451));
  if (*((char *)this + 3599) < 0) {
    operator delete(*((void **)this + 447));
  }
  if (*((char *)this + 3575) < 0) {
    operator delete(*((void **)this + 444));
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 3480);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3432);
  unsigned __int32 v8 = (void **)((char *)this + 3408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3360);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3312);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3120);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1928));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1552));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1176));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1152, *((void **)this + 145));
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 143);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 384));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 8));
}

{
  uint64_t vars8;

  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(kaldi::quasar::TorchEncoderDecoder *this, int a2)
{
  if (a2) {
    kaldi::nnet1::Nnet::ResetHistoryStateIfExists((uint64_t)this + 8);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 384, 0, 0, 0, 0);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*((void *)this + 142));
  *(void *)((char *)this + 3508) = 0;
  kaldi::nnet1::Nnet::GetHistoricalComponents(*((kaldi::nnet1::Nnet **)this + 142), &v8);
  uint64_t v3 = v9;
  if (v9 != v8)
  {
    uint64_t v4 = 0;
    uint64_t v3 = v8;
    do
    {
      uint64_t v5 = (*(uint64_t (**)(void *))(*v3[v4] + 72))(v3[v4]);
      uint64_t v6 = &unk_1F0A49B30;
      int v7 = *(_DWORD *)(v5 + 8);
      if (v7 != 1)
      {
        int v7 = 1;
        (*(void (**)(void *, void **))(*v8[v4] + 80))(v8[v4], &v6);
      }
      kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&v6);
      ++v4;
      uint64_t v3 = v8;
    }
    while (v4 != v9 - v8);
  }
  if (v3)
  {
    int32x2_t v9 = v3;
    operator delete(v3);
  }
}

void sub_1B23ABAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::GetHistoryState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (double *)(a1 + 4056);
  uint64_t v7 = a1 + 4112;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v37, v6, v7, &__p);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8 != *a2)
  {
    uint64_t v10 = v8 - 48;
    uint64_t v11 = (void *)(v8 - 48);
    uint64_t v12 = (void *)(v8 - 48);
    do
    {
      uint64_t v13 = *v12;
      v12 -= 6;
      (*(void (**)(void *))(v13 + 16))(v11);
      v10 -= 48;
      BOOL v14 = v11 == (void *)v9;
      uint64_t v11 = v12;
    }
    while (!v14);
  }
  a2[1] = v9;
  if (kaldi::nnet1::Nnet::HasHistory(*(kaldi::nnet1::Nnet **)(a1 + 1136)))
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v30);
    std::vector<kaldi::CuMatrix<float>>::resize(a2, (uint64_t)(v31 - (void)v30) >> 3);
    uint64_t v15 = (void **)v31;
    if ((void **)v31 != v30)
    {
      uint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v15 = v30;
      do
      {
        *((void *)&__p + 1) = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        *(void *)&long long __p = &unk_1F0A517C0;
        (*(void (**)(void *, long long *, uint64_t, void))(*v15[v17] + 48))(v15[v17], &__p, a3, 0);
        unsigned int v18 = (int32x2_t *)(*a2 + v16);
        if ((int)v35 < 1)
        {
          kaldi::CuMatrix<float>::Resize(v18, 0, 0, 0, 0);
        }
        else
        {
          kaldi::CuMatrix<float>::Resize(v18, 1, v35, 0, 0);
          kaldi::CuMatrixBase<float>::CopyRowsFromVec(*a2 + v16, (uint64_t)&__p);
        }
        kaldi::CuVector<float>::~CuVector(&__p);
        ++v17;
        uint64_t v15 = v30;
        v16 += 48;
      }
      while (v17 < (uint64_t)(v31 - (void)v30) >> 3);
    }
    if (v15)
    {
      *(void *)&long long v31 = v15;
      operator delete(v15);
    }
  }
  unsigned int v19 = *(_DWORD *)(a1 + 3328);
  unsigned int v20 = *(_DWORD *)(a1 + 3336);
  unsigned int v21 = *(_DWORD *)(a1 + 3340) - v20 * a3;
  uint64_t v22 = *(void *)(a1 + 3344);
  *(void *)&long long v31 = *(void *)(a1 + 3320) + 4 * (int)(v20 * a3);
  *((void *)&v31 + 1) = v19 | 0x100000000;
  *(void *)&long long v32 = __PAIR64__(v21, v20);
  *((void *)&v32 + 1) = v22;
  char v30 = (void **)&unk_1F0A472A0;
  kaldi::CuMatrix<float>::CuMatrix(&__p, &v30, 111);
  unint64_t v23 = a2[1];
  if (v23 >= a2[2])
  {
    uint64_t v24 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a2, (uint64_t)&__p);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(a2[1], &__p, 111);
    uint64_t v24 = v23 + 48;
    a2[1] = v23 + 48;
  }
  a2[1] = v24;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  char v30 = (void **)&unk_1F0A472A0;
  long long v31 = 0u;
  long long v32 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v30);
  kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, 1, 2, 0, 0, 0);
  **((void **)&__p + 1) = vcvt_f32_s32(*(int32x2_t *)(a1 + 3508));
  unint64_t v25 = a2[1];
  if (v25 >= a2[2])
  {
    uint64_t v26 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(a2, (uint64_t)&__p);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(a2[1], &__p, 111);
    uint64_t v26 = v25 + 48;
    a2[1] = v25 + 48;
  }
  a2[1] = v26;
  if (*(unsigned char *)(a1 + 3913))
  {
    long long v32 = 0u;
    long long v31 = 0u;
    char v30 = (void **)&unk_1F0A51768;
    char v33 = 0;
    kaldi::quasar::TorchEncoderDecoder::AttentionModel::GetHistoryState(a1 + 1928, (int32x2_t *)&v30, a3);
    unint64_t v27 = a2[1];
    if (v27 >= a2[2])
    {
      uint64_t v28 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(a2, (uint64_t)&v30);
    }
    else
    {
      kaldi::CuMatrix<float>::CuMatrix(a2[1], &v30, 111);
      uint64_t v28 = v27 + 48;
      a2[1] = v27 + 48;
    }
    a2[1] = v28;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v30);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v37, v29);
}

void sub_1B23ABE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  *(void *)(v24 + 8) = v25;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a15);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a24, v27);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::SetHistoryState(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (double *)(a1 + 4056);
  uint64_t v9 = a1 + 4120;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v39, v8, v9, &__p);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)__p);
  }
  if (!kaldi::nnet1::Nnet::HasHistory(*(kaldi::nnet1::Nnet **)(a1 + 1136)))
  {
    unint64_t v12 = 0;
    goto LABEL_17;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v30);
  uint64_t v10 = v31;
  if (v31 == v30)
  {
    unint64_t v12 = 0;
    if (!v31) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v10 = v30;
  do
  {
    uint64_t v13 = (*(uint64_t (**)(void *))(*v10[v12] + 72))(v10[v12]);
    long long v37 = &unk_1F0A49B30;
    int v38 = *(_DWORD *)(v13 + 8);
    if (v38 != a4)
    {
      int v38 = a4;
      (*(void (**)(void *, void **))(*v30[v12] + 80))(v30[v12], &v37);
    }
    uint64_t v14 = *a2 + v11;
    int v15 = *(_DWORD *)(v14 + 16);
    if (v15 < 1)
    {
      *((void *)&__p + 1) = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      *(void *)&long long __p = &unk_1F0A517C0;
      (*(void (**)(void *, long long *, uint64_t, void))(*v30[v12] + 64))(v30[v12], &__p, a3, 0);
      kaldi::CuVector<float>::~CuVector(&__p);
    }
    else
    {
      uint64_t v16 = v30[v12];
      uint64_t v17 = *(void *)(v14 + 8);
      uint64_t v18 = *(void *)(v14 + 32);
      *((void *)&__p + 1) = v17;
      *(void *)&long long __p = &unk_1F0A472D0;
      uint64_t v35 = v15;
      uint64_t v36 = v18;
      (*(void (**)(void *, long long *, uint64_t, void))(*v16 + 64))(v16, &__p, a3, 0);
    }
    kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&v37);
    ++v12;
    uint64_t v10 = v30;
    v11 += 48;
  }
  while (v12 < v31 - v30);
  if (v30)
  {
LABEL_16:
    long long v31 = v10;
    operator delete(v10);
  }
LABEL_17:
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), a4, *(unsigned int *)(*a2 + 48 * v12 + 16), 2, 0);
  unsigned int v19 = *(_DWORD *)(a1 + 3328);
  uint64_t v20 = *(void *)(a1 + 3344);
  *((void *)&__p + 1) = *(void *)(a1 + 3320) + 4 * *(_DWORD *)(a1 + 3336) * (int)a3;
  *(void *)&long long __p = &unk_1F0A472D0;
  uint64_t v35 = v19;
  uint64_t v36 = v20;
  uint64_t v21 = *a2 + 48 * v12;
  uint64_t v22 = *(void ***)(v21 + 8);
  LODWORD(v20) = *(_DWORD *)(v21 + 16);
  uint64_t v23 = *(void *)(v21 + 32);
  long long v31 = v22;
  char v30 = (void **)&unk_1F0A472D0;
  uint64_t v32 = v20;
  uint64_t v33 = v23;
  kaldi::CuVectorBase<float>::CopyFromVec(&__p, (uint64_t)&v30);
  int v25 = *(_DWORD *)(a1 + 3512);
  uint64_t v26 = *a2;
  clockid_t v27 = *(float **)(*a2 + 48 * (v12 + 1) + 8);
  float v28 = v27[1];
  if (v28 != (float)v25)
  {
    uint64_t v29 = *(void *)(a1 + 3408) + 48 * v25;
    kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues((void *)a1, v29, v29, *(kaldi::nnet1::Nnet **)(a1 + 1136));
    uint64_t v26 = *a2;
    clockid_t v27 = *(float **)(*a2 + 48 * (v12 + 1) + 8);
    float v28 = v27[1];
  }
  *(_DWORD *)(a1 + 3512) = (int)v28;
  *(_DWORD *)(a1 + 3508) = (int)*v27;
  if (*(unsigned char *)(a1 + 3913)) {
    kaldi::quasar::TorchEncoderDecoder::AttentionModel::SetHistoryState((int32x2_t *)(a1 + 1928), v26 + 48 * v12 + 96, a3, a4);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v39, v24);
}

void sub_1B23AC320(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
}

void *kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues(void *result, uint64_t a2, uint64_t a3, kaldi::nnet1::Nnet *a4)
{
  if ((int)((*((void *)a4 + 1) - *(void *)a4) >> 3) >= 1)
  {
    uint64_t v7 = result;
    int v8 = 0;
    do
    {
      Component = (const void *)kaldi::nnet1::Nnet::GetComponent(a4, v8);
      if (v10)
      {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*(void *)v10 + 24))(v10, a2, a3, 0);
      }
      else
      {
        uint64_t v11 = (const void *)kaldi::nnet1::Nnet::GetComponent(a4, v8);
        if (result)
        {
          unint64_t v12 = result;
          uint64_t v13 = result[23];
          if ((int)(1736263375 * ((unint64_t)(result[24] - v13) >> 3)) >= 1)
          {
            uint64_t v14 = 0;
            uint64_t v15 = 0;
            do
            {
              uint64_t result = (void *)kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues(v7, a2, a3, v13 + v14);
              ++v15;
              uint64_t v13 = v12[23];
              v14 += 376;
            }
            while (v15 < (int)(1736263375 * ((unint64_t)(v12[24] - v13) >> 3)));
          }
        }
      }
      ++v8;
    }
    while (v8 < (int)((*((void *)a4 + 1) - *(void *)a4) >> 3));
  }
  return result;
}

void kaldi::quasar::TorchEncoderDecoder::AddTag(uint64_t a1, uint64_t a2, int a3, int32x2_t *a4, int a5)
{
  kaldi::CuMatrix<float>::Resize(a4, (*(_DWORD *)(a2 + 20) + 1), 1, 0, 0);
  float v10 = (float)a3;
  if ((*(unsigned char *)(a1 + 3919) == 0) == a5)
  {
    __int32 v17 = a4[2].i32[0];
    uint64_t v18 = (float *)a4[1];
    float *v18 = v10;
    uint64_t v19 = a4[3].i32[0];
    unsigned int v20 = a4[3].i32[1] - v19;
    int32x2_t v21 = a4[4];
    *((void *)&v23 + 1) = __PAIR64__(*(_DWORD *)(a2 + 20), v17);
    *(void *)&long long v24 = __PAIR64__(v20, v19);
    *((int32x2_t *)&v24 + 1) = v21;
    uint64_t v22 = &unk_1F0A472A0;
    *(void *)&long long v23 = &v18[v19];
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a2 + 20);
    __int32 v12 = a4[2].i32[0];
    int32x2_t v13 = a4[1];
    __int32 v14 = a4[3].i32[0];
    *(float *)(*(void *)&v13 + 4 * (int)(v14 * v11)) = v10;
    __int32 v15 = a4[3].i32[1];
    int32x2_t v16 = a4[4];
    *((void *)&v23 + 1) = __PAIR64__(v11, v12);
    *(void *)&long long v24 = __PAIR64__(v15, v14);
    *((int32x2_t *)&v24 + 1) = v16;
    uint64_t v22 = &unk_1F0A472A0;
    *(int32x2_t *)&long long v23 = v13;
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v22, a2, 111);
  uint64_t v22 = &unk_1F0A472A0;
  long long v23 = 0u;
  long long v24 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
}

void sub_1B23AC6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::TorchEncoderDecoder::Reverse(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned char *)this + 3919) == 0;
}

void kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a4, *(unsigned int *)(a3 + 20), (*(_DWORD *)(a3 + 16) + 1), 0, 0);
  uint64_t v9 = *(void *)(a4 + 8);
  int v10 = *(_DWORD *)(a4 + 28);
  uint64_t v11 = *(void *)(a4 + 32);
  LODWORD(v25[2]) = *(_DWORD *)(a3 + 16);
  *(void *)((char *)&v25[2] + 4) = *(void *)(a4 + 20);
  HIDWORD(v25[3]) = v10;
  v25[4] = v11;
  v25[0] = &unk_1F0A472A0;
  v25[1] = v9;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v25, a3, 111);
  uint64_t v12 = *(unsigned int *)(a3 + 20);
  if ((int)v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(int *)(a4 + 24);
    __int32 v15 = (float *)(*(void *)(a4 + 8) + 4 * *(unsigned int *)(a3 + 16));
    uint64x2_t v16 = (uint64x2_t)vdupq_n_s64(v12 - 1);
    int64x2_t v17 = (int64x2_t)xmmword_1B255FA20;
    int64x2_t v18 = vdupq_n_s64(2uLL);
    do
    {
      int32x2_t v19 = vmovn_s64((int64x2_t)vcgeq_u64(v16, (uint64x2_t)v17));
      if (v19.i8[0])
      {
        if (a5) {
          int v20 = v13;
        }
        else {
          int v20 = 0;
        }
        *__int32 v15 = (float)(v20 + a2);
      }
      if (v19.i8[4])
      {
        if (a5) {
          int v21 = v13 + 1;
        }
        else {
          int v21 = 0;
        }
        v15[v14] = (float)(v21 + a2);
      }
      v13 += 2;
      int64x2_t v17 = vaddq_s64(v17, v18);
      v15 += 2 * v14;
    }
    while (((v12 + 1) & 0x1FFFFFFFELL) != v13);
  }
  uint64_t v22 = &unk_1F0A472A0;
  long long v23 = 0u;
  long long v24 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
  v25[0] = &unk_1F0A472A0;
  memset(&v25[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v25);
}

void sub_1B23AC870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _OWORD *v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::StartFeedforward(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Custom embedding is not supported for TorchEncoderDecoder");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  uint64_t v7 = *(void *)(a1 + 3408);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 3416) - v7) >> 4) <= a3) {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 3408), a3 + 1);
  }
  else {
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(v7 + 48 * a3), 0, 0, 0, 0);
  }
  kaldi::CuMatrix<float>::CuMatrix(v13, a2, 111);
  if (*(unsigned char *)(a1 + 3917))
  {
    long long v11 = 0u;
    long long v10 = 0u;
    int32x2_t v9 = (int32x2_t)&unk_1F0A51768;
    char v12 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddTag(a1, a2, *(_DWORD *)(a1 + 3516) - 1, &v9, 0);
    kaldi::CuMatrix<float>::operator=(v13, &v9);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
  }
  if (*(unsigned char *)(a1 + 3918))
  {
    long long v11 = 0u;
    long long v10 = 0u;
    int32x2_t v9 = (int32x2_t)&unk_1F0A51768;
    char v12 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddTag(a1, (uint64_t)v13, *(_DWORD *)(a1 + 3520) - 1, &v9, 1);
    kaldi::CuMatrix<float>::operator=(v13, &v9);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
  }
  kaldi::quasar::TorchEncoderDecoder::EncFeedforward(a1, (uint64_t)v13, a3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_1B23ACA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::EosSourceId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 880);
}

void kaldi::quasar::TorchEncoderDecoder::EncFeedforward(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (double *)(a1 + 4056);
  uint64_t v7 = a1 + 4104;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v8 = kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v99, v6, v7, (long long *)&__p);
  if (SHIBYTE(v93[0]) < 0) {
    operator delete(__p);
  }
  uint64_t v9 = *(void *)(a1 + 3408);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 3416) - v9) >> 4) <= a3)
  {
    uint64_t v8 = (uint64_t)std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 3408), a3 + 1);
    uint64_t v9 = *(void *)(a1 + 3408);
  }
  *(_DWORD *)(a1 + 3512) = a3;
  int v10 = *(_DWORD *)(v9 + 48 * a3 + 20);
  if (*(unsigned char *)(a1 + 3915))
  {
    memset(v93, 0, sizeof(v93));
    long long __p = &unk_1F0A51768;
    char v94 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(v8, v10, a2, (uint64_t)&__p, 1);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), (uint64_t)&__p, (int32x2_t *)(a1 + 3120), -1, 0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  }
  else
  {
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, (int32x2_t *)(a1 + 3120), -1, 0);
  }
  int v72 = v10;
  kaldi::nnet1::Nnet::GetHistoricalComponents((kaldi::nnet1::Nnet *)(a1 + 8), &v97);
  std::vector<std::wstring>::pointer v71 = (kaldi::nnet1::Nnet *)(a1 + 8);
  kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v95);
  if (*(unsigned char *)(a1 + 3504))
  {
    if (v10 >= 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Handover is not supported for stream input.", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    if (*(unsigned char *)(a1 + 3506))
    {
      if (*(_DWORD *)(a1 + 3548) == 3)
      {
        if (*(unsigned char *)(a1 + 3505))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Model type requires full handover.", 34);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        long long v11 = v97;
        if (v98 != (unsigned char *)v97)
        {
          uint64_t v12 = 0;
          do
          {
            memset(v93, 0, sizeof(v93));
            long long __p = &unk_1F0A51768;
            char v94 = 0;
            (*(void (**)(void *, void **, void))(*v11[v12] + 40))(v11[v12], &__p, 0);
            uint64_t v73 = v12;
            kaldi::CuMatrix<float>::CuMatrix(&v89, 1, (2 * *(_DWORD *)(a1 + 3976)), 0, 0, 0);
            int v13 = *(_DWORD *)(a1 + 3976);
            *(void *)((char *)&v88[1] + 4) = *(void *)((char *)v90 + 12);
            LODWORD(v88[1]) = v13;
            HIDWORD(v88[2]) = DWORD1(v90[1]);
            v88[3] = *((void *)&v90[1] + 1);
            int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
            v88[0] = *(void *)&v90[0];
            *(void *)((char *)&v85[1] + 4) = *(void *)((char *)v93 + 12);
            LODWORD(v85[1]) = v13;
            HIDWORD(v85[2]) = DWORD1(v93[1]);
            v85[3] = *((void *)&v93[1] + 1);
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            v85[0] = *(void *)&v93[0];
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v87, (uint64_t)&v84, 111);
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            memset(v85, 0, sizeof(v85));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
            int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
            memset(v88, 0, sizeof(v88));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v87);
            uint64_t v14 = *(int *)(a1 + 3976);
            *(void *)((char *)&v88[1] + 4) = *(void *)((char *)v90 + 12);
            LODWORD(v88[1]) = v14;
            HIDWORD(v88[2]) = DWORD1(v90[1]) - v14;
            v88[3] = *((void *)&v90[1] + 1);
            int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
            v88[0] = *(void *)&v90[0] + 4 * v14;
            *(void *)((char *)&v85[1] + 4) = *(void *)((char *)v93 + 12);
            LODWORD(v85[1]) = v14;
            HIDWORD(v85[2]) = DWORD1(v93[1]) - 2 * v14;
            v85[3] = *((void *)&v93[1] + 1);
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            v85[0] = *(void *)&v93[0] + 8 * v14;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v87, (uint64_t)&v84, 111);
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            memset(v85, 0, sizeof(v85));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
            int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
            memset(v88, 0, sizeof(v88));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v87);
            kaldi::CuMatrix<float>::CuMatrix(&v87, 1, (2 * *(_DWORD *)(a1 + 3976)), 0, 0, 0);
            uint64_t v15 = *(int *)(a1 + 3976);
            *(void *)((char *)&v85[1] + 4) = *(void *)((char *)&v88[1] + 4);
            LODWORD(v85[1]) = v15;
            HIDWORD(v85[2]) = HIDWORD(v88[2]);
            v85[3] = v88[3];
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            v85[0] = v88[0];
            LODWORD(v82[1]) = v15;
            *(void *)((char *)&v82[1] + 4) = *(void *)((char *)v93 + 12);
            HIDWORD(v82[2]) = DWORD1(v93[1]) - v15;
            v82[3] = *((void *)&v93[1] + 1);
            int32x2_t v81 = (int32x2_t)&unk_1F0A472A0;
            v82[0] = *(void *)&v93[0] + 4 * v15;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)&v81, 111);
            int32x2_t v81 = (int32x2_t)&unk_1F0A472A0;
            memset(v82, 0, sizeof(v82));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            memset(v85, 0, sizeof(v85));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
            uint64_t v16 = *(int *)(a1 + 3976);
            *(void *)((char *)&v85[1] + 4) = *(void *)((char *)&v88[1] + 4);
            LODWORD(v85[1]) = v16;
            HIDWORD(v85[2]) = HIDWORD(v88[2]) - v16;
            v85[3] = v88[3];
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            v85[0] = v88[0] + 4 * v16;
            LODWORD(v82[1]) = v16;
            *(void *)((char *)&v82[1] + 4) = *(void *)((char *)v93 + 12);
            HIDWORD(v82[2]) = DWORD1(v93[1]) - 3 * v16;
            v82[3] = *((void *)&v93[1] + 1);
            int32x2_t v81 = (int32x2_t)&unk_1F0A472A0;
            v82[0] = *(void *)&v93[0] + 4 * (3 * v16);
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)&v81, 111);
            int32x2_t v81 = (int32x2_t)&unk_1F0A472A0;
            memset(v82, 0, sizeof(v82));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            memset(v85, 0, sizeof(v85));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
            memset(v85, 0, sizeof(v85));
            int32x2_t v84 = (int32x2_t)&unk_1F0A51768;
            char v86 = 0;
            kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1552), (uint64_t)&v89, &v84, -1, 0);
            memset(v82, 0, sizeof(v82));
            int32x2_t v81 = (int32x2_t)&unk_1F0A51768;
            char v83 = 0;
            kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1176), (uint64_t)&v87, &v81, -1, 0);
            kaldi::CuMatrix<float>::CuMatrix(&v76, 1, (2 * *(_DWORD *)(a1 + 3976)), 0, 0, 0);
            LODWORD(v75[1]) = *(_DWORD *)(a1 + 3976);
            *(void *)((char *)&v75[1] + 4) = v78;
            HIDWORD(v75[2]) = v79;
            v75[3] = v80;
            long long v74 = &unk_1F0A472A0;
            v75[0] = v77;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v74, (uint64_t)&v84, 111);
            long long v74 = &unk_1F0A472A0;
            memset(v75, 0, sizeof(v75));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v74);
            LODWORD(v75[1]) = *(_DWORD *)(a1 + 3976);
            *(void *)((char *)&v75[1] + 4) = v78;
            HIDWORD(v75[2]) = v79 - LODWORD(v75[1]);
            v75[3] = v80;
            long long v74 = &unk_1F0A472A0;
            v75[0] = v77 + 4 * SLODWORD(v75[1]);
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v74, (uint64_t)&v81, 111);
            long long v74 = &unk_1F0A472A0;
            memset(v75, 0, sizeof(v75));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v74);
            (*(void (**)(void *, int32x2_t *, void))(*v95[v12] + 56))(v95[v12], &v76, 0);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v76);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v81);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v84);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v87);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v89);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
            ++v12;
            long long v11 = v97;
          }
          while (v73 + 1 != (v98 - (unsigned char *)v97) >> 3);
        }
      }
      else
      {
        memset(v93, 0, sizeof(v93));
        long long __p = &unk_1F0A51768;
        char v94 = 0;
        int v20 = *(_DWORD *)(a1 + 3976) << (*(unsigned char *)(a1 + 3505) == 0);
        kaldi::CuMatrix<float>::Resize((int32x2_t *)&__p, 1, v20 * ((unint64_t)(v98 - (unsigned char *)v97) >> 3), 0, 0);
        int v21 = v97;
        if (v98 != (unsigned char *)v97)
        {
          uint64_t v22 = 0;
          int v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          long long v26 = 0uLL;
          do
          {
            v90[0] = v26;
            v90[1] = v26;
            int32x2_t v89 = (int32x2_t)&unk_1F0A51768;
            char v91 = 0;
            (*(void (**)(void *, int32x2_t *, void))(*v21[v25] + 40))(v21[v25], &v89, 0);
            v88[0] = *(void *)&v93[0] + v22;
            *(void *)((char *)&v88[1] + 4) = *(void *)((char *)v93 + 12);
            LODWORD(v88[1]) = v20;
            HIDWORD(v88[2]) = v23 + DWORD1(v93[1]);
            v88[3] = *((void *)&v93[1] + 1);
            int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
            v85[0] = *(void *)&v90[0];
            *(void *)((char *)&v85[1] + 4) = *(void *)((char *)v90 + 12);
            LODWORD(v85[1]) = v20;
            HIDWORD(v85[2]) = DWORD1(v90[1]);
            v85[3] = *((void *)&v90[1] + 1);
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v87, (uint64_t)&v84, 111);
            int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
            memset(v85, 0, sizeof(v85));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
            int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
            memset(v88, 0, sizeof(v88));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v87);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v89);
            long long v26 = 0uLL;
            ++v25;
            int v21 = v97;
            v24 += v20;
            v23 -= v20;
            v22 += 4 * v20;
          }
          while (v25 != (v98 - (unsigned char *)v97) >> 3);
        }
        memset(v90, 0, sizeof(v90));
        int32x2_t v89 = (int32x2_t)&unk_1F0A51768;
        char v91 = 0;
        kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1176), (uint64_t)&__p, &v89, -1, 0);
        clockid_t v27 = v95;
        if (v96 != (unsigned char *)v95)
        {
          uint64_t v28 = 0;
          int v29 = 0;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          do
          {
            if (*(unsigned char *)(a1 + 3505))
            {
              kaldi::CuMatrix<float>::CuMatrix(&v87, 1, (2 * *(_DWORD *)(a1 + 3976)), 0, 0, 0);
              int v32 = *(_DWORD *)(a1 + 3976);
              *(void *)((char *)&v85[1] + 4) = *(void *)((char *)&v88[1] + 4);
              LODWORD(v85[1]) = v32;
              HIDWORD(v85[2]) = HIDWORD(v88[2]);
              v85[3] = v88[3];
              int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
              v85[0] = v88[0];
              v82[0] = *(void *)&v90[0] + v28;
              LODWORD(v82[1]) = v20;
              *(void *)((char *)&v82[1] + 4) = *(void *)((char *)v90 + 12);
              HIDWORD(v82[2]) = v29 + DWORD1(v90[1]);
              v82[3] = *((void *)&v90[1] + 1);
              int32x2_t v81 = (int32x2_t)&unk_1F0A472A0;
              kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)&v81, 111);
              int32x2_t v81 = (int32x2_t)&unk_1F0A472A0;
              memset(v82, 0, sizeof(v82));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
              int32x2_t v84 = (int32x2_t)&unk_1F0A472A0;
              memset(v85, 0, sizeof(v85));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
              (*(void (**)(void *, int32x2_t *, void))(*v95[v31] + 56))(v95[v31], &v87, 0);
              kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v87);
            }
            else
            {
              uint64_t v33 = v27[v31];
              v88[0] = *(void *)&v90[0] + v28;
              *(void *)((char *)&v88[1] + 4) = *(void *)((char *)v90 + 12);
              LODWORD(v88[1]) = v20;
              HIDWORD(v88[2]) = v29 + DWORD1(v90[1]);
              v88[3] = *((void *)&v90[1] + 1);
              int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
              (*(void (**)(void *, int32x2_t *, void))(*v33 + 56))(v33, &v87, 0);
              int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
              memset(v88, 0, sizeof(v88));
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v87);
            }
            ++v31;
            clockid_t v27 = v95;
            v30 += v20;
            v29 -= v20;
            v28 += 4 * v20;
          }
          while (v31 != (v96 - (unsigned char *)v95) >> 3);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v89);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
      }
    }
    else if (*(unsigned char *)(a1 + 3505))
    {
      kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, 1, *(unsigned int *)(a1 + 3976), 0, 0, 0);
      int64x2_t v17 = v97;
      if (v98 != (unsigned char *)v97)
      {
        uint64_t v18 = 0;
        do
        {
          memset(v90, 0, sizeof(v90));
          int32x2_t v89 = (int32x2_t)&unk_1F0A51768;
          char v91 = 0;
          (*(void (**)(void *, int32x2_t *, void))(*v17[v18] + 40))(v17[v18], &v89, 0);
          uint64_t v19 = *(int *)(a1 + 3976);
          *(void *)((char *)&v88[1] + 4) = *(void *)((char *)v90 + 12);
          LODWORD(v88[1]) = v19;
          HIDWORD(v88[2]) = DWORD1(v90[1]) - v19;
          v88[3] = *((void *)&v90[1] + 1);
          int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
          v88[0] = *(void *)&v90[0] + 4 * v19;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v87, (uint64_t)&__p, 111);
          int32x2_t v87 = (int32x2_t)&unk_1F0A472A0;
          memset(v88, 0, sizeof(v88));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v87);
          (*(void (**)(void *, int32x2_t *, void))(*v95[v18] + 56))(v95[v18], &v89, 0);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v89);
          ++v18;
          int64x2_t v17 = v97;
        }
        while (v18 != (v98 - (unsigned char *)v97) >> 3);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
    }
    else
    {
      uint64_t v34 = v97;
      if (v98 != (unsigned char *)v97)
      {
        uint64_t v35 = 0;
        long long v36 = 0uLL;
        do
        {
          v93[0] = v36;
          v93[1] = v36;
          long long __p = &unk_1F0A51768;
          char v94 = 0;
          (*(void (**)(void *, void **, void))(*v34[v35] + 40))(v34[v35], &__p, 0);
          long long v37 = v95[v35];
          int v38 = 2 * *(_DWORD *)(a1 + 3976);
          if (*(unsigned char *)(a1 + 3919)) {
            int v39 = 2 * *(_DWORD *)(a1 + 3976);
          }
          else {
            int v39 = 0;
          }
          *(void *)((char *)v90 + 12) = *(void *)((char *)v93 + 12);
          DWORD2(v90[0]) = v38;
          DWORD1(v90[1]) = DWORD1(v93[1]) - v39;
          *((void *)&v90[1] + 1) = *((void *)&v93[1] + 1);
          int32x2_t v89 = (int32x2_t)&unk_1F0A472A0;
          *(void *)&v90[0] = *(void *)&v93[0] + 4 * v39;
          (*(void (**)(void *, int32x2_t *, void))(*v37 + 56))(v37, &v89, 0);
          int32x2_t v89 = (int32x2_t)&unk_1F0A472A0;
          memset(v90, 0, sizeof(v90));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v89);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
          long long v36 = 0uLL;
          ++v35;
          uint64_t v34 = v97;
        }
        while (v35 != (v98 - (unsigned char *)v97) >> 3);
      }
    }
  }
  if (kaldi::nnet1::Nnet::IsBidirectionalRnn(v71) && *(_DWORD *)(a1 + 3548) != 3)
  {
    if (v72 >= 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"BidirectionalEncoder is not supported for stream input.", 55);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512)), *(unsigned int *)(a1 + 3140), (*(_DWORD *)(a1 + 3136) / 2), 0, 0);
    uint64_t v46 = (int *)(*(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512));
    int v47 = *(_DWORD *)(a1 + 3136);
    uint64_t v48 = *(void *)(a1 + 3128);
    int v49 = *(_DWORD *)(a1 + 3148);
    uint64_t v50 = *(void *)(a1 + 3152);
    *(void *)((char *)v93 + 12) = *(void *)(a1 + 3140);
    DWORD2(v93[0]) = v47 / 2;
    DWORD1(v93[1]) = v49;
    *((void *)&v93[1] + 1) = v50;
    long long __p = &unk_1F0A472A0;
    *(void *)&v93[0] = v48;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v46, (uint64_t)&__p, 111);
    long long __p = &unk_1F0A472A0;
    memset(v93, 0, sizeof(v93));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    uint64_t v51 = *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
    int v52 = *(_DWORD *)(a1 + 3136) / 2;
    uint64_t v53 = *(void *)(a1 + 3128) + 4 * v52;
    int v54 = *(_DWORD *)(a1 + 3148) - v52;
    uint64_t v55 = *(void *)(a1 + 3152);
    *(void *)((char *)v93 + 12) = *(void *)(a1 + 3140);
    DWORD2(v93[0]) = v52;
    DWORD1(v93[1]) = v54;
    *((void *)&v93[1] + 1) = v55;
    long long __p = &unk_1F0A472A0;
    *(void *)&v93[0] = v53;
    kaldi::CuMatrixBase<float>::AddMat(v51, (uint64_t)&__p, 111, 1.0, 1.0);
    long long __p = &unk_1F0A472A0;
    memset(v93, 0, sizeof(v93));
  }
  else
  {
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512)), (*(_DWORD *)(a1 + 3140) + v72), *(unsigned int *)(a1 + 3136), 2, 0);
    uint64_t v40 = *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
    unsigned int v41 = *(_DWORD *)(v40 + 16);
    unsigned int v42 = *(_DWORD *)(v40 + 24);
    uint64_t v43 = *(void *)(v40 + 8) + 4 * (int)(v42 * v72);
    int v44 = *(_DWORD *)(v40 + 28) - v42 * v72;
    uint64_t v45 = *(void *)(v40 + 32);
    *((void *)&v93[0] + 1) = __PAIR64__(*(_DWORD *)(a1 + 3140), v41);
    *(void *)&v93[1] = __PAIR64__(v44, v42);
    *((void *)&v93[1] + 1) = v45;
    long long __p = &unk_1F0A472A0;
    *(void *)&v93[0] = v43;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&__p, a1 + 3120, 111);
    long long __p = &unk_1F0A472A0;
    memset(v93, 0, sizeof(v93));
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  uint64_t v56 = *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
  kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues((void *)a1, v56, v56, *(kaldi::nnet1::Nnet **)(a1 + 1136));
  if (*(unsigned char *)(a1 + 3919))
  {
    int v58 = 0;
    if (v72) {
      goto LABEL_48;
    }
  }
  else
  {
    int v58 = *(_DWORD *)(a1 + 3140) - 1;
    if (v72) {
      goto LABEL_48;
    }
  }
  uint64_t v59 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), 1, v59, 0, 0);
LABEL_48:
  if (!*(unsigned char *)(a1 + 3504)) {
    goto LABEL_58;
  }
  if (kaldi::nnet1::Nnet::IsBidirectionalRnn(v71))
  {
    uint64_t v60 = (int *)(a1 + 3312);
    if (*(_DWORD *)(a1 + 3548) == 3)
    {
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)v60);
      goto LABEL_58;
    }
    unsigned int v66 = *(_DWORD *)(a1 + 3144);
    uint64_t v67 = *(void *)(a1 + 3128) + 4 * (int)(v66 * v58);
    int v68 = *(_DWORD *)(a1 + 3148) - v66 * v58;
    uint64_t v69 = *(void *)(a1 + 3152);
    DWORD2(v90[0]) = *(_DWORD *)(a1 + 3136);
    HIDWORD(v90[0]) = 1;
    *(void *)&v90[1] = __PAIR64__(v68, v66);
    *((void *)&v90[1] + 1) = v69;
    int32x2_t v89 = (int32x2_t)&unk_1F0A472A0;
    *(void *)&v90[0] = v67;
    if (*(unsigned char *)(a1 + 3919)) {
      int v70 = SDWORD2(v90[0]) / 2;
    }
    else {
      int v70 = 0;
    }
    DWORD2(v93[0]) = SDWORD2(v90[0]) / 2;
    HIDWORD(v93[0]) = 1;
    LODWORD(v93[1]) = v66;
    DWORD1(v93[1]) = v68 - v70;
    *((void *)&v93[1] + 1) = v69;
    long long __p = &unk_1F0A472A0;
    *(void *)&v93[0] = v67 + 4 * v70;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v60, (uint64_t)&__p, 111);
    long long __p = &unk_1F0A472A0;
    memset(v93, 0, sizeof(v93));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    int32x2_t v89 = (int32x2_t)&unk_1F0A472A0;
    memset(v90, 0, sizeof(v90));
    std::__split_buffer<std::wstring>::pointer p_p = &v89;
  }
  else
  {
    unsigned int v61 = *(_DWORD *)(a1 + 3136);
    unsigned int v62 = *(_DWORD *)(a1 + 3144);
    int v63 = *(_DWORD *)(a1 + 3148) - v62 * v58;
    uint64_t v64 = *(void *)(a1 + 3152);
    *(void *)&v93[0] = *(void *)(a1 + 3128) + 4 * (int)(v62 * v58);
    *((void *)&v93[0] + 1) = v61 | 0x100000000;
    *(void *)&v93[1] = __PAIR64__(v63, v62);
    *((void *)&v93[1] + 1) = v64;
    long long __p = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)(a1 + 3312), (uint64_t)&__p, 111);
    long long __p = &unk_1F0A472A0;
    memset(v93, 0, sizeof(v93));
    std::__split_buffer<std::wstring>::pointer p_p = (int32x2_t *)&__p;
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)p_p);
LABEL_58:
  if (v95)
  {
    std::__split_buffer<std::wstring>::pointer v96 = v95;
    operator delete(v95);
  }
  if (v97)
  {
    long long v98 = v97;
    operator delete(v97);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v99, v57);
}

void sub_1B23ADF14()
{
  _OWORD *v0 = 0u;
  v0[1] = 0u;
  JUMPOUT(0x1B23ADF5CLL);
}

void sub_1B23ADF64()
{
}

void sub_1B23ADF74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B23AE160);
}

void sub_1B23ADF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
}

void sub_1B23ADF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _OWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a40);
  JUMPOUT(0x1B23AE128);
}

void sub_1B23ADFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  _OWORD *v46 = 0u;
  v46[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a46);
  JUMPOUT(0x1B23AE130);
}

void sub_1B23ADFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _OWORD *v41 = 0u;
  v41[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a28);
  _OWORD *v40 = 0u;
  v40[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a34);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a40);
  JUMPOUT(0x1B23AE128);
}

void sub_1B23AE008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

void sub_1B23AE010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  _OWORD *v40 = 0u;
  v40[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a40);
  JUMPOUT(0x1B23AE128);
}

void sub_1B23AE01C(_Unwind_Exception *a1, clockid_t a2)
{
  uint64_t v4 = *(void **)(v2 - 184);
  if (v4)
  {
    *(void *)(v2 - 176) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v2 - 160);
  if (v5)
  {
    *(void *)(v2 - 152) = v5;
    operator delete(v5);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v2 - 136), a2);
  _Unwind_Resume(a1);
}

void sub_1B23AE028()
{
}

void sub_1B23AE030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  _OWORD *v34 = 0u;
  v34[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a34);
  JUMPOUT(0x1B23AE050);
}

void sub_1B23AE060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  *uint64_t v28 = 0u;
  v28[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a28);
  _OWORD *v29 = 0u;
  v29[1] = 0u;
  JUMPOUT(0x1B23AE088);
}

void sub_1B23AE094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

void sub_1B23AE0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  *uint64_t v35 = 0u;
  v35[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a34);
  _OWORD *v34 = 0u;
  v34[1] = 0u;
  JUMPOUT(0x1B23AE118);
}

void sub_1B23AE124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Feedforward(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  long long v11 = 0u;
  long long v10 = 0u;
  int32x2_t v9 = (int32x2_t)&unk_1F0A51768;
  char v12 = 0;
  if (*(unsigned char *)(a1 + 3916)) {
    kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(a1, *(_DWORD *)(a1 + 3508), (uint64_t)a2, (uint64_t)&v9, 0);
  }
  else {
    kaldi::CuMatrix<float>::operator=(&v9, a2);
  }
  switch(*(_DWORD *)(a1 + 3548))
  {
    case 0:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelN(a1, &v9, a3, a4);
      break;
    case 1:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelM(a1, &v9, a3, a4);
      break;
    case 2:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelT(a1, &v9, a3, a4);
      break;
    case 3:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelF(a1, &v9, a3, a4);
      break;
    default:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Un-supported model type : ", 26);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  ++*(_DWORD *)(a1 + 3508);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
}

void sub_1B23AE2D8(_Unwind_Exception *a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(v1 - 80);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelN(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  uint64_t v8 = (double *)(a1 + 4056);
  uint64_t v9 = a1 + 4128;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v35, v8, v9, (long long *)__p);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4160, (long long *)v29);
  if (SHIBYTE(v29[2]) < 0) {
    operator delete(v29[0]);
  }
  uint64_t v10 = a2[2].u32[1];
  uint64_t v11 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3264), v10, v11, 0, 0);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 760), a2, (int32x2_t *)(a1 + 3264), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4136, (long long *)v29);
  if (SHIBYTE(v29[2]) < 0) {
    operator delete(v29[0]);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 3284);
  uint64_t v14 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), v13, v14, 0, 0);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 1136), (int32x2_t *)(a1 + 3264), (int32x2_t *)(a1 + 3312), 0);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3216), (int32x2_t *)(a1 + 3312));
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v15);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4144, (long long *)v29);
  if (SHIBYTE(v29[2]) < 0) {
    operator delete(v29[0]);
  }
  if (*(unsigned char *)(a1 + 3922))
  {
    Component = (const void *)kaldi::nnet1::Nnet::GetComponent(*(kaldi::nnet1::Nnet **)(a1 + 1136), *(_DWORD *)(a1 + 3540));
    std::vector<unsigned int>::size_type __sz = 0;
    __src = 0;
    uint64_t v32 = 0;
    uint64_t Trie = Ngram::getTrie(v18);
    uint64_t v20 = *(unsigned __int8 *)(a1 + 3917);
    int v21 = (void *)(*(void *)(Trie + 8) + 4 * v20);
    LODWORD(v20) = *(_DWORD *)(Trie + 28) - v20;
    uint64_t v22 = *(void **)(Trie + 32);
    LODWORD(v29[2]) = *(_DWORD *)(Trie + 16) - *(unsigned __int8 *)(a1 + 3918);
    *(void **)((char *)&v29[2] + 4) = *(void **)(Trie + 20);
    HIDWORD(v29[3]) = v20;
    v29[4] = v22;
    v29[0] = &unk_1F0A472A0;
    v29[1] = v21;
    kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 4008), (int32x2_t *)v29);
    v29[0] = &unk_1F0A472A0;
    memset(&v29[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v29);
    kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 4008, (int *)&__sz);
    int v23 = *(void **)(a1 + 3984);
    uint64_t v24 = (*(void *)(a1 + 3992) - (void)v23) >> 2;
    if (__sz != v24)
    {
      std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 3984), (int)__sz);
      int v23 = *(void **)(a1 + 3984);
      LODWORD(v24) = __sz;
    }
    memcpy(v23, __src, 4 * (int)v24);
    if (__src) {
      free(__src);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v16);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4152, (long long *)v29);
  if (SHIBYTE(v29[2]) < 0)
  {
    operator delete(v29[0]);
    if (a4) {
      goto LABEL_16;
    }
  }
  else if (a4)
  {
LABEL_16:
    int v25 = ((*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) - 1;
    goto LABEL_19;
  }
  int v25 = -1;
LABEL_19:
  if (*(void *)(a1 + 3664)) {
    long long v26 = *(uint64_t **)(a1 + 3664);
  }
  else {
    long long v26 = (uint64_t *)(a1 + 384);
  }
  kaldi::nnet1::Nnet::Feedforward(v26, a1 + 3216, a3, v25, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v27);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v35, v28);
}

void sub_1B23AE69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _OWORD *v29 = 0u;
  v29[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a20, v31);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a29, v32);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelM(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  uint64_t v8 = (double *)(a1 + 4056);
  uint64_t v9 = a1 + 4128;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v37, v8, v9, (long long *)__p);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  unsigned __int32 v30 = a2[2].u32[1];
  std::string::basic_string[abi:ne180100]<0>(v34, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4144, (long long *)v34);
  if ((v34[23] & 0x80000000) != 0) {
    operator delete(*(void **)v34);
  }
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, (int32x2_t *)(a1 + 3360), (int32x2_t *)(a1 + 3432), (std::vector<unsigned int> *)v34);
  uint64_t v11 = *(void **)(a1 + 3984);
  if (v11)
  {
    *(void *)(a1 + 3992) = v11;
    operator delete(v11);
    *(void *)(a1 + 3984) = 0;
    *(void *)(a1 + 3992) = 0;
    *(void *)(a1 + 4000) = 0;
  }
  *(_OWORD *)(a1 + 3984) = *(_OWORD *)v34;
  *(void *)(a1 + 4000) = *(void *)&v34[16];
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v10);
  std::string::basic_string[abi:ne180100]<0>(v34, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4160, (long long *)v34);
  if ((v34[23] & 0x80000000) != 0) {
    operator delete(*(void **)v34);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 760), a2, (int32x2_t *)(a1 + 3168), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  int v13 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  int v14 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3264), v30, (v14 + v13), 0, 0);
  int v15 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  int v16 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  uint64_t v17 = *(void *)(a1 + 3272) + 4 * v15;
  int v18 = *(_DWORD *)(a1 + 3292) - v15;
  uint64_t v19 = *(void *)(a1 + 3296);
  *(_DWORD *)&v34[16] = v16;
  *(void *)&v34[20] = *(void *)(a1 + 3284);
  *(_DWORD *)&v34[28] = v18;
  *(void *)&v34[32] = v19;
  *(void *)char v34 = &unk_1F0A472A0;
  *(void *)&v34[8] = v17;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v34, a1 + 3360, 111);
  int v20 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  uint64_t v21 = *(void *)(a1 + 3272);
  int v22 = *(_DWORD *)(a1 + 3292);
  uint64_t v23 = *(void *)(a1 + 3296);
  LODWORD(v33[2]) = v20;
  *(void *)((char *)&v33[2] + 4) = *(void *)(a1 + 3284);
  HIDWORD(v33[3]) = v22;
  v33[4] = v23;
  v33[0] = &unk_1F0A472A0;
  v33[1] = v21;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v33, a1 + 3168, 111);
  uint64_t v24 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), v30, v24, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4136, (long long *)v31);
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 1136), (int32x2_t *)(a1 + 3264), (int32x2_t *)(a1 + 3312), 0);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3216), (int32x2_t *)(a1 + 3312));
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v25);
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4152, (long long *)v31);
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (a4) {
    int v26 = ((*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) - 1;
  }
  else {
    int v26 = -1;
  }
  if (*(void *)(a1 + 3664)) {
    clockid_t v27 = *(uint64_t **)(a1 + 3664);
  }
  else {
    clockid_t v27 = (uint64_t *)(a1 + 384);
  }
  kaldi::nnet1::Nnet::Feedforward(v27, a1 + 3216, a3, v26, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v28);
  v33[0] = &unk_1F0A472A0;
  memset(&v33[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v33);
  *(void *)char v34 = &unk_1F0A472A0;
  memset(&v34[8], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v34);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v37, v29);
}

void sub_1B23AEB24(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, _OWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a32, a2);
  *long long v37 = 0u;
  v37[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a19);
  a24 = a10;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a24);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v38 - 136), v40);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelT(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  uint64_t v8 = (double *)(a1 + 4056);
  uint64_t v9 = a1 + 4128;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v35, v8, v9, (long long *)__p);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = a2[2].u32[1];
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4160, (long long *)v32);
  if (SHIBYTE(v32[2]) < 0) {
    operator delete(v32[0]);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 760), a2, (int32x2_t *)(a1 + 3168), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v11);
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4136, (long long *)v32);
  if (SHIBYTE(v32[2]) < 0) {
    operator delete(v32[0]);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 1136), (int32x2_t *)(a1 + 3168), (int32x2_t *)(a1 + 3312), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  int v13 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3216), v10, (2 * v13), 0, 0);
  int v14 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  int v15 = *(void **)(a1 + 3224);
  int v16 = *(_DWORD *)(a1 + 3244);
  uint64_t v17 = *(void **)(a1 + 3248);
  LODWORD(v32[2]) = v14;
  *(void **)((char *)&v32[2] + 4) = *(void **)(a1 + 3236);
  HIDWORD(v32[3]) = v16;
  v32[4] = v17;
  v32[0] = &unk_1F0A472A0;
  v32[1] = v15;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v32, a1 + 3312, 111);
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4144, (long long *)v31);
  if (SHIBYTE(v31[0].__end_cap_.__value_) < 0) {
    operator delete(v31[0].__begin_);
  }
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, (int32x2_t *)(a1 + 3360), (int32x2_t *)(a1 + 3432), v31);
  uint64_t v19 = *(void **)(a1 + 3984);
  if (v19)
  {
    *(void *)(a1 + 3992) = v19;
    operator delete(v19);
    *(void *)(a1 + 3984) = 0;
    *(void *)(a1 + 3992) = 0;
    *(void *)(a1 + 4000) = 0;
  }
  *(std::vector<unsigned int> *)(a1 + 3984) = v31[0];
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v18);
  int v20 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  int v21 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  int v22 = (unsigned int *)(*(void *)(a1 + 3224) + 4 * v20);
  int v23 = *(_DWORD *)(a1 + 3244) - v20;
  uint64_t v24 = *(unsigned int **)(a1 + 3248);
  LODWORD(v31[0].__end_cap_.__value_) = v21;
  *(unsigned int **)((char *)&v31[0].__end_cap_.__value_ + 4) = *(unsigned int **)(a1 + 3236);
  HIDWORD(v31[1].__begin_) = v23;
  v31[1].__end_ = v24;
  v31[0].__begin_ = (std::vector<unsigned int>::pointer)&unk_1F0A472A0;
  v31[0].__end_ = v22;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v31, a1 + 3360, 111);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4152, (long long *)v29);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if (a4) {
      goto LABEL_13;
    }
  }
  else if (a4)
  {
LABEL_13:
    int v25 = ((*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) - 1;
    goto LABEL_16;
  }
  int v25 = -1;
LABEL_16:
  if (*(void *)(a1 + 3664)) {
    int v26 = *(uint64_t **)(a1 + 3664);
  }
  else {
    int v26 = (uint64_t *)(a1 + 384);
  }
  kaldi::nnet1::Nnet::Feedforward(v26, a1 + 3216, a3, v25, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v27);
  v31[0].__begin_ = (std::vector<unsigned int>::pointer)&unk_1F0A472A0;
  memset(&v31[0].__end_, 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v31);
  v32[0] = &unk_1F0A472A0;
  memset(&v32[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v35, v28);
}

void sub_1B23AEF9C(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, _OWORD *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a33, a2);
  *uint64_t v38 = 0u;
  v38[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a16);
  *a9 = 0u;
  a9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a25);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v39 - 136), v41);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelF(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  uint64_t v8 = (double *)(a1 + 4056);
  uint64_t v9 = a1 + 4128;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v36, v8, v9, (long long *)__p);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = a2[2].u32[1];
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4160, (long long *)v33);
  if (SHIBYTE(v33[2]) < 0) {
    operator delete(v33[0]);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 760), a2, (int32x2_t *)(a1 + 3168), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v11);
  int v12 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  int v13 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3264), v10, (v13 + v12), 0, 0);
  int v14 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  int v15 = *(void **)(a1 + 3272);
  int v16 = *(_DWORD *)(a1 + 3292);
  uint64_t v17 = *(void **)(a1 + 3296);
  LODWORD(v33[2]) = v14;
  *(void **)((char *)&v33[2] + 4) = *(void **)(a1 + 3284);
  HIDWORD(v33[3]) = v16;
  v33[4] = v17;
  v33[0] = &unk_1F0A472A0;
  v33[1] = v15;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v33, a1 + 3168, 111);
  int v18 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  int v19 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  uint64_t v20 = *(void *)(a1 + 3272) + 4 * v18;
  int v21 = *(_DWORD *)(a1 + 3292) - v18;
  uint64_t v22 = *(void *)(a1 + 3296);
  LODWORD(v32[2]) = v19;
  *(void *)((char *)&v32[2] + 4) = *(void *)(a1 + 3284);
  HIDWORD(v32[3]) = v21;
  v32[4] = v22;
  v32[0] = &unk_1F0A472A0;
  v32[1] = v20;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v32, a1 + 3312, 111);
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4136, (long long *)&v31);
  if (SHIBYTE(v31.__end_cap_.__value_) < 0) {
    operator delete(v31.__begin_);
  }
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 1136), (int32x2_t *)(a1 + 3264), (int32x2_t *)(a1 + 3312), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v23);
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4144, (long long *)&v31);
  if (SHIBYTE(v31.__end_cap_.__value_) < 0) {
    operator delete(v31.__begin_);
  }
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(void *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, (int32x2_t *)(a1 + 3360), (int32x2_t *)(a1 + 3432), &v31);
  int v25 = *(void **)(a1 + 3984);
  if (v25)
  {
    *(void *)(a1 + 3992) = v25;
    operator delete(v25);
    *(void *)(a1 + 3984) = 0;
    *(void *)(a1 + 3992) = 0;
    *(void *)(a1 + 4000) = 0;
  }
  *(std::vector<unsigned int> *)(a1 + 3984) = v31;
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v24);
  int v26 = kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3216), (int32x2_t *)(a1 + 3360));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3312), v26);
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4152, (long long *)&v31);
  if (SHIBYTE(v31.__end_cap_.__value_) < 0)
  {
    operator delete(v31.__begin_);
    if (a4) {
      goto LABEL_13;
    }
  }
  else if (a4)
  {
LABEL_13:
    int v27 = ((*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) - 1;
    goto LABEL_16;
  }
  int v27 = -1;
LABEL_16:
  if (*(void *)(a1 + 3664)) {
    clockid_t v28 = *(uint64_t **)(a1 + 3664);
  }
  else {
    clockid_t v28 = (uint64_t *)(a1 + 384);
  }
  kaldi::nnet1::Nnet::Feedforward(v28, a1 + 3216, a3, v27, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v29);
  v32[0] = &unk_1F0A472A0;
  memset(&v32[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
  v33[0] = &unk_1F0A472A0;
  memset(&v33[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v33);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v36, v30);
}

void sub_1B23AF45C(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _OWORD *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a30, a2);
  *char v35 = 0u;
  v35[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a17);
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a22);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v36 - 136), v38);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::Start(void *a1, clockid_t a2, uint64_t a3)
{
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a3 + 23)) {
      goto LABEL_3;
    }
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Dynamic switch is not support in this platform");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  if (*(void *)(a3 + 8)) {
    goto LABEL_9;
  }
LABEL_3:
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 507), a2);
  uint64_t v4 = (void *)a1[427];
  uint64_t v5 = (void *)a1[426];
  if (v4 != v5)
  {
    uint64_t v6 = v4 - 6;
    uint64_t v7 = v4 - 6;
    uint64_t v8 = v4 - 6;
    do
    {
      uint64_t v9 = *v8;
      v8 -= 6;
      (*(void (**)(void *))(v9 + 16))(v7);
      v6 -= 6;
      BOOL v10 = v7 == v5;
      uint64_t v7 = v8;
    }
    while (!v10);
  }
  a1[427] = v5;
}

double kaldi::quasar::TorchEncoderDecoder::Finish(kaldi::quasar::TorchEncoderDecoder *this, clockid_t a2)
{
  double result = *((double *)this + 512) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2) - *((double *)this + 507);
  *((double *)this + 512) = result;
  return result;
}

void kaldi::quasar::TorchEncoderDecoder::GetTiming(const void **this@<X0>, uint64_t a2@<X8>)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v5, "time total");
  v5[3] = this[512];
  std::string::basic_string[abi:ne180100]<0>(v6, "time start feedforward");
  v6[3] = this[513];
  std::string::basic_string[abi:ne180100]<0>(v7, "time get history state");
  void v7[3] = this[514];
  std::string::basic_string[abi:ne180100]<0>(v8, "time set history state");
  void v8[3] = this[515];
  std::string::basic_string[abi:ne180100]<0>(v9, "time feed forward");
  void v9[3] = this[516];
  std::string::basic_string[abi:ne180100]<0>(v10, "time decoder");
  v10[3] = this[517];
  std::string::basic_string[abi:ne180100]<0>(v11, "time attention");
  void v11[3] = this[518];
  std::string::basic_string[abi:ne180100]<0>(v12, "time readout");
  void v12[3] = this[519];
  std::string::basic_string[abi:ne180100]<0>(v13, "time output embedding");
  void v13[3] = this[520];
  std::map<std::string,double>::map[abi:ne180100](a2, v5, 9);
  uint64_t v4 = 36;
  do
  {
    if (*((char *)&v5[v4 - 1] - 1) < 0) {
      operator delete((void *)v5[v4 - 4]);
    }
    v4 -= 4;
  }
  while (v4 * 8);
}

void sub_1B23AF808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v12 = 288;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0) {
      operator delete(*(void **)(v10 + v12 - 32));
    }
    v12 -= 32;
    if (!v12) {
      _Unwind_Resume(exception_object);
    }
  }
}

int *kaldi::quasar::TorchEncoderDecoder::CopyDecoderHiddenState(uint64_t a1, int32x2_t *a2)
{
  uint64_t v3 = a1 + 3216;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(a1 + 3236), *(unsigned int *)(a1 + 3232), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v3, 111);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Symbolize(uint64_t a1, long long **a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5 = 3624;
  if (a4) {
    uint64_t v5 = 3632;
  }
  uint64_t v6 = 3524;
  if (a4) {
    uint64_t v6 = 3536;
  }
  int v7 = *(_DWORD *)(a1 + v6);
  if (v7 == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Unknown label not described in the model");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 == v9) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(a1 + v5);
  uint64_t v14 = a3 + 16;
  do
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v15 = *v8;
      __p[0].__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v15;
    }
    int v16 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v13 + 96))(v13, __p);
    if (v16 == -1) {
      int v17 = v7;
    }
    else {
      int v17 = v16;
    }
    if (v17 != v7 || (uint64_t v12 = (v12 + 1), (a5 & 1) == 0))
    {
      int v19 = *(_DWORD **)(a3 + 8);
      unint64_t v18 = *(void *)(a3 + 16);
      if ((unint64_t)v19 >= v18)
      {
        int v21 = *(_DWORD **)a3;
        uint64_t v22 = ((uint64_t)v19 - *(void *)a3) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v14, v25);
          int v21 = *(_DWORD **)a3;
          int v19 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          int v26 = 0;
        }
        int v27 = &v26[4 * v22];
        *(_DWORD *)int v27 = v17;
        uint64_t v20 = v27 + 4;
        while (v19 != v21)
        {
          int v28 = *--v19;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        *(void *)a3 = v27;
        *(void *)(a3 + 8) = v20;
        *(void *)(a3 + 16) = &v26[4 * v25];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *int v19 = v17;
        uint64_t v20 = v19 + 1;
      }
      *(void *)(a3 + 8) = v20;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v8 = (long long *)((char *)v8 + 24);
  }
  while (v8 != v9);
  return v12;
}

void sub_1B23AFABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::UnkTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 884);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::UnkSourceId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 881);
}

float kaldi::quasar::TorchEncoderDecoder::Align(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int32x2_t *a5)
{
  clockid_t v29 = 0;
  clockid_t v30 = 0;
  uint64_t v31 = 0;
  int v26 = 0;
  int v27 = 0;
  uint64_t v28 = 0;
  long long __p = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  int v9 = *(_DWORD *)(a1 + 3532);
  uint64_t v10 = v24;
  if ((unint64_t)v24 >= v25)
  {
    uint64_t v12 = (char *)__p;
    uint64_t v13 = (v24 - (unsigned char *)__p) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v25 - (void)__p;
    if ((uint64_t)(v25 - (void)__p) >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      int v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v25, v16);
      uint64_t v12 = (char *)__p;
      uint64_t v10 = v24;
    }
    else
    {
      int v17 = 0;
    }
    unint64_t v18 = &v17[4 * v13];
    int v19 = &v17[4 * v16];
    *(_DWORD *)unint64_t v18 = v9;
    clockid_t v11 = v18 + 4;
    while (v10 != v12)
    {
      int v20 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    long long __p = v18;
    uint64_t v24 = v11;
    unint64_t v25 = (unint64_t)v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v24 = v9;
    clockid_t v11 = v10 + 4;
  }
  uint64_t v24 = v11;
  float v21 = kaldi::quasar::TorchEncoderDecoder::AlignImpl(a1, a2, (uint64_t *)&__p, (uint64_t)&v29, (uint64_t)&v26, a5, 1, a4);
  if (__p)
  {
    uint64_t v24 = (char *)__p;
    operator delete(__p);
  }
  if (v26)
  {
    int v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    clockid_t v30 = v29;
    operator delete(v29);
  }
  return v21;
}

void sub_1B23AFC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::EosTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 883);
}

float kaldi::quasar::TorchEncoderDecoder::AlignImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, int32x2_t *a6, int a7, uint64_t a8)
{
  long long v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  kaldi::JoinVectorToString<int>(a2, " ", (uint64_t)&v103);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v99, 1);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Left symbol sequence : ", 23);
    if (v105 >= 0) {
      unint64_t v16 = (void **)&v103;
    }
    else {
      unint64_t v16 = v103;
    }
    if (v105 >= 0) {
      uint64_t v17 = HIBYTE(v105);
    }
    else {
      uint64_t v17 = v104;
    }
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (# ", 4);
    int v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v99);
  }
  kaldi::JoinVectorToString<int>(a3, " ", (uint64_t)&v103);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v99, 1);
    int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Right symbol sequence : ", 24);
    if (v105 >= 0) {
      float v21 = (void **)&v103;
    }
    else {
      float v21 = v103;
    }
    if (v105 >= 0) {
      uint64_t v22 = HIBYTE(v105);
    }
    else {
      uint64_t v22 = v104;
    }
    unint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (# ", 4);
    uint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" including </s>) ", 17);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v99);
  }
  long long v97 = 0u;
  long long v96 = 0u;
  int32x2_t v95 = (int32x2_t)&unk_1F0A51768;
  char v98 = 0;
  kaldi::CuMatrix<float>::Resize(&v95, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  uint64_t v25 = *a2;
  uint64_t v26 = a2[1];
  uint64_t v27 = v26 - *a2;
  if (v26 != *a2)
  {
    uint64_t v28 = 0;
    unint64_t v29 = v27 >> 2;
    clockid_t v30 = (float *)v96;
    if (v29 <= 1) {
      unint64_t v29 = 1;
    }
    uint64_t v31 = 4 * (int)v97;
    do
    {
      float *v30 = (float)(*(_DWORD *)(v25 + 4 * v28++) - 1);
      clockid_t v30 = (float *)((char *)v30 + v31);
    }
    while (v29 != v28);
  }
  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState((kaldi::quasar::TorchEncoderDecoder *)a1, 1);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward(a1, (uint64_t)&v95, 0, 0);
  long long v93 = 0u;
  long long v92 = 0u;
  int32x2_t v91 = (int32x2_t)&unk_1F0A51768;
  char v94 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v89, 1, 1, 0, 0, 0);
  float *v90 = (float)(*(_DWORD *)(a1 + 3528) - 1);
  memset(&v88[1], 0, 24);
  v88[0] = &unk_1F0A517C0;
  uint64_t v33 = *a3;
  uint64_t v32 = a3[1];
  if (a7) {
    uint64_t v34 = kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 384)) + 1;
  }
  else {
    uint64_t v34 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 384));
  }
  kaldi::Matrix<float>::Resize(a6, ((unint64_t)(v32 - v33) >> 2) - 1, v34, 0, 0);
  if (*(void *)(a1 + 3664))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Constrained Softmax with force alignment decoding is not Supported!", 67);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v99);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v99);
  if (a3[1] == *a3)
  {
    float v36 = 0.0;
LABEL_81:
    if (a8) {
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v80 = (kaldi::nnet1::Nnet *)(a1 + 384);
    unint64_t v35 = 0;
    float v36 = 0.0;
    while (1)
    {
      kaldi::quasar::TorchEncoderDecoder::Feedforward(a1, &v89, &v91, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)&v86, HIDWORD(v92), DWORD2(v92), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v91, (int *)&v86, 111);
      int v37 = *(_DWORD *)(*a3 + 4 * v35);
      float *v90 = (float)(v37 - 1);
      std::ostream::operator<<();
      if (((a3[1] - *a3) >> 2) - 1 > v35) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)", ", 2);
      }
      float v38 = logf(*(float *)(v86 + 4 * (v37 - 1)));
      float v36 = v36 - v38;
      if (v37 == *(_DWORD *)(a1 + 3532)) {
        break;
      }
      float v39 = v38;
      if (a6)
      {
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v83, (uint64_t)a6, v35, 1, 0, a6[1].i32[0]);
        if (a7) {
          int v40 = kaldi::nnet1::Nnet::InputDim(v80);
        }
        else {
          int v40 = kaldi::nnet1::Nnet::OutputDim(v80);
        }
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v85, (uint64_t)v83, 0, v84, 0, v40);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v83);
        if (a7)
        {
          kaldi::CuMatrixBase<float>::CopyToMat<float>(a1 + 3216, v85, 111);
          *(float *)(*(void *)a6 + 4 * a6[2].i32[0] * (int)v35 + 4 * (int)kaldi::nnet1::Nnet::InputDim(v80)) = -v39;
        }
        else
        {
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v91, v85, 111);
        }
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v85);
      }
      if (a5)
      {
        float v41 = -v39;
        uint64_t v43 = *(float **)(a5 + 8);
        unint64_t v42 = *(void *)(a5 + 16);
        if ((unint64_t)v43 >= v42)
        {
          uint64_t v45 = *(float **)a5;
          uint64_t v46 = ((uint64_t)v43 - *(void *)a5) >> 2;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = v42 - (void)v45;
          if (v48 >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v49);
            uint64_t v45 = *(float **)a5;
            uint64_t v43 = *(float **)(a5 + 8);
          }
          else
          {
            uint64_t v50 = 0;
          }
          uint64_t v51 = (float *)&v50[4 * v46];
          float *v51 = v41;
          int v44 = v51 + 1;
          while (v43 != v45)
          {
            int v52 = *((_DWORD *)v43-- - 1);
            *((_DWORD *)v51-- - 1) = v52;
          }
          *(void *)a5 = v51;
          *(void *)(a5 + 8) = v44;
          *(void *)(a5 + 16) = &v50[4 * v49];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          float *v43 = v41;
          int v44 = v43 + 1;
        }
        *(void *)(a5 + 8) = v44;
      }
      if (a4)
      {
        uint64_t v53 = *(int **)(a1 + 3984);
        if (v53 == *(int **)(a1 + 3992)) {
          int v54 = -1;
        }
        else {
          int v54 = *v53;
        }
        uint64_t v56 = *(int **)(a4 + 8);
        unint64_t v55 = *(void *)(a4 + 16);
        if ((unint64_t)v56 >= v55)
        {
          int v58 = *(int **)a4;
          uint64_t v59 = ((uint64_t)v56 - *(void *)a4) >> 2;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v61 = v55 - (void)v58;
          if (v61 >> 1 > v60) {
            unint64_t v60 = v61 >> 1;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62)
          {
            int v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v62);
            int v58 = *(int **)a4;
            uint64_t v56 = *(int **)(a4 + 8);
          }
          else
          {
            int v63 = 0;
          }
          uint64_t v64 = (int *)&v63[4 * v59];
          *uint64_t v64 = v54;
          clockid_t v57 = v64 + 1;
          while (v56 != v58)
          {
            int v65 = *--v56;
            *--uint64_t v64 = v65;
          }
          *(void *)a4 = v64;
          *(void *)(a4 + 8) = v57;
          *(void *)(a4 + 16) = &v63[4 * v62];
          if (v58) {
            operator delete(v58);
          }
        }
        else
        {
          int *v56 = v54;
          clockid_t v57 = v56 + 1;
        }
        *(void *)(a4 + 8) = v57;
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)&v86);
      if (++v35 >= (a3[1] - *a3) >> 2) {
        goto LABEL_81;
      }
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)&v86);
    if (a8)
    {
LABEL_84:
      if (a7)
      {
        uint64_t v66 = kaldi::MatrixBase<float>::NumRows((uint64_t)a6);
        int v67 = kaldi::MatrixBase<float>::NumCols((uint64_t)a6);
        kaldi::Matrix<float>::Matrix((uint64_t)&v86, v66, (v67 - 1), 0, 0);
        uint64_t v68 = *a3;
        if (a3[1] - *a3 != 4)
        {
          unint64_t v69 = 0;
          do
          {
            int v70 = *(_DWORD *)(v68 + 4 * v69);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)v85, (uint64_t)&v86, v69, 1, 0, v87);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)v83, a8, --v70, 1, 0, *(_DWORD *)(a8 + 8));
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, a8, v70, 1, 0, *(_DWORD *)(a8 + 8));
            kaldi::MatrixBase<float>::CopyFromMat<float>(v85, v82, 111);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v83);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v85);
            ++v69;
            uint64_t v68 = *a3;
          }
          while (((a3[1] - *a3) >> 2) - 1 > v69);
        }
        int v71 = kaldi::MatrixBase<float>::NumCols((uint64_t)a6);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v85, (uint64_t)a6, 0, a6[1].i32[1], 0, v71 - 1);
        kaldi::MatrixBase<float>::MulElements((uint64_t)v85, (uint64_t)&v86);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v85);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v86);
      }
    }
  }
  if (a4)
  {
    if (!*(unsigned char *)(a1 + 3919))
    {
      uint64_t v73 = *(int **)a4;
      uint64_t v72 = *(void *)(a4 + 8);
      if (*(void *)a4 != v72)
      {
        long long v74 = (int *)(v72 - 4);
        if (v74 > v73)
        {
          unint64_t v75 = (unint64_t)(v73 + 1);
          do
          {
            int v76 = *(_DWORD *)(v75 - 4);
            *(_DWORD *)(v75 - 4) = *v74;
            *v74-- = v76;
            BOOL v77 = v75 >= (unint64_t)v74;
            v75 += 4;
          }
          while (!v77);
        }
      }
    }
  }
  v99[0] = *MEMORY[0x1E4FBA408];
  uint64_t v78 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v99 + *(void *)(v99[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v100[0] = v78;
  v100[1] = MEMORY[0x1E4FBA470] + 16;
  if (v101 < 0) {
    operator delete((void *)v100[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](&v102);
  kaldi::CuVector<float>::~CuVector(v88);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v89);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v91);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v95);
  if (SHIBYTE(v105) < 0) {
    operator delete(v103);
  }
  return v36;
}

void sub_1B23B0664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a23);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a27);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a54);
  kaldi::CuVector<float>::~CuVector(&a32);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a36);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a42);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a48);
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::BosTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 882);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(kaldi::quasar::TorchEncoderDecoder *this, int a2)
{
  uint64_t v2 = *((void *)this + 498);
  if (v2 == *((void *)this + 499)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(v2 + 4 * a2);
  }
}

uint64_t kaldi::quasar::TorchEncoderDecoder::CheckHasHandover(kaldi::nnet1::Nnet **this)
{
  uint64_t result = kaldi::nnet1::Nnet::IsRnn((kaldi::nnet1::Nnet *)(this + 1));
  if (result) {
    uint64_t result = kaldi::nnet1::Nnet::IsRnn(this[142]);
  }
  *((unsigned char *)this + 3504) = result;
  return result;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::InputSymbols(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((void *)this + 453);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::OutputSymbols(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((void *)this + 454);
}

void *kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(void *result, uint64_t a2, int a3)
{
  int v3 = *((_DWORD *)result + 1006);
  if (v3 >= 1)
  {
    uint64_t v5 = result[505];
    v19[1] = result[502] + 4 * *((_DWORD *)result + 1008) * a3;
    v19[0] = &unk_1F0A472D0;
    void v19[2] = v3;
    void v19[3] = v5;
    kaldi::CuVector<float>::CuVector(v20, v19);
    if (v21 >= 1)
    {
      uint64_t v6 = 0;
      int v7 = (void *)(a2 + 16);
      uint64_t v8 = *(_DWORD **)(a2 + 8);
      do
      {
        int v9 = *(_DWORD *)(v20[1] + 4 * v6);
        if ((unint64_t)v8 >= *v7)
        {
          clockid_t v11 = *(_DWORD **)a2;
          uint64_t v12 = ((uint64_t)v8 - *(void *)a2) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = *v7 - (void)v11;
          if (v14 >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v15);
            clockid_t v11 = *(_DWORD **)a2;
            uint64_t v8 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            unint64_t v16 = 0;
          }
          uint64_t v17 = &v16[4 * v12];
          *(_DWORD *)uint64_t v17 = v9;
          uint64_t v10 = v17 + 4;
          while (v8 != v11)
          {
            int v18 = *--v8;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          *(void *)a2 = v17;
          *(void *)(a2 + 8) = v10;
          *(void *)(a2 + 16) = &v16[4 * v15];
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *uint64_t v8 = v9;
          uint64_t v10 = v8 + 1;
        }
        *(void *)(a2 + 8) = v10;
        ++v6;
        uint64_t v8 = v10;
      }
      while (v6 < v21);
    }
    return kaldi::CuVector<float>::~CuVector(v20);
  }
  return result;
}

void sub_1B23B095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::GetCurrentAlignment(uint64_t a1, void **a2, int a3)
{
  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 3448), 0);
  int v6 = *(_DWORD *)(a1 + 3448);
  if (v6 >= 1)
  {
    int v7 = *(const void **)(a1 + 3464);
    v8[1] = (const void *)(*(void *)(a1 + 3440) + 4 * *(_DWORD *)(a1 + 3456) * a3);
    v8[0] = &unk_1F0A472D0;
    v8[2] = (const void *)v6;
    void v8[3] = v7;
    kaldi::CuVectorBase<float>::CopyToVec<float>(v8, (uint64_t)a2);
  }
}

std::vector<int> *kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(uint64_t a1, uint64_t a2, int a3, int a4, int **a5, int **a6, void *a7)
{
  uint64_t result = *(std::vector<int> **)(a1 + 3656);
  if (result)
  {
    if (kaldi::quasar::Shortlist::MapShortlist(result, a2, *(_DWORD *)(a1 + 3532) - 1, *(_DWORD *)(a1 + 3536) - 1, a3, a4, a5, a6, a7, 0))kaldi::quasar::ShortlistNnetBuilder::ConstrainSoftmax((kaldi::nnet1::Nnet *)(a1 + 384)); {
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 3664), 0);
    }
    return 0;
  }
  return result;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(kaldi::quasar::TorchEncoderDecoder *this)
{
  if (*((void *)this + 458)) {
    return *(unsigned int *)(*((void *)this + 457) + 24);
  }
  else {
    return (*((_DWORD *)this + 883) - 1);
  }
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(kaldi::quasar::TorchEncoderDecoder *this, uint64_t a2)
{
  if (*((void *)this + 458)) {
    return *(unsigned int *)(**((void **)this + 457) + 4 * (int)a2);
  }
  return a2;
}

unint64_t kaldi::quasar::TorchEncoderDecoder::GetSoftmaxIdx(kaldi::quasar::Shortlist **this, uint64_t a2)
{
  if (this[458]) {
    return kaldi::quasar::Shortlist::GetSoftmaxIdx(this[457], a2);
  }
  else {
    return a2;
  }
}

uint64_t kaldi::quasar::TorchEncoderDecoder::TryReadSymbolTable(uint64_t a1, uint64_t *a2, int a3, const std::string *a4)
{
  kaldi::ExpectToken(a2, a3, "<SymbolTable>");
  if (!a3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v22);
    memset(&__p, 0, sizeof(__p));
    int v9 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
      uint64_t v10 = std::locale::use_facet(&v24, v9);
      unsigned __int8 v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
      std::locale::~locale(&v24);
      uint64_t v12 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v11);
      if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0)
      {
        char v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_22:
        if (v13 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__p);
        fst::SymbolTable::ReadText();
      }
      kaldi::Trim(&__p);
      char v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 14) {
          goto LABEL_14;
        }
        std::__split_buffer<std::wstring>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 14) {
          goto LABEL_14;
        }
        std::__split_buffer<std::wstring>::pointer p_p = &__p;
      }
      std::string::size_type v15 = p_p->__r_.__value_.__r.__words[0];
      uint64_t v16 = *(std::string::size_type *)((char *)p_p->__r_.__value_.__r.__words + 6);
      if (v15 == 0x6C6F626D79532F3CLL && v16 == 0x3E656C6261546C6FLL) {
        goto LABEL_22;
      }
LABEL_14:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v18 = &__p;
      }
      else {
        int v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)v18, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
    }
  }
  uint64_t v7 = fst::SymbolTable::Read(a2, a4);
  kaldi::ExpectToken(a2, 1, "</SymbolTable>");
  return v7;
}

void sub_1B23B0E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::ModelFileMap(kaldi::quasar::TorchEncoderDecoder *this)
{
  {
    operator new();
  }
  return kaldi::quasar::TorchEncoderDecoder::ModelFileMap(void)::modelFileMap;
}

void sub_1B23B0F24(_Unwind_Exception *a1)
{
}

void kaldi::quasar::TorchEncoderDecoder::Read(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    int v7 = 2;
    kaldi::quasar::TorchEncoderDecoder::ReadMapped(a1, (uint64_t)__p);
  }
  unsigned __int8 v5 = 0;
  kaldi::Input::Input(__p, a2, &v5);
  uint64_t v4 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)__p);
  kaldi::quasar::TorchEncoderDecoder::Read(a1, v4, v5, 0);
}

void sub_1B23B0FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TorchEncoderDecoder::ReadMapped(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 3640)) {
    kaldi::ReadMapped<kaldi::quasar::TorchEncoderDecoder>(a2);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Nnet already mapped from a file");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::TorchEncoderDecoder::Read(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  kaldi::ExpectToken(a2, a3, "<ModelType>");
  char v98 = a2;
  unsigned int v99 = a3;
  kaldi::ReadToken(a2, a3, a1 + 3576);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Full ModelType ", 15);
    int v8 = *(char *)(a1 + 3599);
    if (v8 >= 0) {
      uint64_t v9 = a1 + 3576;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 3576);
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 3599);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 3584);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
  }
  long long v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  kaldi::SplitStringToVector((const std::string *)(a1 + 3576), "_", 1, (uint64_t)&v103);
  if (v103 == v104)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Undefined Torch model type", 26);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v107);
  }
  uint64_t v11 = a1 + 3552;
  std::string::operator=((std::string *)(a1 + 3552), v103);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"ModelType ", 10);
    int v13 = *(char *)(a1 + 3575);
    if (v13 >= 0) {
      uint64_t v14 = a1 + 3552;
    }
    else {
      uint64_t v14 = *(void *)(a1 + 3552);
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 3575);
    }
    else {
      uint64_t v15 = *(void *)(a1 + 3560);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
  }
  int v16 = *(char *)(a1 + 3575);
  if (v16 < 0)
  {
    if (*(void *)(a1 + 3560) != 6) {
      goto LABEL_325;
    }
    int v20 = *(_DWORD **)v11;
    if (**(_DWORD **)v11 != 1668443988 || *(_WORD *)(*(void *)v11 + 4) != 20072)
    {
      if (*v20 != 1668443988 || *((_WORD *)v20 + 2) != 19816)
      {
        if (*v20 != 1668443988 || *((_WORD *)v20 + 2) != 21608) {
          goto LABEL_32;
        }
LABEL_52:
        int v24 = 2;
LABEL_55:
        *(_DWORD *)(a1 + 3548) = v24;
        *(_WORD *)(a1 + 3912) = 0;
        uint64_t v28 = v103;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v104 - (char *)v103) >> 3) < 2)
        {
LABEL_322:
          kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 8), v98, v99, a4);
          uint64_t TrainOptions = kaldi::nnet1::Nnet::GetTrainOptions((kaldi::nnet1::Nnet *)(a1 + 8));
          *(void *)std::string __str = &unk_1F0A4A6D0;
          long long v92 = *(_OWORD *)(TrainOptions + 8);
          *(_OWORD *)&__str[23] = *(_OWORD *)(TrainOptions + 23);
          *(_OWORD *)&__str[8] = v92;
          __str[38] = 1;
          kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)(a1 + 8), (const kaldi::nnet1::NnetTrainOptions *)__str, 1);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"dot attention ", 14);
            std::ostream::operator<<();
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
          }
          kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)&v107);
        }
        uint64_t v29 = 0;
        clockid_t v30 = (void **)(a1 + 3952);
        uint64_t v31 = (void **)(a1 + 3928);
        unint64_t v32 = 1;
        while (1)
        {
          uint64_t v33 = &v28[v29];
          uint64_t v34 = (uint64_t)&v28[v29 + 1];
          if (SHIBYTE(v33[1].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v34, v33[1].__r_.__value_.__l.__size_);
          }
          else
          {
            long long v35 = *(_OWORD *)v34;
            *(void *)&__str[16] = *(void *)(v34 + 16);
            *(_OWORD *)std::string __str = v35;
          }
          if ((__str[23] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(&v102, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
          }
          else {
            std::string v102 = *(std::string *)__str;
          }
          memset(&v101, 0, sizeof(v101));
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
            float v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Processing token ", 17);
            if (__str[23] >= 0) {
              int v37 = __str;
            }
            else {
              int v37 = *(unsigned char **)__str;
            }
            if (__str[23] >= 0) {
              uint64_t v38 = __str[23];
            }
            else {
              uint64_t v38 = *(void *)&__str[8];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
          }
          LODWORD(v39) = __str[23];
          if ((__str[23] & 0x80000000) == 0)
          {
            switch(__str[23])
            {
              case 3:
                if (*(unsigned __int16 *)__str != 20546 || __str[2] != 69) {
                  goto LABEL_137;
                }
                goto LABEL_153;
              case 4:
                goto LABEL_134;
              case 5:
                goto LABEL_122;
              case 6:
LABEL_116:
                if (*(_DWORD *)__str == 1095781716 && *(unsigned __int16 *)&__str[4] == 21588) {
                  goto LABEL_150;
                }
                if (__str[23] == 4) {
                  goto LABEL_134;
                }
                if (__str[23] != 5) {
                  goto LABEL_137;
                }
LABEL_122:
                if (*(_DWORD *)__str == 1279871043 && __str[4] == 68) {
                  goto LABEL_127;
                }
LABEL_133:
                if (__str[23] != 4) {
                  goto LABEL_137;
                }
LABEL_134:
                if (*(_DWORD *)__str == 1416916804) {
                  goto LABEL_135;
                }
LABEL_137:
                unint64_t v41 = __str[23];
                break;
              case 7:
LABEL_129:
                if (*(_DWORD *)__str != 1867807056 || *(_DWORD *)&__str[3] != 1751347823) {
                  goto LABEL_133;
                }
                goto LABEL_163;
              case 9:
                if (*(void *)__str != 0x53494C54524F4853 || __str[8] != 84)
                {
                  switch(__str[23])
                  {
                    case 4:
                      goto LABEL_134;
                    case 5:
                      goto LABEL_122;
                    case 6:
                      goto LABEL_116;
                    case 7:
                      goto LABEL_129;
                    default:
                      goto LABEL_137;
                  }
                }
                goto LABEL_147;
              default:
                goto LABEL_137;
            }
LABEL_138:
            if (v41 <= 8) {
              goto LABEL_166;
            }
            std::string::basic_string(&v107, (const std::string *)__str, 0, 7uLL, (std::allocator<char> *)&v106);
            if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) == 7)
              {
                BOOL v51 = LODWORD(v107.__r_.__value_.__l.__data_) == 1415865409
                   && *(_DWORD *)((char *)v107.__r_.__value_.__r.__words + 3) == 979853652;
                LODWORD(v39) = __str[23];
                unint64_t v52 = *(void *)&__str[8];
                if (v51) {
                  goto LABEL_222;
                }
                goto LABEL_167;
              }
              LODWORD(v39) = __str[23];
LABEL_166:
              unint64_t v52 = *(void *)&__str[8];
              goto LABEL_167;
            }
            BOOL v54 = v107.__r_.__value_.__l.__size_ == 7
               && *(_DWORD *)v107.__r_.__value_.__l.__data_ == 1415865409
               && *(_DWORD *)(v107.__r_.__value_.__r.__words[0] + 3) == 979853652;
            operator delete(v107.__r_.__value_.__l.__data_);
            LODWORD(v39) = __str[23];
            unint64_t v52 = *(void *)&__str[8];
            if (v54)
            {
LABEL_222:
              unint64_t v39 = v39;
              if ((v39 & 0x80u) != 0) {
                unint64_t v39 = v52;
              }
              std::string::basic_string(&v107, (const std::string *)__str, 7uLL, v39 - 7, (std::allocator<char> *)&v106);
              if (*(char *)(a1 + 3951) < 0) {
                operator delete(*v31);
              }
              *(_OWORD *)uint64_t v31 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
              *(void *)(a1 + 3944) = *((void *)&v107.__r_.__value_.__l + 2);
              MEMORY[0x1B3EA7B20](&v102, "AddTag");
              if (*(char *)(a1 + 3951) < 0)
              {
                std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)(a1 + 3928), *(void *)(a1 + 3936));
              }
              else
              {
                *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)v31;
                v107.__r_.__value_.__r.__words[2] = *(void *)(a1 + 3944);
              }
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v101, &v107, v108, 1uLL);
              if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v107.__r_.__value_.__l.__data_);
              }
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                long long v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Extracted add tag : ", 20);
                int v75 = *(char *)(a1 + 3951);
                if (v75 >= 0) {
                  uint64_t v76 = a1 + 3928;
                }
                else {
                  uint64_t v76 = *(void *)(a1 + 3928);
                }
                if (v75 >= 0) {
                  uint64_t v77 = *(unsigned __int8 *)(a1 + 3951);
                }
                else {
                  uint64_t v77 = *(void *)(a1 + 3936);
                }
                uint64_t v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
                int v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" from ", 6);
                if (__str[23] >= 0) {
                  uint64_t v80 = __str;
                }
                else {
                  uint64_t v80 = *(unsigned char **)__str;
                }
                if (__str[23] >= 0) {
                  uint64_t v81 = __str[23];
                }
                else {
                  uint64_t v81 = *(void *)&__str[8];
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
              }
              LODWORD(v106) = kaldi::quasar::ToAddTag(a1 + 3928);
              kaldi::quasar::FromAddTag((int *)&v106, &v107);
              if (*(char *)(a1 + 3951) < 0) {
                operator delete(*v31);
              }
              *(_OWORD *)uint64_t v31 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
              *(void *)(a1 + 3944) = *((void *)&v107.__r_.__value_.__l + 2);
              *(unsigned char *)(a1 + 3921) = 1;
              if (kaldi::g_kaldi_verbose_level < 0) {
                goto LABEL_303;
              }
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
              unint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"AddTag value ", 13);
              int v83 = *(char *)(a1 + 3951);
              if (v83 >= 0) {
                uint64_t v84 = a1 + 3928;
              }
              else {
                uint64_t v84 = *(void *)(a1 + 3928);
              }
              if (v83 >= 0) {
                uint64_t v85 = *(unsigned __int8 *)(a1 + 3951);
              }
              else {
                uint64_t v85 = *(void *)(a1 + 3936);
              }
              goto LABEL_301;
            }
LABEL_167:
            if ((v39 & 0x80u) == 0) {
              unint64_t v52 = v39;
            }
            if (v52 >= 0xC)
            {
              std::string::basic_string(&v107, (const std::string *)__str, 0, 0xAuLL, (std::allocator<char> *)&v106);
              if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) == 10)
                {
                  BOOL v55 = v107.__r_.__value_.__r.__words[0] == 0x616D726F46676154
                     && LOWORD(v107.__r_.__value_.__r.__words[1]) == 14964;
                  LODWORD(v39) = __str[23];
                  if (v55) {
                    goto LABEL_198;
                  }
                  goto LABEL_176;
                }
LABEL_229:
                LODWORD(v39) = __str[23];
                if ((__str[23] & 0x80) != 0)
                {
LABEL_230:
                  if (*(void *)&__str[8] != 6)
                  {
                    if (*(void *)&__str[8] == 10
                      && **(void **)__str == 0x626D456572616853
                      && *(_WORD *)(*(void *)__str + 8) == 25701)
                    {
LABEL_256:
                      *(unsigned char *)(a1 + 3920) = 1;
                      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found shared embeddings token", 29);
                        goto LABEL_302;
                      }
                      goto LABEL_303;
                    }
                    goto LABEL_246;
                  }
                  if (**(_DWORD **)__str == 1348693573 && *(_WORD *)(*(void *)__str + 4) == 29551)
                  {
LABEL_254:
                    *(unsigned char *)(a1 + 3915) = 1;
                    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found encoder position embedding token", 38);
                      goto LABEL_302;
                    }
                    goto LABEL_303;
                  }
                  int v58 = *(unsigned char **)__str;
LABEL_242:
                  int v71 = *(_DWORD *)v58;
                  int v72 = *((unsigned __int16 *)v58 + 2);
                  if (v71 == 1348691268 && v72 == 29551)
                  {
                    *(unsigned char *)(a1 + 3916) = 1;
                    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found decoder position embedding token", 38);
                      goto LABEL_302;
                    }
                    goto LABEL_303;
                  }
                  goto LABEL_246;
                }
LABEL_177:
                if (v39 == 6)
                {
                  if (*(_DWORD *)__str == 1348693573 && *(unsigned __int16 *)&__str[4] == 29551) {
                    goto LABEL_254;
                  }
                  int v58 = __str;
                  goto LABEL_242;
                }
                if (v39 == 10
                  && *(void *)__str == 0x626D456572616853
                  && *(unsigned __int16 *)&__str[8] == 25701)
                {
                  goto LABEL_256;
                }
LABEL_246:
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AddSrcBos"))
                {
                  *(unsigned char *)(a1 + 3917) = 1;
                  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found add beginning of sentence tag", 35);
                    goto LABEL_302;
                  }
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AddSrcEos"))
                {
                  *(unsigned char *)(a1 + 3918) = 1;
                  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found add end of sentence tag", 29);
                    goto LABEL_302;
                  }
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AlignModel"))
                {
                  *(unsigned char *)(a1 + 3922) = 1;
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "ShiftedAlignments"))
                {
                  *(unsigned char *)(a1 + 3923) = 1;
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "MultipleDecoders"))
                {
                  *(unsigned char *)(a1 + 3924) = 1;
                  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found multiple decoders token", 29);
                    goto LABEL_302;
                  }
                }
                else
                {
                  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "NoSymbolTables"))
                  {
                    if (kaldi::g_kaldi_verbose_level >= -1)
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                      long long v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Unknown model sub tag ", 22);
                      if (__str[23] >= 0) {
                        int32x2_t v89 = __str;
                      }
                      else {
                        int32x2_t v89 = *(unsigned char **)__str;
                      }
                      if (__str[23] >= 0) {
                        uint64_t v90 = __str[23];
                      }
                      else {
                        uint64_t v90 = *(void *)&__str[8];
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v89, v90);
                      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                    }
                    goto LABEL_303;
                  }
                  *(unsigned char *)(a1 + 3925) = 1;
                  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found 'NoSymbolTables' token", 28);
                    goto LABEL_302;
                  }
                }
                goto LABEL_303;
              }
              if (v107.__r_.__value_.__l.__size_ != 10)
              {
                operator delete(v107.__r_.__value_.__l.__data_);
                goto LABEL_229;
              }
              BOOL v60 = *(void *)v107.__r_.__value_.__l.__data_ != 0x616D726F46676154
                 || *(_WORD *)(v107.__r_.__value_.__r.__words[0] + 8) != 14964;
              operator delete(v107.__r_.__value_.__l.__data_);
              LODWORD(v39) = __str[23];
              if (!v60)
              {
LABEL_198:
                unint64_t v39 = v39;
                if ((v39 & 0x80u) != 0) {
                  unint64_t v39 = *(void *)&__str[8];
                }
                std::string::basic_string(&v107, (const std::string *)__str, 0xAuLL, v39 - 10, (std::allocator<char> *)&v106);
                if (*(char *)(a1 + 3975) < 0) {
                  operator delete(*v30);
                }
                *(_OWORD *)clockid_t v30 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
                *(void *)(a1 + 3968) = *((void *)&v107.__r_.__value_.__l + 2);
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                  uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Extracted tag format : ", 23);
                  int v62 = *(char *)(a1 + 3975);
                  if (v62 >= 0) {
                    uint64_t v63 = a1 + 3952;
                  }
                  else {
                    uint64_t v63 = *(void *)(a1 + 3952);
                  }
                  if (v62 >= 0) {
                    uint64_t v64 = *(unsigned __int8 *)(a1 + 3975);
                  }
                  else {
                    uint64_t v64 = *(void *)(a1 + 3960);
                  }
                  int v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v63, v64);
                  uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" from ", 6);
                  if (__str[23] >= 0) {
                    int v67 = __str;
                  }
                  else {
                    int v67 = *(unsigned char **)__str;
                  }
                  if (__str[23] >= 0) {
                    uint64_t v68 = __str[23];
                  }
                  else {
                    uint64_t v68 = *(void *)&__str[8];
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
                  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
                }
                LODWORD(v106) = kaldi::quasar::ToTagFormat((void *)(a1 + 3952));
                kaldi::quasar::FromTagFormat((int *)&v106, &v107);
                if (*(char *)(a1 + 3975) < 0) {
                  operator delete(*v30);
                }
                *(_OWORD *)clockid_t v30 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
                *(void *)(a1 + 3968) = *((void *)&v107.__r_.__value_.__l + 2);
                MEMORY[0x1B3EA7B20](&v102, "TagFormat");
                if (*(char *)(a1 + 3975) < 0)
                {
                  std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)(a1 + 3952), *(void *)(a1 + 3960));
                }
                else
                {
                  *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)v30;
                  v107.__r_.__value_.__r.__words[2] = *(void *)(a1 + 3968);
                }
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v101, &v107, v108, 1uLL);
                if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v107.__r_.__value_.__l.__data_);
                }
                *(unsigned char *)(a1 + 3921) = 1;
                if (kaldi::g_kaldi_verbose_level < 0) {
                  goto LABEL_303;
                }
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                unint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"TagFormat value ", 16);
                int v86 = *(char *)(a1 + 3975);
                if (v86 >= 0) {
                  uint64_t v84 = a1 + 3952;
                }
                else {
                  uint64_t v84 = *(void *)(a1 + 3952);
                }
                if (v86 >= 0) {
                  uint64_t v85 = *(unsigned __int8 *)(a1 + 3975);
                }
                else {
                  uint64_t v85 = *(void *)(a1 + 3960);
                }
LABEL_301:
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, v84, v85);
LABEL_302:
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
                goto LABEL_303;
              }
            }
LABEL_176:
            if ((v39 & 0x80) != 0) {
              goto LABEL_230;
            }
            goto LABEL_177;
          }
          unint64_t v41 = *(void *)&__str[8];
          if (*(void *)&__str[8] == 3 && **(_WORD **)__str == 20546 && *(unsigned char *)(*(void *)__str + 2) == 69)
          {
LABEL_153:
            if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found BPE token", 15);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
            }
            *(unsigned char *)(a1 + 3912) = 1;
            goto LABEL_303;
          }
          if (*(void *)&__str[8] == 9)
          {
            if (**(void **)__str == 0x53494C54524F4853 && *(unsigned char *)(*(void *)__str + 8) == 84)
            {
LABEL_147:
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found SHORTLIST token", 21);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
              }
              goto LABEL_303;
            }
            unint64_t v41 = *(void *)&__str[8];
          }
          if (v41 == 6)
          {
            if (**(_DWORD **)__str == 1095781716 && *(_WORD *)(*(void *)__str + 4) == 21588)
            {
LABEL_150:
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found TMPATT token", 18);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v107);
              }
              *(unsigned char *)(a1 + 3913) = 1;
              goto LABEL_303;
            }
            unint64_t v41 = *(void *)&__str[8];
          }
          if (v41 == 5)
          {
            if (**(_DWORD **)__str == 1279871043 && *(unsigned char *)(*(void *)__str + 4) == 68)
            {
LABEL_127:
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found CHILD token", 17);
                goto LABEL_302;
              }
              goto LABEL_303;
            }
            unint64_t v41 = *(void *)&__str[8];
          }
          if (v41 == 7)
          {
            if (**(_DWORD **)__str == 1867807056 && *(_DWORD *)(*(void *)__str + 3) == 1751347823)
            {
LABEL_163:
              *(unsigned char *)(a1 + 3919) = 1;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found PyTorch token", 19);
                goto LABEL_302;
              }
              goto LABEL_303;
            }
            unint64_t v41 = *(void *)&__str[8];
          }
          if (v41 != 4) {
            goto LABEL_138;
          }
          if (**(_DWORD **)__str != 1416916804) {
            goto LABEL_166;
          }
LABEL_135:
          *(unsigned char *)(a1 + 3914) = 1;
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Found DotT token", 16);
            goto LABEL_302;
          }
LABEL_303:
          std::__split_buffer<std::wstring>::pointer v106 = &v102;
          int v87 = (std::vector<std::wstring> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 3600), (const void **)&v102.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v106)+ 7);
          if (v87 != &v101) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v87, (std::string *)v101.__begin_, (long long *)v101.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_ - (char *)v101.__begin_) >> 3));
          }
          v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v101;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          ++v32;
          uint64_t v28 = v103;
          ++v29;
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v104 - (char *)v103) >> 3) <= v32) {
            goto LABEL_322;
          }
        }
      }
LABEL_54:
      int v24 = 1;
      goto LABEL_55;
    }
  }
  else
  {
    if (v16 != 6) {
      goto LABEL_325;
    }
    if (*(_DWORD *)v11 != 1668443988 || *(_WORD *)(a1 + 3556) != 20072)
    {
      if (*(_DWORD *)v11 != 1668443988 || *(_WORD *)(a1 + 3556) != 19816)
      {
        BOOL v19 = *(_DWORD *)v11 == 1668443988 && *(_WORD *)(a1 + 3556) == 21608;
        int v20 = (_DWORD *)(a1 + 3552);
        if (!v19)
        {
LABEL_32:
          int v21 = *v20;
          int v22 = *((unsigned __int16 *)v20 + 2);
          if (v21 != 1668443988 || v22 != 18024)
          {
LABEL_325:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v107);
            long long v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Unsupported Torch model type : ", 31);
            int v94 = *(char *)(a1 + 3575);
            if (v94 >= 0) {
              uint64_t v95 = a1 + 3552;
            }
            else {
              uint64_t v95 = *(void *)(a1 + 3552);
            }
            if (v94 >= 0) {
              uint64_t v96 = *(unsigned __int8 *)(a1 + 3575);
            }
            else {
              uint64_t v96 = *(void *)(a1 + 3560);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, v95, v96);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v107);
          }
          int v24 = 3;
          goto LABEL_55;
        }
        goto LABEL_52;
      }
      goto LABEL_54;
    }
  }
  int v24 = 0;
  goto LABEL_55;
}

void sub_1B23B31BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1B23B31CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1B23B3200(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B23B3318);
}

void sub_1B23B3210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1B23B3220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1B23B3230()
{
}

void sub_1B23B3238()
{
}

void sub_1B23B3250()
{
  MEMORY[0x1B3EA8670](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x1B23B32B8);
}

void sub_1B23B3270()
{
}

void sub_1B23B3280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  JUMPOUT(0x1B23B3308);
}

void sub_1B23B3288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1B23B3298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    JUMPOUT(0x1B23B32C4);
  }
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&a17);
  JUMPOUT(0x1B23B3308);
}

void sub_1B23B32D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39)
{
  a39 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  a39 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

void kaldi::ReadMapped<kaldi::quasar::TorchEncoderDecoder>(uint64_t a1)
{
  v18[34] = *MEMORY[0x1E4F143B8];
  char v8 = 0;
  kaldi::Input::Input(v7, a1, &v8);
  if (v8)
  {
    uint64_t v2 = kaldi::Input::Stream((kaldi::Input *)v7);
    std::istream::seekg();
    std::istream::tellg();
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    std::istream::seekg();
    fst::MappedFile::Map(v2, a1, (fst::MappedFile *)v18[16]);
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
  int v4 = *(char *)(a1 + 23);
  if (v4 >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)a1;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
}

void sub_1B23B3540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::quasar::TorchEncoderDecoder::SetMappedFile(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 3640))
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v5, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nnet already mapped from a file - ignoring", 42);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v5);
    }
  }
  else
  {
    uint64_t v2 = *a2;
    uint64_t v3 = a2[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 3640) = v2;
    int v4 = *(std::__shared_weak_count **)(a1 + 3648);
    *(void *)(a1 + 3648) = v3;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1B23B3640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::HasBpeModel(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned __int8 *)this + 3912);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::BpeModel(kaldi::quasar::TorchEncoderDecoder *this)
{
  return (uint64_t)this + 3672;
}

void kaldi::quasar::TorchEncoderDecoder::SelectModel(void *a1@<X0>, long long *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (uint64_t **)(a1 + 144);
  if (a1 + 145 == (void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 144), (const void **)a2))
  {
    uint64_t v11 = a1[144];
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v12 = *(void *)(v11 + 64);
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    a1[142] = v13;
    long long v14 = (std::__shared_weak_count *)a1[143];
    a1[143] = v12;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    long long v15 = a2;
    int v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v15);
    uint64_t v9 = v7[7];
    uint64_t v8 = v7[8];
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    a1[142] = v9;
    long long v10 = (std::__shared_weak_count *)a1[143];
    a1[143] = v8;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      uint64_t v8 = a1[143];
      uint64_t v9 = a1[142];
    }
    *a3 = v9;
    a3[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void std::shared_ptr<kaldi::nnet1::Nnet>::shared_ptr[abi:ne180100]<kaldi::nnet1::Nnet,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B23B37C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

kaldi::nnet1::Nnet *std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(kaldi::nnet1::Nnet **)(a1 + 24);
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t kaldi::quasar::SeevaInferenceConfig::PassToCEConfig(uint64_t this, kaldi::quasar::ComputeEngineConfigItf *a2)
{
  uint64_t v3 = this;
  v6[19] = *MEMORY[0x1E4F143B8];
  if (*(char *)(this + 111) < 0)
  {
    if (!*(void *)(this + 96)) {
      return this;
    }
  }
  else if (!*(unsigned char *)(this + 111))
  {
    return this;
  }
  std::ifstream::basic_ifstream(v4);
  if (v5[15]) {
    (*(void (**)(kaldi::quasar::ComputeEngineConfigItf *, uint64_t *, void, uint64_t))(*(void *)a2 + 16))(a2, v4, *(unsigned __int8 *)(v3 + 112), v3 + 120);
  }
  v4[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v5);
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](v6);
}

void sub_1B23B3A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SeevaStreamInference::SeevaStreamInference(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = &unk_1F0A51048;
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = &unk_1F0A51028;
  long long v6 = *(_OWORD *)(a3 + 8);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a3 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  long long v7 = *(_OWORD *)(a3 + 32);
  *(void *)(a1 + 64) = *(void *)(a3 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  long long v8 = *(_OWORD *)(a3 + 56);
  *(void *)(a1 + 88) = *(void *)(a3 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a1 + 96) = *(void *)(a3 + 80);
  long long v9 = *(_OWORD *)(a3 + 88);
  *(void *)(a1 + 120) = *(void *)(a3 + 104);
  *(_OWORD *)(a1 + 104) = v9;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 88) = 0;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a3 + 112);
  long long v10 = *(_OWORD *)(a3 + 120);
  *(void *)(a1 + 152) = *(void *)(a3 + 136);
  *(_OWORD *)(a1 + 136) = v10;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a1 + 16) = &unk_1F0A51400;
  long long v11 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 176) = v11;
  long long v12 = *(_OWORD *)(a3 + 176);
  long long v13 = *(_OWORD *)(a3 + 192);
  long long v14 = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(a1 + 236) = *(_OWORD *)(a3 + 220);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 192) = v12;
  long long v15 = *a4;
  *(void *)(a1 + 272) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 256) = v15;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  long long v16 = *(long long *)((char *)a4 + 24);
  *(void *)(a1 + 296) = *((void *)a4 + 5);
  *(_OWORD *)(a1 + 280) = v16;
  *((void *)a4 + 4) = 0;
  *((void *)a4 + 5) = 0;
  *((void *)a4 + 3) = 0;
  long long v17 = a4[3];
  *(void *)(a1 + 320) = *((void *)a4 + 8);
  *(_OWORD *)(a1 + 304) = v17;
  *((void *)a4 + 7) = 0;
  *((void *)a4 + 8) = 0;
  *((void *)a4 + 6) = 0;
  long long v18 = *(long long *)((char *)a4 + 72);
  *(void *)(a1 + 344) = *((void *)a4 + 11);
  *(_OWORD *)(a1 + 328) = v18;
  *((void *)a4 + 9) = 0;
  *((void *)a4 + 10) = 0;
  *((void *)a4 + 11) = 0;
  long long v19 = a4[6];
  *(void *)(a1 + 368) = *((void *)a4 + 14);
  *(_OWORD *)(a1 + 352) = v19;
  *((void *)a4 + 12) = 0;
  *((void *)a4 + 13) = 0;
  *((void *)a4 + 14) = 0;
  long long v20 = *(long long *)((char *)a4 + 120);
  *(void *)(a1 + 392) = *((void *)a4 + 17);
  *(_OWORD *)(a1 + 376) = v20;
  *((void *)a4 + 15) = 0;
  *((void *)a4 + 16) = 0;
  *((void *)a4 + 17) = 0;
  long long v21 = a4[9];
  *(void *)(a1 + 416) = *((void *)a4 + 20);
  *(_OWORD *)(a1 + 400) = v21;
  *((void *)a4 + 18) = 0;
  *((void *)a4 + 19) = 0;
  *((void *)a4 + 20) = 0;
  long long v22 = *(long long *)((char *)a4 + 168);
  *(void *)(a1 + 440) = *((void *)a4 + 23);
  *(_OWORD *)(a1 + 424) = v22;
  *((void *)a4 + 21) = 0;
  *((void *)a4 + 22) = 0;
  *((void *)a4 + 23) = 0;
  long long v23 = a4[12];
  *(void *)(a1 + 464) = *((void *)a4 + 26);
  *(_OWORD *)(a1 + 448) = v23;
  *((void *)a4 + 24) = 0;
  *((void *)a4 + 25) = 0;
  *((void *)a4 + 26) = 0;
  long long v24 = *(long long *)((char *)a4 + 216);
  *(void *)(a1 + 488) = *((void *)a4 + 29);
  *(_OWORD *)(a1 + 472) = v24;
  *((void *)a4 + 27) = 0;
  *((void *)a4 + 28) = 0;
  *((void *)a4 + 29) = 0;
  long long v25 = a4[15];
  *(void *)(a1 + 512) = *((void *)a4 + 32);
  *(_OWORD *)(a1 + 496) = v25;
  *((void *)a4 + 30) = 0;
  *((void *)a4 + 31) = 0;
  *((void *)a4 + 32) = 0;
  long long v26 = *(long long *)((char *)a4 + 264);
  *(void *)(a1 + 536) = *((void *)a4 + 35);
  *(_OWORD *)(a1 + 520) = v26;
  *((void *)a4 + 33) = 0;
  *((void *)a4 + 34) = 0;
  *((void *)a4 + 35) = 0;
  long long v27 = a4[18];
  *(void *)(a1 + 560) = *((void *)a4 + 38);
  *(_OWORD *)(a1 + 544) = v27;
  *((void *)a4 + 36) = 0;
  *((void *)a4 + 37) = 0;
  *((void *)a4 + 38) = 0;
  long long v28 = *(long long *)((char *)a4 + 312);
  *(void *)(a1 + 584) = *((void *)a4 + 41);
  *(_OWORD *)(a1 + 568) = v28;
  *((void *)a4 + 39) = 0;
  *((void *)a4 + 40) = 0;
  *((void *)a4 + 41) = 0;
  long long v29 = a4[21];
  *(void *)(a1 + 608) = *((void *)a4 + 44);
  *(_OWORD *)(a1 + 592) = v29;
  *((void *)a4 + 42) = 0;
  *((void *)a4 + 43) = 0;
  *((void *)a4 + 44) = 0;
  long long v30 = *(long long *)((char *)a4 + 360);
  *(void *)(a1 + 632) = *((void *)a4 + 47);
  *(_OWORD *)(a1 + 616) = v30;
  *((void *)a4 + 45) = 0;
  *((void *)a4 + 46) = 0;
  *((void *)a4 + 47) = 0;
  long long v31 = a4[24];
  *(void *)(a1 + 656) = *((void *)a4 + 50);
  *(_OWORD *)(a1 + 640) = v31;
  *((void *)a4 + 48) = 0;
  *((void *)a4 + 49) = 0;
  *((void *)a4 + 50) = 0;
  long long v32 = *(long long *)((char *)a4 + 408);
  *(void *)(a1 + 680) = *((void *)a4 + 53);
  *(_OWORD *)(a1 + 664) = v32;
  *((void *)a4 + 51) = 0;
  *((void *)a4 + 52) = 0;
  *((void *)a4 + 53) = 0;
  long long v33 = a4[27];
  *(void *)(a1 + 704) = *((void *)a4 + 56);
  *(_OWORD *)(a1 + 688) = v33;
  *((void *)a4 + 54) = 0;
  *((void *)a4 + 55) = 0;
  *((void *)a4 + 56) = 0;
  long long v34 = *(long long *)((char *)a4 + 456);
  *(void *)(a1 + 728) = *((void *)a4 + 59);
  *(_OWORD *)(a1 + 712) = v34;
  *((void *)a4 + 57) = 0;
  *((void *)a4 + 58) = 0;
  *((void *)a4 + 59) = 0;
  long long v35 = (void *)(a1 + 736);
  uint64_t v36 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  unint64_t v52 = v35;
  (*(void (**)(uint64_t, void **))(*(void *)v36 + 56))(v36, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v37 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v37 + 56))(v37, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v38 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v38 + 56))(v38, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v39 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v39 + 48))(v39, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v40 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v40 + 48))(v40, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v41 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v41 + 48))(v41, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v42 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v42 + 48))(v42, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v43 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v43 + 56))(v43, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v44 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v44 + 56))(v44, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v45 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v45 + 56))(v45, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v46 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v46 + 48))(v46, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v47 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v47 + 48))(v47, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v48 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v48 + 56))(v48, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v49 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v49 + 56))(v49, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  uint64_t v50 = *(void *)(a1 + 8);
  std::string __p = 0;
  BOOL v54 = 0;
  uint64_t v55 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v50 + 56))(v50, &__p);
  if (__p)
  {
    BOOL v54 = __p;
    operator delete(__p);
  }
  (*(void (**)(void, void, float))(*(void *)*v52 + 104))(*v52, 0, *(float *)(a1 + 24));
  (*(void (**)(void, void, float))(**(void **)(a1 + 744) + 104))(*(void *)(a1 + 744), 0, *(float *)(a1 + 168));
  (*(void (**)(void, void, float))(**(void **)(a1 + 752) + 104))(*(void *)(a1 + 752), 0, *(float *)(a1 + 172));
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 760) + 96))(*(void *)(a1 + 760), 1, 0);
  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 768) + 96))(*(void *)(a1 + 768), 0xFFFFFFFFLL, 0);
  (*(void (**)(void, void, void))(**(void **)(a1 + 776) + 96))(*(void *)(a1 + 776), *(unsigned int *)(a1 + 188), 0);
  (*(void (**)(void, void, void))(**(void **)(a1 + 784) + 96))(*(void *)(a1 + 784), *(unsigned int *)(a1 + 192), 0);
  (*(void (**)(void, void, float))(**(void **)(a1 + 792) + 104))(*(void *)(a1 + 792), 0, *(float *)(a1 + 196));
  (*(void (**)(void, void, float))(**(void **)(a1 + 800) + 104))(*(void *)(a1 + 800), 0, *(float *)(a1 + 200));
  (*(void (**)(void, void, float))(**(void **)(a1 + 808) + 104))(*(void *)(a1 + 808), 0, *(float *)(a1 + 204));
  (*(void (**)(void, void, void))(**(void **)(a1 + 816) + 96))(*(void *)(a1 + 816), *(unsigned int *)(a1 + 224), 0);
  (*(void (**)(void, void, void))(**(void **)(a1 + 824) + 96))(*(void *)(a1 + 824), *(unsigned int *)(a1 + 228), 0);
  (*(void (**)(void, void, float))(**(void **)(a1 + 832) + 104))(*(void *)(a1 + 832), 0, *(float *)(a1 + 240));
  (*(void (**)(void, void, float))(**(void **)(a1 + 840) + 104))(*(void *)(a1 + 840), 0, *(float *)(a1 + 244));
  (*(void (**)(void, void, float))(**(void **)(a1 + 848) + 104))(*(void *)(a1 + 848), 0, *(float *)(a1 + 248));
  return a1;
}

void sub_1B23B44F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, void **a15, uint64_t *a16, uint64_t *a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v28 = *v23;
  uint64_t *v23 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *v22;
  *long long v22 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *v26;
  *long long v26 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *v25;
  *long long v25 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *v20;
  *long long v20 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *a9;
  *a9 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *a10;
  *a10 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *a11;
  *a11 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *a12;
  *a12 = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *v24;
  uint64_t *v24 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = *a16;
  *a16 = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = *a13;
  *a13 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *a14;
  *a14 = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = *a17;
  *a17 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  kaldi::quasar::SeevaStreamInferenceTensorNames::~SeevaStreamInferenceTensorNames(v21);
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(a15);
  uint64_t v42 = *(void *)(v19 + 8);
  *(void *)(v19 + 8) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStreamInference::~SeevaStreamInference(kaldi::quasar::SeevaStreamInference *this)
{
  *(void *)this = &unk_1F0A51048;
  uint64_t v2 = *((void *)this + 106);
  *((void *)this + 106) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 104);
  *((void *)this + 104) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 103);
  *((void *)this + 103) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 100);
  *((void *)this + 100) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 99);
  *((void *)this + 99) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 96);
  *((void *)this + 96) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 95);
  *((void *)this + 95) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  kaldi::quasar::SeevaStreamInferenceTensorNames::~SeevaStreamInferenceTensorNames((void **)this + 32);
  *((void *)this + 2) = &unk_1F0A51028;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  uint64_t v17 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
}

{
  uint64_t vars8;

  kaldi::quasar::SeevaStreamInference::~SeevaStreamInference(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::quasar::SeevaStreamInference::RunInference(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int *a6, _DWORD *a7, void *a8)
{
  *(void *)&long long v84 = *MEMORY[0x1E4F143B8];
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  unint64_t v78 = 0;
  uint64_t v15 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, (long long *)(a1 + 256), *a2);
  uint64_t v17 = v15;
  uint64_t v77 = v15;
  if (*(float *)(a1 + 240) > 0.0)
  {
    long long v18 = (long long *)(a1 + 448);
    std::string::size_type v19 = *(void *)(a1 + 832);
    if ((unint64_t)v15 >= v78)
    {
      uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v18, *(void *)(a1 + 832));
    }
    else
    {
      if (*(char *)(a1 + 471) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(a1 + 448), *(void *)(a1 + 456));
      }
      else
      {
        __n128 v16 = (__n128)*v18;
        v15->__r_.__value_.__r.__words[2] = *(void *)(a1 + 464);
        *(__n128 *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v19;
      uint64_t v17 = (std::string *)((char *)v17 + 32);
    }
    uint64_t v77 = v17;
  }
  if (*(float *)(a1 + 244) > 0.0)
  {
    long long v20 = (long long *)(a1 + 688);
    std::string::size_type v21 = *(void *)(a1 + 840);
    if ((unint64_t)v17 >= v78)
    {
      uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v20, *(void *)(a1 + 840));
    }
    else
    {
      if (*(char *)(a1 + 711) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 688), *(void *)(a1 + 696));
      }
      else
      {
        __n128 v16 = (__n128)*v20;
        v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 704);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v21;
      uint64_t v17 = (std::string *)((char *)v17 + 32);
    }
    uint64_t v77 = v17;
  }
  if (*(float *)(a1 + 248) > 0.0)
  {
    long long v22 = (long long *)(a1 + 712);
    std::string::size_type v23 = *(void *)(a1 + 848);
    if ((unint64_t)v17 >= v78)
    {
      uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v22, *(void *)(a1 + 848));
    }
    else
    {
      if (*(char *)(a1 + 735) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 712), *(void *)(a1 + 720));
      }
      else
      {
        __n128 v16 = (__n128)*v22;
        v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 728);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v23;
      uint64_t v17 = (std::string *)((char *)v17 + 32);
    }
    uint64_t v77 = v17;
  }
  if (*(unsigned char *)(a1 + 164))
  {
    uint64_t v24 = *(void *)(a1 + 8);
    uint64_t v73 = 0;
    long long v74 = 0;
    p_std::wstring::pointer data = 0;
    if (*(char *)(a1 + 615) < 0) {
      std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(a1 + 592), *(void *)(a1 + 600));
    }
    else {
      std::string v81 = *(std::string *)(a1 + 592);
    }
    memset(&v83, 0, sizeof(v83));
    int v79 = &v83;
    char v80 = 0;
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v83.__r_.__value_.__l.__size_ = v83.__r_.__value_.__r.__words[0];
    v83.__r_.__value_.__r.__words[2] = v83.__r_.__value_.__r.__words[0] + 24;
    v83.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83.__r_.__value_.__r.__words[2], (long long *)&v81, (long long *)&v82, (std::string *)v83.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t, uint64_t *, std::string **, std::string *, void))(*(void *)v24 + 128))(v24, &v76, &v73, &v83, 0);
    int v79 = &v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    uint64_t v27 = 0;
    goto LABEL_144;
  }
  if (*(float *)(a1 + 168) >= 0.0)
  {
    long long v25 = (long long *)(a1 + 280);
    std::string::size_type v26 = *(void *)(a1 + 744);
    if ((unint64_t)v17 >= v78)
    {
      uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v25, *(void *)(a1 + 744));
    }
    else
    {
      if (*(char *)(a1 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 280), *(void *)(a1 + 288));
      }
      else
      {
        __n128 v16 = (__n128)*v25;
        v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 296);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v26;
      uint64_t v17 = (std::string *)((char *)v17 + 32);
    }
    uint64_t v77 = v17;
  }
  if (*(int *)(a1 + 188) >= 1)
  {
    uint64_t v28 = (long long *)(a1 + 328);
    std::string::size_type v29 = *(void *)(a1 + 776);
    if ((unint64_t)v17 >= v78)
    {
      uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v28, *(void *)(a1 + 776));
    }
    else
    {
      if (*(char *)(a1 + 351) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 328), *(void *)(a1 + 336));
      }
      else
      {
        __n128 v16 = (__n128)*v28;
        v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 344);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v29;
      uint64_t v17 = (std::string *)((char *)v17 + 32);
    }
    uint64_t v77 = v17;
  }
  if (*(int *)(a1 + 192) >= 1)
  {
    uint64_t v30 = (long long *)(a1 + 352);
    std::string::size_type v31 = *(void *)(a1 + 784);
    if ((unint64_t)v17 >= v78)
    {
      uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v30, *(void *)(a1 + 784));
    }
    else
    {
      if (*(char *)(a1 + 375) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 352), *(void *)(a1 + 360));
      }
      else
      {
        __n128 v16 = (__n128)*v30;
        v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 368);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v31;
      uint64_t v17 = (std::string *)((char *)v17 + 32);
    }
    uint64_t v77 = v17;
  }
  if (*(float *)(a1 + 196) > 0.0)
  {
    uint64_t v32 = (long long *)(a1 + 376);
    std::string::size_type v33 = *(void *)(a1 + 792);
    if ((unint64_t)v17 >= v78)
    {
      uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v32, *(void *)(a1 + 792));
    }
    else
    {
      if (*(char *)(a1 + 399) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 376), *(void *)(a1 + 384));
      }
      else
      {
        __n128 v16 = (__n128)*v32;
        v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 392);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v33;
      uint64_t v17 = (std::string *)((char *)v17 + 32);
    }
    uint64_t v77 = v17;
  }
  if (a3)
  {
    float v34 = *(float *)(a1 + 200);
    if (v34 > 0.0)
    {
      int v35 = *(_DWORD *)(a1 + 216);
      if (v35 >= 1)
      {
        int v36 = *(_DWORD *)(a1 + 160) * a4;
        BOOL v37 = __OFSUB__(v36, v35);
        int v38 = v36 - v35;
        if (!((v38 < 0) ^ v37 | (v38 == 0)))
        {
          int v39 = (v38 + *(_DWORD *)(a1 + 220)) / *(_DWORD *)(a1 + 220);
          *a6 = v39;
          v16.n128_f32[0] = v34 - (float)((float)v39 * *(float *)(a1 + 208));
          if (v16.n128_f32[0] < *(float *)(a1 + 212)) {
            v16.n128_u32[0] = *(_DWORD *)(a1 + 212);
          }
          (*(void (**)(void, void, __n128))(**(void **)(a1 + 800) + 104))(*(void *)(a1 + 800), 0, v16);
          uint64_t v17 = v77;
        }
      }
      uint64_t v40 = (long long *)(a1 + 400);
      std::string::size_type v41 = *(void *)(a1 + 800);
      if ((unint64_t)v17 >= v78)
      {
        uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v40, *(void *)(a1 + 800));
      }
      else
      {
        if (*(char *)(a1 + 423) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 400), *(void *)(a1 + 408));
        }
        else
        {
          long long v42 = *v40;
          v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 416);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v42;
        }
        v17[1].__r_.__value_.__r.__words[0] = v41;
        uint64_t v17 = (std::string *)((char *)v17 + 32);
      }
      uint64_t v77 = v17;
    }
    int v47 = *(_DWORD *)(a1 + 224);
    if (v47 < 1) {
      goto LABEL_114;
    }
    if (*(unsigned char *)(a1 + 232) && *a6 >= 1)
    {
      int v48 = v47 - *a6;
      int v49 = *(_DWORD *)(a1 + 236);
      if (v48 <= v49) {
        uint64_t v50 = v49;
      }
      else {
        uint64_t v50 = v48;
      }
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 816) + 96))(*(void *)(a1 + 816), v50, 0);
      *a7 = v50;
      uint64_t v17 = v77;
    }
    uint64_t v51 = a1 + 424;
    uint64_t v52 = *(void *)(a1 + 816);
    if ((unint64_t)v17 < v78)
    {
      if (*(char *)(a1 + 447) < 0) {
        goto LABEL_111;
      }
      goto LABEL_109;
    }
  }
  else
  {
    float v43 = *(float *)(a1 + 204);
    if (v43 > 0.0)
    {
      if (*a6 >= 1)
      {
        v16.n128_f32[0] = v43 - (float)((float)*a6 * *(float *)(a1 + 208));
        if (v16.n128_f32[0] < *(float *)(a1 + 212)) {
          v16.n128_u32[0] = *(_DWORD *)(a1 + 212);
        }
        (*(void (**)(void, void, __n128))(**(void **)(a1 + 808) + 104))(*(void *)(a1 + 808), 0, v16);
        uint64_t v17 = v77;
      }
      uint64_t v44 = (long long *)(a1 + 400);
      std::string::size_type v45 = *(void *)(a1 + 808);
      if ((unint64_t)v17 >= v78)
      {
        uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v44, *(void *)(a1 + 808));
      }
      else
      {
        if (*(char *)(a1 + 423) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 400), *(void *)(a1 + 408));
        }
        else
        {
          long long v46 = *v44;
          v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 416);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v46;
        }
        v17[1].__r_.__value_.__r.__words[0] = v45;
        uint64_t v17 = (std::string *)((char *)v17 + 32);
      }
      uint64_t v77 = v17;
    }
    int v53 = *(_DWORD *)(a1 + 228);
    if (v53 < 1) {
      goto LABEL_114;
    }
    if (*(unsigned char *)(a1 + 232) && *a6 >= 1)
    {
      int v54 = v53 - *a6;
      int v55 = *(_DWORD *)(a1 + 236);
      if (v54 <= v55) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = v54;
      }
      (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 824) + 96))(*(void *)(a1 + 824), v56, 0);
      uint64_t v17 = v77;
    }
    uint64_t v51 = a1 + 424;
    uint64_t v52 = *(void *)(a1 + 824);
    if ((unint64_t)v17 < v78)
    {
      if (*(char *)(a1 + 447) < 0)
      {
LABEL_111:
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 424), *(void *)(a1 + 432));
        goto LABEL_112;
      }
LABEL_109:
      long long v57 = *(_OWORD *)v51;
      v17->__r_.__value_.__r.__words[2] = *(void *)(v51 + 16);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v57;
LABEL_112:
      v17[1].__r_.__value_.__r.__words[0] = v52;
      uint64_t v17 = (std::string *)((char *)v17 + 32);
      goto LABEL_113;
    }
  }
  uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, (long long *)v51, v52);
LABEL_113:
  uint64_t v77 = v17;
LABEL_114:
  float v58 = *(float *)(a1 + 172);
  if (v58 > 0.0)
  {
    int v59 = *(_DWORD *)(a1 + 184);
    if (v59 >= 1)
    {
      if (v59 <= a5)
      {
        float v60 = (double)(v59 + a5) / (double)v59;
        float v61 = v58 + (float)(*(float *)(a1 + 180) * v60);
        if (v61 <= *(float *)(a1 + 176)) {
          float v62 = v61;
        }
        else {
          float v62 = *(float *)(a1 + 176);
        }
        (*(void (**)(void, void, float))(**(void **)(a1 + 752) + 104))(*(void *)(a1 + 752), 0, v62);
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v73, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"use coverage penalty ", 21);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v73);
        }
      }
      else
      {
        (*(void (**)(void, void))(**(void **)(a1 + 752) + 104))(*(void *)(a1 + 752), 0);
      }
    }
    uint64_t v63 = (long long *)(a1 + 304);
    std::string::size_type v64 = *(void *)(a1 + 752);
    int v65 = v77;
    if ((unint64_t)v77 >= v78)
    {
      uint64_t v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v63, *(void *)(a1 + 752));
    }
    else
    {
      if (*(char *)(a1 + 327) < 0)
      {
        std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)(a1 + 304), *(void *)(a1 + 312));
      }
      else
      {
        long long v66 = *v63;
        v77->__r_.__value_.__r.__words[2] = *(void *)(a1 + 320);
        *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
      }
      v65[1].__r_.__value_.__r.__words[0] = v64;
      uint64_t v17 = (std::string *)((char *)v65 + 32);
    }
    uint64_t v77 = v17;
  }
  if (a3)
  {
    int v67 = (long long *)(a1 + 472);
    std::string::size_type v68 = *(void *)(a1 + 768);
    if ((unint64_t)v17 >= v78)
    {
      int v70 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v67, *(void *)(a1 + 768));
    }
    else
    {
      if (*(char *)(a1 + 495) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 472), *(void *)(a1 + 480));
      }
      else
      {
        long long v69 = *v67;
        v17->__r_.__value_.__r.__words[2] = *(void *)(a1 + 488);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v69;
      }
      v17[1].__r_.__value_.__r.__words[0] = v68;
      int v70 = (std::string *)((char *)v17 + 32);
    }
    uint64_t v77 = v70;
  }
  uint64_t v71 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 591) < 0) {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)(a1 + 568), *(void *)(a1 + 576));
  }
  else {
    std::string v83 = *(std::string *)(a1 + 568);
  }
  uint64_t v73 = 0;
  long long v74 = 0;
  p_std::wstring::pointer data = 0;
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  v81.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v73 = (std::string *)operator new(0x18uLL);
  long long v74 = v73;
  p_std::wstring::pointer data = (void **)&v73[1].__r_.__value_.__l.__data_;
  long long v74 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v83, &v84, v73);
  memset(&v81, 0, sizeof(v81));
  (*(void (**)(uint64_t, uint64_t *, std::string **, std::string *, void *))(*(void *)v71 + 128))(v71, &v76, &v73, &v81, a8);
  int v79 = &v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  uint64_t v27 = (a8[1] - *a8) >> 3;
LABEL_144:
  uint64_t v73 = (std::string *)&v76;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  return v27;
}

void sub_1B23B5784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v10 - 192) = v9;
  a9 = (void **)(v10 - 200);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStreamInference::RunInferenceFinal(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  *((void *)&v37 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v7 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, (long long *)(a1 + 256), *a2);
  uint64_t v8 = v7;
  uint64_t v31 = (uint64_t)v7;
  if (*(float *)(a1 + 240) > 0.0)
  {
    uint64_t v9 = (long long *)(a1 + 448);
    std::string::size_type v10 = *(void *)(a1 + 832);
    if ((unint64_t)v7 >= v32)
    {
      uint64_t v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, v9, *(void *)(a1 + 832));
    }
    else
    {
      if (*(char *)(a1 + 471) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a1 + 448), *(void *)(a1 + 456));
      }
      else
      {
        long long v11 = *v9;
        v7->__r_.__value_.__r.__words[2] = *(void *)(a1 + 464);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v11;
      }
      v8[1].__r_.__value_.__r.__words[0] = v10;
      uint64_t v8 = (std::string *)((char *)v8 + 32);
    }
    uint64_t v31 = (uint64_t)v8;
  }
  if (*(float *)(a1 + 244) > 0.0)
  {
    uint64_t v12 = (long long *)(a1 + 688);
    std::string::size_type v13 = *(void *)(a1 + 840);
    if ((unint64_t)v8 >= v32)
    {
      uint64_t v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, v12, *(void *)(a1 + 840));
    }
    else
    {
      if (*(char *)(a1 + 711) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 688), *(void *)(a1 + 696));
      }
      else
      {
        long long v14 = *v12;
        v8->__r_.__value_.__r.__words[2] = *(void *)(a1 + 704);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v14;
      }
      v8[1].__r_.__value_.__r.__words[0] = v13;
      uint64_t v8 = (std::string *)((char *)v8 + 32);
    }
    uint64_t v31 = (uint64_t)v8;
  }
  if (*(float *)(a1 + 248) > 0.0)
  {
    uint64_t v15 = (long long *)(a1 + 712);
    std::string::size_type v16 = *(void *)(a1 + 848);
    if ((unint64_t)v8 >= v32)
    {
      uint64_t v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, v15, *(void *)(a1 + 848));
    }
    else
    {
      if (*(char *)(a1 + 735) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 712), *(void *)(a1 + 720));
      }
      else
      {
        long long v17 = *v15;
        v8->__r_.__value_.__r.__words[2] = *(void *)(a1 + 728);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v17;
      }
      v8[1].__r_.__value_.__r.__words[0] = v16;
      uint64_t v8 = (std::string *)((char *)v8 + 32);
    }
    uint64_t v31 = (uint64_t)v8;
  }
  if (a3)
  {
    if (*(float *)(a1 + 24) >= 0.0)
    {
      uint64_t v18 = a1 + 280;
      uint64_t v19 = *(void *)(a1 + 736);
      if ((unint64_t)v8 < v32)
      {
        if (*(char *)(a1 + 303) < 0) {
          goto LABEL_35;
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
  }
  else if (*(float *)(a1 + 168) >= 0.0)
  {
    uint64_t v18 = a1 + 280;
    uint64_t v19 = *(void *)(a1 + 744);
    if ((unint64_t)v8 < v32)
    {
      if (*(char *)(a1 + 303) < 0)
      {
LABEL_35:
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 280), *(void *)(a1 + 288));
        goto LABEL_36;
      }
LABEL_33:
      long long v20 = *(_OWORD *)v18;
      v8->__r_.__value_.__r.__words[2] = *(void *)(v18 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v20;
LABEL_36:
      v8[1].__r_.__value_.__r.__words[0] = v19;
      uint64_t v8 = (std::string *)((char *)v8 + 32);
      goto LABEL_37;
    }
LABEL_34:
    uint64_t v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, (long long *)v18, v19);
LABEL_37:
    uint64_t v31 = (uint64_t)v8;
  }
  std::string::size_type v21 = (long long *)(a1 + 472);
  std::string::size_type v22 = *(void *)(a1 + 760);
  if ((unint64_t)v8 >= v32)
  {
    p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, v21, *(void *)(a1 + 760));
  }
  else
  {
    if (*(char *)(a1 + 495) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 472), *(void *)(a1 + 480));
    }
    else
    {
      long long v23 = *v21;
      v8->__r_.__value_.__r.__words[2] = *(void *)(a1 + 488);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v23;
    }
    v8[1].__r_.__value_.__r.__words[0] = v22;
    p_std::string::size_type size = (uint64_t)&v8[1].__r_.__value_.__l.__size_;
  }
  uint64_t v31 = p_size;
  if (*(char *)(a1 + 519) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(a1 + 496), *(void *)(a1 + 504));
  }
  else {
    std::string v35 = *(std::string *)(a1 + 496);
  }
  if (*(char *)(a1 + 543) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(a1 + 520), *(void *)(a1 + 528));
  }
  else {
    std::string v36 = *(std::string *)(a1 + 520);
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::string::size_type v29 = 0;
  std::string::size_type v33 = (std::string *)&v27;
  char v34 = 0;
  uint64_t v27 = (std::string *)operator new(0x30uLL);
  uint64_t v28 = v27;
  std::string::size_type v29 = v27 + 2;
  uint64_t v25 = 0;
  uint64_t v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v29, (long long *)&v35, &v37, v27);
  do
  {
    if (SHIBYTE(v36.__r_.__value_.__r.__words[v25 + 2]) < 0) {
      operator delete(*(void **)((char *)&v35 + v25 * 8 + 24));
    }
    v25 -= 3;
  }
  while (v25 != -6);
  uint64_t v26 = *(void *)(a1 + 8);
  memset(&v35, 0, sizeof(v35));
  (*(void (**)(uint64_t, uint64_t *, std::string **, std::string *, uint64_t))(*(void *)v26 + 128))(v26, &v30, &v27, &v35, a4);
  std::string::size_type v33 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_1B23B5CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::string __p = &a12;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStreamInference::ResetGraph(kaldi::quasar::SeevaStreamInference *this, const kaldi::quasar::TensorFst *a2)
{
  *(void *)&long long v25 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v4 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v19, (long long *)((char *)this + 616), *(void *)a2);
    uint64_t v5 = v4;
    uint64_t v20 = (uint64_t)v4;
    uint64_t v6 = (long long *)((char *)this + 640);
    std::string::size_type v7 = *((void *)a2 + 1);
    if ((unint64_t)v4 >= v21)
    {
      uint64_t v9 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v19, v6, *((void *)a2 + 1));
    }
    else
    {
      if (*((char *)this + 663) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 80), *((void *)this + 81));
      }
      else
      {
        long long v8 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)this + 82);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      v5[1].__r_.__value_.__r.__words[0] = v7;
      uint64_t v9 = (std::string *)((char *)v5 + 32);
    }
    uint64_t v20 = (uint64_t)v9;
    std::string::size_type v10 = (long long *)((char *)this + 664);
    uint64_t v11 = *((void *)a2 + 2);
    if ((unint64_t)v9 >= v21)
    {
      p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v19, v10, v11);
    }
    else
    {
      if (*((char *)this + 687) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 83), *((void *)this + 84));
      }
      else
      {
        long long v12 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((void *)this + 85);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
      }
      v9[1].__r_.__value_.__r.__words[0] = v11;
      p_std::string::size_type size = (uint64_t)&v9[1].__r_.__value_.__l.__size_;
    }
    uint64_t v20 = p_size;
  }
  uint64_t v14 = *((void *)this + 1);
  memset(v18, 0, sizeof(v18));
  if (*((char *)this + 567) < 0) {
    std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)this + 68), *((void *)this + 69));
  }
  else {
    std::string v24 = *(std::string *)((char *)this + 544);
  }
  uint64_t v15 = 0;
  std::string::size_type v16 = 0;
  p_std::wstring::pointer data = 0;
  std::string::size_type v22 = (void ***)&v15;
  char v23 = 0;
  uint64_t v15 = (std::string *)operator new(0x18uLL);
  std::string::size_type v16 = v15;
  p_std::wstring::pointer data = (void **)&v15[1].__r_.__value_.__l.__data_;
  std::string::size_type v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v24, &v25, v15);
  (*(void (**)(uint64_t, uint64_t *, void ***, std::string **, void))(*(void *)v14 + 128))(v14, &v19, v18, &v15, 0);
  std::string::size_type v22 = (void ***)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  uint64_t v15 = (std::string *)v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v18[0] = (void **)&v19;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v18);
}

void sub_1B23B5FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SeevaStreamInference::SetAlignTensors(kaldi::quasar::SeevaStreamInference *this, float a2, float a3)
{
  (*(void (**)(void, void, float))(**((void **)this + 100) + 104))(*((void *)this + 100), 0, a2);
  uint64_t v5 = *(uint64_t (**)(__n128))(**((void **)this + 101) + 104);
  v6.n128_f32[0] = a3;
  return v5(v6);
}

uint64_t kaldi::quasar::SeevaStreamInference::SetStableTokensTensors(kaldi::quasar::SeevaStreamInference *this, uint64_t a2)
{
  (*(void (**)(void, uint64_t, void))(**((void **)this + 102) + 96))(*((void *)this + 102), a2, 0);
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 103) + 96);
  return v3();
}

void kaldi::quasar::SeevaStreamInferenceConfig::Register(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::SeevaInferenceConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames in each batch, if <0 will feed whole speech in one batch");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 144, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "encoder-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "only streaming the encoder, no partial results");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 148, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty-stream");
  std::string::basic_string[abi:ne180100]<0>(__p, "if >= 0, use this value as length penalty during streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 152, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "coverage-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, use this value as the coverage penalty. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 156, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "cover-pen-ceil");
  std::string::basic_string[abi:ne180100]<0>(__p, "the maximum coverage penalty");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 160, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "cover-pen-step-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamically adjusting coverage penalty with this step size");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 164, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-thresh");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, turn on dynamic coverage penalty when encounter this amount of silence");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 168, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-input-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum number of frames to start streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 172, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-input-left");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum number of frames for leftover during streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 176, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-aln-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum alignment weight during streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 180, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-init-aln");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum initial peak alignment value for the streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 184, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-cont-aln");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum continuous peak alignment value for the streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 188, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "aln-step-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce the min-aln value by this size to increase streaming");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 192, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-aln-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "the aln-value floor when reduction happens");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 196, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-input-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0 && < received_frames, reduce min-aln value to generate partial result if not already so");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 200, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "count-step-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "adjust the min-aln value according to this frequency");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 204, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "init-stable-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of tokens needed for stabilizing the streaming inference at the initial stage");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 208, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "cont-stable-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of tokens needed for stabilizing the streaming inference");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 212, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "dynamic-stable-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "turn on dynamic stable tokens to encourage streaming");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 216, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-token-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "the stable token floor when reduction happens");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 220, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "utt-end-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, use this beam at the utterance end. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 224, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, scale the LME FST score. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 228, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "nonlme-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, scale the nonLME arc score when LME is active. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 232, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B23B6BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaStreamInferenceTensorNames::~SeevaStreamInferenceTensorNames(void **this)
{
  if (*((char *)this + 479) < 0) {
    operator delete(this[57]);
  }
  if (*((char *)this + 455) < 0) {
    operator delete(this[54]);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(this[51]);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(this[48]);
  }
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((char *)this + 263) < 0) {
    operator delete(this[30]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(this[24]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::rescoring::Featurizer::Featurizer(quasar::rescoring::Featurizer *this, const quasar::rescoring::RescorerConfig *a2)
{
  *(void *)this = &unk_1F0A1CAE8;
  *((void *)this + 1) = a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 436);
  quasar::tennessee::lm::LoadDefaultPersonalizationSlotInfos(v2);
}

void sub_1B23B6EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float quasar::rescoring::Featurizer::GetTransformedFeatureValue(uint64_t a1, int *a2, uint64_t a3, unint64_t a4, int *a5)
{
  int v6 = a4;
  std::string::size_type v10 = (unsigned __int16 *)((char *)a5 - *a5);
  if (*v10 >= 7u && v10[3] && *(int *)((char *)a5 + v10[3] + *(unsigned int *)((char *)a5 + v10[3])))
  {
    quasar::rescoring::CreateTransformedFeatureDesc(a5, v48);
    uint64_t v11 = (unsigned __int16 *)((char *)a5 - *a5);
    unsigned int v12 = *v11;
    uint64_t v13 = v11[2];
    uint64_t v14 = *(unsigned int *)((char *)a5 + v13);
    uint64_t v15 = (unsigned int *)((char *)a5 + v13 + v14);
    uint64_t v16 = *v15;
    if (v16 < 2)
    {
      if (v16 != 1)
      {
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Unable to compute feature value without feature type.", 53);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v31);
      }
      int v24 = *((char *)v15 + 4);
      if (v24 == 20)
      {
        unint64_t v25 = *(int *)(a1 + 16);
      }
      else if ((v24 - 11) < 4 || v24 == 20)
      {
        unint64_t v25 = *(int *)(a1 + 20);
      }
      else
      {
        unint64_t v25 = 1;
      }
      if (v12 >= 9 && (uint64_t v28 = v11[4]) != 0) {
        uint64_t v29 = *(int *)((char *)a5 + v28);
      }
      else {
        uint64_t v29 = 0;
      }
      float CachedTransformedFeatureValue = quasar::rescoring::GetCachedTransformedFeatureValue((uint64_t)a2, a3, v6, v48, v25, (int)v15[2], v29);
    }
    else
    {
      uint64_t v17 = 8 * v16;
      uint64_t v18 = (int *)((char *)a5 + v14 + v13 + 8);
      do
      {
        int v19 = *v18;
        v18 += 2;
        if (v19)
        {
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v31 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Only 1-dimensional feature values supported when performing bivariate transformations.", 86);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v31);
        }
        v17 -= 8;
      }
      while (v17);
      if (v12 >= 9 && (uint64_t v20 = v11[4]) != 0) {
        uint64_t v21 = *(int *)((char *)a5 + v20);
      }
      else {
        uint64_t v21 = 0;
      }
      float CachedTransformedFeatureValue = quasar::rescoring::GetCachedTransformedFeatureValue((uint64_t)a2, a3, v6, v48, 1uLL, 0, v21);
    }
    float v30 = CachedTransformedFeatureValue;
    *(void *)&long long v31 = &v51;
    std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    if (v49)
    {
      uint64_t v50 = v49;
      operator delete(v49);
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    return v30;
  }
  else
  {
    uint64_t v22 = *(void *)((char *)a5 + v10[2] + *(unsigned int *)((char *)a5 + v10[2]) + 4);
    return quasar::rescoring::Featurizer::GetAtomicFeatureValue(a1, a2, a3, a4, v22);
  }
}

float quasar::rescoring::GetCachedTransformedFeatureValue(uint64_t a1, uint64_t a2, int a3, unsigned __int8 **a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v12 = quasar::lm::FindOrDie<std::map<quasar::rescoring::TransformedFeatureDesc,kaldi::Matrix<float>>>(a2, a4);
  int v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)v12);
  unint64_t v14 = a7 + (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v12) / a5 * a6;
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v12) == 1)
  {
    uint64_t v15 = *(void *)v12;
  }
  else
  {
    if (v14 >= v13)
    {
      memset(v19, 0, sizeof(v19));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Index ", 6);
      uint64_t v17 = (void *)std::ostream::operator<<();
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is out-of-bounds for feature ", 30);
      quasar::rescoring::operator<<(v18, (uint64_t)a4);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v19);
    }
    uint64_t v15 = *(void *)v12 + 4 * *((_DWORD *)v12 + 4) * a3;
  }
  return *(float *)(v15 + 4 * (int)v14);
}

float quasar::rescoring::Featurizer::GetCompositeFeatureValue(uint64_t a1, int *a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  if (!*a5) {
    return 1.0;
  }
  unint64_t v10 = 0;
  uint64_t v11 = a5 + 1;
  float v12 = 1.0;
  int v13 = a5 + 1;
  do
  {
    unsigned int v14 = *v13++;
    float v12 = v12 * quasar::rescoring::Featurizer::GetTransformedFeatureValue(a1, a2, a3, a4, (int *)((char *)v11 + v14));
    ++v10;
    uint64_t v11 = v13;
  }
  while (v10 < *a5);
  return v12;
}

uint64_t quasar::rescoring::Featurizer::NbestListEntryContainsLMEToken(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 4 * v2;
  while (1)
  {
    uint64_t v4 = a2[1];
    char v5 = (char *)a2 + v4 - *(int *)((char *)a2 + v4 + 4);
    if (*((unsigned __int16 *)v5 + 2) < 0xBu || (uint64_t v6 = *((unsigned __int16 *)v5 + 7)) == 0)
    {
LABEL_10:
      memset(v9, 0, sizeof(v9));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "N-Best list entry contains token where it is UNKNOWN whether the token is personalized or not.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
    }
    int v7 = *((unsigned __int8 *)a2 + v4 + v6 + 4);
    if (v7 == 2) {
      return 1;
    }
    if (!v7) {
      goto LABEL_10;
    }
    ++a2;
    v3 -= 4;
    if (!v3) {
      return 0;
    }
  }
}

void quasar::rescoring::Featurizer::~Featurizer(char **this)
{
  *this = (char *)&unk_1F0A1CAE8;
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F0A1CAE8;
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  JUMPOUT(0x1B3EA8670);
}

void TaggedNgramStats::TaggedNgramStats(LMStats *a1, Vocab *a2, int a3)
{
  NgramCounts<unsigned long>::NgramCounts(a1, a2, a3);
  void *v4 = &unk_1F0A34000;
  v4[22] = a2;
}

uint64_t TaggedNgramStats::incrementTaggedCounts(TaggedNgramStats *this, const unsigned int *a2)
{
  uint64_t v2 = MEMORY[0x1F4188790](this, a2);
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v7 = v2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(v2 + 156);
  if (v8)
  {
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = *(_DWORD *)(v3 + 4 * v9);
      if (v10 == -1) {
        break;
      }
      v15[v9++] = v10 & 0xFFFFF;
      if (v8 == v9)
      {
        LODWORD(v9) = v8;
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v15[v9] = -1;
  uint64_t result = NgramCounts<unsigned long>::incrementCounts(v2, (uint64_t)v15, 1u, v4);
  unint64_t v12 = *(unsigned int *)(v7 + 156);
  if (v12)
  {
    unint64_t v13 = 0;
    do
    {
      unsigned int v14 = *(_DWORD *)(v6 + 4 * v13);
      if (v14 == -1) {
        break;
      }
      if (v14 >> 20)
      {
        v15[v13++] = v14 | 0xFFFFF;
        uint64_t result = NgramCounts<unsigned long>::incrementCounts(v7, (uint64_t)v15, v13, v5);
        unint64_t v12 = *(unsigned int *)(v7 + 156);
      }
      else
      {
        ++v13;
      }
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t TaggedNgramStats::countSentence(TaggedNgramStats *this, const unsigned int *a2)
{
  uint64_t v2 = a2;
  if (*a2 == -1)
  {
    uint64_t v4 = 0;
    int v5 = -1;
  }
  else
  {
    LODWORD(v4) = 0;
    do
    {
      TaggedNgramStats::incrementTaggedCounts(this, a2);
      uint64_t v4 = (v4 + 1);
      a2 = &v2[v4];
    }
    while (*a2 != -1);
    int v5 = *v2;
  }
  *((double *)this + 8) = *((double *)this + 8) + (double)v4;
  if (v5 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 22) + 104))(*((void *)this + 22))) {
    *((double *)this + 8) = *((double *)this + 8) + -1.0;
  }
  if (v4)
  {
    unsigned int v6 = v2[(v4 - 1)];
    if (v6 == *(_DWORD *)(*(uint64_t (**)(void))(**((void **)this + 22) + 120))(*((void *)this + 22))) {
      *((double *)this + 8) = *((double *)this + 8) + -1.0;
    }
  }
  *((double *)this + 7) = *((double *)this + 7) + 1.0;
  return v4;
}

{
  return (*(uint64_t (**)(TaggedNgramStats *, const unsigned int *, uint64_t))(*(void *)this + 136))(this, a2, 1);
}

void TaggedNgramStats::~TaggedNgramStats(TaggedNgramStats *this)
{
  *(void *)this = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A32FE0;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::HmmTopology::NumPdfClasses(kaldi::HmmTopology *this, int a2)
{
  uint64_t v2 = (void *)kaldi::HmmTopology::TopologyForPhone(this, a2);
  uint64_t v3 = v2[1];
  uint64_t v4 = v3 - *v2;
  if (v3 == *v2) {
    return 1;
  }
  int v5 = 0;
  unint64_t v6 = v4 >> 5;
  if (v6 <= 1) {
    unint64_t v6 = 1;
  }
  uint64_t v7 = (int *)(*v2 + 4);
  do
  {
    if (v5 <= *(v7 - 1)) {
      int v5 = *(v7 - 1);
    }
    int v9 = *v7;
    v7 += 8;
    int v8 = v9;
    if (v5 <= v9) {
      int v5 = v8;
    }
    --v6;
  }
  while (v6);
  return (v5 + 1);
}

void kaldi::HmmTopology::Read(std::vector<int> *a1, uint64_t *a2, char a3)
{
  kaldi::ExpectToken(a2, a3, "<Topology>");
  if (a3)
  {
    kaldi::ReadIntegerVector<int>(a2, 1, a1, 0, 0, 0, 0);
    kaldi::ReadIntegerVector<int>(a2, 1, a1 + 1, 0, 0, 0, 0);
    __x[0] = 0;
    kaldi::ReadBasicType<int>(a2, 1, (uint64_t)__x);
    std::vector<int>::value_type v6 = __x[0];
    std::vector<int>::value_type v7 = __x[0];
    if (__x[0] == -1)
    {
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)__x);
      std::vector<int>::value_type v7 = __x[0];
    }
    int v8 = a1 + 2;
    std::vector<std::vector<kaldi::HmmTopology::HmmState>>::resize((uint64_t *)&a1[2], v7);
    if (__x[0] >= 1)
    {
      uint64_t v9 = 0;
      do
      {
        LODWORD(v168) = 0;
        kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v168);
        std::vector<kaldi::HmmTopology::HmmState>::resize((uint64_t *)&v8->__begin_[6 * v9], (int)v168);
        if ((int)v168 >= 1)
        {
          uint64_t v10 = 0;
          do
          {
            kaldi::ReadBasicType<int>(a2, 1, *(void *)&v8->__begin_[6 * v9] + 32 * v10);
            uint64_t v11 = (_DWORD *)(*(void *)&v8->__begin_[6 * v9] + 32 * v10);
            if (v6 == -1) {
              kaldi::ReadBasicType<int>(a2, 1, (uint64_t)(v11 + 1));
            }
            else {
              v11[1] = *v11;
            }
            LODWORD(__p) = 0;
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&__p);
            std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(*(void *)&v8->__begin_[6 * v9] + 32 * v10 + 8, (int)__p);
            if ((int)__p >= 1)
            {
              uint64_t v12 = 0;
              uint64_t v13 = 0;
              do
              {
                kaldi::ReadBasicType<int>(a2, 1, *(void *)(*(void *)&v8->__begin_[6 * v9] + 32 * v10 + 8) + v12);
                kaldi::ReadBasicType<float>(a2, 1, (float *)(*(void *)(*(void *)&v8->__begin_[6 * v9] + 32 * v10 + 8) + v12 + 4));
                ++v13;
                v12 += 8;
              }
              while (v13 < (int)__p);
            }
            ++v10;
          }
          while (v10 < (int)v168);
        }
        ++v9;
      }
      while (v9 < __x[0]);
    }
    kaldi::ExpectToken(a2, 1, "</Topology>");
    goto LABEL_241;
  }
  a1->__end_ = a1->__begin_;
  a1[1].__end_ = a1[1].__begin_;
  std::vector<unsigned int>::pointer begin = a1[2].__begin_;
  int v146 = (uint64_t *)&a1[2];
  std::vector<int>::pointer end = a1[2].__end_;
  while (end != begin)
  {
    end -= 6;
    *(void *)__x = end;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  }
  a1[2].__end_ = begin;
  long long v168 = 0uLL;
  uint64_t v169 = 0;
  int v147 = a1 + 1;
  while (2)
  {
    uint64_t v16 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v168);
    if ((*((unsigned char *)v16 + *(void *)(*v16 - 24) + 32) & 5) == 0)
    {
      if (SHIBYTE(v169) < 0)
      {
        if (*((void *)&v168 + 1) == 11
          && *(void *)v168 == 0x6F6C6F706F542F3CLL
          && *(void *)(v168 + 3) == 0x3E79676F6C6F706FLL)
        {
          break;
        }
        if (*((void *)&v168 + 1) != 15) {
          goto LABEL_279;
        }
        uint64_t v17 = (uint64_t *)v168;
      }
      else
      {
        if (HIBYTE(v169) != 15)
        {
          if (HIBYTE(v169) != 11
            || ((void)v168 == 0x6F6C6F706F542F3CLL
              ? (BOOL v125 = *(void *)((char *)&v168 + 3) == 0x3E79676F6C6F706FLL)
              : (BOOL v125 = 0),
                !v125))
          {
LABEL_279:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
            v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Reading HmmTopology object, expected </Topology> or <TopologyEntry>, got ", 73);
            if (v169 >= 0) {
              float v144 = &v168;
            }
            else {
              float v144 = (long long *)v168;
            }
            if (v169 >= 0) {
              uint64_t v145 = HIBYTE(v169);
            }
            else {
              uint64_t v145 = *((void *)&v168 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)v144, v145);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
          }
          break;
        }
        uint64_t v17 = (uint64_t *)&v168;
      }
      uint64_t v19 = *v17;
      uint64_t v20 = *(uint64_t *)((char *)v17 + 7);
      if (v19 != 0x676F6C6F706F543CLL || v20 != 0x3E7972746E457967) {
        goto LABEL_279;
      }
      kaldi::ExpectToken(a2, 0, "<ForPhones>");
      std::string __p = 0;
      int v161 = 0;
      v162 = 0;
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v159 = 0;
      while (1)
      {
        std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v157);
        if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Reading HmmTopology object, unexpected end of file while expecting phones.", 74);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
        }
        if (SHIBYTE(v159) < 0)
        {
          if (v158 != 12) {
            goto LABEL_48;
          }
          uint64_t v22 = v157;
        }
        else
        {
          if (SHIBYTE(v159) != 12) {
            goto LABEL_48;
          }
          uint64_t v22 = &v157;
        }
        uint64_t v23 = *(void *)v22;
        int v24 = v22[2];
        if (v23 == 0x6F6850726F462F3CLL && v24 == 1047749998) {
          break;
        }
LABEL_48:
        LODWORD(v154) = 0;
        if ((kaldi::ConvertStringToInteger<int>((uint64_t)&v157, &v154) & 1) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
          uint64_t v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Reading HmmTopology object, expected integer, got instead ", 58);
          if (v159 >= 0) {
            unint64_t v138 = &v157;
          }
          else {
            unint64_t v138 = v157;
          }
          if (v159 >= 0) {
            uint64_t v139 = HIBYTE(v159);
          }
          else {
            uint64_t v139 = v158;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v138, v139);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
        }
        uint64_t v26 = v161;
        if (v161 >= v162)
        {
          uint64_t v28 = (char *)__p;
          uint64_t v29 = (v161 - (unsigned char *)__p) >> 2;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v162 - (unsigned char *)__p;
          if ((v162 - (unsigned char *)__p) >> 1 > v30) {
            unint64_t v30 = v31 >> 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v162, v32);
            uint64_t v28 = (char *)__p;
            uint64_t v26 = v161;
          }
          else
          {
            long long v33 = 0;
          }
          long long v34 = &v33[4 * v29];
          *(_DWORD *)long long v34 = v154;
          uint64_t v27 = v34 + 4;
          while (v26 != v28)
          {
            int v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          std::string __p = v34;
          int v161 = v27;
          v162 = &v33[4 * v32];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(_DWORD *)int v161 = v154;
          uint64_t v27 = v26 + 4;
        }
        int v161 = v27;
      }
      uint64_t v154 = 0;
      uint64_t v155 = 0;
      unint64_t v156 = 0;
      v151 = 0;
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)&v151);
LABEL_67:
      if (SHIBYTE(v153) < 0)
      {
        if (v152 != 7)
        {
          if (v152 != 16
            || (*(void *)v151 == 0x6F6C6F706F542F3CLL
              ? (BOOL v37 = *((void *)v151 + 1) == 0x3E7972746E457967)
              : (BOOL v37 = 0),
                !v37))
          {
LABEL_257:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
            long long v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Expected </TopologyEntry> or <State>, got instead ", 50);
            if (v153 >= 0) {
              uint64_t v135 = &v151;
            }
            else {
              uint64_t v135 = v151;
            }
            if (v153 >= 0) {
              uint64_t v136 = HIBYTE(v153);
            }
            else {
              uint64_t v136 = v152;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)v135, v136);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
          }
LABEL_198:
          std::vector<int>::pointer v107 = a1[2].__begin_;
          std::__split_buffer<std::wstring>::pointer v106 = a1[2].__end_;
          if (v106 >= a1[2].__end_cap_.__value_)
          {
            uint64_t v108 = std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__push_back_slow_path<std::vector<kaldi::HmmTopology::HmmState> const&>(v146, &v154);
          }
          else
          {
            std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::HmmTopology::HmmState> const&>((uint64_t)v146, &v154);
            uint64_t v108 = (uint64_t)(v106 + 6);
          }
          a1[2].__end_ = (std::vector<int>::pointer)v108;
          uint64_t v109 = (unsigned int *)__p;
          if (v161 != __p)
          {
            unint64_t v110 = 0;
            int v111 = -1431655765 * ((unint64_t)((char *)v106 - (char *)v107) >> 3);
            do
            {
              uint64_t v112 = v109[v110];
              std::vector<int>::pointer v113 = a1[1].__begin_;
              if ((int)v112 >= (int)((unint64_t)((char *)a1[1].__end_ - (char *)v113) >> 2))
              {
                __x[0] = -1;
                std::vector<int>::resize(v147, (int)v112 + 1, __x);
                std::vector<int>::pointer v113 = v147->__begin_;
              }
              if (v113[v112] != -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Phone with index ", 17);
                uint64_t v141 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)" appears in multiple topology entries.", 38);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
              }
              v113[v112] = v111;
              std::vector<int>::pointer v115 = a1->__end_;
              unint64_t value = (unint64_t)a1->__end_cap_.__value_;
              if ((unint64_t)v115 >= value)
              {
                std::vector<int>::pointer v117 = a1->__begin_;
                uint64_t v118 = v115 - a1->__begin_;
                unint64_t v119 = v118 + 1;
                if ((unint64_t)(v118 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v120 = value - (void)v117;
                if (v120 >> 1 > v119) {
                  unint64_t v119 = v120 >> 1;
                }
                if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v121 = v119;
                }
                if (v121)
                {
                  unint64_t v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a1->__end_cap_, v121);
                  std::vector<int>::pointer v117 = a1->__begin_;
                  std::vector<int>::pointer v115 = a1->__end_;
                }
                else
                {
                  unint64_t v122 = 0;
                }
                std::__split_buffer<std::wstring>::pointer v123 = (int *)&v122[4 * v118];
                int *v123 = v112;
                uint64_t v116 = v123 + 1;
                while (v115 != v117)
                {
                  int v124 = *--v115;
                  *--std::__split_buffer<std::wstring>::pointer v123 = v124;
                }
                a1->__begin_ = v123;
                a1->__end_ = v116;
                a1->__end_cap_.__value_ = (int *)&v122[4 * v121];
                if (v117) {
                  operator delete(v117);
                }
              }
              else
              {
                unsigned int *v115 = v112;
                uint64_t v116 = v115 + 1;
              }
              a1->__end_ = v116;
              ++v110;
              uint64_t v109 = (unsigned int *)__p;
            }
            while (v110 < (v161 - (unsigned char *)__p) >> 2);
          }
          if (SHIBYTE(v153) < 0) {
            operator delete(v151);
          }
          *(void *)__x = &v154;
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
          if (SHIBYTE(v159) < 0) {
            operator delete(v157);
          }
          if (__p)
          {
            int v161 = (char *)__p;
            operator delete(__p);
          }
          continue;
        }
        long long v36 = (int *)v151;
      }
      else
      {
        if (HIBYTE(v153) != 7)
        {
          if (HIBYTE(v153) != 16) {
            goto LABEL_257;
          }
          if (v151 != (void *)0x6F6C6F706F542F3CLL || v152 != 0x3E7972746E457967) {
            goto LABEL_257;
          }
          goto LABEL_198;
        }
        long long v36 = (int *)&v151;
      }
      int v38 = *v36;
      int v39 = *(int *)((char *)v36 + 3);
      if (v38 != 1635013436 || v39 != 1046836321) {
        goto LABEL_257;
      }
      int v150 = 0;
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v150);
      if (v150 != (((unint64_t)v155 - v154) >> 5))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"States are expected to be in order from zero, expected ", 55);
        unint64_t v140 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)", got ", 6);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
      }
      kaldi::ReadToken(a2, 0, (uint64_t)&v151);
      unsigned int v149 = -1;
      if (v153 < 0)
      {
        if (v152 != 10
          || (*(void *)v151 == 0x73616C436664503CLL ? (BOOL v42 = *((unsigned __int16 *)v151 + 4) == 15987) : (BOOL v42 = 0),
              !v42))
        {
          if (v152 == 17)
          {
            long long v41 = (uint64_t *)v151;
            goto LABEL_95;
          }
LABEL_109:
          uint64_t v52 = v155;
          if ((unint64_t)v155 >= v156)
          {
            uint64_t v54 = ((uint64_t)v155 - v154) >> 5;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 59) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v56 = v156 - v154;
            if ((uint64_t)(v156 - v154) >> 4 > v55) {
              unint64_t v55 = v56 >> 4;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            uint64_t v167 = &v156;
            float v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v156, v57);
            int v59 = (unint64_t *)&v58[32 * v54];
            *(void *)__x = v58;
            uint64_t v164 = v59;
            uint64_t v166 = &v58[32 * v60];
            *int v59 = -1;
            v59[1] = 0;
            v59[2] = 0;
            v59[3] = 0;
            uint64_t v165 = v59 + 4;
            std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(&v154, __x);
            int v53 = v155;
            std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__x);
          }
          else
          {
            int v53 = v155 + 4;
            *uint64_t v155 = -1;
            v52[1] = 0;
            v52[2] = 0;
            v52[3] = 0;
          }
          uint64_t v155 = v53;
          goto LABEL_119;
        }
      }
      else
      {
        if (HIBYTE(v153) != 10)
        {
          if (HIBYTE(v153) == 17)
          {
            long long v41 = (uint64_t *)&v151;
LABEL_95:
            uint64_t v43 = *v41;
            uint64_t v44 = v41[1];
            int v45 = *((unsigned __int8 *)v41 + 16);
            if (v43 == 0x64726177726F463CLL && v44 == 0x7373616C43666450 && v45 == 62)
            {
              unsigned int v148 = -1;
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v149);
              kaldi::ReadToken(a2, 0, (uint64_t)&v151);
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v148);
              unint64_t v48 = v149 | ((unint64_t)v148 << 32);
              int v49 = v155;
              if ((unint64_t)v155 >= v156)
              {
                uint64_t v85 = ((uint64_t)v155 - v154) >> 5;
                unint64_t v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 59) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v87 = v156 - v154;
                if ((uint64_t)(v156 - v154) >> 4 > v86) {
                  unint64_t v86 = v87 >> 4;
                }
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v88 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v88 = v86;
                }
                uint64_t v167 = &v156;
                int32x2_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v156, v88);
                uint64_t v90 = (unint64_t *)&v89[32 * v85];
                *(void *)__x = v89;
                uint64_t v164 = v90;
                uint64_t v166 = &v89[32 * v91];
                unint64_t *v90 = v48;
                v90[1] = 0;
                _OWORD v90[2] = 0;
                v90[3] = 0;
                uint64_t v165 = v90 + 4;
                std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(&v154, __x);
                uint64_t v50 = v155;
                std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__x);
              }
              else
              {
                uint64_t v50 = v155 + 4;
                *uint64_t v155 = v48;
                v49[1] = 0;
                v49[2] = 0;
                v49[3] = 0;
              }
              uint64_t v155 = v50;
              kaldi::ReadToken(a2, 0, (uint64_t)&v151);
              goto LABEL_119;
            }
          }
          goto LABEL_109;
        }
        if (v151 != (void *)0x73616C436664503CLL || (unsigned __int16)v152 != 15987) {
          goto LABEL_109;
        }
      }
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v149);
      unint64_t v82 = v149 | ((unint64_t)v149 << 32);
      std::string v83 = v155;
      if ((unint64_t)v155 >= v156)
      {
        uint64_t v92 = ((uint64_t)v155 - v154) >> 5;
        unint64_t v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v94 = v156 - v154;
        if ((uint64_t)(v156 - v154) >> 4 > v93) {
          unint64_t v93 = v94 >> 4;
        }
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v95 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v95 = v93;
        }
        uint64_t v167 = &v156;
        uint64_t v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v156, v95);
        long long v97 = (unint64_t *)&v96[32 * v92];
        *(void *)__x = v96;
        uint64_t v164 = v97;
        uint64_t v166 = &v96[32 * v98];
        *long long v97 = v82;
        v97[1] = 0;
        v97[2] = 0;
        v97[3] = 0;
        uint64_t v165 = v97 + 4;
        std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(&v154, __x);
        long long v84 = v155;
        std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__x);
      }
      else
      {
        long long v84 = v155 + 4;
        *uint64_t v155 = v82;
        v83[1] = 0;
        v83[2] = 0;
        v83[3] = 0;
      }
      uint64_t v155 = v84;
      kaldi::ReadToken(a2, 0, (uint64_t)&v151);
      if (SHIBYTE(v153) < 0)
      {
        if (v152 != 18) {
          goto LABEL_119;
        }
        unsigned int v99 = (uint64_t *)v151;
      }
      else
      {
        if (SHIBYTE(v153) != 18) {
          goto LABEL_119;
        }
        unsigned int v99 = (uint64_t *)&v151;
      }
      uint64_t v100 = *v99;
      uint64_t v101 = v99[1];
      int v102 = *((unsigned __int16 *)v99 + 8);
      if (v100 == 0x6F6F4C666C65533CLL && v101 == 0x73616C4366645070 && v102 == 15987)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
        uint64_t v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"pdf classes should be defined using <PdfClass> ", 47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"or <ForwardPdfClass>/<SelfLoopPdfClass> pair", 44);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
      }
      while (1)
      {
LABEL_119:
        if (SHIBYTE(v153) < 0)
        {
          uint64_t v62 = v152;
          if (v152 != 12
            || (*(void *)v151 == 0x7469736E6172543CLL
              ? (BOOL v63 = *((unsigned int *)v151 + 2) == 1047424873)
              : (BOOL v63 = 0),
                !v63))
          {
            if (v152 != 7) {
              goto LABEL_155;
            }
            if (*(_DWORD *)v151 != 1852393020 || *(_DWORD *)((char *)v151 + 3) != 1047290222)
            {
              uint64_t v62 = v152;
LABEL_155:
              if (v62 == 8)
              {
                std::string v81 = v151;
                goto LABEL_159;
              }
LABEL_249:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
              long long v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Reading HmmTopology,  unexpected token ", 39);
              if (v153 >= 0) {
                std::__split_buffer<std::wstring>::pointer v132 = &v151;
              }
              else {
                std::__split_buffer<std::wstring>::pointer v132 = v151;
              }
              if (v153 >= 0) {
                uint64_t v133 = HIBYTE(v153);
              }
              else {
                uint64_t v133 = v152;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
            }
LABEL_248:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"You are trying to read old-format topology with new Kaldi.", 58);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
          }
        }
        else
        {
          if (HIBYTE(v153) != 12)
          {
            if (HIBYTE(v153) != 8)
            {
              if (HIBYTE(v153) != 7) {
                goto LABEL_249;
              }
              if (v151 != 1852393020 || *(_DWORD *)((char *)&v151 + 3) != 1047290222) {
                goto LABEL_249;
              }
              goto LABEL_248;
            }
            std::string v81 = &v151;
LABEL_159:
            if (*v81 != 0x3E65746174532F3CLL) {
              goto LABEL_249;
            }
            kaldi::ReadToken(a2, 0, (uint64_t)&v151);
            goto LABEL_67;
          }
          if (v151 != (void *)0x7469736E6172543CLL || v152 != 1047424873) {
            goto LABEL_249;
          }
        }
        __x[0] = 0;
        unsigned int v148 = 0;
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)__x);
        kaldi::ReadBasicType<float>(a2, 0, (float *)&v148);
        std::string::size_type v64 = v155;
        unint64_t v65 = __x[0] | ((unint64_t)v148 << 32);
        long long v66 = (unint64_t *)*(v155 - 2);
        unint64_t v67 = *(v155 - 1);
        if ((unint64_t)v66 >= v67)
        {
          long long v69 = (void **)(v155 - 3);
          uint64_t v70 = *(v155 - 3);
          uint64_t v71 = ((uint64_t)v66 - v70) >> 3;
          if ((unint64_t)(v71 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v72 = v67 - v70;
          uint64_t v73 = v72 >> 2;
          if (v72 >> 2 <= (unint64_t)(v71 + 1)) {
            uint64_t v73 = v71 + 1;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v74 = v73;
          }
          if (v74) {
            int v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v155 - 1), v74);
          }
          else {
            int v75 = 0;
          }
          uint64_t v76 = (unint64_t *)&v75[8 * v71];
          unint64_t *v76 = v65;
          std::string::size_type v68 = v76 + 1;
          unint64_t v78 = (char *)*(v64 - 3);
          uint64_t v77 = (char *)*(v64 - 2);
          if (v77 != v78)
          {
            do
            {
              unint64_t v79 = *((void *)v77 - 1);
              v77 -= 8;
              *--uint64_t v76 = v79;
            }
            while (v77 != v78);
            uint64_t v77 = (char *)*v69;
          }
          *(v64 - 3) = (unint64_t)v76;
          *(v64 - 2) = (unint64_t)v68;
          *(v64 - 1) = (unint64_t)&v75[8 * v74];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          unint64_t *v66 = v65;
          std::string::size_type v68 = v66 + 1;
        }
        *(v64 - 2) = (unint64_t)v68;
        kaldi::ReadToken(a2, 0, (uint64_t)&v151);
      }
    }
    break;
  }
  std::__sort<std::__less<int,int> &,int *>();
  std::vector<int>::pointer v126 = a1->__end_;
  if (a1->__begin_ != v126)
  {
    std::vector<int>::pointer v127 = a1->__begin_ + 1;
    do
    {
      if (v127 == v126) {
        break;
      }
      int v129 = *(v127 - 1);
      int v128 = *v127++;
    }
    while (v128 > v129);
  }
  if (SHIBYTE(v169) < 0) {
    operator delete((void *)v168);
  }
LABEL_241:
  kaldi::HmmTopology::Check((kaldi::HmmTopology *)a1);
}

void sub_1B23B8A70(_Unwind_Exception *a1)
{
  if (v4 < 0) {
    operator delete(v3);
  }
  uint64_t v3 = v5;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (v6 < 0) {
    operator delete(v5[3]);
  }
  if (v7)
  {
    int v8 = v7;
    operator delete(v7);
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<kaldi::HmmTopology::HmmState>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      int v8 = v3;
      std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<kaldi::HmmTopology::HmmState>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(void **)(v3 - 24);
        if (v7)
        {
          *(void *)(v3 - 16) = v7;
          operator delete(v7);
        }
        v3 -= 32;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<kaldi::HmmTopology::HmmState>::__append(a1, v5);
  }
}

void kaldi::HmmTopology::Check(kaldi::HmmTopology *this)
{
  uint64_t v1 = *((void *)this + 6);
  uint64_t v2 = *((void *)this + 7);
  if (v1 == v2 || *(void *)this == *((void *)this + 1) || *((void *)this + 3) == *((void *)this + 4))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v72, "HmmTopology::Check(), empty object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
  }
  LOBYTE(v72[0]) = 0;
  std::vector<BOOL>::vector(&v71, 0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 3), (unsigned __int8 *)v72);
  unint64_t v4 = *(int **)this;
  uint64_t v5 = *((void *)this + 1) - *(void *)this;
  if (v5)
  {
    unint64_t v6 = v5 >> 2;
    uint64_t v7 = *((void *)this + 3);
    unint64_t v8 = (*((void *)this + 4) - v7) >> 2;
    uint64_t v9 = (char *)v71;
    if (v6 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v6;
    }
    do
    {
      unint64_t v12 = *v4++;
      unint64_t v11 = v12;
      if (v8 <= v12
        || (unint64_t v13 = *(int *)(v7 + 4 * v11),
            uint64_t v14 = *((void *)this + 6),
            uint64_t v15 = *((void *)this + 7),
            0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) <= v13))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), phone has no valid index.", 47);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      *(void *)&v9[(v13 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v13;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v14 = *((void *)this + 6);
    uint64_t v15 = *((void *)this + 7);
  }
  if (v15 != v14)
  {
    unint64_t v16 = 0;
    do
    {
      if (((*(void *)((char *)v71 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), entry with no corresponding phones.", 57);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      uint64_t v18 = (uint64_t *)(v14 + 24 * v16);
      uint64_t v17 = *v18;
      unint64_t v19 = v18[1] - *v18;
      unint64_t v20 = v19 >> 5;
      uint64_t v21 = (v19 >> 5) - 1;
      if ((int)(v19 >> 5) <= 1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), cannot only have one state (i.e., must have at least one emitting state).", 95);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      if (*(void *)(v17 + 32 * v21 + 8) != *(void *)(v17 + 32 * v21 + 16))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), last state must have no transitions.", 58);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      if (*(_DWORD *)(v17 + 32 * v21) != -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), last state must not be emitting.", 54);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      unint64_t v22 = (v19 >> 5);
      LOBYTE(v72[0]) = 0;
      std::vector<BOOL>::vector(&v70, v22, (unsigned __int8 *)v72);
      uint64_t v23 = 0;
      std::string __p = 0;
      std::string::size_type v68 = 0;
      uint64_t v63 = (int)((uint64_t)v19 >> 5);
      unint64_t v69 = 0;
      unint64_t v62 = v22;
      do
      {
        uint64_t v24 = *((void *)this + 6);
        unint64_t v25 = (int *)(*(void *)(v24 + 24 * v16) + 32 * v23);
        int v26 = *v25;
        if (*v25 != -1)
        {
          uint64_t v28 = v68;
          uint64_t v27 = (int *)v69;
          if ((unint64_t)v68 >= v69)
          {
            unint64_t v30 = (char *)__p;
            int64_t v31 = (v68 - (unsigned char *)__p) >> 2;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62) {
              goto LABEL_98;
            }
            uint64_t v33 = v69 - (void)__p;
            if ((uint64_t)(v69 - (void)__p) >> 1 > v32) {
              unint64_t v32 = v33 >> 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              int v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69, v34);
              unint64_t v30 = (char *)__p;
              uint64_t v28 = v68;
              int v26 = *v25;
            }
            else
            {
              int v35 = 0;
            }
            long long v36 = (int *)&v35[4 * v31];
            *long long v36 = v26;
            uint64_t v29 = v36 + 1;
            if (v28 == v30)
            {
              unint64_t v22 = v62;
            }
            else
            {
              unint64_t v22 = v62;
              do
              {
                int v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *--long long v36 = v37;
              }
              while (v28 != v30);
            }
            uint64_t v27 = (int *)&v35[4 * v34];
            std::string __p = v36;
            std::string::size_type v68 = (char *)v29;
            unint64_t v69 = (unint64_t)v27;
            if (v30)
            {
              operator delete(v30);
              uint64_t v27 = (int *)v69;
            }
          }
          else
          {
            *(_DWORD *)std::string::size_type v68 = v26;
            uint64_t v29 = (int *)(v28 + 4);
          }
          std::string::size_type v68 = (char *)v29;
          int v38 = (int *)(*(void *)(*((void *)this + 6) + 24 * v16) + 32 * v23 + 4);
          if (v29 >= v27)
          {
            long long v40 = (int *)__p;
            uint64_t v41 = ((char *)v29 - (unsigned char *)__p) >> 2;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62) {
LABEL_98:
            }
              std::vector<int>::__throw_length_error[abi:ne180100]();
            uint64_t v43 = (char *)v27 - (unsigned char *)__p;
            if (v43 >> 1 > v42) {
              unint64_t v42 = v43 >> 1;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44)
            {
              int v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69, v44);
              long long v40 = (int *)__p;
              uint64_t v29 = (int *)v68;
            }
            else
            {
              int v45 = 0;
            }
            long long v46 = (int *)&v45[4 * v41];
            int *v46 = *v38;
            int v39 = v46 + 1;
            if (v29 == v40)
            {
              unint64_t v22 = v62;
            }
            else
            {
              unint64_t v22 = v62;
              do
              {
                int v47 = *--v29;
                *--long long v46 = v47;
              }
              while (v29 != v40);
            }
            std::string __p = v46;
            std::string::size_type v68 = (char *)v39;
            unint64_t v69 = (unint64_t)&v45[4 * v44];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            int *v29 = *v38;
            int v39 = v29 + 1;
          }
          std::string::size_type v68 = (char *)v39;
          uint64_t v24 = *((void *)this + 6);
        }
        v66[0] = 0;
        v66[1] = 0;
        unint64_t v65 = (uint64_t *)v66;
        uint64_t v48 = *(void *)(v24 + 24 * v16);
        uint64_t v49 = *(void *)(v48 + 32 * v23 + 8);
        if (*(void *)(v48 + 32 * v23 + 16) == v49)
        {
          float v51 = 0.0;
        }
        else
        {
          unint64_t v50 = 0;
          float v51 = 0.0;
          do
          {
            float v52 = *(float *)(v49 + 8 * v50 + 4);
            if (v52 <= 0.0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), negative or zero transition prob.", 55);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
            }
            int v64 = 0;
            int v53 = *(_DWORD *)(v49 + 8 * v50);
            int v64 = v53;
            if (v53 == v21 && *(_DWORD *)(v48 + 32 * v23) == -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"We do not allow any state to be nonemitting and have a transition to the final-state (this would stop the SplitToPhones function from identifying the last state of a phone.", 172);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
            }
            if (v53 < 0 || v53 >= (int)v20)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), invalid dest state ", 41);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
            }
            for (unint64_t i = v66[0]; i; unint64_t i = (void *)*i)
            {
              int v55 = *((_DWORD *)i + 7);
              if (v53 >= v55)
              {
                if (v55 >= v53)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), duplicate transition found.", 49);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
                }
                ++i;
              }
            }
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v65, &v64, &v64);
            float v51 = v51 + v52;
            *(void *)((char *)v70 + (((unint64_t)v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64;
            uint64_t v48 = *(void *)(*((void *)this + 6) + 24 * v16);
            ++v50;
            uint64_t v49 = *(void *)(v48 + 32 * v23 + 8);
          }
          while (v50 < (*(void *)(v48 + 32 * v23 + 16) - v49) >> 3);
        }
        uint64_t v56 = v23 + 1;
        if (v23 + 1 < v63 && fabs(v51 + -1.0) > 0.01 && kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Total probability for state ", 28);
          float v58 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in topology entry is ", 22);
          std::ostream::operator<<();
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        }
        std::__tree<int>::destroy((uint64_t)&v65, v66[0]);
        ++v23;
      }
      while (v56 != v22);
      unint64_t v59 = 1;
      do
      {
        if (((*(void *)((char *)v70 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check, state ", 26);
          float v61 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" has no input transitions.", 26);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
        }
        ++v59;
      }
      while (v22 != v59);
      std::__sort<std::__less<int,int> &,int *>();
      uint64_t v60 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>((int *)__p, (int *)v68);
      if (v68 != (char *)v60) {
        std::string::size_type v68 = (char *)v60;
      }
      if (*(_DWORD *)__p || *(v60 - 1) != ((unint64_t)((char *)v60 - (unsigned char *)__p) >> 2) - 1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), pdf_classes are expected to be contiguous and start from zero.", 84);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      std::string::size_type v68 = (char *)__p;
      operator delete(__p);
      if (v70) {
        operator delete(v70);
      }
      ++v16;
      uint64_t v14 = *((void *)this + 6);
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 7) - v14) >> 3));
  }
  if (v71) {
    operator delete(v71);
  }
}

uint64_t kaldi::HmmTopology::TopologyForPhone(kaldi::HmmTopology *this, int a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (a2 >= (unint64_t)((*((void *)this + 4) - v2) >> 2) || (int v3 = *(_DWORD *)(v2 + 4 * a2), v3 == -1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"TopologyForPhone(), phone ", 26);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " not covered.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return *((void *)this + 6) + 24 * v3;
}

uint64_t kaldi::HmmTopology::MinLength(kaldi::HmmTopology *this, int a2)
{
  uint64_t v2 = (void *)kaldi::HmmTopology::TopologyForPhone(this, a2);
  std::vector<int>::size_type v3 = (uint64_t)(v2[1] - *v2) >> 5;
  std::vector<int>::value_type __x = 0x7FFFFFFF;
  std::vector<int>::vector(&v18, v3, &__x);
  unint64_t v4 = (_DWORD *)*v2;
  std::vector<unsigned int>::pointer begin = v18.__begin_;
  *v18.__begin_ = *(_DWORD *)*v2 != -1;
  std::vector<int>::pointer end = v18.__end_;
  if ((int)((unint64_t)((char *)v18.__end_ - (char *)begin) >> 2) >= 1)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = ((unint64_t)((char *)v18.__end_ - (char *)begin) >> 2);
    while (1)
    {
      do
      {
        uint64_t v10 = &v4[8 * v7];
        unint64_t v11 = (int *)*((void *)v10 + 1);
        unint64_t v12 = (int *)*((void *)v10 + 2);
        while (v11 != v12)
        {
          uint64_t v13 = *v11;
          int v14 = begin[v7];
          if (v4[8 * v13] != -1) {
            ++v14;
          }
          if (v14 < begin[v13])
          {
            begin[v13] = v14;
            if (v7 > v13) {
              char v8 = 1;
            }
          }
          v11 += 2;
        }
        ++v7;
      }
      while (v7 != v9);
      if ((v8 & 1) == 0) {
        break;
      }
      uint64_t v7 = 0;
      char v8 = 0;
    }
  }
  uint64_t v15 = *(end - 1);
  v18.__end_ = begin;
  operator delete(begin);
  return v15;
}

uint64_t std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::HmmTopology::HmmState>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::HmmTopology::HmmState>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v7 - 32) = v8;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::HmmTopology::HmmState> const&>(uint64_t a1, uint64_t *a2)
{
  std::vector<int>::size_type v3 = *(void **)(a1 + 8);
  *std::vector<int>::size_type v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  uint64_t result = std::vector<kaldi::HmmTopology::HmmState>::__init_with_size[abi:ne180100]<kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>(v3, *a2, a2[1], (a2[1] - *a2) >> 5);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B23B9804(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__push_back_slow_path<std::vector<kaldi::HmmTopology::HmmState> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<kaldi::HmmTopology::HmmState>::__init_with_size[abi:ne180100]<kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>(v11, *a2, a2[1], (a2[1] - *a2) >> 5);
  v15 += 24;
  std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer(v14);
  return v12;
}

void sub_1B23B9910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    std::vector<int> v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer(&v15);
  }
}

void sub_1B23B9CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::HmmTopology::HmmState>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 5)
  {
    if (a2)
    {
      size_t v14 = &v7[4 * a2];
      do
      {
        void *v7 = -1;
        v7[2] = 0;
        void v7[3] = 0;
        v7[1] = 0;
        v7 += 4;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = (uint64_t)v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v17[4] = result;
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    }
    else {
      size_t v13 = 0;
    }
    uint64_t v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    unint64_t v16 = &v15[32 * a2];
    do
    {
      *(void *)uint64_t v15 = -1;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 1) = 0;
      v15 += 32;
    }
    while (v15 != v16);
    void v17[2] = v16;
    std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_1B23B9DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B23B9E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B23B9F3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t quasar::LRStreamingConfidence::LRStreamingConfidence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A55AE0;
  quasar::StreamingConfidence::create_featureMap(a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  quasar::LRStreamingConfidence::loadConfModelFile(a1, a2);
  quasar::LRStreamingConfidence::loadNormalizationStats(a1, a3);
  uint64_t v6 = a1 + 64;
  while (1)
  {
    uint64_t v6 = *(void *)v6;
    if (!v6) {
      break;
    }
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 88), (int *)(v6 + 16)))
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"feature index=", 14);
      uint64_t v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is in models file but missing in normstats file.", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
    }
  }
  uint64_t v8 = a1 + 104;
  while (1)
  {
    uint64_t v8 = *(void *)v8;
    if (!v8) {
      break;
    }
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)(a1 + 48), (int *)(v8 + 16)))
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"feature index=", 14);
      unint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" is in normstats file but missing in model file.", 48);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
    }
  }
  return a1;
}

void sub_1B23BA1C4(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void quasar::StreamingConfidence::create_featureMap(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "ind");
  uint64_t v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v5)+ 10) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isfirst");
  uint64_t v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v5)+ 10) = 1;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "isinside");
  uint64_t v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v5)+ 10) = 2;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_active");
  uint64_t v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v5)+ 10) = 3;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_bestcost");
  uint64_t v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v5)+ 10) = 4;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_epsilenceframes");
  uint64_t v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v5)+ 10) = 5;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num_frames");
  uint64_t v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v5)+ 10) = 6;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B23BA438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void quasar::LRStreamingConfidence::loadConfModelFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)&v40[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, "Confidence model file cannot be empty. Missing configuration parameter confidence-model-file");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
  }
  char v62 = 0;
  kaldi::Input::Input(v61, a2, &v62);
  char v4 = 0;
  memset(&v60, 0, sizeof(v60));
  uint64_t v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    uint64_t v6 = (void *)kaldi::Input::Stream((kaldi::Input *)v61);
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
    uint64_t v7 = std::locale::use_facet(v40, v5);
    unsigned __int8 v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(v40);
    unint64_t v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v60, v8);
    if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) != 0) {
      break;
    }
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    kaldi::SplitStringToVector(&v60, " ", 1, (uint64_t)&v57);
    uint64_t v10 = v57;
    if (v58 - v57 != 48)
    {
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      *(_OWORD *)&v40[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Invalid line in file=", 21);
      int v24 = *(char *)(a2 + 23);
      if (v24 >= 0) {
        uint64_t v25 = a2;
      }
      else {
        uint64_t v25 = *(void *)a2;
      }
      if (v24 >= 0) {
        uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v26 = *(void *)(a2 + 8);
      }
      long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" line=", 6);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v60;
      }
      else {
        uint64_t v29 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v60.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    long long v11 = (const char *)v57;
    if (*(char *)(v57 + 23) < 0) {
      long long v11 = *(const char **)v57;
    }
    double v12 = atof(v11);
    if (*(char *)(v10 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v10 + 24), *(void *)(v10 + 32));
    }
    else {
      std::string v39 = *(std::string *)(v10 + 24);
    }
    float v13 = v12;
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 8), (unsigned __int8 *)&v39))
    {
      uint64_t v63 = &v39;
      LODWORD(v40[0].__locale_) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)&v39, (uint64_t)&std::piecewise_construct, (long long **)&v63)+ 10);
      *((float *)&v40[0].__locale_ + 1) = v13;
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(a1 + 48, (int *)v40, v40);
      if ((*((unsigned char *)&v39.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_15;
      }
LABEL_14:
      operator delete(v39.__r_.__value_.__l.__data_);
      goto LABEL_15;
    }
    char v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v39.__r_.__value_.__l.__size_ != 9) {
        goto LABEL_53;
      }
      uint64_t v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) != 9) {
        goto LABEL_53;
      }
      uint64_t v15 = &v39;
    }
    std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
    int v17 = v15->__r_.__value_.__s.__data_[8];
    if (v16 != 0x5045435245544E49 || v17 != 84)
    {
LABEL_53:
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      *(_OWORD *)&v40[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      int64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Did not find feature=", 21);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v32 = &v39;
      }
      else {
        unint64_t v32 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = v39.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    *(double *)(a1 + 168) = v13;
    char v4 = 1;
    if (v14 < 0) {
      goto LABEL_14;
    }
LABEL_15:
    v40[0].__locale_ = (std::locale::__imp *)&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  }
  if (((*(void *)(a1 + 72) != 0) & v4) == 0)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)&v40[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    unint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"At least one feature weight and Intercept is needed in model file=", 66);
    int v35 = *(char *)(a2 + 23);
    if (v35 >= 0) {
      uint64_t v36 = a2;
    }
    else {
      uint64_t v36 = *(void *)a2;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v37 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)&v40[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Successfully loaded streaming confidence model file=", 52);
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      uint64_t v21 = a2;
    }
    else {
      uint64_t v21 = *(void *)a2;
    }
    if (v20 >= 0) {
      uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v22 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v40);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  kaldi::Input::~Input((kaldi::Input *)v61);
}

void sub_1B23BA9DC()
{
}

void sub_1B23BA9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void **a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a18 = (void **)(v18 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (*(char *)(v18 - 129) < 0) {
    operator delete(*(void **)(v18 - 152));
  }
  kaldi::Input::~Input((kaldi::Input *)(v18 - 128));
  _Unwind_Resume(a1);
}

void sub_1B23BAA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale(&a15);
  if (*(char *)(v15 - 129) < 0) {
    operator delete(*(void **)(v15 - 152));
  }
  kaldi::Input::~Input((kaldi::Input *)(v15 - 128));
  _Unwind_Resume(a1);
}

void quasar::LRStreamingConfidence::loadNormalizationStats(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    long long v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, "Confidence normalization stats file cannot be empty. Missing configuration parameter norm-stats-file");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  char v80 = 0;
  uint64_t v5 = (kaldi::Input *)kaldi::Input::Input(v79, a2, &v80);
  memset(&v78, 0, sizeof(v78));
  uint64_t v6 = (void *)kaldi::Input::Stream(v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  uint64_t v7 = std::locale::use_facet(v55, MEMORY[0x1E4FBA258]);
  unsigned __int8 v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(v55);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v78, v8);
  int v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  unint64_t v9 = (void *)kaldi::Input::Stream((kaldi::Input *)v79);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet(v55, MEMORY[0x1E4FBA258]);
  unsigned __int8 v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(v55);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (uint64_t)&v75, v11);
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  double v12 = (void *)kaldi::Input::Stream((kaldi::Input *)v79);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  float v13 = std::locale::use_facet(v55, MEMORY[0x1E4FBA258]);
  unsigned __int8 v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(v55);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)&v72, v14);
  std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v78.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_55;
  }
  uint64_t v16 = HIBYTE(v77);
  if (v77 < 0) {
    uint64_t v16 = v76;
  }
  if (!v16) {
    goto LABEL_55;
  }
  uint64_t v17 = HIBYTE(v74);
  if (v74 < 0) {
    uint64_t v17 = v73;
  }
  if (!v17)
  {
LABEL_55:
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    long long v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Normalization statistics is not in the correct format", 53);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  kaldi::SplitStringToVector(&v78, ",", 1, (uint64_t)&v52);
  if (v53 != v52 && 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) != *(void *)(a1 + 72))
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    long long v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Number of features does not match with model file, ", 51);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v44 = &v78;
    }
    else {
      long long v44 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v45 = v78.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  long long v49 = 0;
  long long v50 = 0;
  uint64_t v51 = 0;
  kaldi::SplitStringToFloats<float>((uint64_t)&v75, ",", 1, &v49);
  if (0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) != (v50 - (unsigned char *)v49) >> 2)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    long long v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Incorrect number of feature means, ", 35);
    if (v77 >= 0) {
      int v38 = (void **)&v75;
    }
    else {
      int v38 = v75;
    }
    if (v77 >= 0) {
      uint64_t v39 = HIBYTE(v77);
    }
    else {
      uint64_t v39 = v76;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  std::string __p = 0;
  long long v47 = 0;
  uint64_t v48 = 0;
  kaldi::SplitStringToFloats<float>((uint64_t)&v72, ",", 1, &__p);
  uint64_t v18 = v52;
  if (0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) != (v47 - (unsigned char *)__p) >> 2)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    long long v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    long long v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Incorrect number of feature stddevs, ", 37);
    if (v74 >= 0) {
      long long v41 = (void **)&v72;
    }
    else {
      long long v41 = v72;
    }
    if (v74 >= 0) {
      uint64_t v42 = HIBYTE(v74);
    }
    else {
      uint64_t v42 = v73;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  if (v53 != v52)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = (void *)(a1 + 8);
    uint64_t v22 = a1 + 88;
    uint64_t v23 = a1 + 128;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v21, (unsigned __int8 *)(v18 + v19)))
      {
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v59 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        *(_OWORD *)&v55[0].__locale_ = 0u;
        long long v56 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Unknown feature=", 16);
        int v29 = *(char *)(v18 + v19 + 23);
        if (v29 >= 0) {
          uint64_t v30 = v18 + v19;
        }
        else {
          uint64_t v30 = *(void *)(v18 + v19);
        }
        if (v29 >= 0) {
          uint64_t v31 = *(unsigned __int8 *)(v18 + v19 + 23);
        }
        else {
          uint64_t v31 = *(void *)(v18 + v19 + 8);
        }
        unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" in normalization statistics file", 33);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
      }
      v81[0] = (long long *)(v18 + v19);
      LODWORD(v55[0].__locale_) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v21, (unsigned __int8 *)(v18 + v19), (uint64_t)&std::piecewise_construct, v81)+ 10);
      HIDWORD(v55[0].__locale_) = *((_DWORD *)v49 + v20);
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(v22, (int *)v55, v55);
      if (*((float *)__p + v20) == 0.0)
      {
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v59 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        *(_OWORD *)&v55[0].__locale_ = 0u;
        long long v56 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
        std::string::size_type v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Standard deviation is 0 for feature=", 36);
        int v34 = *(char *)(v18 + v19 + 23);
        if (v34 >= 0) {
          uint64_t v35 = v18 + v19;
        }
        else {
          uint64_t v35 = *(void *)(v18 + v19);
        }
        if (v34 >= 0) {
          uint64_t v36 = *(unsigned __int8 *)(v18 + v19 + 23);
        }
        else {
          uint64_t v36 = *(void *)(v18 + v19 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
      }
      v81[0] = (long long *)(v18 + v19);
      LODWORD(v55[0].__locale_) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v21, (unsigned __int8 *)(v18 + v19), (uint64_t)&std::piecewise_construct, v81)+ 10);
      HIDWORD(v55[0].__locale_) = *((_DWORD *)__p + v20);
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(v23, (int *)v55, v55);
      ++v20;
      uint64_t v18 = v52;
      v19 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) > v20);
  }
  if (quasar::gLogLevel > 3)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v59 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    long long v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    int v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Successfully loaded streaming confidence normalization stats file=", 66);
    int v25 = *(char *)(a2 + 23);
    if (v25 >= 0) {
      uint64_t v26 = a2;
    }
    else {
      uint64_t v26 = *(void *)a2;
    }
    if (v25 >= 0) {
      uint64_t v27 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v27 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v55);
  }
  if (__p)
  {
    long long v47 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    long long v50 = v49;
    operator delete(v49);
  }
  v55[0].__locale_ = (std::locale::__imp *)&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  if (SHIBYTE(v74) < 0) {
    operator delete(v72);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  kaldi::Input::~Input((kaldi::Input *)v79);
}

void sub_1B23BB2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  a19 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (*(char *)(v19 - 169) < 0) {
    operator delete(*(void **)(v19 - 192));
  }
  if (*(char *)(v19 - 145) < 0) {
    operator delete(*(void **)(v19 - 168));
  }
  if (*(char *)(v19 - 121) < 0) {
    operator delete(*(void **)(v19 - 144));
  }
  kaldi::Input::~Input((kaldi::Input *)(v19 - 120));
  _Unwind_Resume(a1);
}

double quasar::LRStreamingConfidence::computeStreamingConfidence(uint64_t a1, uint64_t a2)
{
  memset(v48, 0, sizeof(v48));
  int v49 = 1065353216;
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
  {
    *(void *)&long long v27 = i + 16;
    char v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, i + 16, (uint64_t)&std::piecewise_construct, (long long **)&v27);
    uint64_t v5 = *((void *)i + 5);
    v44[0] = *((unsigned int *)v4 + 10);
    v44[1] = v5;
    std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int,double>>((uint64_t)v48, (int *)v44, (uint64_t)v44);
  }
  double v6 = *(double *)(a1 + 168);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
  uint64_t v7 = *(uint64_t **)(a1 + 64);
  if (v7)
  {
    unsigned __int8 v8 = (void *)(a1 + 88);
    unint64_t v9 = (void *)(a1 + 128);
    while (1)
    {
      LODWORD(__p[0]) = *((_DWORD *)v7 + 4);
      float v10 = *((float *)v7 + 5);
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v48, (int *)__p)) {
        break;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" feature[", 9);
      unsigned __int8 v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] = ", 4);
      *(void *)&long long v27 = __p;
      std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v48, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27);
      double v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v8, (int *)__p)
        || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v9, (int *)__p))
      {
        if (quasar::gLogLevel >= 2)
        {
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v27 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Missing feature index=", 22);
          uint64_t v21 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" in means or stddev stats", 25);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
        }
        goto LABEL_24;
      }
      *(void *)&long long v27 = __p;
      if (*((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v9, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)+ 5) == 0.0)goto LABEL_24; {
      *(void *)&long long v27 = __p;
      }
      double v13 = *((double *)std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v48, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)+ 3);
      *(void *)&long long v27 = __p;
      float v14 = *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v8, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)+ 5);
      *(void *)&long long v27 = __p;
      double v6 = v6
         + v10
         * ((v13 - v14)
          / *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v9, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)+ 5));
      uint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_10;
      }
    }
    if (quasar::gLogLevel >= 2)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Missing feature index=", 22);
      uint64_t v22 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" in input features", 18);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
    }
LABEL_24:
    double v16 = 0.0;
  }
  else
  {
LABEL_10:
    long double v15 = exp(v6);
    double v16 = v15 / (v15 + 1.0);
    if (quasar::gLogLevel >= 4)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Evaluated features=", 19);
      std::stringbuf::str();
      if ((v26 & 0x80u) == 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        uint64_t v19 = v26;
      }
      else {
        uint64_t v19 = (uint64_t)__p[1];
      }
      unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", confidence=", 13);
      std::ostream::operator<<();
      if ((char)v26 < 0) {
        operator delete(__p[0]);
      }
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v27);
    }
  }
  v44[0] = *MEMORY[0x1E4FBA408];
  uint64_t v23 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v44 + *(void *)(v44[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v45[0] = v23;
  v45[1] = MEMORY[0x1E4FBA470] + 16;
  if (v46 < 0) {
    operator delete((void *)v45[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B3EA8520](&v47);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v48);
  return v16;
}

void sub_1B23BB8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a51);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v51 - 176);
  _Unwind_Resume(a1);
}

uint64_t quasar::StreamingConfidenceRunner::StreamingConfidenceRunner(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 24), "");
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void sub_1B23BB998(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

double quasar::StreamingConfidenceRunner::compute(uint64_t a1, std::string *__str, int a3, int a4, double a5)
{
  uint64_t v7 = (void *)(a1 + 56);
  double v8 = *(double *)(a1 + 56) + (double)a3;
  double v9 = *(double *)(a1 + 64);
  double v10 = *(double *)(a1 + 72);
  int v11 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v11 + 1;
  *(double *)(a1 + 56) = v8;
  *(double *)(a1 + 64) = v9 + a5;
  *(double *)(a1 + 72) = v10 + (double)a4;
  double v12 = (std::string *)(a1 + 24);
  uint64_t v13 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  std::string::size_type size = __str->__r_.__value_.__l.__size_;
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v15 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __str->__r_.__value_.__l.__size_;
  }
  uint64_t v16 = *(unsigned __int8 *)(a1 + 47);
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a1 + 32);
  }
  if (v15 == v16)
  {
    if (v17 >= 0) {
      uint64_t v18 = (unsigned __int8 *)(a1 + 24);
    }
    else {
      uint64_t v18 = (unsigned __int8 *)v12->__r_.__value_.__r.__words[0];
    }
    if ((v13 & 0x80) != 0)
    {
      if (!memcmp(__str->__r_.__value_.__l.__data_, v18, size)) {
        return *(double *)(a1 + 80);
      }
    }
    else
    {
      if (!v13) {
        return *(double *)(a1 + 80);
      }
      for (uint64_t i = __str; i->__r_.__value_.__s.__data_[0] == *v18; uint64_t i = (std::string *)((char *)i + 1))
      {
        ++v18;
        if (!--v13) {
          return *(double *)(a1 + 80);
        }
      }
    }
  }
  if ((v11 & 0x80000000) == 0)
  {
    memset(v30, 0, sizeof(v30));
    int v31 = 1065353216;
    *(void *)&double v20 = *(unsigned int *)(a1 + 16);
    long long v28 = "ind";
    double v29 = v20;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,int>>(v30, (uint64_t)&v28);
    BOOL v21 = *(_DWORD *)(a1 + 16) == 0;
    long long v28 = "isfirst";
    double v29 = *(double *)&v21;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,BOOL>>(v30, (uint64_t)&v28);
    BOOL v22 = *(_DWORD *)(a1 + 16) != 0;
    long long v28 = "isinside";
    double v29 = *(double *)&v22;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,BOOL>>(v30, (uint64_t)&v28);
    double v23 = *(double *)(a1 + 56) / (double)*(int *)(a1 + 48);
    long long v28 = "avg_active";
    double v29 = v23;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,double>>(v30, (uint64_t)&v28);
    double v24 = *(double *)(a1 + 64) / (double)*(int *)(a1 + 48);
    long long v28 = "avg_bestcost";
    double v29 = v24;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,double>>(v30, (uint64_t)&v28);
    double v25 = *(double *)(a1 + 72) / (double)*(int *)(a1 + 48);
    long long v28 = "avg_epsilenceframes";
    double v29 = v25;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,double>>(v30, (uint64_t)&v28);
    *(void *)&double v26 = *(unsigned int *)(a1 + 48);
    long long v28 = "num_frames";
    double v29 = v26;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,int>>(v30, (uint64_t)&v28);
    *(double *)(a1 + 80) = (***(double (****)(void, _OWORD *))a1)(*(void *)a1, v30);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v30);
  }
  std::string::operator=(v12, __str);
  ++*(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = 0;
  v7[1] = 0;
  v7[2] = 0;
  void *v7 = 0;
  return *(double *)(a1 + 80);
}

void sub_1B23BBC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::LRStreamingConfidence::~LRStreamingConfidence(quasar::LRStreamingConfidence *this)
{
  *(void *)this = &unk_1F0A55AE0;
  uint64_t v2 = (char *)this + 8;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v2);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A55AE0;
  uint64_t v2 = (char *)this + 8;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v2);
  JUMPOUT(0x1B3EA8670);
}

void *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    double v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      double v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          double v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  double v10 = operator new(0x18uLL);
  *double v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = a3[1];
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *double v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *double v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B23BBF40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int,double>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    double v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      double v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          double v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  double v10 = operator new(0x20uLL);
  *double v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  v10[3] = *(void *)(a3 + 8);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *double v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *double v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B23BC164(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,int>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,int>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::string __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_1B23BC1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = (double *)operator new(0x30uLL);
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  double *v7 = 0.0;
  v7[1] = 0.0;
  std::string::basic_string[abi:ne180100]<0>((void *)v7 + 2, *(char **)a2);
  v7[5] = (double)*(int *)(a2 + 8);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B23BC294(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,BOOL>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,BOOL>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::string __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_1B23BC318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,BOOL>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = (double *)operator new(0x30uLL);
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  double *v7 = 0.0;
  v7[1] = 0.0;
  std::string::basic_string[abi:ne180100]<0>((void *)v7 + 2, *(char **)a2);
  double v8 = 0.0;
  if (*(unsigned char *)(a2 + 8)) {
    double v8 = 1.0;
  }
  v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_1B23BC3D8(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,double>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,double>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::string __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_1B23BC45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,double>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  void *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v7[5] = *(void *)(a2 + 8);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_1B23BC50C(_Unwind_Exception *a1)
{
  void *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void kaldi::FbankOptions::~FbankOptions(void **this)
{
  *this = &unk_1F0A472F8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

{
  *this = &unk_1F0A472F8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F0A472F8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  JUMPOUT(0x1B3EA8670);
}