void sub_1B2170F68()
{
  JUMPOUT(0x1B2170F60);
}

void sub_1B2170F70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15) {
    free(a15);
  }
  JUMPOUT(0x1B2170F60);
}

void kaldi::VectorBase<float>::AddVec<float>(uint64_t a1, const float **a2, float a3)
{
}

void kaldi::Vector<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    __X = 0;
    kaldi::Vector<double>::Resize((void **)&__X, v7, 0);
    kaldi::Vector<double>::Read(&__X, a2, a3, 0);
    int v8 = *(_DWORD *)(a1 + 8);
    if (!v8)
    {
      kaldi::Vector<double>::Resize((void **)a1, v82, 0);
      int v8 = *(_DWORD *)(a1 + 8);
    }
    if (v8 != v82)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Vector<Real>::Read, adding but dimensions mismatch ", 51);
      v74 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" vs. ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    cblas_daxpy(v8, 1.0, __X, 1, *(double **)a1, 1);
    if (__X) {
      free(__X);
    }
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__X);
  std::istream::tellg();
  if (!a3)
  {
    memset(&v87, 0, sizeof(v87));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"EOF while trying to read vector.", 32);
LABEL_17:
      int v15 = 2;
      goto LABEL_18;
    }
    if (!std::string::compare(&v87, "[]"))
    {
      kaldi::Vector<double>::Resize((void **)a1, 0, 0);
      int v15 = 1;
      goto LABEL_18;
    }
    if (std::string::compare(&v87, "["))
    {
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Expected \"[\" but got ", 21);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v19 = &v87;
      }
      else {
        v19 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v87.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
      goto LABEL_17;
    }
    v78 = 0;
    v79 = 0;
    v33 = a2 + 4;
    uint64_t v75 = 22;
    v76 = "Failed to read number.";
    v80 = 0;
    uint64_t v34 = MEMORY[0x1E4F14390];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v35 = std::istream::peek();
          if ((v35 - 48) > 9) {
            break;
          }
          *(double *)&__p = 0.0;
          MEMORY[0x1B3EA7DB0](a2, &__p);
          if ((*((unsigned char *)v33 + *(void *)(*a2 - 24)) & 5) != 0) {
            goto LABEL_155;
          }
          unsigned int v36 = std::istream::peek();
          if (v36 <= 0x7F)
          {
            if ((*(_DWORD *)(v34 + 4 * v36 + 60) & 0x4000) != 0) {
              goto LABEL_84;
            }
          }
          else if (__maskrune(v36, 0x4000uLL))
          {
            goto LABEL_84;
          }
          if (std::istream::peek() != 93)
          {
            uint64_t v75 = 33;
            v76 = "Expected whitespace after number.";
            goto LABEL_155;
          }
LABEL_84:
          v39 = v79;
          if (v79 >= (double *)v80)
          {
            v41 = (double *)v78;
            uint64_t v42 = ((char *)v79 - (unsigned char *)v78) >> 3;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v44 = v80 - (unsigned char *)v78;
            if ((v80 - (unsigned char *)v78) >> 2 > v43) {
              unint64_t v43 = v44 >> 2;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45)
            {
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v80, v45);
              v41 = (double *)v78;
              v39 = v79;
            }
            else
            {
              v46 = 0;
            }
            v47 = (double *)&v46[8 * v42];
            double *v47 = *(double *)&__p;
            v40 = v47 + 1;
            while (v39 != v41)
            {
              uint64_t v48 = *((void *)v39-- - 1);
              *((void *)v47-- - 1) = v48;
            }
            v78 = v47;
            v79 = v40;
            v80 = &v46[8 * v45];
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            double *v79 = *(double *)&__p;
            v40 = v39 + 1;
          }
          v79 = v40;
        }
        if (v35 > 31) {
          break;
        }
        if (v35 > 9)
        {
          if (v35 == 10 || v35 == 13)
          {
            v63 = "Newline found while reading vector (maybe it's a matrix?)";
            uint64_t v64 = 57;
LABEL_171:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)v63, v64);
            goto LABEL_172;
          }
          goto LABEL_113;
        }
        if (v35 != 9)
        {
          if (v35 == -1)
          {
            v63 = "EOF while reading vector data.";
            uint64_t v64 = 30;
            goto LABEL_171;
          }
          goto LABEL_113;
        }
LABEL_96:
        std::istream::get();
      }
      switch(v35)
      {
        case ' ':
          goto LABEL_96;
        case '-':
          std::istream::get();
          if (std::istream::peek() - 48 > 9)
          {
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            {
              v49 = (std::string *)v87.__r_.__value_.__r.__words[0];
              if (!strcasecmp(v87.__r_.__value_.__l.__data_, "inf")) {
                goto LABEL_142;
              }
              v50 = v49;
LABEL_138:
              if (!strcasecmp((const char *)v50, "infinity")) {
                goto LABEL_142;
              }
              if (strcasecmp((const char *)v49, "nan"))
              {
LABEL_175:
                v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Expecting numeric vector data, got ", 35);
                if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v72 = &v87;
                }
                else {
                  v72 = (std::string *)v87.__r_.__value_.__r.__words[0];
                }
                if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v73 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v73 = v87.__r_.__value_.__l.__size_;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
                goto LABEL_172;
              }
              *(double *)&__p = NAN;
              std::vector<double>::push_back[abi:ne180100]((uint64_t)&v78, &__p);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading negative NaN value into vector.", 39);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              }
            }
            else
            {
              if (strcasecmp((const char *)&v87, "inf"))
              {
                v49 = &v87;
                v50 = &v87;
                goto LABEL_138;
              }
LABEL_142:
              *(double *)&__p = -INFINITY;
              std::vector<double>::push_back[abi:ne180100]((uint64_t)&v78, &__p);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading negative infinite value into vector.", 44);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              }
            }
          }
          else
          {
            *(double *)&__p = 0.0;
            MEMORY[0x1B3EA7DB0](a2, &__p);
            if ((*((unsigned char *)v33 + *(void *)(*a2 - 24)) & 5) != 0) {
              goto LABEL_155;
            }
            unsigned int v37 = std::istream::peek();
            if (v37 <= 0x7F) {
              int v38 = *(_DWORD *)(v34 + 4 * v37 + 60) & 0x4000;
            }
            else {
              int v38 = __maskrune(v37, 0x4000uLL);
            }
            if (!v38 && std::istream::peek() != 93)
            {
              uint64_t v75 = 33;
              v76 = "Expected whitespace after number.";
LABEL_155:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)v76, v75);
LABEL_172:
              int v15 = 2;
              goto LABEL_173;
            }
            double v77 = -*(double *)&__p;
            std::vector<double>::push_back[abi:ne180100]((uint64_t)&v78, &v77);
          }
          break;
        case ']':
          std::istream::get();
          kaldi::Vector<double>::Resize((void **)a1, (unint64_t)((char *)v79 - (unsigned char *)v78) >> 3, 0);
          v65 = (uint64_t *)v78;
          if (v79 != v78)
          {
            unint64_t v66 = ((char *)v79 - (unsigned char *)v78) >> 3;
            v67 = *(void **)a1;
            if (v66 <= 1) {
              unint64_t v66 = 1;
            }
            do
            {
              uint64_t v68 = *v65++;
              *v67++ = v68;
              --v66;
            }
            while (v66);
          }
          unsigned int v69 = std::istream::peek() << 24;
          if (v69 == 167772160)
          {
LABEL_163:
            std::istream::get();
          }
          else if (v69 == 218103808)
          {
            std::istream::get();
            goto LABEL_163;
          }
          if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"After end of vector data, read error.", 37);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          }
          int v15 = 1;
LABEL_173:
          if (v78)
          {
            v79 = (double *)v78;
            operator delete(v78);
          }
LABEL_18:
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            v16 = (void *)v87.__r_.__value_.__r.__words[0];
            goto LABEL_45;
          }
LABEL_46:
          if (v15 == 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to read vector from stream.  ", 36);
            std::stringbuf::str();
            if (SHIBYTE(v80) >= 0) {
              v27 = &v78;
            }
            else {
              v27 = v78;
            }
            if (SHIBYTE(v80) >= 0) {
              uint64_t v28 = HIBYTE(v80);
            }
            else {
              uint64_t v28 = (uint64_t)v79;
            }
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" File position at start is ", 27);
            v30 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", currently ", 12);
            std::istream::tellg();
            std::ostream::operator<<();
            if (SHIBYTE(v80) < 0) {
              operator delete(v78);
            }
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          goto LABEL_58;
        default:
LABEL_113:
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            v51 = (std::string *)v87.__r_.__value_.__r.__words[0];
            if (!strcasecmp(v87.__r_.__value_.__l.__data_, "inf")) {
              goto LABEL_122;
            }
            v52 = v51;
          }
          else
          {
            if (!strcasecmp((const char *)&v87, "inf")) {
              goto LABEL_122;
            }
            v51 = &v87;
            v52 = &v87;
          }
          if (!strcasecmp((const char *)v52, "infinity"))
          {
LABEL_122:
            v53 = v79;
            if (v79 >= (double *)v80)
            {
              v55 = (double *)v78;
              uint64_t v56 = ((char *)v79 - (unsigned char *)v78) >> 3;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v58 = v80 - (unsigned char *)v78;
              if ((v80 - (unsigned char *)v78) >> 2 > v57) {
                unint64_t v57 = v58 >> 2;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v80, v59);
                v55 = (double *)v78;
                v53 = v79;
              }
              else
              {
                v60 = 0;
              }
              v61 = (double *)&v60[8 * v56];
              double *v61 = INFINITY;
              v54 = v61 + 1;
              while (v53 != v55)
              {
                uint64_t v62 = *((void *)v53-- - 1);
                *((void *)v61-- - 1) = v62;
              }
              v78 = v61;
              v79 = v54;
              v80 = &v60[8 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              double *v79 = INFINITY;
              v54 = v53 + 1;
            }
            v79 = v54;
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading infinite value into vector.", 35);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            }
          }
          else
          {
            if (strcasecmp((const char *)v51, "nan")) {
              goto LABEL_175;
            }
            *(double *)&__p = NAN;
            std::vector<double>::push_back[abi:ne180100]((uint64_t)&v78, &__p);
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading NaN value into vector.", 30);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            }
          }
          break;
      }
    }
  }
  if (kaldi::Peek(a2, 1) != 70)
  {
    *(double *)&__p = 0.0;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__p);
    if (SHIBYTE(v90) < 0)
    {
      if (v89 != 2) {
        goto LABEL_35;
      }
      p_p = __p;
    }
    else
    {
      if (SHIBYTE(v90) != 2) {
        goto LABEL_35;
      }
      p_p = &__p;
    }
    if (*p_p == 22084)
    {
      LODWORD(v87.__r_.__value_.__l.__data_) = 0;
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v87);
      int data = (int)v87.__r_.__value_.__l.__data_;
      if (LODWORD(v87.__r_.__value_.__l.__data_) != *(_DWORD *)(a1 + 8))
      {
        kaldi::Vector<double>::Resize((void **)a1, LODWORD(v87.__r_.__value_.__l.__data_), 0);
        int data = (int)v87.__r_.__value_.__l.__data_;
      }
      if (data >= 1) {
        std::istream::read();
      }
      if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) == 0)
      {
        int v15 = 1;
LABEL_43:
        if (SHIBYTE(v90) < 0)
        {
          v16 = __p;
LABEL_45:
          operator delete(v16);
        }
        goto LABEL_46;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Error reading vector data (binary mode); truncated stream? (std::string::size_type size = ",
        67);
      v32 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)")", 1);
LABEL_42:
      int v15 = 2;
      goto LABEL_43;
    }
LABEL_35:
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)": Expected token ", 17);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"DV", 2);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", got ", 6);
    if (v90 >= 0) {
      v24 = &__p;
    }
    else {
      v24 = __p;
    }
    if (v90 >= 0) {
      uint64_t v25 = HIBYTE(v90);
    }
    else {
      uint64_t v25 = v89;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    goto LABEL_42;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  *(double *)&__p = 0.0;
  kaldi::Vector<float>::Resize(&__p, v9, 0);
  kaldi::Vector<float>::Read(&__p, a2, 1, 0);
  LODWORD(v10) = *(_DWORD *)(a1 + 8);
  if (v10 != v89)
  {
    kaldi::Vector<double>::Resize((void **)a1, v89, 0);
    LODWORD(v10) = v89;
  }
  v11 = __p;
  if ((int)v10 < 1)
  {
    if (*(double *)&__p == 0.0) {
      goto LABEL_58;
    }
  }
  else
  {
    v12 = *(double **)a1;
    uint64_t v10 = v10;
    v13 = (float *)__p;
    do
    {
      float v14 = *v13++;
      *v12++ = v14;
      --v10;
    }
    while (v10);
  }
  free(v11);
LABEL_58:
  __X = (double *)*MEMORY[0x1E4FBA418];
  *(double **)((char *)&__X + *((void *)__X - 3)) = *(double **)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v82 = MEMORY[0x1E4FBA470] + 16;
  if (v85 < 0) {
    operator delete(v84);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&v86);
}

void sub_1B2171D38(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2171D9CLL);
}

void sub_1B2171D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2171D50()
{
}

void sub_1B2171D6C()
{
  if (v0) {
    operator delete(v0);
  }
  if (v2 < 0) {
    operator delete(v1);
  }
  JUMPOUT(0x1B2171D94);
}

void sub_1B2171DA4()
{
}

void sub_1B2171DAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15) {
    free(a15);
  }
  JUMPOUT(0x1B2171D9CLL);
}

void kaldi::VectorBase<float>::SetZero(uint64_t a1)
{
}

void **kaldi::Vector<float>::Init(void **result, int a2)
{
  char v2 = result;
  if (a2)
  {
    memptr = 0;
    int v4 = 4 * a2;
    result = (void **)malloc_type_posix_memalign(&memptr, 0x10uLL, 4 * a2, 0x15614AE6uLL);
    if (result || !memptr)
    {
      if (v4 < 0 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Negative dimension: size=", 25);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v6 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v6, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    *char v2 = memptr;
    *((_DWORD *)v2 + 2) = a2;
    *((_DWORD *)v2 + 3) = a2;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_1B2171EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::Vector<double>::Resize(void **a1, uint64_t a2, int a3)
{
  int v3 = a2;
  if (a3 != 2)
  {
    int v5 = a3;
    if (a3 == 3)
    {
      v6 = (char *)*a1;
      if (!*a1)
      {
        kaldi::Vector<double>::Init(a1, a2);
LABEL_22:
        v6 = (char *)*a1;
        size_t v9 = 8 * *((int *)a1 + 2);
LABEL_23:
        bzero(v6, v9);
        return;
      }
      if (*((_DWORD *)a1 + 2) == a2) {
        return;
      }
      int v5 = 0;
      goto LABEL_13;
    }
    v6 = (char *)*a1;
LABEL_12:
    if (!v6) {
      goto LABEL_16;
    }
LABEL_13:
    if (*((_DWORD *)a1 + 3) >= (int)a2)
    {
      *((_DWORD *)a1 + 2) = a2;
    }
    else if (*((_DWORD *)a1 + 2) != a2)
    {
      free(v6);
      *a1 = 0;
      a1[1] = 0;
LABEL_16:
      kaldi::Vector<double>::Init(a1, v3);
      if (v5) {
        return;
      }
      goto LABEL_22;
    }
    if (v5) {
      return;
    }
    size_t v9 = 8 * (int)a2;
    goto LABEL_23;
  }
  int v5 = 0;
  v6 = (char *)*a1;
  if (!a2 || !v6) {
    goto LABEL_12;
  }
  if (*((_DWORD *)a1 + 3) >= (int)a2)
  {
    uint64_t v10 = *((int *)a1 + 2);
    if ((int)a2 > (int)v10) {
      bzero(&v6[8 * v10], 8 * ((int)a2 - (int)v10));
    }
    *((_DWORD *)a1 + 2) = v3;
  }
  else
  {
    __dst = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    kaldi::Vector<double>::Resize(&__dst, a2, 1);
    uint64_t v7 = *((int *)a1 + 2);
    int v8 = *a1;
    if ((int)v7 >= v3)
    {
      memcpy(__dst, v8, 8 * v3);
    }
    else
    {
      memcpy(__dst, v8, 8 * v7);
      bzero((char *)__dst + 8 * *((int *)a1 + 2), 8 * (v3 - *((_DWORD *)a1 + 2)));
    }
    v11 = (char *)__dst;
    __dst = *a1;
    v12 = __dst;
    *a1 = v11;
    v13 = v15;
    int v15 = (char *)a1[1];
    a1[1] = v13;
    if (v12) {
      free(v12);
    }
  }
}

void kaldi::VectorBase<double>::AddVec<double>(uint64_t a1, const double **a2, double a3)
{
}

void kaldi::VectorBase<double>::SetZero(uint64_t a1)
{
}

void **kaldi::Vector<double>::Init(void **result, int a2)
{
  char v2 = result;
  if (a2)
  {
    memptr = 0;
    int v4 = 8 * a2;
    result = (void **)malloc_type_posix_memalign(&memptr, 0x10uLL, 8 * a2, 0x15614AE6uLL);
    if (result || !memptr)
    {
      if (v4 < 0 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Negative dimension: size=", 25);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v6 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v6, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    *char v2 = memptr;
    *((_DWORD *)v2 + 2) = a2;
    *((_DWORD *)v2 + 3) = a2;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_1B2172188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorBase<float>::Set(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    int v3 = *(float **)result;
    do
    {
      *v3++ = a2;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::SetRandn(uint64_t a1)
{
  unsigned int v7 = kaldi::Rand(0);
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v2 = 0;
    do
    {
      float v3 = ((double)(int)kaldi::Rand(&v7) + 1.0) / 2147483650.0;
      float v4 = sqrtf(logf(v3) * -2.0);
      float v5 = ((double)(int)kaldi::Rand(&v7) + 1.0) / 2147483650.0;
      float v6 = v5 * 6.28318531;
      *(float *)(*(void *)a1 + 4 * v2++) = v4 * cosf(v6);
    }
    while (v2 < *(int *)(a1 + 8));
  }
}

double kaldi::VectorBase<float>::Sum(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0.0;
  }
  uint64_t v2 = *(float **)a1;
  double result = 0.0;
  do
  {
    float v4 = *v2++;
    double result = result + v4;
    --v1;
  }
  while (v1);
  *(float *)&double result = result;
  return result;
}

uint64_t *kaldi::VectorBase<float>::Min(uint64_t *result)
{
  unint64_t v1 = *((unsigned int *)result + 2);
  if (!v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  uint64_t v2 = *result;
  if ((int)v1 >= 4)
  {
    uint64_t v5 = 0;
    int v3 = v1 & 0xFFFFFFFC;
    float v4 = INFINITY;
    do
    {
      float v6 = (float *)(v2 + 4 * v5);
      float v7 = *v6;
      float v8 = v6[1];
      float v9 = v6[2];
      float v10 = v6[3];
      if (*v6 < v4 || v8 < v4 || v9 < v4 || v10 < v4)
      {
        if (v7 >= v8) {
          float v7 = v6[1];
        }
        if (v9 >= v10) {
          float v9 = v6[3];
        }
        if (v7 < v4) {
          float v4 = v7;
        }
        if (v9 < v4) {
          float v4 = v9;
        }
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    int v3 = 0;
    float v4 = INFINITY;
  }
  if (v3 < (int)v1)
  {
    float v14 = (float *)(v2 + 4 * v3);
    do
    {
      float v15 = *v14++;
      float v16 = v15;
      if (v15 < v4) {
        float v4 = v16;
      }
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

float kaldi::VectorBase<float>::ReverseCopyFromVec(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    int v3 = *(float **)a1;
    uint64_t v4 = *a2;
    do
    {
      float result = *(float *)(v4 + 4 * (int)--v2);
      *v3++ = result;
    }
    while (v2);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(float **)a1;
  do
  {
    if (*v5 < a2)
    {
      *uint64_t v5 = a2;
      uint64_t result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t kaldi::VectorBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(float **)a1;
  do
  {
    if (*v5 > a2)
    {
      *uint64_t v5 = a2;
      uint64_t result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

float kaldi::VectorBase<float>::MulElements(uint64_t a1, float **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    int v3 = *a2;
    uint64_t v4 = *(float **)a1;
    do
    {
      float v5 = *v3++;
      float result = v5 * *v4;
      *v4++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::Scale(uint64_t a1, float a2)
{
}

float kaldi::VectorBase<float>::ApplySoftMax(uint64_t a1)
{
  kaldi::VectorBase<float>::Max((uint64_t *)a1);
  float v3 = v2;
  int v4 = *(_DWORD *)(a1 + 8);
  float v5 = *(float **)a1;
  if (v4 >= 1)
  {
    float v6 = *(float **)a1;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    do
    {
      float *v6 = *v6 - v2;
      ++v6;
      --v7;
    }
    while (v7);
  }
  LODWORD(v14[0]) = v4;
  vvexpf(v5, v5, (const int *)v14);
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1) {
    goto LABEL_9;
  }
  uint64_t v9 = 0;
  float v10 = *(float **)a1;
  double v11 = 0.0;
  do
    double v11 = v11 + v10[v9++];
  while (v8 != v9);
  float v12 = v11;
  if (v12 == 0.0)
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "SoftMax produced NaN on vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  cblas_sscal(v8, 1.0 / v12, v10, 1);
  return v3 + logf(v12);
}

uint64_t *kaldi::VectorBase<float>::Max(uint64_t *result)
{
  unint64_t v1 = *((unsigned int *)result + 2);
  if (!v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  uint64_t v2 = *result;
  if ((int)v1 >= 4)
  {
    uint64_t v5 = 0;
    int v3 = v1 & 0xFFFFFFFC;
    float v4 = -INFINITY;
    do
    {
      float v6 = (float *)(v2 + 4 * v5);
      float v7 = *v6;
      float v8 = v6[1];
      float v9 = v6[2];
      float v10 = v6[3];
      if (*v6 <= v4)
      {
        BOOL v11 = v8 == v4;
        BOOL v12 = v8 < v4;
      }
      else
      {
        BOOL v11 = 0;
        BOOL v12 = 0;
      }
      if (v12 || v11)
      {
        BOOL v13 = v9 == v4;
        BOOL v14 = v9 < v4;
      }
      else
      {
        BOOL v13 = 0;
        BOOL v14 = 0;
      }
      if (v14 || v13)
      {
        BOOL v15 = v10 == v4;
        BOOL v16 = v10 < v4;
      }
      else
      {
        BOOL v15 = 0;
        BOOL v16 = 0;
      }
      if (!v16 && !v15)
      {
        if (v7 <= v8) {
          float v7 = v6[1];
        }
        if (v9 <= v10) {
          float v9 = v6[3];
        }
        if (v7 > v4) {
          float v4 = v7;
        }
        if (v9 > v4) {
          float v4 = v9;
        }
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    int v3 = 0;
    float v4 = -INFINITY;
  }
  if (v3 < (int)v1)
  {
    v17 = (float *)(v2 + 4 * v3);
    do
    {
      float v18 = *v17++;
      float v19 = v18;
      if (v18 > v4) {
        float v4 = v19;
      }
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::Add(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    int v3 = *(float **)result;
    do
    {
      *int v3 = *v3 + a2;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::ApplyExp(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvexpf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::Sigmoid(uint64_t a1, const void **a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(float **)a1;
  float v6 = *a2;
  if (*(const void **)a1 != v6)
  {
    memcpy(*(void **)a1, v6, 4 * v4);
    int v4 = *(_DWORD *)(a1 + 8);
    uint64_t v5 = *(float **)a1;
  }
  cblas_sscal(v4, 0.5, v5, 1);
  int v11 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a1, &v11);
  int v7 = *(_DWORD *)(a1 + 8);
  float v8 = *(float **)a1;
  if (v7 >= 1)
  {
    float v9 = *(float **)a1;
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    do
    {
      *float v9 = *v9 + 1.0;
      ++v9;
      --v10;
    }
    while (v10);
  }
  cblas_sscal(v7, 0.5, v8, 1);
}

void kaldi::VectorBase<float>::ApplyTanh(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::ApplyPowAbs(uint64_t a1, int a2, float a3)
{
  if (a3 == 1.0)
  {
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if ((int)v5 >= 1)
    {
      float v6 = *(float **)a1;
      do
      {
        float v7 = *v6;
        if (a2)
        {
          float v8 = fabsf(v7);
          if (v7 >= 0.0) {
            float v9 = v8;
          }
          else {
            float v9 = -v8;
          }
        }
        else
        {
          float v9 = fabsf(v7);
        }
        *v6++ = v9;
        --v5;
      }
      while (v5);
    }
  }
  if (a3 == 2.0)
  {
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if ((int)v10 >= 1)
    {
      int v11 = *(float **)a1;
      do
      {
        float v12 = -*v11;
        if (((*v11 < 0.0) & a2) == 0) {
          float v12 = *v11;
        }
        float *v11 = *v11 * v12;
        ++v11;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    if (a3 != 0.5)
    {
      uint64_t v16 = *(unsigned int *)(a1 + 8);
      if (a3 >= 0.0)
      {
        if ((int)v16 < 1) {
          return;
        }
        uint64_t v21 = 0;
        v22 = *(float **)a1;
        while (1)
        {
          float v23 = v22[v21];
          BOOL v24 = v23 < 0.0;
          float v25 = powf(fabsf(v23), a3);
          if ((v24 & a2) != 0) {
            float v25 = -v25;
          }
          v22[v21] = v25;
          if (v25 == INFINITY) {
            break;
          }
          if (v16 == ++v21) {
            return;
          }
        }
      }
      else
      {
        if ((int)v16 < 1) {
          return;
        }
        uint64_t v17 = 0;
        float v18 = *(float **)a1;
        while (1)
        {
          float v19 = v18[v17];
          float v20 = 0.0;
          if (v19 != 0.0) {
            float v20 = powf(fabsf(v19), a3);
          }
          if (((v20 < 0.0) & a2) != 0) {
            float v20 = -v20;
          }
          v18[v17] = v20;
          if (v20 == INFINITY) {
            break;
          }
          if (v16 == ++v17) {
            return;
          }
        }
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Could not raise element ", 24);
      v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"to power ", 9);
      v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": returned value = ", 19);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if ((int)v13 >= 1)
    {
      BOOL v14 = *(float **)a1;
      do
      {
        float v15 = sqrtf(fabsf(*v14));
        if (((*v14 < 0.0) & a2) != 0) {
          float v15 = -v15;
        }
        *v14++ = v15;
        --v13;
      }
      while (v13);
    }
  }
}

float kaldi::VectorBase<float>::Norm(uint64_t a1, float a2)
{
  if (a2 == 0.0)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 8);
    if ((int)v3 < 1)
    {
      return 0.0;
    }
    else
    {
      int v4 = *(float **)a1;
      float result = 0.0;
      do
      {
        float v6 = *v4++;
        if (v6 != 0.0) {
          float result = result + 1.0;
        }
        --v3;
      }
      while (v3);
    }
  }
  else if (a2 == 1.0)
  {
    int v8 = *(_DWORD *)(a1 + 8);
    float v9 = *(const float **)a1;
    return cblas_sasum(v8, v9, 1);
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (a2 == 2.0)
    {
      int v11 = *(const float **)a1;
      int v12 = *(_DWORD *)(a1 + 8);
      return cblas_snrm2(v12, v11, 1);
    }
    else if ((int)v10 <= 0)
    {
      return powf(0.0, 1.0 / a2);
    }
    else
    {
      uint64_t v13 = *(float **)a1;
      char v14 = 1;
      float v15 = 0.0;
      do
      {
        float v16 = *v13++;
        float v17 = powf(fabsf(v16), a2);
        v14 &= v17 != INFINITY;
        float v15 = v15 + v17;
        --v10;
      }
      while (v10);
      float result = powf(v15, 1.0 / a2);
      if ((v14 & 1) == 0)
      {
        kaldi::VectorBase<float>::Max((uint64_t *)a1);
        float v19 = v18;
        kaldi::VectorBase<float>::Min((uint64_t *)a1);
        float v21 = -v20;
        if (v19 < v21) {
          float v19 = v21;
        }
        kaldi::Vector<float>::Vector((uint64_t)&__X, a1);
        cblas_sscal(__N, 1.0 / v19, __X, 1);
        float v22 = kaldi::VectorBase<float>::Norm(&__X, a2);
        if (__X) {
          free(__X);
        }
        return v19 * v22;
      }
    }
  }
  return result;
}

void sub_1B2172CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    free(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::VectorBase<float>::InvertElements(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = *(float **)result;
    do
    {
      *uint64_t v2 = 1.0 / *v2;
      ++v2;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::ReplaceValue(uint64_t result, float a2, float a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if ((int)v3 >= 1)
  {
    int v4 = *(float **)result;
    do
    {
      if (*v4 == a2) {
        *int v4 = a3;
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float kaldi::VectorBase<float>::DivElements(uint64_t a1, float **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = *a2;
    int v4 = *(float **)a1;
    do
    {
      float v5 = *v3++;
      float result = *v4 / v5;
      *v4++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::AddVecVec(uint64_t a1, const float **a2, const float **a3, float a4, float a5)
{
}

void kaldi::VectorBase<float>::CopyRowsFromMat(uint64_t a1, uint64_t *a2)
{
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v3, *(void *)a1, 1, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8));
  kaldi::CompressedMatrix::CopyToMat<float>(a2, (uint64_t)v3);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v3);
}

void sub_1B2172F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *kaldi::VectorBase<float>::Max(uint64_t *result, int *a2)
{
  unint64_t v2 = *((unsigned int *)result + 2);
  if (!v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  uint64_t v3 = *result;
  if ((int)v2 >= 4)
  {
    int v4 = 0;
    int v5 = v2 & 0xFFFFFFFC;
    float v7 = (float *)(v3 + 8);
    float v6 = -INFINITY;
    for (unint64_t i = 4; i <= v2; i += 4)
    {
      float v10 = *(v7 - 2);
      float v9 = *(v7 - 1);
      float v12 = *v7;
      float v11 = v7[1];
      if (v10 > v6 || v9 > v6 || v12 > v6 || v11 > v6)
      {
        if (v10 > v6)
        {
          float v6 = *(v7 - 2);
          int v4 = i - 4;
        }
        if (v9 > v6)
        {
          float v6 = *(v7 - 1);
          int v4 = i - 3;
        }
        if (v12 > v6)
        {
          float v6 = *v7;
          int v4 = i - 2;
        }
        if (v11 > v6)
        {
          int v4 = i - 1;
          float v6 = v7[1];
        }
      }
      v7 += 4;
    }
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    float v6 = -INFINITY;
  }
  if (v5 < (int)v2)
  {
    float v16 = (float *)(v3 + 4 * v5);
    do
    {
      float v17 = *v16++;
      float v18 = v17;
      if (v17 > v6)
      {
        float v6 = v18;
        int v4 = v5;
      }
      ++v5;
    }
    while ((int)v2 > v5);
  }
  *a2 = v4;
  return result;
}

uint64_t *kaldi::VectorBase<float>::Min(uint64_t *result, int *a2)
{
  unint64_t v2 = *((unsigned int *)result + 2);
  if (!v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  uint64_t v3 = *result;
  if ((int)v2 >= 4)
  {
    int v4 = 0;
    int v5 = v2 & 0xFFFFFFFC;
    float v7 = (float *)(v3 + 8);
    float v6 = INFINITY;
    for (unint64_t i = 4; i <= v2; i += 4)
    {
      float v10 = *(v7 - 2);
      float v9 = *(v7 - 1);
      float v12 = *v7;
      float v11 = v7[1];
      if (v10 < v6 || v9 < v6 || v12 < v6 || v11 < v6)
      {
        if (v10 < v6)
        {
          float v6 = *(v7 - 2);
          int v4 = i - 4;
        }
        if (v9 < v6)
        {
          float v6 = *(v7 - 1);
          int v4 = i - 3;
        }
        if (v12 < v6)
        {
          float v6 = *v7;
          int v4 = i - 2;
        }
        if (v11 < v6)
        {
          int v4 = i - 1;
          float v6 = v7[1];
        }
      }
      v7 += 4;
    }
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    float v6 = INFINITY;
  }
  if (v5 < (int)v2)
  {
    float v16 = (float *)(v3 + 4 * v5);
    do
    {
      float v17 = *v16++;
      float v18 = v17;
      if (v17 < v6)
      {
        float v6 = v18;
        int v4 = v5;
      }
      ++v5;
    }
    while ((int)v2 > v5);
  }
  *a2 = v4;
  return result;
}

uint64_t kaldi::VectorBase<float>::CountZeros(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0;
  }
  unint64_t v2 = *(float **)a1;
  double v3 = 0.0;
  do
  {
    float v4 = *v2++;
    if (v4 == 0.0) {
      double v3 = v3 + 1.0;
    }
    --v1;
  }
  while (v1);
  return (int)v3;
}

uint64_t kaldi::VectorBase<float>::AddColSumMat(uint64_t *a1, uint64_t a2, float a3, float a4)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t result = kaldi::MatrixBase<float>::NumCols(a2);
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    float v11 = *(float **)a2;
    uint64_t v12 = *a1;
    uint64_t v13 = 4 * *(int *)(a2 + 16);
    do
    {
      double v14 = 0.0;
      if ((int)result >= 1)
      {
        uint64_t v15 = result;
        float v16 = v11;
        do
        {
          float v17 = *v16++;
          double v14 = v14 + v17;
          --v15;
        }
        while (v15);
      }
      float v18 = (float)(*(float *)(v12 + 4 * v10) * a4) + a3 * v14;
      *(float *)(v12 + 4 * v10++) = v18;
      float v11 = (float *)((char *)v11 + v13);
    }
    while (v10 != v9);
  }
  return result;
}

void kaldi::VectorBase<float>::AddDiagMat2(uint64_t a1, const float **a2, int a3, float a4, float a5)
{
  if (a3 == 111)
  {
    kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    int v9 = *(_DWORD *)(a1 + 8);
    int v10 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    int v11 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
    if (v9 >= 1)
    {
      uint64_t v12 = *a2;
      uint64_t v13 = *(float **)a1;
      uint64_t v14 = 4 * v11;
      do
      {
        float v15 = *v13;
        *v13++ = (float)(cblas_sdot(v10, v12, 1, v12, 1) * a4) + (float)(a5 * v15);
        uint64_t v12 = (const float *)((char *)v12 + v14);
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    int v16 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    int v17 = *(_DWORD *)(a1 + 8);
    int v18 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
    if (v17 >= 1)
    {
      int v19 = v18;
      float v20 = *a2;
      float v21 = *(float **)a1;
      do
      {
        float v22 = *v21;
        *v21++ = (float)(cblas_sdot(v16, v20, v19, v20, v19) * a4) + (float)(a5 * v22);
        ++v20;
        --v17;
      }
      while (v17);
    }
  }
}

void kaldi::VectorBase<float>::AddDiagMatMat(uint64_t a1, const float **a2, int a3, const float **a4, int a5, float a6, float a7)
{
  int v14 = *(_DWORD *)(a1 + 8);
  if (a3 == 112) {
    int v15 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  }
  else {
    int v15 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  }
  int v16 = v15;
  if (a5 == 112) {
    kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
  }
  else {
    kaldi::MatrixBase<float>::NumRows((uint64_t)a4);
  }
  int v17 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
  int v18 = v17;
  if (a3 == 112) {
    int v19 = v17;
  }
  else {
    int v19 = 1;
  }
  int v20 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a4);
  if (a5 == 112) {
    int v21 = 1;
  }
  else {
    int v21 = v20;
  }
  if (v14 >= 1)
  {
    float v22 = *a4;
    float v23 = *a2;
    BOOL v24 = *(float **)a1;
    if (a5 == 112) {
      int v25 = v20;
    }
    else {
      int v25 = 1;
    }
    if (a3 == 112) {
      int v26 = 1;
    }
    else {
      int v26 = v18;
    }
    uint64_t v27 = 4 * v25;
    uint64_t v28 = 4 * v26;
    do
    {
      float v29 = *v24;
      *v24++ = (float)(cblas_sdot(v16, v23, v19, v22, v21) * a6) + (float)(a7 * v29);
      float v22 = (const float *)((char *)v22 + v27);
      float v23 = (const float *)((char *)v23 + v28);
      --v14;
    }
    while (v14);
  }
}

void kaldi::VectorBase<float>::Write(uint64_t a1, void *a2, int a3)
{
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Failed to write vector to stream: stream not good");
    goto LABEL_13;
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FV");
    kaldi::WriteToken(a2, 1, (char *)__p);
    kaldi::WriteBasicType<int>(a2, 1);
    std::ostream::write();
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [ ", 3);
    if (*(int *)(a1 + 8) >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        float v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
        ++v5;
      }
      while (v5 < *(int *)(a1 + 8));
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
  }
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Failed to write vector to stream");
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
}

uint64_t kaldi::VectorBase<double>::Set(uint64_t result, double a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    double v3 = *(double **)result;
    do
    {
      *v3++ = a2;
      --v2;
    }
    while (v2);
  }
  return result;
}

double kaldi::VectorBase<double>::Sum(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0.0;
  }
  uint64_t v2 = *(double **)a1;
  double result = 0.0;
  do
  {
    double v4 = *v2++;
    double result = result + v4;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t kaldi::VectorBase<double>::ApplyFloor(uint64_t a1, double a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = *(double **)a1;
  do
  {
    if (*v5 < a2)
    {
      *uint64_t v5 = a2;
      uint64_t result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

double kaldi::VectorBase<double>::MulElements(uint64_t a1, double **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    double v3 = *a2;
    double v4 = *(double **)a1;
    do
    {
      double v5 = *v3++;
      double result = v5 * *v4;
      *v4++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<double>::Scale(uint64_t a1, double a2)
{
}

long double kaldi::VectorBase<double>::ApplySoftMax(uint64_t a1)
{
  kaldi::VectorBase<double>::Max((uint64_t *)a1);
  double v3 = v2;
  int v4 = *(_DWORD *)(a1 + 8);
  double v5 = *(double **)a1;
  if (v4 >= 1)
  {
    float v6 = *(double **)a1;
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    do
    {
      double *v6 = *v6 - v2;
      ++v6;
      --v7;
    }
    while (v7);
  }
  LODWORD(v13[0]) = v4;
  vvexp(v5, v5, (const int *)v13);
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1) {
    goto LABEL_9;
  }
  uint64_t v9 = 0;
  int v10 = *(double **)a1;
  double v11 = 0.0;
  do
    double v11 = v11 + v10[v9++];
  while (v8 != v9);
  if (v11 == 0.0)
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "SoftMax produced NaN on vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  cblas_dscal(v8, 1.0 / v11, v10, 1);
  return v3 + log(v11);
}

uint64_t *kaldi::VectorBase<double>::Max(uint64_t *result)
{
  unint64_t v1 = *((unsigned int *)result + 2);
  if (!v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  uint64_t v2 = *result;
  if ((int)v1 >= 4)
  {
    uint64_t v5 = 0;
    int v3 = v1 & 0xFFFFFFFC;
    double v4 = -INFINITY;
    do
    {
      float v6 = (double *)(v2 + 8 * v5);
      double v7 = *v6;
      double v8 = v6[1];
      double v9 = v6[2];
      double v10 = v6[3];
      if (*v6 <= v4)
      {
        BOOL v11 = v8 == v4;
        BOOL v12 = v8 < v4;
      }
      else
      {
        BOOL v11 = 0;
        BOOL v12 = 0;
      }
      if (v12 || v11)
      {
        BOOL v13 = v9 == v4;
        BOOL v14 = v9 < v4;
      }
      else
      {
        BOOL v13 = 0;
        BOOL v14 = 0;
      }
      if (v14 || v13)
      {
        BOOL v15 = v10 == v4;
        BOOL v16 = v10 < v4;
      }
      else
      {
        BOOL v15 = 0;
        BOOL v16 = 0;
      }
      if (!v16 && !v15)
      {
        if (v7 <= v8) {
          double v7 = v6[1];
        }
        if (v9 <= v10) {
          double v9 = v6[3];
        }
        if (v7 > v4) {
          double v4 = v7;
        }
        if (v9 > v4) {
          double v4 = v9;
        }
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    int v3 = 0;
    double v4 = -INFINITY;
  }
  if (v3 < (int)v1)
  {
    int v17 = (double *)(v2 + 8 * v3);
    do
    {
      double v18 = *v17++;
      double v19 = v18;
      if (v18 > v4) {
        double v4 = v19;
      }
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

uint64_t kaldi::VectorBase<double>::AddVec2(uint64_t result, double **a2, double a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if ((int)v3 >= 1)
  {
    double v4 = *a2;
    uint64_t v5 = *(double **)result;
    do
    {
      double v6 = *v4++;
      *uint64_t v5 = *v5 + v6 * a3 * v6;
      ++v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

void kaldi::VectorBase<double>::AddRowSumMat(uint64_t a1, const double **a2, double a3, double a4)
{
  kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  int v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  int v9 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
  int v10 = *(_DWORD *)(a1 + 8);
  BOOL v11 = *(double **)a1;
  cblas_dscal(v10, a4, v11, 1);
  if (v8 >= 1)
  {
    BOOL v12 = *a2;
    uint64_t v13 = 8 * v9;
    do
    {
      cblas_daxpy(v10, a3, v12, 1, v11, 1);
      BOOL v12 = (const double *)((char *)v12 + v13);
      --v8;
    }
    while (v8);
  }
}

void kaldi::VectorBase<double>::AddDiagMat2(uint64_t a1, const double **a2, int a3, double a4, double a5)
{
  if (a3 == 111)
  {
    kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    int v9 = *(_DWORD *)(a1 + 8);
    int v10 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    int v11 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
    if (v9 >= 1)
    {
      BOOL v12 = *a2;
      uint64_t v13 = *(double **)a1;
      uint64_t v14 = 8 * v11;
      do
      {
        double v15 = *v13;
        *v13++ = cblas_ddot(v10, v12, 1, v12, 1) * a4 + a5 * v15;
        BOOL v12 = (const double *)((char *)v12 + v14);
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    int v16 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    int v17 = *(_DWORD *)(a1 + 8);
    int v18 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
    if (v17 >= 1)
    {
      int v19 = v18;
      int v20 = *a2;
      int v21 = *(double **)a1;
      do
      {
        double v22 = *v21;
        *v21++ = cblas_ddot(v16, v20, v19, v20, v19) * a4 + a5 * v22;
        ++v20;
        --v17;
      }
      while (v17);
    }
  }
}

void kaldi::VectorBase<float>::AddMatVec<signed char>(uint64_t a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6)
{
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::QuantizedVectorBase<signed char>::AddMatVec(a6, a2, a1, a4);
}

void kaldi::VectorBase<float>::AddMatVec<short>(uint64_t a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6)
{
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::QuantizedVectorBase<short>::AddMatVec(a6, a2, a1, a4);
}

void kaldi::VectorBase<float>::ApplyPow(uint64_t a1, float a2)
{
  float v3 = a2;
  int v2 = *(_DWORD *)(a1 + 8);
  vvpowsf(*(float **)a1, &v3, *(const float **)a1, &v2);
}

void kaldi::VectorBase<double>::ApplyPow(uint64_t a1, double a2)
{
  double v3 = a2;
  int v2 = *(_DWORD *)(a1 + 8);
  vvpows(*(double **)a1, &v3, *(const double **)a1, &v2);
}

void kaldi::VectorBase<float>::ApplyLog(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvlogf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<double>::ApplyLog(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvlog(*(double **)a1, *(const double **)a1, &v1);
}

void kaldi::VectorBase<float>::ApplyAbs(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  vvfabsf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::Tanh(uint64_t a1, const float **a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *a2, &v2);
}

void File::File(File *this, const char *a2, const char *a3, int a4)
{
  *(void *)this = a2;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = a4;
  *((unsigned char *)this + 13) = 1;
  *((void *)this + 2) = 0;
  int v8 = (void *)((char *)this + 16);
  *((void *)this + 3) = 0;
  int v9 = malloc_type_malloc(0x80uLL, 0x57C4CFDAuLL);
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 4) = v9;
  *((_DWORD *)this + 10) = 128;
  *((_WORD *)this + 22) = 256;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 7) = -1;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  unint64_t v10 = strlen(a2);
  if (v10 >= 4 && !strcmp(&a2[v10 - 3], ".gz"))
  {
    gzFile v11 = gzopen(a2, a3);
    *((void *)this + 3) = v11;
    if (v11) {
      goto LABEL_8;
    }
  }
  else
  {
    *((void *)this + 2) = srilm_zopen(a2, a3);
    if (*((void *)this + 3)) {
      goto LABEL_8;
    }
  }
  if (a4 && !*v8)
  {
    perror(a2);
    exit(a4);
  }
LABEL_8:
  MEMORY[0x1B3EA7B20]((char *)this + 64, "");
}

void sub_1B2173EC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void File::File(File *this, __sFILE *a2, char a3)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = a3;
  *((unsigned char *)this + 13) = 1;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = 0;
  double v4 = malloc_type_malloc(0x80uLL, 0x43C4C94DuLL);
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 4) = v4;
  *((_DWORD *)this + 10) = 128;
  *((_WORD *)this + 22) = 256;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 7) = -1;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  MEMORY[0x1B3EA7B20]((char *)this + 64, "");
}

void sub_1B2173F78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void File::File(File *this, const char *a2, unint64_t a3, char a4, int a5)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = a4;
  *((unsigned char *)this + 13) = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  int v8 = malloc_type_malloc(0x80uLL, 0x1F9E201EuLL);
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 4) = v8;
  *((_DWORD *)this + 10) = 128;
  *((_WORD *)this + 22) = 256;
  *((_DWORD *)this + 12) = 0;
  *((void *)this + 7) = -1;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  MEMORY[0x1B3EA7B20]((char *)this + 64, a2);
  if (*((char *)this + 87) < 0) {
    uint64_t v9 = *((void *)this + 9);
  }
  else {
    LODWORD(v9) = *((unsigned __int8 *)this + 87);
  }
  *((_DWORD *)this + 22) = v9;
  *((_DWORD *)this + 24) = 1;
  if ((int)v9 < a5) {
    std::string::reserve((std::string *)((char *)this + 64), a5);
  }
}

void sub_1B2174070(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void File::~File(void **this)
{
  if (*this) {
    File::close((File *)this);
  }
  if (this[7] != (void *)-1) {
    MEMORY[0x1B3EA9650]();
  }
  int v2 = this[4];
  if (v2) {
    free(v2);
  }
  this[4] = 0;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
}

uint64_t File::close(File *this)
{
  int v2 = (gzFile_s *)*((void *)this + 3);
  if (v2)
  {
    uint64_t result = gzclose(v2);
  }
  else
  {
    uint64_t result = *((void *)this + 2);
    if (!result)
    {
      *((void *)this + 2) = 0;
      *((void *)this + 3) = 0;
      return result;
    }
    uint64_t result = zclose((FILE *)result);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (result)
  {
    if (*((unsigned char *)this + 12)) {
      File::close((const char **)this, (unsigned __int8 *)this + 12);
    }
  }
  return result;
}

uint64_t File::reopen(File *this, const char *a2, const char *a3)
{
  MEMORY[0x1B3EA7B20]((char *)this + 64, "");
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((unsigned char *)this + 45) = 1;
  *((_DWORD *)this + 12) = 0;
  if (*((void *)this + 7) != -1)
  {
    MEMORY[0x1B3EA9650]();
    *((void *)this + 7) = -1;
  }
  if (*(void *)this) {
    File::close(this);
  }
  *(void *)this = a2;
  unint64_t v6 = strlen(a2);
  if (v6 >= 4 && !strcmp(&a2[v6 - 3], ".gz"))
  {
    *((void *)this + 3) = gzopen(a2, a3);
    if (*((void *)this + 2)) {
      return 1;
    }
  }
  else
  {
    double v7 = srilm_zopen(a2, a3);
    *((void *)this + 2) = v7;
    if (v7) {
      return 1;
    }
  }
  if (*((void *)this + 3)) {
    return 1;
  }
  if (*((unsigned char *)this + 12)) {
    File::reopen((const char **)this, (unsigned __int8 *)this + 12);
  }
  return 0;
}

BOOL File::error(File *this)
{
  if (*((_DWORD *)this + 24)) {
    return 0;
  }
  if (*((void *)this + 3))
  {
    int v2 = gzerror(*((gzFile *)this + 3), 0);
    if (v2)
    {
      BOOL v3 = *v2 == 0;
      return !v3;
    }
    return 1;
  }
  double v4 = (FILE *)*((void *)this + 2);
  if (!v4) {
    return 1;
  }
  BOOL v3 = ferror(v4) == 0;
  return !v3;
}

char *File::fgetsUTF8(File *this, char *a2, int a3)
{
  double v4 = a2;
  size_t v6 = a3;
  bzero(a2, a3);
  if (a3) {
    int v7 = a3;
  }
  else {
    int v7 = a3 - 1;
  }
  if (!File::fgets(this, v4, v7)) {
    return 0;
  }
  if (!*((unsigned char *)this + 45)) {
    goto LABEL_19;
  }
  *((unsigned char *)this + 45) = 0;
  *((void *)this + 7) = 0;
  if (!strncmp(v4, UTF8magic, 3uLL))
  {
    uint64_t v9 = 0;
    int v10 = 1;
    *((_DWORD *)this + 12) = 1;
    unsigned int v8 = 3;
  }
  else
  {
    unsigned int v8 = 2;
    if (!strncmp(v4, UTF16LEmagic, 2uLL))
    {
      *((_DWORD *)this + 12) = 2;
      uint64_t v9 = MEMORY[0x1B3EA9660]("UTF-8", "UTF-16LE");
      *((void *)this + 7) = v9;
    }
    else
    {
      if (strncmp(v4, UTF16BEmagic, 2uLL))
      {
        uint64_t v9 = 0;
        int v10 = 0;
        unsigned int v8 = 0;
        goto LABEL_14;
      }
      *((_DWORD *)this + 12) = 3;
      uint64_t v9 = MEMORY[0x1B3EA9660]("UTF-8", "UTF-16BE");
      *((void *)this + 7) = v9;
      unsigned int v8 = 2;
    }
    int v10 = 1;
  }
LABEL_14:
  if (v9 == -1)
  {
    BOOL v12 = File::position((const char **)this, MEMORY[0x1E4FBA240]);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"conversion from UTF-16", 22);
    if (*((_DWORD *)this + 12) == 2) {
      uint64_t v14 = "LE";
    }
    else {
      uint64_t v14 = "BE";
    }
    double v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" not supported\n", 15);
    return 0;
  }
  if (!v9) {
    *((void *)this + 7) = -1;
  }
  if (v10)
  {
    memmove(v4, &v4[v8], a3 - v8);
    bzero(&v4[v6 - v8], v8);
  }
LABEL_19:
  uint64_t v11 = *((void *)this + 7);
  if (v11 != -1)
  {
    int v24 = 0;
    int v25 = a3;
    uint64_t v26 = 0;
    int v27 = 0;
    if (a3) {
      Array<char>::alloc();
    }
    uint64_t v22 = 0;
    float v23 = v4;
    size_t __n = v6;
    uint64_t v21 = 0;
    uint64_t v16 = MEMORY[0x1B3EA9640](v11, &v23, &v22, &v21, &__n);
    if (v16 == -1)
    {
      perror("iconv");
    }
    else
    {
      size_t v17 = __n;
      memcpy(v4, (const void *)(v26 - v24), __n);
      if (v6 > v17) {
        bzero(&v4[v17], v6 - v17);
      }
      if (*((_DWORD *)this + 12) == 2)
      {
        int v18 = strlen(v4);
        if (v18)
        {
          if (v4[v18 - 1] == 10) {
            File::fgetc(this);
          }
        }
      }
    }
    if (v26) {
      MEMORY[0x1B3EA8630](v26, 0x1000C8077774924);
    }
    if (v16 == -1) {
      return 0;
    }
  }
  return v4;
}

void sub_1B21745A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    MEMORY[0x1B3EA8630](a15, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

char *File::fgets(File *this, char *buf, int a3)
{
  uint64_t v5 = (gzFile_s *)*((void *)this + 3);
  if (v5)
  {
    return gzgets(v5, buf, a3);
  }
  else if (*((void *)this + 2))
  {
    uint64_t v9 = (FILE *)*((void *)this + 2);
    return fgets(buf, a3, v9);
  }
  else
  {
    uint64_t result = 0;
    if (buf)
    {
      uint64_t v10 = (a3 - 1);
      if (a3 >= 1)
      {
        if (a3 > 1)
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0x100000000;
          while (1)
          {
            int v13 = File::fgetc(this);
            if (v13 == -1) {
              break;
            }
            buf[v11] = v13;
            if (v13 == 10)
            {
              buf[v12 >> 32] = 0;
              return buf;
            }
            ++v11;
            v12 += 0x100000000;
            if (v10 == v11) {
              goto LABEL_19;
            }
          }
          LODWORD(v10) = v11;
LABEL_19:
          buf[(int)v10] = 0;
          uint64_t result = buf;
          if (v10) {
            return result;
          }
        }
        else
        {
          *buf = 0;
        }
        return 0;
      }
    }
  }
  return result;
}

void *File::position(const char **a1, void *a2)
{
  BOOL v3 = *a1;
  if (*a1)
  {
    size_t v4 = strlen(*a1);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"line ", 5);
  size_t v6 = (void *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
}

uint64_t File::fgetc(File *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    if (*(_DWORD *)v1)
    {
      --*(_DWORD *)v1;
      int v2 = *(unsigned __int8 **)(v1 + 8);
      uint64_t v3 = *(void *)(v1 + 16) + 1;
      *(void *)(v1 + 8) = v2 + 1;
      *(void *)(v1 + 16) = v3;
      return *v2;
    }
    else
    {
      size_t v6 = (gzFile_s *)*((void *)this + 3);
      return gzgetc(v6);
    }
  }
  else if (*((void *)this + 2))
  {
    uint64_t v5 = (FILE *)*((void *)this + 2);
    return fgetc(v5);
  }
  else if (*((_DWORD *)this + 24) && (int v7 = *((_DWORD *)this + 22), v7 >= 1) && (v8 = *((int *)this + 23), (int)v8 < v7))
  {
    *((_DWORD *)this + 23) = v8 + 1;
    return *std::string::at((std::string *)((char *)this + 64), v8);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

char *File::getline(File *this)
{
  if (*((unsigned char *)this + 44))
  {
    *((unsigned char *)this + 44) = 0;
    return (char *)*((void *)this + 4);
  }
  uint64_t result = File::fgetsUTF8(this, *((char **)this + 4), *((_DWORD *)this + 10));
  if (result)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    uint64_t v5 = MEMORY[0x1E4F14390];
    while (1)
    {
      while (1)
      {
        size_t v6 = (unsigned __int8 *)*((void *)this + 4);
        int v7 = strlen((const char *)&v6[v3]);
        if (v7)
        {
          uint64_t v3 = (v4 + v7);
          if (v6[(v3 - 1)] != 10) {
            break;
          }
        }
LABEL_13:
        ++*((_DWORD *)this + 2);
        unsigned __int8 v10 = *v6;
        if (!*v6) {
          goto LABEL_25;
        }
        uint64_t v11 = v6 + 1;
        while ((v10 & 0x80) == 0)
        {
          if ((*(_DWORD *)(v5 + 4 * (char)v10 + 60) & 0x4000) == 0) {
            goto LABEL_21;
          }
LABEL_19:
          int v12 = *v11++;
          unsigned __int8 v10 = v12;
          if (!v12) {
            goto LABEL_25;
          }
        }
        if (__maskrune((char)v10, 0x4000uLL)) {
          goto LABEL_19;
        }
LABEL_21:
        if (*(v11 - 1))
        {
          uint64_t result = (char *)*((void *)this + 4);
          if (!*((unsigned char *)this + 13) || *result != 35 || result[1] != 35)
          {
            *((unsigned char *)this + 44) = 0;
            return result;
          }
        }
LABEL_25:
        uint64_t result = File::fgetsUTF8(this, *((char **)this + 4), *((_DWORD *)this + 10));
        uint64_t v3 = 0;
        int v4 = 0;
        if (!result) {
          return result;
        }
      }
      int v8 = *((_DWORD *)this + 10);
      if (v3 >= v8 - 128)
      {
        size_t v9 = (2 * v8);
        *((_DWORD *)this + 10) = v9;
        size_t v6 = (unsigned __int8 *)malloc_type_realloc(v6, v9, 0xDFB1A35BuLL);
        *((void *)this + 4) = v6;
        int v8 = *((_DWORD *)this + 10);
      }
      int v4 = v3;
      if (!File::fgetsUTF8(this, (char *)&v6[v3], v8 - (int)v3))
      {
        if (!v3) {
          return 0;
        }
        *(unsigned char *)(*((void *)this + 4) + v3) = 0;
        size_t v6 = (unsigned __int8 *)*((void *)this + 4);
        goto LABEL_13;
      }
    }
  }
  return result;
}

uint64_t File::ungetline(uint64_t this)
{
  *(unsigned char *)(this + 44) = 1;
  return this;
}

void *File::offset(uint64_t a1, void *a2)
{
  int v4 = *(const char **)a1;
  if (*(void *)a1)
  {
    size_t v5 = strlen(*(const char **)a1);
    size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  }
  if (*(void *)(a1 + 16))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"offset ", 7);
    ftello(*(FILE **)(a1 + 16));
    int v7 = (void *)std::ostream::operator<<();
  }
  else
  {
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"offset unknown ", 15);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
}

uint64_t File::fprintf(File *this, const char *a2, ...)
{
  va_start(va, a2);
  uint64_t v2 = MEMORY[0x1F4188790](this, a2);
  uint64_t v4 = v2;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (*(void *)(v2 + 24))
  {
    va_copy(__str, va);
    return gzvprintf(*(gzFile *)(v2 + 24), v3, va);
  }
  else if (*(void *)(v2 + 16))
  {
    va_copy(__str, va);
    return vfprintf(*(FILE **)(v2 + 16), v3, va);
  }
  else if (*(_DWORD *)(v2 + 96))
  {
    if (vsnprintf(__str, 0x1000uLL, v3, va) >= 0x1000) {
      operator new[]();
    }
    std::string::append((std::string *)(v4 + 64), __str);
    return 0;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

size_t File::fread(File *this, void *__ptr, size_t __size, size_t __nitems)
{
  size_t v5 = (gzFile_s *)*((void *)this + 3);
  if (v5) {
    return gzread(v5, __ptr, __nitems * __size) / __size;
  }
  uint64_t v7 = (FILE *)*((void *)this + 2);
  if (!v7) {
    return 0;
  }
  return fread(__ptr, __size, __nitems, v7);
}

size_t File::fwrite(File *this, const void *__ptr, size_t __size, size_t __nitems)
{
  size_t v5 = (gzFile_s *)*((void *)this + 3);
  if (v5) {
    return gzwrite(v5, __ptr, __nitems * __size) / __size;
  }
  uint64_t v7 = (FILE *)*((void *)this + 2);
  if (!v7) {
    return 0;
  }
  return fwrite(__ptr, __size, __nitems, v7);
}

off_t File::ftell(File *this)
{
  if (*((void *)this + 3)) {
    return gztell(*((gzFile *)this + 3));
  }
  if (*((void *)this + 2)) {
    return ftello(*((FILE **)this + 2));
  }
  if (*((_DWORD *)this + 24)) {
    return *((int *)this + 23);
  }
  return -1;
}

uint64_t File::fseek(File *this, off_t a2, int a3)
{
  if (*((void *)this + 3)) {
    return MEMORY[0x1B3EA9600](*((void *)this + 3));
  }
  if (!*((void *)this + 2))
  {
    if (*((_DWORD *)this + 24))
    {
      switch(a3)
      {
        case 0:
          goto LABEL_16;
        case 2:
          int v6 = *((_DWORD *)this + 22);
          goto LABEL_15;
        case 1:
          int v6 = *((_DWORD *)this + 23);
LABEL_15:
          LODWORD(a2) = v6 + a2;
LABEL_16:
          *((_DWORD *)this + 23) = a2;
          uint64_t v3 = 0;
          if ((a2 & 0x80000000) != 0) {
            *((_DWORD *)this + 23) = 0;
          }
          return v3;
      }
    }
    return 0xFFFFFFFFLL;
  }
  size_t v5 = (FILE *)*((void *)this + 2);
  return fseeko(v5, a2, a3);
}

uint64_t File::c_str(File *this)
{
  if (*((void *)this + 2) || *((void *)this + 3) || !*((_DWORD *)this + 24)) {
    return 0;
  }
  uint64_t result = (uint64_t)this + 64;
  if (*((char *)this + 87) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t quasar::lm::arpa2fst::kaldi_impl::ConvertToFST::ConvertToFST(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5, char a6, char a7)
{
  int v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  double v15 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::lm::arpa2fst::ConvertToFST::ConvertToFST((void *)a1, a2, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *(void *)a1 = &unk_1F0A57E50;
  *(unsigned char *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 33) = a5;
  *(unsigned char *)(a1 + 34) = a6;
  *(unsigned char *)(a1 + 35) = a7;
  return a1;
}

void sub_1B2174F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void quasar::lm::arpa2fst::kaldi_impl::ConvertToFST::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(quasar::lm **)(a2 + 24);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(v3, *(const Vocab **)(a1 + 8), (const fst::SymbolTable *)1);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v28 = v4;
    uint64_t v29 = v5;
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 16);
    uint64_t v29 = 0;
  }
  int v6 = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), "<s>");
  int v7 = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), "</s>");
  int v8 = (quasar::lm *)(*(uint64_t (**)(quasar::lm *))(*(void *)v3 + 96))(v3);
  if (v8 == -1)
  {
    int v11 = -1;
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(quasar::lm *))(*(void *)v3 + 96))(v3);
    unsigned __int8 v10 = (char *)(*(uint64_t (**)(quasar::lm *, uint64_t))(*(void *)v3 + 32))(v3, v9);
    std::string::basic_string[abi:ne180100]<0>(__p, v10);
    int v8 = (quasar::lm *)(*(uint64_t (**)(void, void **))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), __p);
    int v11 = (int)v8;
    if (v31 < 0)
    {
      operator delete(__p[0]);
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_9;
      }
    }
    else if ((v6 & 0x80000000) == 0)
    {
LABEL_9:
      int v12 = (quasar::lm *)quasar::lm::nullstream(v8);
      goto LABEL_12;
    }
  }
  quasar::lm::LogMessage::LogMessage(__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 59);
  Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"<s> is missing from FST symbol table. ", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Note that this is a requirement of the Kaldi implementation even when the explicitStartEndMarkers option is set to false.", 121);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
LABEL_12:
  if (v7 < 0)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 62);
    uint64_t v16 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"</s> is missing from FST symbol table. ", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Note that this is a requirement of the Kaldi implementation even when the explicitStartEndMarkers option is set to false.", 121);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  else
  {
    double v15 = (quasar::lm *)quasar::lm::nullstream(v12);
  }
  if (v6 == v7)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 66);
    int v18 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"<s> and </s> should be different symbols.", 41);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  else
  {
    quasar::lm::nullstream(v15);
  }
  uint64_t v24 = a1;
  if (*(unsigned char *)(a1 + 32))
  {
    int v19 = 0;
  }
  else
  {
    unint64_t v20 = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), "#0");
    int v19 = v20;
    if (!*(unsigned char *)(v24 + 32))
    {
      if ((v20 & 0x8000000000000000) != 0)
      {
        quasar::lm::LogMessage::LogMessage(__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 76);
        uint64_t v21 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
        uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Disambiguation symbol ", 22);
        float v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"#0", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" is missing from FST symbol table.", 34);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
      }
      else
      {
        quasar::lm::nullstream((quasar::lm *)v20);
      }
    }
  }
  v25[0] = v6;
  v25[1] = v7;
  v25[2] = v11;
  uint64_t v26 = 0x1E00000000;
  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ArpaLmCompiler((uint64_t)v27, (long long *)v25, v19, *(void *)(v24 + 8));
}

void sub_1B217596C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58)
{
  if (a58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a58);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::unordered_map<unsigned int,int>>::shared_ptr[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(&v2, a2);
}

void quasar::lm::arpa2fst::kaldi_impl::ConvertToFST::~ConvertToFST(quasar::lm::arpa2fst::kaldi_impl::ConvertToFST *this)
{
  *(void *)this = &unk_1F0A57E78;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A57E78;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ArpaLmCompiler(uint64_t a1, long long *a2, int a3, uint64_t a4)
{
  quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ArpaFileParser(a1, a2, a4);
  *(void *)uint64_t v5 = &unk_1F0A57DC0;
  *(_DWORD *)(v5 + 96) = a3;
  *(void *)(v5 + 104) = 0;
  operator new();
}

void sub_1B2175C9C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0xA1C40BD48D6D6);
  quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::~ArpaFileParser(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::unordered_map<unsigned int,int>>::shared_ptr[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B2175D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<std::unordered_map<unsigned int,int> *,std::shared_ptr<std::unordered_map<unsigned int,int>>::__shared_ptr_default_delete<std::unordered_map<unsigned int,int>,std::unordered_map<unsigned int,int>>,std::allocator<std::unordered_map<unsigned int,int>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<unsigned int,int> *,std::shared_ptr<std::unordered_map<unsigned int,int>>::__shared_ptr_default_delete<std::unordered_map<unsigned int,int>,std::unordered_map<unsigned int,int>>,std::allocator<std::unordered_map<unsigned int,int>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<unsigned int,int> *,std::shared_ptr<std::unordered_map<unsigned int,int>>::__shared_ptr_default_delete<std::unordered_map<unsigned int,int>,std::unordered_map<unsigned int,int>>,std::allocator<std::unordered_map<unsigned int,int>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void kaldi::nnet1::Xent::Eval(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int32x2_t *a4, uint64_t a5)
{
  kaldi::CuMatrix<float>::Resize(a4, a2[2].u32[1], a2[2].u32[0], 0, 0);
  uint64_t v10 = a2[2].i32[1];
  kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a4, (uint64_t)a3, 111, -1.0, 1.0);
  if (a5)
  {
    kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a5 + 8), 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(a1 + 264), a5);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)a4, a1 + 264);
  }
  *(void *)(a1 + 16) = -1;
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), a2);
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, (uint64_t)a3);
  if (a5) {
    kaldi::CuMatrixBase<float>::MulRowsVec(a1 + 216, a1 + 264);
  }
  kaldi::CuVector<float>::Resize(a1 + 112, v10, 0);
  kaldi::CuVectorBase<float>::AddColSumMat(a1 + 112, a1 + 216, 1.0, 0.0);
  kaldi::Vector<float>::Resize((void **)(a1 + 144), v10, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 112), a1 + 144);
  double v11 = kaldi::VectorBase<float>::Sum(a1 + 144);
  double v12 = (float)-*(float *)&v11;
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), a3);
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, (uint64_t)a3);
  if (a5) {
    kaldi::CuMatrixBase<float>::MulRowsVec(a1 + 216, a1 + 264);
  }
  kaldi::CuVector<float>::Resize(a1 + 112, v10, 0);
  kaldi::CuVectorBase<float>::AddColSumMat(a1 + 112, a1 + 216, 1.0, 0.0);
  kaldi::Vector<float>::Resize((void **)(a1 + 144), v10, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 112), a1 + 144);
  double v13 = kaldi::VectorBase<float>::Sum(a1 + 144);
  double v14 = *(double *)(a1 + 24) + v12;
  double v15 = *(double *)(a1 + 32) - *(float *)&v13;
  *(double *)(a1 + 24) = v14;
  *(double *)(a1 + 32) = v15;
  *(void *)(a1 + 8) += v10;
  if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Non-finite loss (", 17);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, ") in cross-entropy calculation");
    goto LABEL_12;
  }
  if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Non-finite entropy (", 20);
    size_t v17 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, ") in cross-entropy calculation");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
}

uint64_t kaldi::nnet1::Xent::ExpandPosterior(int32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a3;
  kaldi::Matrix<float>::Matrix((uint64_t)v23, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), a3, 0, 0);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = v7 - *a2;
  if (v7 != *a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v8 / 24;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      double v11 = (uint64_t *)(v6 + 24 * v9);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1] - *v11;
      if (v13)
      {
        unint64_t v14 = v13 >> 3;
        uint64_t v15 = *(void *)v23 + 4 * v24 * (int)v9;
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        uint64_t v16 = (float *)(v12 + 4);
        do
        {
          uint64_t v17 = *((int *)v16 - 1);
          if ((int)v17 >= v3)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
            unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Posterior pdf-id out of NN-output dimension, please check number of pdfs by 'hmm-info'.", 87);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" nn-outputs : ", 14);
            uint64_t v21 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", posterior pdf-id : ", 21);
            std::ostream::operator<<();
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
          }
          float v18 = *v16;
          v16 += 2;
          *(float *)(v15 + 4 * v17) = v18 + *(float *)(v15 + 4 * v17);
          --v14;
        }
        while (v14);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  kaldi::CuMatrix<float>::operator=(a1 + 21, v23);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v23);
}

void kaldi::nnet1::Xent::Eval(uint64_t a1, int32x2_t *a2, uint64_t *a3, int32x2_t *a4, uint64_t a5)
{
  uint64_t v9 = a2[2].u32[1];
  std::vector<unsigned int>::size_type __sz = (int)v9;
  kaldi::nnet1::Xent::ExpandPosterior((int32x2_t *)a1, a3, a2[2].u32[0]);
  kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a4, a1 + 168, 111, -1.0, 1.0);
  if (a5)
  {
    kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a5 + 8), 0);
    kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(a1 + 264), a5);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)a4, a1 + 264);
  }
  *(int32x2_t *)(a1 + 384) = a4[4];
  kaldi::CuArray<int>::Resize(a1 + 368, a2[2].u32[1], 1);
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)a2, (int *)(a1 + 368));
  *(int32x2_t *)(a1 + 432) = a4[4];
  kaldi::CuArray<int>::Resize(a1 + 416, *(_DWORD *)(a1 + 188), 1);
  kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 168, (int *)(a1 + 416));
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 392), (int)v9);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 440), (int)v9);
  kaldi::CuArray<int>::CopyToVec((int *)(a1 + 368), (std::vector<unsigned int> *)(a1 + 392));
  kaldi::CuArray<int>::CopyToVec((int *)(a1 + 416), (std::vector<unsigned int> *)(a1 + 440));
  if ((int)v9 < 1)
  {
    int v11 = 0;
    uint64_t v12 = a1 + 168;
    uint64_t v13 = a3;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 0;
    uint64_t v12 = a1 + 168;
    uint64_t v13 = a3;
    do
    {
      int v14 = *(_DWORD *)(*(void *)(a1 + 440) + 4 * v10);
      int v15 = *(_DWORD *)(*(void *)(a1 + 392) + 4 * v10);
      if (a5)
      {
        if (v14 == v15 && *(float *)(*(void *)(a1 + 272) + 4 * v10) == 1.0) {
          ++v11;
        }
      }
      else if (v14 == v15)
      {
        ++v11;
      }
      ++v10;
    }
    while (v9 != v10);
  }
  *(int32x2_t *)(a1 + 248) = a4[4];
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), a2);
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, v12);
  if (a5) {
    kaldi::CuMatrixBase<float>::MulRowsVec(a1 + 216, a1 + 264);
  }
  *(int32x2_t *)(a1 + 136) = a4[4];
  kaldi::CuVector<float>::Resize(a1 + 112, v9, 0);
  kaldi::CuVectorBase<float>::AddColSumMat(a1 + 112, a1 + 216, 1.0, 0.0);
  double v16 = kaldi::CuVectorBase<float>::Sum(a1 + 112);
  float v17 = -*(float *)&v16;
  uint64_t v18 = *v13;
  uint64_t v19 = v13[1] - *v13;
  if (v19)
  {
    uint64_t v20 = 0;
    unint64_t v21 = v19 / 24;
    if (v21 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v21;
    }
    double v23 = 0.0;
    do
    {
      if (a5)
      {
        if (*(float *)(*(void *)(a1 + 272) + 4 * v20) == 1.0)
        {
          uint64_t v24 = *(void *)(v18 + 24 * v20);
          uint64_t v25 = *(void *)(v18 + 24 * v20 + 8) - v24;
          if (v25)
          {
            unint64_t v26 = v25 >> 3;
            if (v26 <= 1) {
              uint64_t v27 = 1;
            }
            else {
              uint64_t v27 = v26;
            }
            uint64_t v28 = (float *)(v24 + 4);
            do
            {
              float v29 = *v28;
              v28 += 2;
              double v23 = v23 - (float)(logf(v29) * v29);
              --v27;
            }
            while (v27);
          }
        }
      }
      else
      {
        uint64_t v30 = *(void *)(v18 + 24 * v20);
        uint64_t v31 = *(void *)(v18 + 24 * v20 + 8) - v30;
        if (v31)
        {
          unint64_t v32 = v31 >> 3;
          if (v32 <= 1) {
            uint64_t v33 = 1;
          }
          else {
            uint64_t v33 = v32;
          }
          uint64_t v34 = (float *)(v30 + 4);
          do
          {
            float v35 = *v34;
            v34 += 2;
            double v23 = v23 - (float)(logf(v35) * v35);
            --v33;
          }
          while (v33);
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    double v23 = 0.0;
  }
  if (a5)
  {
    double v36 = kaldi::CuVectorBase<float>::Sum(a1 + 264);
    LODWORD(v9) = (int)*(float *)&v36;
    std::vector<unsigned int>::size_type __sz = (int)*(float *)&v36;
  }
  double v37 = *(double *)(a1 + 32);
  uint64_t v38 = *(void *)(a1 + 8);
  uint64_t v39 = *(void *)(a1 + 16) + v11;
  double v40 = *(double *)(a1 + 24) + v17;
  *(double *)(a1 + 24) = v40;
  *(double *)(a1 + 32) = v23 + v37;
  *(void *)(a1 + 8) = v38 + __sz;
  *(void *)(a1 + 16) = v39;
  if ((*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Non-finite loss (", 17);
    uint64_t v42 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, ") in cross-entropy calculation");
    goto LABEL_48;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v23 + v37)) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Non-finite entropy (", 20);
    unint64_t v43 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v43, ") in cross-entropy calculation");
LABEL_48:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46);
  }
  float v41 = v23;
  kaldi::nnet1::Xent::ReportProgress((kaldi::nnet1::Xent *)a1, v9, v41, v17);
}

void kaldi::nnet1::Xent::ReportProgress(kaldi::nnet1::Xent *this, int a2, float a3, float a4)
{
  uint64_t v4 = (void *)((char *)this + 40);
  double v5 = *((double *)this + 7);
  double v6 = *((double *)this + 6) + a4;
  uint64_t v7 = *((void *)this + 5) + a2;
  *((void *)this + 5) = v7;
  double v8 = v5 + a3;
  *((double *)this + 6) = v6;
  *((double *)this + 7) = v8;
  if (v7 > 360000)
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v26, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"ProgressLoss[", 13);
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"h/", 2);
      int v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"h]: ", 4);
      uint64_t v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (Xent)", 7);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v26);
      double v6 = *((double *)this + 6);
      double v8 = *((double *)this + 7);
      uint64_t v7 = *((void *)this + 5);
    }
    unint64_t v13 = *((void *)this + 10);
    float v14 = (v6 - v8) / (double)v7;
    int v15 = (float *)*((void *)this + 9);
    if ((unint64_t)v15 >= v13)
    {
      float v17 = (float *)*((void *)this + 8);
      uint64_t v18 = v15 - v17;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v19 = v13 - (void)v17;
      unint64_t v20 = (uint64_t)(v13 - (void)v17) >> 1;
      if (v20 <= v18 + 1) {
        unint64_t v20 = v18 + 1;
      }
      if (v19 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21)
      {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 80, v21);
        float v17 = (float *)*((void *)this + 8);
        int v15 = (float *)*((void *)this + 9);
      }
      else
      {
        uint64_t v22 = 0;
      }
      double v23 = (float *)&v22[4 * v18];
      uint64_t v24 = &v22[4 * v21];
      float *v23 = v14;
      double v16 = v23 + 1;
      while (v15 != v17)
      {
        int v25 = *((_DWORD *)v15-- - 1);
        *((_DWORD *)v23-- - 1) = v25;
      }
      *((void *)this + 8) = v23;
      *((void *)this + 9) = v16;
      *((void *)this + 10) = v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *int v15 = v14;
      double v16 = v15 + 1;
    }
    *((void *)this + 9) = v16;
    v4[1] = 0;
    v4[2] = 0;
    *uint64_t v4 = 0;
  }
}

void sub_1B2176884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Xent::Eval(uint64_t a1, int32x2_t *a2, unsigned int *a3, int32x2_t *a4)
{
  kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::AddUniqueElements((uint64_t)a4, a3, -1.0);
  *(int32x2_t *)(a1 + 200) = a4[4];
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 168), a2[2].u32[1], a2[2].u32[0], 0, 0);
  kaldi::CuMatrixBase<float>::AddUniqueElements(a1 + 168, a3, 1.0);
  signed int v8 = a2[2].i32[1];
  *(int32x2_t *)(a1 + 384) = a4[4];
  kaldi::CuArray<int>::Resize(a1 + 368, v8, 1);
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)a2, (int *)(a1 + 368));
  *(void *)(a1 + 104) = *(void *)(a1 + 200);
  kaldi::CuArray<int>::Resize(a1 + 88, a2[2].u32[1], 1);
  kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 168, (int *)(a1 + 88));
  v22[1] = 0;
  v22[2] = 0;
  uint64_t v9 = *(void *)(a1 + 200);
  v22[0] = &unk_1F0A517C0;
  v22[3] = v9;
  kaldi::CuVector<float>::Resize((uint64_t)v22, a2[2].u32[1], 1);
  kaldi::CuVectorBase<float>::ElementsEqual((uint64_t)v22, a1 + 88, a1 + 368);
  double v10 = kaldi::CuVectorBase<float>::Sum((uint64_t)v22);
  float v11 = *(float *)&v10;
  *(int32x2_t *)(a1 + 248) = a4[4];
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), a2);
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, a1 + 168);
  float v12 = kaldi::CuMatrixBase<float>::Sum(a1 + 216);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), (int32x2_t *)(a1 + 168));
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, a1 + 168);
  float v13 = kaldi::CuMatrixBase<float>::Sum(a1 + 216);
  double v14 = *(double *)(a1 + 32);
  double v15 = *(double *)(a1 + 24) + (float)-v12;
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 16) + (int)v11;
  *(double *)(a1 + 24) = v15;
  *(double *)(a1 + 32) = v14 - v13;
  *(void *)(a1 + 8) = v16 + v8;
  *(void *)(a1 + 16) = v17;
  if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Non-finite loss (", 17);
    unint64_t v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") in cross-entropy calculation", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  if (COERCE_UNSIGNED_INT64(fabs(v14 - v13)) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Non-finite entropy (", 20);
    unint64_t v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") in cross-entropy calculation", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  kaldi::nnet1::Xent::ReportProgress((kaldi::nnet1::Xent *)a1, v8, -v13, -v12);
  return kaldi::CuVector<float>::~CuVector(v22);
}

void sub_1B2176B64(_Unwind_Exception *a1)
{
  kaldi::CuVector<float>::~CuVector((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

double kaldi::nnet1::Xent::Eval(uint64_t a1, int32x2_t *a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
  double v10 = (int *)(a1 + 368);
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)a2, (int *)(a1 + 368));
  kaldi::CuArray<int>::CopyToVec(v10, (std::vector<unsigned int> *)(a1 + 392));
  uint64_t v11 = *(void *)(a1 + 392);
  unint64_t v12 = *(void *)(a1 + 400) - v11;
  float v13 = *(_DWORD **)a3;
  unint64_t v14 = *(void *)(a3 + 8) - *(void *)a3;
  if ((int)(v12 >> 2) < 1)
  {
    int v16 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v17 = (v12 >> 2);
    do
    {
      if (!a5 || *(float *)(*(void *)a5 + 4 * v15) == 1.0)
      {
        ++*(void *)(a1 + 8);
        if (v13[v15] == *(_DWORD *)(v11 + 4 * v15)) {
          ++v16;
        }
      }
      ++v15;
    }
    while (v17 != v15);
  }
  kaldi::CuArray<int>::Resize(a1 + 88, v14 >> 2, 1);
  memcpy(*(void **)(a1 + 96), *(const void **)a3, *(void *)(a3 + 8) - *(void *)a3);
  if (a2 != a4) {
    kaldi::CuMatrix<float>::operator=(a4, a2);
  }
  kaldi::CuMatrixBase<float>::DiffXent((uint64_t)a4, (unsigned int *)(a1 + 88), a1 + 112);
  if (a5)
  {
    kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a5 + 8), 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(a1 + 264), a5);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)a4, a1 + 264);
    kaldi::CuVectorBase<float>::MulElements(a1 + 112, a1 + 264);
  }
  kaldi::Vector<float>::Resize((void **)(a1 + 144), *(unsigned int *)(a1 + 128), 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 112), a1 + 144);
  double v18 = kaldi::VectorBase<float>::Sum(a1 + 144);
  double result = *(double *)(a1 + 24) - *(float *)&v18;
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 16) += v16;
  if ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Non-finite loss (", 17);
    unint64_t v20 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, ") in cross-entropy calculation");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  return result;
}

double kaldi::nnet1::Xent::CollectPerformance(uint64_t a1, void *lpsrc)
{
  if ((void *)a1 != lpsrc)
  {
    if (!lpsrc
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "Can't collect performance from non Xent object");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
    }
    uint64_t v4 = *(void *)(a1 + 40);
    float64x2_t v5 = *(float64x2_t *)(v3 + 24);
    *(float64x2_t *)(a1 + 48) = vaddq_f64(v5, *(float64x2_t *)(a1 + 48));
    *(float64x2_t *)(a1 + 24) = vaddq_f64(v5, *(float64x2_t *)(a1 + 24));
    int64x2_t v6 = vaddq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(v3 + 8));
    *(void *)(a1 + 40) = v4 + *((void *)v3 + 1);
    *(int64x2_t *)(a1 + 8) = v6;
    *((void *)v3 + 7) = 0;
    double result = 0.0;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 8) = 0u;
  }
  return result;
}

float kaldi::nnet1::Xent::GetAvgLoss(kaldi::nnet1::Xent *this, int a2)
{
  if (a2) {
    return 100.0 - (double)*((uint64_t *)this + 2) * 100.0 / (double)*((uint64_t *)this + 1);
  }
  else {
    return (*((double *)this + 3) - *((double *)this + 4)) / (double)*((uint64_t *)this + 1);
  }
}

uint64_t kaldi::nnet1::Xent::Report(kaldi::nnet1::Xent *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"AvgLoss: ", 9);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" (Xent), ", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"[AvgXent: ", 10);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", AvgTargetEnt: ", 16);
  float64x2_t v5 = (void *)std::ostream::operator<<();
  int64x2_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  uint64_t v7 = std::locale::use_facet(&v17, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  if (*((void *)this + 9) != *((void *)this + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"progress: [", 11);
    uint64_t v8 = *((void *)this + 8);
    uint64_t v9 = *((void *)this + 9);
    v17.__locale_ = (std::locale::__imp *)v14;
    double v18 = " ";
    while (v8 != v9)
    {
      std::ostream_iterator<float,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v17);
      v8 += 4;
    }
    double v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
    uint64_t v11 = std::locale::use_facet(&v17, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    std::ostream::flush();
  }
  if ((*((void *)this + 2) & 0x8000000000000000) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nFRAME_ACCURACY >> ", 19);
    unint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"% <<", 4);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v16);
}

void sub_1B2177240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 64));
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Xent::GetResults(kaldi::nnet1::Xent *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  double v4 = *((double *)this + 3);
  std::string::basic_string[abi:ne180100]<0>(__p, "Loss");
  unint64_t v14 = __p;
  float64x2_t v5 = (float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v14);
  float v6 = v4;
  v5[10] = v6;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  double v7 = *((double *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "Entropy");
  unint64_t v14 = __p;
  uint64_t v8 = (float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v14);
  float v9 = v7;
  v8[10] = v9;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *((void *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "Correct");
  unint64_t v14 = __p;
  *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v14)+ 10) = (float)v10;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *((void *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "Frames");
  unint64_t v14 = __p;
  *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v14)+ 10) = (float)v11;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B21773F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Mse::Eval(uint64_t a1, int32x2_t *a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
  uint64_t v9 = a2[2].u32[1];
  kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a4, a3, 111, -1.0, 1.0);
  if (a5)
  {
    kaldi::CuVector<float>::Resize(a1 + 64, *(unsigned int *)(a5 + 8), 0);
    kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(a1 + 64), a5);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)a4, a1 + 64);
  }
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 96), a4);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 96, a1 + 96);
  kaldi::CuVector<float>::Resize(a1 + 144, v9, 0);
  kaldi::CuVectorBase<float>::AddColSumMat(a1 + 144, a1 + 96, 1.0, 0.0);
  kaldi::Vector<float>::Resize((void **)(a1 + 176), v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 144), a1 + 176);
  double v10 = kaldi::VectorBase<float>::Sum(a1 + 176);
  double v11 = *(float *)&v10 * 0.5;
  double v12 = *(double *)(a1 + 16) + v11;
  *(double *)(a1 + 16) = v12;
  if (a5)
  {
    double v13 = kaldi::CuVectorBase<float>::Sum(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) += (int)*(float *)&v13;
    if ((v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      double v15 = kaldi::CuVectorBase<float>::Sum(a1 + 64);
      LODWORD(v9) = (int)*(float *)&v15;
      goto LABEL_7;
    }
LABEL_28:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Non-finite loss (", 17);
    uint64_t v34 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, ") in MSE calculation");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v35);
  }
  *(void *)(a1 + 8) += (int)v9;
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    goto LABEL_28;
  }
LABEL_7:
  uint64_t v16 = *(void *)(a1 + 24) + (int)v9;
  *(void *)(a1 + 24) = v16;
  double v17 = v11 + *(double *)(a1 + 32);
  *(double *)(a1 + 32) = v17;
  if (v16 >= 1000001)
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v35, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"ProgressLoss[", 13);
      double v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"h/", 2);
      unint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"h]: ", 4);
      unint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" (Mse)", 6);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v35);
      double v17 = *(double *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 24);
    }
    unint64_t v21 = *(void *)(a1 + 56);
    float v22 = v17 / (double)v16;
    double v23 = *(float **)(a1 + 48);
    if ((unint64_t)v23 >= v21)
    {
      int v25 = *(float **)(a1 + 40);
      uint64_t v26 = v23 - v25;
      if ((unint64_t)(v26 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v27 = v21 - (void)v25;
      unint64_t v28 = (uint64_t)(v21 - (void)v25) >> 1;
      if (v28 <= v26 + 1) {
        unint64_t v28 = v26 + 1;
      }
      if (v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29)
      {
        uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v29);
        int v25 = *(float **)(a1 + 40);
        double v23 = *(float **)(a1 + 48);
      }
      else
      {
        uint64_t v30 = 0;
      }
      uint64_t v31 = (float *)&v30[4 * v26];
      unint64_t v32 = &v30[4 * v29];
      *uint64_t v31 = v22;
      uint64_t v24 = v31 + 1;
      while (v23 != v25)
      {
        int v33 = *((_DWORD *)v23-- - 1);
        *((_DWORD *)v31-- - 1) = v33;
      }
      *(void *)(a1 + 40) = v31;
      *(void *)(a1 + 48) = v24;
      *(void *)(a1 + 56) = v32;
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      float *v23 = v22;
      uint64_t v24 = v23 + 1;
    }
    *(void *)(a1 + 48) = v24;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
}

void sub_1B21777B8(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1B21777C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Mse::Eval(void (***a1)(void, uint64_t, void *, uint64_t, uint64_t), uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v10 = *(_DWORD *)(a2 + 16);
  kaldi::Matrix<float>::Matrix((uint64_t)v28, *(unsigned int *)(a2 + 20), v10, 0, 0);
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  uint64_t v13 = v12 - *a3;
  if (v12 != *a3)
  {
    uint64_t v14 = 0;
    unint64_t v15 = v13 / 24;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      uint64_t v16 = (uint64_t *)(v11 + 24 * v14);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1] - *v16;
      if (v18)
      {
        unint64_t v19 = v18 >> 3;
        uint64_t v20 = v28[0] + 4 * v29 * (int)v14;
        if (v19 <= 1) {
          unint64_t v19 = 1;
        }
        unint64_t v21 = (float *)(v17 + 4);
        do
        {
          uint64_t v22 = *((int *)v21 - 1);
          if ((int)v22 >= v10)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
            int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Posterior pdf-id out of NN-output dimension, please check number of pdfs by 'hmm-info'.", 87);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" nn-outputs : ", 14);
            uint64_t v26 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", posterior pdf-id : ", 21);
            std::ostream::operator<<();
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
          }
          float v23 = *v21;
          v21 += 2;
          *(float *)(v20 + 4 * v22) = v23 + *(float *)(v20 + 4 * v22);
          --v19;
        }
        while (v19);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  kaldi::CuMatrix<float>::CuMatrix<float>(v27, v28, 111, 0);
  (**a1)(a1, a2, v27, a4, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v28);
}

double kaldi::nnet1::Mse::CollectPerformance(uint64_t a1, void *lpsrc)
{
  if ((void *)a1 != lpsrc)
  {
    if (!lpsrc
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Can't collect performance from non Mse object");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
    }
    double v4 = *((double *)v3 + 2);
    *(double *)(a1 + 32) = v4 + *(double *)(a1 + 32);
    uint64_t v5 = *((void *)v3 + 1);
    *(void *)(a1 + 24) += v5;
    *(double *)(a1 + 16) = v4 + *(double *)(a1 + 16);
    *(void *)(a1 + 8) += v5;
    double result = 0.0;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 8) = 0u;
  }
  return result;
}

uint64_t kaldi::nnet1::Mse::Report(kaldi::nnet1::Mse *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"AvgLoss: ", 9);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" (Mse), ", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"[RMS ", 5);
  double v4 = (void *)std::ostream::operator<<();
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  float v6 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"progress: [", 11);
  uint64_t v8 = *((void *)this + 5);
  uint64_t v7 = *((void *)this + 6);
  v15.__locale_ = (std::locale::__imp *)v12;
  uint64_t v16 = " ";
  while (v8 != v7)
  {
    std::ostream_iterator<float,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v15);
    v8 += 4;
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v14);
}

void sub_1B2177DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 80));
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Mse::GetResults(kaldi::nnet1::Mse *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  double v4 = *((double *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "Loss");
  int v10 = __p;
  uint64_t v5 = (float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v10);
  float v6 = v4;
  v5[10] = v6;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *((void *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "Frames");
  int v10 = __p;
  *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v10)+ 10) = (float)v7;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2177ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LossEvaluatorItf::Eval()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  void v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::LossEvaluatorItf::GetAvgLoss(kaldi::nnet1::LossEvaluatorItf *this)
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Not Implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::Xent::~Xent(kaldi::nnet1::Xent *this)
{
  kaldi::nnet1::Xent::~Xent(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(void *)this = &unk_1F0A4F260;
  uint64_t v2 = (void *)*((void *)this + 55);
  if (v2)
  {
    *((void *)this + 56) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 53);
  if (v3) {
    free(v3);
  }
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  double v4 = (void *)*((void *)this + 49);
  if (v4)
  {
    *((void *)this + 50) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 47);
  if (v5) {
    free(v5);
  }
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  float v6 = (void *)*((void *)this + 44);
  if (v6) {
    free(v6);
  }
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  uint64_t v7 = (void *)*((void *)this + 41);
  if (v7) {
    free(v7);
  }
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  uint64_t v8 = (void *)*((void *)this + 38);
  if (v8) {
    free(v8);
  }
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  kaldi::CuVector<float>::~CuVector((void *)this + 33);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::Vector<float>::Destroy((uint64_t)this + 144);
  kaldi::CuVector<float>::~CuVector((void *)this + 14);
  char v9 = (void *)*((void *)this + 12);
  if (v9) {
    free(v9);
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  int v10 = (void *)*((void *)this + 8);
  if (v10)
  {
    *((void *)this + 9) = v10;
    operator delete(v10);
  }
}

void kaldi::nnet1::Mse::~Mse(kaldi::nnet1::Mse *this)
{
  kaldi::nnet1::Mse::~Mse(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;

  *(void *)this = &unk_1F0A4F048;
  kaldi::Vector<float>::Destroy((uint64_t)this + 176);
  kaldi::CuVector<float>::~CuVector((void *)this + 18);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  kaldi::CuVector<float>::~CuVector((void *)this + 8);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
}

uint64_t std::ostream_iterator<float,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1)
{
  std::ostream::operator<<();
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    size_t v3 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)a1, v2, v3);
  }
  return a1;
}

void kaldi::TransitionModel::~TransitionModel(kaldi::TransitionModel *this)
{
  kaldi::Vector<float>::Destroy((uint64_t)this + 216);
  kaldi::Vector<float>::Destroy((uint64_t)this + 192);
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  size_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    *((void *)this + 16) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  char v9 = (void **)((char *)this + 48);
  std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    operator delete(v8);
  }
}

uint64_t quasar::OnlineLASSpeculativeBeamSearchDecoder::OnlineLASSpeculativeBeamSearchDecoder(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A58B38;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_WORD *)(v3 + 496) = 257;
  *(void *)(v3 + 500) = 0x8000001F4;
  *(_DWORD *)(v3 + 508) = 0;
  *(void *)(v3 + 512) = 0x3C23D70A00000000;
  *(_OWORD *)(v3 + 520) = xmmword_1B257E560;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 536), "");
  *(void *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 616) = 1065353216;
  *(unsigned char *)(a1 + 624) = 0;
  *(void *)(a1 + 628) = 0x300000008;
  *(unsigned char *)(a1 + 636) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  double v4 = (char *)operator new(0xA8uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)double v4 = &unk_1F0A60678;
  *((void *)v4 + 19) = 0;
  *((void *)v4 + 20) = 0;
  *((void *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(a1 + 672) = v4 + 24;
  *(void *)(a1 + 680) = v4;
  *(unsigned char *)(a1 + 57) = 0;
  return a1;
}

void sub_1B21784EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v14 = v12;
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)(v10 + 664), 0);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)(v10 + 656), 0);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)(v10 + 648), 0);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100](v13, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v10 + 584);
  a10 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 559) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 495) < 0) {
    operator delete(*(void **)(v10 + 472));
  }
  if (*(char *)(v10 + 471) < 0) {
    operator delete(*(void **)(v10 + 448));
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v10);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASSpeculativeBeamSearchDecoder::~OnlineLASSpeculativeBeamSearchDecoder(quasar::OnlineLASSpeculativeBeamSearchDecoder *this)
{
  *(void *)this = &unk_1F0A58B38;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 85);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)this + 83, 0);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 82, 0);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)this + 81, 0);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessEncoderNet **)this + 80, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 584);
  uint64_t v3 = (void **)((char *)this + 560);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 559) < 0) {
    operator delete(*((void **)this + 67));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  uint64_t vars8;

  quasar::OnlineLASSpeculativeBeamSearchDecoder::~OnlineLASSpeculativeBeamSearchDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlineLASSpeculativeBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "las-speculative-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 211, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  kaldi::BeamSearchDecoderOptions::Register((uint64_t)(this + 62), (uint64_t)a2);
  kaldi::quasar::OnlineLASAttentionCheckerOptions::Register((uint64_t)this + 516, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[84], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS encoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS decoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "batch size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 532, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 67), (uint64_t)v4, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 70), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 78), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "speculative-steps");
  std::string::basic_string[abi:ne180100]<0>(v4, "steps to decode beyond attention checks");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 628, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rollback-steps");
  std::string::basic_string[abi:ne180100]<0>(v4, "steps to rollback before each speculative decoder");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 79), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "speculative-catchup");
  std::string::basic_string[abi:ne180100]<0>(v4, "Catch up at the end of utterance by returning speculative predictions");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 636, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "unchecked-attention-heads");
  std::string::basic_string[abi:ne180100]<0>(v4, "Do not perform checks for attention heads at these indexes");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 73), (uint64_t)v4, 0, 238, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2178B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::OnlineLASAttentionCheckerOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "min-alignment-value");
  std::string::basic_string[abi:ne180100]<0>(__p, "minimum total alignment weight that must be assigned to the attention window");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "num-forbidden-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "min number of frames that must be in the encoder output buffer after the right attention boundary");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "num-forbidden-frames-silence");
  std::string::basic_string[abi:ne180100]<0>(__p, "min number of buffer frames after the right attention boundary when top prediction is silence");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "chunk-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk size used in estimating attention window location");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B2178DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLASSpeculativeBeamSearchDecoder::finishInit(quasar::OnlineLASSpeculativeBeamSearchDecoder *this)
{
}

void sub_1B217904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASSpeculativeBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, std::vector<std::wstring> **a3, quasar::SpeechRequestData **a4)
{
  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[19].__end_cap_.__value_);
  value = (uint64_t *)(*a3)[19].__end_cap_.__value_;
  uint64_t v76 = *(void *)(a1 + 672);
  char v9 = *(std::__shared_weak_count **)(a1 + 680);
  double v77 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(value, &v76, 0, -1);
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  kaldi::quasar::OnlineLASSpeculativeDecodable::OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)v75, *(kaldi::quasar::CEStatelessEncoderNet **)(a1 + 640), *(kaldi::quasar::CEStatelessDecoderNet **)(a1 + 648), *(kaldi::OnlineFeatureMatrix **)a2, *(const kaldi::quasar::OnlineLASAttentionChecker **)(a1 + 664), *(_DWORD *)(a1 + 532), *(_DWORD *)(a1 + 628), *(_DWORD *)(a1 + 632), *(unsigned char *)(a1 + 636));
  v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  v70 = 0;
  uint64_t v71 = 0;
  memset(&v68, 0, sizeof(v68));
  unsigned int v69 = 0;
  kaldi::BeamSearchDecoder::InitDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 656));
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v43 = a4;
  while (1)
  {
    if (kaldi::BeamSearchDecoder::Finished(*(kaldi::BeamSearchDecoder **)(a1 + 656)))
    {
LABEL_57:
      kaldi::BeamSearchDecoder::FinalizeDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 656));
      signed int v37 = kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset((kaldi::quasar::OnlineLASSpeculativeDecodable *)v75);
      for (i = *a3; ; signed int v37 = LODWORD(i[24].__begin_) + 1)
      {
        LODWORD(i[24].__begin_) = v37;
        BOOL IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)a2, v37, 1);
        unint64_t i = *a3;
        if (!IsValidFrame) {
          break;
        }
      }
      WORD2(i[24].__begin_) = 257;
      BOOL v40 = kaldi::BeamSearchDecoder::ReachedFinal(*(kaldi::BeamSearchDecoder **)(a1 + 656), -1);
      char v41 = quasar::gLogLevel < 4 || v40;
      if ((v41 & 1) == 0)
      {
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        *(_OWORD *)__p = 0u;
        long long v46 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
    }
    v65 = 0;
    unint64_t v66 = 0;
    v67 = 0;
    MultiChainMultiAudioBuffer = (quasar::MultiChainMultiAudioBuffer **)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*a4);
    uint64_t PrimaryAudioEndMs = quasar::MultiChainMultiAudioBuffer::getPrimaryAudioEndMs(*MultiChainMultiAudioBuffer);
    if ((PrimaryAudioEndMs & 0xFF00000000) != 0) {
      kaldi::quasar::OnlineLASSpeculativeDecodable::SetAudioEndMilliseconds((uint64_t)v75, PrimaryAudioEndMs);
    }
    if ((int)kaldi::BeamSearchDecoder::AdvanceDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 656), (uint64_t)v75, 1u) >= 1) {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
    }
    if (*(int *)(a1 + 628) >= 1
      && *(unsigned char *)(a1 + 636)
      && kaldi::quasar::OnlineLASSpeculativeDecodable::EncodingFinished((kaldi::quasar::OnlineLASSpeculativeDecodable *)v75))
    {
      int v14 = 3;
    }
    else
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v65, v72, v73, (v73 - (uint64_t)v72) >> 2);
      uint64_t v15 = *(void *)(a1 + 656);
      if (&v69 != (int **)(v15 + 232)) {
        std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(&v69, *(uint64_t **)(v15 + 232), *(uint64_t **)(v15 + 240), (uint64_t)(*(void *)(v15 + 240) - *(void *)(v15 + 232)) >> 3);
      }
      __s2 = v11;
      uint64_t v17 = v69;
      uint64_t v16 = v70;
      for (j = v66; v17 != v16; j = v19)
      {
        if (j >= v67)
        {
          uint64_t v20 = v65;
          uint64_t v21 = j - v65;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = (char *)v67 - (char *)v65;
          if (((char *)v67 - (char *)v65) >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            int v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v67, v24);
            uint64_t v20 = v65;
            j = v66;
          }
          else
          {
            int v25 = 0;
          }
          uint64_t v26 = (int *)&v25[4 * v21];
          int *v26 = *v17;
          unint64_t v19 = v26 + 1;
          while (j != v20)
          {
            int v27 = *--j;
            *--uint64_t v26 = v27;
          }
          v65 = v26;
          unint64_t v66 = v19;
          v67 = (int *)&v25[4 * v24];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          int *j = *v17;
          unint64_t v19 = j + 1;
        }
        unint64_t v66 = v19;
        v17 += 2;
      }
      if ((char *)j - (char *)v65 != (char *)v10 - (char *)v11 || memcmp(v65, v11, (char *)j - (char *)v65))
      {
        int v28 = kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset((kaldi::quasar::OnlineLASSpeculativeDecodable *)v75);
        a4 = v43;
        int v29 = *a3;
        LODWORD(v29[24].__begin_) = v28;
        quasar::SymbolTableList::lookup((uint64_t *)v29[19].__end_cap_.__value_, &v65, (uint64_t *)&v29[2], (char **)&v29[3], 1);
        if (*(unsigned char *)(a2 + 561))
        {
          if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
          {
            quasar::formatResults((uint64_t *)&(*a3)[2], (uint64_t *)(a1 + 560), a1 + 536, *(unsigned __int8 *)(a1 + 624), __p);
            uint64_t v30 = *a3;
            std::vector<std::string>::__vdeallocate(*a3 + 2);
            *(_OWORD *)&v30[2].__begin_ = *(_OWORD *)__p;
            v30[2].__end_cap_.__value_ = (std::wstring *)v46;
            __p[1] = 0;
            *(void *)&long long v46 = 0;
            __p[0] = 0;
            v64[0] = __p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
          }
          uint64_t v31 = *a3;
          begin = (unsigned __int8 *)v68.__begin_;
          std::vector<std::wstring>::pointer end = v68.__end_;
          uint64_t v34 = (unsigned __int8 *)(*a3)[2].__begin_;
          if ((char *)v68.__end_ - (char *)v68.__begin_ == (char *)(*a3)[2].__end_ - (char *)v34)
          {
            while (begin != (unsigned __int8 *)end)
            {
              if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)__p, begin, v34))
              {
                uint64_t v31 = *a3;
                goto LABEL_49;
              }
              begin += 24;
              v34 += 24;
            }
            a4 = v43;
            uint64_t v11 = __s2;
          }
          else
          {
LABEL_49:
            std::vector<std::wstring>::pointer v35 = v31[23].__end_;
            uint64_t v36 = *((unsigned int *)*v43 + 3);
            memset(v64, 0, sizeof(v64));
            memset(v62, 0, sizeof(v62));
            memset(&v63, 0, sizeof(v63));
            LOBYTE(__p[0]) = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
            LOWORD(v42) = 0;
            (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, void, void, void ***, std::vector<std::wstring> *, unsigned char *, int, void **))(v35->__r_.__value_.__r.__words[0] + 24))(v35, v31 + 2, v36, 1, 0, 0, v64, &v63, v62, v42, __p);
            a4 = v43;
            uint64_t v11 = __s2;
            if (SHIBYTE(v46) < 0) {
              operator delete(__p[1]);
            }
            __p[0] = v62;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            __p[0] = &v63;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            __p[0] = v64;
            std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (&v68 != &(*a3)[2]) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v68, (std::string *)(*a3)[2].__begin_, (long long *)(*a3)[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)(*a3)[2].__end_ - (char *)(*a3)[2].__begin_) >> 3));
            }
          }
        }
        if (v11) {
          operator delete(v11);
        }
        int v14 = 0;
        uint64_t v11 = v65;
        uint64_t v10 = v66;
        goto LABEL_56;
      }
      int v14 = 0;
      a4 = v43;
    }
    if (v65)
    {
      unint64_t v66 = v65;
      operator delete(v65);
    }
LABEL_56:
    if (v14 == 3) {
      goto LABEL_57;
    }
  }
}

void sub_1B2179BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a27);
  a27 = &STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  uint64_t v30 = (void *)v27[51];
  if (v30)
  {
    v27[52] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)v27[54];
  if (v31)
  {
    v27[55] = v31;
    operator delete(v31);
  }
  if (v28) {
    operator delete(v28);
  }
  kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t quasar::anArcJumpsOver(uint64_t *a1, float a2, float a3)
{
  uint64_t v4 = *a1;
LABEL_2:
  if (v4 == a1[1])
  {
    int v8 = 0;
  }
  else
  {
    for (uint64_t i = *(void *)(*(void *)v4 + 72); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == *(void *)v4 + 64)
      {
        v4 += 8;
        goto LABEL_2;
      }
      float v6 = *(float **)(i + 16);
      float v7 = *(float *)(*(void *)v6 + 132);
      BOOL v3 = v7 < a2;
      if (v7 >= a2 || *(float *)(*(void *)v6 + 140) < a2 && v6[62] > a3) {
        break;
      }
    }
    int v8 = 1;
  }
  return v8 & v3;
}

void quasar::mergeNodes(quasar *this, kaldi::WordHypLattice *a2, int a3)
{
  if (*((void *)this + 1))
  {
    int v4 = (int)a2;
    kaldi::WordHypLattice::GetTimeSortedNodes(this, &v43);
    unint64_t v6 = *((void *)this + 6) - *((void *)this + 5);
    uint64_t v7 = *((void *)this + 3);
    *(unsigned char *)(**((void **)this + 2) + 128) = 1;
    *(unsigned char *)(*(void *)(v7 - 8) + 128) = 1;
    int v8 = v43;
    uint64_t v9 = v44;
    if ((kaldi::WordHypLattice::Node *)v44 != v43)
    {
      unint64_t v37 = v6;
      unint64_t v10 = 0;
      float v11 = (float)v4;
      float v12 = NAN;
      uint64_t v13 = 1;
      while (1)
      {
        int v42 = 0;
        uint64_t v14 = *((void *)v8 + v10);
        int v42 = (float *)v14;
        *(unsigned char *)(v14 + 128) = 0;
        float v15 = *(float *)(v14 + 132);
        if (v15 != v12) {
          break;
        }
        ++v10;
LABEL_19:
        ++v13;
        if (v10 >= (v9 - (uint64_t)v8) >> 3)
        {
          uint64_t v36 = *((void *)this + 6) - *((void *)this + 5);
          unint64_t v6 = v37;
          goto LABEL_53;
        }
      }
      float v16 = *(float *)(v14 + 136);
      long long v38 = 0uLL;
      *(void *)&v39[0] = 0;
      if (++v10 >= (v9 - (uint64_t)v8) >> 3)
      {
LABEL_10:
        uint64_t v21 = (void *)v38;
        if ((void)v38 != *((void *)&v38 + 1))
        {
          if (!a3
            || (unint64_t v22 = v42,
                char v23 = quasar::anArcJumpsOver((uint64_t *)&v43, v42[33], v16),
                *((unsigned char *)v22 + 128) = v23 ^ 1,
                (v23 & 1) == 0))
          {
            kaldi::WordHypLattice::MergeNodes(this, (uint64_t *)&v38, (uint64_t **)&v42);
            kaldi::WordHypLattice::RecomputeTopSortedNodes(this);
            kaldi::WordHypLattice::RecomputeNodeTimestamps((uint64_t)this);
            kaldi::WordHypLattice::GetTimeSortedNodes(this, &v40);
            if (v43)
            {
              *(void *)&long long v44 = v43;
              operator delete(v43);
            }
            int v8 = v40;
            unint64_t v43 = v40;
            long long v44 = v41;
            uint64_t v21 = (void *)v38;
            uint64_t v9 = v41;
          }
        }
        if (v21)
        {
          *((void *)&v38 + 1) = v21;
          operator delete(v21);
          int v8 = v43;
          uint64_t v9 = v44;
        }
        float v12 = v15;
        goto LABEL_19;
      }
      BOOL v40 = 0;
      uint64_t v17 = (float *)*((void *)v8 + v13);
      BOOL v40 = (kaldi::WordHypLattice::Node *)v17;
      uint64_t v18 = (kaldi::WordHypLattice::Node *)v42;
      float v19 = v42[33];
      if ((float)(v17[33] - v19) > v11)
      {
        float v20 = v16;
LABEL_9:
        float v16 = v20;
        goto LABEL_10;
      }
      unint64_t v24 = v13;
      while (1)
      {
        if (v16 >= v17[34]) {
          float v20 = v16;
        }
        else {
          float v20 = v17[34];
        }
        if ((float)(v20 - v19) <= v11 && !kaldi::WordHypLattice::Node::IsSucceededBy(v18, &v40))
        {
          uint64_t v26 = (kaldi::WordHypLattice::Node **)*((void *)&v38 + 1);
          int v25 = (kaldi::WordHypLattice::Node **)v38;
          if ((void)v38 == *((void *)&v38 + 1))
          {
LABEL_35:
            if ((unint64_t)v25 >= *(void *)&v39[0])
            {
              uint64_t v28 = (uint64_t)((uint64_t)v25 - v38) >> 3;
              if ((unint64_t)(v28 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v29 = (uint64_t)(*(void *)&v39[0] - v38) >> 2;
              if (v29 <= v28 + 1) {
                unint64_t v29 = v28 + 1;
              }
              if (*(void *)&v39[0] - (void)v38 >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30) {
                uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v39, v30);
              }
              else {
                uint64_t v31 = 0;
              }
              unint64_t v32 = (kaldi::WordHypLattice::Node **)&v31[8 * v28];
              char *v32 = v40;
              int v27 = v32 + 1;
              int v33 = (char *)*((void *)&v38 + 1);
              uint64_t v34 = (char *)v38;
              if (*((void *)&v38 + 1) != (void)v38)
              {
                do
                {
                  std::vector<std::wstring>::pointer v35 = (kaldi::WordHypLattice::Node *)*((void *)v33 - 1);
                  v33 -= 8;
                  *--unint64_t v32 = v35;
                }
                while (v33 != v34);
                int v33 = (char *)v38;
              }
              *(void *)&long long v38 = v32;
              *((void *)&v38 + 1) = v27;
              *(void *)&v39[0] = &v31[8 * v30];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *int v25 = v40;
              int v27 = v25 + 1;
            }
            *((void *)&v38 + 1) = v27;
            goto LABEL_28;
          }
          while (!kaldi::WordHypLattice::Node::IsSucceededBy(*v25, &v40))
          {
            if (++v25 == v26)
            {
              int v25 = (kaldi::WordHypLattice::Node **)*((void *)&v38 + 1);
              goto LABEL_35;
            }
          }
        }
        float v20 = v16;
LABEL_28:
        ++v24;
        int v8 = v43;
        uint64_t v9 = v44;
        if (v24 < (uint64_t)(v44 - (void)v43) >> 3)
        {
          BOOL v40 = 0;
          uint64_t v17 = (float *)*((void *)v43 + v24);
          BOOL v40 = (kaldi::WordHypLattice::Node *)v17;
          uint64_t v18 = (kaldi::WordHypLattice::Node *)v42;
          float v19 = v42[33];
          float v16 = v20;
          if ((float)(v17[33] - v19) <= v11) {
            continue;
          }
        }
        goto LABEL_9;
      }
    }
    uint64_t v36 = v6;
LABEL_53:
    if (v36 >> 3 != (int)(v6 >> 3))
    {
      memset(v39, 0, sizeof(v39));
      long long v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Coding error: the number of arcs has changed after node-merging", 63);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v38);
    }
    kaldi::WordHypLattice::ReassignNodeIds((uint64_t)this);
    if (v43)
    {
      *(void *)&long long v44 = v43;
      operator delete(v43);
    }
  }
}

void sub_1B217A234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v14 = *(void **)(v12 - 152);
  if (v14)
  {
    *(void *)(v12 - 144) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::cu::RegularizeL1<float>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7 = a1 + 8;
  uint64_t result = kaldi::MatrixBase<float>::NumRows(a1 + 8);
  if ((int)result >= 1)
  {
    int v9 = 0;
    float v10 = -a4;
    do
    {
      if ((int)kaldi::MatrixBase<float>::NumCols(v7) >= 1)
      {
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = *(void *)v7 + 4 * v9 * *(_DWORD *)(v7 + 16);
          float v13 = *(float *)(v12 + 4 * v11);
          if (v13 != 0.0)
          {
            if (v13 >= 0.0) {
              float v14 = a3;
            }
            else {
              float v14 = -a3;
            }
            uint64_t v15 = *(void *)(a2 + 8) + 4 * v9 * *(_DWORD *)(a2 + 24);
            if (v13 > 0.0 == (float)((float)(v13 + (float)(v10 * *(float *)(v15 + 4 * v11))) - v14) > 0.0)
            {
              *(float *)(v12 + 4 * v11) = v13 - v14;
            }
            else
            {
              *(_DWORD *)(v12 + 4 * v11) = 0;
              *(_DWORD *)(v15 + 4 * v11) = 0;
            }
          }
          ++v11;
        }
        while (v11 < (int)kaldi::MatrixBase<float>::NumCols(v7));
      }
      ++v9;
      uint64_t result = kaldi::MatrixBase<float>::NumRows(v7);
    }
    while (v9 < (int)result);
  }
  return result;
}

uint64_t kaldi::cu::Splice<float>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = a3 + 8;
  uint64_t result = kaldi::MatrixBase<float>::NumRows(a3 + 8);
  if ((int)result >= 1)
  {
    int v8 = 0;
    uint64_t v9 = a1 + 8;
    do
    {
      if ((int)v4 >= 1)
      {
        for (uint64_t i = 0; i != v4; ++i)
        {
          int v11 = (*(_DWORD *)(v5 + 4 * i) + v8) & ~((*(_DWORD *)(v5 + 4 * i) + v8) >> 31);
          if (v11 >= (int)kaldi::MatrixBase<float>::NumRows(v9)) {
            int v11 = kaldi::MatrixBase<float>::NumRows(v9) - 1;
          }
          uint64_t v12 = *(void *)v6 + 4 * *(_DWORD *)(v6 + 16) * v8;
          float v13 = (void *)(v12 + 4 * (int)(kaldi::MatrixBase<float>::NumCols(v9) * i));
          float v14 = (const void *)(*(void *)v9 + 4 * *(_DWORD *)(v9 + 16) * v11);
          int v15 = kaldi::MatrixBase<float>::NumCols(v9);
          memcpy(v13, v14, 4 * v15);
        }
      }
      ++v8;
      uint64_t result = kaldi::MatrixBase<float>::NumRows(v6);
    }
    while (v8 < (int)result);
  }
  return result;
}

uint64_t kaldi::cu::Copy<float>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = a3 + 8;
  uint64_t result = kaldi::MatrixBase<float>::NumRows(a3 + 8);
  if ((int)result >= 1)
  {
    int v8 = 0;
    do
    {
      if ((int)v4 >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(void *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * v8;
        uint64_t v11 = *(void *)v6 + 4 * *(_DWORD *)(v6 + 16) * v8;
        do
        {
          *(_DWORD *)(v11 + 4 * v9) = *(_DWORD *)(v10 + 4 * *(int *)(v5 + 4 * v9));
          ++v9;
        }
        while (v4 != v9);
      }
      ++v8;
      uint64_t result = kaldi::MatrixBase<float>::NumRows(v6);
    }
    while (v8 < (int)result);
  }
  return result;
}

double quasar::KeywordDirectOutputsSyncDecoder::KeywordDirectOutputsSyncDecoder(uint64_t a1, long long *a2)
{
  uint64_t v2 = quasar::SyncDecoder::SyncDecoder(a1, a2);
  *(void *)uint64_t v2 = &unk_1F0A1CA20;
  *(void *)(v2 + 72) = 0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 88) = 9999;
  *(_DWORD *)(v2 + 96) = 1;
  double result = 0.0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(void *)(v2 + 168) = 0;
  return result;
}

void quasar::KeywordDirectOutputsSyncDecoder::~KeywordDirectOutputsSyncDecoder(void **this)
{
  *this = &unk_1F0A1CA20;
  uint64_t v2 = this + 19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  quasar::SyncDecoder::~SyncDecoder((quasar::SyncDecoder *)this);
}

{
  uint64_t vars8;

  quasar::KeywordDirectOutputsSyncDecoder::~KeywordDirectOutputsSyncDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::KeywordDirectOutputsSyncDecoder::registerParams(quasar::KeywordDirectOutputsSyncDecoder *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "keyword-direct-output-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 256, 0, (uint64_t)v14);
  if (v15 < 0) {
    operator delete((void *)v14[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "keyword-array");
  std::string::basic_string[abi:ne180100]<0>(v12, "keyword names with order should match the output order from Nnet");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, v14, (uint64_t)this + 128, (uint64_t)v12, 1, 256, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v10, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v8, "The batch size that is used for results querying, for example 192 means one batch contains 192 frames");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 96, (uint64_t)v8, 1, 256, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-batches-to-use");
  std::string::basic_string[abi:ne180100]<0>(__p, "Num of batches to use for results cutoffif analyzed batches number are larger than this value, the cutoff cached token results will be used");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 88, (uint64_t)__p, 0, 256, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v15 < 0) {
    operator delete((void *)v14[0]);
  }
}

void sub_1B217A7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (*(char *)(v34 - 17) < 0) {
    operator delete(*(void **)(v34 - 40));
  }
  _Unwind_Resume(exception_object);
}

void quasar::KeywordDirectOutputsSyncDecoder::finishInit(quasar::KeywordDirectOutputsSyncDecoder *this)
{
  uint64_t v1 = *((void *)this + 16);
  if (*((void *)this + 17) == v1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "keywords from inputs config are empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  char v5 = (uint64_t *)((char *)this + 104);
  uint64_t v6 = (void *)((char *)this + 120);
  char v7 = (std::string *)*((void *)this + 14);
  do
  {
    uint64_t v8 = v1 + v3;
    LODWORD(v11[0]) = 0;
    uint64_t v10 = 0;
    unsigned __int8 v9 = 0;
    if ((unint64_t)v7 >= *v6)
    {
      char v7 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,int,int,int,float const&,BOOL>(v5, v8, (int *)v11, (int *)&v10 + 1, (int *)&v10, &quasar::negInf, &v9);
    }
    else
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float const&,BOOL>((uint64_t)v6, v7, v8, (int *)v11, (int *)&v10 + 1, (int *)&v10, &quasar::negInf, &v9);
      char v7 = (std::string *)((char *)v7 + 224);
      *((void *)this + 14) = v7;
    }
    *((void *)this + 14) = v7;
    ++v4;
    uint64_t v1 = *((void *)this + 16);
    v3 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 17) - v1) >> 3) > v4);
}

void sub_1B217A9F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 112) = v2;
  _Unwind_Resume(a1);
}

void quasar::KeywordDirectOutputsSyncDecoder::reset(quasar::KeywordDirectOutputsSyncDecoder *this)
{
  *((_DWORD *)this + 23) = 0;
  quasar::KeywordDirectOutputsSyncDecoder::resetScores(this);
}

void quasar::KeywordDirectOutputsSyncDecoder::resetScores(quasar::KeywordDirectOutputsSyncDecoder *this)
{
  uint64_t v2 = *((void *)this + 19);
  std::string::size_type v3 = *((void *)this + 20);
  while (v3 != v2)
  {
    v3 -= 24;
    v18[0].__r_.__value_.__r.__words[0] = v3;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  }
  *((void *)this + 20) = v2;
  uint64_t v4 = *((void *)this + 16);
  if (*((void *)this + 17) != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (long long *)(v4 + v5);
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v17.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
      }
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      std::string::basic_string[abi:ne180100]<0>(v13, "");
      memset(v12, 0, sizeof(v12));
      std::string::basic_string[abi:ne180100]<0>(v10, "");
      quasar::Token::Token(v18, (long long *)&v17, 0, 0, 0, 0, 0, (long long *)v15, -3.4028e38, (long long *)v13, v12, 0, (long long *)v10, 0, 0);
      quasar::Token::operator=(*((void *)this + 13) + v6, (long long *)v18);
      if (v28 < 0) {
        operator delete(__p);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      v29[0] = (void **)&v24;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
      if (v23 < 0) {
        operator delete(v22);
      }
      v29[0] = (void **)&v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
      if (v20 < 0) {
        operator delete(v19);
      }
      if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18[0].__r_.__value_.__l.__data_);
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      v10[0] = v12;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      ++v7;
      uint64_t v4 = *((void *)this + 16);
      v6 += 224;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 17) - v4) >> 3) > v7);
  }
}

void sub_1B217AC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(a1);
}

void quasar::KeywordDirectOutputsSyncDecoder::updateProb(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, signed int a3, uint64_t *a4)
{
  if ((int)(a3 - kaldi::OnlineFeatureMatrix::GetCurrentBatchOffset(*a2)) > 1)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Output for current batch is might not be 1 dimension");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  kaldi::OnlineFeatureMatrix::GetFrame(*a2, a3, (uint64_t *)v12);
  int v7 = DWORD2(v12[0]);
  std::vector<float>::vector(__p, SDWORD2(v12[0]));
  if (v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)&v12[0];
    uint64_t v10 = __p[0];
    do
    {
      v10[v8] = *(_DWORD *)(v9 + 4 * v8);
      ++v8;
    }
    while (v7 != v8);
  }
  std::vector<std::vector<int>>::__clear[abi:ne180100](a4);
  std::vector<std::vector<float>>::push_back[abi:ne180100](a4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B217ADBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::KeywordDirectOutputsSyncDecoder::getResultTokens(quasar::KeywordDirectOutputsSyncDecoder *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<quasar::Token>>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 5));
  std::string::size_type v3 = (long long *)*((void *)this + 13);
  for (uint64_t i = (long long *)*((void *)this + 14); v3 != i; v3 += 14)
  {
    long long v4 = *v3;
    uint64_t v20 = *((void *)v3 + 2);
    long long v19 = v4;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)std::string::size_type v3 = 0;
    long long v5 = *(long long *)((char *)v3 + 24);
    *(void *)((char *)&v21[1] + 6) = *(void *)((char *)v3 + 38);
    *(_OWORD *)uint64_t v21 = v5;
    long long v6 = v3[3];
    v21[5] = *((void *)v3 + 8);
    *(_OWORD *)&v21[3] = v6;
    *((void *)v3 + 7) = 0;
    *((void *)v3 + 8) = 0;
    *((void *)v3 + 6) = 0;
    long long v22 = *(long long *)((char *)v3 + 72);
    uint64_t v23 = *((void *)v3 + 11);
    *((void *)v3 + 9) = 0;
    *((void *)v3 + 10) = 0;
    *((void *)v3 + 11) = 0;
    long long v7 = v3[6];
    uint64_t v25 = *((void *)v3 + 14);
    long long v24 = v7;
    *((void *)v3 + 13) = 0;
    *((void *)v3 + 14) = 0;
    *((void *)v3 + 12) = 0;
    long long v26 = *(long long *)((char *)v3 + 120);
    uint64_t v27 = *((void *)v3 + 17);
    *((void *)v3 + 15) = 0;
    *((void *)v3 + 16) = 0;
    *((void *)v3 + 17) = 0;
    long long v8 = v3[9];
    uint64_t v29 = *((void *)v3 + 20);
    long long v28 = v8;
    *((void *)v3 + 19) = 0;
    *((void *)v3 + 20) = 0;
    *((void *)v3 + 18) = 0;
    int v9 = *((_DWORD *)v3 + 42);
    __int16 v31 = *((_WORD *)v3 + 86);
    int v30 = v9;
    long long v10 = v3[11];
    uint64_t v33 = *((void *)v3 + 24);
    long long v32 = v10;
    *((void *)v3 + 23) = 0;
    *((void *)v3 + 24) = 0;
    *((void *)v3 + 22) = 0;
    long long v11 = *(long long *)((char *)v3 + 200);
    int v35 = *((_DWORD *)v3 + 54);
    long long v34 = v11;
    uint64_t v15 = 0;
    char v16 = 0;
    char v14 = 0;
    std::string v17 = &v14;
    char v18 = 0;
    char v14 = (char *)operator new(0xE0uLL);
    uint64_t v15 = (uint64_t)v14;
    char v16 = v14 + 224;
    uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v16, (uint64_t)&v19, (uint64_t)&v36, (uint64_t)v14);
    std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a2, (uint64_t)&v14);
    std::string v17 = &v14;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    quasar::Token::~Token((void **)&v19);
  }
}

void sub_1B217B00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = a11;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t quasar::KeywordDirectOutputsSyncDecoder::runSync(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void ***)(a2 + 88);
  long long v5 = (char *)*v4;
  long long v6 = (char *)v4[1];
  while (v6 != v5)
  {
    v6 -= 24;
    v49[0] = v6;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
  }
  v4[1] = v5;
  int v40 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a2 + 56) + 16) + 24))(*(void *)(*(void *)(a2 + 56) + 16));
  int v7 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  int v8 = *(_DWORD *)(a1 + 92);
  while (1)
  {
    BOOL IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(a2 + 56), v8 + v7, 1);
    int v10 = *(_DWORD *)(a1 + 88);
    if (v8 + v7 >= v10 || !IsValidFrame) {
      break;
    }
    uint64_t v12 = *(atomic_ullong **)(a2 + 64);
    v66[0] = *(kaldi::OnlineFeatureMatrix **)(a2 + 56);
    v66[1] = (kaldi::OnlineFeatureMatrix *)v12;
    if (v12) {
      atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
    }
    quasar::KeywordDirectOutputsSyncDecoder::updateProb(IsValidFrame, v66, v8 + v7, &v67);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v12);
    }
    ++v7;
  }
  int v13 = *(_DWORD *)(a1 + 92);
  if (v13 >= v10)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      *(_OWORD *)__p = 0u;
      long long v61 = 0u;
      *(_OWORD *)long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      *(_OWORD *)long long v55 = 0u;
      *(_OWORD *)long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      *(_OWORD *)long long v49 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"batchesSeenSoFar: ", 18);
      long long v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" hit numBatchToUse: ", 20);
      int v35 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" with frame number: ", 20);
      uint64_t v36 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", use the tokens result from cutoff", 35);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v49);
    }
    uint64_t v37 = *(void *)(a2 + 88);
    if (v37 != a1 + 152) {
      std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v37, *(uint64_t **)(a1 + 152), *(uint64_t **)(a1 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 160) - *(void *)(a1 + 152)) >> 3));
    }
  }
  else
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v67) >> 3);
    if (v14)
    {
      if (v14 != 1)
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        *(_OWORD *)__p = 0u;
        long long v61 = 0u;
        *(_OWORD *)long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        *(_OWORD *)long long v55 = 0u;
        *(_OWORD *)long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)long long v49 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"nnet Output is not single row", 29);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v49);
      }
      uint64_t v15 = *(void *)(a1 + 128);
      uint64_t v16 = *(void *)(a1 + 136);
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 5) != 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3))
      {
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        *(_OWORD *)__p = 0u;
        long long v61 = 0u;
        *(_OWORD *)long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        *(_OWORD *)long long v55 = 0u;
        *(_OWORD *)long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        *(_OWORD *)long long v49 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"bestKeywordsScores count : ", 27);
        uint64_t v39 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" unmatching with keywords count: ", 33);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v49);
      }
      if (v16 != v15)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          int v20 = *(_DWORD *)(a1 + 92);
          int v21 = *(_DWORD *)(a1 + 96);
          if (quasar::gLogLevel >= 4)
          {
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            *(_OWORD *)__p = 0u;
            long long v61 = 0u;
            *(_OWORD *)long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            *(_OWORD *)long long v55 = 0u;
            *(_OWORD *)long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            *(_OWORD *)long long v49 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
            long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"KWD ", 4);
            uint64_t v23 = *(void *)(a1 + 128) + v17;
            int v24 = *(char *)(v23 + 23);
            if (v24 >= 0) {
              uint64_t v25 = *(void *)(a1 + 128) + v17;
            }
            else {
              uint64_t v25 = *(void *)v23;
            }
            if (v24 >= 0) {
              uint64_t v26 = *(unsigned __int8 *)(v23 + 23);
            }
            else {
              uint64_t v26 = *(void *)(v23 + 8);
            }
            uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v25, v26);
            long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" ", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" confidence ", 12);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v49);
            uint64_t v15 = *(void *)(a1 + 128);
          }
          uint64_t v29 = (long long *)(v15 + v17);
          if (*((char *)v29 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v29, *((void *)v29 + 1));
          }
          else
          {
            long long v30 = *v29;
            v48.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
            *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
          }
          float v31 = *(float *)(*(void *)(v68 - 24) + 4 * v19);
          std::string::basic_string[abi:ne180100]<0>(v46, "");
          std::string::basic_string[abi:ne180100]<0>(v44, "");
          memset(v43, 0, sizeof(v43));
          std::string::basic_string[abi:ne180100]<0>(v41, "");
          quasar::Token::Token((std::string *)v49, (long long *)&v48, v21 * v40 * v20, v21 * v40 * (v7 + v20), v21 * v40 * (v7 + v20), 0, 0, (long long *)v46, v31, (long long *)v44, v43, 0, (long long *)v41, 0, 0);
          quasar::Token::operator=(*(void *)(a1 + 104) + v18, (long long *)v49);
          if (SBYTE7(v61) < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE7(v59) < 0) {
            operator delete(v58[0]);
          }
          v70[0] = (void **)&v56 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v70);
          if (SBYTE7(v56) < 0) {
            operator delete(v55[0]);
          }
          v70[0] = (void **)&v53 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v70);
          if (SBYTE7(v53) < 0) {
            operator delete(v52[0]);
          }
          if (SBYTE7(v50) < 0) {
            operator delete(v49[0]);
          }
          if (v42 < 0) {
            operator delete(v41[0]);
          }
          v41[0] = v43;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
          if (v45 < 0) {
            operator delete(v44[0]);
          }
          if (v47 < 0) {
            operator delete(v46[0]);
          }
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
          ++v19;
          uint64_t v15 = *(void *)(a1 + 128);
          v18 += 224;
          v17 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 136) - v15) >> 3) > v19);
        int v13 = *(_DWORD *)(a1 + 92);
      }
      *(_DWORD *)(a1 + 92) = v13 + v7;
      quasar::KeywordDirectOutputsSyncDecoder::getResultTokens((quasar::KeywordDirectOutputsSyncDecoder *)a1, (uint64_t *)v49);
      uint64_t v32 = *(void *)(a2 + 88);
      std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)v32);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v49;
      *(void *)(v32 + 16) = v50;
      v49[0] = 0;
      v49[1] = 0;
      *(void *)&long long v50 = 0;
      v46[0] = v49;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v46);
      if (*(_DWORD *)(a1 + 92) >= *(_DWORD *)(a1 + 88))
      {
        uint64_t v33 = *(uint64_t ***)(a2 + 88);
        if ((uint64_t **)(a1 + 152) != v33) {
          std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 152, *v33, v33[1], 0xAAAAAAAAAAAAAAABLL * (v33[1] - *v33));
        }
      }
    }
  }
  v49[0] = &v67;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
  return 1;
}

void sub_1B217B6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45)
{
  a45 = v45 - 136;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,int,int,int,float const&,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, float *a6, unsigned __int8 *a7)
{
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9) {
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v16 = 0x124924924924924;
  }
  else {
    unint64_t v16 = v9;
  }
  int v24 = a1 + 2;
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  }
  else {
    uint64_t v17 = 0;
  }
  int v20 = v17;
  int v21 = (std::string *)&v17[224 * v8];
  uint64_t v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float const&,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  long long v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1B217B91C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float const&,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, float *a7, unsigned __int8 *a8)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v26 = *(std::string *)a3;
  }
  int v14 = *a4;
  int v15 = *a5;
  int v16 = *a6;
  float v17 = *a7;
  int v18 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  memset(v21, 0, sizeof(v21));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, (long long *)&v26, v14, v15, v16, v18 != 0, 0, (long long *)v24, v17, (long long *)v22, v21, 0, (long long *)__p, 0, 0);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1B217BA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void quasar::LmBuildConfig::~LmBuildConfig(void **this)
{
  *this = &unk_1F0A52480;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

void quasar::LmBuildConfig::ModelSysConfigParameters::~ModelSysConfigParameters(void **this)
{
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void quasar::LmBuildConfig::getSysConfigVersion(quasar::LmBuildConfig *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string v11 = *(std::string *)((char *)this + 8);
  }
  quasar::filesystem::Path::Path(&__p, &v11);
  quasar::filesystem::Path::normalize((quasar::filesystem::Path *)&__p, &v14);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&v14, &v16);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A51998;
  if (v15 < 0) {
    operator delete((void *)v14.__r_.__value_.__l.__size_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A51998;
  if (v13 < 0) {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
  }
  long long v6 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, size + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v16;
    }
    else {
      int v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    memmove(v6, v7, size);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + size) = 58;
  quasar::SystemConfig::getMainModelVersion(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  int v10 = std::string::append(&v14, (const std::string::value_type *)p_p, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1B217BDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,void *a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (*(char *)(v34 - 33) < 0) {
    operator delete(*(void **)(v34 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmBuildConfig::getModelType(std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return 1;
  }
  uint64_t v3 = 0;
  for (uint64_t i = "dummy"; std::string::compare(this, i); i += 20)
  {
    if (++v3 == 4)
    {
      memset(v7, 0, sizeof(v7));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      long long v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"invalid model type specifier: ", 30);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)this);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
    }
  }
  return v3;
}

void sub_1B217BF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::LmBuildConfig::readSysConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(void *)(a3 + 8))
    {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a3 + 23))
  {
    std::string v11 = *(std::string *)a3;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "lm-personalize.model");
LABEL_7:
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v11.__r_.__value_.__l.__size_;
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (size)
  {
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v7 = &v11;
    }
    else {
      int v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    memmove(p_p, v7, size);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + size) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
  std::string::basic_string[abi:ne180100]<0>(v8, "Interpolation weight");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 8, (uint64_t)v8, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "max-rescore-weight");
  std::string::basic_string[abi:ne180100]<0>(v8, "Max rescoring weight: 0 = exclude from rescoring, 1 = use in rescoring as usual, betw 0 and 1 = limit rescoring weight chosen by EM algorithm");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 12, (uint64_t)v8, 0, 178, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "deserialize-test");
  std::string::basic_string[abi:ne180100]<0>(v8, "Test if the new model can be read before it is installed");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 16, (uint64_t)v8, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  std::string::basic_string[abi:ne180100]<0>(v8, "Type of model. Examples: 'dummy' or 'ngram'");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 96, (uint64_t)v8, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)&v11);
}

void sub_1B217C2F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void quasar::makeLmBuildConfig(uint64_t a1, uint64_t a2)
{
  memset(&v14, 0, sizeof(v14));
  memset(&v12, 0, sizeof(v12));
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  LODWORD(v9) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v13, a1, (uint64_t *)&v12, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v3 = *(void *)(a2 + 8);
    if (v3)
    {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, v3);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    std::string v12 = *(std::string *)a2;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, "lm-personalize.model");
LABEL_7:
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  long long v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
  if (SBYTE7(v8) < 0) {
    long long v5 = (void **)__p[0];
  }
  if (size)
  {
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v6 = &v12;
    }
    else {
      long long v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
    }
    memmove(v5, v6, size);
  }
  *(_WORD *)((char *)v5 + size) = 46;
  quasar::SystemConfig::setPrefix(v13, (const std::string *)__p);
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  std::string::basic_string[abi:ne180100]<0>(v10, "Type of model. Examples: 'dummy' or 'ngram'");
  quasar::SystemConfig::Register<std::string>((uint64_t)v13, (const void **)__p, (uint64_t)&v14, (uint64_t)v10, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  quasar::SystemConfig::readPtree((uint64_t)v13, (uint64_t)&v12);
}

void sub_1B217C7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,char a62)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a62);
  if (*(char *)(v62 - 33) < 0) {
    operator delete(*(void **)(v62 - 56));
  }
  _Unwind_Resume(a1);
}

void sub_1B217C8D0(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1B217C8B8);
}

quasar::LmModel2 *quasar::LmModel2::LmModel2(quasar::LmModel2 *this, float a2, float a3, uint64_t *a4)
{
  uint64_t v5 = *a4;
  *(void *)this = *a4;
  *(void *)((char *)this + *(void *)(v5 - 24)) = a4[1];
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)this + 40;
  *((void *)this + 6) = 0;
  quasar::PTree::PTree((quasar::LmModel2 *)((char *)this + 56));
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 3;
  *((void *)this + 18) = 0x3F80000000000000;
  *((unsigned char *)this + 152) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((void *)this + 28) = 0;
  *((unsigned char *)this + 232) = 1;
  return this;
}

void sub_1B217CA08(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  std::__tree<std::string>::destroy(v4, *(char **)(v1 + 40));
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void quasar::LmModel2::~LmModel2(quasar::LmModel2 *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 24)) = a2[1];
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  quasar::PTree::~PTree((quasar::LmModel2 *)((char *)this + 56));
  std::__tree<std::string>::destroy((uint64_t)this + 32, *((char **)this + 5));
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t quasar::LmModel2::LmModel2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v3 - 24)) = a2[1];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  quasar::PTree::PTree((quasar::PTree *)(a1 + 56));
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 3;
  *(void *)(a1 + 144) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 1;
  return a1;
}

void sub_1B217CC4C(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  std::__tree<std::string>::destroy(v4, *(char **)(v1 + 40));
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void quasar::_loadLmFromDirectoryWithoutCoordinator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (quasar::gLogLevel >= 4)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    memset(v22, 0, sizeof(v22));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reading LmModel currentDir=", 27);
    int v8 = *(char *)(a1 + 23);
    if (v8 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    if (v8 >= 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v22);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(unsigned char **)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 23) = 0;
  }
  if (*(unsigned char *)(a4 + 16))
  {
    char v11 = *(std::__shared_weak_count **)(a4 + 8);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    *(unsigned char *)(a4 + 16) = 0;
  }
  uint64_t v20 = 0;
  int v21 = 0;
  if (*(char *)(a1 + 23) >= 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v12 = *(void *)(a1 + 8);
  }
  char v13 = v22;
  std::string::basic_string[abi:ne180100]((uint64_t)v22, v12 + 1);
  if (v22[23] < 0) {
    char v13 = *(unsigned char **)v22;
  }
  if (v12)
  {
    if (*(char *)(a1 + 23) >= 0) {
      std::string v14 = (const void *)a1;
    }
    else {
      std::string v14 = *(const void **)a1;
    }
    memmove(v13, v14, v12);
  }
  *(_WORD *)&v13[v12] = 47;
  char v15 = std::string::append((std::string *)v22, "lm.json");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v15->__r_.__value_.__r.__words[2];
  long long v18 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((v22[23] & 0x80000000) != 0) {
    operator delete(*(void **)v22);
  }
  if (quasar::filesystem::exists((char *)&v18))
  {
    quasar::PTree::PTree((quasar::PTree *)v17);
    quasar::PTree::readJsonFromFile();
  }
  std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<std::shared_ptr<kaldi::WordHypLattice>&,void>(a4, &v20);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1B217D248(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  quasar::LmBuildConfig::ModelSysConfigParameters::~ModelSysConfigParameters(&a10);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a38);
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  long long v64 = __cxa_begin_catch(a1);
  int v65 = *v61;
  if (a2 == 2)
  {
    if (v65 >= 1)
    {
      unint64_t v66 = v64;
      v60[18] = 0u;
      v60[19] = 0u;
      v60[16] = 0u;
      v60[17] = 0u;
      v60[14] = 0u;
      v60[15] = 0u;
      v60[12] = 0u;
      v60[13] = 0u;
      v60[10] = 0u;
      v60[11] = 0u;
      v60[8] = 0u;
      v60[9] = 0u;
      v60[6] = 0u;
      v60[7] = 0u;
      v60[4] = 0u;
      v60[5] = 0u;
      v60[3] = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a55);
      uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a55, (uint64_t)"C++ exception: ", 15);
      uint64_t v68 = (const char *)(*(uint64_t (**)(void *))(*(void *)v66 + 16))(v66);
      size_t v69 = strlen(v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a55);
    }
  }
  else if (v65 >= 1)
  {
    v60[18] = 0u;
    v60[19] = 0u;
    v60[16] = 0u;
    v60[17] = 0u;
    v60[14] = 0u;
    v60[15] = 0u;
    v60[12] = 0u;
    v60[13] = 0u;
    v60[10] = 0u;
    v60[11] = 0u;
    v60[8] = 0u;
    v60[9] = 0u;
    v60[6] = 0u;
    v60[7] = 0u;
    v60[4] = 0u;
    v60[5] = 0u;
    v60[3] = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a55, (uint64_t)"Unknown exception", 17);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a55);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B217D1A8);
}

void sub_1B217D4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void quasar::LmModel2::getMetadata(quasar::PTree *a1@<X8>)
{
  quasar::PTree::PTree(a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "version");
  quasar::PTree::getChildOptional((uint64_t)a1, (uint64_t)__p);
}

void sub_1B217D860()
{
}

void sub_1B217D86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    JUMPOUT(0x1B217D87CLL);
  }
  JUMPOUT(0x1B217D880);
}

void quasar::LmModel2::write(unsigned char *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1[232])
  {
    uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
    if ((v2 & 0x80u) != 0) {
      uint64_t v2 = *(void *)(a2 + 8);
    }
    if (v2)
    {
      uint64_t v3 = (quasar::FileCoordinator *)(*(void *(**)(long long *__return_ptr))(*(void *)a1 + 32))(&v5);
      char v4 = 0;
      quasar::FileCoordinator::create(v3);
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v5, "Destination is empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v5);
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v5, "Model is only for inference and cannot be written");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v5);
}

void sub_1B217DA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::LmModel2::isCompatible(quasar::LmModel2 *this, const quasar::SystemConfig *a2)
{
  quasar::LmBuildConfig::getSysConfigVersion(a2, &__p);
  uint64_t v3 = *((unsigned __int8 *)this + 183);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = *((unsigned __int8 *)this + 183);
  }
  else {
    uint64_t v4 = *((void *)this + 21);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v4 == size)
  {
    long long v7 = (const void **)((char *)this + 160);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v3 & 0x80) != 0)
    {
      BOOL v16 = memcmp(*v7, p_p, *((void *)this + 21)) == 0;
    }
    else
    {
      if (!*((unsigned char *)this + 183))
      {
        BOOL v16 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v16;
        }
        goto LABEL_23;
      }
      uint64_t v9 = v3 - 1;
      do
      {
        int v11 = *(unsigned __int8 *)v7;
        long long v7 = (const void **)((char *)v7 + 1);
        int v10 = v11;
        int v13 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v12 = v13;
        BOOL v15 = v9-- != 0;
        BOOL v16 = v10 == v12;
      }
      while (v10 == v12 && v15);
    }
    if (v6 < 0) {
LABEL_23:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v16 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_23;
    }
  }
  return v16;
}

void quasar::LmModel2::getMetrics(quasar::LmModel2 *this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *((_DWORD *)this + 14);
  uint64_t v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 8), *((void *)this + 9));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    *(void *)(a2 + 24) = *((void *)this + 10);
  }
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a2 + 32), *((void *)this + 11), *((void *)this + 12), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 3));
  *(unsigned char *)(a2 + 56) = *((unsigned char *)this + 112);
  long long v5 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "totalTime");
  double v6 = *((double *)this + 15);
  int Type = quasar::getType(v5, *(float *)&v6);
  std::to_string(&v8, v6);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v12 = 1;
  quasar::PTree::putChild(a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "times");
  quasar::times2Ptree((void *)this + 4, (quasar::PTree *)&Type);
  quasar::PTree::putChild(a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B217DD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  quasar::PTree::~PTree((quasar::PTree *)&a10);
  if (a23 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree(v23);
  _Unwind_Resume(a1);
}

float quasar::LmModel2::getWeight(quasar::LmModel2 *this)
{
  return *((float *)this + 36);
}

uint64_t quasar::LmModel2::setWeight(uint64_t this, float a2)
{
  *(float *)(this + 144) = a2;
  *(float *)(this + *(void *)(*(void *)this - 24) + 12) = a2;
  return this;
}

double quasar::LmModel2::getAgeSeconds(quasar::LmModel2 *this)
{
  double result = 0.0;
  if (*((double *)this + 16) != 0.0)
  {
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    return fmax((double)std::chrono::system_clock::to_time_t(&__t) - *((double *)this + 16), 0.0);
  }
  return result;
}

std::string *quasar::LmModel2::setModelSysConfigParams(quasar::LmModel2 *this, const quasar::LmBuildConfig::ModelSysConfigParameters *a2)
{
  *((_OWORD *)this + 9) = *(_OWORD *)a2;
  std::string::operator=((std::string *)((char *)this + 160), (const std::string *)((char *)a2 + 16));
  std::string::operator=((std::string *)((char *)this + 184), (const std::string *)((char *)a2 + 40));
  return std::string::operator=((std::string *)((char *)this + 208), (const std::string *)((char *)a2 + 64));
}

void quasar::buildLm(quasar::LmData *this@<X1>, void *a2@<X0>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (quasar::LmData::hasEnoughData(this))
  {
    char v17 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)v16, v5);
    uint64_t v18 = 0;
    quasar::LmData::disallowMoreData(this);
    switch((*(unsigned int (**)(void))(*(void *)*a2 + 16))())
    {
      case 0u:
        uint64_t v10 = *a2;
        uint64_t v11 = a2[1];
        if (v11)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
          uint64_t v15 = v11;
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v14 = v10;
        quasar::trainDummyModel(&v14);
      case 2u:
      case 4u:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        if (v7)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
          uint64_t v13 = v7;
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v12 = v6;
        quasar::trainOrAdaptNgramSrilmModel();
      case 5u:
        uint64_t v8 = *a2;
        uint64_t v9 = a2[1];
        if (v9)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
          uint64_t v13 = v9;
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v13 = 0;
        }
        uint64_t v12 = v8;
        quasar::trainOrAdaptNNLMModel(&v12, (clockid_t)this, &v19);
      default:
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Unsupported LmBuildConfig type", 30);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
    }
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Not enough data. Skip training", 30);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v19);
  }
}

void sub_1B217E188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void quasar::loadLmFromDirectory(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (quasar::gLogLevel >= 4)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Reading LmModel dir=", 20);
    int v3 = *(char *)(a1 + 23);
    if (v3 >= 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = *(void *)a1;
    }
    if (v3 >= 0) {
      uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v5 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v4, v5);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v6);
  }
  quasar::FileCoordinator::create((quasar::FileCoordinator *)a1);
}

void sub_1B217E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  _Unwind_Resume(a1);
}

void quasar::removeLm(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1)
  {
    char v2 = 0;
    quasar::FileCoordinator::create((quasar::FileCoordinator *)a1);
  }
  memset(v3, 0, sizeof(v3));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Destination is empty");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
}

void sub_1B217E5DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B217E5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a2) {
    quasar::removeLm(a2);
  }
  _Unwind_Resume(a1);
}

uintmax_t quasar::removeLmHelper(const void **a1)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v2 = (size_t)a1[1];
  }
  int v3 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v2 + 8);
  if (v25 < 0) {
    int v3 = (void **)__p[0];
  }
  if (v2)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = *a1;
    }
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "/garbage");
  BOOL v5 = quasar::filesystem::exists((char *)__p);
  BOOL v6 = v5;
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      goto LABEL_27;
    }
  }
  else if (!v5)
  {
    goto LABEL_27;
  }
  if (*((char *)a1 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v7 = (size_t)a1[1];
  }
  uint64_t v8 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 8);
  if (v25 < 0) {
    uint64_t v8 = (void **)__p[0];
  }
  if (v7)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "/garbage");
  quasar::filesystem::remove_all((char *)__p);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
LABEL_27:
  if (*((char *)a1 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  uint64_t v11 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 8);
  if (v25 < 0) {
    uint64_t v11 = (void **)__p[0];
  }
  if (v10)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *a1;
    }
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/current");
  BOOL v13 = quasar::filesystem::exists((char *)__p);
  BOOL v14 = v13;
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if (!v14) {
      goto LABEL_65;
    }
  }
  else if (!v13)
  {
    goto LABEL_65;
  }
  if (*((char *)a1 + 23) >= 0) {
    size_t v15 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v15 = (size_t)a1[1];
  }
  BOOL v16 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 8);
  if (v25 < 0) {
    BOOL v16 = (void **)__p[0];
  }
  if (v15)
  {
    if (*((char *)a1 + 23) >= 0) {
      char v17 = a1;
    }
    else {
      char v17 = *a1;
    }
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "/current");
  if (*((char *)a1 + 23) >= 0) {
    size_t v18 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v18 = (size_t)a1[1];
  }
  long long v19 = v22;
  std::string::basic_string[abi:ne180100]((uint64_t)v22, v18 + 8);
  if (v23 < 0) {
    long long v19 = (void **)v22[0];
  }
  if (v18)
  {
    if (*((char *)a1 + 23) >= 0) {
      long long v20 = a1;
    }
    else {
      long long v20 = *a1;
    }
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "/garbage");
  quasar::filesystem::rename((char *)__p, (char *)v22);
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(__p[0]);
  }
LABEL_65:
  uintmax_t result = quasar::filesystem::exists((char *)a1);
  if (result) {
    return quasar::filesystem::remove_all((char *)a1);
  }
  return result;
}

void sub_1B217E90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::NgramSrilmCountConfig  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::NgramSrilmCountConfig  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NgramSrilmCountConfig  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<quasar::DummyConfig  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::DummyConfig  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::DummyConfig  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<quasar::NgramSrilmAdaptationConfig  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::NgramSrilmAdaptationConfig  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NgramSrilmAdaptationConfig  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<quasar::NNLmConfig  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::NNLmConfig  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NNLmConfig  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  size_t v2 = (char *)operator new(0x20uLL);
  *(void *)size_t v2 = &unk_1F0A5C1D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5C1D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, const void **a2)
{
  int v3 = *(int **)(a1 + 8);
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  BOOL v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 8);
  if (v52 < 0) {
    BOOL v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v6 = a2;
    }
    else {
      BOOL v6 = *a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/garbage");
  BOOL v7 = quasar::filesystem::exists((char *)__p);
  BOOL v8 = v7;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_27;
    }
  }
  else if (!v7)
  {
    goto LABEL_27;
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  size_t v10 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 8);
  if (v52 < 0) {
    size_t v10 = (void **)__p[0];
  }
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "/garbage");
  quasar::filesystem::remove_all((char *)__p);
  if (SHIBYTE(v52) < 0) {
    operator delete(__p[0]);
  }
LABEL_27:
  if (*((char *)a2 + 23) >= 0) {
    size_t v12 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v12 = (size_t)a2[1];
  }
  BOOL v13 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 8);
  if (v52 < 0) {
    BOOL v13 = (void **)__p[0];
  }
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v14 = a2;
    }
    else {
      BOOL v14 = *a2;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, "/current");
  BOOL v15 = quasar::filesystem::exists((char *)__p);
  BOOL v16 = v15;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if (!v16) {
      goto LABEL_77;
    }
  }
  else if (!v15)
  {
    goto LABEL_77;
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v17 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v17 = (size_t)a2[1];
  }
  size_t v18 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v17 + 8);
  if (v52 < 0) {
    size_t v18 = (void **)__p[0];
  }
  if (v17)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v19 = a2;
    }
    else {
      long long v19 = *a2;
    }
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, "/current");
  if (*((char *)a2 + 23) >= 0) {
    size_t v20 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v20 = (size_t)a2[1];
  }
  long long v21 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v20 + 8);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v21 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if (v20)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v22 = a2;
    }
    else {
      long long v22 = *a2;
    }
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, "/garbage");
  quasar::filesystem::rename((char *)__p, (char *)&v54);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v23 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v23 = (size_t)a2[1];
  }
  long long v24 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v23 + 8);
  if (v52 < 0) {
    long long v24 = (void **)__p[0];
  }
  if (v23)
  {
    if (*((char *)a2 + 23) >= 0) {
      char v25 = a2;
    }
    else {
      char v25 = *a2;
    }
    memmove(v24, v25, v23);
  }
  strcpy((char *)v24 + v23, "/garbage");
  quasar::filesystem::remove_all((char *)__p);
  if (SHIBYTE(v52) < 0) {
    operator delete(__p[0]);
  }
LABEL_77:
  if (*((char *)a2 + 23) >= 0) {
    size_t v26 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v26 = (size_t)a2[1];
  }
  long long v27 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v26 + 5);
  if (v52 < 0) {
    long long v27 = (void **)__p[0];
  }
  if (v26)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v28 = a2;
    }
    else {
      long long v28 = *a2;
    }
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, "/next");
  BOOL v29 = quasar::filesystem::exists((char *)__p);
  BOOL v30 = v29;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if (!v30) {
      goto LABEL_103;
    }
  }
  else if (!v29)
  {
    goto LABEL_103;
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v31 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v31 = (size_t)a2[1];
  }
  long long v32 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v31 + 5);
  if (v52 < 0) {
    long long v32 = (void **)__p[0];
  }
  if (v31)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v33 = a2;
    }
    else {
      long long v33 = *a2;
    }
    memmove(v32, v33, v31);
  }
  strcpy((char *)v32 + v31, "/next");
  quasar::filesystem::remove_all((char *)__p);
  if (SHIBYTE(v52) < 0) {
    operator delete(__p[0]);
  }
LABEL_103:
  if (*((char *)a2 + 23) >= 0) {
    size_t v34 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v34 = (size_t)a2[1];
  }
  long long v35 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v34 + 5);
  if (v52 < 0) {
    long long v35 = (void **)__p[0];
  }
  if (v34)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v36 = a2;
    }
    else {
      long long v36 = *a2;
    }
    memmove(v35, v36, v34);
  }
  strcpy((char *)v35 + v34, "/next");
  char Directories = quasar::appleCreateDirectories((uint64_t)__p, v3[34]);
  char v38 = Directories;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if ((v38 & 1) == 0) {
      return;
    }
  }
  else if ((Directories & 1) == 0)
  {
    return;
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v39 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v39 = (size_t)a2[1];
  }
  int v40 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v39 + 5);
  if (v52 < 0) {
    int v40 = (void **)__p[0];
  }
  if (v39)
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v41 = a2;
    }
    else {
      long long v41 = *a2;
    }
    memmove(v40, v41, v39);
  }
  strcpy((char *)v40 + v39, "/next");
  char v42 = (*(uint64_t (**)(int *, void **))(*(void *)v3 + 24))(v3, __p);
  char v43 = v42;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if ((v43 & 1) == 0) {
      return;
    }
LABEL_131:
    if (*((char *)a2 + 23) >= 0) {
      size_t v44 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v44 = (size_t)a2[1];
    }
    uint64_t v45 = &v53;
    std::string::basic_string[abi:ne180100]((uint64_t)&v53, v44 + 5);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v45 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if (v44)
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v46 = a2;
      }
      else {
        long long v46 = *a2;
      }
      memmove(v45, v46, v44);
    }
    strcpy((char *)v45 + v44, "/next");
    char v47 = std::string::append(&v53, "/");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    long long v49 = std::string::append(&v54, "lm.json");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    int64_t v52 = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    quasar::PTree::writeJsonToFile();
  }
  if (v42) {
    goto LABEL_131;
  }
}

void sub_1B217F784(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long __p, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  char v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (quasar::gLogLevel >= 1)
    {
      size_t v26 = v25;
      v22[15] = 0u;
      v22[16] = 0u;
      v22[13] = 0u;
      v22[14] = 0u;
      v22[11] = 0u;
      v22[12] = 0u;
      v22[9] = 0u;
      v22[10] = 0u;
      v22[7] = 0u;
      v22[8] = 0u;
      a21 = 0u;
      a22 = 0u;
      a19 = 0u;
      a20 = 0u;
      a17 = 0u;
      a18 = 0u;
      std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"C++ exception: ", 15);
      long long v28 = (const char *)(*(uint64_t (**)(void *))(*(void *)v26 + 16))(v26);
      size_t v29 = strlen(v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    v22[15] = 0u;
    v22[16] = 0u;
    v22[13] = 0u;
    v22[14] = 0u;
    v22[11] = 0u;
    v22[12] = 0u;
    v22[9] = 0u;
    v22[10] = 0u;
    v22[7] = 0u;
    v22[8] = 0u;
    a21 = 0u;
    a22 = 0u;
    a19 = 0u;
    a20 = 0u;
    a17 = 0u;
    a18 = 0u;
    std::string __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown exception", 17);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B217F764);
}

void sub_1B217FA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  size_t v2 = (char *)operator new(0x20uLL);
  *(void *)size_t v2 = &unk_1F0A5B468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B468;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::operator()(uint64_t *a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  BOOL v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 8);
  if (v8 < 0) {
    BOOL v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      BOOL v6 = a2;
    }
    else {
      BOOL v6 = *a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/current");
  quasar::_loadLmFromDirectoryWithoutCoordinator((uint64_t)__p, a1[1], a1[2], a1[3]);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B217FC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5C280;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5C280;
  a2[1] = v2;
  return result;
}

uintmax_t std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, const void **a2)
{
  uintmax_t result = quasar::removeLmHelper(a2);
  **(unsigned char **)(a1 + 8) = 1;
  return result;
}

void sub_1B217FD48(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  size_t v26 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v27 = v26;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"C++ exception: ", 15);
      size_t v29 = (const char *)(*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
      size_t v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    a24 = 0u;
    a25 = 0u;
    a22 = 0u;
    a23 = 0u;
    a20 = 0u;
    a21 = 0u;
    a18 = 0u;
    a19 = 0u;
    a16 = 0u;
    a17 = 0u;
    a14 = 0u;
    a15 = 0u;
    a12 = 0u;
    a13 = 0u;
    a10 = 0u;
    a11 = 0u;
    a9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Unknown exception", 17);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x1B217FD34);
}

void sub_1B217FE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t quasar::WatermarkDetector2::WatermarkDetector2(uint64_t a1, long long *a2)
{
  uint64_t v3 = (void *)quasar::Decoder::Decoder(a1, a2);
  *uint64_t v3 = &unk_1F0A54320;
  v3[56] = 0x3FDBA0EC74320104;
  std::string::basic_string[abi:ne180100]<0>(v3 + 57, "VoiceTrigger");
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + 512) = 1065353216;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  size_t v4 = operator new(0x10uLL);
  *(void *)(a1 + 528) = v4;
  *v4++ = xmmword_1B259C970;
  *(void *)(a1 + 544) = v4;
  *(void *)(a1 + 536) = v4;
  *(_DWORD *)(a1 + 552) = 1140457472;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(void *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 632) = 1127481344;
  *(_OWORD *)(a1 + 636) = xmmword_1B259C980;
  *(_DWORD *)(a1 + 652) = 2;
  return a1;
}

void sub_1B217FFD4(_Unwind_Exception *a1)
{
  BOOL v5 = v3;
  std::unique_ptr<quasar::NotchDetector2>::reset[abi:ne180100](v5, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  if (v1[479] < 0) {
    operator delete(*v2);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

void quasar::WatermarkDetector2::finishInit(quasar::WatermarkDetector2 *this)
{
  uint64_t v2 = (const std::string *)((char *)this + 456);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty(v2, (char *)__p, &v39);
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = (unsigned __int8 *)v39;
  uint64_t v4 = (unsigned __int8 *)v40;
  if (v39 != v40)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 480, v3, (uint64_t)v3);
      v3 += 24;
    }
    while (v3 != v4);
  }
  __p[0] = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*((char *)this + 631) < 0)
  {
    if (!*((void *)this + 77)) {
      goto LABEL_31;
    }
  }
  else if (!*((unsigned char *)this + 631))
  {
    goto LABEL_31;
  }
  *((void *)this + 67) = *((void *)this + 66);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty((const std::string *)((char *)this + 608), (char *)__p, &v39);
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  BOOL v5 = v39;
  BOOL v6 = v40;
  if (v39 != v40)
  {
    BOOL v7 = (void **)((char *)this + 528);
    do
    {
      float v8 = std::stof(v5, 0);
      float v9 = v8;
      size_t v10 = (float *)*((void *)this + 67);
      unint64_t v11 = *((void *)this + 68);
      if ((unint64_t)v10 >= v11)
      {
        BOOL v13 = (float *)*v7;
        uint64_t v14 = ((char *)v10 - (unsigned char *)*v7) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v11 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          size_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 544, v17);
          size_t v10 = (float *)*((void *)this + 67);
          BOOL v13 = (float *)*((void *)this + 66);
        }
        else
        {
          size_t v18 = 0;
        }
        long long v19 = (float *)&v18[4 * v14];
        float *v19 = v9;
        size_t v12 = v19 + 1;
        while (v10 != v13)
        {
          int v20 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *((void *)this + 66) = v19;
        *((void *)this + 67) = v12;
        *((void *)this + 68) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *size_t v10 = v8;
        size_t v12 = v10 + 1;
      }
      *((void *)this + 67) = v12;
      ++v5;
    }
    while (v5 != v6);
  }
  __p[0] = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_31:
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty((const std::string *)((char *)this + 584), (char *)__p, &v39);
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  long long v21 = v39;
  long long v22 = v40;
  if (v39 != v40)
  {
    size_t v23 = (void **)((char *)this + 560);
    do
    {
      float v24 = std::stof(v21, 0);
      float v25 = v24;
      size_t v26 = (float *)*((void *)this + 71);
      unint64_t v27 = *((void *)this + 72);
      if ((unint64_t)v26 >= v27)
      {
        size_t v29 = (float *)*v23;
        uint64_t v30 = ((char *)v26 - (unsigned char *)*v23) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v32 = v27 - (void)v29;
        if (v32 >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          size_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 576, v33);
          size_t v26 = (float *)*((void *)this + 71);
          size_t v29 = (float *)*((void *)this + 70);
        }
        else
        {
          size_t v34 = 0;
        }
        long long v35 = (float *)&v34[4 * v30];
        *long long v35 = v25;
        long long v28 = v35 + 1;
        while (v26 != v29)
        {
          int v36 = *((_DWORD *)v26-- - 1);
          *((_DWORD *)v35-- - 1) = v36;
        }
        *((void *)this + 70) = v35;
        *((void *)this + 71) = v28;
        *((void *)this + 72) = &v34[4 * v33];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        float *v26 = v24;
        long long v28 = v26 + 1;
      }
      *((void *)this + 71) = v28;
      ++v21;
    }
    while (v21 != v22);
  }
  __p[0] = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  operator new();
}

void sub_1B21803B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::WatermarkDetector2::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  float v8 = (void *)(a1 + 480);
  InputOrigin = (unsigned __int8 *)quasar::SpeechRequestData::getInputOrigin(*a4);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, InputOrigin))
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)char v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      BOOL v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"WatermarkDetector2 not run on input origin ", 43);
      uint64_t v14 = quasar::SpeechRequestData::getInputOrigin(*a4);
      int v15 = *(char *)(v14 + 23);
      if (v15 >= 0) {
        uint64_t v16 = v14;
      }
      else {
        uint64_t v16 = *(void *)v14;
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        uint64_t v17 = *(void *)(v14 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v16, v17);
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  unsigned int v10 = *(_DWORD *)(*((void *)*a4 + 3) + 24);
  float v11 = (float)v10;
  if (v10 != 16000)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)char v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"WatermarkDetector2 not supported for sampling rate=", 51);
      std::ostream::operator<<();
      goto LABEL_19;
    }
LABEL_20:
    *(_DWORD *)(*a3 + 684) = 0;
    return 0;
  }
  double v12 = (double)quasar::SpeechRequestData::getEndpointStartMs(*a4) / 1000.0;
  if (v12 <= 0.0)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)char v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"WatermarkDetector2: missing trigger phrase endTime.", 51);
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v12 > 5.0)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)char v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"WatermarkDetector2: not enough audio cached.", 44);
LABEL_19:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v38);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, v38);
  quasar::RecogAudioBuffer::getRawAudioCache(v38[0], &__p);
  if (v38[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38[1]);
  }
  int v20 = (const float *)__p;
  unint64_t v21 = (v37 - (unsigned char *)__p) >> 2;
  if (v21 >= (int)(v12 * v11))
  {
    quasar::Decoder::calculateNBest(a2, a3, *((_DWORD *)*a4 + 4));
    if (quasar::DecoderChainOutput::nonEmptyTopChoice((quasar::DecoderChainOutput *)*a3))
    {
      long long v22 = *(uint64_t ***)(*a3 + 352);
      if (v22[1] == *v22) {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v23 = **v22;
      unint64_t v24 = *(int *)(a1 + 652);
      if (0x6DB6DB6DB6DB6DB7 * (((*v22)[1] - v23) >> 5) >= v24)
      {
        float v25 = (float)*(unsigned int *)(v23 + 224 * (int)v24 - 196) / 1000.0;
        float v35 = 0.0;
        BOOL v26 = quasar::NotchDetector2::notchDetected(*(quasar::NotchDetector2 **)(a1 + 520), v20, v25, v21, &v35);
        if (quasar::gLogLevel >= 4)
        {
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          *(_OWORD *)char v38 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"WatermarkDetector2: score=", 26);
          unint64_t v27 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" detected=", 10);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v38);
        }
        if (v26) {
          int v28 = 2;
        }
        else {
          int v28 = 1;
        }
        uint64_t v29 = *a3;
        *(_DWORD *)(v29 + 684) = v28;
        uint64_t v30 = *(void *)(v29 + 424);
        std::string::basic_string[abi:ne180100]<0>(v38, "Watermark2Score");
        quasar::SpeechRequestResultData::addDumpAA(v30, (long long *)v38, 1, v35);
        if (SBYTE7(v39) < 0) {
          operator delete(v38[0]);
        }
        uint64_t v31 = *(void *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v38, "Watermark2Detected");
        uint64_t v32 = (char *)quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 684));
        std::string::basic_string[abi:ne180100]<0>(&v34, v32);
        quasar::SpeechRequestResultData::addDumpAA(v31, (long long *)v38, &v34);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v39) < 0) {
          operator delete(v38[0]);
        }
        uint64_t v33 = *(void *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v38, "Watermark2StartTimeSecs");
        quasar::SpeechRequestResultData::addDumpAA(v33, (long long *)v38, 1, v25);
        if (SBYTE7(v39) < 0) {
          operator delete(v38[0]);
        }
        goto LABEL_34;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)char v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"WatermarkDetector2: Trigger phrase not detected", 47);
      goto LABEL_32;
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    *(_OWORD *)char v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"WatermarkDetector2: not enough audio cached.", 44);
LABEL_32:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v38);
  }
  *(_DWORD *)(*a3 + 684) = 0;
LABEL_34:
  if (__p)
  {
    long long v37 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1B21809CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::WatermarkDetector2::registerParams(quasar::WatermarkDetector2 *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "watermark-detector2");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 146, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold value to detect a watermark");
  quasar::SystemConfig::Register<double>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "anti-notch-offset");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of anti notch offset");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 552, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "notch-width");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of width of notch");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 632, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "notch-freq");
  std::string::basic_string[abi:ne180100]<0>(v4, "comma separated list of notch frequencies");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 608, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "classifier");
  std::string::basic_string[abi:ne180100]<0>(v4, "comma separated list of classifier values");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 584, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-input-origins-list");
  std::string::basic_string[abi:ne180100]<0>(v4, "The input origins that are supported (should be comma separated)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 456, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-num-tokens");
  std::string::basic_string[abi:ne180100]<0>(v4, "The number of tokens in the trigger phrase (two for hey siri)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 652, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B2180DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::WatermarkDetector2::affectsRecognitionResults(quasar::WatermarkDetector2 *this)
{
  return 1;
}

uint64_t quasar::WatermarkDetector2::supportsEager(quasar::WatermarkDetector2 *this)
{
  return 1;
}

uint64_t quasar::WatermarkDetector2::decoderNeedsCachedRawAudio(quasar::WatermarkDetector2 *this)
{
  return 1;
}

void quasar::WatermarkDetector2::~WatermarkDetector2(quasar::WatermarkDetector2 *this)
{
  quasar::WatermarkDetector2::~WatermarkDetector2(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A54320;
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  if (*((char *)this + 607) < 0) {
    operator delete(*((void **)this + 73));
  }
  uint64_t v2 = (void *)*((void *)this + 70);
  if (v2)
  {
    *((void *)this + 71) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 66);
  if (v3)
  {
    *((void *)this + 67) = v3;
    operator delete(v3);
  }
  std::unique_ptr<quasar::NotchDetector2>::reset[abi:ne180100]((quasar::NotchDetector2 **)this + 65, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 480);
  if (*((char *)this + 479) < 0) {
    operator delete(*((void **)this + 57));
  }
  quasar::Decoder::~Decoder(this);
}

quasar::NotchDetector2 *std::unique_ptr<quasar::NotchDetector2>::reset[abi:ne180100](quasar::NotchDetector2 **a1, quasar::NotchDetector2 *a2)
{
  uintmax_t result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::NotchDetector2::~NotchDetector2(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void quasar::NotchDetector2::~NotchDetector2(quasar::NotchDetector2 *this)
{
  uint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  BOOL v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  float v8 = (void **)((char *)this + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::unique_ptr<kaldi::SplitRadixComplexFft<float>>::reset[abi:ne180100]((uint64_t *)this + 7, 0);
  char v7 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v7;
    operator delete(v7);
  }
}

void freeChart<ChartEntryDouble>(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = 0;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 8 * v4);
    if (v5) {
      MEMORY[0x1B3EA8630](v5, 0x1000C80D9A13B51);
    }
    if (++v4 > a2)
    {
      JUMPOUT(0x1B3EA8630);
    }
  }
}

void freeChart<ChartEntryUnsigned>(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = 0;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 8 * v4);
    if (v5) {
      MEMORY[0x1B3EA8630](v5, 0x1000C8000313F17);
    }
    if (++v4 > a2)
    {
      JUMPOUT(0x1B3EA8630);
    }
  }
}

void WordMesh::freeThread(WordMesh *this)
{
  uint64_t v1 = (void **)alignWordsChartTLS();
  uint64_t v2 = (uint64_t *)*v1;
  if (!*v1)
  {
    uint64_t v2 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    char *v1 = v2;
  }
  uint64_t v3 = (uint64_t **)alignAlignmentChartTLS();
  unsigned int v4 = *v3;
  if (!*v3)
  {
    unsigned int v4 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *uint64_t v3 = v4;
  }
  uint64_t v17 = (void **)v3;
  uint64_t v5 = (uint64_t **)wordErrorChartTLS();
  BOOL v6 = *v5;
  if (!*v5)
  {
    BOOL v6 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *uint64_t v5 = v6;
  }
  size_t v18 = (void **)v5;
  char v7 = (void **)alignWordsMaxRefLengthTLS();
  float v8 = (unsigned int *)*v7;
  if (!*v7)
  {
    float v8 = (unsigned int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *char v7 = v8;
  }
  float v9 = (void **)alignAlignmentMaxRefLengthTLS();
  unsigned int v10 = (unsigned int *)*v9;
  if (!*v9)
  {
    unsigned int v10 = (unsigned int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *float v9 = v10;
  }
  float v11 = (void **)wordErrorMaxRefLengthTLS();
  double v12 = (unsigned int *)*v11;
  if (!*v11)
  {
    double v12 = (unsigned int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    const void *v11 = v12;
  }
  if (*v2) {
    freeChart<ChartEntryDouble>(*v2, *v8);
  }
  if (*v4) {
    freeChart<ChartEntryDouble>(*v4, *v10);
  }
  if (*v6) {
    freeChart<ChartEntryUnsigned>(*v6, *v12);
  }
  BOOL v13 = (void **)compareAlignTLS();
  if (*v13)
  {
    free(*v13);
    void *v13 = 0;
  }
  uint64_t v14 = (void **)alignWordsMaxHypLengthTLS();
  if (*v14)
  {
    free(*v14);
    *uint64_t v14 = 0;
  }
  if (*v7)
  {
    free(*v7);
    *char v7 = 0;
  }
  if (*v1)
  {
    free(*v1);
    char *v1 = 0;
  }
  int v15 = (void **)alignAlignmentMaxHypLengthTLS();
  if (*v15)
  {
    free(*v15);
    *int v15 = 0;
  }
  if (*v9)
  {
    free(*v9);
    *float v9 = 0;
  }
  if (*v17)
  {
    free(*v17);
    const void *v17 = 0;
  }
  uint64_t v16 = (void **)wordErrorMaxHypLengthTLS();
  if (*v16)
  {
    free(*v16);
    char *v16 = 0;
  }
  if (*v11)
  {
    free(*v11);
    const void *v11 = 0;
  }
  if (*v18)
  {
    free(*v18);
    char *v18 = 0;
  }
}

void kaldi::FbankWithPitch::FbankWithPitch(kaldi::FbankWithPitch *this, const kaldi::FbankWithPitchOptions *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  long long v4 = *(_OWORD *)a2;
  *(void *)((char *)this + 29) = *(void *)((char *)a2 + 13);
  *((_OWORD *)this + 1) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 7) = *((void *)a2 + 5);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  *((void *)this + 8) = *((void *)a2 + 6);
  long long v6 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 72) = v6;
  long long v7 = *(_OWORD *)((char *)a2 + 88);
  long long v8 = *(_OWORD *)((char *)a2 + 104);
  long long v9 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 136) = v9;
  *(_OWORD *)((char *)this + 120) = v8;
  *(_OWORD *)((char *)this + 104) = v7;
  long long v10 = *(_OWORD *)((char *)a2 + 152);
  long long v11 = *(_OWORD *)((char *)a2 + 168);
  long long v12 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)this + 200) = v12;
  *(_OWORD *)((char *)this + 184) = v11;
  *(_OWORD *)((char *)this + 168) = v10;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 32) = (char *)this + 264;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::FbankWithPitch *)((char *)this + 280), a2);
  *((void *)this + 38) = 0;
  if (*((unsigned char *)a2 + 215))
  {
    BOOL v13 = operator new(0x90uLL);
    v13[1] = 0;
    v13[2] = 0;
    int v14 = (int)*((float *)a2 + 1);
    void *v13 = &unk_1F0A5E768;
    v13[3] = 850045863;
    *((_OWORD *)v13 + 2) = 0u;
    *((_OWORD *)v13 + 3) = 0u;
    *((_OWORD *)v13 + 4) = 0u;
    *((_OWORD *)v13 + 5) = 0u;
    *((_OWORD *)v13 + 6) = 0u;
    *((_DWORD *)v13 + 28) = v14;
    v13[16] = 0;
    v13[17] = 0;
    v13[15] = 0;
    int v15 = (std::__shared_weak_count *)*((void *)this + 1);
    *(void *)this = v13 + 3;
    *((void *)this + 1) = v13;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  float v16 = *((float *)a2 + 52);
  if (v16 > 0.0) {
    *((float *)this + 62) = logf(v16);
  }
  int v17 = kaldi::FrameExtractionOptions::PaddedWindowSize(a2);
  if ((v17 & (v17 - 1)) == 0) {
    operator new();
  }
  kaldi::FbankWithPitch::GetMelBanks(this, 1.0);
  operator new();
}

void sub_1B21816A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::FbankWithPitch::GetMelBanks(kaldi::FbankWithPitch *this, float a2)
{
  uint64_t v2 = (char **)*((void *)this + 33);
  if (!v2) {
    goto LABEL_8;
  }
  uint64_t v3 = (float *)((char *)this + 264);
  do
  {
    long long v4 = v2 + 1;
    if (*((float *)v2 + 8) >= a2)
    {
      long long v4 = v2;
      uint64_t v3 = (float *)v2;
    }
    uint64_t v2 = (char **)*v4;
  }
  while (*v4);
  if (v3 == (float *)((char *)this + 264) || v3[8] > a2) {
LABEL_8:
  }
    operator new();
  return *((void *)v3 + 5);
}

void sub_1B2181844(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C409C5A7551);
  _Unwind_Resume(a1);
}

void kaldi::FbankWithPitch::~FbankWithPitch(kaldi::FbankWithPitch *this)
{
  uint64_t v2 = (char *)*((void *)this + 32);
  uint64_t v3 = (char *)this + 264;
  if (v2 != (char *)this + 264)
  {
    do
    {
      uint64_t v4 = *((void *)v2 + 5);
      if (v4)
      {
        int v17 = (void **)(v4 + 24);
        std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v17);
        kaldi::Vector<float>::Destroy(v4);
        MEMORY[0x1B3EA8670](v4, 0x10A0C409C5A7551);
      }
      long long v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          long long v6 = v5;
          long long v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          long long v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  uint64_t v8 = *((void *)this + 38);
  if (v8)
  {
    uint64_t v9 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v8);
    MEMORY[0x1B3EA8670](v9, 0x1090C40943DB512);
  }
  uint64_t v10 = *((void *)this + 29);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 64))(v10);
  }
  long long v11 = (kaldi::OnlineProcessPitch *)*((void *)this + 30);
  if (v11)
  {
    kaldi::OnlineProcessPitch::~OnlineProcessPitch(v11);
    MEMORY[0x1B3EA8670]();
  }
  uint64_t v12 = *((void *)this + 39);
  if (v12)
  {
    uint64_t v13 = kaldi::Matrix<float>::~Matrix(v12);
    MEMORY[0x1B3EA8670](v13, 0x1080C40EB13E0A1);
  }
  uint64_t v14 = *((void *)this + 40);
  if (v14)
  {
    uint64_t v15 = kaldi::Matrix<float>::~Matrix(v14);
    MEMORY[0x1B3EA8670](v15, 0x1080C40EB13E0A1);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 280);
  std::__tree<int>::destroy((uint64_t)this + 256, *((void **)this + 33));
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  float v16 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void kaldi::FbankWithPitch::Compute(kaldi::FbankWithPitch *a1, uint64_t a2, int32x2_t *a3, uint64_t a4, float a5, uint64_t a6, int a7)
{
  uint64_t MelBanks = kaldi::FbankWithPitch::GetMelBanks(a1, a5);
  kaldi::FbankWithPitch::ComputeInternal((uint64_t)a1, a2, MelBanks, a3, a4, a7);
}

void kaldi::FbankWithPitch::ComputeInternal(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, int a6)
{
  uint64_t v31 = (float *)(a1 + 16);
  int v35 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 16);
  int v10 = *(_DWORD *)(a1 + 72);
  int v11 = *(unsigned __int8 *)(a1 + 220);
  int v12 = *(unsigned __int8 *)(a1 + 212);
  int v13 = *(unsigned __int8 *)(a1 + 214);
  int v30 = *(unsigned __int8 *)(a1 + 215);
  int v29 = *(unsigned __int8 *)(a1 + 216);
  uint64_t v14 = *(void *)(a1 + 312);
  int v34 = *(unsigned __int8 *)(a1 + 213);
  if (v14)
  {
    int v36 = kaldi::MatrixBase<float>::NumRows(v14);
    if (kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 320)) != v36)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"#remaining_frames for fbank ", 28);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" and energy ", 12);
      kaldi::MatrixBase<float>::NumRows(*(void *)(a1 + 320));
      float v16 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " don't match!");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51);
    }
  }
  else
  {
    int v36 = 0;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v49);
  int v17 = kaldi::OnlineProcessPitch::NumFramesReady(*(kaldi::OnlineProcessPitch **)(a1 + 240));
  if (a5)
  {
    uint64_t v18 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)(a5 + 8));
    uint64_t v53 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    kaldi::Vector<float>::Resize((void **)&v51, v18, 0);
    uint64_t v19 = *(int *)(a5 + 8);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v37 = *(void *)a2 + 4 * v19;
    LODWORD(v38) = v52;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v51, (const void **)&v37);
    (*(void (**)(void, uint64_t *, float))(**(void **)(a1 + 232) + 32))(*(void *)(a1 + 232), &v51, *(float *)(a1 + 96));
    kaldi::Vector<float>::Destroy((uint64_t)&v51);
  }
  else
  {
    (*(void (**)(void, uint64_t, float))(**(void **)(a1 + 232) + 32))(*(void *)(a1 + 232), a2, *(float *)(a1 + 96));
  }
  if (a6) {
    (*(void (**)(void))(**(void **)(a1 + 232) + 40))(*(void *)(a1 + 232));
  }
  int v28 = v13;
  int v20 = v12;
  int v21 = v10;
  uint64_t v33 = a2;
  int v22 = kaldi::OnlineProcessPitch::NumFramesReady(*(kaldi::OnlineProcessPitch **)(a1 + 240));
  uint64_t v23 = (v22 - v17);
  if (v22 != v17)
  {
    kaldi::Matrix<float>::Resize(v49, v23, *(unsigned int *)(*(void *)(a1 + 240) + 56), 0, 0);
    if ((int)v23 >= 1)
    {
      int v24 = 0;
      do
      {
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v51 = *(void *)v49 + 4 * v50 * v24;
        LODWORD(v52) = kaldi::MatrixBase<float>::NumCols((uint64_t)v49);
        kaldi::OnlineProcessPitch::GetFrame(*(void *)(a1 + 240), v17 + v24++, (float **)&v51);
      }
      while (v23 != v24);
    }
  }
  if (a6)
  {
    int v25 = v23 - (v36 + v35);
    if (v25 < 0) {
      int v25 = v36 + v35 - v23;
    }
    if (v25 >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"mismatch between finished pitch frames and remaining frames+new wav frames: ", 76);
      unint64_t v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" v.s. ", 6);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51);
    }
    uint64_t v23 = (v36 + v35);
  }
  if (v23) {
    uint64_t v26 = (v21 + v11 + v20 + v34 + v28 + v30 + v29);
  }
  else {
    uint64_t v26 = 0;
  }
  kaldi::Matrix<float>::Resize(a4, v23, v26, 0, 0);
  if (a5) {
    kaldi::ExtractWaveformRemainder(v33, v31, (void **)a5);
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  long long v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  operator new();
}

void sub_1B21825D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63,...)
{
  va_start(va, a63);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&a58);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B2182630()
{
}

void std::__shared_ptr_emplace<kaldi::SnrTracker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E768;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::SnrTracker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E768;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::SnrTracker>::__on_zero_shared(uint64_t a1)
{
  std::allocator<kaldi::SnrTracker>::destroy[abi:ne180100]((int)&v1, (std::mutex *)(a1 + 24));
}

void std::allocator<kaldi::SnrTracker>::destroy[abi:ne180100](int a1, std::mutex *this)
{
  uint64_t v3 = *(void **)&this[1].__m_.__opaque[24];
  if (v3) {
    operator delete(v3);
  }
  sig = (void *)this[1].__m_.__sig;
  if (sig)
  {
    *(void *)this[1].__m_.__opaque = sig;
    operator delete(sig);
  }
  std::mutex::~mutex(this);
}

uint64_t quasar::lm::arpa2fst::inhouse::ConvertToFST::ConvertToFST(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8 = (std::__shared_weak_count *)a5[1];
  uint64_t v30 = *a5;
  uint64_t v31 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::lm::arpa2fst::ConvertToFST::ConvertToFST((void *)a1, a2, &v30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  *(void *)a1 = &unk_1F0A57EA0;
  *(unsigned char *)(a1 + 33) = a4;
  std::string::basic_string[abi:ne180100]<0>(&v27, "");
  uint64_t v9 = v29;
  if ((v29 & 0x80u) != 0) {
    uint64_t v9 = v28;
  }
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    int v10 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 96))(a2, __p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if ((v29 & 0x80) != 0) {
      goto LABEL_11;
    }
  }
  else
  {
    int v10 = -1;
    if ((v29 & 0x80) != 0) {
LABEL_11:
    }
      operator delete(v27);
  }
  *(_DWORD *)(a1 + 36) = v10;
  float v11 = log(0.0);
  *(float *)(a1 + 40) = v11;
  *(float *)(a1 + 44) = v11;
  int v12 = (quasar::lm *)std::string::basic_string[abi:ne180100]<0>(&v27, "");
  if ((char)v29 < 0)
  {
    uint64_t v13 = v28;
    operator delete(v27);
    if (!v13) {
      goto LABEL_29;
    }
  }
  else if (!v29)
  {
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 36) == -1)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "ConvertToFST", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 256);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Unable to resolve silence token ", 32);
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    if ((v29 & 0x80u) == 0) {
      float v16 = &v27;
    }
    else {
      float v16 = v27;
    }
    if ((v29 & 0x80u) == 0) {
      uint64_t v17 = v29;
    }
    else {
      uint64_t v17 = v28;
    }
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
    if ((char)v29 < 0) {
      operator delete(v27);
    }
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  else
  {
    quasar::lm::nullstream(v12);
  }
LABEL_29:
  quasar::lm::LogMessage::LogMessage(__p, 2, "ConvertToFST", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 260);
  uint64_t v19 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
  int v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"SilenceOptions: {", 17);
  std::string::basic_string[abi:ne180100]<0>(&v27, "");
  if ((v29 & 0x80u) == 0) {
    int v21 = &v27;
  }
  else {
    int v21 = v27;
  }
  if ((v29 & 0x80u) == 0) {
    uint64_t v22 = v29;
  }
  else {
    uint64_t v22 = v28;
  }
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"}", 1);
  if ((char)v29 < 0) {
    operator delete(v27);
  }
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  return a1;
}

void sub_1B2182A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  void *v22 = &unk_1F0A57E78;
  int v24 = (std::__shared_weak_count *)v22[3];
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::ConvertToFST(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, char a6)
{
  uint64_t v8 = (std::__shared_weak_count *)a5[1];
  v10[0] = *a5;
  v10[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::lm::arpa2fst::inhouse::ConvertToFST::ConvertToFST(a1, a2, a3, a4, v10);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(void *)a1 = &unk_1F0A57EF0;
  *(unsigned char *)(a1 + 48) = a6;
  return a1;
}

void sub_1B2182B88(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(uint64_t a1, quasar::lm **this)
{
  Ngram::getorder((Ngram *)this);
  uint64_t v4 = this[3];
  (*(void (**)(quasar::lm *))(*(void *)v4 + 112))(v4);
  (*(void (**)(quasar::lm *))(*(void *)v4 + 128))(v4);
  if (*(void *)(a1 + 16))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    Ngram::getTrie((Ngram *)this);
    operator new();
  }
  quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(v4, *(const Vocab **)(a1 + 8), 0);
}

void sub_1B2183284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a15);
  uint64_t v41 = a20;
  a20 = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

void *quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::ConvertToFST(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v8 = (std::__shared_weak_count *)a6[1];
  v10[0] = *a6;
  v10[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::lm::arpa2fst::inhouse::ConvertToFST::ConvertToFST((uint64_t)a1, a3, a3, a5, v10);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = &unk_1F0A57EC8;
  a1[6] = a2;
  return a1;
}

void sub_1B2183424(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(uint64_t a1, quasar::lm **this)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  int v4 = Ngram::getorder((Ngram *)this);
  uint64_t v5 = this[3];
  unsigned int v6 = (*(uint64_t (**)(quasar::lm *))(*(void *)v5 + 112))(v5);
  int v7 = (*(uint64_t (**)(quasar::lm *))(*(void *)v5 + 128))(v5);
  BOOL v8 = (*(_DWORD *)(a1 + 40) & 0x7FFFFFFFu) < 0x7F800000;
  BOOL v9 = (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) < 0x7F800000;
  uint64_t v57 = 0;
  long long v58 = 0;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(v5, *(const Vocab **)(a1 + 8), 0);
  }
  float v11 = *(std::__shared_weak_count **)(a1 + 24);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v57 = v10;
    long long v58 = v11;
  }
  else
  {
    uint64_t v57 = *(void *)(a1 + 16);
    long long v58 = 0;
  }
  Trie = (_DWORD **)Ngram::getTrie((Ngram *)this);
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 1065353216;
  uint64_t v53 = &v54;
  int v52 = v7;
  uint64_t v51 = 0;
  unint64_t v66 = 0;
  uint64_t v13 = operator new(0x28uLL);
  *(void *)uint64_t v13 = &unk_1F0A5CBC8;
  v13[8] = v9;
  *((void *)v13 + 2) = &v51;
  *((void *)v13 + 3) = &v53;
  *((void *)v13 + 4) = &v52;
  unint64_t v66 = v13;
  quasar::lm::srilm_ext::IterateTrie((uint64_t)Trie, v4, (uint64_t)v65);
  std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__value_func[abi:ne180100](v65);
  if (v8) {
    ++v51;
  }
  if (v9) {
    ++v51;
  }
  int v14 = DWORD2(v55);
  v63[0] = quasar::lm::srilm_ext::GetUnigramContextTrie(Trie, v6) + 8;
  uint64_t v15 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v53, v63);
  float v16 = v15 + 3;
  if (!v15) {
    float v16 = &fst::kNoStateId;
  }
  if (*v16 == -1)
  {
    LODWORD(v61[0]) = *((void *)v53 + 3);
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>((uint64_t)v53, v63, v61);
  }
  uint64_t v17 = (quasar::rescoring::AdapterModel *)quasar::lm::LogMessage::LogMessage(v63, 2, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 515);
  Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer(v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"FST will have ", 14);
  int v19 = v9 || v8;
  int v20 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" states and ", 12);
  int v21 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" arcs.", 6);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v63);
  quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::create(*(void *)(a1 + 48), &v50);
  if (v19)
  {
    uint64_t v22 = (quasar::rescoring::AdapterModel *)quasar::lm::LogMessage::LogMessage(v63, 2, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 527);
    uint64_t v23 = (void *)quasar::rescoring::AdapterModel::getFeaturizer(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Creating silence state.", 23);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v63);
    int v24 = v14 + v19 - 1;
  }
  else
  {
    int v24 = -1;
  }
  float v25 = *(float *)(a1 + 40);
  float v26 = *(float *)(a1 + 44);
  int v27 = *(_DWORD *)(a1 + 36);
  v62[0] = &unk_1F0A5CB70;
  v62[1] = v53;
  v62[3] = v62;
  quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::StateInstantiator((uint64_t)v63, v4, v4 - 1, (uint64_t)Trie, (uint64_t)v5, v6, v7, v57, v25, v26, v27, v24, (uint64_t)v62);
  std::__function::__value_func<unsigned long ()(BOnode const*)>::~__value_func[abi:ne180100](v62);
  int v49 = 2139095040;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  char v28 = *(unsigned char *)(a1 + 33);
  unsigned __int8 v29 = operator new(0x28uLL);
  *(void *)unsigned __int8 v29 = &unk_1F0A5CC20;
  v29[8] = v28;
  *((void *)v29 + 2) = &v50;
  *((void *)v29 + 3) = &v49;
  *((void *)v29 + 4) = &v46;
  v61[3] = v29;
  long long v60 = 0;
  uint64_t v30 = operator new(0x30uLL);
  void *v30 = &unk_1F0A5CC78;
  v30[1] = v63;
  v30[2] = &v46;
  v30[3] = &v49;
  v30[4] = &v50;
  v30[5] = v61;
  long long v60 = v30;
  quasar::lm::srilm_ext::IterateTrie((uint64_t)Trie, v4, (uint64_t)v59);
  uint64_t v31 = (quasar::lm *)std::__function::__value_func<void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__value_func[abi:ne180100](v59);
  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if ((*(_DWORD *)(a1 + 40) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
      goto LABEL_32;
    }
    if (v24 == -1)
    {
      quasar::lm::LogMessage::LogMessage(&__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 580);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
    }
    else
    {
      quasar::lm::nullstream(v31);
    }
    std::string __p = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    float v42 = 0.0;
    uint64_t v38 = (quasar::lm *)quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addState(v50, &__p, &v42);
    if (v38 == v24) {
      goto LABEL_25;
    }
    quasar::lm::LogMessage::LogMessage(v41, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 582);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v41);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v41);
  }
  else
  {
    if (v24 == -1)
    {
      quasar::lm::LogMessage::LogMessage(&__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 574);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
    }
    else
    {
      quasar::lm::nullstream(v31);
    }
    uint64_t v32 = v50;
    int v33 = *(_DWORD *)(a1 + 36);
    float v34 = *(float *)(a1 + 44);
    int v35 = (float *)operator new(0x10uLL);
    uint64_t v44 = v35 + 4;
    uint64_t v45 = (char *)(v35 + 4);
    *(_DWORD *)int v35 = v33;
    *((_DWORD *)v35 + 1) = v33;
    v35[2] = -v34;
    *((_DWORD *)v35 + 3) = v24;
    std::string __p = v35;
    float v36 = expf(v34);
    float v37 = log(1.0 - v36);
    float v42 = -v37;
    uint64_t v38 = (quasar::lm *)quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addState(v32, &__p, &v42);
    if (v38 == v24)
    {
LABEL_25:
      quasar::lm::nullstream(v38);
      goto LABEL_30;
    }
    quasar::lm::LogMessage::LogMessage(v41, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 578);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v41);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v41);
  }
LABEL_30:
  if (__p)
  {
    uint64_t v44 = __p;
    operator delete(__p);
  }
LABEL_32:
  quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::build(v50);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v61);
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  std::__function::__value_func<unsigned long ()(BOnode const*)>::~__value_func[abi:ne180100](v64);
  uint64_t v39 = v50;
  uint64_t v50 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v54);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  return 0;
}

void sub_1B2183AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a14);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](&a37);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__function::__value_func<unsigned long ()(BOnode const*)>::~__value_func[abi:ne180100]((void *)(v41 - 176));
  uint64_t v43 = a21;
  a21 = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

void sub_1B2183C1C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B2183C14);
}

void quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::~ConvertToFST(quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST *this)
{
  *(void *)this = &unk_1F0A57E78;
  char v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A57E78;
  char v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::~ConvertToFST(quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST *this)
{
  *(void *)this = &unk_1F0A57E78;
  char v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A57E78;
  char v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>(uint64_t a1, void *a2, _DWORD *a3)
{
  *(void *)&long long v6 = *a2;
  DWORD2(v6) = *a3;
  uint64_t v3 = (quasar::lm *)std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,std::pair<kaldi::WordHypLattice::Arc * const,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>> const&>(a1, &v6, &v6);
  if (v4)
  {
    quasar::lm::nullstream(v3);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(&v6, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 89);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate key ", 14);
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v6);
  }
}

void sub_1B2183E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5CCD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5CCD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = *a2;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(*(void **)(a1 + 8), &v8);
  char v4 = (int *)(v3 + 3);
  if (!v3) {
    char v4 = (int *)&fst::kNoStateId;
  }
  int v5 = *v4;
  if (v5 == -1)
  {
    int v7 = (*(uint64_t (**)(void))(***(void ***)(a1 + 16) + 200))(**(void **)(a1 + 16));
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>(*(void *)(a1 + 8), &v8, &v7);
    return v7;
  }
  return v5;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::target_type()
{
}

void *std::__function::__value_func<unsigned long ()(BOnode const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::StateInstantiator(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, float a9, float a10, int a11, int a12, uint64_t a13)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 28) = a7;
  *(void *)(a1 + 32) = a8;
  *(float *)(a1 + 40) = a9;
  *(float *)(a1 + 44) = a10;
  float v15 = expf(a9);
  float v16 = log(1.0 - v15);
  *(float *)(a1 + 48) = v16;
  float v17 = expf(a10);
  float v18 = log(1.0 - v17);
  *(float *)(a1 + 52) = v18;
  *(_DWORD *)(a1 + 56) = a11;
  *(_DWORD *)(a1 + 60) = a12;
  int v19 = (quasar::lm *)std::__function::__value_func<unsigned long ()(BOnode const*)>::__value_func[abi:ne180100](a1 + 64, a13);
  float v20 = *(float *)(a1 + 40);
  if ((LODWORD(v20) & 0x7FFFFFFFu) < 0x7F800000 || (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    int v19 = (quasar::lm *)quasar::lm::nullstream(v19);
    float v20 = *(float *)(a1 + 40);
  }
  if ((LODWORD(v20) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    if (v20 <= 0.0)
    {
      int v21 = (quasar::lm *)quasar::lm::nullstream(v19);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v24, 5, "StateInstantiator", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 81);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    }
    if (*(_DWORD *)(a1 + 60) == -1)
    {
      quasar::lm::LogMessage::LogMessage(v24, 5, "StateInstantiator", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 82);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    }
    else
    {
      int v19 = (quasar::lm *)quasar::lm::nullstream(v21);
    }
  }
  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    if (*(float *)(a1 + 44) <= 0.0)
    {
      uint64_t v22 = (quasar::lm *)quasar::lm::nullstream(v19);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v24, 5, "StateInstantiator", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 86);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    }
    if (*(_DWORD *)(a1 + 60) == -1)
    {
      quasar::lm::LogMessage::LogMessage(v24, 5, "StateInstantiator", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 87);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    }
    else
    {
      quasar::lm::nullstream(v22);
    }
  }
  return a1;
}

void sub_1B2184260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  std::__function::__value_func<unsigned long ()(BOnode const*)>::~__value_func[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<unsigned long ()(BOnode const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5CD28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5CD28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::operator()(uint64_t a1, unsigned int *a2, float *a3)
{
  return (*(uint64_t (**)(void, void, float))(***(void ***)(a1 + 8) + 184))(**(void **)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(int,fst::TropicalWeightTpl<float> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5CD80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5CD80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::operator()(uint64_t result)
{
  *(void *)(*(void *)(result + 8) + 8) = **(void **)(result + 8);
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::target_type()
{
}

void *std::__function::__value_func<void ()(int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B2184940(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5CDD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5CDD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  char v4 = *(void ***)(a1 + 8);
  int v5 = v4[1];
  unint64_t v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((char *)v5 - (unsigned char *)*v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - (void)*v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v4 + 2), v11);
    }
    else {
      int v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    int v14 = &v12[16 * v11];
    *(_OWORD *)uint64_t v13 = *a3;
    int v7 = v13 + 16;
    float v16 = (char *)*v4;
    float v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      float v15 = (char *)*v4;
    }
    *char v4 = v13;
    v4[1] = v7;
    v4[2] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *int v5 = *a3;
    int v7 = v5 + 1;
  }
  v4[1] = v7;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B2184D78(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5CE30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5CE30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(__n128 **)v3;
  int v5 = *(long long **)(v3 + 8);
  unint64_t v6 = 126 - 2 * __clz(((char *)v5 - (char *)v4) >> 4);
  uint64_t v7 = *a2;
  if (v5 == (long long *)v4) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v4, v5, (uint64_t)&v12, v8, 1);
  unint64_t v9 = *(uint64_t **)(a1 + 16);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  while (v10 != v11)
  {
    (*(void (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 8) + 208))(**(void **)(a1 + 8), v7, v10);
    v10 += 16;
  }
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5CE88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5CE88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5CEE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5CEE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void))(***(void ***)(a1 + 8) + 208))(**(void **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5CF38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5CF38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F0A5CF90;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5CF90;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(uint64_t *a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t *a5)
{
  return quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(a1[1], *a2, *a3, a4, *a5, a1[2], a1[4], a1[3], a1[5]);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target_type()
{
}

uint64_t quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = a1 + 64;
  float v17 = (float *)(a2 + 8);
  int v18 = std::function<unsigned long ()(BOnode const*)>::operator()(a1 + 64, a2 + 8);
  std::function<void ()(int)>::operator()(a6, v18);
  float v19 = 0.0;
  if (a3 == 1 && *(_DWORD *)(*(void *)a4 + 4) == *(_DWORD *)(a1 + 24))
  {
    float v20 = *(float *)(a1 + 40);
    if ((LODWORD(v20) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      float v19 = *(float *)(a1 + 48) + 0.0;
      int v21 = *(_DWORD *)(a1 + 60);
      LODWORD(v56) = *(_DWORD *)(a1 + 56);
      HIDWORD(v56) = v56;
      float v57 = -v20;
      int v58 = v21;
      std::function<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(a8, v18);
    }
    char v22 = 1;
  }
  else
  {
    char v22 = 0;
  }
  LOBYTE(v56) = 0;
  uint64_t v23 = (_DWORD **)(a2 + 16);
  int v24 = (quasar::lm *)LHash<unsigned int,float>::find(v23, *(_DWORD *)(a1 + 28), &v56);
  if ((_BYTE)v56)
  {
    float v25 = *(float *)v24 * 2.30258509;
    float v26 = v19 + v25;
  }
  else
  {
    float v26 = -INFINITY;
  }
  if ((LODWORD(v26) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    if ((v22 & 1) == 0 && (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      float v27 = -(float)(v26 + *(float *)(a1 + 44));
      int v28 = *(_DWORD *)(a1 + 60);
      LODWORD(v56) = *(_DWORD *)(a1 + 56);
      HIDWORD(v56) = v56;
      float v57 = v27;
      int v58 = v28;
      std::function<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(a8, v18);
      float v26 = v26 + *(float *)(a1 + 52);
    }
    *(float *)&uint64_t v56 = -v26;
    int v24 = (quasar::lm *)std::function<void ()(int,fst::TropicalWeightTpl<float> const&)>::operator()(a7, v18);
  }
  if (a5)
  {
    int v29 = std::function<unsigned long ()(BOnode const*)>::operator()(v16, a5 + 8);
    float v30 = v19 + *v17 * 2.30258509;
    uint64_t v56 = 0;
    float v57 = -v30;
    int v58 = v29;
    std::function<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(a8, v18);
  }
  else if (a3)
  {
    quasar::lm::LogMessage::LogMessage(&v56, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 153);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v56);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v56);
  }
  else
  {
    quasar::lm::nullstream(v24);
  }
  LHashIter<unsigned int,float>::LHashIter(&v56, v23, SArray_compareKey<unsigned int>);
  LHashIter<unsigned int,float>::init((uint64_t)&v56);
  unsigned int v55 = -1;
  std::string __p = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  double v31 = v19;
  while (1)
  {
    uint64_t v32 = (quasar::lm *)LHashIter<unsigned int,float>::next((uint64_t)&v56, &v55);
    if (!v32) {
      break;
    }
    if (v55 == *(_DWORD *)(a1 + 24))
    {
      if (a3)
      {
        quasar::lm::LogMessage::LogMessage(v51, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 176);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v51);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v51);
      }
      else
      {
        quasar::lm::nullstream(v32);
      }
    }
    else if (v55 != *(_DWORD *)(a1 + 28))
    {
      float v33 = *(float *)v32;
      float v34 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(*(void **)(a1 + 32), &v55);
      if (!v34 || (int v35 = *((_DWORD *)v34 + 5), v35 == -1))
      {
        if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16), v55))
        {
          quasar::lm::LogMessage::LogMessage(v51, 2, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 188);
          Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Non-event symbol ", 17);
          float v37 = (void *)std::ostream::operator<<();
          uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" occurs as a probabilistic event. ", 34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Is <unk> modeled as a word?", 27);
          quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v51);
        }
        quasar::lm::LogMessage::LogMessage(v51, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 192);
        uint64_t v39 = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Symbol ", 7);
        long long v40 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" in ARPA model has no remapping.", 32);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v51);
        int v35 = -1;
      }
      uint64_t v41 = (unsigned int *)__p;
      *(_DWORD *)std::string __p = v55;
      unsigned int v50 = 0;
      PrefixTrie = (quasar::lm *)Trie<unsigned int,BOnode>::findPrefixTrie(*(_DWORD ***)(a1 + 8), v41, &v50);
      uint64_t v43 = PrefixTrie;
      if (PrefixTrie)
      {
        uint64_t v44 = (quasar::lm *)quasar::lm::nullstream(PrefixTrie);
      }
      else
      {
        quasar::lm::LogMessage::LogMessage(v51, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 201);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v51);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v51);
      }
      if (v50 <= *(_DWORD *)(a1 + 4))
      {
        quasar::lm::nullstream(v44);
      }
      else
      {
        quasar::lm::LogMessage::LogMessage(v51, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 202);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v51);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v51);
      }
      uint64_t v45 = (quasar::lm *)std::function<unsigned long ()(BOnode const*)>::operator()(v16, (uint64_t)v43 + 8);
      int v46 = (int)v45;
      if (v45 == -1)
      {
        quasar::lm::LogMessage::LogMessage(v51, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 209);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v51);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v51);
      }
      else
      {
        quasar::lm::nullstream(v45);
      }
      float v47 = v31 + v33 * 2.30258509;
      v51[0] = v35;
      v51[1] = v35;
      *(float *)&v51[2] = -v47;
      v51[3] = v46;
      std::function<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(a8, v18);
    }
  }
  if (__p)
  {
    uint64_t v53 = __p;
    operator delete(__p);
  }
  LHashIter<unsigned int,double>::~LHashIter((uint64_t)&v56);
  return std::function<void ()(int)>::operator()(a9, v18);
}

void sub_1B2185874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t std::function<unsigned long ()(BOnode const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::function<void ()(int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::function<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t std::function<void ()(int,fst::TropicalWeightTpl<float> const&)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F0A5CBC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5CBC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = *a2;
  int v5 = *a3;
  unint64_t v6 = *(uint64_t **)(a1 + 24);
  *(void *)uint64_t v16 = *a2 + 8;
  uint64_t v7 = (quasar::lm *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>((void *)*v6, v16);
  uint64_t v8 = (int *)((char *)v7 + 24);
  if (!v7) {
    uint64_t v8 = (int *)&fst::kNoStateId;
  }
  int v9 = *v8;
  if (v9 == -1)
  {
    uint64_t v10 = *v6;
    int v17 = *(void *)(*v6 + 24);
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>(v10, v16, &v17);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
LABEL_5:
    quasar::lm::nullstream(v7);
    goto LABEL_8;
  }
  quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 468);
  quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
LABEL_8:
  uint64_t v11 = *(unsigned int **)(a1 + 32);
  v16[0] = 0;
  uint64_t result = LHash<unsigned int,float>::find((_DWORD **)(v4 + 16), *v11, v16);
  uint64_t v13 = *(unsigned int **)(v4 + 16);
  if (v13) {
    uint64_t v13 = (unsigned int *)((unint64_t)*v13 >> 5);
  }
  if (v16[0]) {
    BOOL v14 = *(unsigned char *)(a1 + 8) != 0;
  }
  else {
    BOOL v14 = 0;
  }
  uint64_t v15 = -1;
  if (v5) {
    uint64_t v15 = 1;
  }
  **(void **)(a1 + 16) += (char *)v13 + v15 - (v16[0] != 0) + v14;
  return result;
}

void sub_1B2185C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5CB70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5CB70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *a2;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(*(void **)(a1 + 8), &v9);
  uint64_t v4 = (int *)(v3 + 3);
  if (!v3) {
    uint64_t v4 = (int *)&fst::kNoStateId;
  }
  int v5 = *v4;
  if (v5 == -1)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    int v8 = *(void *)(v6 + 24);
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>(v6, &v9, &v8);
    return v8;
  }
  return v5;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F0A5CC20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5CC20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::operator()(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(__n128 **)v2;
    uint64_t v4 = *(long long **)(v2 + 8);
    unint64_t v5 = 126 - 2 * __clz(((uint64_t)v4 - *(void *)v2) >> 4);
    if (v4 == (long long *)v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v3, v4, (uint64_t)&v8, v6, 1);
  }
  return quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addState(**(void **)(a1 + 16), *(void **)(a1 + 32), *(float **)(a1 + 24));
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F0A5CC78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5CC78;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(void *a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t *a5)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  int v6 = *a3;
  uint64_t v7 = *a5;
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v10 = a1[1];
  v14[0] = &unk_1F0A5D2A8;
  v14[1] = v8;
  v14[2] = v9;
  v14[3] = v14;
  v13[0] = &unk_1F0A5D300;
  v13[1] = v8;
  v13[3] = v13;
  v12[0] = &unk_1F0A5D358;
  v12[1] = v9;
  v12[3] = v12;
  quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v10, v5, v6, a4, v7, (uint64_t)v14, (uint64_t)v13, (uint64_t)v12, a1[5]);
  std::__function::__value_func<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(int,fst::TropicalWeightTpl<float> const&)>::~__value_func[abi:ne180100](v13);
  return std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100](v14);
}

void sub_1B2186144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(int,fst::TropicalWeightTpl<float> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(int)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::~__func()
{
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5D2A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5D2A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::operator()(uint64_t result)
{
  **(_DWORD **)(result + 8) = 2139095040;
  *(void *)(*(void *)(result + 16) + 8) = **(void **)(result + 16);
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5D300;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5D300;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::operator()(uint64_t result, uint64_t a2, _DWORD *a3)
{
  **(_DWORD **)(result + 8) = *a3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__func()
{
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5D358;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5D358;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = v4[1];
  unint64_t v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((char *)v5 - (unsigned char *)*v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - (void)*v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v4 + 2), v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    BOOL v14 = &v12[16 * v11];
    *(_OWORD *)uint64_t v13 = *a3;
    uint64_t v7 = v13 + 16;
    uint64_t v16 = (char *)*v4;
    uint64_t v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      uint64_t v15 = (char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = *a3;
    uint64_t v7 = v5 + 1;
  }
  v4[1] = v7;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target_type()
{
}

uint64_t **quasar::artifact::AppLmArtifact::AppLmArtifact(uint64_t **a1, long long *a2, uint64_t a3)
{
  unint64_t v6 = (quasar::artifact::AppLmArtifactGlobals *)quasar::artifact::AppLmArtifactGlobals::get((quasar::artifact::AppLmArtifactGlobals *)a1);
  uint64_t v7 = (quasar::artifact::AppLmArtifactGlobals *)quasar::artifact::AppLmArtifactGlobals::get(v6);
  uint64_t v8 = (const void ***)((char *)v7 + 24);
  uint64_t v9 = quasar::artifact::AppLmArtifactGlobals::get(v7);
  quasar::artifact::Artifact::Artifact((uint64_t)a1, (const void ***)v6, v8, (const void ***)(v9 + 48));
  *a1 = (uint64_t *)&unk_1F0A59150;
  std::string::basic_string[abi:ne180100]<0>(&__p, "version");
  quasar::lm::InsertOrDie<std::map<std::string,std::string>>(a1 + 13, (uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale");
  std::string::basic_string[abi:ne180100]<0>(v11, "_");
  quasar::Locale::toInternalShortIdentifier(a3, (uint64_t)v11);
  quasar::lm::InsertOrDie<std::map<std::string,std::string>>(a1 + 13, (uint64_t)&__p, (long long *)v13);
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "-");
  quasar::Locale::toInternalLongIdentifier(a3, &__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a1 + 22, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  return a1;
}

void sub_1B21866E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  quasar::artifact::Artifact::~Artifact(v27);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::AppLmArtifactGlobals::get(quasar::artifact::AppLmArtifactGlobals *this)
{
  {
    operator new();
  }
  return quasar::artifact::AppLmArtifactGlobals::get(void)::singleton;
}

void sub_1B21867EC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1020C40FA75F7B4);
  _Unwind_Resume(a1);
}

void quasar::lm::InsertOrDie<std::map<std::string,std::string>>(uint64_t **a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = (quasar::lm *)quasar::lm::InsertIfNotPresent<std::map<std::string,std::string>>(a1, (long long *)a2, a3);
  if (v4)
  {
    quasar::lm::nullstream(v4);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v10, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 89);
    Featurizer = (void *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
    unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate key ", 14);
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
  }
}

void sub_1B21868D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::artifact::Artifact::~Artifact(quasar::artifact::Artifact *this)
{
  *(void *)this = &unk_1F0A59308;
  std::__tree<std::string>::destroy((uint64_t)this + 240, *((char **)this + 31));
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  std::__tree<std::string>::destroy((uint64_t)this + 176, *((char **)this + 23));
  std::__tree<std::string>::destroy((uint64_t)this + 152, *((char **)this + 20));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 128, *((void **)this + 17));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__tree<std::string>::destroy((uint64_t)this + 56, *((char **)this + 8));
  std::__tree<std::string>::destroy((uint64_t)this + 32, *((char **)this + 5));
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  uint64_t vars8;

  quasar::artifact::Artifact::~Artifact(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::artifact::AppLmArtifact::AppLmArtifact(quasar::artifact::AppLmArtifactGlobals *a1, uint64_t a2)
{
  uint64_t v4 = (quasar::artifact::AppLmArtifactGlobals *)quasar::artifact::AppLmArtifactGlobals::get(a1);
  uint64_t v5 = (quasar::artifact::AppLmArtifactGlobals *)quasar::artifact::AppLmArtifactGlobals::get(v4);
  unint64_t v6 = (const void ***)((char *)v5 + 24);
  uint64_t v7 = quasar::artifact::AppLmArtifactGlobals::get(v5);
  uint64_t result = quasar::artifact::Artifact::Artifact((uint64_t)a1, (const void ***)v4, v6, (const void ***)(v7 + 48), a2);
  *(void *)a1 = &unk_1F0A59150;
  return result;
}

quasar::artifact::AppLmArtifactLifeCycleStage *quasar::artifact::AppLmArtifact::getLifeCycleStage(quasar::artifact::AppLmArtifact *this)
{
  uint64_t v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)quasar::artifact::AppLmArtifactLifeCycleStages::get(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "language-model-fst");
  BOOL hasContent = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)__p);
  BOOL v4 = hasContent;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(__p, "asr-datapack-version");
      BOOL hasInfo = quasar::artifact::Artifact::hasInfo((uint64_t)this, (const void **)__p);
      if (hasInfo)
      {
        std::string::basic_string[abi:ne180100]<0>(v41, "language-model-arpa");
        BOOL hasInfo = quasar::artifact::Artifact::hasContent((uint64_t)this, v41);
        BOOL v6 = hasInfo;
        if (v42 < 0) {
          operator delete((void *)v41[0]);
        }
      }
      else
      {
        BOOL v6 = 0;
      }
      if (SBYTE7(v25) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v11 = quasar::artifact::AppLmArtifactLifeCycleStages::get((quasar::artifact::AppLmArtifactLifeCycleStages *)hasInfo);
      if (v6)
      {
        uint64_t v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v11 + 320);
        goto LABEL_29;
      }
      goto LABEL_18;
    }
  }
  else if (hasContent)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ngram-count");
  BOOL v7 = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)__p);
  BOOL v8 = v7;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (v8)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer-datapack-version");
      BOOL v9 = quasar::artifact::Artifact::hasInfo((uint64_t)this, (const void **)__p);
      BOOL v10 = v9;
      if (SBYTE7(v25) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v11 = quasar::artifact::AppLmArtifactLifeCycleStages::get((quasar::artifact::AppLmArtifactLifeCycleStages *)v9);
      if (v10)
      {
        uint64_t v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v11 + 256);
        goto LABEL_29;
      }
LABEL_18:
      uint64_t v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v11 + 64);
      goto LABEL_29;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "phrase-count");
  BOOL v12 = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)__p);
  BOOL v13 = v12;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (!v13) {
      goto LABEL_29;
    }
  }
  else if (!v12)
  {
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer-datapack-version");
  BOOL v14 = quasar::artifact::Artifact::hasInfo((uint64_t)this, (const void **)__p);
  BOOL v15 = v14;
  if (SBYTE7(v25) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v16 = quasar::artifact::AppLmArtifactLifeCycleStages::get((quasar::artifact::AppLmArtifactLifeCycleStages *)v14);
  if (v15) {
    uint64_t v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v16 + 192);
  }
  else {
    uint64_t v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v16 + 128);
  }
LABEL_29:
  if (quasar::artifact::AppLmArtifactLifeCycleStage::isValid(v2))
  {
    int isTextNormalized = quasar::artifact::AppLmArtifactLifeCycleStage::isTextNormalized(v2);
    std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer-datapack-version");
    BOOL v18 = quasar::artifact::Artifact::hasInfo((uint64_t)this, (const void **)__p);
    BOOL v19 = isTextNormalized ^ v18;
    if (SBYTE7(v25) < 0)
    {
      operator delete(__p[0]);
      if (!v19) {
        return v2;
      }
    }
    else if (!v19)
    {
      return v2;
    }
    if (quasar::gLogLevel >= 1)
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      *(_OWORD *)std::string __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      float v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Artifact in life cycle stage ", 29);
      int v21 = quasar::artifact::operator<<(v20, (uint64_t)v2);
      char v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" has ", 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"incorrect text normalization meta-data.", 39);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    return (quasar::artifact::AppLmArtifactLifeCycleStage *)(quasar::artifact::AppLmArtifactLifeCycleStages::get((quasar::artifact::AppLmArtifactLifeCycleStages *)v18)
                                                           + 64);
  }
  return v2;
}

void sub_1B2186CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::artifact::AppLmArtifact::loadAppLmData(quasar::artifact::AppLmArtifact *a1, uint64_t a2, uint64_t *a3)
{
  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(a1);
  if (quasar::artifact::AppLmArtifactLifeCycleStage::isValid(LifeCycleStage))
  {
    BOOL v6 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
    int v7 = (int)v6;
    uint64_t v8 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v6);
    if (v7 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v8 + 128)
      || (BOOL v9 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage),
          int v10 = (int)v9,
          uint64_t v11 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v9),
          v10 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v11 + 192)))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "phrase-count");
      quasar::artifact::Artifact::getContentAsStream((uint64_t)a1, (const void **)__p);
      BOOL v19 = 0;
      if (SBYTE7(v21) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_10;
    }
    BOOL v12 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
    int v13 = (int)v12;
    uint64_t v14 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v12);
    if (v13 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v14 + 256))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ngram-count");
      quasar::artifact::Artifact::getContentAsStream((uint64_t)a1, (const void **)__p);
      BOOL v19 = 0;
      if (SBYTE7(v21) < 0) {
        operator delete(__p[0]);
      }
LABEL_10:
      int isTextNormalized = quasar::artifact::AppLmArtifactLifeCycleStage::isTextNormalized(LifeCycleStage);
      uint64_t v16 = *a3;
      if (isTextNormalized)
      {
        if (!v16) {
          operator new();
        }
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v26 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v21 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"A Tokenizer instance was provided when the input data is processed.", 67);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      if (v16) {
        std::make_unique[abi:ne180100]<quasar::AppLmData,quasar::filesystem::Path const&,std::string const&,std::unique_ptr<quasar::TextTokenizer>,quasar::filesystem::Path const&>();
      }
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v26 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v21 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"A Tokenizer instance was not provided when the input data is unprocessed.", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to transform artifact from ", 34);
    BOOL v18 = quasar::artifact::operator<<(v17, (uint64_t)LifeCycleStage);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" stage.", 7);
  }
  else
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Artifact in invalid life cycle stage.");
  }
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B2187220(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a10) {
    quasar::artifact::AppLmArtifact::loadAppLmData(a10);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  uint64_t v24 = *v23;
  uint64_t *v23 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  JUMPOUT(0x1B21872A0);
}

void std::make_unique[abi:ne180100]<quasar::AppLmData,quasar::filesystem::Path const&,std::string const&,std::unique_ptr<quasar::TextTokenizer>,quasar::filesystem::Path const&>()
{
}

void sub_1B21873FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  MEMORY[0x1B3EA8670](v29, 0x10B3C40936E0E45);
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifact::loadCustomPronData(quasar::artifact::AppLmArtifact *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v7, "custom-prons");
  BOOL hasContent = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)&v7.__r_.__value_.__l.__data_);
  BOOL v6 = hasContent;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(v8, "custom-prons");
      quasar::artifact::Artifact::getContentAsStream((uint64_t)this, (const void **)v8);
      quasar::artifact::Artifact::getLocale(this, &v7);
      quasar::CustomPronData::loadFromStream();
    }
  }
  else if (hasContent)
  {
    goto LABEL_3;
  }
  *a2 = 0;
}

void sub_1B21875B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  uint64_t v25 = *(void *)(v23 - 40);
  *(void *)(v23 - 40) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifact::loadOovs(quasar::artifact::AppLmArtifact *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "oov");
  BOOL hasContent = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)__p);
  BOOL v5 = hasContent;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v5)
    {
LABEL_3:
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      operator new();
    }
  }
  else if (hasContent)
  {
    goto LABEL_3;
  }
  *a2 = 0;
}

void sub_1B21878E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v25 - 80);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    BOOL v4 = *(char *)(a2 + 23) < 0;
  }
  else
  {
    BOOL v4 = 0;
    std::string v11 = *(std::string *)a2;
  }
  char v12 = *(unsigned char *)(a2 + 24);
  BOOL v5 = &v11;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if (v4) {
    uint64_t v6 = *(void *)a2;
  }
  else {
    uint64_t v6 = a2;
  }
  int v13 = (char *)v5 + *(void *)(a2 + 32) - v6;
  uint64_t v7 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(a1, (uint64_t)&v11);
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "No such node");
    boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(&v10, v9, a2);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1B2187B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  boost::property_tree::ptree_bad_path::~ptree_bad_path(&a19);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 41) < 0) {
    operator delete(*(void **)(v19 - 64));
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::AppLmArtifact::isAdaptableToSpeechModelVersion(quasar::artifact::AppLmArtifact *a1, const Locale *a2, unsigned __int8 *a3)
{
  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(a1);
  if (!quasar::artifact::AppLmArtifactLifeCycleStage::isValid(LifeCycleStage)) {
    return 0;
  }
  quasar::artifact::Artifact::getLocale(a1, (std::string *)__s1);
  BOOL v7 = quasar::Locale::operator!=((quasar::Locale *)__s1, a2);
  if (SHIBYTE(v36) < 0) {
    operator delete(*((void **)&v35 + 1));
  }
  if (SBYTE7(v35) < 0)
  {
    operator delete(__s1[0]);
    if (v7) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  uint64_t v8 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
  int v9 = (int)v8;
  uint64_t v10 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v8);
  if (v9 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v10 + 320))
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "asr-datapack-version");
    quasar::artifact::Artifact::getInfo((uint64_t)a1, (uint64_t)v51, (std::string *)__s1);
    if ((SBYTE7(v35) & 0x80u) == 0) {
      std::string v11 = (void *)BYTE7(v35);
    }
    else {
      std::string v11 = __s1[1];
    }
    char v12 = (void *)a3[23];
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      char v12 = (void *)*((void *)a3 + 1);
    }
    if (v11 == v12)
    {
      if (v13 >= 0) {
        uint64_t v14 = a3;
      }
      else {
        uint64_t v14 = *(unsigned __int8 **)a3;
      }
      if ((BYTE7(v35) & 0x80) != 0)
      {
        long long v33 = __s1[0];
        BOOL v23 = memcmp(__s1[0], v14, (size_t)__s1[1]) == 0;
LABEL_43:
        operator delete(v33);
        goto LABEL_45;
      }
      if (!BYTE7(v35))
      {
        BOOL v23 = 1;
LABEL_45:
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        return v23;
      }
      uint64_t v15 = BYTE7(v35) - 1;
      uint64_t v16 = __s1;
      do
      {
        int v18 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        int v17 = v18;
        int v20 = *v14++;
        int v19 = v20;
        BOOL v22 = v15-- != 0;
        BOOL v23 = v17 == v19;
      }
      while (v17 == v19 && v22);
    }
    else
    {
      BOOL v23 = 0;
    }
    if ((BYTE7(v35) & 0x80) == 0) {
      goto LABEL_45;
    }
    long long v33 = __s1[0];
    goto LABEL_43;
  }
  if ((quasar::artifact::AppLmArtifactLifeCycleStage::isAdaptableToArbitraryDatapacks(LifeCycleStage) & 1) == 0)
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)__s1 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Unable to determine whether model is adaptable to ", 50);
      int v25 = (char)a3[23];
      if (v25 >= 0) {
        uint64_t v26 = (uint64_t)a3;
      }
      else {
        uint64_t v26 = *(void *)a3;
      }
      if (v25 >= 0) {
        uint64_t v27 = a3[23];
      }
      else {
        uint64_t v27 = *((void *)a3 + 1);
      }
      long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
      long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"in ", 3);
      long long v31 = quasar::artifact::operator<<(v30, (uint64_t)LifeCycleStage);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" life cycle stage.", 18);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__s1);
    }
    return 0;
  }
  return 1;
}

void sub_1B2187DBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 49) < 0) {
    operator delete(*(void **)(v1 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::artifact::AppLmArtifact::isAdaptableToSpeechModelInfo(quasar::artifact::AppLmArtifact *this, const quasar::SpeechModelInfo *a2)
{
  quasar::SpeechModelInfo::getLocale(a2, (std::string *)&v6);
  uint64_t isAdaptableToSpeechModelVersion = quasar::artifact::AppLmArtifact::isAdaptableToSpeechModelVersion(this, &v6, (unsigned __int8 *)a2);
  if (v7 < 0) {
    operator delete(*(void **)&v6.var0.__r_.var0);
  }
  if (*((char *)&v6.var0.__r_.__value_.var0.var1 + 23) < 0) {
    operator delete(v6.var0.__r_.__value_.var0.var1.__data_);
  }
  return isAdaptableToSpeechModelVersion;
}

void sub_1B2187E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::artifact::AppLmArtifact::isAdaptableToSystemConfig(quasar::artifact::AppLmArtifact *this, const quasar::SystemConfig *a2)
{
  SpeechModelInfo = (const quasar::SpeechModelInfo *)quasar::SystemConfig::getSpeechModelInfo(a2);
  return quasar::artifact::AppLmArtifact::isAdaptableToSpeechModelInfo(this, SpeechModelInfo);
}

BOOL quasar::artifact::AppLmArtifact::isMinimalistic(quasar::artifact::AppLmArtifact *this)
{
  LifeCycleStage = (const void ***)quasar::artifact::AppLmArtifact::getLifeCycleStage(this);
  uint64_t v3 = (quasar::artifact::AppLmArtifact *)*((void *)this + 16);
  if (v3 == (quasar::artifact::AppLmArtifact *)((char *)this + 136))
  {
LABEL_9:
    uint64_t v8 = (const void **)*((void *)this + 19);
    int v9 = (const void ***)((char *)this + 160);
    if (v8 == (const void **)((char *)this + 160))
    {
      return 1;
    }
    else
    {
      do
      {
        quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys(LifeCycleStage, &v14);
        uint64_t v10 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v14, v8 + 4);
        std::__tree<std::string>::destroy((uint64_t)&v14, v15[0]);
        BOOL result = v15 != v10;
        if (v15 == v10) {
          break;
        }
        char v12 = (const void **)v8[1];
        if (v12)
        {
          do
          {
            int v13 = (const void ***)v12;
            char v12 = (const void **)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            int v13 = (const void ***)v8[2];
            BOOL v7 = *v13 == v8;
            uint64_t v8 = (const void **)v13;
          }
          while (!v7);
        }
        uint64_t v8 = (const void **)v13;
      }
      while (v13 != v9);
    }
  }
  else
  {
    while (1)
    {
      quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys(LifeCycleStage, &v14);
      BOOL v4 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v14, (const void **)v3 + 4);
      std::__tree<std::string>::destroy((uint64_t)&v14, v15[0]);
      if (v15 == v4) {
        return 0;
      }
      BOOL v5 = (quasar::artifact::AppLmArtifact *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          Locale v6 = v5;
          BOOL v5 = *(quasar::artifact::AppLmArtifact **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          Locale v6 = (quasar::artifact::AppLmArtifact *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
      if (v6 == (quasar::artifact::AppLmArtifact *)((char *)this + 136)) {
        goto LABEL_9;
      }
    }
  }
  return result;
}

void sub_1B218801C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void quasar::artifact::AppLmArtifact::minimize(quasar::artifact::AppLmArtifact **this)
{
  LifeCycleStage = (const void ***)quasar::artifact::AppLmArtifact::getLifeCycleStage((quasar::artifact::AppLmArtifact *)this);
  v18[0] = 0;
  v18[1] = 0;
  int v17 = v18;
  uint64_t v3 = this[16];
  if (v3 != (quasar::artifact::AppLmArtifact *)(this + 17))
  {
    do
    {
      quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys(LifeCycleStage, &v15);
      BOOL v4 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v15, (const void **)v3 + 4);
      std::__tree<std::string>::destroy((uint64_t)&v15, v16[0]);
      if (v16 == v4) {
        quasar::lm::InsertOrDie<std::set<std::string>>((uint64_t **)&v17, (uint64_t)v3 + 32);
      }
      BOOL v5 = (quasar::artifact::AppLmArtifact *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          Locale v6 = v5;
          BOOL v5 = *(quasar::artifact::AppLmArtifact **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          Locale v6 = (quasar::artifact::AppLmArtifact *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != (quasar::artifact::AppLmArtifact *)(this + 17));
  }
  uint64_t v8 = this[19];
  if (v8 != (quasar::artifact::AppLmArtifact *)(this + 20))
  {
    do
    {
      quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys(LifeCycleStage, &v15);
      if (v16 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v15, (const void **)v8 + 4))
      {
        int v9 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v17, (const void **)v8 + 4);
        std::__tree<std::string>::destroy((uint64_t)&v15, v16[0]);
        if (v18 == v9) {
          quasar::lm::InsertOrDie<std::set<std::string>>((uint64_t **)&v17, (uint64_t)v8 + 32);
        }
      }
      else
      {
        std::__tree<std::string>::destroy((uint64_t)&v15, v16[0]);
      }
      uint64_t v10 = (quasar::artifact::AppLmArtifact *)*((void *)v8 + 1);
      if (v10)
      {
        do
        {
          std::string v11 = v10;
          uint64_t v10 = *(quasar::artifact::AppLmArtifact **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          std::string v11 = (quasar::artifact::AppLmArtifact *)*((void *)v8 + 2);
          BOOL v7 = *(void *)v11 == (void)v8;
          uint64_t v8 = v11;
        }
        while (!v7);
      }
      uint64_t v8 = v11;
    }
    while (v11 != (quasar::artifact::AppLmArtifact *)(this + 20));
  }
  char v12 = (uint64_t *)v17;
  if (v17 != v18)
  {
    do
    {
      quasar::artifact::Artifact::clearContent((uint64_t **)this, (const void **)v12 + 4);
      int v13 = (char *)v12[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = (char **)v13;
          int v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (char **)v12[2];
          BOOL v7 = *v14 == (char *)v12;
          char v12 = (uint64_t *)v14;
        }
        while (!v7);
      }
      char v12 = (uint64_t *)v14;
    }
    while (v14 != v18);
  }
  std::__tree<std::string>::destroy((uint64_t)&v17, v18[0]);
}

void sub_1B2188230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void quasar::artifact::AppLmArtifact::getLmHandle(quasar::artifact::AppLmArtifact *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "language-model-fst");
  BOOL hasContent = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)&__p);
  BOOL v6 = hasContent;
  if ((v10 & 0x80000000) == 0)
  {
    if (!hasContent) {
      goto LABEL_8;
    }
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&__p, "language-model-fst");
    quasar::artifact::Artifact::getContentAsStream((uint64_t)this, (const void **)&__p);
    if (v10 < 0) {
      operator delete(__p);
    }
    uint64_t v7 = v11[1];
    std::string::basic_string[abi:ne180100]<0>(v8, "<unspecified>");
    fst::FstReadOptions::FstReadOptions(&__p, v8, 0, 0, 0);
    quasar::readFst(v7, (uint64_t)&__p, v11);
  }
  operator delete(__p);
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  *a2 = 0;
}

void sub_1B2188490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x1B3EA8670](v22, 0x10A1C4054E493B5);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v25 = *(void *)(v23 - 56);
  *(void *)(v23 - 56) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifact::~AppLmArtifact(quasar::artifact::AppLmArtifact *this)
{
  quasar::artifact::Artifact::~Artifact(this);
  JUMPOUT(0x1B3EA8670);
}

quasar::artifact::AppLmArtifactGlobals *quasar::artifact::AppLmArtifactGlobals::AppLmArtifactGlobals(quasar::artifact::AppLmArtifactGlobals *this)
{
  v34[3] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v29, "phrase-count");
  std::string::basic_string[abi:ne180100]<0>(v30, "ngram-count");
  std::string::basic_string[abi:ne180100]<0>(&v31, "language-model-fst");
  std::string::basic_string[abi:ne180100]<0>(v32, "language-model-arpa");
  std::string::basic_string[abi:ne180100]<0>(v33, "oov");
  std::string::basic_string[abi:ne180100]<0>(v34, "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)this, (const void **)&v29.__r_.__value_.__l.__data_, 6);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v34[i + 2]) < 0) {
      operator delete((void *)v34[i]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "asr-datapack-version");
  std::string::basic_string[abi:ne180100]<0>(v30, "tokenizer-datapack-version");
  std::string::basic_string[abi:ne180100]<0>(&v31, "language-model-weight");
  std::set<std::string>::set[abi:ne180100]((uint64_t)this + 24, (const void **)&v29.__r_.__value_.__l.__data_, 3);
  for (uint64_t j = 0; j != -9; j -= 3)
  {
    if (SHIBYTE(v31.__r_.__value_.__r.__words[j + 2]) < 0) {
      operator delete(*(void **)((char *)&v31.__r_.__value_.__l.__data_ + j * 8));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "language-model-fst");
  std::string::basic_string[abi:ne180100]<0>(v27, "asr-datapack-version");
  uint64_t v16 = 0;
  int v17 = 0;
  int v18 = 0;
  v14[0] = &v16;
  LOBYTE(v14[1]) = 0;
  uint64_t v16 = (std::string *)operator new(0x18uLL);
  int v17 = v16;
  int v18 = v16 + 1;
  int v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (long long *)v27, (long long *)&v29, v16);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(&v29, (long long *)v19, (long long **)&v16);
  std::string::basic_string[abi:ne180100]<0>(v14, "language-model-arpa");
  std::string::basic_string[abi:ne180100]<0>(v25, "asr-datapack-version");
  std::string v11 = 0;
  char v12 = 0;
  int v13 = 0;
  v9[0] = &v11;
  LOBYTE(v9[1]) = 0;
  std::string v11 = (std::string *)operator new(0x18uLL);
  char v12 = v11;
  int v13 = v11 + 1;
  char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v13, (long long *)v25, (long long *)v27, v11);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(&v31, (long long *)v14, (long long **)&v11);
  std::string::basic_string[abi:ne180100]<0>(v9, "ngram-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer-datapack-version");
  BOOL v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  long long v21 = (long long **)&v6;
  char v22 = 0;
  BOOL v6 = (std::string *)operator new(0x18uLL);
  uint64_t v7 = v6;
  uint64_t v8 = v6 + 1;
  uint64_t v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v8, (long long *)__p, (long long *)v25, v6);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v33, (long long *)v9, (long long **)&v6);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t)this + 48, (const void **)&v29.__r_.__value_.__l.__data_, 3);
  for (unint64_t k = 0; k != -144; k -= 48)
  {
    long long v21 = (long long **)&v34[k / 8];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    if (SHIBYTE(v33[0].__r_.__value_.__r.__words[k / 8 + 2]) < 0) {
      operator delete(v33[k / 0x18].__r_.__value_.__l.__data_);
    }
  }
  long long v21 = (long long **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  v9[0] = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  v14[0] = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
  if (v28 < 0) {
    operator delete(v27[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  return this;
}

void sub_1B21889AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t *a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  for (uint64_t i = 96; i != -48; i -= 48)
    std::pair<std::string,std::vector<std::string>>::~pair(v57 + i);
  a36 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (a43 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  a21 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  std::__tree<std::string>::destroy(v56, *(char **)(v55 + 32));
  std::__tree<std::string>::destroy(v55, *(char **)(v55 + 8));
  _Unwind_Resume(a1);
}

void sub_1B2188B18()
{
}

void sub_1B2188B24()
{
}

void sub_1B2188B30()
{
}

void sub_1B2188B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1B2188AACLL);
}

void sub_1B2188B64()
{
}

void sub_1B2188B74()
{
}

void sub_1B2188B7C()
{
  uint64_t v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 71) < 0) {
      operator delete(*(void **)(v0 + v1 + 48));
    }
    v1 -= 24;
    if (v1 == -72) {
      JUMPOUT(0x1B2188B04);
    }
  }
}

void sub_1B2188BA8()
{
}

void sub_1B2188BB0()
{
  uint64_t v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 143) < 0) {
      operator delete(*(void **)(v0 + v1 + 120));
    }
    v1 -= 24;
    if (v1 == -144) {
      JUMPOUT(0x1B2188B10);
    }
  }
}

void sub_1B2188BDC()
{
}

void sub_1B2188BE4()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1 - 216) {
      JUMPOUT(0x1B2188B04);
    }
  }
}

void sub_1B2188C0C()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1 - 216) {
      JUMPOUT(0x1B2188B10);
    }
  }
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1B2188CB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::vector<std::string>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  BOOL v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>((uint64_t **)a1, v4, a2, (long long *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1B2188D38(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::InsertIfNotPresent<std::map<std::string,std::string>>(uint64_t **a1, long long *a2, long long *a3)
{
  std::pair<std::string const,std::string>::pair[abi:ne180100]<true,0>(&v7, a2, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, (const void **)&v7.__r_.__value_.__l.__data_, (long long *)&v7);
  char v5 = v4;
  if (v9 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return v5 & 1;
}

void sub_1B2188DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, const void **a2, long long *a3)
{
  char v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    std::string v7 = v5;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B2188EDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void boost::throw_exception<boost::property_tree::ptree_bad_path>(uint64_t a1, uint64_t a2)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::property_tree::ptree_bad_path>::wrapexcept(exception, a1, a2);
}

void sub_1B2188F4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(std::runtime_error *a1, const void **a2, uint64_t a3)
{
  boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(a2, a3, &v4);
  std::runtime_error::runtime_error(a1, &v4);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0A46D58;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1F0A46D80;
  boost::any::any<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>();
}

void sub_1B2189000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::runtime_error::~runtime_error(v15);
  _Unwind_Resume(a1);
}

void boost::property_tree::ptree_bad_path::~ptree_bad_path(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1F0A46D80;
  uint64_t v2 = this[1].__vftable;
  if (v2) {
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  }
  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1F0A46D80;
  uint64_t v2 = this[1].__vftable;
  if (v2) {
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  }
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  *(void *)(a1 + 8) = &unk_1F0A46D80;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::property_tree::ptree_bad_path>::wrapexcept(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 8) = &unk_1F0A46D80;
  uint64_t v6 = (uint64_t)a2[1].__vftable;
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1F0A46940;
  *(void *)(a1 + 8) = &unk_1F0A46970;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = &unk_1F0A46998;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_1B2189264(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::ptree_bad_path>::clone()
{
}

void sub_1B2189480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::ptree_bad_path>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::property_tree::ptree_bad_path>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B2189558(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  *(void *)(a1 + 8) = &unk_1F0A46D80;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  *(void *)a1 = &unk_1F0A46D80;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)(a1 + 24) = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  *(void *)a1 = &unk_1F0A46D80;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1B3EA8670);
}

void non-virtual thunk to'boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  *(a1 - 3) = &unk_1F0A46D80;
  uint64_t v2 = *(a1 - 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
}

{
  uint64_t v2;
  uint64_t vars8;

  *a1 = &unk_1F0A47040;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  *(a1 - 3) = &unk_1F0A46D80;
  uint64_t v2 = *(a1 - 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x1B3EA8670);
}

uint64_t boost::wrapexcept<boost::property_tree::ptree_bad_path>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A46DF8;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F0A46D80;
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F0A47040;
  *(void *)(a1 + 40) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_1F0A46940;
  *(void *)(a1 + 8) = &unk_1F0A46970;
  *(void *)(a1 + 32) = &unk_1F0A46998;
  return a1;
}

void sub_1B2189AE0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v3;
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5) {
    boost::wrapexcept<boost::property_tree::ptree_bad_path>::clone(v5);
  }
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  long long v7 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v6 + 2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, " (");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string v11 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  int v13 = std::string::append(&v16, ")");
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1B2189C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::any::any<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>()
{
}

void sub_1B2189D14(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::holder(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A46F98;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *uint64_t v4 = v5;
  }
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 24);
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v4 = *(_OWORD **)v4;
  }
  *(void *)(a1 + 40) = v4;
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = (const std::string::value_type *)a2;
  }
  else {
    size_t v6 = *(const std::string::value_type **)a2;
  }
  *(void *)(a1 + 40) = (char *)v4 + *((void *)a2 + 4) - (void)v6;
  return a1;
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::~holder(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::~holder(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x1B3EA8670);
}

void *boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::type()
{
}

void boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::clone()
{
}

void sub_1B2189EC4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1B218A04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B218A160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Discount::estimate()
{
  return 1;
}

double WittenBell::discount(WittenBell *this, double a2, double a3, unint64_t a4)
{
  double result = 1.0;
  if (a2 > 0.0)
  {
    double result = 0.0;
    if (*((double *)this + 4) <= a2) {
      return a3 / ((double)a4 + a3);
    }
  }
  return result;
}

uint64_t WittenBell::estimate()
{
  return 1;
}

{
  return 1;
}

double ConstDiscount::discount(ConstDiscount *this, double a2, double a3)
{
  double result = 1.0;
  if (a2 > 0.0)
  {
    double result = 0.0;
    if (*((double *)this + 5) <= a2)
    {
      double v5 = *((double *)this + 4);
      if (v5 <= a2) {
        return (a2 - v5) / a2;
      }
    }
  }
  return result;
}

uint64_t ConstDiscount::estimate()
{
  return 1;
}

uint64_t quasar::rescoring::extractSurfaceFormFromNBestListEntry(_DWORD *a1, uint64_t a2, const char *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  unsigned int v8 = *a1;
  long long v7 = (char *)(a1 + 1);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = 4 * v6;
    do
    {
      uint64_t v10 = *(unsigned int *)v7;
      std::string v11 = (char *)v18 + *(void *)(v18[0] - 24);
      if ((v11[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr))(**((void **)v11 + 5) + 32))(__dst);
        if (v23 >= 1)
        {
          size_t v12 = strlen(a3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a3, v12);
        }
      }
      uint64_t v13 = *(void *)(a2 + 24);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v13 + 48))(v13, &v7[v10]);
      if (v14)
      {
        std::string::basic_string[abi:ne180100](__dst, v14 + 1, *v14);
        std::string v15 = (v22 & 0x80u) == 0 ? __dst : (void **)__dst[0];
        std::string v16 = (v22 & 0x80u) == 0 ? (void *)v22 : __dst[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v15, (uint64_t)v16);
        if ((char)v22 < 0) {
          operator delete(__dst[0]);
        }
      }
      v7 += 4;
      v9 -= 4;
    }
    while (v9);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[1] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v20);
}

void sub_1B218A53C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::rescoring::extractPreItnFromNBestListEntry@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 9u && (uint64_t v3 = v2[4]) != 0)
  {
    uint64_t v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
    v6[0] = &unk_1F0A5A3E8;
    v6[1] = quasar::rescoring::NBestListToken::text;
    v6[2] = 0;
    v6[3] = v6;
    quasar::rescoring::extractSurfaceFormFromNBestListEntry(v4, (uint64_t)v6, " ");
    return std::__function::__value_func<flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::~__value_func[abi:ne180100](v6);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1B218A690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *quasar::rescoring::extractPostItnFromNBestListEntry@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  void v6[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 0xBu && (uint64_t v3 = v2[5]) != 0)
  {
    uint64_t v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
    v6[0] = &unk_1F0A5A3E8;
    v6[1] = quasar::rescoring::NBestListToken::text;
    v6[2] = 0;
    v6[3] = v6;
    quasar::rescoring::extractSurfaceFormFromNBestListEntry(v4, (uint64_t)v6, " ");
    return std::__function::__value_func<flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::~__value_func[abi:ne180100](v6);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1B218A7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<flatbuffers_2_0_6::String const* ()(quasar::rescoring::NBestListToken const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices(uint64_t a1, uint64_t **a2, int a3)
{
  return quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices<std::__wrap_iter<std::vector<quasar::Token> const*>>(a1, *a2, a2[1], a3);
}

uint64_t quasar::rescoring::MultiSourceNBestListBuilder::finalizeAndReturnNBestList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
  int v5 = *(char *)(a1 + 71);
  if (v5 >= 0) {
    uint64_t v6 = (const char *)(a1 + 48);
  }
  else {
    uint64_t v6 = *(const char **)(a1 + 48);
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    unint64_t v7 = *(void *)(a1 + 56);
  }
  int String = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v6, v7);
  uint64_t v9 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  if (v9) {
    uint64_t v10 = *(void **)(a1 + 72);
  }
  else {
    uint64_t v10 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>> const&)::t;
  }
  int v11 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, (uint64_t)v10, v9 >> 2);
  if (a2)
  {
    size_t v12 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
    char v13 = *(unsigned char *)(a2 + 23);
    if (v13 < 0)
    {
      if (*(void *)(a2 + 8)) {
        goto LABEL_13;
      }
    }
    else if (*(unsigned char *)(a2 + 23))
    {
LABEL_13:
      if (v13 >= 0) {
        uint64_t v14 = (const char *)a2;
      }
      else {
        uint64_t v14 = *(const char **)a2;
      }
      if (v13 >= 0) {
        unint64_t v15 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        unint64_t v15 = *(void *)(a2 + 8);
      }
      int v16 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v14, v15);
LABEL_23:
      char v18 = *(unsigned char *)(a2 + 47);
      if (v18 < 0)
      {
        if (*(void *)(a2 + 32)) {
          goto LABEL_25;
        }
      }
      else if (*(unsigned char *)(a2 + 47))
      {
LABEL_25:
        if (v18 >= 0) {
          char v19 = (const char *)(a2 + 24);
        }
        else {
          char v19 = *(const char **)(a2 + 24);
        }
        if (v18 >= 0) {
          unint64_t v20 = *(unsigned __int8 *)(a2 + 47);
        }
        else {
          unint64_t v20 = *(void *)(a2 + 32);
        }
        int v21 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(v12, v19, v20);
        goto LABEL_34;
      }
      int v21 = 0;
LABEL_34:
      *((unsigned char *)v12 + 78) = 1;
      int v22 = *((_DWORD *)v12 + 10);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v12, 6, v21);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v12, 4, v16);
      int v17 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v12, v22);
      goto LABEL_35;
    }
    int v16 = 0;
    goto LABEL_23;
  }
  int v17 = 0;
LABEL_35:
  *((unsigned char *)v4 + 78) = 1;
  int v23 = *((_DWORD *)v4 + 10);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v4, 8, v17);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v4, 6, v11);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>(v4, 4, String);
  int v24 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v4, v23);
  flatbuffers_2_0_6::FlatBufferBuilder::Finish(v4, v24, 0, 0);
  uint64_t result = *(void *)(*(void *)a1 + 56) + **(unsigned int **)(*(void *)a1 + 56);
  *(void *)a1 = 0;
  *(void *)(a1 + 80) = *(void *)(a1 + 72);
  return result;
}

uint64_t *kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x1B3EA8670](v2, 0x1012C40EC159624);
  }
  return a1;
}

uint64_t kaldi::KaldiObjectHolder<quasar::KaldiString>::Value(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "KaldiObjectHolder::Value() called wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void *kaldi::KaldiObjectHolder<quasar::KaldiString>::Clear(void *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    uint64_t result = (void *)MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
    *uint64_t v2 = 0;
  }
  return result;
}

void kaldi::KaldiObjectHolder<quasar::KaldiString>::Read(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  }
  operator new();
}

void sub_1B218ABBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void *quasar::KaldiString::Read(uint64_t a1, void *a2, int a3)
{
  if (a3)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "KaldiString does not support binary format");
    goto LABEL_6;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  int v5 = std::locale::use_facet((const std::locale *)&v8, MEMORY[0x1E4FBA258]);
  unsigned __int8 v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)&v8);
  uint64_t result = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1, v6);
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "Error reading KaldiString from stream.");
LABEL_6:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  return result;
}

void sub_1B218AED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2, uint64_t a3)
{
  unsigned __int8 v6 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)a2 + 1);
  uint64_t v7 = *(void *)a2;
  uint64_t *v6 = *(void *)a2;
  *(void *)((char *)this + *(void *)(v7 - 40)) = *((void *)a2 + 5);
  *(void *)((char *)this + *(void *)(*(void *)this - 48)) = *((void *)a2 + 6);
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = *((void *)a2 + 7);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 1) = &unk_1F0A51768;
  *((unsigned char *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  LOBYTE(v7) = *(unsigned char *)(a3 + 104);
  int v8 = *(_DWORD *)(a3 + 108);
  *((_OWORD *)this + 7) = 0u;
  long long v9 = (uint64_t *)((char *)this + 112);
  *((void *)this + 7) = &unk_1F0A51768;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 104) = v7;
  *((_DWORD *)this + 27) = v8;
  *((_OWORD *)this + 8) = 0u;
  uint64_t v10 = *(void *)(a3 + 112);
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v12 = *v9;
    *long long v9 = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  uint64_t v13 = *(void *)(a3 + 120);
  if (v13)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
    uint64_t v15 = *((void *)this + 15);
    *((void *)this + 15) = v14;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  uint64_t v16 = *(void *)(a3 + 128);
  if (v16)
  {
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
    uint64_t v18 = *((void *)this + 16);
    *((void *)this + 16) = v17;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
  }
  uint64_t v19 = *(void *)(a3 + 136);
  if (v19)
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
    uint64_t v21 = *((void *)this + 17);
    *((void *)this + 17) = v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
  }
  return this;
}

void sub_1B218B254(_Unwind_Exception *a1)
{
  uint64_t v6 = *((void *)v1 + 17);
  *((void *)v1 + 17) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)v1 + 16);
  *((void *)v1 + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)v1 + 15);
  *((void *)v1 + 15) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v4;
  *uint64_t v4 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 18) = &unk_1F0A4FA88;
  *((void *)this + 19) = *((void *)v4 + 1);
  *((_WORD *)this + 80) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 24) = &unk_1F0A4E308;
  int v5 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_1F0A32420);
  v5[18] = (uint64_t)off_1F0A4B800;
  v5[24] = (uint64_t)off_1F0A4B8D0;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *int v5 = (uint64_t)off_1F0A4B6D0;
  v5[1] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v5 + 48) = 0;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  v5[7] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v5 + 96) = 0;
  char v6 = *((unsigned char *)a2 + 104);
  int v7 = *((_DWORD *)a2 + 27);
  *((_OWORD *)v5 + 7) = 0u;
  uint64_t v8 = v5 + 14;
  *((unsigned char *)v5 + 104) = v6;
  *((_DWORD *)v5 + 27) = v7;
  *((_OWORD *)v5 + 8) = 0u;
  uint64_t v9 = *((void *)a2 + 14);
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v11 = *v8;
    *uint64_t v8 = v10;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  uint64_t v12 = *((void *)a2 + 15);
  if (v12)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v14 = *((void *)this + 15);
    *((void *)this + 15) = v13;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  uint64_t v15 = *((void *)a2 + 16);
  if (v15)
  {
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    uint64_t v17 = *((void *)this + 16);
    *((void *)this + 16) = v16;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  uint64_t v18 = *((void *)a2 + 17);
  if (v18)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    uint64_t v20 = *((void *)this + 17);
    *((void *)this + 17) = v19;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
  }
  return this;
}

void sub_1B218B67C(_Unwind_Exception *a1)
{
  uint64_t v8 = *((void *)v1 + 17);
  *((void *)v1 + 17) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)v1 + 16);
  *((void *)v1 + 16) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)v1 + 15);
  *((void *)v1 + 15) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *v6;
  uint64_t *v6 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  quasar::Bitmap::~Bitmap(v1);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
}

void sub_1B218B82C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C406D10C96CLL);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, int a2, int a3, char a4, float a5)
{
  *((void *)this + 18) = &unk_1F0A4FA88;
  *((_DWORD *)this + 38) = a2;
  *((_DWORD *)this + 39) = a3;
  *((_WORD *)this + 80) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 21) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 24) = &unk_1F0A4E308;
  int v7 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_1F0A32420);
  v7[18] = (uint64_t)off_1F0A4B800;
  *int v7 = (uint64_t)off_1F0A4B6D0;
  v7[24] = (uint64_t)off_1F0A4B8D0;
  double result = 0.0;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  v7[1] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v7 + 48) = 0;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  v7[7] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v7 + 96) = 0;
  *((unsigned char *)v7 + 104) = a4;
  *((float *)v7 + 27) = a5;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  return result;
}

void kaldi::nnet1::ScaledDotAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (*(void *)(a1 + 136))
  {
    __n128 v8 = kaldi::CuMatrix<float>::CuMatrix(v9, a3, 111);
    (*(void (**)(void, unsigned char *, uint64_t, uint64_t, __n128))(**(void **)(a1 + 136) + 112))(*(void *)(a1 + 136), v9, a3, a4, v8);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v9);
  }
  if (*(unsigned char *)(a1 + 104)) {
    kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, 1.0, 1.0);
  }
}

void sub_1B218BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

int *kaldi::nnet1::ScaledDotAttention::SetKeyValueStates(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned int *)(a2 + 20);
  if (v6 != *(_DWORD *)(a3 + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Mismatch in number of key and value pairs in ScaledDotAttention, got ", 69);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" keys and ", 10);
    uint64_t v19 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, " values");
    goto LABEL_24;
  }
  int32x2_t v9 = a1[15];
  uint64_t v10 = *(unsigned int *)(a2 + 16);
  if (v9)
  {
    if (v10 == *(_DWORD *)(*(void *)&v9 + 8))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 1, v6, *(unsigned int *)(*(void *)&v9 + 12), 0, 0);
      (*(void (**)(void, uint64_t, int32x2_t *, uint64_t))(**(void **)&a1[15] + 112))(*(void *)&a1[15], a2, a1 + 1, a4);
      goto LABEL_7;
    }
LABEL_20:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Mismatch of key matrix input in ScaledDotAttention, expected ", 61);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
    goto LABEL_24;
  }
  if (v10 != *(_DWORD *)(*(void *)&a1[14] + 12)) {
    goto LABEL_20;
  }
  kaldi::CuMatrix<float>::Resize(a1 + 1, v6, v10, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&a1[1], a2, 111);
LABEL_7:
  int32x2_t v11 = a1[16];
  if (v11)
  {
    if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(*(void *)&v11 + 8))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 7, *(unsigned int *)(a3 + 20), *(unsigned int *)(*(void *)&v11 + 12), 0, 0);
      uint64_t v12 = *(uint64_t (**)(void))(**(void **)&a1[16] + 112);
      return (int *)v12();
    }
    goto LABEL_23;
  }
  int32x2_t v14 = a1[17];
  uint64_t v15 = *(unsigned int *)(a3 + 16);
  if (v14) {
    int v16 = *(_DWORD *)(*(void *)&v14 + 8);
  }
  else {
    int v16 = *(__int32 *)((char *)&a1[1].i32[1] + *(void *)(*(void *)a1 - 40));
  }
  if (v15 != v16)
  {
LABEL_23:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Mismatch of value matrix input in ScaledDotAttention, expected ", 63);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
LABEL_24:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  uint64_t v17 = a1 + 7;
  kaldi::CuMatrix<float>::Resize(v17, *(unsigned int *)(a3 + 20), v15, 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v17, a3, 111);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ClearKeyValueStates(kaldi::nnet1::ScaledDotAttention *this)
{
  long long v9 = 0u;
  long long v8 = 0u;
  int v7 = &unk_1F0A51768;
  char v10 = 0;
  long long v5 = 0u;
  long long v4 = 0u;
  uint64_t v3 = &unk_1F0A51768;
  char v6 = 0;
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 8, (uint64_t)&v7);
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 56, (uint64_t)&v3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v7);
}

void sub_1B218BF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  kaldi::CuMatrix<float>::CuMatrix(v10, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, int32x2_t *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v10, a4);
  kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v10, a1 + 8, a1 + 56, a3, 0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
}

void sub_1B218C014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  kaldi::CuMatrix<float>::CuMatrix(v14, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 20), 0, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v14, a2, CblasNoTrans, a3, CblasTrans, 1.0, 0.0);
  float v12 = *(float *)(a1 + 108);
  if (v12 != 1.0) {
    kaldi::CuMatrixBase<float>::Scale((uint64_t)v14, v12);
  }
  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow((uint64_t)v14, (uint64_t)v14);
  if (a6) {
    kaldi::CuMatrixBase<float>::AddMat(a6, (uint64_t)v14, 111, 1.0, 0.0);
  }
  kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)v14, CblasNoTrans, a4, CblasNoTrans, 1.0, 0.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_1B218C120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(uint64_t **a1)
{
  uint64_t v2 = (const void *)((uint64_t (*)(uint64_t **, uint64_t))(*a1)[11])(a1, 1);
  if (v2) {
  else
  }
    uint64_t v3 = 0;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 14, &v17);
  uint64_t v4 = v17;
  uint64_t v17 = 0;
  uint64_t v5 = v3[14];
  v3[14] = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v6 = v17;
    uint64_t v17 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 15, &v17);
  uint64_t v7 = v17;
  uint64_t v17 = 0;
  uint64_t v8 = v3[15];
  v3[15] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v9 = v17;
    uint64_t v17 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 16, &v17);
  uint64_t v10 = v17;
  uint64_t v17 = 0;
  uint64_t v11 = v3[16];
  v3[16] = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = v17;
    uint64_t v17 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 17, &v17);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  uint64_t v14 = v3[17];
  _OWORD v3[17] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  return (char *)v3 + *(void *)(*v3 - 40);
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(uint64_t **a1)
{
  uint64_t v2 = (const void *)((uint64_t (*)(uint64_t **, uint64_t))(*a1)[11])(a1, 1);
  if (v2) {
  else
  }
    uint64_t v3 = 0;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 14, &v17);
  uint64_t v4 = v17;
  uint64_t v17 = 0;
  uint64_t v5 = v3[14];
  v3[14] = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v6 = v17;
    uint64_t v17 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 15, &v17);
  uint64_t v7 = v17;
  uint64_t v17 = 0;
  uint64_t v8 = v3[15];
  v3[15] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t v9 = v17;
    uint64_t v17 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 16, &v17);
  uint64_t v10 = v17;
  uint64_t v17 = 0;
  uint64_t v11 = v3[16];
  v3[16] = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = v17;
    uint64_t v17 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 17, &v17);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  uint64_t v14 = v3[17];
  _OWORD v3[17] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  return (char *)v3 + *(void *)(*v3 - 40);
}

char *virtual thunk to'kaldi::nnet1::ScaledDotAttention::CopyQuantized16Bit(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((uint64_t **)((char *)this + *(void *)(*(void *)this - 32)));
}

uint64_t kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  kaldi::WriteToken(v15, 0, "<AddQuery>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  if (*((void *)this + 14))
  {
    kaldi::WriteToken(v15, 0, "<QueryTransform>");
    (*(void (**)(void **__return_ptr))(**((void **)this + 14) + 64))(&__p);
    uint64_t v3 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v4 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v3, v4);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 15))
  {
    kaldi::WriteToken(v15, 0, "<KeyTransform>");
    (*(void (**)(void **__return_ptr))(**((void **)this + 15) + 64))(&__p);
    uint64_t v5 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v6 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v6);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 16))
  {
    kaldi::WriteToken(v15, 0, "<ValueTransform>");
    (*(void (**)(void **__return_ptr))(**((void **)this + 16) + 64))(&__p);
    uint64_t v7 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v8 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v7, v8);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 17))
  {
    kaldi::WriteToken(v15, 0, "<OutputTransform>");
    (*(void (**)(void **__return_ptr))(**((void **)this + 17) + 64))(&__p);
    uint64_t v9 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v10 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v9, v10);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v17);
}

void sub_1B218C9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::Info((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::ScaledDotAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v40, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Reading ScaledDotAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v40);
  }
  long long __p = 0uLL;
  uint64_t v39 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              if (kaldi::Peek(a2, a3) != 60) {
                goto LABEL_107;
              }
              kaldi::ReadToken(a2, a3, (uint64_t)&__p);
              if (SHIBYTE(v39) < 0) {
                break;
              }
              p_p = &__p;
              switch(HIBYTE(v39))
              {
                case 7:
                  if (__p != 1633899324 || *(_DWORD *)((char *)&__p + 3) != 1046834273) {
                    goto LABEL_110;
                  }
                  goto LABEL_51;
                case 0xA:
                  if ((void)__p != 0x726575516464413CLL || WORD4(__p) != 15993) {
                    goto LABEL_110;
                  }
                  goto LABEL_81;
                case 0xC:
                  goto LABEL_102;
                case 0xE:
                  goto LABEL_67;
                case 0x10:
                  if ((void)__p == 0x725479726575513CLL && *((void *)&__p + 1) == 0x3E6D726F66736E61) {
                    goto LABEL_94;
                  }
                  if (HIBYTE(v39) == 14)
                  {
LABEL_67:
                    if ((void)__p != 0x6E61725479654B3CLL || *(void *)((char *)&__p + 6) != 0x3E6D726F66736E61) {
                      goto LABEL_98;
                    }
                    goto LABEL_72;
                  }
                  if (HIBYTE(v39) != 16
                    || ((void)__p == 0x725465756C61563CLL
                      ? (BOOL v19 = *((void *)&__p + 1) == 0x3E6D726F66736E61)
                      : (BOOL v19 = 0),
                        !v19))
                  {
LABEL_98:
                    if (HIBYTE(v39) == 12)
                    {
                      p_p = &__p;
                      goto LABEL_102;
                    }
                    goto LABEL_110;
                  }
                  break;
                case 0x11:
                  if ((void)__p != 0x5474757074754F3CLL
                    || *((void *)&__p + 1) != 0x6D726F66736E6172
                    || v39 != 62)
                  {
                    goto LABEL_98;
                  }
                  goto LABEL_90;
                default:
                  goto LABEL_110;
              }
LABEL_63:
              uint64_t v20 = kaldi::nnet1::Component::Read(a2, a3, a4);
              uint64_t v21 = *(void *)(a1 + 128);
              *(void *)(a1 + 128) = v20;
              if (v21)
              {
                (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
                uint64_t v20 = *(void *)(a1 + 128);
              }
              if (!v20)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"reading value transform failed", 30);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
              }
            }
            uint64_t v10 = *((void *)&__p + 1);
            if (*((void *)&__p + 1) != 7) {
              break;
            }
            if (*(_DWORD *)__p != 1633899324 || *(_DWORD *)(__p + 3) != 1046834273)
            {
              uint64_t v10 = *((void *)&__p + 1);
              goto LABEL_24;
            }
LABEL_51:
            kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 108));
          }
          if (*((void *)&__p + 1) != 10) {
            break;
          }
          if (*(void *)__p != 0x726575516464413CLL || *(_WORD *)(__p + 8) != 15993) {
            break;
          }
LABEL_81:
          kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 104));
        }
LABEL_24:
        if (v10 != 16) {
          goto LABEL_30;
        }
        if (*(void *)__p != 0x725479726575513CLL || *(void *)(__p + 8) != 0x3E6D726F66736E61) {
          break;
        }
LABEL_94:
        uint64_t v30 = kaldi::nnet1::Component::Read(a2, a3, a4);
        uint64_t v31 = *(void *)(a1 + 112);
        *(void *)(a1 + 112) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
          uint64_t v30 = *(void *)(a1 + 112);
        }
        if (!v30)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"reading query transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
        }
      }
      uint64_t v10 = *((void *)&__p + 1);
LABEL_30:
      if (v10 != 14) {
        goto LABEL_36;
      }
      if (*(void *)__p != 0x6E61725479654B3CLL || *(void *)(__p + 6) != 0x3E6D726F66736E61) {
        break;
      }
LABEL_72:
      uint64_t v23 = kaldi::nnet1::Component::Read(a2, a3, a4);
      uint64_t v24 = *(void *)(a1 + 120);
      *(void *)(a1 + 120) = v23;
      if (v24)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
        uint64_t v23 = *(void *)(a1 + 120);
      }
      if (!v23)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
      }
    }
    uint64_t v10 = *((void *)&__p + 1);
LABEL_36:
    if (v10 == 16)
    {
      if (*(void *)__p == 0x725465756C61563CLL && *(void *)(__p + 8) == 0x3E6D726F66736E61) {
        goto LABEL_63;
      }
      uint64_t v10 = *((void *)&__p + 1);
    }
    if (v10 != 17) {
      goto LABEL_100;
    }
    BOOL v16 = *(void *)__p == 0x5474757074754F3CLL && *(void *)(__p + 8) == 0x6D726F66736E6172;
    if (!v16 || *(unsigned char *)(__p + 16) != 62) {
      break;
    }
LABEL_90:
    uint64_t v28 = kaldi::nnet1::Component::Read(a2, a3, a4);
    uint64_t v29 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v28;
    if (v29)
    {
      (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      uint64_t v28 = *(void *)(a1 + 136);
    }
    if (!v28)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"reading output transform failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
  }
  uint64_t v10 = *((void *)&__p + 1);
LABEL_100:
  if (v10 != 12) {
    goto LABEL_110;
  }
  p_p = (long long *)__p;
LABEL_102:
  uint64_t v32 = *(void *)p_p;
  int v33 = *((_DWORD *)p_p + 2);
  if (v32 != 0x6E6F706D6F432F3CLL || v33 != 1047817829)
  {
LABEL_110:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Unrecognized token ", 19);
    if (v39 >= 0) {
      long long v36 = &__p;
    }
    else {
      long long v36 = (long long *)__p;
    }
    if (v39 >= 0) {
      uint64_t v37 = HIBYTE(v39);
    }
    else {
      uint64_t v37 = *((void *)&__p + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
LABEL_107:
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1B218D07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::ScaledDotAttention::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  kaldi::WriteToken(a2, a3, "<AddQuery>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 104));
  kaldi::WriteToken(a2, a3, "<Scale>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (*(void *)(a1 + 112))
  {
    kaldi::WriteToken(a2, a3, "<QueryTransform>");
    kaldi::nnet1::Component::Write(*(void *)(a1 + 112), a2, a3, a4);
  }
  if (*(void *)(a1 + 120))
  {
    kaldi::WriteToken(a2, a3, "<KeyTransform>");
    kaldi::nnet1::Component::Write(*(void *)(a1 + 120), a2, a3, a4);
  }
  if (*(void *)(a1 + 128))
  {
    kaldi::WriteToken(a2, a3, "<ValueTransform>");
    kaldi::nnet1::Component::Write(*(void *)(a1 + 128), a2, a3, a4);
  }
  if (*(void *)(a1 + 136))
  {
    kaldi::WriteToken(a2, a3, "<OutputTransform>");
    kaldi::nnet1::Component::Write(*(void *)(a1 + 136), a2, a3, a4);
  }
  return kaldi::WriteToken(a2, a3, "</Component>");
}

void *virtual thunk to'kaldi::nnet1::ScaledDotAttention::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ScaledDotAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, const kaldi::nnet1::MultiHeadAttention *a2, uint64_t a3)
{
  double result = kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (const kaldi::nnet1::MultiHeadAttention *)((char *)a2 + 8), a3);
  uint64_t v6 = *(void *)a2;
  *(void *)double result = *(void *)a2;
  *(void *)((char *)result + *(void *)(v6 - 40)) = *((void *)a2 + 9);
  *(void *)((char *)result + *(void *)(*(void *)result - 48)) = *((void *)a2 + 10);
  *(void *)((char *)result + *(void *)(*(void *)result - 56)) = *((void *)a2 + 11);
  *((_DWORD *)result + 36) = *(_DWORD *)(a3 + 144);
  return result;
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, const kaldi::nnet1::MultiHeadAttention *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 19) = &unk_1F0A4FA88;
  *((void *)this + 20) = *((void *)v4 + 1);
  *((_WORD *)this + 84) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 25) = &unk_1F0A4E308;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (const kaldi::nnet1::ScaledDotAttention *)&off_1F0A323C0, (uint64_t)a2);
  *((void *)this + 19) = off_1F0A4B430;
  *(void *)this = off_1F0A4B300;
  *((void *)this + 25) = off_1F0A4B500;
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  return this;
}

void sub_1B218D4D0(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MultiHeadAttention::Copy(kaldi::nnet1::MultiHeadAttention *this)
{
}

void sub_1B218D598(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40ECDADF9FLL);
  _Unwind_Resume(a1);
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, BOOL a3, int a4, float a5, int a6)
{
  *((void *)this + 19) = &unk_1F0A4FA88;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 22) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 25) = &unk_1F0A4E308;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, (uint64_t *)&off_1F0A323C0, a2, a3, a5, a4 != 0);
  *((void *)this + 19) = off_1F0A4B430;
  *(void *)this = off_1F0A4B300;
  *((void *)this + 25) = off_1F0A4B500;
  *((_DWORD *)this + 36) = a6;
  return this;
}

void sub_1B218D6D8(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)v28, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, _DWORD *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v28, a4);
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    int v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    int v13 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      uint64_t v14 = 4 * v11;
      *(void *)((char *)&v27[2] + 4) = *(void *)&v28[5];
      LODWORD(v27[2]) = v13;
      HIDWORD(v27[3]) = v10 + v28[7];
      v27[4] = v29;
      v27[1] = *(void *)&v28[2] + v14;
      v27[0] = &unk_1F0A472A0;
      uint64_t v15 = *(void *)(a1 + 16) + v14;
      int v16 = v10 + *(_DWORD *)(a1 + 36);
      uint64_t v17 = *(void *)(a1 + 40);
      LODWORD(v26[2]) = v13;
      *(void *)((char *)&v26[2] + 4) = *(void *)(a1 + 28);
      HIDWORD(v26[3]) = v16;
      v26[4] = v17;
      v26[1] = v15;
      v26[0] = &unk_1F0A472A0;
      uint64_t v18 = *(void *)(a1 + 64) + v14;
      int v19 = v10 + *(_DWORD *)(a1 + 84);
      uint64_t v20 = *(void *)(a1 + 88);
      LODWORD(v25[2]) = v13;
      *(void *)((char *)&v25[2] + 4) = *(void *)(a1 + 76);
      HIDWORD(v25[3]) = v19;
      v25[4] = v20;
      v25[0] = &unk_1F0A472A0;
      v25[1] = v18;
      uint64_t v21 = *(void *)(a3 + 8) + v14;
      LODWORD(v14) = v10 + *(_DWORD *)(a3 + 28);
      uint64_t v22 = *(void *)(a3 + 32);
      LODWORD(v24[2]) = v13;
      *(void *)((char *)&v24[2] + 4) = *(void *)(a3 + 20);
      HIDWORD(v24[3]) = v14;
      v24[4] = v22;
      v24[0] = &unk_1F0A472A0;
      v24[1] = v21;
      kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v27, (uint64_t)v26, (uint64_t)v25, (uint64_t)v24, 0);
      v24[0] = &unk_1F0A472A0;
      memset(&v24[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v24);
      v25[0] = &unk_1F0A472A0;
      memset(&v25[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v25);
      v26[0] = &unk_1F0A472A0;
      memset(&v26[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
      v27[0] = &unk_1F0A472A0;
      memset(&v27[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
      ++v12;
      v11 += v13;
      v10 -= v13;
    }
    while (v12 < *(int *)(a1 + 144));
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
}

void sub_1B218DA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  kaldi::WriteToken(v8, 0, "<NumberHeads>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  kaldi::nnet1::ScaledDotAttention::Info((uint64_t *)__p, this);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v10);
}

void sub_1B218DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  return kaldi::nnet1::MultiHeadAttention::Info((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::MultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Reading MultiHeadAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8);
  }
  kaldi::ExpectToken(a2, a3, "<NumberHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 144);
  kaldi::nnet1::ScaledDotAttention::ReadData(a1, a2, a3, a4);
}

void sub_1B218DD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::MultiHeadAttention::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  kaldi::WriteToken(a2, a3, "<NumberHeads>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::nnet1::ScaledDotAttention::WriteData(a1, a2, a3, a4);
}

void *virtual thunk to'kaldi::nnet1::MultiHeadAttention::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::MultiHeadAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, const kaldi::nnet1::SupervisedMultiHeadAttention *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 25) = &unk_1F0A4FA88;
  *((void *)this + 26) = *((void *)v4 + 1);
  *((_WORD *)this + 108) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 31) = &unk_1F0A4E308;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (const kaldi::nnet1::MultiHeadAttention *)&off_1F0A32538, (uint64_t)a2);
  *((void *)this + 25) = off_1F0A4E488;
  *(void *)this = off_1F0A4E358;
  *((void *)this + 31) = off_1F0A4E558;
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 152, (char *)a2 + 152, 111);
  return this;
}

void sub_1B218DF28(_Unwind_Exception *a1)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(v2, (uint64_t *)&off_1F0A32540);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::SupervisedMultiHeadAttention::Copy(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
}

void sub_1B218E014(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C403997DC88);
  _Unwind_Resume(a1);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, BOOL a3, int a4, float a5, int a6, int a7)
{
  *((void *)this + 25) = &unk_1F0A4FA88;
  *((_DWORD *)this + 52) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 28) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 31) = &unk_1F0A4E308;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (uint64_t *)&off_1F0A32538, a2, a3, a5, a4, a6);
  *((void *)this + 25) = off_1F0A4E488;
  *(void *)this = off_1F0A4E358;
  *((void *)this + 31) = off_1F0A4E558;
  *((_DWORD *)this + 37) = a7;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 19) = &unk_1F0A51768;
  *((unsigned char *)this + 192) = 0;
  return this;
}

void sub_1B218E17C(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 112) + 12);
  if (v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
  kaldi::CuMatrix<float>::CuMatrix(v31, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(void, uint64_t, int32x2_t *, uint64_t))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, v31, a4);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 152), v32, *(unsigned int *)(a1 + 28), 0, 0);
  kaldi::CuMatrixBase<float>::SetZero(a1 + 152);
  uint64_t v26 = a1 + 152;
  int v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    int v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    int v13 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      uint64_t v14 = 4 * v11;
      *(void *)((char *)&v30[2] + 4) = v32;
      LODWORD(v30[2]) = v13;
      HIDWORD(v30[3]) = v10 + v33;
      v30[4] = v34;
      v30[0] = &unk_1F0A472A0;
      v30[1] = *(void *)&v31[1] + v14;
      uint64_t v15 = *(void *)(a1 + 16) + v14;
      int v16 = v10 + *(_DWORD *)(a1 + 36);
      uint64_t v17 = *(void *)(a1 + 40);
      LODWORD(v29[2]) = v13;
      *(void *)((char *)&v29[2] + 4) = *(void *)(a1 + 28);
      HIDWORD(v29[3]) = v16;
      v29[4] = v17;
      v29[0] = &unk_1F0A472A0;
      v29[1] = v15;
      uint64_t v18 = *(void *)(a1 + 64) + v14;
      int v19 = v10 + *(_DWORD *)(a1 + 84);
      uint64_t v20 = *(void *)(a1 + 88);
      LODWORD(v28[2]) = v13;
      *(void *)((char *)&v28[2] + 4) = *(void *)(a1 + 76);
      HIDWORD(v28[3]) = v19;
      v28[4] = v20;
      v28[0] = &unk_1F0A472A0;
      v28[1] = v18;
      uint64_t v21 = *(void *)(a3 + 8) + v14;
      LODWORD(v14) = v10 + *(_DWORD *)(a3 + 28);
      uint64_t v22 = *(void *)(a3 + 32);
      LODWORD(v27[2]) = v13;
      *(void *)((char *)&v27[2] + 4) = *(void *)(a3 + 20);
      HIDWORD(v27[3]) = v14;
      v27[4] = v22;
      v27[0] = &unk_1F0A472A0;
      v27[1] = v21;
      if (v12 >= *(int *)(a1 + 148)) {
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27, 0);
      }
      else {
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27, v26);
      }
      v27[0] = &unk_1F0A472A0;
      memset(&v27[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
      v28[0] = &unk_1F0A472A0;
      memset(&v28[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v28);
      v29[0] = &unk_1F0A472A0;
      memset(&v29[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v29);
      v30[0] = &unk_1F0A472A0;
      memset(&v30[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v30);
      ++v12;
      v11 += v13;
      v10 -= v13;
    }
    while (v12 < *(int *)(a1 + 144));
  }
  int v23 = *(_DWORD *)(a1 + 148);
  if (v23 > 1)
  {
    float v24 = 1.0 / (double)v23;
    kaldi::CuMatrixBase<float>::Scale(v26, v24);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v31);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  kaldi::WriteToken(v8, 0, "<SupervisedHeads>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  kaldi::nnet1::MultiHeadAttention::Info((uint64_t *)__p, this);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v3, v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v10);
}

void sub_1B218E744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::Info((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Reading SupervisedMultiHeadAttention component", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8);
  }
  kaldi::ExpectToken(a2, a3, "<SupervisedHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 148);
  kaldi::nnet1::MultiHeadAttention::ReadData(a1, a2, a3, a4);
}

void sub_1B218E848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  kaldi::WriteToken(a2, a3, "<SupervisedHeads>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::nnet1::MultiHeadAttention::WriteData(a1, a2, a3, a4);
}

void *virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::SelfAttention::SelfAttention(uint64_t a1, void *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*a2 - 40);
  *(void *)(a1 + 80) = &unk_1F0A4FA88;
  *(void *)(a1 + 88) = *((void *)v4 + 1);
  *(_WORD *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)a1 = &unk_1F0A4E160;
  *(void *)(a1 + 128) = &unk_1F0A4E308;
  uint64_t v5 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)a1, (uint64_t *)&off_1F0A32300);
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = (uint64_t)&unk_1F0A49B30;
  *((_DWORD *)v5 + 12) = 1;
  v5[9] = 0;
  v5[10] = (uint64_t)off_1F0A49A38;
  *uint64_t v5 = (uint64_t)off_1F0A49868;
  v5[16] = (uint64_t)off_1F0A49B08;
  v5[1] = (uint64_t)&unk_1F0A49920;
  v5[2] = 0;
  v5[7] = 0;
  uint64_t v6 = v5 + 7;
  v5[8] = 0;
  uint64_t v7 = a2[7];
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v9 = *v6;
    uint64_t *v6 = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  uint64_t v10 = a2[8];
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
    uint64_t v12 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v11;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  int v13 = (char *)a2[9];
  if (v13)
  {
    uint64_t v14 = (const void *)(*(uint64_t (**)(char *))(*(void *)&v13[*(void *)(*(void *)v13 - 40)] + 16))(&v13[*(void *)(*(void *)v13 - 40)]);
    if (v14) {
    else
    }
      uint64_t v15 = 0;
    uint64_t v16 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  return a1;
}

void sub_1B218EC28(_Unwind_Exception *a1)
{
  uint64_t v7 = *((void *)v1 + 9);
  *((void *)v1 + 9) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)v1 + 8);
  *((void *)v1 + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *v5;
  *uint64_t v5 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  quasar::Bitmap::~Bitmap(v1);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::PropagateFnc(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *((_DWORD *)a1 + 12);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v64, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", which contains ", 17);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" frames each from ", 18);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v64);
  }
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  uint64_t v11 = a1[2] + 48 * (int)a4;
  uint64_t v12 = a1[7];
  unsigned int v42 = a4;
  if (v12) {
    int v13 = (unsigned int *)(v12 + 12);
  }
  else {
    int v13 = (unsigned int *)((char *)a1 + *(void *)(*a1 - 40) + 8);
  }
  unsigned int v41 = *v13;
  uint64_t v14 = a1[8];
  if (v14)
  {
    uint64_t v15 = (unsigned int *)(v14 + 12);
    uint64_t v16 = *a1;
  }
  else
  {
    uint64_t v16 = *a1;
    uint64_t v15 = (unsigned int *)((char *)a1 + *(void *)(*a1 - 40) + 8);
  }
  unsigned int v38 = *v15;
  unsigned int v17 = *v15 + v41;
  (*(void (**)(uint64_t *))(v16 + 88))(a1);
  long long v43 = a1;
  int v39 = v17;
  kaldi::CuMatrix<float>::CuMatrix(&v64, *((unsigned int *)a1 + 12), ((int)(*(_DWORD *)(a2 + 20) * v17) / v7 + *(_DWORD *)(v11 + 16)), 0, 0, 0);
  int v18 = *(_DWORD *)(v11 + 16);
  *(void *)((char *)&v63[1] + 4) = v67;
  LODWORD(v63[1]) = v18;
  HIDWORD(v63[2]) = v68;
  v63[3] = v69;
  uint64_t v62 = &unk_1F0A472A0;
  v63[0] = v65;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v62, v11, 111);
  uint64_t v62 = &unk_1F0A472A0;
  memset(v63, 0, sizeof(v63));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v62);
  if (v7 >= 1)
  {
    int v19 = 0;
    for (int i = 0; i != v7; ++i)
    {
      int v21 = v19 + *(_DWORD *)(a2 + 20);
      unsigned int v22 = *(_DWORD *)(a2 + 24);
      uint64_t v23 = *(void *)(a2 + 8) + 4 * (int)(v22 * i);
      int v24 = *(_DWORD *)(a2 + 28) - v22 * i;
      uint64_t v25 = *(void *)(a2 + 32);
      LODWORD(v63[1]) = *(_DWORD *)(a2 + 16);
      HIDWORD(v63[1]) = v21;
      v63[2] = __PAIR64__(v24, v22);
      v63[3] = v25;
      uint64_t v62 = &unk_1F0A472A0;
      v63[0] = v23;
      if (v7 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v62, v22 * v7);
      }
      int v26 = v19 + *(_DWORD *)(a3 + 20);
      unsigned int v27 = *(_DWORD *)(a3 + 24);
      uint64_t v28 = *(void *)(a3 + 8) + 4 * (int)(v27 * i);
      int v29 = *(_DWORD *)(a3 + 28) - v27 * i;
      uint64_t v30 = *(void *)(a3 + 32);
      DWORD2(v60) = *(_DWORD *)(a3 + 16);
      HIDWORD(v60) = v26;
      *(void *)&long long v61 = __PAIR64__(v29, v27);
      *((void *)&v61 + 1) = v30;
      long long v59 = &unk_1F0A472A0;
      *(void *)&long long v60 = v28;
      if (v7 != 1) {
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v59, v27 * v7);
      }
      *(void *)&long long v54 = v65 + 4 * HIDWORD(v67) * i;
      uint64_t v53 = &unk_1F0A472D0;
      *((void *)&v54 + 1) = v66;
      *(void *)&long long v55 = v69;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v56, (uint64_t)&v53, (int)v66 / v39);
      *((void *)&v54 + 1) = __PAIR64__(HIDWORD(v57), v41);
      long long v55 = v58;
      uint64_t v53 = &unk_1F0A472A0;
      *(void *)&long long v54 = v57;
      *(void *)&long long v51 = v57 + 4 * (int)v41;
      *((void *)&v51 + 1) = __PAIR64__(HIDWORD(v57), v38);
      LODWORD(v52) = v58;
      DWORD1(v52) = DWORD1(v58) - v41;
      *((void *)&v52 + 1) = *((void *)&v58 + 1);
      *((void *)&v49 + 1) = *((void *)&v58 + 1);
      long long v50 = &unk_1F0A472A0;
      int v31 = (HIDWORD(v57) - HIDWORD(v63[1])) * v58;
      *(void *)&long long v48 = v57 + 4 * v31;
      *((void *)&v48 + 1) = __PAIR64__(HIDWORD(v63[1]), v41);
      LODWORD(v49) = v58;
      DWORD1(v49) = DWORD1(v58) - v31;
      long long v47 = &unk_1F0A472A0;
      uint64_t v32 = v43[7];
      if (v32) {
        (*(void (**)(uint64_t, void **, void **, void))(*(void *)v32 + 112))(v32, &v62, &v47, v42);
      }
      else {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v47, (uint64_t)&v62, 111);
      }
      int v33 = v52 * (HIDWORD(v51) - HIDWORD(v63[1]));
      *((void *)&v45 + 1) = __PAIR64__(HIDWORD(v63[1]), DWORD2(v51));
      LODWORD(v46) = v52;
      DWORD1(v46) = DWORD1(v52) - v33;
      *((void *)&v46 + 1) = *((void *)&v52 + 1);
      long long v44 = &unk_1F0A472A0;
      *(void *)&long long v45 = v51 + 4 * v33;
      uint64_t v34 = v43[8];
      if (v34)
      {
        uint64_t v35 = v42;
        (*(void (**)(uint64_t, void **, void **, void))(*(void *)v34 + 112))(v34, &v62, &v44, v42);
      }
      else
      {
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v44, (uint64_t)&v62, 111);
        uint64_t v35 = v42;
      }
      (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v43[9] + 24))(v43[9], &v53, &v50, v35);
      uint64_t v36 = v43[9] + *(void *)(*(void *)v43[9] - 40);
      (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v36 + 112))(v36, &v62, &v59, v35);
      long long v44 = &unk_1F0A472A0;
      long long v45 = 0u;
      long long v46 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
      long long v47 = &unk_1F0A472A0;
      long long v48 = 0u;
      long long v49 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v47);
      long long v50 = &unk_1F0A472A0;
      long long v51 = 0u;
      long long v52 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v50);
      uint64_t v53 = &unk_1F0A472A0;
      long long v54 = 0u;
      long long v55 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
      uint64_t v56 = &unk_1F0A472A0;
      long long v57 = 0u;
      long long v58 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
      long long v59 = &unk_1F0A472A0;
      long long v60 = 0u;
      long long v61 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v59);
      uint64_t v62 = &unk_1F0A472A0;
      memset(v63, 0, sizeof(v63));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v62);
      --v19;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v43[9] + 32))(v43[9]);
  (*(void (**)(uint64_t *, int32x2_t *, void))(*v43 + 128))(v43, &v64, v42);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v64);
}

void sub_1B218F484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  *long long v59 = 0u;
  v59[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a54);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SelfAttention::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return kaldi::nnet1::SelfAttention::PropagateFnc((void *)((char *)a1 + *(void *)(*a1 - 128)), a2, a3, a4);
}

uint64_t kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  if (*((void *)this + 7))
  {
    kaldi::WriteToken(v13, 0, "<KeyTransform>");
    (*(void (**)(void **__return_ptr))(**((void **)this + 7) + 64))(&__p);
    uint64_t v2 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v3 = (v12 & 0x80u) == 0 ? v12 : v11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v2, v3);
    if ((char)v12 < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)this + 8))
  {
    kaldi::WriteToken(v13, 0, "<ValueTransform>");
    (*(void (**)(void **__return_ptr))(**((void **)this + 8) + 64))(&__p);
    uint64_t v4 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v5 = (v12 & 0x80u) == 0 ? v12 : v11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v4, v5);
    if ((char)v12 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    (*(void (**)(void **__return_ptr))(*(void *)((char *)v6 + *(void *)(*v6 - 40)) + 64))(&__p);
    int v7 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v8 = (v12 & 0x80u) == 0 ? v12 : v11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v7, v8);
    if ((char)v12 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v13[1] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v15);
}

void sub_1B218F860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::Info((kaldi::nnet1::SelfAttention *)((char *)this
                                                                         + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::SelfAttention::CopyQuantized8Bit(kaldi::nnet1::SelfAttention *this)
{
}

void sub_1B218FAE4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40975FDFB3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *v3;
    if (v5) {
      uint64_t result = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v5);
    }
    else {
      uint64_t result = (*(uint64_t (**)(uint64_t *))(v4 + 16))(v3);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void kaldi::nnet1::SelfAttention::CopyQuantized16Bit(kaldi::nnet1::SelfAttention *this)
{
}

void sub_1B218FDD4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40975FDFB3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *v3;
    if (v5) {
      uint64_t result = kaldi::nnet1::Quantizable16BitComponentItf::CopyQuantized(v5);
    }
    else {
      uint64_t result = (*(uint64_t (**)(uint64_t *))(v4 + 16))(v3);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a2 = result;
  return result;
}

void virtual thunk to'kaldi::nnet1::SelfAttention::CopyQuantized16Bit(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::CopyQuantized16Bit((kaldi::nnet1::SelfAttention *)((char *)this
                                                                                + *(void *)(*(void *)this - 32)));
}

void kaldi::nnet1::SelfAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Reading SelfAttention component", 31);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
  long long __p = 0uLL;
  uint64_t v30 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
    {
      char v8 = HIBYTE(v30);
      goto LABEL_61;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p);
    char v8 = HIBYTE(v30);
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      break;
    }
    uint64_t v13 = *((void *)&__p + 1);
    if (*((void *)&__p + 1) == 14
      && (*(void *)__p == 0x6E61725479654B3CLL ? (BOOL v14 = *(void *)(__p + 6) == 0x3E6D726F66736E61) : (BOOL v14 = 0), v14))
    {
LABEL_12:
      uint64_t v11 = kaldi::nnet1::Component::Read(a2, a3, a4);
      uint64_t v12 = a1[7];
      a1[7] = v11;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        uint64_t v11 = a1[7];
      }
      if (!v11)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
      }
    }
    else
    {
      if (*((void *)&__p + 1) != 16) {
        goto LABEL_27;
      }
      if (*(void *)__p == 0x725465756C61563CLL && *(void *)(__p + 8) == 0x3E6D726F66736E61)
      {
LABEL_49:
        uint64_t v21 = kaldi::nnet1::Component::Read(a2, a3, a4);
        uint64_t v22 = a1[8];
        a1[8] = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          uint64_t v21 = a1[8];
        }
        if (!v21)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"reading value transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
      }
      else
      {
        uint64_t v13 = *((void *)&__p + 1);
LABEL_27:
        if (v13 != 11) {
          goto LABEL_54;
        }
        if (*(void *)__p != 0x69746E657474413CLL || *(void *)(__p + 3) != 0x3E6E6F69746E6574)
        {
          uint64_t v13 = *((void *)&__p + 1);
LABEL_54:
          if (v13 == 12)
          {
            uint64_t v9 = (long long *)__p;
            goto LABEL_56;
          }
LABEL_66:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
          int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unrecognized token ", 19);
          if (v30 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = (long long *)__p;
          }
          if (v30 >= 0) {
            uint64_t v28 = HIBYTE(v30);
          }
          else {
            uint64_t v28 = *((void *)&__p + 1);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)p_p, v28);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
LABEL_43:
        int v19 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
        if (v19) {
        uint64_t v20 = a1[9];
        }
        a1[9] = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
          int v19 = (const void *)a1[9];
        }
        if (!v19)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"failed to read attention component in SelfAttention", 51);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
      }
    }
  }
  uint64_t v9 = &__p;
  switch(HIBYTE(v30))
  {
    case 0xB:
      goto LABEL_38;
    case 0xC:
      goto LABEL_56;
    case 0xE:
      if ((void)__p != 0x6E61725479654B3CLL || *(void *)((char *)&__p + 6) != 0x3E6D726F66736E61) {
        goto LABEL_66;
      }
      goto LABEL_12;
    case 0x10:
      if ((void)__p == 0x725465756C61563CLL && *((void *)&__p + 1) == 0x3E6D726F66736E61) {
        goto LABEL_49;
      }
      if (HIBYTE(v30) == 11)
      {
LABEL_38:
        if ((void)__p != 0x69746E657474413CLL || *(void *)((char *)&__p + 3) != 0x3E6E6F69746E6574) {
          goto LABEL_66;
        }
        goto LABEL_43;
      }
      if (HIBYTE(v30) != 12) {
        goto LABEL_66;
      }
      uint64_t v9 = &__p;
LABEL_56:
      uint64_t v23 = *(void *)v9;
      int v24 = *((_DWORD *)v9 + 2);
      if (v23 != 0x6E6F706D6F432F3CLL || v24 != 1047817829) {
        goto LABEL_66;
      }
LABEL_61:
      if (v8 < 0) {
        operator delete((void *)__p);
      }
      return;
    default:
      goto LABEL_66;
  }
}

void sub_1B2190358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::SelfAttention::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *kaldi::nnet1::SelfAttention::WriteData(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a1[7])
  {
    kaldi::WriteToken(a2, a3, "<KeyTransform>");
    kaldi::nnet1::Component::Write(a1[7], a2, a3, a4);
  }
  if (a1[8])
  {
    kaldi::WriteToken(a2, a3, "<ValueTransform>");
    kaldi::nnet1::Component::Write(a1[8], a2, a3, a4);
  }
  kaldi::WriteToken(a2, a3, "<Attention>");
  kaldi::nnet1::Component::Write(a1[9] + *(void *)(*(void *)a1[9] - 40), a2, a3, a4);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

void *virtual thunk to'kaldi::nnet1::SelfAttention::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::SelfAttention::WriteData((void *)((char *)a1 + *(void *)(*a1 - 120)), a2, a3, a4);
}

uint64_t *kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *non-virtual thunk to'kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1) {
    uint64_t v2 = (int *)(v1 + 12);
  }
  else {
    uint64_t v2 = (int *)((char *)this + *(void *)(*(void *)this - 40) + 8);
  }
  int v3 = *v2;
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    uint64_t v5 = (_DWORD *)(v4 + 12);
  }
  else {
    uint64_t v5 = (_DWORD *)((char *)this + *(void *)(*(void *)this - 40) + 8);
  }
  return (*v5 + v3);
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    uint64_t v2 = (int *)(v1 + 12);
  }
  else {
    uint64_t v2 = (int *)((char *)this + *(void *)(*((void *)this - 1) - 40));
  }
  int v3 = *v2;
  uint64_t v4 = *((void *)this + 7);
  if (v4) {
    uint64_t v5 = (_DWORD *)(v4 + 12);
  }
  else {
    uint64_t v5 = (_DWORD *)((char *)this + *(void *)(*((void *)this - 1) - 40));
  }
  return (*v5 + v3);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(void *a1, void *a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 160))(a1);
  uint64_t v6 = a2[1];
  int v7 = (int32x2_t *)a1[2];
  v7[4] = (int32x2_t)a3;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if (((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "ResetHistoryState for SelfAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v10);
      }
    }
  }
  long long v12 = 0u;
  long long v11 = 0u;
  int32x2_t v10 = (int32x2_t)&unk_1F0A51768;
  char v13 = 0;
  kaldi::CuMatrix<float>::operator=(v7, &v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v10);
}

void sub_1B21906AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::SelfAttention::ResetHistoryState((void *)(a1 - 8), a2, a3);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  int v3 = (void *)*((void *)this + 2);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 6;
    uint64_t v5 = v2 - 6;
    uint64_t v6 = v2 - 6;
    do
    {
      uint64_t v7 = *v6;
      v6 -= 6;
      (*(void (**)(void *))(v7 + 16))(v5);
      v4 -= 6;
      BOOL v8 = v5 == v3;
      uint64_t v5 = v6;
    }
    while (!v8);
  }
  *((void *)this + 3) = v3;
  uint64_t v9 = *(uint64_t (**)(kaldi::nnet1::SelfAttention *))(*(void *)this + 160);
  return v9(this);
}

uint64_t non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::ResetHistoryState((kaldi::nnet1::SelfAttention *)((char *)this - 8));
}

int *kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, int32x2_t *a2)
{
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(*(void *)(a1 + 16) + 20), *(unsigned int *)(*(void *)(a1 + 16) + 16), 1, 0);
  uint64_t v4 = *(void *)(a1 + 16);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v4, 111);
}

int *non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, int32x2_t *a2)
{
  return kaldi::nnet1::SelfAttention::GetHistoryState(a1 - 8, a2);
}

void kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, void *a2, int a3)
{
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 16) + 16), 1);
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(int *)(v6 + 20) >= 1)
  {
    uint64_t v7 = *(void *)(v6 + 8) + 4 * *(_DWORD *)(v6 + 24) * a3;
    unsigned int v8 = *(_DWORD *)(v6 + 16);
    uint64_t v9 = *(void *)(v6 + 32);
    v10[1] = v7;
    v10[0] = &unk_1F0A472D0;
    uint64_t v10[2] = v8;
    v10[3] = v9;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v10);
  }
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, void *a2, int a3)
{
}

int *kaldi::nnet1::SelfAttention::SetHistoryState(int32x2_t **a1, uint64_t a2)
{
  ((void (*)(int32x2_t **))(*a1)[20])(a1);
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v4 = (int *)a1[2];
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v4, a2, 111);
}

int *non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2)
{
  return kaldi::nnet1::SelfAttention::SetHistoryState((int32x2_t **)(a1 - 8), a2);
}

void kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  uint64_t v7 = *(int32x2_t **)(a1 + 16);
  if ((int)v6 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v7, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v7, *(unsigned int *)(a1 + 48), v6, 2, 0);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
    unsigned int v10 = *(_DWORD *)(v8 + 16);
    uint64_t v11 = *(void *)(v8 + 32);
    v12[1] = v9;
    v12[0] = &unk_1F0A472D0;
    v12[2] = v10;
    v12[3] = v11;
    kaldi::CuVectorBase<float>::CopyFromVec(v12, a2);
  }
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
}

void kaldi::nnet1::AverageAttention::AverageAttention(kaldi::nnet1::AverageAttention *this, const kaldi::nnet1::AverageAttention *a2)
{
  uint64_t v2 = (char *)a2 + *(void *)(*(void *)a2 - 40);
  *((void *)this + 9) = &unk_1F0A4FA88;
  *((void *)this + 10) = *((void *)v2 + 1);
  *((_WORD *)this + 44) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *(void *)this = &unk_1F0A4E160;
  *((void *)this + 15) = &unk_1F0A4E308;
  int v3 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, (uint64_t *)&off_1F0A32340);
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = (uint64_t)&unk_1F0A49B30;
  *((_DWORD *)v3 + 12) = 1;
  v3[9] = (uint64_t)off_1F0A4A5D8;
  v3[15] = (uint64_t)off_1F0A4A6A8;
  *int v3 = (uint64_t)off_1F0A4A408;
  v3[1] = (uint64_t)&unk_1F0A4A4C0;
  v3[7] = 0;
  v3[8] = 0;
  operator new();
}

void sub_1B2190C54(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v7, 0x10B0C4082B712C9);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v6, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  quasar::Bitmap::~Bitmap(v1);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AverageAttention::PropagateFnc(void *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", which contains ", 17);
    unsigned int v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" frames each from ", 18);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41);
  }
  (*(void (**)(void *))(*a1 + 160))(a1);
  long long v12 = (int32x2_t *)(a1[2] + 48 * (int)a4);
  __int32 v13 = v12[2].i32[1];
  if (!v13)
  {
    uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
    kaldi::CuMatrix<float>::Resize(v12, v8, v14, 0, 0);
    __int32 v13 = v12[2].i32[1];
  }
  int32x2_t v15 = v12[4];
  *(int32x2_t *)&long long v39 = v12[1];
  DWORD2(v39) = 1;
  HIDWORD(v39) = v13;
  *(int32x2_t *)&long long v40 = v12[3];
  *((int32x2_t *)&v40 + 1) = v15;
  unsigned int v38 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::Add((uint64_t)&v38, 1.0);
  float v16 = *(float *)v39;
  int v17 = kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)a1[7]);
  int v18 = v12[3].i32[1] - 1;
  int32x2_t v19 = v12[4];
  v37[1] = *(void *)&v12[1] + 4;
  LODWORD(v37[2]) = v17;
  *(int32x2_t *)((char *)&v37[2] + 4) = *(int32x2_t *)((char *)v12 + 20);
  HIDWORD(v37[3]) = v18;
  v37[4] = v19;
  v37[0] = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)v37, a2, 111, 1.0, 1.0);
  kaldi::CuMatrix<float>::CuMatrix(v41, v37, 111);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v41, 1.0 / v16);
  long long v35 = 0u;
  long long v34 = 0u;
  int32x2_t v33 = (int32x2_t)&unk_1F0A51768;
  char v36 = 0;
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)a1[7], v41, &v33, a4);
  if (a1[8])
  {
    kaldi::CuMatrix<float>::CuMatrix(&v28, *(unsigned int *)(a2 + 20), (v42 + *(_DWORD *)(a2 + 16)), 0, 0, 0);
    DWORD2(v26[0]) = *(_DWORD *)(a2 + 16);
    *(void *)((char *)v26 + 12) = v30;
    DWORD1(v26[1]) = v31;
    *((void *)&v26[1] + 1) = v32;
    int32x2_t v25 = (int32x2_t)&unk_1F0A472A0;
    *(void *)&v26[0] = v29;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, a2, 111);
    int32x2_t v25 = (int32x2_t)&unk_1F0A472A0;
    memset(v26, 0, sizeof(v26));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
    uint64_t v20 = *(int *)(a2 + 16);
    DWORD2(v26[0]) = v42;
    *(void *)((char *)v26 + 12) = v30;
    DWORD1(v26[1]) = v31 - v20;
    *((void *)&v26[1] + 1) = v32;
    int32x2_t v25 = (int32x2_t)&unk_1F0A472A0;
    *(void *)&v26[0] = v29 + 4 * v20;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, (uint64_t)&v33, 111);
    int32x2_t v25 = (int32x2_t)&unk_1F0A472A0;
    memset(v26, 0, sizeof(v26));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
    memset(v26, 0, sizeof(v26));
    int32x2_t v25 = (int32x2_t)&unk_1F0A51768;
    char v27 = 0;
    kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)a1[8], &v28, &v25, 0);
    LODWORD(v24[1]) = *(_DWORD *)(a2 + 16);
    *(void *)((char *)&v24[1] + 4) = *(void *)((char *)v26 + 12);
    HIDWORD(v24[2]) = DWORD1(v26[1]);
    v24[3] = *((void *)&v26[1] + 1);
    uint64_t v23 = &unk_1F0A472A0;
    v24[0] = *(void *)&v26[0];
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v23, a2);
    uint64_t v23 = &unk_1F0A472A0;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    uint64_t v21 = *(int *)(a2 + 16);
    LODWORD(v24[1]) = v42;
    *(void *)((char *)&v24[1] + 4) = *(void *)((char *)v26 + 12);
    HIDWORD(v24[2]) = DWORD1(v26[1]) - v21;
    v24[3] = *((void *)&v26[1] + 1);
    uint64_t v23 = &unk_1F0A472A0;
    v24[0] = *(void *)&v26[0] + 4 * v21;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v23, (uint64_t)&v33);
    uint64_t v23 = &unk_1F0A472A0;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    LODWORD(v24[1]) = *(_DWORD *)(a2 + 16);
    *(void *)((char *)&v24[1] + 4) = *(void *)((char *)v26 + 12);
    HIDWORD(v24[2]) = DWORD1(v26[1]);
    v24[3] = *((void *)&v26[1] + 1);
    uint64_t v23 = &unk_1F0A472A0;
    v24[0] = *(void *)&v26[0];
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v23, 111);
    uint64_t v23 = &unk_1F0A472A0;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    uint64_t v22 = *(int *)(a2 + 16);
    LODWORD(v24[1]) = v42;
    *(void *)((char *)&v24[1] + 4) = *(void *)((char *)v26 + 12);
    HIDWORD(v24[2]) = DWORD1(v26[1]) - v22;
    v24[3] = *((void *)&v26[1] + 1);
    uint64_t v23 = &unk_1F0A472A0;
    v24[0] = *(void *)&v26[0] + 4 * v22;
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)&v23, 111, 1.0, 1.0);
    uint64_t v23 = &unk_1F0A472A0;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v25);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v28);
  }
  else
  {
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v33, 111);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v33);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v41);
  v37[0] = &unk_1F0A472A0;
  memset(&v37[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v37);
  unsigned int v38 = &unk_1F0A472A0;
  long long v39 = 0u;
  long long v40 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v38);
}

void sub_1B21912F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  *int v42 = 0u;
  v42[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a14);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a20);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a26);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a42);
  *long long v44 = 0u;
  v44[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a32);
  *long long v43 = 0u;
  v43[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a37);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::PropagateFnc(void *a1, uint64_t a2, int *a3, uint64_t a4)
{
}

uint64_t kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::Nnet **this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  kaldi::WriteToken(v10, 0, "<AverageFfn>");
  kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[7]);
  if ((v9 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = v8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v3);
  if ((char)v9 < 0) {
    operator delete(__p);
  }
  if (this[8])
  {
    kaldi::WriteToken(v10, 0, "<Gate>");
    kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[8]);
    uint64_t v4 = (v9 & 0x80u) == 0 ? &__p : (void **)__p;
    uint64_t v5 = (v9 & 0x80u) == 0 ? v9 : v8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    if ((char)v9 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v12);
}

void sub_1B21915D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::Info((kaldi::nnet1::Nnet **)((char *)this + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::AverageAttention::CopyQuantized8Bit(kaldi::nnet1::AverageAttention *this)
{
}

void sub_1B2191694(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AverageAttention::CopyQuantized16Bit(kaldi::nnet1::AverageAttention *this)
{
}

void sub_1B2191728(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::CopyQuantized16Bit(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::CopyQuantized16Bit((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                      + *(void *)(*(void *)this
                                                                                                  - 32)));
}

void kaldi::nnet1::AverageAttention::ReadData(uint64_t a1, uint64_t *a2, char a3)
{
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading AverageAttention component", 34);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v6 = (kaldi::nnet1::Nnet **)(a1 + 64);
  uint64_t v7 = (kaldi::nnet1::Nnet **)(a1 + 56);
  uint64_t v28 = 0;
  if (kaldi::Peek(a2, a3) != 60) {
    goto LABEL_43;
  }
  kaldi::ReadToken(a2, a3, (uint64_t)&v26);
  if (SHIBYTE(v28) < 0)
  {
    uint64_t v9 = v27;
    if (v27 == 6)
    {
      if (*(_DWORD *)v26 == 1952532284 && *((_WORD *)v26 + 2) == 15973) {
        goto LABEL_30;
      }
      uint64_t v9 = v27;
    }
    else if (v27 == 12 && *(void *)v26 == 0x656761726576413CLL && *((_DWORD *)v26 + 2) == 1047422534)
    {
      goto LABEL_12;
    }
    if (v9 != 19) {
      goto LABEL_61;
    }
    __int32 v13 = (uint64_t *)v26;
    goto LABEL_35;
  }
  if (HIBYTE(v28) == 6)
  {
    if (v26 != 1952532284 || WORD2(v26) != 15973)
    {
LABEL_61:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unrecognized token ", 19);
      if (v28 >= 0) {
        uint64_t v22 = &v26;
      }
      else {
        uint64_t v22 = v26;
      }
      if (v28 >= 0) {
        uint64_t v23 = HIBYTE(v28);
      }
      else {
        uint64_t v23 = v27;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
LABEL_30:
    operator new();
  }
  if (HIBYTE(v28) == 12)
  {
    if (v26 != (void *)0x656761726576413CLL || v27 != 1047422534) {
      goto LABEL_61;
    }
LABEL_12:
    operator new();
  }
  if (HIBYTE(v28) != 19) {
    goto LABEL_61;
  }
  __int32 v13 = (uint64_t *)&v26;
LABEL_35:
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  uint64_t v16 = *(uint64_t *)((char *)v13 + 11);
  if (v14 != 0x6761726576412F3CLL || v15 != 0x69746E6574744165 || v16 != 0x3E6E6F69746E6574) {
    goto LABEL_61;
  }
LABEL_43:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"done", 4);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*v7, &__p);
  int32x2_t v19 = __p;
  if (__p != v30)
  {
    BOOL v20 = 1;
    if (!__p) {
      goto LABEL_53;
    }
LABEL_52:
    uint64_t v30 = v19;
    operator delete(v19);
    goto LABEL_53;
  }
  if (*v6)
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents(*v6, &v24);
    BOOL v20 = v24 != v25;
    if (v24)
    {
      int32x2_t v25 = v24;
      operator delete(v24);
    }
    int32x2_t v19 = __p;
    if (__p) {
      goto LABEL_52;
    }
  }
  else
  {
    BOOL v20 = 0;
    if (__p) {
      goto LABEL_52;
    }
  }
LABEL_53:
  if (v20)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Recurrent neural networks are not supported inside the average attention component.", 83);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  kaldi::nnet1::Nnet::OutputDim(*v7);
  if (*v6)
  {
    kaldi::nnet1::Nnet::InputDim(*v6);
    kaldi::nnet1::Nnet::InputDim(*v7);
    kaldi::nnet1::Nnet::OutputDim(*v6);
    kaldi::nnet1::Nnet::OutputDim(*v7);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v26);
  }
}

void sub_1B2191C70()
{
  MEMORY[0x1B3EA8670](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x1B2191CACLL);
}

void sub_1B2191CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::ReadData(void *a1, uint64_t *a2, char a3)
{
}

void *kaldi::nnet1::AverageAttention::WriteData(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  kaldi::WriteToken(a2, a3, "<AverageFfn>");
  kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 56), a2, a3, a4);
  if (*(void *)(a1 + 64))
  {
    kaldi::WriteToken(a2, a3, "<Gate>");
    kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 64), a2, a3, a4);
  }
  return kaldi::WriteToken(a2, a3, "</AverageAttention>");
}

void *virtual thunk to'kaldi::nnet1::AverageAttention::WriteData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::AverageAttention::WriteData((uint64_t)a1 + *(void *)(*a1 - 120), a2, a3, a4);
}

uint64_t *kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *non-virtual thunk to'kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  return kaldi::nnet1::Nnet::InputDim(this[7]) + 1;
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  return kaldi::nnet1::Nnet::InputDim(this[6]) + 1;
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(void *a1, void *a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 160))(a1);
  uint64_t v6 = a2[1];
  uint64_t v7 = (int32x2_t *)a1[2];
  v7[4] = (int32x2_t)a3;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if (((*(void *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "ResetHistoryState for AverageAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v10);
      }
    }
  }
  long long v12 = 0u;
  long long v11 = 0u;
  int32x2_t v10 = (int32x2_t)&unk_1F0A51768;
  char v13 = 0;
  kaldi::CuMatrix<float>::operator=(v7, &v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v10);
}

void sub_1B2191F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(uint64_t a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::AverageAttention::ResetHistoryState((void *)(a1 - 8), a2, a3);
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  uint64_t v3 = (void *)*((void *)this + 2);
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 6;
    uint64_t v5 = v2 - 6;
    uint64_t v6 = v2 - 6;
    do
    {
      uint64_t v7 = *v6;
      v6 -= 6;
      (*(void (**)(void *))(v7 + 16))(v5);
      v4 -= 6;
      BOOL v8 = v5 == v3;
      uint64_t v5 = v6;
    }
    while (!v8);
  }
  *((void *)this + 3) = v3;
  uint64_t v9 = *(uint64_t (**)(kaldi::nnet1::AverageAttention *))(*(void *)this + 160);
  return v9(this);
}

uint64_t non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::ResetHistoryState((kaldi::nnet1::AverageAttention *)((char *)this - 8));
}

int *kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, int32x2_t *a2)
{
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(*(void *)(a1 + 16) + 20), *(unsigned int *)(*(void *)(a1 + 16) + 16), 0, 0);
  uint64_t v4 = *(void *)(a1 + 16);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v4, 111);
}

int *non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, int32x2_t *a2)
{
  return kaldi::nnet1::AverageAttention::GetHistoryState(a1 - 8, a2);
}

void kaldi::nnet1::AverageAttention::GetHistoryState(void *a1, void *a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
  kaldi::CuVector<float>::Resize((uint64_t)a2, v6, 0);
  uint64_t v7 = a1[2];
  if (*(int *)(v7 + 20) >= 1)
  {
    uint64_t v8 = *(void *)(v7 + 8) + 4 * *(_DWORD *)(v7 + 24) * a3;
    unsigned int v9 = *(_DWORD *)(v7 + 16);
    uint64_t v10 = *(void *)(v7 + 32);
    v11[1] = v8;
    v11[0] = &unk_1F0A472D0;
    void v11[2] = v9;
    v11[3] = v10;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v11);
  }
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, void *a2, int a3)
{
}

int *kaldi::nnet1::AverageAttention::SetHistoryState(int32x2_t **a1, uint64_t a2)
{
  ((void (*)(int32x2_t **))(*a1)[20])(a1);
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v4 = (int *)a1[2];
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v4, a2, 111);
}

int *non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2)
{
  return kaldi::nnet1::AverageAttention::SetHistoryState((int32x2_t **)(a1 - 8), a2);
}

void kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 160))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  uint64_t v7 = *(int32x2_t **)(a1 + 16);
  if ((int)v6 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v7, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v7, *(unsigned int *)(a1 + 48), v6, 2, 0);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
    unsigned int v10 = *(_DWORD *)(v8 + 16);
    uint64_t v11 = *(void *)(v8 + 32);
    v12[1] = v9;
    v12[0] = &unk_1F0A472D0;
    v12[2] = v10;
    v12[3] = v11;
    kaldi::CuVectorBase<float>::CopyFromVec(v12, a2);
  }
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 192));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::ScaledDotAttention *)((char *)this + 144));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(kaldi::nnet1::ScaledDotAttention *, void))(*(void *)this + 88))(this, 0);
}

uint64_t kaldi::nnet1::ScaledDotAttention::GetType(kaldi::nnet1::ScaledDotAttention *this)
{
  return 285;
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x1B3EA8670);
}

uint64_t virtual thunk to'kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(char *, void))(*(void *)((char *)this + *(void *)(*(void *)this - 32))
                                                   + 88))((char *)this + *(void *)(*(void *)this - 32), 0);
}

uint64_t virtual thunk to'kaldi::nnet1::ScaledDotAttention::GetType(kaldi::nnet1::ScaledDotAttention *this)
{
  return 285;
}

void virtual thunk to'kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(void *a1)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, (uint64_t *)&off_1F0A323C0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 200));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::MultiHeadAttention *)((char *)this + 152));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::nnet1::MultiHeadAttention::GetType(kaldi::nnet1::MultiHeadAttention *this)
{
  return 286;
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x1B3EA8670);
}

uint64_t virtual thunk to'kaldi::nnet1::MultiHeadAttention::GetType(kaldi::nnet1::MultiHeadAttention *this)
{
  return 286;
}

void virtual thunk to'kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(void *a1)
{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)a1
                                                                                           + *(void *)(*a1 - 24)));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 248));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + 200));
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::GetType(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return 287;
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x1B3EA8670);
}

uint64_t virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::GetType(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return 287;
}

void virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(void *a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 128));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SelfAttention *)((char *)this + 80));
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
}

void sub_1B219284C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40975FDFB3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::GetType(kaldi::nnet1::SelfAttention *this)
{
  return 288;
}

void non-virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this - 8));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
}

uint64_t virtual thunk to'kaldi::nnet1::SelfAttention::GetType(kaldi::nnet1::SelfAttention *this)
{
  return 288;
}

void virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(void *a1)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)a1 + *(void *)(*a1 - 24)));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 120));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::AverageAttention *)((char *)this + 72));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::AverageAttention::Copy(kaldi::nnet1::AverageAttention *this)
{
}

void sub_1B2192A9C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AverageAttention::GetType(kaldi::nnet1::AverageAttention *this)
{
  return 289;
}

void non-virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(void *)(*(void *)this - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(void *)(*(void *)this - 24)));
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'kaldi::nnet1::AverageAttention::Copy(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::Copy((kaldi::nnet1::AverageAttention *)((char *)this
                                                                        + *(void *)(*(void *)this - 32)));
}

uint64_t virtual thunk to'kaldi::nnet1::AverageAttention::GetType(kaldi::nnet1::AverageAttention *this)
{
  return 289;
}

void virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(void *a1)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)a1
                                                                                     + *(void *)(*a1 - 24)));
}

{
  uint64_t vars8;

  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)a1
                                                                                     + *(void *)(*a1 - 24)));
  JUMPOUT(0x1B3EA8670);
}

double kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2, int a3, BOOL a4, float a5, char a6)
{
  uint64_t v9 = kaldi::nnet1::AttentionBaseInferenceComponent::AttentionBaseInferenceComponent((uint64_t *)this, a2 + 1);
  uint64_t v10 = *a2;
  *uint64_t v9 = *a2;
  *(uint64_t *)((char *)v9 + *(void *)(v10 - 40)) = a2[5];
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 56)) = a2[7];
  double result = 0.0;
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  v9[1] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v9 + 48) = 0;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  v9[7] = (uint64_t)&unk_1F0A51768;
  *((unsigned char *)v9 + 96) = 0;
  *((unsigned char *)v9 + 104) = a6;
  *((float *)v9 + 27) = a5;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  return result;
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  uint64_t v4 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 56);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 8);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, uint64_t *a2, int a3, BOOL a4, float a5, int a6, int a7)
{
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(this, a2 + 1, a3, a4, a5, a6 != 0);
  uint64_t v9 = *a2;
  *(void *)uint64_t v10 = *a2;
  *(void *)(v10 + *(void *)(v9 - 40)) = a2[9];
  *(void *)(v10 + *(void *)(*(void *)v10 - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[10];
  *(void *)(v10 + *(void *)(*(void *)v10 - 56)) = a2[11];
  *(_DWORD *)(v10 + 144) = a7;
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 40)) = a2[13];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[14];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[15];
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 152);
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, a2 + 2);
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  *((void *)this + 1) = &unk_1F0A49920;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::SelfAttention *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = a2[5];
  *(void *)((char *)this + *(void *)(*(void *)this - 4kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8)) = a2[6];
  *(void *)((char *)this + *(void *)(*(void *)this - 56)) = a2[7];
  *((void *)this + 1) = &unk_1F0A4A4C0;
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 8, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 7, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::AverageAttention *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

void ResidualAdaptiveNgram::ResidualAdaptiveNgram(ResidualAdaptiveNgram *this, Vocab *a2, int a3)
{
  Ngram::Ngram(this, a2, a3);
  *uint64_t v3 = &unk_1F0A34218;
}

uint64_t ResidualAdaptiveNgram::computeEta2<unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    Array<unsigned int>::alloc();
  }
  return 0;
}

void sub_1B2193A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  std::locale::~locale((std::locale *)(v3 - 160));
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t *)va);
  if (v18) {
    MEMORY[0x1B3EA8630](v18, 0x1000C8052888210);
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(va1);
  uint64_t v5 = *(void *)(v3 - 176);
  if (v5) {
    MEMORY[0x1B3EA8630](v5, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

unint64_t ResidualAdaptiveNgram::residualAdapt2<unsigned long>(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1[3];
  uint64_t v9 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(v8);
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v8 + 176))(v8, *v9)) {
    return 0;
  }
  int v25 = 0;
  int v26 = a4;
  uint64_t v27 = 0;
  int v28 = 0;
  if (a4) {
    Array<unsigned int>::alloc();
  }
  if (*(double *)(a3 + 8) == 0.0) {
    goto LABEL_27;
  }
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v24, a2 + 160, v27 - 4 * v25, 0, 0);
  unint64_t v10 = 0;
  while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)v24))
  {
    LOBYTE(v29) = 0;
    inserted = Trie<unsigned int,unsigned long>::insertTrie((void *)(a2 + 160), (unsigned int *)(v27 - 4 * v25), &v29);
    TrieIter2<unsigned int,unsigned long>::TrieIter2(v23, inserted, &v30, 1, 0);
    while (1)
    {
      uint64_t v12 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v23);
      if (!v12) {
        break;
      }
      if (!(*(unsigned int (**)(void, void))(*(void *)a1[3] + 176))(a1[3], v30))
      {
        uint64_t v13 = *(void *)(v12 + 8);
        if (v13) {
          v10 += v13;
        }
      }
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v23);
  }
  if (v10)
  {
    TrieIter2<unsigned int,BOnode>::TrieIter2(v23, a1 + 19, v27 - 4 * v25, 0, 0);
    while (1)
    {
      uint64_t v14 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v23);
      if (!v14) {
        break;
      }
      LHashIter<unsigned int,float>::LHashIter(&v30, v14 + 16, 0);
      unsigned int v29 = 0;
      while (1)
      {
        uint64_t v15 = (float *)LHashIter<unsigned int,float>::next((uint64_t)&v30, &v29);
        if (!v15) {
          break;
        }
        if (!(*(unsigned int (**)(void, void))(*(void *)a1[3] + 176))(a1[3], v29))
        {
          Count = (unint64_t *)NgramCounts<unsigned long>::findCount(a2, (unsigned int *)(v27 - 4 * v25), v29);
          double v17 = 0.0;
          double v18 = 0.0;
          if (*v15 != -INFINITY) {
            double v18 = exp(*v15 * 2.30258509);
          }
          double v19 = *(double *)(a3 + 8);
          if (Count) {
            double v17 = (double)*Count;
          }
          float v20 = log10(v18 + v19 * v17 / (double)v10);
          float v21 = log10(v19 + 1.0);
          *uint64_t v15 = v20 - v21;
        }
      }
      LHashIter<unsigned int,double>::~LHashIter((uint64_t)&v30);
    }
    (*(void (**)(void *, void))(*a1 + 512))(a1, 0);
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v23);
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v24);
LABEL_27:
    unint64_t v10 = 1;
    goto LABEL_29;
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(v24);
LABEL_29:
  if (v27) {
    MEMORY[0x1B3EA8630](v27, 0x1000C8052888210);
  }
  return v10;
}

void sub_1B2194494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a35) {
    MEMORY[0x1B3EA8630](a35, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

void ResidualAdaptiveNgram::~ResidualAdaptiveNgram(ResidualAdaptiveNgram *this)
{
  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0A346B0;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::PMBuilder::PMBuilder(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B2194940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, fst::SymbolTable *a11, fst::SymbolTable *a12, fst::SymbolTable *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void sub_1B2194AE8()
{
}

void sub_1B2194AF0()
{
}

void sub_1B2194AF8()
{
}

void sub_1B2194B00()
{
}

void sub_1B2194B08()
{
}

void sub_1B2194B10()
{
}

void sub_1B2194B18()
{
}

void quasar::PMBuilder::loadSystemConfig(quasar::PMBuilder *this, quasar::SystemConfig *a2)
{
  __p[73] = *(void **)MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-match-building");
  quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
}

void sub_1B2195528(_Unwind_Exception *a1)
{
}

void sub_1B2195544(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void quasar::PMBuilder::readTokenListFromLexicon(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v39[19] = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  memset(&__p, 0, sizeof(__p));
  std::ifstream::basic_ifstream(v37);
  uint64_t v4 = v37[0];
  if (*(_DWORD *)&v38[*(void *)(v37[0] - 24) + 16])
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)&v19[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Error opening ", 14);
    int v15 = *(char *)(a1 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = *(void *)a1;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v19);
  }
  uint64_t v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(v4 - 24)));
    uint64_t v6 = std::locale::use_facet(v19, v5);
    unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(v19);
    uint64_t v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, (uint64_t)&__p, v7);
    if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0) {
      break;
    }
    quasar::trim(&__p);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "\t");
      quasar::splitAndTrimNoEmpty(&__p, (char *)v19, v18);
      if (SBYTE7(v20) < 0) {
        operator delete(v19[0].__locale_);
      }
      if ((const void **)((char *)v18[1] - (char *)v18[0]) == (const void **)48)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, v18[0], (uint64_t)v18[0]);
      }
      else if (quasar::gLogLevel >= 5)
      {
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        *(_OWORD *)&v19[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
        unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Invalid line in lexicon: '", 26);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"'", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v19);
      }
      v19[0].__locale_ = (std::locale::__imp *)v18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
    }
    uint64_t v4 = v37[0];
  }
  v37[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v38);
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B2195920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2195C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, fst::SymbolTable *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(v25);
  fst::SymbolTable::~SymbolTable(v24);
  fst::SymbolTable::~SymbolTable(v23);
  fst::SymbolTable::~SymbolTable(a11);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a12);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a13);
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a14);
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void sub_1B2195DAC()
{
}

void sub_1B2195DB4()
{
}

void sub_1B2195DBC()
{
}

void sub_1B2195DC4()
{
}

void sub_1B2195DCC()
{
}

void sub_1B2195DD4()
{
}

void sub_1B2195DDC()
{
}

void quasar::PMBuilder::writeLGFst(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v6 = 16777217;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v5 = __p;
    int v6 = 16777217;
  }
  quasar::ModelLoader::writeFst(a1 + 64, a1 + 384, (uint64_t)&v5, a2);
}

void sub_1B2195E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PMBuilder::writeAlignedLFst(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v6 = 16777217;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v5 = __p;
    int v6 = 16777217;
  }
  quasar::ModelLoader::writeFst(a1 + 80, a1 + 384, (uint64_t)&v5, a2);
}

void sub_1B2195F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::PMBuilder::writeSymsQuasarMap(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v41, "QSR_SYM_V000");
  memset(&v40, 0, sizeof(v40));
  uint64_t v37 = 0;
  unsigned int v38 = 0;
  long long v39 = 0;
  unint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 128))(a1, 0);
  if (v2)
  {
    uint64_t v4 = v3;
    int v5 = 0;
    uint64_t v6 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(__p, a1, v4);
      std::vector<std::string>::pointer end = v40.__end_;
      if (v40.__end_ >= v40.__end_cap_.__value_)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) > v10) {
          unint64_t v10 = 0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v11 = v10;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v40.__end_cap_;
        if (v11) {
          std::string::size_type v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v40.__end_cap_, v11);
        }
        else {
          std::string::size_type v12 = 0;
        }
        uint64_t v13 = v12 + v9;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        long long v14 = *(_OWORD *)__p;
        v13->__r_.__value_.__r.__words[2] = v36;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        __p[1] = 0;
        std::string::size_type v36 = 0;
        __p[0] = 0;
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v40, &__v);
        int v15 = v40.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v40.__end_ = v15;
        if (SHIBYTE(v36) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        v40.__end_->__r_.__value_.__r.__words[2] = v36;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        v40.__end_ = end + 1;
      }
      uint64_t v16 = v38;
      if (v38 >= v39)
      {
        double v18 = (char *)v37;
        uint64_t v19 = (v38 - (unsigned char *)v37) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v39 - (unsigned char *)v37;
        if ((v39 - (unsigned char *)v37) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          long long v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v39, v22);
          double v18 = (char *)v37;
          uint64_t v16 = v38;
        }
        else
        {
          long long v23 = 0;
        }
        long long v24 = (int *)&v23[4 * v19];
        int *v24 = v5;
        uint64_t v17 = (char *)(v24 + 1);
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--long long v24 = v25;
        }
        uint64_t v37 = v24;
        unsigned int v38 = v17;
        long long v39 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v38 = v5;
        uint64_t v17 = v16 + 4;
      }
      unsigned int v38 = v17;
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(&__v, a1, v4);
      if (SHIBYTE(__v.__end_) < 0)
      {
        int begin = (int)__v.__begin_;
        operator delete(__v.__first_);
      }
      else
      {
        int begin = HIBYTE(__v.__end_);
      }
      if (++v6 < v2) {
        uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v6);
      }
      v5 += begin + 1;
    }
    while (v6 != v2);
  }
  else
  {
    int v5 = 0;
  }
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
  unsigned int v28 = vcvtd_n_s64_f64(ceil((double)v27 * 0.25), 2uLL);
  LODWORD(__v.__first_) = v28;
  std::ostream::write();
  std::ostream::write();
  long long v29 = (char *)v37;
  long long v30 = v38;
  while (v29 != v30)
  {
    LODWORD(__p[0]) = *(_DWORD *)v29;
    std::ostream::write();
    v29 += 4;
  }
  int v31 = v5 - v27 + v28;
  LODWORD(__p[0]) = v5;
  if (v5 < v31)
  {
    do
    {
      std::ostream::write();
      ++LODWORD(__p[0]);
    }
    while (SLODWORD(__p[0]) < v31);
  }
  std::vector<std::string>::pointer v32 = v40.__begin_;
  for (std::vector<std::string>::pointer i = v40.__end_; v32 != i; ++v32)
  {
    std::ostream::write();
    std::ostream::write();
  }
  if (SLODWORD(__v.__first_) >= 1)
  {
    int v34 = 0;
    do
    {
      std::ostream::write();
      ++v34;
    }
    while (v34 < SLODWORD(__v.__first_));
  }
  if (v37)
  {
    unsigned int v38 = (char *)v37;
    operator delete(v37);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v42 < 0) {
    operator delete(v41);
  }
}

void sub_1B219648C(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, void *a10, char a11, uint64_t a12, int *__pa, int *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::__split_buffer<std::wstring> *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__pa)
  {
    a14 = __pa;
    operator delete(__pa);
  }
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void quasar::PMBuilder::writeMetadata(uint64_t a1)
{
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v23);
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  memset(__p, 0, sizeof(__p));
  LODWORD(v19.__r_.__value_.__l.__data_) = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v23, a1 + 208, (uint64_t *)v16, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "version-major");
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v23, (uint64_t)__p);
  uint64_t String = quasar::PTree::getString(Ptree);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)String, *(void *)(String + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)String;
    v22.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "version-minor");
  int v5 = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v23, (uint64_t)__p);
  uint64_t v6 = quasar::PTree::getString(v5);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v21.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v7;
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v16, "model-info");
  uint64_t v8 = quasar::SystemConfig::getPtree((uint64_t)v23, (uint64_t)v16);
  LODWORD(__p[0]) = *(_DWORD *)v8;
  if (*(char *)(v8 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[1], *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
  }
  else
  {
    long long v9 = *(_OWORD *)(v8 + 8);
    __p[3] = *(void **)(v8 + 24);
    *(_OWORD *)&__p[1] = v9;
  }
  memset(&v19, 0, sizeof(v19));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v19, *(void *)(v8 + 32), *(void *)(v8 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v8 + 40) - *(void *)(v8 + 32)) >> 3));
  char v20 = *(unsigned char *)(v8 + 56);
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  quasar::PTree::PTree((quasar::PTree *)v16);
  std::string::basic_string[abi:ne180100]<0>(v10, "version-major");
  quasar::PTree::PTree(v14, &v22);
  quasar::PTree::putChild((uint64_t)v16, (uint64_t)v10, (uint64_t)v14, 1);
  quasar::PTree::~PTree((quasar::PTree *)v14);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "version-minor");
  quasar::PTree::PTree(v14, &v21);
  quasar::PTree::putChild((uint64_t)v16, (uint64_t)v10, (uint64_t)v14, 1);
  quasar::PTree::~PTree((quasar::PTree *)v14);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v14, "model-info");
  quasar::PTree::putChild((uint64_t)v16, (uint64_t)v14, (uint64_t)__p, 1);
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (*(unsigned char *)(a1 + 424))
  {
    quasar::PTree::PTree((quasar::PTree *)v14);
    std::string::basic_string[abi:ne180100]<0>(v12, "lg-fst-name");
    quasar::PTree::PTree(v10, a1 + 432);
    quasar::PTree::putChild((uint64_t)v14, (uint64_t)v12, (uint64_t)v10, 1);
    quasar::PTree::~PTree((quasar::PTree *)v10);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "l-fst-name");
    quasar::PTree::PTree(v10, a1 + 456);
    quasar::PTree::putChild((uint64_t)v14, (uint64_t)v12, (uint64_t)v10, 1);
    quasar::PTree::~PTree((quasar::PTree *)v10);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "g-osyms-name");
    quasar::PTree::PTree(v10, a1 + 480);
    quasar::PTree::putChild((uint64_t)v14, (uint64_t)v12, (uint64_t)v10, 1);
    quasar::PTree::~PTree((quasar::PTree *)v10);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "wildcard-symbol");
    quasar::PTree::PTree(v10, a1 + 528);
    quasar::PTree::putChild((uint64_t)v14, (uint64_t)v12, (uint64_t)v10, 1);
    quasar::PTree::~PTree((quasar::PTree *)v10);
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v10, "phonetic-match-building");
    quasar::PTree::putChild((uint64_t)v16, (uint64_t)v10, (uint64_t)v14, 1);
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    quasar::PTree::~PTree((quasar::PTree *)v14);
  }
  quasar::PTree::writeJsonToFile();
}

void sub_1B219697C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::PTree::~PTree((quasar::PTree *)&a24);
  quasar::PTree::~PTree((quasar::PTree *)&a32);
  quasar::PTree::~PTree((quasar::PTree *)&a40);
  if (a53 < 0) {
    operator delete(a48);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a61);
  _Unwind_Resume(a1);
}

void sub_1B2196A88()
{
}

void sub_1B2196A90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  JUMPOUT(0x1B2196A58);
}

void sub_1B2196AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    JUMPOUT(0x1B2196A64);
  }
  JUMPOUT(0x1B2196A68);
}

void sub_1B2196B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    JUMPOUT(0x1B2196A74);
  }
  JUMPOUT(0x1B2196A78);
}

uint64_t quasar::PMBuilder::getIndividualLGFsts(quasar::PMBuilder *this)
{
  return (uint64_t)this + 40;
}

uint64_t quasar::PMBuilder::getSectionNames(quasar::PMBuilder *this)
{
  return (uint64_t)this + 344;
}

uint64_t quasar::PMBuilder::getSupportPhoneticMatchBuilding(quasar::PMBuilder *this)
{
  return *((unsigned __int8 *)this + 424);
}

uint64_t quasar::PMBuilder::getOsyms@<X0>(uint64_t this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2) {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v5, "^//", 0);
  }
  uint64_t v4 = *(void *)(this + 104);
  *a3 = &unk_1F0A382C8;
  a3[1] = v4;
  ++*(_DWORD *)(v4 + 168);
  return this;
}

void sub_1B2196D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::locale a21)
{
}

uint64_t quasar::PMBuilder::reset(quasar::PMBuilder *this)
{
  uint64_t v3 = *(void (****)(void))this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 != *(void *)this)
  {
    uint64_t v4 = v2 - 16;
    int v5 = (void (***)(void))(v2 - 16);
    uint64_t v6 = (void (***)(void))(v2 - 16);
    do
    {
      long long v7 = *v6;
      v6 -= 2;
      (*v7)(v5);
      v4 -= 16;
      BOOL v8 = v5 == v3;
      int v5 = v6;
    }
    while (!v8);
    uint64_t v2 = *(void *)this;
  }
  uint64_t v20 = v2;
  std::string v21 = v3;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  uint64_t v22 = v9;
  long long v23 = (void **)&v20;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v23);
  char v11 = (void (***)(void))*((void *)this + 5);
  uint64_t v10 = *((void *)this + 6);
  if ((void (***)(void))v10 != v11)
  {
    uint64_t v12 = v10 - 16;
    char v13 = (void (***)(void))(v10 - 16);
    long long v14 = (void (***)(void))(v10 - 16);
    do
    {
      char v15 = *v14;
      v14 -= 2;
      (*v15)(v13);
      v12 -= 16;
      BOOL v8 = v13 == v11;
      char v13 = v14;
    }
    while (!v8);
    uint64_t v10 = *((void *)this + 5);
  }
  uint64_t v20 = v10;
  std::string v21 = v11;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  uint64_t v22 = *((void *)this + 7);
  long long v23 = (void **)&v20;
  *((void *)this + 7) = 0;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v23);
  uint64_t v17 = (void (***)(void))*((void *)this + 23);
  uint64_t v16 = *((void *)this + 24);
  if ((void (***)(void))v16 != v17)
  {
    do
    {
      v16 -= 160;
      std::allocator<quasar::DataFeed>::destroy[abi:ne180100]((uint64_t)this + 200, v16);
    }
    while ((void (***)(void))v16 != v17);
    uint64_t v16 = *((void *)this + 23);
  }
  uint64_t v20 = v16;
  std::string v21 = v17;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  uint64_t v18 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  uint64_t v22 = v18;
  long long v23 = (void **)&v20;
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](&v23);
  quasar::RegexRules::clear((std::locale **)this + 40);
  return quasar::SpokenForm::clear((quasar::PMBuilder *)((char *)this + 144));
}

BOOL quasar::PMBuilder::buildGFsts(quasar::PMBuilder *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 424)) {
    return 0;
  }
  uint64_t v3 = *(void (****)(void))this;
  uint64_t v2 = *((void *)this + 1);
  if (v2 != *(void *)this)
  {
    uint64_t v4 = v2 - 16;
    int v5 = (void (***)(void))(v2 - 16);
    uint64_t v6 = (void (***)(void))(v2 - 16);
    do
    {
      long long v7 = *v6;
      v6 -= 2;
      (*v7)(v5);
      v4 -= 16;
      BOOL v8 = v5 == v3;
      int v5 = v6;
    }
    while (!v8);
  }
  *((void *)this + 1) = v3;
  memset(v38, 0, sizeof(v38));
  std::vector<quasar::DataFeed>::__init_with_size[abi:ne180100]<quasar::DataFeed*,quasar::DataFeed*>((quasar::DataFeed *)v38, *((quasar::DataFeed **)this + 23), *((quasar::DataFeed **)this + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 24) - *((void *)this + 23)) >> 5));
  quasar::DataFeedFactory::mergeDataFeedsByName(v38, (uint64_t)v39);
  *(void *)&long long __p = v38;
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(v37, 0, sizeof(v37));
  uint64_t v9 = (unsigned __int8 *)*((void *)this + 43);
  uint64_t v10 = (unsigned __int8 *)*((void *)this + 44);
  v19[0] = (std::vector<std::string> *)v37;
  if (v9 == v10)
  {
    char v11 = v9;
  }
  else
  {
    do
    {
      std::operator+<char>();
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](v19, &__p);
      if (SBYTE7(v21) < 0) {
        operator delete((void *)__p);
      }
      v9 += 24;
    }
    while (v9 != v10);
    char v11 = (unsigned __int8 *)*((void *)this + 43);
    uint64_t v9 = (unsigned __int8 *)*((void *)this + 44);
  }
  char v13 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [5],std::__identity>(v11, v9, "root");
  long long v14 = (unsigned __int8 *)*((void *)this + 44);
  BOOL v12 = v13 != v14;
  if (v13 != v14)
  {
    std::unordered_map<std::string,quasar::SpokenFormSection>::unordered_map((uint64_t)v19, (uint64_t)this + 144);
    uint64_t v15 = *((void *)this + 47);
    v17[0] = *((void *)this + 46);
    v17[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    quasar::GrammarFST::GrammarFST((uint64_t)&v18, v17, v37, (uint64_t)this + 320, (uint64_t)this + 256, (long long *)this + 33, (const void ***)this + 69);
  }
  if (quasar::gLogLevel >= 1)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"[root] grammar is not present.", 30);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  }
  *(void *)&long long __p = v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::~__hash_table((uint64_t)v39);
  return v12;
}

void sub_1B219753C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a57);
  a32 = v62 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::~__hash_table(v62 - 184);
  _Unwind_Resume(a1);
}

uint64_t quasar::PMBuilder::initializeOSyms(uint64_t this)
{
  if (*(unsigned char *)(this + 424))
  {
    std::unordered_map<std::string,quasar::SpokenFormSection>::unordered_map((uint64_t)v17, this + 144);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v11 = 0;
    BOOL v12 = 0;
    unint64_t v13 = 0;
    uint64_t v1 = v18;
    if (!v18) {
LABEL_38:
    }
      fst::SymbolTable::SymbolTable((fst::SymbolTable *)&__p);
    while (1)
    {
      uint64_t v2 = v1 + 5;
      if (*((char *)v1 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v1[5], v1[6]);
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v2;
        __p.__r_.__value_.__r.__words[2] = v1[7];
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 4)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_14:
          if (quasar::SpokenFormSection::containsSubgrammar((quasar::SpokenFormSection *)(v1 + 5)))
          {
            if (*((char *)v1 + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v1[5], v1[6]);
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v2;
              __p.__r_.__value_.__r.__words[2] = v1[7];
            }
            uint64_t v4 = v15;
            if ((unint64_t)v15 >= v16)
            {
              uint64_t v6 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v14, (long long *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v5 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v15->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
              }
              uint64_t v6 = v4 + 1;
            }
            uint64_t v15 = v6;
          }
          else
          {
            if (*((char *)v1 + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v1[5], v1[6]);
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v2;
              __p.__r_.__value_.__r.__words[2] = v1[7];
            }
            long long v7 = v12;
            if ((unint64_t)v12 >= v13)
            {
              uint64_t v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v11, (long long *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v12->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
              }
              uint64_t v9 = v7 + 1;
            }
            BOOL v12 = v9;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_37;
        }
        int v3 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v3 != 1953460082) {
          goto LABEL_14;
        }
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4 || LODWORD(__p.__r_.__value_.__l.__data_) != 1953460082)
      {
        goto LABEL_14;
      }
LABEL_37:
      uint64_t v1 = (uint64_t *)*v1;
      if (!v1) {
        goto LABEL_38;
      }
    }
  }
  return this;
}

void sub_1B21979BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1B2197B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::GrammarFST::~GrammarFST(quasar::GrammarFST *this)
{
  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 72);
  int v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t quasar::PMBuilder::buildLFst(quasar::PMBuilder *this)
{
  if (*((unsigned char *)this + 424))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v5 = 0u;
      long long v6 = 0u;
      long long v3 = 0u;
      long long v4 = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Building L FST ... ", 19);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v2);
    }
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
  }
  return 0;
}

void sub_1B2197ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  quasar::LexiconFST::~LexiconFST((quasar::LexiconFST *)&a18);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v18 - 144));
  _Unwind_Resume(a1);
}

void quasar::LexiconFST::~LexiconFST(quasar::LexiconFST *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)this + 1600);
  quasar::SystemConfig::~SystemConfig((quasar::LexiconFST *)((char *)this + 56));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t quasar::PMBuilder::buildAlignedLFst(quasar::PMBuilder *this)
{
  if (*((unsigned char *)this + 424))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      long long v4 = 0u;
      long long v5 = 0u;
      *(_OWORD *)long long v3 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Building Aligned-L FST ... ", 27);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v3);
    }
    quasar::LexiconFST::LexiconFST((uint64_t)v3, (uint64_t)this + 208);
  }
  return 0;
}

void sub_1B2198108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
}

BOOL quasar::PMBuilder::composeLGFsts(quasar::PMBuilder *this)
{
  if (*((unsigned char *)this + 424))
  {
    long long v3 = (void (***)(void))*((void *)this + 5);
    uint64_t v2 = (void (***)(void))*((void *)this + 6);
    if (v2 != v3)
    {
      long long v4 = v2 - 2;
      long long v5 = v2 - 2;
      long long v6 = v2 - 2;
      do
      {
        long long v7 = *v6;
        v6 -= 2;
        (*v7)(v5);
        v4 -= 2;
        BOOL v8 = v5 == v3;
        long long v5 = v6;
      }
      while (!v8);
    }
    *((void *)this + 6) = v3;
    fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::MatcherFst();
  }
  return *((unsigned char *)this + 424) != 0;
}

void sub_1B2198758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a27);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a25);
  fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v27 - 104));
  _Unwind_Resume(a1);
}

uint64_t fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>::Relabel<fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>>(void *a1, uint64_t a2, int a3)
{
  long long v5 = *(uint64_t **)(*(void *)(a2 + 8) + 80);
  uint64_t v6 = *v5;
  if (!*v5) {
    uint64_t v6 = v5[1];
  }
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable((uint64_t)v8, v6, 0);
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel((uint64_t)v8, a1, a3);
  return fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable((uint64_t)v8);
}

void sub_1B2198864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::PMBuilder::combineFsts(quasar::PMBuilder *this)
{
  if (*((unsigned char *)this + 424))
  {
    uint64_t v65 = 0;
    unsigned int v66 = 0;
    v67[0] = 0;
    std::unordered_map<std::string,quasar::SpokenFormSection>::unordered_map((uint64_t)v64, (uint64_t)this + 144);
    uint64_t v2 = *((void *)this + 13);
    uint64_t v62 = &unk_1F0A382C8;
    uint64_t v63 = v2;
    ++*(_DWORD *)(v2 + 168);
    uint64_t v3 = *((void *)this + 43);
    uint64_t v4 = *((void *)this + 44);
    if (v3 == v4) {
LABEL_61:
    }
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
    uint64_t v5 = 0;
    while (1)
    {
      int v6 = *(char *)(v3 + 23);
      if (v6 < 0)
      {
        if (*(void *)(v3 + 8) != 4) {
          goto LABEL_10;
        }
        long long v7 = *(_DWORD **)v3;
      }
      else
      {
        long long v7 = (_DWORD *)v3;
        if (v6 != 4) {
          goto LABEL_10;
        }
      }
      if (*v7 != 1953460082)
      {
LABEL_10:
        __p[0] = (void *)v3;
        BOOL v8 = std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v64, (unsigned __int8 *)v3, (uint64_t)&std::piecewise_construct, (long long **)__p);
        if (quasar::SpokenFormSection::containsSubgrammar((quasar::SpokenFormSection *)(v8 + 40)))
        {
          if (quasar::gLogLevel >= 5)
          {
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            *(_OWORD *)std::string __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Not combining $", 15);
            int v10 = *(char *)(v3 + 23);
            if (v10 >= 0) {
              uint64_t v11 = v3;
            }
            else {
              uint64_t v11 = *(void *)v3;
            }
            if (v10 >= 0) {
              uint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            }
            else {
              uint64_t v12 = *(void *)(v3 + 8);
            }
            long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" with root because it contains subgrammars", 42);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          goto LABEL_60;
        }
        std::operator+<char>();
        uint64_t v14 = v63;
        uint64_t v15 = fst::internal::DenseSymbolMap::Find((uint64_t *)(v63 + 40), (uint64_t)__p);
        LODWORD(v16) = v15;
        if (v15 != -1)
        {
          uint64_t v17 = *(void *)(v14 + 32);
          BOOL v18 = __OFSUB__(v15, v17);
          uint64_t v19 = v15 - v17;
          if (v19 < 0 == v18) {
            uint64_t v16 = *(void *)(*(void *)(v14 + 120) + 8 * v19);
          }
        }
        if (SBYTE7(v46) < 0) {
          operator delete(__p[0]);
        }
        if (quasar::gLogLevel >= 5)
        {
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          *(_OWORD *)std::string __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"<", 1);
          uint64_t v20 = (void *)std::ostream::operator<<();
          long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
          int v22 = *(char *)(v3 + 23);
          if (v22 >= 0) {
            uint64_t v23 = v3;
          }
          else {
            uint64_t v23 = *(void *)v3;
          }
          if (v22 >= 0) {
            uint64_t v24 = *(unsigned __int8 *)(v3 + 23);
          }
          else {
            uint64_t v24 = *(void *)(v3 + 8);
          }
          long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)">", 1);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        uint64_t v26 = *((void *)this + 5) + 16 * v5;
        uint64_t v27 = v66;
        if ((unint64_t)v66 >= v67[0])
        {
          uint64_t v28 = (v66 - v65) >> 4;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v30 = v67[0] - (void)v65;
          if ((uint64_t)(v67[0] - (void)v65) >> 3 > v29) {
            unint64_t v29 = v30 >> 3;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v67, v31);
          long long v34 = &v32[16 * v28];
          *(_DWORD *)long long v34 = v16;
          *((void *)v34 + 1) = v26;
          long long v36 = v65;
          long long v35 = v66;
          uint64_t v37 = v34;
          if (v66 != v65)
          {
            do
            {
              *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
              v37 -= 16;
              v35 -= 16;
            }
            while (v35 != v36);
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        *(_DWORD *)unsigned int v66 = v16;
        goto LABEL_47;
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        *(_OWORD *)std::string __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"<-2, root>", 10);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      uint64_t v26 = *((void *)this + 5) + 16 * v5;
      uint64_t v27 = v66;
      if ((unint64_t)v66 >= v67[0])
      {
        uint64_t v39 = (v66 - v65) >> 4;
        unint64_t v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v41 = v67[0] - (void)v65;
        if ((uint64_t)(v67[0] - (void)v65) >> 3 > v40) {
          unint64_t v40 = v41 >> 3;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v40;
        }
        long long v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v67, v42);
        long long v34 = &v32[16 * v39];
        *(_DWORD *)long long v34 = -2;
        *((void *)v34 + 1) = v26;
        long long v43 = v65;
        long long v35 = v66;
        uint64_t v37 = v34;
        if (v66 != v65)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
            v37 -= 16;
            v35 -= 16;
          }
          while (v35 != v43);
LABEL_56:
          long long v35 = v65;
        }
LABEL_57:
        unsigned int v38 = v34 + 16;
        uint64_t v65 = v37;
        unsigned int v66 = v34 + 16;
        v67[0] = &v32[16 * v33];
        if (v35) {
          operator delete(v35);
        }
        goto LABEL_59;
      }
      *(_DWORD *)unsigned int v66 = -2;
LABEL_47:
      *((void *)v27 + 1) = v26;
      unsigned int v38 = v27 + 16;
LABEL_59:
      unsigned int v66 = v38;
LABEL_60:
      ++v5;
      v3 += 24;
      if (v3 == v4) {
        goto LABEL_61;
      }
    }
  }
  return 0;
}

void sub_1B21994B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a24);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a26);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)(v33 - 192));
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(v33 - 176);
  long long v35 = *(void **)(v33 - 136);
  if (v35)
  {
    *(void *)(v33 - 128) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::SpokenFormSection::containsSubgrammar(quasar::SpokenFormSection *this)
{
  uint64_t v1 = *((void *)this + 3);
  uint64_t v2 = *((void *)this + 4);
  if (v1 == v2) {
    return 0;
  }
  while (1)
  {
    if (*(char *)(v1 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v1 + 64), *(void *)(v1 + 72));
    }
    else
    {
      long long v3 = *(_OWORD *)(v1 + 64);
      v7.__r_.__value_.__r.__words[2] = *(void *)(v1 + 80);
      *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v3;
    }
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      break;
    }
    if (*((unsigned char *)&v7.__r_.__value_.__s + 23)) {
      return 1;
    }
LABEL_9:
    memset(&v6, 0, sizeof(v6));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v6, *(long long **)(v1 + 88), *(long long **)(v1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 96) - *(void *)(v1 + 88)) >> 3));
    long long v4 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
    BOOL v8 = &v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    if ((void)v4 != *((void *)&v4 + 1)) {
      return 1;
    }
    v1 += 112;
    if (v1 == v2) {
      return 0;
    }
  }
  if (!v7.__r_.__value_.__l.__size_) {
    goto LABEL_9;
  }
  operator delete(v7.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1B2199700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PMBuilder::getLGFstName(quasar::PMBuilder *this)
{
  return (uint64_t)this + 432;
}

uint64_t quasar::PMBuilder::getLFstName(quasar::PMBuilder *this)
{
  return (uint64_t)this + 456;
}

uint64_t quasar::PMBuilder::getOsymsName(quasar::PMBuilder *this)
{
  return (uint64_t)this + 480;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  std::string v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *std::string v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::vector<quasar::RegexReplacementRule>::__vdeallocate(std::locale **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    long long v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 11;
        std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](a1 + 16, v3);
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::unordered_map<std::string,quasar::SpokenFormSection>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::SpokenFormSection> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_1B2199900(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::SpokenFormSection> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  std::string v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__construct_node_hash<std::pair<std::string const,quasar::SpokenFormSection> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B2199B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__construct_node_hash<std::pair<std::string const,quasar::SpokenFormSection> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  double result = std::pair<std::string const,quasar::SpokenFormSection>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B2199BFC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::SpokenFormSection>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::SpokenFormLine>::__init_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>((quasar::SpokenFormLine *)&this[2], *((quasar::SpokenFormLine **)a2 + 6), *((quasar::SpokenFormLine **)a2 + 7), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4));
  return this;
}

void sub_1B2199CCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

quasar::SpokenFormLine *std::vector<quasar::SpokenFormLine>::__init_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>(quasar::SpokenFormLine *result, quasar::SpokenFormLine *a2, quasar::SpokenFormLine *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::VoiceCommandInterpretation>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*,quasar::SpokenFormLine*,quasar::SpokenFormLine*>((uint64_t)v6 + 16, a2, a3, *((quasar::SpokenFormLine **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1B2199D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

quasar::SpokenFormLine *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*,quasar::SpokenFormLine*,quasar::SpokenFormLine*>(uint64_t a1, quasar::SpokenFormLine *a2, quasar::SpokenFormLine *a3, quasar::SpokenFormLine *this)
{
  long long v4 = this;
  uint64_t v10 = this;
  uint8x8_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::SpokenFormLine::SpokenFormLine(v4, v6);
      uint64_t v6 = (const quasar::SpokenFormLine *)((char *)v6 + 112);
      long long v4 = (quasar::SpokenFormLine *)((char *)v11 + 112);
      uint8x8_t v11 = (quasar::SpokenFormLine *)((char *)v11 + 112);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B2199E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 112;
      std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::SpokenFormSection>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void quasar::GrammarFST::GrammarFST(uint64_t a1, void *a2, long long **a3, uint64_t a4, uint64_t a5, long long *a6, const void ***a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 32) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v12 = *a6;
    *(void *)(a1 + 128) = *((void *)a6 + 2);
    *(_OWORD *)(a1 + 112) = v12;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 136), a7);
  quasar::PMRegexEnumerator::loadEnumeratorsFromConfigFile(a5, (uint64_t)v13);
}

void sub_1B219A02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(v3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 32);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<quasar::PMRegexEnumerator>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<quasar::PMRegexEnumerator>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void quasar::LexiconFST::LexiconFST(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v4 = (quasar::SystemConfig *)(a1 + 56);
  *(_OWORD *)a1 = 0u;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 56));
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_DWORD *)(a1 + 1632) = 1065353216;
  uint64_t v5 = (char *)operator new(0x68uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1F0A5FC30;
  v5[32] = 0;
  *((void *)v5 + 3) = &unk_1F0A52720;
  *((_DWORD *)v5 + 9) = 10000;
  *((void *)v5 + 5) = v5 + 40;
  *((void *)v5 + 6) = v5 + 40;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *((void *)v5 + 11) = 0;
  *((_DWORD *)v5 + 24) = 1065353216;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v5 + 24;
  *(void *)(a1 + 32) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::allocate_shared[abi:ne180100]<quasar::LmeDataFactory,std::allocator<quasar::LmeDataFactory>,std::string const&,void>(a2, &v12);
  long long v7 = v12;
  long long v12 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40)))
  {
    memset(v11, 0, sizeof(v11));
    long long v12 = 0u;
    long long v13 = 0u;
    LODWORD(v14) = 1065353216;
    quasar::SystemConfig::readJsonFile((uint64_t)v4, a2, v11, (uint64_t)&v12, 0, 0);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v12);
    *(void *)&long long v12 = v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
    SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo(v4);
    std::string::operator=((std::string *)a1, SpeechModelInfo + 5);
    quasar::QuasarG2PFactory::g2pModelExist(v4, v10);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"lmeDataFactory initialization failed!", 37);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v12);
}

void sub_1B219A538(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(v1 + 1600);
  quasar::SystemConfig::~SystemConfig(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 32);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(void))(*(void *)*a1 + 200))();
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::InitNumArcs(a1);
    int v4 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
    if (v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, v5); ++i)
          fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEps(a1, v5, i);
        uint64_t v5 = (v5 + 1);
      }
      while (v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
  }
  return a1;
}

void sub_1B219A6FC(_Unwind_Exception *exception_object)
{
  int v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::InitNumArcs(void *a1)
{
  int v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  uint64_t v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1) {
    return result;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    LODWORD(v10[0]) = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, i);
    int v13 = 2139095040;
    if (*(float *)v10 != INFINITY) {
      ++*(_DWORD *)(*v3 + 4 * i);
    }
    uint64_t v6 = *a1;
    unint64_t v12 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, i, v10);
    while (1)
    {
      uint64_t result = v10[0];
      if (!v10[0])
      {
        if (v12 >= v10[2]) {
          goto LABEL_17;
        }
LABEL_11:
        uint64_t v9 = 0;
        uint64_t v8 = v10[1] + 16 * v12;
        goto LABEL_12;
      }
      int v7 = (*(uint64_t (**)(void))(*(void *)v10[0] + 24))(v10[0]);
      uint64_t result = v10[0];
      if (v7) {
        break;
      }
      if (!v10[0]) {
        goto LABEL_11;
      }
      uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v10[0] + 32))();
      uint64_t v9 = v10[0];
LABEL_12:
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v8 + 12));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
      }
      else {
        ++v12;
      }
    }
    if (v10[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v10[0] + 8))();
      continue;
    }
LABEL_17:
    if (v11) {
      --*v11;
    }
  }
  return result;
}

void sub_1B219A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::InitNumArcs(v9);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEps(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v15);
  if (!v15[0])
  {
    uint64_t v17 = a3;
    uint64_t v10 = a3;
LABEL_7:
    unint64_t v11 = (uint64_t *)(v15[1] + 16 * v10);
    uint64_t v8 = *v11;
    uint64_t v9 = v11[1];
    goto LABEL_8;
  }
  (*(void (**)(void, uint64_t))(*(void *)v15[0] + 64))(v15[0], a3);
  if (!v15[0])
  {
    uint64_t v10 = v17;
    goto LABEL_7;
  }
  int v7 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))(v15[0]);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))(v15[0]);
    goto LABEL_10;
  }
LABEL_8:
  if (v16) {
    --*v16;
  }
LABEL_10:
  if (HIDWORD(v9) != a2 && *((_DWORD *)a1 + 2) != HIDWORD(v9))
  {
    int v13 = *(_DWORD *)(a1[5] + 4 * (v9 >> 32));
    if (*(_DWORD *)(a1[2] + 4 * (v9 >> 32)) != 1 || v13 < 2)
    {
      if (v13 == 1) {
        fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsPattern2(a1, a2, a3, v8, v9);
      }
    }
    else
    {
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsPattern1(a1, a2, a3, v8, v9);
    }
  }
}

void sub_1B219ABA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsPattern1(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v57 = a4;
  uint64_t v58 = a5;
  unint64_t v9 = HIDWORD(a5);
  long long v54 = 0;
  long long v55 = 0;
  long long v56 = 0;
  (*(void (**)(void))(*(void *)*a1 + 296))();
  uint64_t v10 = a5 >> 32;
  float v11 = INFINITY;
  float v12 = INFINITY;
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v53 + 24))(v53))
  {
    __n128 v13 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v53 + 32))(v53);
    __n128 v52 = v13;
    if (v13.n128_u32[3] != *((_DWORD *)a1 + 2))
    {
      int CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v57, (float *)&v52, (uint64_t)&v51);
      float v15 = v52.n128_f32[2];
      v13.n128_u32[0] = 2139095040;
      if (CanCombineArcs)
      {
        if (v12 == INFINITY)
        {
          float v12 = v52.n128_f32[2];
        }
        else
        {
          v13.n128_u32[0] = 2139095040;
          if (v52.n128_f32[2] != INFINITY)
          {
            if (v12 <= v52.n128_f32[2])
            {
              float v18 = expf(-(float)(v52.n128_f32[2] - v12));
              v13.n128_f32[0] = logf(v18 + 1.0);
              float v12 = v12 - v13.n128_f32[0];
            }
            else
            {
              float v16 = expf(-(float)(v12 - v52.n128_f32[2]));
              v13.n128_f32[0] = logf(v16 + 1.0);
              float v12 = v15 - v13.n128_f32[0];
            }
          }
        }
        --*(_DWORD *)(a1[5] + 4 * v10);
        --*(_DWORD *)(a1[2] + 4 * v52.n128_i32[3]);
        v52.n128_u32[3] = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, __n128 *, __n128))(*(void *)v53 + 88))(v53, &v52, v13);
        long long v19 = v55;
        if (v55 >= (__n128 *)v56)
        {
          uint64_t v21 = v55 - v54;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v56 - (char *)v54;
          if ((v56 - (char *)v54) >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24) {
            long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v56, v24);
          }
          else {
            long long v25 = 0;
          }
          long long v26 = (__n128 *)&v25[16 * v21];
          __n128 v13 = v51;
          __n128 *v26 = v51;
          long long v28 = v54;
          long long v27 = v55;
          unint64_t v29 = v26;
          if (v55 != v54)
          {
            do
            {
              __n128 v13 = v27[-1];
              v29[-1] = v13;
              --v29;
              --v27;
            }
            while (v27 != v28);
            long long v27 = v54;
          }
          long long v20 = v26 + 1;
          long long v54 = v29;
          long long v55 = v26 + 1;
          long long v56 = &v25[16 * v24];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          __n128 v13 = v51;
          __n128 *v55 = v51;
          long long v20 = v19 + 1;
        }
        long long v55 = v20;
      }
      else if (v11 == INFINITY)
      {
        float v11 = v52.n128_f32[2];
      }
      else
      {
        v13.n128_u32[0] = 2139095040;
        if (v52.n128_f32[2] != INFINITY)
        {
          if (v11 <= v52.n128_f32[2])
          {
            float v30 = expf(-(float)(v52.n128_f32[2] - v11));
            v13.n128_f32[0] = logf(v30 + 1.0);
            float v11 = v11 - v13.n128_f32[0];
          }
          else
          {
            float v17 = expf(-(float)(v11 - v52.n128_f32[2]));
            v13.n128_f32[0] = logf(v17 + 1.0);
            float v11 = v15 - v13.n128_f32[0];
          }
        }
      }
    }
    (*(void (**)(uint64_t, __n128))(*(void *)v53 + 40))(v53, v13);
  }
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  float v32 = (*(float (**)(void, unint64_t))(*(void *)*a1 + 32))(*a1, v9);
  v52.n128_f32[0] = v32;
  v51.n128_u32[0] = 2139095040;
  if (v32 == INFINITY) {
    goto LABEL_58;
  }
  if (v57)
  {
    if (v11 == INFINITY)
    {
      float v11 = v32;
    }
    else if (v32 != INFINITY)
    {
      if (v11 <= v32)
      {
        float v37 = expf(-(float)(v32 - v11));
        float v11 = v11 - logf(v37 + 1.0);
      }
      else
      {
        float v35 = expf(-(float)(v11 - v32));
        float v11 = v32 - logf(v35 + 1.0);
      }
    }
LABEL_58:
    float v32 = v12;
    goto LABEL_74;
  }
  float v33 = NAN;
  if (*(float *)&v58 != -INFINITY && v32 != -INFINITY)
  {
    if (*(float *)&v58 == INFINITY || v32 == INFINITY) {
      float v33 = INFINITY;
    }
    else {
      float v33 = v32 + *(float *)&v58;
    }
  }
  if (v12 != INFINITY)
  {
    if (v32 == INFINITY)
    {
      float v32 = v12;
    }
    else if (v12 <= v32)
    {
      float v38 = expf(-(float)(v32 - v12));
      float v32 = v12 - logf(v38 + 1.0);
    }
    else
    {
      float v36 = expf(-(float)(v12 - v32));
      float v32 = v32 - logf(v36 + 1.0);
    }
  }
  v52.n128_u32[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
  v51.n128_u32[0] = 2139095040;
  if (v52.n128_f32[0] == INFINITY) {
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
  }
  uint64_t v39 = *a1;
  v40.n128_f32[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
  if (v40.n128_f32[0] >= v33) {
    float v41 = v33;
  }
  else {
    float v41 = v40.n128_f32[0];
  }
  BOOL v43 = v33 == -INFINITY || v40.n128_f32[0] == -INFINITY;
  v40.n128_u32[0] = 2143289344;
  if (!v43) {
    v40.n128_f32[0] = v41;
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v39 + 184))(v39, a2, v40);
  --*(_DWORD *)(a1[5] + 4 * v10);
  (*(void (**)(void, unint64_t, float))(*(void *)*a1 + 184))(*a1, v9, INFINITY);
LABEL_74:
  v52.n128_f32[0] = v32;
  v51.n128_u32[0] = 2139095040;
  v31.n128_f32[0] = v32;
  if (v32 != INFINITY)
  {
    v52.n128_f32[0] = v11;
    v51.n128_u32[0] = 2139095040;
    v31.n128_f32[0] = v11;
    if (v11 == INFINITY)
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v58));
      HIDWORD(v58) = *((_DWORD *)a1 + 2);
      (*(void (**)(__n128))(*(void *)*a1 + 296))(v31);
      (*(void (**)(unint64_t, uint64_t))(*(void *)v52.n128_u64[0] + 64))(v52.n128_u64[0], a3);
      (*(void (**)(unint64_t, uint64_t *))(*(void *)v52.n128_u64[0] + 88))(v52.n128_u64[0], &v57);
      if (v52.n128_u64[0]) {
        (*(void (**)(unint64_t))(*(void *)v52.n128_u64[0] + 8))(v52.n128_u64[0]);
      }
    }
    else
    {
      float v44 = v11;
      if (v32 != INFINITY)
      {
        if (v11 == INFINITY)
        {
          float v44 = v32;
        }
        else if (v32 <= v11)
        {
          float v46 = expf(-(float)(v11 - v32));
          float v44 = v32 - logf(v46 + 1.0);
        }
        else
        {
          float v45 = expf(-(float)(v32 - v11));
          float v44 = v11 - logf(v45 + 1.0);
        }
      }
      float v47 = NAN;
      if (v11 != -INFINITY)
      {
        if ((LODWORD(v44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          float v47 = INFINITY;
          if (v11 != INFINITY) {
            float v47 = v11 - v44;
          }
        }
        else
        {
          float v47 = NAN;
        }
      }
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::Reweight(a1, a2, a3, v47);
    }
  }
  long long v48 = v55;
  if (v55 != v54)
  {
    uint64_t v49 = 0;
    unint64_t v50 = 0;
    long long v48 = v54;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * v48[v49].n128_i32[3]);
      (*(void (**)(void, uint64_t, __n128))(*(void *)*a1 + 208))(*a1, a2, v31);
      ++v50;
      long long v48 = v54;
      ++v49;
    }
    while (v50 < v55 - v54);
  }
  if (v48)
  {
    long long v55 = v48;
    operator delete(v48);
  }
}

void sub_1B219B4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsPattern2(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5 = *(float *)&a5;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v10 = a5 >> 32;
  int v11 = *(_DWORD *)(a1[2] + 4 * (a5 >> 32));
  unint64_t v12 = HIDWORD(a5);
  float v13 = (*(float (**)(void, unint64_t))(*(void *)*a1 + 32))(*a1, HIDWORD(a5));
  v25[0] = v13;
  v23[0] = 2139095040;
  if (v13 != INFINITY)
  {
    if (a4) {
      return;
    }
    float v14 = NAN;
    if (v5 != -INFINITY && v13 != -INFINITY)
    {
      BOOL v15 = v5 == INFINITY || v13 == INFINITY;
      float v16 = v13 + v5;
      if (v15) {
        float v14 = INFINITY;
      }
      else {
        float v14 = v16;
      }
    }
    v25[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
    v23[0] = 2139095040;
    if (v25[0] == INFINITY) {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    }
    uint64_t v17 = *a1;
    v18.n128_f32[0] = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
    if (v18.n128_f32[0] >= v14) {
      float v19 = v14;
    }
    else {
      float v19 = v18.n128_f32[0];
    }
    BOOL v21 = v14 == -INFINITY || v18.n128_f32[0] == -INFINITY;
    v18.n128_u32[0] = 2143289344;
    if (!v21) {
      v18.n128_f32[0] = v19;
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v17 + 184))(v17, a2, v18);
    if (v11 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v10);
      (*(void (**)(void, unint64_t, float))(*(void *)*a1 + 184))(*a1, v12, INFINITY);
    }
    goto LABEL_36;
  }
  (*(void (**)(void, unint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, v12, &v26);
  while (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26) + 12) == *((_DWORD *)a1 + 2))
    (*(void (**)(uint64_t))(*(void *)v26 + 40))(v26);
  *(_OWORD *)long long v25 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 32))(v26);
  int CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v27, v25, (uint64_t)v23);
  if (CanCombineArcs)
  {
    if (v11 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v10);
      --*(_DWORD *)(a1[2] + 4 * SLODWORD(v25[3]));
      void v25[3] = *((float *)a1 + 2);
      (*(void (**)(uint64_t, float *))(*(void *)v26 + 88))(v26, v25);
    }
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    ++*(_DWORD *)(a1[2] + 4 * v24);
    (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*a1 + 208))(*a1, a2, v23);
  }
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  if (CanCombineArcs)
  {
LABEL_36:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v10);
    HIDWORD(v28) = *((_DWORD *)a1 + 2);
    (*(void (**)(void))(*(void *)*a1 + 296))(*a1);
    (*(void (**)(void, uint64_t))(**(void **)v25 + 64))(*(void *)v25, a3);
    (*(void (**)(void, uint64_t *))(**(void **)v25 + 88))(*(void *)v25, &v27);
    if (*(void *)v25) {
      (*(void (**)(void))(**(void **)v25 + 8))(*(void *)v25);
    }
  }
}

void sub_1B219BA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::Reweight(void *a1, uint64_t a2, uint64_t a3, float a4)
{
  (*(void (**)(void, uint64_t, uint64_t *))(*(void *)*a1 + 296))(*a1, a2, &v17);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 64))(v17, a3);
  __n128 v7 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
  __n128 v16 = v7;
  v7.n128_u32[0] = v7.n128_u32[2];
  float v8 = NAN;
  if (v7.n128_f32[2] != -INFINITY && a4 != -INFINITY)
  {
    float v8 = INFINITY;
    BOOL v9 = v16.n128_f32[2] == INFINITY || a4 == INFINITY;
    v7.n128_f32[0] = a4 + v16.n128_f32[2];
    if (!v9) {
      float v8 = a4 + v16.n128_f32[2];
    }
  }
  v16.n128_f32[2] = v8;
  (*(void (**)(uint64_t, __n128 *, __n128))(*(void *)v17 + 88))(v17, &v16, v7);
  (*(void (**)(void, void, uint64_t *))(*(void *)*a1 + 296))(*a1, v16.n128_u32[3], &v15);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v15 + 24))(v15))
  {
    *(_OWORD *)float v14 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
    if (LODWORD(v14[3]) != *((_DWORD *)a1 + 2))
    {
      float v10 = v14[2] - a4;
      if (v14[2] == INFINITY) {
        float v10 = INFINITY;
      }
      if (v14[2] == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
        float v10 = NAN;
      }
      v14[2] = v10;
      (*(void (**)(uint64_t, float *))(*(void *)v15 + 88))(v15, v14);
    }
    (*(void (**)(uint64_t))(*(void *)v15 + 40))(v15);
  }
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  float v11 = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v16.n128_u32[3]);
  v14[0] = v11;
  LODWORD(v15) = 2139095040;
  if (v11 != INFINITY)
  {
    if (v11 == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      float v12 = NAN;
    }
    else
    {
      float v12 = INFINITY;
      if (v11 != INFINITY) {
        float v12 = v11 - a4;
      }
    }
    (*(void (**)(void, void, float))(*(void *)*a1 + 184))(*a1, v16.n128_u32[3], v12);
  }
  uint64_t result = v17;
  if (v17) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  return result;
}

void sub_1B219BE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(void *a1)
{
  *a1 = &unk_1F0A45008;
  int v2 = (_DWORD *)a1[1];
  if (v2)
  {
    int v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 72) + 112);
}

float fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 72) + 80) + 20 * a2);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 72) + 80) + 20 * a2 + 8);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 72) + 80) + 20 * a2 + 12);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 72) + 80) + 20 * a2 + 16);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    __n128 v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void std::vector<quasar::DataFeed>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 160;
        std::allocator<quasar::DataFeed>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

quasar::DataFeed *std::vector<quasar::DataFeed>::__init_with_size[abi:ne180100]<quasar::DataFeed*,quasar::DataFeed*>(quasar::DataFeed *result, quasar::DataFeed *a2, quasar::DataFeed *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::DataFeed>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeed>,quasar::DataFeed*,quasar::DataFeed*,quasar::DataFeed*>((uint64_t)v6 + 16, a2, a3, *((quasar::DataFeed **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_1B219C184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::DataFeed>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

quasar::DataFeed *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeed>,quasar::DataFeed*,quasar::DataFeed*,quasar::DataFeed*>(uint64_t a1, quasar::DataFeed *a2, quasar::DataFeed *a3, quasar::DataFeed *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  float v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::DataFeed::DataFeed(v4, v6);
      uint64_t v6 = (const quasar::DataFeed *)((char *)v6 + 160);
      uint64_t v4 = (quasar::DataFeed *)((char *)v11 + 160);
      float v11 = (quasar::DataFeed *)((char *)v11 + 160);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B219C288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>::operator()[abi:ne180100](uint64_t *a1)
{
  int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 160;
      std::allocator<quasar::DataFeed>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeed>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeed>,0>(uint64_t a1)
{
  int v2 = (void **)(a1 + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a1 + 136);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v3 = v2;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [5],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((void *)v3 + 1))
        {
          if (v6 == -1) {
LABEL_14:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          __n128 v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6)) {
            return v3;
          }
        }
      }
      else if (v6 == v3[23])
      {
        __n128 v7 = v3;
        if (v6 == -1) {
          goto LABEL_14;
        }
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B219C760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B219C80C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<quasar::SpokenFormLine>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::MatcherFst()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "olabel_lookahead");
  fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::CreateImpl();
}

void sub_1B219C928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::CreateImpl()
{
}

void sub_1B219C994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~MatcherFst(void *a1)
{
  fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::Copy()
{
}

void sub_1B219CA54(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::Write(uint64_t a1, void *a2, uint64_t a3)
{
  return fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::Write(*(void *)(a1 + 8), a2, a3);
}

uint64_t fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 72);
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 96);
  return result;
}

uint64_t fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::InitArcIterator(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(result + 8) + 72) + 80) + 20 * a2;
  uint64_t v5 = *(unsigned int *)(v3 + 4);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(result + 8) + 72) + 88) + 16 * v5;
  *a3 = 0;
  a3[1] = v6;
  a3[2] = v4;
  a3[3] = 0;
  return result;
}

void fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::InitMatcher()
{
}

void sub_1B219CB34(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C406C04B374);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToExpandedFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 72) + 96);
}

void fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::CreateImpl(uint64_t a1)
{
  int v2 = 0;
  long long v3 = xmmword_1B259E3F0;
  uint64_t v1 = &unk_1F0A3F228;
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher((uint64_t)&v4, a1, 0, 1);
}

void sub_1B219CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::SetAddOn(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 80);
  if (result != a2)
  {
    if (result)
    {
      int v5 = *(_DWORD *)(result + 16) - 1;
      *(_DWORD *)(result + 16) = v5;
      if (!v5)
      {
        uint64_t v6 = fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::~AddOnPair((uint64_t *)result);
        uint64_t result = MEMORY[0x1B3EA8670](v6, 0x1020C40EDCEB4C7);
      }
    }
    *(void *)(a1 + 80) = a2;
    if (a2) {
      ++*(_DWORD *)(a2 + 16);
    }
  }
  return result;
}

void fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LabelLookAheadMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = xmmword_1B259E3F0;
  *(void *)a1 = &unk_1F0A3F228;
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(a1 + 32, a2, a3, 1);
}

void sub_1B219CEB4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C40F647C574);
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(v1);
  _Unwind_Resume(a1);
}

void fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(void *a1)
{
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Copy()
{
}

void sub_1B219CF80(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C406C04B374);
  _Unwind_Resume(a1);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Type(uint64_t a1, uint64_t a2)
{
  return fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Type(a1 + 32, a2);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 106)) {
    uint64_t result = a2 | 4;
  }
  else {
    uint64_t result = a2;
  }
  if (*(unsigned char *)(a1 + 198)) {
    return a2 | 4;
  }
  uint64_t v4 = *(void *)(a1 + 184);
  if (v4)
  {
    if (*(unsigned char *)(v4 + 113) || *(unsigned char *)(*(void *)(v4 + 88) + 48)) {
      return a2 | 4;
    }
  }
  return result;
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Flags(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 184);
  if (!v1) {
    return 0;
  }
  if (**(unsigned char **)(v1 + 80)) {
    return 1776;
  }
  return 1760;
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 192) != a2)
  {
    *(_DWORD *)(result + 192) = a2;
    *(_WORD *)(result + 196) = 0;
  }
  return result;
}

BOOL fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Done_(uint64_t a1)
{
  return fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Done(a1 + 32);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    return a1 + 88;
  }
  else {
    return **(void **)(a1 + 56) + 16 * *(void *)(*(void *)(a1 + 56) + 16);
  }
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 104)) {
    *(unsigned char *)(result + 104) = 0;
  }
  else {
    ++*(void *)(*(void *)(result + 56) + 16);
  }
  return result;
}

float fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Final_(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 80) + 20 * a2);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Priority_(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 80) + 20 * a2 + 8);
}

void fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::InitLookAheadFst(void *a1, uint64_t a2, char a3)
{
  a1[22] = a2;
  if (a1[23])
  {
    BOOL v6 = (*(uint64_t (**)(void *, void))(*a1 + 24))(a1, 0) == 1;
    uint64_t v7 = a1[23];
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::ReachInit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v7, a2, v6, a3);
  }
}

void fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_1F0A39388;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 74) = 0;
  fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::MemoryPool((void *)(a1 + 80), 1);
}

void sub_1B219D2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::~MemoryPool(v18);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(void *)a1 = &unk_1F0A36C20;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F0A36C20;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena((void *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(void *a1)
{
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Copy()
{
}

void sub_1B219D40C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Type(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3) {
    return 3;
  }
  if (v2) {
    uint64_t v6 = 0x40000000;
  }
  else {
    uint64_t v6 = 0x10000000;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v8 = 3221225472;
  }
  else {
    uint64_t v8 = 805306368;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v10 = 0x80000000;
  if (!v2) {
    uint64_t v10 = 0x20000000;
  }
  if ((v9 & v10) != 0) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 74)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return a1 + 56;
  }
  else {
    return **(void **)(a1 + 24) + 16 * *(void *)(*(void *)(a1 + 24) + 16);
  }
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 72)) {
    *(unsigned char *)(result + 72) = 0;
  }
  else {
    ++*(void *)(*(void *)(result + 24) + 16);
  }
  return result;
}

float fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Final_(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 20 * a2);
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Priority_(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 20 * a2 + 8);
}

void fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::MemoryPool(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A36C20;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::MemoryArena(a1 + 1, a2);
}

void sub_1B219D5D0(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Size()
{
  return 24;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::MemoryArena(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A37BD8;
  a1[1] = 32 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_1B219D6E4(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena(void *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  uint64_t vars8;

  *a1 = &unk_1F0A37BD8;
  int v2 = a1 + 3;
  for (uint64_t i = (void *)a1[4]; i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
    }
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::Size()
{
  return 32;
}

void fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A39388;
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 88))(*(void *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::MemoryPool((void *)(a1 + 80), 1);
}

void fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SetState(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) != a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if (*(_DWORD *)(a1 + 32) == 3)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      }
      uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      int v5 = (void *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      *(unsigned char *)(a1 + 74) = 1;
    }
    uint64_t v6 = *(void **)(a1 + 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 20 * a2;
      void *v6 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 88) + 16 * *(unsigned int *)(v7 + 4);
      uint64_t v8 = *(unsigned int *)(v7 + 8);
      v6[1] = v8;
      v6[2] = 0;
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 136);
      if (v9)
      {
        *(void *)(a1 + 136) = v9[3];
      }
      else
      {
        uint64_t v9 = (void *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::Allocate((void *)(a1 + 88), 1);
        v9[3] = 0;
      }
      uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 80) + 20 * a2;
      *uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 88) + 16 * *(unsigned int *)(v10 + 4);
      uint64_t v8 = *(unsigned int *)(v10 + 8);
      v9[1] = v8;
      v9[2] = 0;
      *(void *)(a1 + 24) = v9;
    }
    *(void *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 68) = a2;
  }
}

void sub_1B219D9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Find(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 73) = 1;
  if (*(unsigned char *)(a1 + 74))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    return result;
  }
  BOOL result = a2 == 0;
  *(unsigned char *)(a1 + 72) = result;
  if (a2 == -1) {
    int v4 = 0;
  }
  else {
    int v4 = a2;
  }
  *(_DWORD *)(a1 + 40) = v4;
  int v5 = *(_DWORD *)(a1 + 32);
  if (v4 < *(_DWORD *)(a1 + 36))
  {
    uint64_t v6 = *(int ***)(a1 + 24);
    uint64_t v7 = v6[1];
    if (v7)
    {
      unint64_t v8 = 0;
      uint64_t v9 = *v6;
      while (1)
      {
        uint64_t v10 = v9 + 1;
        if (!v5) {
          uint64_t v10 = v9;
        }
        int v11 = *v10;
        BOOL v12 = v11 == v4;
        int v13 = v11 <= v4 ? 0 : 7;
        if (v12) {
          int v13 = 1;
        }
        if (v13) {
          break;
        }
        ++v8;
        v9 += 4;
        if (v7 == (int *)v8)
        {
          unint64_t v8 = (unint64_t)v6[1];
          goto LABEL_34;
        }
      }
      if (v13 == 1)
      {
        v6[2] = (int *)v8;
        return 1;
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(a1 + 48);
  uint64_t v6 = *(int ***)(a1 + 24);
  unint64_t v8 = 0;
  if (!v14)
  {
LABEL_34:
    v6[2] = (int *)v8;
    return result;
  }
  uint64_t v15 = *v6;
  while (1)
  {
    unint64_t v16 = (v8 + v14) >> 1;
    float v17 = &v15[4 * v16];
    if (v5) {
      ++v17;
    }
    int v18 = *v17;
    if (v18 <= v4) {
      break;
    }
    unint64_t v14 = (v8 + v14) >> 1;
LABEL_29:
    if (v8 >= v14) {
      goto LABEL_34;
    }
  }
  if (v18 < v4)
  {
    unint64_t v8 = v16 + 1;
    goto LABEL_29;
  }
  v6[2] = (int *)v16;
  unint64_t v19 = ((8 * (v14 + v8)) & 0xFFFFFFFFFFFFFFF0) - 16;
  unint64_t v20 = v15;
  while (v16 > v8)
  {
    v6[2] = (int *)--v16;
    unint64_t v21 = (int *)((char *)v15 + v19);
    if (v5) {
      unint64_t v21 = (int *)((char *)v20 + v19 + 4);
    }
    else {
      unint64_t v20 = v15;
    }
    v19 -= 16;
    if (*v21 != v4)
    {
      v6[2] = (int *)(v16 + 1);
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Done(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  int v2 = *(void **)(a1 + 24);
  unint64_t v3 = v2[2];
  if (v3 >= v2[1]) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 73)) {
    return 0;
  }
  int v4 = (_DWORD *)(*v2 + 16 * v3);
  if (*(_DWORD *)(a1 + 32)) {
    ++v4;
  }
  return *v4 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)BOOL result = 0;
  *(_DWORD *)(result + 8) = -1;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(void *)(result + 80) = a2;
  if (!a3) {
    operator new();
  }
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 88) = a3;
  *(_WORD *)(result + 112) = 0;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_1B219DCB8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C4057A1BE17);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable()
{
}

void sub_1B219DE9C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C4057A1BE17);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::TransformFst(uint64_t *a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 160))(*a1);
  uint64_t v40 = 0;
  std::vector<long>::vector(&__p, v2, &v40);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v37 = v2;
    do
    {
      uint64_t v4 = *a1;
      uint64_t v40 = (uint64_t)&unk_1F0A3E910;
      unint64_t v43 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v4);
      uint64_t v5 = *(void *)(v4 + 8);
      unint64_t v6 = *(void *)(*(void *)(v5 + 64) + 8 * v3);
      unint64_t v41 = v6;
      uint64_t v42 = v5 + 8;
      for (unint64_t i = v43; ; unint64_t i = ++v43)
      {
        uint64_t v8 = *(void *)(v6 + 24);
        if (i >= (*(void *)(v6 + 32) - v8) >> 4) {
          break;
        }
        __n128 v39 = *(__n128 *)(v8 + 16 * i);
        unsigned __int32 v38 = 0;
        if (*(unsigned char *)a1[10]) {
          uint64_t v9 = &v39;
        }
        else {
          uint64_t v9 = (__n128 *)&v39.n128_u8[4];
        }
        unsigned __int32 v38 = v9->n128_u32[0];
        if (v38)
        {
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 2, (int *)&v38))
          {
            float v47 = (int *)&v38;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(a1 + 2), (int *)&v38, (uint64_t)&std::piecewise_construct, &v47)+ 5) = v2;
            uint64_t v10 = v45;
            if (v45 >= v46)
            {
              BOOL v12 = (char *)__p;
              uint64_t v13 = (v45 - (unsigned char *)__p) >> 3;
              unint64_t v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v15 = v46 - (unsigned char *)__p;
              if ((v46 - (unsigned char *)__p) >> 2 > v14) {
                unint64_t v14 = v15 >> 2;
              }
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v16 = v14;
              }
              if (v16)
              {
                float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v16);
                BOOL v12 = (char *)__p;
                uint64_t v10 = v45;
              }
              else
              {
                float v17 = 0;
              }
              int v18 = &v17[8 * v13];
              *(void *)int v18 = 0;
              int v11 = v18 + 8;
              while (v10 != v12)
              {
                uint64_t v19 = *((void *)v10 - 1);
                v10 -= 8;
                *((void *)v18 - 1) = v19;
                v18 -= 8;
              }
              std::string __p = v18;
              float v45 = v11;
              float v46 = &v17[8 * v16];
              if (v12) {
                operator delete(v12);
              }
            }
            else
            {
              *(void *)float v45 = 0;
              int v11 = v10 + 8;
            }
            float v45 = v11;
            ++v2;
          }
          float v47 = (int *)&v38;
          v39.n128_u32[3] = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(a1 + 2), (int *)&v38, (uint64_t)&std::piecewise_construct, &v47)+ 5);
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v40, &v39);
          unint64_t v6 = v41;
        }
        ++*((void *)__p + v39.n128_i32[3]);
      }
      float v20 = (*(float (**)(uint64_t, uint64_t))(*(void *)*a1 + 32))(*a1, v3);
      *(float *)&uint64_t v40 = v20;
      v39.n128_u32[0] = 2139095040;
      if (v20 != INFINITY)
      {
        if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 2, &fst::kNoLabel))
        {
          uint64_t v40 = (uint64_t)&fst::kNoLabel;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(a1 + 2), &fst::kNoLabel, (uint64_t)&std::piecewise_construct, (_DWORD **)&v40)+ 5) = v2;
          unint64_t v21 = v45;
          if (v45 >= v46)
          {
            uint64_t v23 = (char *)__p;
            uint64_t v24 = (v45 - (unsigned char *)__p) >> 3;
            unint64_t v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = v46 - (unsigned char *)__p;
            if ((v46 - (unsigned char *)__p) >> 2 > v25) {
              unint64_t v25 = v26 >> 2;
            }
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v27);
              uint64_t v23 = (char *)__p;
              unint64_t v21 = v45;
            }
            else
            {
              uint64_t v28 = 0;
            }
            unint64_t v29 = &v28[8 * v24];
            *(void *)unint64_t v29 = 0;
            size_t v22 = v29 + 8;
            while (v21 != v23)
            {
              uint64_t v30 = *((void *)v21 - 1);
              v21 -= 8;
              *((void *)v29 - 1) = v30;
              v29 -= 8;
            }
            std::string __p = v29;
            float v45 = v22;
            float v46 = &v28[8 * v27];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            *(void *)float v45 = 0;
            size_t v22 = v21 + 8;
          }
          float v45 = v22;
          ++v2;
        }
        v39.n128_u64[0] = (unint64_t)&fst::kNoLabel;
        unsigned int v31 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(a1 + 2), &fst::kNoLabel, (uint64_t)&std::piecewise_construct, &v39)+ 5);
        uint64_t v40 = -1;
        unint64_t v41 = __PAIR64__(v31, LODWORD(v20));
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)*a1 + 208))(*a1, v3, &v40);
        ++*((void *)__p + SHIDWORD(v41));
        (*(void (**)(uint64_t, uint64_t, float))(*(void *)*a1 + 184))(*a1, v3, INFINITY);
      }
      ++v3;
    }
    while (v3 != v37);
  }
  while (1)
  {
    int v33 = (*(uint64_t (**)(void))(*(void *)*a1 + 160))();
    long long v34 = *(uint64_t (**)(void))(*(void *)*a1 + 200);
    if (v33 >= v2) {
      break;
    }
    uint64_t v32 = v34();
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)*a1 + 184))(*a1, v32, 0.0);
  }
  uint64_t v35 = v34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)*a1 + 176))(*a1, v35);
  if ((int)v35 >= 1)
  {
    uint64_t v36 = 0;
    do
    {
      if (!*((void *)__p + v36))
      {
        uint64_t v40 = 0;
        LODWORD(v41) = 0;
        HIDWORD(v41) = v36;
        (*(void (**)(uint64_t, void, uint64_t *))(*(void *)*a1 + 208))(*a1, v35, &v40);
      }
      ++v36;
    }
    while (v35 != v36);
  }
  if (__p)
  {
    float v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B219E4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::FindIntervals(uint64_t a1, int a2)
{
  fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::StateReachable((uint64_t)v30, *(void *)a1);
  if (v35)
  {
    *(unsigned char *)(a1 + 113) = 1;
  }
  else
  {
    uint64_t v4 = (uint64_t *)(*(void *)(a1 + 80) + 56);
    if (v4 != &v31) {
      std::vector<fst::IntervalSet<int>>::__assign_with_size[abi:ne180100]<fst::IntervalSet<int>*,fst::IntervalSet<int>*>((uint64_t *)(*(void *)(a1 + 80) + 56), v31, v32, (v32 - v31) >> 5);
    }
    uint64_t v5 = a2;
    std::vector<fst::IntervalSet<int>>::resize(v4, a2);
    uint64_t v6 = fst::LabelReachableData<int>::Label2Index(*(void *)(a1 + 80));
    uint64_t v7 = *(uint64_t **)(a1 + 32);
    if (v7)
    {
      uint64_t v8 = v6;
      do
      {
        uint64_t v9 = *((int *)v7 + 5);
        int v29 = *((_DWORD *)v7 + 4);
        int v10 = *((_DWORD *)v33 + v9);
        __p[0] = &v29;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v8, &v29, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5) = v10;
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((void *)(a1 + 16));
    if (a2 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      double v14 = 0.0;
      do
      {
        uint64_t v15 = (*(void *)(*v4 + v11 + 8) - *(void *)(*v4 + v11)) >> 3;
        if ((int)v15 >= 2)
        {
          ++v13;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            unint64_t v16 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
            float v17 = (void *)fst::cerr(v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"state: ", 7);
            int v18 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" # of intervals: ", 17);
            std::ostream::operator<<();
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
            if (v28 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        double v14 = v14 + (double)(int)v15;
        ++v12;
        v11 += 32;
      }
      while (v5 != v12);
    }
    if (FLAGS_v > 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v19 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
      float v20 = (void *)fst::cerr(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"# of states: ", 13);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        unint64_t v21 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        size_t v22 = (void *)fst::cerr(v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"# of intervals: ", 16);
        std::ostream::operator<<();
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          uint64_t v23 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
          uint64_t v24 = (void *)fst::cerr(v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"# of intervals/state: ", 22);
          std::ostream::operator<<();
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
          if (FLAGS_v >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            unint64_t v25 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
            uint64_t v26 = (void *)fst::cerr(v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"# of non-interval states: ", 26);
            std::ostream::operator<<();
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
            if (v28 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
    }
  }
  if (v33)
  {
    long long v34 = v33;
    operator delete(v33);
  }
  __p[0] = &v31;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1B219E8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, char a17, __int16 a18, char a19, char a20)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~StateReachable((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void *std::vector<long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B219E984(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::IntervalSet<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          uint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<fst::IntervalSet<int>>::__append(a1, v5);
  }
}

uint64_t fst::LabelReachableData<int>::Label2Index(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
    uint64_t v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"LabelReachableData: no relabeling data", 38);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  return a1 + 16;
}

void sub_1B219EAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~StateReachable(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)(a1 + 8);
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

uint64_t fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::StateReachable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x800000000, 1)) {
    fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CyclicStateReachable();
  }
  fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::AcyclicStateReachable(a1, a2);
  return a1;
}

void sub_1B219EC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)(v2 + 32);
  if (v4)
  {
    *(void *)(v2 + 40) = v4;
    operator delete(v4);
  }
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::AcyclicStateReachable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  uint64_t v5 = *(void *)(a1 + 32);
  char v6 = (uint64_t *)(a1 + 8);
  v9[0] = a2;
  v9[1] = v6;
  v9[2] = v4;
  if (v5 == *(void *)(v4 + 8)) {
    int v7 = 1;
  }
  else {
    int v7 = -1;
  }
  int v10 = v7;
  char v11 = 0;
  std::vector<std::pair<std::vector<int>,float>>::__clear[abi:ne180100](v6);
  uint64_t result = fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (uint64_t)v9);
  if (v11) {
    *(unsigned char *)(a1 + 56) = 1;
  }
  return result;
}

void fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CyclicStateReachable()
{
}

void sub_1B219F028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v27 - 84));
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~StateReachable((uint64_t)&a18);
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v27 - 104));
  _Unwind_Resume(a1);
}

uint64_t fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 28) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    memset(&v7, 0, sizeof(v7));
    long long v5 = 0u;
    long long v6 = 0u;
    long long v4 = 0u;
    fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(v3, 64);
  }
  return result;
}

void sub_1B219F8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  char v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitState(void *a1, uint64_t a2)
{
  unint64_t v4 = (int)a2;
  long long v5 = (uint64_t *)a1[1];
  if ((int)a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    do
    {
      std::string __p = 0;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      int v60 = -1;
      std::vector<fst::IntervalSet<int>>::push_back[abi:ne180100](v5, (uint64_t)&__p);
      if (__p)
      {
        uint64_t v58 = __p;
        operator delete(__p);
      }
      long long v5 = (uint64_t *)a1[1];
    }
    while (v4 >= (v5[1] - *v5) >> 5);
  }
  uint64_t v6 = a1[2];
  uint64_t v8 = (_DWORD **)(v6 + 8);
  std::vector<char> v7 = *(_DWORD **)(v6 + 8);
  uint64_t v9 = *(_DWORD **)v6;
  for (unint64_t i = ((uint64_t)v7 - *(void *)v6) >> 2; i <= v4; unint64_t i = ((uint64_t)v7 - *(void *)v6) >> 2)
  {
    unint64_t v11 = *(void *)(v6 + 16);
    if ((unint64_t)v7 >= v11)
    {
      unint64_t v13 = i + 1;
      if ((i + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v11 - (void)v9;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6 + 16, v15);
        std::vector<char> v7 = *v8;
        uint64_t v9 = *(_DWORD **)v6;
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = &v16[4 * i];
      *(_DWORD *)uint64_t v17 = -1;
      uint64_t v12 = v17 + 4;
      while (v7 != v9)
      {
        int v18 = *--v7;
        *((_DWORD *)v17 - 1) = v18;
        v17 -= 4;
      }
      *(void *)uint64_t v6 = v17;
      *uint64_t v8 = v12;
      *(void *)(v6 + 16) = &v16[4 * v15];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *std::vector<char> v7 = -1;
      uint64_t v12 = v7 + 1;
    }
    *uint64_t v8 = v12;
    uint64_t v6 = a1[2];
    uint64_t v8 = (_DWORD **)(v6 + 8);
    std::vector<char> v7 = *(_DWORD **)(v6 + 8);
    uint64_t v9 = *(_DWORD **)v6;
  }
  LODWORD(__p) = (*(float (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, a2);
  int v61 = 2139095040;
  if (*(float *)&__p == INFINITY) {
    return 1;
  }
  uint64_t v19 = (void **)(*(void *)a1[1] + 32 * v4);
  uint64_t v20 = *((unsigned int *)a1 + 6);
  if ((v20 & 0x80000000) == 0)
  {
    uint64_t v21 = v20 + 1;
    unint64_t v22 = (unint64_t)v19[2];
    uint64_t v23 = (uint64_t *)v19[1];
    if ((unint64_t)v23 < v22)
    {
      uint64_t *v23 = v20 | (v21 << 32);
      uint64_t v24 = v23 + 1;
LABEL_47:
      v19[1] = v24;
      int v41 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = v41 + 1;
      *(_DWORD *)(*(void *)a1[2] + 4 * v4) = v41;
      return 1;
    }
    uint64_t v27 = ((char *)v23 - (unsigned char *)*v19) >> 3;
    if (!((unint64_t)(v27 + 1) >> 61))
    {
      uint64_t v28 = v22 - (void)*v19;
      uint64_t v29 = v28 >> 2;
      if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
        uint64_t v29 = v27 + 1;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30) {
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v19 + 2), v30);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v36 = &v31[8 * v27];
      uint64_t v37 = &v31[8 * v30];
      *(void *)uint64_t v36 = v20 | (v21 << 32);
      uint64_t v24 = v36 + 8;
      __n128 v39 = (char *)*v19;
      unsigned __int32 v38 = (char *)v19[1];
      if (v38 != *v19)
      {
        do
        {
          uint64_t v40 = *((void *)v38 - 1);
          v38 -= 8;
          *((void *)v36 - 1) = v40;
          v36 -= 8;
        }
        while (v38 != v39);
        unsigned __int32 v38 = (char *)*v19;
      }
      fst *v19 = v36;
      v19[1] = v24;
      std::locale v19[2] = v37;
      if (v38) {
        operator delete(v38);
      }
      goto LABEL_47;
    }
LABEL_74:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if ((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a2))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    }
    unint64_t v25 = fst::LogMessage::LogMessage((fst *)&v61, (uint64_t)&__p);
    uint64_t v26 = (void *)fst::cerr(v25);
    unint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"IntervalReachVisitor: state2index map must be empty ", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"for this FST", 12);
  }
  else
  {
    uint64_t v32 = *(unsigned int *)(*(void *)a1[2] + 4 * v4);
    if ((v32 & 0x80000000) == 0)
    {
      uint64_t v33 = v32 + 1;
      unint64_t v34 = (unint64_t)v19[2];
      char v35 = (char *)v19[1];
      if ((unint64_t)v35 < v34)
      {
        *(void *)char v35 = v32 | (v33 << 32);
        v19[1] = v35 + 8;
        return 1;
      }
      uint64_t v46 = (v35 - (unsigned char *)*v19) >> 3;
      unint64_t v47 = v46 + 1;
      if (!((unint64_t)(v46 + 1) >> 61))
      {
        uint64_t v48 = v34 - (void)*v19;
        if (v48 >> 2 > v47) {
          unint64_t v47 = v48 >> 2;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49) {
          unint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v19 + 2), v49);
        }
        else {
          unint64_t v50 = 0;
        }
        __n128 v51 = &v50[8 * v46];
        __n128 v52 = &v50[8 * v49];
        *(void *)__n128 v51 = v32 | (v33 << 32);
        uint64_t v53 = v51 + 8;
        long long v55 = (char *)*v19;
        long long v54 = (char *)v19[1];
        if (v54 != *v19)
        {
          do
          {
            uint64_t v56 = *((void *)v54 - 1);
            v54 -= 8;
            *((void *)v51 - 1) = v56;
            v51 -= 8;
          }
          while (v54 != v55);
          long long v54 = (char *)*v19;
        }
        fst *v19 = v51;
        v19[1] = v53;
        std::locale v19[2] = v52;
        if (v54) {
          operator delete(v54);
        }
        v19[1] = v53;
        return 1;
      }
      goto LABEL_74;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    }
    float v44 = fst::LogMessage::LogMessage((fst *)&v61, (uint64_t)&__p);
    float v45 = (void *)fst::cerr(v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"IntervalReachVisitor: state2index map incomplete", 48);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v61);
  if (SHIBYTE(v59) < 0) {
    operator delete(__p);
  }
  uint64_t result = 0;
  *((unsigned char *)a1 + 28) = 1;
  return result;
}

void sub_1B219FE50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, int a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FinishState(uint64_t a1, int a2, int a3)
{
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0 && (*(float (**)(void))(**(void **)a1 + 32))() != INFINITY) {
    *(_DWORD *)(*(void *)(**(void **)(a1 + 8) + 32 * a2) + 4) = *(_DWORD *)(a1 + 24);
  }
  fst::IntervalSet<int>::Normalize(**(void **)(a1 + 8) + 32 * a2);
  if (a3 != -1)
  {
    uint64_t v6 = **(void **)(a1 + 8);
    fst::IntervalSet<int>::Union((char **)(v6 + 32 * a3), (void **)(v6 + 32 * a2));
  }
}

uint64_t fst::IntervalReachVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::BackArc(uint64_t a1)
{
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  uint64_t v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"IntervalReachVisitor: cyclic input", 34);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 28) = 1;
  return 0;
}

void sub_1B21A0060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::IntervalSet<int>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    uint64_t v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[32 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *((_DWORD *)v14 + 6) = *(_DWORD *)(a2 + 24);
    v16[2] = v14 + 32;
    std::vector<fst::IntervalSet<int>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(void *)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
    uint64_t v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1B21A01B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::IntervalSet<int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>,std::reverse_iterator<fst::IntervalSet<int>*>,std::reverse_iterator<fst::IntervalSet<int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>,std::reverse_iterator<fst::IntervalSet<int>*>,std::reverse_iterator<fst::IntervalSet<int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,std::reverse_iterator<fst::IntervalSet<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<fst::IntervalSet<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void fst::IntervalSet<int>::Normalize(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  unint64_t v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (uint64_t *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,false>(v2, v3, (uint64_t)&v18, v5, 1);
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 == *(void *)a1)
  {
    int v9 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
    int v10 = 0;
    unint64_t v11 = (v7 - *(void *)a1) >> 3;
    do
    {
      char v12 = (int *)(v6 + 8 * v8);
      int v13 = *v12;
      int v14 = v12[1];
      if (*v12 != v14)
      {
        LODWORD(v15) = v10 + 1;
        if (v11 > v10 + 1)
        {
          unint64_t v15 = (int)v15;
          uint64_t v16 = (int *)(v6 + 8 * (int)v15 + 4);
          do
          {
            if (*(v16 - 1) > v14) {
              break;
            }
            int v17 = *v16;
            if (*v16 > v14)
            {
              v12[1] = v17;
              int v14 = v17;
            }
            ++v10;
            ++v15;
            v16 += 2;
          }
          while (v11 > v15);
        }
        *(_DWORD *)(a1 + 24) += v14 - v13;
        *(void *)(v6 + 8 * v9++) = *(void *)v12;
        uint64_t v6 = *(void *)a1;
        uint64_t v7 = *(void *)(a1 + 8);
      }
      uint64_t v8 = ++v10;
      unint64_t v11 = (v7 - v6) >> 3;
    }
    while (v11 > v10);
  }
  std::vector<kaldi::quasar::LmeFst::Stats>::resize(a1, v9);
}

void fst::IntervalSet<int>::Union(char **a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v5 = a1 + 2;
    uint64_t v6 = a1[1];
    do
    {
      if ((unint64_t)v6 >= *v5)
      {
        uint64_t v7 = (v6 - *a1) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v8 = *v5 - (void)*a1;
        uint64_t v9 = v8 >> 2;
        if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
          uint64_t v9 = v7 + 1;
        }
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v5, v10);
        }
        else {
          unint64_t v11 = 0;
        }
        char v12 = &v11[8 * v7];
        *(void *)char v12 = *v2;
        uint64_t v6 = v12 + 8;
        int v14 = *a1;
        int v13 = a1[1];
        if (v13 != *a1)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          int v13 = *a1;
        }
        *a1 = v12;
        a1[1] = v6;
        a1[2] = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v6 = *v2;
        v6 += 8;
      }
      a1[1] = v6;
      ++v2;
    }
    while (v2 != a2[1]);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v23 = *((_DWORD *)a2 - 2);
          if (v23 < *(_DWORD *)v11 || v23 == *(_DWORD *)v11 && *((_DWORD *)a2 - 1) > *(_DWORD *)(v11 + 4))
          {
            uint64_t v24 = *(void *)v11;
            *(void *)uint64_t v11 = *(a2 - 1);
            *(a2 - 1) = v24;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)v11, (int *)(v11 + 8), a2 - 1);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(v11, (int *)(v11 + 8), v11 + 16, (uint64_t)(a2 - 1));
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(v11, (int *)(v11 + 8), v11 + 16, v11 + 24, (uint64_t)(a2 - 1));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if ((uint64_t *)v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,fst::IntervalSet<int>::Interval *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    int v17 = (int *)(v11 + 8 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)v11, (int *)(v11 + 8 * (v15 >> 1)), a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)(v11 + 8), v17 - 2, a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)(v11 + 16), (int *)(v11 + 8 + 8 * v16), a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)v17 - 1, v17, (uint64_t *)(v11 + 8 + 8 * v16));
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)int v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)(v11 + 8 * (v15 >> 1)), (int *)v11, a2 - 1);
      if (a5) {
        goto LABEL_16;
      }
    }
    int v19 = *(_DWORD *)(v11 - 8);
    if (v19 >= *(_DWORD *)v11 && (v19 != *(_DWORD *)v11 || *(_DWORD *)(v11 - 4) <= *(_DWORD *)(v11 + 4)))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::IntervalSet<int>::Interval *,std::__less<void,void> &>((void *)v11, (unint64_t)a2);
      uint64_t v11 = result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::IntervalSet<int>::Interval *,std::__less<void,void> &>((uint64_t *)v11, (unint64_t)a2);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(v11, (uint64_t)v20);
    uint64_t v11 = (uint64_t)(v20 + 1);
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t)(v20 + 1), (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,false>(v10, v20, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v20 + 1);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((void *)v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)v11, a2);
  }
}

void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v5 = v4;
        unint64_t v4 = v2;
        int v6 = *((_DWORD *)v5 + 2);
        if (v6 < *(_DWORD *)v5 || v6 == *(_DWORD *)v5 && *((_DWORD *)v5 + 3) > *((_DWORD *)v5 + 1))
        {
          uint64_t v7 = v5[1];
          v5[1] = *v5;
          uint64_t v8 = result;
          if (v5 != result)
          {
            uint64_t v9 = v3;
            do
            {
              int v10 = *(_DWORD *)((char *)result + v9 - 8);
              if (v10 <= (int)v7)
              {
                if (v10 != v7)
                {
                  uint64_t v8 = v5;
                  goto LABEL_16;
                }
                uint64_t v8 = (void *)((char *)result + v9);
                if (*(_DWORD *)((char *)result + v9 - 4) >= SHIDWORD(v7)) {
                  goto LABEL_16;
                }
              }
              --v5;
              *(void *)((char *)result + v9) = *(void *)((char *)result + v9 - 8);
              v9 -= 8;
            }
            while (v9);
            uint64_t v8 = result;
          }
LABEL_16:
          *uint64_t v8 = v7;
        }
        uint64_t v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    while (result + 1 != a2)
    {
      uint64_t v2 = result++;
      int v3 = *((_DWORD *)v2 + 2);
      if (v3 < *(_DWORD *)v2 || v3 == *(_DWORD *)v2 && *((_DWORD *)v2 + 3) > *((_DWORD *)v2 + 1))
      {
        uint64_t v4 = *result;
        unint64_t v5 = HIDWORD(*result);
        do
        {
          do
          {
            int v6 = v2;
            v2[1] = *v2;
            int v7 = *((_DWORD *)v2-- - 2);
            BOOL v8 = v7 == v4;
          }
          while (v7 > (int)v4);
        }
        while (v8 && *((_DWORD *)v6 - 1) < (int)v5);
        uint64_t *v6 = v4;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t *a1, int *a2, uint64_t *a3)
{
  int v3 = *a2;
  if (*a2 < *(_DWORD *)a1 || v3 == *(_DWORD *)a1 && a2[1] > *((_DWORD *)a1 + 1))
  {
    if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && *((_DWORD *)a3 + 1) > a2[1])
    {
      uint64_t v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      uint64_t v8 = *a1;
      *a1 = *(void *)a2;
      *(void *)a2 = v8;
      if (*(_DWORD *)a3 < (int)v8 || *(_DWORD *)a3 == v8 && *((_DWORD *)a3 + 1) > SHIDWORD(v8))
      {
        *(void *)a2 = *a3;
        *a3 = v8;
        return 2;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && *((_DWORD *)a3 + 1) > a2[1])
  {
    uint64_t v6 = *(void *)a2;
    *(void *)a2 = *a3;
    *a3 = v6;
    if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && a2[1] > *((_DWORD *)a1 + 1))
    {
      uint64_t v7 = *a1;
      *a1 = *(void *)a2;
      *(void *)a2 = v7;
      return 2;
    }
    return 1;
  }
  return 0;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::IntervalSet<int>::Interval *,std::__less<void,void> &>(void *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = HIDWORD(*a1);
  int v4 = *(_DWORD *)(a2 - 8);
  if (v4 > (int)*a1 || v4 == *a1 && *(_DWORD *)(a2 - 4) < (int)v3)
  {
    unint64_t i = a1;
    do
    {
      int v7 = i[2];
      i += 2;
      int v6 = v7;
    }
    while (v7 <= (int)v2 && (v6 != v2 || i[1] >= (int)v3));
  }
  else
  {
    for (unint64_t i = a1 + 1; (unint64_t)i < a2 && *i <= (int)v2 && (*i != v2 || i[1] >= (int)v3); i += 2)
      ;
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 8; v4 > (int)v2 || v4 == v2 && *(_DWORD *)(a2 + 4) < (int)v3; a2 -= 8)
    {
      int v8 = *(_DWORD *)(a2 - 8);
      int v4 = v8;
    }
  }
  while ((unint64_t)i < a2)
  {
    uint64_t v9 = *(void *)i;
    *(void *)unint64_t i = *(void *)a2;
    *(void *)a2 = v9;
    do
    {
      int v11 = i[2];
      i += 2;
      int v10 = v11;
    }
    while (v11 <= (int)v2 && (v10 != v2 || i[1] >= (int)v3));
    do
    {
      do
      {
        int v12 = *(_DWORD *)(a2 - 8);
        a2 -= 8;
        BOOL v13 = v12 == v2;
      }
      while (v12 > (int)v2);
    }
    while (v13 && *(_DWORD *)(a2 + 4) < (int)v3);
  }
  if (i - 2 != (_DWORD *)a1) {
    *a1 = *((void *)i - 1);
  }
  *((void *)i - 1) = v2;
  return i;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::IntervalSet<int>::Interval *,std::__less<void,void> &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unint64_t v4 = HIDWORD(*a1);
  while (1)
  {
    int v5 = a1[v2 + 1];
    if (v5 >= (int)v3 && (v5 != v3 || SHIDWORD(a1[v2 + 1]) <= (int)v4)) {
      break;
    }
    ++v2;
  }
  int v6 = &a1[v2];
  unint64_t v7 = (unint64_t)&a1[v2 + 1];
  if (v2 * 8)
  {
    do
    {
      int v9 = *(_DWORD *)(a2 - 8);
      a2 -= 8;
      int v8 = v9;
    }
    while (v9 >= (int)v3 && (v8 != v3 || *(_DWORD *)(a2 + 4) <= (int)v4));
  }
  else
  {
LABEL_19:
    if (v7 < a2)
    {
      do
      {
        int v11 = *(_DWORD *)(a2 - 8);
        a2 -= 8;
        int v10 = v11;
        if (v11 < (int)v3) {
          break;
        }
        if (v10 != v3) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 4) <= (int)v4 && v7 < a2);
    }
  }
  if (v7 < a2)
  {
    unint64_t v13 = v7;
    unint64_t v14 = a2;
    do
    {
      uint64_t v15 = *(void *)v13;
      *(void *)unint64_t v13 = *(void *)v14;
      v13 += 8;
      *(void *)unint64_t v14 = v15;
      while (*(_DWORD *)v13 < (int)v3 || *(_DWORD *)v13 == v3 && *(_DWORD *)(v13 + 4) > (int)v4)
        v13 += 8;
      do
      {
        int v17 = *(_DWORD *)(v14 - 8);
        v14 -= 8;
        int v16 = v17;
      }
      while (v17 >= (int)v3 && (v16 != v3 || *(_DWORD *)(v14 + 4) <= (int)v4));
    }
    while (v13 < v14);
    int v6 = (uint64_t *)(v13 - 8);
  }
  if (v6 != a1) {
    *a1 = *v6;
  }
  uint64_t *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(_DWORD *)(a2 - 8);
      if (v6 < *(_DWORD *)a1 || v6 == *(_DWORD *)a1 && *(_DWORD *)(a2 - 4) > *(_DWORD *)(a1 + 4))
      {
        uint64_t v7 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)a1, (int *)(a1 + 8), (uint64_t *)(a2 - 8));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, (int *)(a1 + 8), a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, (int *)(a1 + 8), a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      uint64_t v8 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)a1, (int *)(a1 + 8), (uint64_t *)(a1 + 16));
      uint64_t v9 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v9 < *(_DWORD *)v8 || *(_DWORD *)v9 == *(_DWORD *)v8 && *(_DWORD *)(v9 + 4) > *(_DWORD *)(v8 + 4))
    {
      uint64_t v12 = *(void *)v9;
      *(void *)uint64_t v9 = *(void *)v8;
      unint64_t v13 = (void *)a1;
      if (v8 != a1)
      {
        uint64_t v14 = v10;
        while (1)
        {
          int v15 = *(_DWORD *)(a1 + v14 + 8);
          if (v15 <= (int)v12)
          {
            if (v15 != v12)
            {
              unint64_t v13 = (void *)v8;
              goto LABEL_20;
            }
            if (*(_DWORD *)(a1 + v14 + 12) >= SHIDWORD(v12)) {
              break;
            }
          }
          v8 -= 8;
          *(void *)(a1 + v14 + 16) = *(void *)(a1 + v14 + 8);
          v14 -= 8;
          if (v14 == -16)
          {
            unint64_t v13 = (void *)a1;
            goto LABEL_20;
          }
        }
        unint64_t v13 = (void *)(a1 + v14 + 16);
      }
LABEL_20:
      void *v13 = v12;
      if (++v11 == 8) {
        return v9 + 8 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 8;
    v9 += 8;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((uint64_t *)a1, a2, (uint64_t *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 == *(_DWORD *)a3 && *(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 == *a2 && *(_DWORD *)(a3 + 4) > a2[1])
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && a2[1] > *(_DWORD *)(a1 + 4))
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a5 == *(_DWORD *)a4 && *(_DWORD *)(a5 + 4) > *(_DWORD *)(a4 + 4))
  {
    uint64_t v11 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v11;
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 == *(_DWORD *)a3 && *(_DWORD *)(a4 + 4) > *(_DWORD *)(a3 + 4))
    {
      uint64_t v12 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v12;
      if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 == *a2 && *(_DWORD *)(a3 + 4) > a2[1])
      {
        uint64_t v13 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && a2[1] > *(_DWORD *)(a1 + 4))
        {
          uint64_t v14 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *,fst::IntervalSet<int>::Interval *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 3;
    if ((uint64_t)a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(a1 + 8 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 == *(_DWORD *)a1 && *((_DWORD *)v14 + 1) > *(_DWORD *)(a1 + 4))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, a4, v9, (uint64_t *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      int v17 = a2 - 1;
      do
      {
        uint64_t v18 = *(void *)a1;
        int v19 = (uint64_t *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>((_DWORD *)a1, a4, v16);
        if (v17 == v19)
        {
          uint64_t *v19 = v18;
        }
        else
        {
          uint64_t *v19 = *v17;
          uint64_t *v17 = v18;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(a1, (uint64_t)(v19 + 1), a4, ((uint64_t)v19 - a1 + 8) >> 3);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (_DWORD *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[2];
        if (*v8 < v10 || *v8 == v10 && *(_DWORD *)(result + 8 * v7 + 4) > v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      if (*v8 >= *(_DWORD *)a4 && (*v8 != *(_DWORD *)a4 || v8[1] <= *((_DWORD *)a4 + 1)))
      {
        uint64_t v11 = *a4;
        *a4 = *(void *)v8;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v13 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            uint64_t v12 = (_DWORD *)(result + 8 * v7);
            uint64_t v14 = v13 + 2;
            if (v14 < a3)
            {
              int v15 = v12[2];
              if (*v12 < v15 || *v12 == v15 && *(_DWORD *)(result + 8 * v7 + 4) > v12[3])
              {
                v12 += 2;
                uint64_t v7 = v14;
              }
            }
            if (*v12 < (int)v11 || *v12 == v11 && v12[1] > SHIDWORD(v11)) {
              break;
            }
            *(void *)uint64_t v8 = *(void *)v12;
            uint64_t v8 = v12;
            if (v5 < v7) {
              goto LABEL_22;
            }
          }
        }
        uint64_t v12 = v8;
LABEL_22:
        *(void *)uint64_t v12 = v11;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      int v10 = result[2];
      if (*result < v10 || *result == v10 && SHIDWORD(v6[v7]) > result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    void *v6 = *(void *)result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::IntervalSet<int>::Interval *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 8 * (v4 >> 1));
    int v7 = *(_DWORD *)(a2 - 8);
    if (*(_DWORD *)v6 < v7 || *(_DWORD *)v6 == v7 && *(_DWORD *)(result + 8 * v5 + 4) > *(_DWORD *)(a2 - 4))
    {
      uint64_t v8 = *(void *)(a2 - 8);
      *(void *)(a2 - 8) = *v6;
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v10 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          uint64_t v9 = (_DWORD *)(result + 8 * v5);
          if (*v9 >= (int)v8 && (*v9 != v8 || *(_DWORD *)(result + 8 * v5 + 4) <= SHIDWORD(v8))) {
            break;
          }
          void *v6 = *(void *)v9;
          uint64_t v6 = (void *)(result + 8 * v5);
          if (v10 <= 1) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v9 = v6;
LABEL_11:
      *(void *)uint64_t v9 = v8;
    }
  }
  return result;
}

void fst::Condense<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  uint64_t v6 = 0;
  v5[0] = a3;
  v5[1] = 0;
  std::regex_traits<char> v5[2] = 0;
  v5[3] = &v6;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t)v5);
}

void sub_1B21A1AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::IntervalSet<int>>::__assign_with_size[abi:ne180100]<fst::IntervalSet<int>*,fst::IntervalSet<int>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    std::vector<fst::IntervalSet<int>>::__vdeallocate(a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*,fst::IntervalSet<int>*,fst::IntervalSet<int>*>(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v14 = (a1[1] - v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = a2 + 32 * v14;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::IntervalSet<int> *,fst::IntervalSet<int> *,fst::IntervalSet<int> *>((int)&v22, a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*,fst::IntervalSet<int>*,fst::IntervalSet<int>*>(v8, v15, a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::IntervalSet<int> *,fst::IntervalSet<int> *,fst::IntervalSet<int> *>((int)&v23, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    uint64_t v19 = a1[1];
    do
    {
      char v21 = *(void **)(v19 - 32);
      v19 -= 32;
      uint64_t v20 = v21;
      if (v21)
      {
        *(void *)(v18 - 24) = v20;
        operator delete(v20);
      }
      uint64_t v18 = v19;
    }
    while (v19 != v17);
  }
  a1[1] = v17;
}

void sub_1B21A1CA0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B21A1CA8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<fst::IntervalSet<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<std::vector<int>,float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*,fst::IntervalSet<int>*,fst::IntervalSet<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::vector<fst::IntervalSet<int>::Interval,std::allocator<fst::IntervalSet<int>::Interval>>::__init_with_size[abi:ne180100]<fst::IntervalSet<int>::Interval*,fst::IntervalSet<int>::Interval*>((void *)v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B21A1D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<fst::IntervalSet<int>::Interval,std::allocator<fst::IntervalSet<int>::Interval>>::__init_with_size[abi:ne180100]<fst::IntervalSet<int>::Interval*,fst::IntervalSet<int>::Interval*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B21A1E08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<fst::IntervalSet<int>>,fst::IntervalSet<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 32);
      v3 -= 32;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 24) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<fst::IntervalSet<int> *,fst::IntervalSet<int> *,fst::IntervalSet<int> *>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(v5 + 24);
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::vector<fst::IntervalSet<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(_DWORD *)(v7 + 24) = -1;
        v7 += 32;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v17[4] = result;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    uint64_t v16 = &v15[32 * a2];
    do
    {
      *(void *)uint64_t v15 = 0;
      *((void *)v15 + 1) = 0;
      *((void *)v15 + 2) = 0;
      *((_DWORD *)v15 + 6) = -1;
      v15 += 32;
    }
    while (v15 != v16);
    void v17[2] = v16;
    std::vector<fst::IntervalSet<int>>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_1B21A2038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::IntervalSet<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(void *a1)
{
  *a1 = &unk_1F0A39388;
  uint64_t v2 = a1[3];
  if (v2)
  {
    *(void *)(v2 + 24) = a1[17];
    a1[17] = v2;
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  a1[10] = &unk_1F0A36C20;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LabelLookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = xmmword_1B259E3F0;
  *(void *)a1 = &unk_1F0A3F228;
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(a1 + 32, a2 + 32, a3);
}

void sub_1B21A21C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C40F647C574);
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(v1);
  _Unwind_Resume(a1);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  operator new();
}

void sub_1B21A22B4(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Find(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 196))
  {
    fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SetState(a1 + 32, *(_DWORD *)(a1 + 192));
    *(unsigned char *)(a1 + 196) = 1;
  }
  return fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Find(a1 + 32, a2);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::ReachInit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, int a3, char a4)
{
  *(unsigned char *)(a1 + 112) = a3;
  if (a3) {
    uint64_t v7 = 0x10000000;
  }
  else {
    uint64_t v7 = 0x40000000;
  }
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v7, 1))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v8 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    unint64_t v9 = (void *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LabelReachable::ReachInit: fst is not sorted", 44);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 113) = 1;
  }
  fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(*(void *)(a1 + 88), a2, a4);
  if (*(unsigned char *)(*(void *)(a1 + 88) + 48)) {
    *(unsigned char *)(a1 + 113) = 1;
  }
}

void sub_1B21A2444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)v4 != *(void *)(v4 + 8) || *(void *)(a1 + 8) < *(void *)(a1 + 16))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v5 = fst::LogMessage::LogMessage((fst *)&v64, (uint64_t)__p);
    uint64_t v6 = (void *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"FastLogAccumulator: initialization error.", 41);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v64);
    if (SHIBYTE(v61) < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 48) = 1;
    return;
  }
  uint64_t v8 = (void **)(v4 + 24);
  int v9 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
  std::vector<long long>::reserve((void **)(v4 + 24), v9);
  unsigned int v66 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v64);
  uint64_t v10 = 0;
  uint64_t v59 = v4 + 40;
LABEL_12:
  if (!v64)
  {
    if ((int)v66 >= v65) {
      return;
    }
    goto LABEL_17;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v64 + 16))(v64))
  {
    if (v64)
    {
      uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v64 + 24))();
LABEL_18:
      unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v11);
      uint64_t v14 = *(char **)(v4 + 32);
      unint64_t v13 = *(void *)(v4 + 40);
      if (v12 < *(void *)(a1 + 8))
      {
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v17 = (char *)*v8;
          uint64_t v18 = (v14 - (unsigned char *)*v8) >> 3;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v13 - (void)v17;
          if (v20 >> 2 > v19) {
            unint64_t v19 = v20 >> 2;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v59, v21);
            uint64_t v17 = *(char **)(v4 + 24);
            uint64_t v14 = *(char **)(v4 + 32);
          }
          else
          {
            char v22 = 0;
          }
          uint64_t v29 = &v22[8 * v18];
          *(void *)uint64_t v29 = -1;
          uint64_t v15 = v29 + 8;
          while (v14 != v17)
          {
            uint64_t v30 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v29 - 1) = v30;
            v29 -= 8;
          }
          *(void *)(v4 + 24) = v29;
          *(void *)(v4 + 32) = v15;
          *(void *)(v4 + 40) = &v22[8 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(void *)uint64_t v14 = -1;
          uint64_t v15 = v14 + 8;
        }
        *(void *)(v4 + 32) = v15;
        goto LABEL_100;
      }
      if ((unint64_t)v14 >= v13)
      {
        char v23 = (char *)*v8;
        uint64_t v24 = (v14 - (unsigned char *)*v8) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v13 - (void)v23;
        if (v26 >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v59, v27);
          char v23 = *(char **)(v4 + 24);
          uint64_t v14 = *(char **)(v4 + 32);
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v31 = &v28[8 * v24];
        *(void *)uint64_t v31 = v10;
        uint64_t v16 = v31 + 8;
        while (v14 != v23)
        {
          uint64_t v32 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v31 - 1) = v32;
          v31 -= 8;
        }
        *(void *)(v4 + 24) = v31;
        *(void *)(v4 + 32) = v16;
        *(void *)(v4 + 40) = &v28[8 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(void *)uint64_t v14 = v10;
        uint64_t v16 = v14 + 8;
      }
      *(void *)(v4 + 32) = v16;
      unint64_t v34 = *(void **)(v4 + 8);
      unint64_t v33 = *(void *)(v4 + 16);
      if ((unint64_t)v34 >= v33)
      {
        uint64_t v36 = *(void **)v4;
        uint64_t v37 = ((uint64_t)v34 - *(void *)v4) >> 3;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v33 - (void)v36;
        if (v39 >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          int v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4 + 16, v40);
          uint64_t v36 = *(void **)v4;
          unint64_t v34 = *(void **)(v4 + 8);
        }
        else
        {
          int v41 = 0;
        }
        uint64_t v42 = &v41[8 * v37];
        *(void *)uint64_t v42 = 0x7FF0000000000000;
        char v35 = v42 + 8;
        while (v34 != v36)
        {
          uint64_t v43 = *--v34;
          *((void *)v42 - 1) = v43;
          v42 -= 8;
        }
        *(void *)uint64_t v4 = v42;
        *(void *)(v4 + 8) = v35;
        *(void *)(v4 + 16) = &v41[8 * v40];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *unint64_t v34 = 0x7FF0000000000000;
        char v35 = v34 + 1;
      }
      *(void *)(v4 + 8) = v35;
      unint64_t v63 = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 136))(a2, v11, __p);
      uint64_t v44 = 0;
      ++v10;
      double v45 = INFINITY;
      while (1)
      {
        if (__p[0])
        {
          if ((*(unsigned int (**)(void *))(*(void *)__p[0] + 24))(__p[0]))
          {
            if (__p[0])
            {
              (*(void (**)(void))(*(void *)__p[0] + 8))();
              goto LABEL_100;
            }
LABEL_98:
            if (v62) {
              --*v62;
            }
LABEL_100:
            if (v64) {
              (*(void (**)(uint64_t))(*(void *)v64 + 32))(v64);
            }
            else {
              ++v66;
            }
            goto LABEL_12;
          }
          if (__p[0])
          {
            uint64_t v46 = (float *)(*(uint64_t (**)(void))(*(void *)__p[0] + 32))();
            goto LABEL_75;
          }
        }
        else if (v63 >= v61)
        {
          goto LABEL_98;
        }
        uint64_t v46 = (float *)((char *)__p[1] + 16 * v63);
LABEL_75:
        double v47 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(v45, v46[2]);
        double v45 = v47;
        if (!(++v44 % *(void *)(a1 + 16)))
        {
          unint64_t v49 = *(double **)(v4 + 8);
          unint64_t v48 = *(void *)(v4 + 16);
          if ((unint64_t)v49 >= v48)
          {
            __n128 v51 = *(double **)v4;
            uint64_t v52 = ((uint64_t)v49 - *(void *)v4) >> 3;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v54 = v48 - (void)v51;
            if (v54 >> 2 > v53) {
              unint64_t v53 = v54 >> 2;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              uint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4 + 16, v55);
              __n128 v51 = *(double **)v4;
              unint64_t v49 = *(double **)(v4 + 8);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v57 = (double *)&v56[8 * v52];
            *uint64_t v57 = v45;
            unint64_t v50 = v57 + 1;
            while (v49 != v51)
            {
              uint64_t v58 = *((void *)v49-- - 1);
              *((void *)v57-- - 1) = v58;
            }
            *(void *)uint64_t v4 = v57;
            *(void *)(v4 + 8) = v50;
            *(void *)(v4 + 16) = &v56[8 * v55];
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            double *v49 = v47;
            unint64_t v50 = v49 + 1;
          }
          *(void *)(v4 + 8) = v50;
          ++v10;
        }
        if (__p[0]) {
          (*(void (**)(void *))(*(void *)__p[0] + 40))(__p[0]);
        }
        else {
          ++v63;
        }
      }
    }
LABEL_17:
    uint64_t v11 = v66;
    goto LABEL_18;
  }
  if (v64) {
    (*(void (**)(void))(*(void *)v64 + 8))();
  }
}

void sub_1B21A2B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(double a1, float a2)
{
  double v3 = a2;
  if (a1 != INFINITY)
  {
    if (v3 >= a1)
    {
      double v6 = 0.0;
      if (v3 - a1 != INFINITY)
      {
        long double v7 = exp(-(v3 - a1));
        double v6 = log(v7 + 1.0);
      }
      return a1 - v6;
    }
    else
    {
      double v4 = 0.0;
      if (a1 - v3 != INFINITY)
      {
        long double v5 = exp(-(a1 - v3));
        double v4 = log(v5 + 1.0);
      }
      return v3 - v4;
    }
  }
  return v3;
}

BOOL fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LookAheadLabel(uint64_t a1, int a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 184);
  if (!v2) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 197))
  {
    *(_DWORD *)(v2 + 8) = *(_DWORD *)(a1 + 192);
    *(unsigned char *)(a1 + 197) = 1;
  }
  return !*(unsigned char *)(v2 + 113)
      && fst::IntervalSet<int>::Member((void *)(*(void *)(*(void *)(v2 + 80) + 56) + 32 * *(int *)(v2 + 8)), a2);
}

void fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetState(uint64_t a1, int a2)
{
  double v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[3];
  if (a2 >= (unint64_t)((v3[4] - v4) >> 3))
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    double v6 = fst::LogMessage::LogMessage((fst *)&v10, (uint64_t)__p);
    long double v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"FastLogAccumulator::SetState: invalid state id.", 47);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v10);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 8 * a2);
    if (v5 < 0) {
      *(void *)(a1 + 40) = 0;
    }
    else {
      *(void *)(a1 + 40) = *v3 + 8 * v5;
    }
  }
}

void sub_1B21A2DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL fst::IntervalSet<int>::Member(void *a1, int a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v2 >> 3;
  uint64_t v4 = (_DWORD *)*a1;
  do
  {
    unint64_t v5 = v3 >> 1;
    double v6 = &v4[2 * (v3 >> 1)];
    if (*v6 < a2 || *v6 == a2 && v4[2 * v5 + 1] > a2)
    {
      uint64_t v4 = v6 + 2;
      unint64_t v5 = v3 + ~v5;
    }
    unint64_t v3 = v5;
  }
  while (v5);
  return v4 != (_DWORD *)*a1 && *(v4 - 1) > a2;
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LookAheadFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 176) != a2) {
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 112))(a1, a2, 0);
  }
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  uint64_t v6 = *(void *)(a1 + 184);
  if (!v6) {
    return 1;
  }
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(a1 + 192);
  if (a3 != -1)
  {
    fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetState(*(void *)(v6 + 88), a3);
    if (*(unsigned char *)(*(void *)(v6 + 88) + 48)) {
      *(unsigned char *)(v6 + 113) = 1;
    }
  }
  *(unsigned char *)(a1 + 197) = 1;
  uint64_t v24 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 136))(a2, a3, v22);
  if (v22[0]) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)v22[0] + 80))(v22[0], 16, 16);
  }
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 176) + 40))(*(void *)(a1 + 176), a3);
  BOOL v9 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Reach<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v7, v22, 0, v8, 1);
  float v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 176) + 32))(*(void *)(a1 + 176), a3);
  float v26 = v10;
  int v25 = 2139095040;
  if (v10 == INFINITY)
  {
    int v12 = 0;
    if (!v9) {
      goto LABEL_39;
    }
  }
  else
  {
    BOOL v11 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::ReachFinal(*(void *)(a1 + 184));
    int v12 = v11;
    if (!v9)
    {
      if (!v11) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }
  uint64_t v14 = *(void *)(a1 + 184);
  uint64_t v15 = *(void *)(v14 + 56);
  if (*(void *)(v14 + 64) - v15 != 1 || (v12 & 1) != 0)
  {
    float v17 = *(float *)(v14 + 72);
    *(float *)(a1 + 8) = v17;
    if ((v12 & 1) == 0)
    {
LABEL_34:
      int v12 = 0;
      goto LABEL_39;
    }
    if (v10 <= v17) {
      float v18 = v10;
    }
    else {
      float v18 = v17;
    }
    if (v10 == -INFINITY || v17 == -INFINITY) {
      float v10 = NAN;
    }
    else {
      float v10 = v18;
    }
LABEL_33:
    *(float *)(a1 + 8) = v10;
    int v12 = 1;
    goto LABEL_39;
  }
  if (!v22[0])
  {
    uint64_t v24 = *(void *)(v14 + 56);
LABEL_37:
    uint64_t v16 = (_OWORD *)(v22[1] + 16 * v15);
    goto LABEL_38;
  }
  (*(void (**)(void))(*(void *)v22[0] + 64))(v22[0]);
  if (!v22[0])
  {
    uint64_t v15 = v24;
    goto LABEL_37;
  }
  uint64_t v16 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v22[0] + 32))(v22[0]);
LABEL_38:
  *(_OWORD *)(a1 + 12) = *v16;
LABEL_39:
  uint64_t v13 = v9 | v12;
  if (v22[0])
  {
    (*(void (**)(void))(*(void *)v22[0] + 8))(v22[0]);
  }
  else if (v23)
  {
    --*v23;
  }
  return v13;
}

void sub_1B21A3184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _DWORD *a12)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  else if (a12)
  {
    --*a12;
  }
  _Unwind_Resume(exception_object);
}

BOOL fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Reach<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(unsigned char *)(a1 + 113)) {
    return 0;
  }
  BOOL v11 = (int **)(*(void *)(*(void *)(a1 + 80) + 56) + 32 * *(int *)(a1 + 8));
  uint64_t v13 = *v11;
  int v12 = v11[1];
  *(void *)(a1 + 56) = -1;
  uint64_t v14 = (uint64_t *)(a1 + 56);
  double v15 = *(double *)(a1 + 104) + (double)(unint64_t)(((char *)v12 - (char *)v13) >> 3);
  *(double *)(a1 + 96) = *(double *)(a1 + 96) + 1.0;
  *(double *)(a1 + 104) = v15;
  *(void *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 2139095040;
  if (*a2)
  {
    uint64_t v16 = (*(uint64_t (**)(void))(*(void *)*a2 + 72))(*a2);
    if (*a2)
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 80))(*a2, 16, 16);
      if (*a2)
      {
        (*(void (**)(void, uint64_t))(*(void *)*a2 + 64))(*a2, a3);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v16 = 15;
  }
  a2[4] = a3;
LABEL_9:
  float v18 = *v11;
  float v17 = v11[1];
  if (2 * (a4 - a3) >= (unint64_t)(((char *)v17 - (char *)*v11) >> 3))
  {
    while (v18 != v17)
    {
      uint64_t v26 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LowerBound<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a3, a4, *v18);
      uint64_t v27 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LowerBound<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, v26, a4, v18[1]);
      a3 = v27;
      if (v27 > v26)
      {
        if (*v14 < 0) {
          *uint64_t v14 = v26;
        }
        *(void *)(a1 + 64) = v27;
        if (a5)
        {
          if (*a2) {
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 80))(*a2, 4, 15);
          }
          *(float *)(a1 + 72) = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Sum<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*(void *)(a1 + 88), a2, v26, a3, *(float *)(a1 + 72));
        }
      }
      float v17 = v11[1];
      v18 += 2;
    }
  }
  else
  {
    if (*a2)
    {
      if (*(unsigned char *)(a1 + 112)) {
        uint64_t v19 = 1;
      }
      else {
        uint64_t v19 = 2;
      }
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 80))(*a2, v19, 15);
    }
    if (a4 > a3)
    {
      int v20 = -1;
      do
      {
        if (*a2) {
          uint64_t v21 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2);
        }
        else {
          uint64_t v21 = a2[1] + 16 * a2[4];
        }
        if (*(unsigned char *)(a1 + 112)) {
          char v22 = (int *)v21;
        }
        else {
          char v22 = (int *)(v21 + 4);
        }
        int v23 = *v22;
        if (*v22 == v20
          || v23
          && !*(unsigned char *)(a1 + 113)
          && fst::IntervalSet<int>::Member((void *)(*(void *)(*(void *)(a1 + 80) + 56) + 32 * *(int *)(a1 + 8)), v23))
        {
          if (*v14 < 0) {
            *uint64_t v14 = a3;
          }
          *(void *)(a1 + 64) = a3 + 1;
          if (a5)
          {
            if (!*a2 || ((*(uint64_t (**)(void))(*(void *)*a2 + 72))(*a2) & 4) != 0)
            {
              *(float *)(a1 + 72) = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(*(float *)(a1 + 72), *(float *)(v21 + 8));
            }
            else
            {
              if (*a2
                && ((*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 80))(*a2, 4, 15), *a2))
              {
                uint64_t v24 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2);
              }
              else
              {
                uint64_t v24 = a2[1] + 16 * a2[4];
              }
              *(float *)(a1 + 72) = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(*(float *)(a1 + 72), *(float *)(v24 + 8));
              if (!*a2)
              {
                int v20 = v23;
LABEL_47:
                ++a2[4];
                goto LABEL_48;
              }
              if (*(unsigned char *)(a1 + 112)) {
                uint64_t v25 = 1;
              }
              else {
                uint64_t v25 = 2;
              }
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 80))(*a2, v25, 15);
            }
          }
          int v20 = v23;
        }
        if (!*a2) {
          goto LABEL_47;
        }
        (*(void (**)(void))(*(void *)*a2 + 40))(*a2);
LABEL_48:
        ++a3;
      }
      while (a4 != a3);
    }
  }
  if (*a2) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 80))(*a2, v16, 31);
  }
  return *v14 >= 0;
}

BOOL fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::ReachFinal(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 113)) {
    return 0;
  }
  uint64_t v2 = (void *)(*(void *)(*(void *)(a1 + 80) + 56) + 32 * *(int *)(a1 + 8));
  int v3 = fst::LabelReachableData<int>::FinalLabel(*(void *)(a1 + 80));
  return fst::IntervalSet<int>::Member(v2, v3);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LowerBound<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = *a2;
  if (*a2)
  {
    if (*(unsigned char *)(a1 + 112)) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = 2;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 80))(v10, v11, 15);
  }
  while (a3 < a4)
  {
    uint64_t v12 = a4 + a3;
    if (a4 + a3 < 0 != __OFADD__(a4, a3)) {
      ++v12;
    }
    uint64_t v13 = v12 >> 1;
    if (*a2) {
      (*(void (**)(void, uint64_t))(*(void *)*a2 + 64))(*a2, v13);
    }
    else {
      a2[4] = v13;
    }
    uint64_t v14 = *a2;
    if (*(unsigned char *)(a1 + 112))
    {
      if (v14) {
        double v15 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
      }
      else {
        double v15 = (_DWORD *)(a2[1] + 16 * a2[4]);
      }
    }
    else
    {
      if (v14) {
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
      }
      else {
        uint64_t v16 = a2[1] + 16 * a2[4];
      }
      double v15 = (_DWORD *)(v16 + 4);
    }
    if (*v15 <= a5)
    {
      if (*v15 >= a5)
      {
        while (v13 > a3)
        {
          --v13;
          if (*a2) {
            (*(void (**)(void, uint64_t))(*(void *)*a2 + 64))(*a2, v13);
          }
          else {
            a2[4] = v13;
          }
          uint64_t v17 = *a2;
          if (*(unsigned char *)(a1 + 112))
          {
            if (v17) {
              float v18 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
            }
            else {
              float v18 = (_DWORD *)(a2[1] + 16 * a2[4]);
            }
          }
          else
          {
            if (v17) {
              uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
            }
            else {
              uint64_t v19 = a2[1] + 16 * a2[4];
            }
            float v18 = (_DWORD *)(v19 + 4);
          }
          if (*v18 != a5)
          {
            uint64_t v20 = *a2;
            a3 = v13 + 1;
            if (*a2) {
              goto LABEL_39;
            }
            goto LABEL_43;
          }
        }
        goto LABEL_40;
      }
      a3 = v13 + 1;
    }
    else
    {
      a4 = v13;
    }
  }
  uint64_t v20 = *a2;
  if (!*a2)
  {
LABEL_43:
    a2[4] = a3;
    return a3;
  }
LABEL_39:
  (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 64))(v20, a3);
LABEL_40:
  if (*a2) {
    (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 80))(*a2, 15, 15);
  }
  return a3;
}

float fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Sum<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, float a5)
{
  if (*(unsigned char *)(a1 + 48)) {
    return NAN;
  }
  float v5 = a5;
  if (*(void *)(a1 + 40))
  {
    if (a3 <= 0)
    {
      uint64_t v11 = 0;
      uint64_t v10 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = (a3 - 1) / v10 + 1;
    }
    uint64_t v12 = a4 / v10;
    uint64_t v13 = v10 * v11;
    uint64_t v14 = a4 / v10 * v10;
  }
  else
  {
    uint64_t v12 = -1;
    uint64_t v13 = a4;
    uint64_t v14 = a4;
    uint64_t v11 = -1;
  }
  if (v13 > a3)
  {
    uint64_t v15 = v13 >= a4 ? a4 : v13;
    if (*a2) {
      (*(void (**)(void, uint64_t))(*(void *)*a2 + 64))(*a2, a3);
    }
    else {
      a2[4] = a3;
    }
    BOOL v16 = __OFSUB__(v15, a3);
    uint64_t v17 = v15 - a3;
    if (!((v17 < 0) ^ v16 | (v17 == 0)))
    {
      do
      {
        if (*a2) {
          uint64_t v18 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2);
        }
        else {
          uint64_t v18 = a2[1] + 16 * a2[4];
        }
        float v5 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(v5, *(float *)(v18 + 8));
        if (*a2) {
          (*(void (**)(void))(*(void *)*a2 + 40))(*a2);
        }
        else {
          ++a2[4];
        }
        --v17;
      }
      while (v17);
    }
  }
  if (v13 < v14)
  {
    uint64_t v19 = *(void *)(a1 + 40);
    double v20 = *(double *)(v19 + 8 * v12);
    double v21 = *(double *)(v19 + 8 * v11);
    if (v20 < v21)
    {
      if (v21 != INFINITY)
      {
        double v22 = v21 - v20;
        double v23 = 0.0;
        if (v22 != INFINITY)
        {
          long double v24 = exp(-v22);
          double v23 = log(1.0 - v24);
        }
        double v20 = v20 - v23;
      }
      float v25 = v20;
      float v5 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(v5, v25);
    }
  }
  if (v14 < a4)
  {
    uint64_t v26 = v13 <= v14 ? v14 : v13;
    if (*a2) {
      (*(void (**)(void, uint64_t))(*(void *)*a2 + 64))(*a2, v26);
    }
    else {
      a2[4] = v26;
    }
    BOOL v27 = a4 <= v26;
    uint64_t v28 = a4 - v26;
    if (!v27)
    {
      do
      {
        if (*a2) {
          uint64_t v29 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2);
        }
        else {
          uint64_t v29 = a2[1] + 16 * a2[4];
        }
        float v5 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(v5, *(float *)(v29 + 8));
        if (*a2) {
          (*(void (**)(void))(*(void *)*a2 + 40))(*a2);
        }
        else {
          ++a2[4];
        }
        --v28;
      }
      while (v28);
    }
  }
  return v5;
}

float fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::LogPlus(float a1, float a2)
{
  double v2 = a1;
  double v3 = a2;
  if (a1 <= a2)
  {
    double v7 = 0.0;
    if (v3 - v2 != INFINITY)
    {
      long double v8 = exp(-(v3 - v2));
      double v7 = log(v8 + 1.0);
    }
    return v2 - v7;
  }
  else
  {
    double v4 = 0.0;
    if (v2 - v3 != INFINITY)
    {
      long double v5 = exp(-(v2 - v3));
      double v4 = log(v5 + 1.0);
    }
    return v3 - v4;
  }
}

uint64_t fst::LabelReachableData<int>::FinalLabel(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 4);
  if (result == -1)
  {
    double v3 = &fst::kNoLabel;
    uint64_t result = *((unsigned int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(a1 + 16, &fst::kNoLabel, (uint64_t)&std::piecewise_construct, &v3)+ 5);
    *(_DWORD *)(a1 + 4) = result;
  }
  return result;
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::AddOnImpl(uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  long double v8 = (std::string *)std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A402A0;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a1 + 72) = v9;
  ++*(_DWORD *)(v9 + 56);
  *(void *)(a1 + 64) = &unk_1F0A40028;
  *(void *)(a1 + 80) = a4;
  std::string::operator=(v8, a3);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72)
                                                                                               + 32))(*(void *)(a1 + 72), 0x3FFFFFFF0007);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, *(void *)(*(void *)(a1 + 72) + 40));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, *(void *)(*(void *)(a1 + 72) + 48));
  uint64_t v10 = *(void *)(a1 + 80);
  if (v10) {
    ++*(_DWORD *)(v10 + 16);
  }
  return a1;
}

void sub_1B21A3EDC(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~AddOnImpl(void *a1)
{
  fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~AddOnImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~AddOnImpl(void *a1)
{
  *a1 = &unk_1F0A402A0;
  uint64_t v2 = a1[10];
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 16) - 1;
    *(_DWORD *)(v2 + 16) = v3;
    if (!v3)
    {
      double v4 = fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::~AddOnPair((uint64_t *)v2);
      MEMORY[0x1B3EA8670](v4, 0x1020C40EDCEB4C7);
    }
  }
  fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(a1 + 8);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t *fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::~AddOnPair(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 + 8) - 1;
    *(_DWORD *)(v2 + 8) = v3;
    if (!v3)
    {
      double v7 = (void **)(v2 + 56);
      std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v7);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 16);
      MEMORY[0x1B3EA8670](v2, 0x10A0C40A16849A9);
    }
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 8) - 1;
    *(_DWORD *)(v4 + 8) = v5;
    if (!v5)
    {
      double v7 = (void **)(v4 + 56);
      std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100](&v7);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 16);
      MEMORY[0x1B3EA8670](v4, 0x10A0C40A16849A9);
    }
  }
  return a1;
}

uint64_t fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>::LabelLookAheadRelabeler<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (void *)(*a2 + 64);
  int v5 = *(uint64_t **)(*a2 + 80);
  if (*(char *)(*a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(v3 + 16), *(void *)(v3 + 24));
  }
  else {
    std::string v14 = *(std::string *)(v3 + 16);
  }
  if (!(*(uint64_t (**)(void *, uint64_t, void))(*(void *)v4 + 64))(v4, 2, 0)) {
    operator new();
  }
  if (*v5)
  {
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable((uint64_t)v13, *v5, 0);
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel((uint64_t)v13, v4, 1);
    if (!*FLAGS_save_relabel_ipairs) {
      goto LABEL_15;
    }
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::RelabelPairs((uint64_t)v13, (char **)&v10, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, FLAGS_save_relabel_ipairs);
    fst::WriteIntPairs<int>((uint64_t)__p, &v10);
  }
  else
  {
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable((uint64_t)v13, v5[1], 0);
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel((uint64_t)v13, v4, 0);
    if (!*FLAGS_save_relabel_opairs) {
      goto LABEL_15;
    }
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::RelabelPairs((uint64_t)v13, (char **)&v10, 1);
    std::string::basic_string[abi:ne180100]<0>(__p, FLAGS_save_relabel_opairs);
    fst::WriteIntPairs<int>((uint64_t)__p, &v10);
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
LABEL_15:
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable((uint64_t)v13);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1B21A430C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable((uint64_t)&a19);
  if (*(char *)(v19 - 73) < 0) {
    operator delete(*(void **)(v19 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel(uint64_t a1, void *a2, int a3)
{
  unsigned int v12 = 0;
  (*(void (**)(void *, uint64_t *))(*(void *)a2 + 128))(a2, &v10);
  while (1)
  {
    if (!v10)
    {
      if ((int)v12 >= v11) {
        goto LABEL_21;
      }
LABEL_7:
      uint64_t v6 = v12;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10)) {
      break;
    }
    if (!v10) {
      goto LABEL_7;
    }
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v10 + 24))();
LABEL_8:
    (*(void (**)(void *, uint64_t, uint64_t *))(*(void *)a2 + 296))(a2, v6, &v9);
    while (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 24))(v9))
    {
      long long v8 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
      if (a3) {
        LODWORD(v8) = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel(a1, v8);
      }
      else {
        DWORD1(v8) = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel(a1, DWORD1(v8));
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v9 + 88))(v9, &v8);
      (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 32))(v10);
    }
    else {
      ++v12;
    }
  }
  if (v10) {
    (*(void (**)(void))(*(void *)v10 + 8))();
  }
LABEL_21:
  if (a3)
  {
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2);
    return (*(uint64_t (**)(void *, void))(*(void *)a2 + 280))(a2, 0);
  }
  else
  {
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2);
    return (*(uint64_t (**)(void *, void))(*(void *)a2 + 288))(a2, 0);
  }
}

void sub_1B21A46C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::RelabelPairs(uint64_t a1, char **a2, char a3)
{
  a2[1] = *a2;
  uint64_t v5 = fst::LabelReachableData<int>::Label2Index(*(void *)(a1 + 80));
  for (unint64_t i = *(uint64_t **)(v5 + 16); i; unint64_t i = (uint64_t *)*i)
  {
    int v7 = *((_DWORD *)i + 5);
    if (v7 != fst::LabelReachableData<int>::FinalLabel(*(void *)(a1 + 80)))
    {
      uint64_t v9 = *((unsigned int *)i + 4);
      uint64_t v8 = *((unsigned int *)i + 5);
      int v11 = (uint64_t *)a2[1];
      unint64_t v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = ((char *)v11 - *a2) >> 3;
        if ((unint64_t)(v13 + 1) >> 61) {
LABEL_44:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v14 = v10 - (void)*a2;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = &v17[8 * v13];
        *(void *)uint64_t v18 = v9 | (v8 << 32);
        unsigned int v12 = v18 + 8;
        double v20 = *a2;
        uint64_t v19 = a2[1];
        if (v19 != *a2)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *((void *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          uint64_t v19 = *a2;
        }
        *a2 = v18;
        a2[1] = v12;
        a2[2] = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t *v11 = v9 | (v8 << 32);
        unsigned int v12 = (char *)(v11 + 1);
      }
      a2[1] = v12;
    }
  }
  if (a3)
  {
    unsigned int v40 = 1;
    if (*(void *)(v5 + 24))
    {
      do
      {
        double v22 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((void *)v5, (int *)&v40);
        if (!v22
          || (int v23 = *((_DWORD *)v22 + 5),
              v23 == fst::LabelReachableData<int>::FinalLabel(*(void *)(a1 + 80))))
        {
          uint64_t v24 = v40;
          uint64_t v25 = (*(_DWORD *)(v5 + 24) + 1);
          BOOL v27 = (unint64_t *)a2[1];
          unint64_t v26 = (unint64_t)a2[2];
          if ((unint64_t)v27 >= v26)
          {
            uint64_t v29 = ((char *)v27 - *a2) >> 3;
            if ((unint64_t)(v29 + 1) >> 61) {
              goto LABEL_44;
            }
            uint64_t v30 = v26 - (void)*a2;
            uint64_t v31 = v30 >> 2;
            if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
              uint64_t v31 = v29 + 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            if (v32) {
              unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v32);
            }
            else {
              unint64_t v33 = 0;
            }
            unint64_t v34 = &v33[8 * v29];
            *(void *)unint64_t v34 = v24 | (v25 << 32);
            uint64_t v28 = v34 + 8;
            uint64_t v36 = *a2;
            char v35 = a2[1];
            if (v35 != *a2)
            {
              do
              {
                uint64_t v37 = *((void *)v35 - 1);
                v35 -= 8;
                *((void *)v34 - 1) = v37;
                v34 -= 8;
              }
              while (v35 != v36);
              char v35 = *a2;
            }
            *a2 = v34;
            a2[1] = v28;
            a2[2] = &v33[8 * v32];
            if (v35) {
              operator delete(v35);
            }
          }
          else
          {
            unint64_t *v27 = v40 | (unint64_t)(v25 << 32);
            uint64_t v28 = (char *)(v27 + 1);
          }
          a2[1] = v28;
        }
        unint64_t v38 = (int)v40++ + 1;
      }
      while (*(void *)(v5 + 24) >= v38);
    }
  }
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = -1;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_DWORD *)(result + 48) = 1065353216;
  *(void *)(result + 80) = a2;
  if (!a3) {
    operator new();
  }
  *(void *)(result + 96) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 88) = a3;
  *(_WORD *)(result + 112) = 0;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_1B21A4A20(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel(uint64_t a1, uint64_t a2)
{
  int v5 = a2;
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 113))
    {
      uint64_t v2 = fst::LabelReachableData<int>::Label2Index(*(void *)(a1 + 80));
      uint64_t v6 = &v5;
      uint64_t v3 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v2, &v5, (uint64_t)&std::piecewise_construct, &v6);
      a2 = *((unsigned int *)v3 + 5);
      if (!a2)
      {
        a2 = (*(_DWORD *)(v2 + 24) + 1);
        *((_DWORD *)v3 + 5) = a2;
      }
    }
  }
  return a2;
}

uint64_t fst::WriteIntPairs<int>(uint64_t a1, void *a2)
{
  uint64_t v4 = (fst *)fst::cout((fst *)a1);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  if (v5) {
    operator new();
  }
  uint64_t v6 = v4;
  if (a2[1] != *a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\t", 1);
      unint64_t v10 = (void *)std::ostream::operator<<();
      uint64_t v4 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
      ++v8;
      v7 += 8;
    }
    while (v8 < (uint64_t)(a2[1] - *a2) >> 3);
  }
  if ((*((unsigned char *)v6 + *(void *)(*(void *)v6 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v20, "ERROR");
    int v11 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)v20);
    unsigned int v12 = (void *)fst::cerr(v11);
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"WriteIntPairs: Write failed: ", 29);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::size_type v15 = *(void *)(a1 + 8);
      if (v15)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, v15);
        goto LABEL_18;
      }
    }
    else if (*(unsigned char *)(a1 + 23))
    {
      std::string __p = *(std::string *)a1;
LABEL_18:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      return 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
    goto LABEL_18;
  }
  if (v6 != (fst *)fst::cout(v4)) {
    (*(void (**)(fst *))(*(void *)v6 + 8))(v6);
  }
  return 1;
}

void sub_1B21A4D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *(_DWORD *)(v2 + 8) - 1;
  *(_DWORD *)(v2 + 8) = v3;
  if (!v3)
  {
    __p[0] = (void *)(v2 + 56);
    std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 16);
    MEMORY[0x1B3EA8670](v2, 0x10A0C40A16849A9);
  }
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4) {
    MEMORY[0x1B3EA8670](v4, 0xC400A2AC0F1);
  }
  if (*(double *)(a1 + 96) > 0.0 && FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    uint64_t v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"# of calls: ", 12);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      unint64_t v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      uint64_t v9 = (void *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"# of intervals/call: ", 21);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 16);
  return a1;
}

void fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::AddOnImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A402A0;
  fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst();
}

void sub_1B21A5064(_Unwind_Exception *a1)
{
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void *fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(void *a1)
{
  *a1 = &unk_1F0A3F228;
  uint64_t v2 = a1[23];
  if (v2)
  {
    uint64_t v3 = fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable(v2);
    MEMORY[0x1B3EA8670](v3, 0x10A0C40F647C574);
  }
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(a1 + 4);
  return a1;
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *(_DWORD *)(v2 + 8) - 1;
  *(_DWORD *)(v2 + 8) = v3;
  if (!v3)
  {
    __p[0] = (void *)(v2 + 56);
    std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2 + 16);
    MEMORY[0x1B3EA8670](v2, 0x10A0C40A16849A9);
  }
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4)
  {
    uint64_t v5 = fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FastLogAccumulator(v4);
    MEMORY[0x1B3EA8670](v5, 0x10A0C4057A1BE17);
  }
  if (*(double *)(a1 + 96) > 0.0 && FLAGS_v >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
    uint64_t v7 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    unint64_t v8 = (void *)fst::cerr(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"# of calls: ", 12);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      uint64_t v9 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
      unint64_t v10 = (void *)fst::cerr(v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"# of intervals/call: ", 21);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 16);
  return a1;
}

uint64_t fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FastLogAccumulator(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 48) - 1;
  *(_DWORD *)(v2 + 48) = v3;
  if (!v3)
  {
    uint64_t v4 = *(void **)(v2 + 24);
    if (v4)
    {
      *(void *)(v2 + 32) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x1B3EA8670](v2, 0x1090C40FB833234);
  }
  return a1;
}

void *fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A45008;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B21A5358(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4057577405);
  _Unwind_Resume(a1);
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::AddOnImpl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A402A0;
  *(void *)(a1 + 64) = &unk_1F0A40028;
  long long v5 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v5;
  ++*(_DWORD *)(v5 + 56);
  std::string::operator=(v4, (const std::string *)(a2 + 16));
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 4 | (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72)
                                                                                               + 32))(*(void *)(a1 + 72), 0x3FFFFFFF0004);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetInputSymbols(a1, *(void *)(*(void *)(a1 + 72) + 40));
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetOutputSymbols(a1, *(void *)(*(void *)(a1 + 72) + 48));
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6) {
    ++*(_DWORD *)(v6 + 16);
  }
  return a1;
}

void sub_1B21A54B0(_Unwind_Exception *a1)
{
  fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::Write(uint64_t a1, void *a2, uint64_t a3)
{
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)char v14 = 0u;
  *(_OWORD *)std::string::size_type v15 = 0u;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = -1;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v11 = *(std::string *)a3;
  }
  int v12 = *(_DWORD *)(a3 + 24);
  *(_WORD *)((char *)&v12 + 1) = 0;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(a1, (uint64_t)a2, &v11, 1, (uint64_t)v13);
  LODWORD(__p.__r_.__value_.__l.__data_) = 446681434;
  std::ostream::write();
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  int v10 = *(_DWORD *)(a3 + 24);
  LOBYTE(v10) = 1;
  uint64_t v6 = fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::WriteFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>((void *)(a1 + 64), a2, (uint64_t)&__p);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 80);
    BOOL v21 = v7 != 0;
    std::ostream::write();
    if (v7) {
      fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::Write(*(uint64_t **)(a1 + 80));
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
  return v6;
}

void sub_1B21A5648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  fst::FstHeader::~FstHeader(&a24);
  _Unwind_Resume(a1);
}

uint64_t fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::Write(uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::ostream::write();
  if (v2) {
    fst::LabelReachableData<int>::Write(*a1);
  }
  uint64_t v3 = a1[1];
  std::ostream::write();
  if (v3) {
    fst::LabelReachableData<int>::Write(a1[1]);
  }
  return 1;
}

uint64_t fst::LabelReachableData<int>::Write(uint64_t a1)
{
  LOBYTE(__p) = *(unsigned char *)a1;
  std::ostream::write();
  LOBYTE(__p) = *(unsigned char *)(a1 + 1);
  std::ostream::write();
  if (*(unsigned char *)(a1 + 1))
  {
    std::string __p = *(void **)(a1 + 40);
    std::ostream::write();
    for (unint64_t i = *(uint64_t **)(a1 + 32); i; unint64_t i = (uint64_t *)*i)
    {
      LODWORD(v10) = *((_DWORD *)i + 4);
      std::ostream::write();
      LODWORD(v10) = *((_DWORD *)i + 5);
      std::ostream::write();
    }
  }
  LODWORD(__p) = fst::LabelReachableData<int>::FinalLabel(a1);
  std::ostream::write();
  uint64_t v10 = (uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 5;
  std::ostream::write();
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  while (v4 != v3)
  {
    std::string __p = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    std::vector<fst::IntervalSet<int>::Interval,std::allocator<fst::IntervalSet<int>::Interval>>::__init_with_size[abi:ne180100]<fst::IntervalSet<int>::Interval*,fst::IntervalSet<int>::Interval*>(&__p, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3);
    int v9 = *(_DWORD *)(v4 + 24);
    fst::IntervalSet<int>::Write((uint64_t *)&__p);
    if (__p)
    {
      uint64_t v7 = __p;
      operator delete(__p);
    }
    uint64_t v3 = *(void *)(a1 + 64);
    v4 += 32;
  }
  return 1;
}

void sub_1B21A5888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::IntervalSet<int>::Write(uint64_t *a1)
{
  std::ostream::write();
  for (uint64_t i = *a1; i != a1[1]; i += 8)
  {
    std::ostream::write();
    std::ostream::write();
  }
  return std::ostream::write();
}

void fst::Replace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = 0;
  fst::ReplaceFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultReplaceStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,long>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ReplaceFst();
}

void sub_1B21A59C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void XCount::freeThread(XCount *this)
{
  uint64_t v1 = (void **)xcountTableTLS();
  if (*v1)
  {
    free(*v1);
    void *v1 = 0;
  }
  uint64_t v2 = (void **)refCountsTLS();
  if (*v2)
  {
    free(*v2);
    *uint64_t v2 = 0;
  }
  uint64_t v3 = (void **)freeListTLS();
  if (*v3)
  {
    free(*v3);
    *uint64_t v3 = 0;
  }
  uint64_t v4 = (void **)initializedTLS();
  if (*v4)
  {
    free(*v4);
    *uint64_t v4 = 0;
  }
}

float kaldi::quasar::Range(kaldi::quasar *this, kaldi::quasar::ComputeEngineBufferItf *a2)
{
  if ((*(int (**)(kaldi::quasar *, kaldi::quasar::ComputeEngineBufferItf *))(*(void *)this + 176))(this, a2) >= 1)
  {
    if ((*(int (**)(kaldi::quasar *))(*(void *)this + 176))(this) < 1)
    {
      int v5 = 1;
    }
    else
    {
      uint64_t v4 = 0;
      int v5 = 1;
      do
      {
        v5 *= (*(unsigned int (**)(kaldi::quasar *, uint64_t))(*(void *)this + 184))(this, v4);
        uint64_t v4 = (v4 + 1);
      }
      while ((int)v4 < (*(int (**)(kaldi::quasar *))(*(void *)this + 176))(this));
    }
    uint64_t v6 = (*(uint64_t (**)(kaldi::quasar *))(*(void *)this + 144))(this);
    if (v5 >= 1)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        float result = (float)(int)i;
        *(float *)(v6 + 4 * i) = (float)(int)i;
      }
    }
  }
  return result;
}

void kaldi::quasar::FixedConfigStream(uint64_t a1, uint64_t a2)
{
  kaldi::Input::Input(v13, a1, a2);
  uint64_t v2 = (void *)kaldi::Input::Stream((kaldi::Input *)v13);
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, *(void **)((char *)v2 + *(void *)(*v2 - 24) + 40), 0);
  kaldi::Input::Close((kaldi::Input *)v13);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v5 = (std::string *)((char *)p_p + size);
    std::string::size_type v6 = size - 1;
    while (1)
    {
      uint64_t v7 = 0;
      while (p_p->__r_.__value_.__s.__data_[v7] == aEngine_0[v7])
      {
        uint64_t v8 = v7 + 1;
        if (v6 != v7 && v7++ != 8) {
          continue;
        }
        uint64_t v10 = &aEngine_0[v8];
        std::string v11 = (std::string *)((char *)p_p + v8);
        goto LABEL_15;
      }
      uint64_t v10 = &aEngine_0[v7];
      std::string v11 = (std::string *)((char *)p_p + v7);
LABEL_15:
      if (v10 == "") {
        break;
      }
      p_p = (std::string *)((char *)p_p + 1);
      --v6;
      if (p_p == v5) {
        goto LABEL_20;
      }
    }
    if (p_p != v11)
    {
      v14[0] = (uint64_t)"</Engine>";
      v14[1] = (uint64_t)"";
      boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>((uint64_t)&__p, v14, "\n</Engine>", "", p_p, v11, "\n</Engine>", "");
    }
  }
LABEL_20:
  operator new();
}

void sub_1B21A5D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  MEMORY[0x1B3EA8670](v16, 0x10B3C4097FF09DFLL);
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::Input::~Input((kaldi::Input *)&a16);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEFusedAcousticEncoderConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = 0;
  kaldi::quasar::FixedConfigStream(a3, (uint64_t)v3);
}

void sub_1B21A71F0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 112);
  if (v3) {
    (*(void (**)(void))(*(void *)v3 + 8))(*(void *)(v1 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::SplitStringToIntegers<long long>(uint64_t a1, const char *a2, int a3, void *a4)
{
  if (*(char *)(a1 + 23) >= 0) {
    int v5 = (unsigned char *)a1;
  }
  else {
    int v5 = *(unsigned char **)a1;
  }
  if (*v5)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    kaldi::SplitStringToVector((const std::string *)a1, a2, a3, (uint64_t)&v13);
    std::vector<unsigned long>::resize((uint64_t)a4, 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3));
    uint64_t v6 = v13;
    if (v14 == v13)
    {
LABEL_12:
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (1)
      {
        int v9 = (const char *)(v6 + v7);
        if (*(char *)(v6 + v7 + 23) < 0) {
          int v9 = *(const char **)v9;
        }
        __endptr = 0;
        uint64_t v10 = strtoll(v9, &__endptr, 10);
        if (__endptr == v9 || *__endptr) {
          break;
        }
        *(void *)(*a4 + 8 * v8++) = v10;
        uint64_t v6 = v13;
        v7 += 24;
        if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3)) {
          goto LABEL_12;
        }
      }
      uint64_t v11 = 0;
      a4[1] = *a4;
    }
    __endptr = (char *)&v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__endptr);
  }
  else
  {
    a4[1] = *a4;
    return 1;
  }
  return v11;
}

void sub_1B21A7490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(a1, a2);
  }
  else
  {
    std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)a1, a2);
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

void kaldi::quasar::CEFusedAcousticEncoder::~CEFusedAcousticEncoder(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  uint64_t v2 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  kaldi::quasar::CEFusedAcousticEncoderConfig::~CEFusedAcousticEncoderConfig(this);
}

void kaldi::quasar::CEFusedAcousticEncoder::CEFusedAcousticEncoder(kaldi::quasar::CEFusedAcousticEncoderConfig *a1, uint64_t a2)
{
  uint64_t v4 = kaldi::quasar::CEFusedAcousticEncoderConfig::CEFusedAcousticEncoderConfig(a1);
  *((void *)v4 + 60) = 0;
  *((void *)v4 + 61) = 0;
  *((unsigned char *)v4 + 504) = 0;
  *((void *)v4 + 62) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v5 = *(void *)(a2 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 7);
  if (v9 < 0) {
    p_p = __p;
  }
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (const void *)a2;
    }
    else {
      uint64_t v7 = *(const void **)a2;
    }
    memmove(p_p, v7, v5);
  }
  strcpy((char *)p_p + v5, ".config");
  kaldi::quasar::CEFusedAcousticEncoderConfig::Read((uint64_t)a1, a2, (uint64_t)&__p);
}

void sub_1B21A7824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = *((void *)v15 + 62);
  *((void *)v15 + 62) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)v15 + 61);
  *((void *)v15 + 61) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *v16;
  uint64_t *v16 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  kaldi::quasar::CEFusedAcousticEncoderConfig::~CEFusedAcousticEncoderConfig(v15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FillMask(uint64_t a1, void *a2, int a3, uint64_t a4, int a5)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 176))();
  if ((int)result >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      int v11 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 184))(*a2, v10);
      if (v10 == (*(unsigned int (**)(void))(*(void *)*a2 + 176))() - 1)
      {
        if (a3 == -1) {
          a3 = v11;
        }
        if (a5)
        {
          if (a3 >= 1)
          {
            uint64_t v12 = 0;
            do
            {
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 96))(*a2, a4, v12);
              uint64_t v12 = (v12 + 1);
            }
            while (a3 != v12);
          }
        }
        else if (a3 >= 1)
        {
          uint64_t v13 = (v11 - a3);
          do
          {
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 96))(*a2, a4, v13);
            uint64_t v13 = (v13 + 1);
          }
          while ((int)v13 < v11);
        }
      }
      else if (v11 != 1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Only the last dimension of the mask could be non-one");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
      }
      uint64_t v10 = (v10 + 1);
      uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 176))();
    }
    while ((int)v10 < (int)result);
  }
  return result;
}

void kaldi::quasar::CEFusedAcousticEncoder::Encode(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int32x2_t *a5, int32x2_t *a6, int32x2_t *a7, int32x2_t *a8, int32x2_t *a9, uint64_t **a10)
{
  uint64_t v101 = 0;
  v102 = 0;
  unint64_t v103 = 0;
  if (kaldi::g_kaldi_verbose_level <= 2)
  {
    uint64_t v17 = *a2;
    goto LABEL_6;
  }
  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"preparing feature", 17);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  uint64_t v16 = v102;
  uint64_t v17 = *a2;
  if ((unint64_t)v102 >= v103)
  {
LABEL_6:
    p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, (long long *)a1, v17);
    goto LABEL_9;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v102, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    long long v18 = *(_OWORD *)a1;
    v102->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  v16[1].__r_.__value_.__r.__words[0] = v17;
  p_std::string::size_type size = (unint64_t)&v16[1].__r_.__value_.__l.__size_;
  v102 = (std::string *)((char *)v16 + 32);
LABEL_9:
  v102 = (std::string *)p_size;
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_31;
    }
  }
  else if (!*(unsigned char *)(a1 + 47))
  {
    goto LABEL_31;
  }
  uint64_t v20 = (long long *)(a1 + 24);
  uint64_t v21 = *(void *)(a1 + 496);
  if (p_size >= v103)
  {
    p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, v20, *(void *)(a1 + 496));
  }
  else
  {
    if ((*(unsigned char *)(a1 + 47) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)p_size, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v22 = *v20;
      *(void *)(p_size + 16) = *(void *)(a1 + 40);
      *(_OWORD *)p_std::string::size_type size = v22;
    }
    *(void *)(p_size + 24) = v21;
    p_size += 32;
    v102 = (std::string *)p_size;
  }
  v102 = (std::string *)p_size;
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(void *)(a1 + 56)) {
      goto LABEL_31;
    }
  }
  else if (!*(unsigned char *)(a1 + 71))
  {
    goto LABEL_31;
  }
  uint64_t v23 = *(void *)(a1 + 488);
  if (v23)
  {
    uint64_t v24 = (long long *)(a1 + 48);
    if (p_size >= v103)
    {
      p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, v24, *(void *)(a1 + 488));
    }
    else
    {
      if ((*(unsigned char *)(a1 + 71) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)p_size, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else
      {
        long long v25 = *v24;
        *(void *)(p_size + 16) = *(void *)(a1 + 64);
        *(_OWORD *)p_std::string::size_type size = v25;
      }
      *(void *)(p_size + 24) = v23;
      p_size += 32;
      v102 = (std::string *)p_size;
    }
    v102 = (std::string *)p_size;
  }
LABEL_31:
  if (*(char *)(a1 + 95) < 0)
  {
    if (!*(void *)(a1 + 80)) {
      goto LABEL_43;
    }
  }
  else if (!*(unsigned char *)(a1 + 95))
  {
    goto LABEL_43;
  }
  uint64_t v26 = *a3;
  if (v26)
  {
    BOOL v27 = (long long *)(a1 + 72);
    if (p_size >= v103)
    {
      uint64_t v29 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, v27, v26);
    }
    else
    {
      if ((*(unsigned char *)(a1 + 95) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external((std::string *)p_size, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
      }
      else
      {
        long long v28 = *v27;
        *(void *)(p_size + 16) = *(void *)(a1 + 88);
        *(_OWORD *)p_std::string::size_type size = v28;
      }
      *(void *)(p_size + 24) = v26;
      uint64_t v29 = (std::string *)(p_size + 32);
      v102 = (std::string *)(p_size + 32);
    }
    v102 = v29;
  }
LABEL_43:
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"preparing input_states ", 23);
    uint64_t v30 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" ", 1);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  }
  uint64_t v31 = *(void *)(a1 + 264);
  uint64_t v32 = *(void *)(a1 + 272);
  if (0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3) != (a4[1] - *a4) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"input_states.size() == cfg_.input_states.size()", 47);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v100);
  }
  if (v32 != v31)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    char v35 = v102;
    do
    {
      uint64_t v36 = v31 + v33;
      std::string::size_type v37 = *(void *)(*a4 + 8 * v34);
      if ((unint64_t)v35 >= v103)
      {
        char v35 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v101, (long long *)v36, *(void *)(*a4 + 8 * v34));
      }
      else
      {
        if (*(char *)(v36 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(v31 + v33), *(void *)(v31 + v33 + 8));
        }
        else
        {
          long long v38 = *(_OWORD *)v36;
          v35->__r_.__value_.__r.__words[2] = *(void *)(v36 + 16);
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v38;
        }
        v35[1].__r_.__value_.__r.__words[0] = v37;
        char v35 = (std::string *)((char *)v35 + 32);
        v102 = v35;
      }
      v102 = v35;
      ++v34;
      uint64_t v31 = *(void *)(a1 + 264);
      v33 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 272) - v31) >> 3) > v34);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"preparing outputs", 17);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  }
  memset(&v99, 0, sizeof(v99));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, *(long long **)(a1 + 288), *(long long **)(a1 + 296), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 3));
  uint64_t v39 = (long long *)(a1 + 96);
  std::string::size_type size = (_OWORD *)v99.__r_.__value_.__l.__size_;
  if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
  {
    uint64_t v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v39);
  }
  else
  {
    if (*(char *)(a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v99.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
    }
    else
    {
      long long v41 = *v39;
      *(void *)(v99.__r_.__value_.__l.__size_ + 16) = *(void *)(a1 + 112);
      *std::string::size_type size = v41;
    }
    uint64_t v42 = (std::string *)((char *)size + 24);
  }
  v99.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  if (*(char *)(a1 + 143) < 0)
  {
    uint64_t v43 = *(void *)(a1 + 128);
    if (!a6) {
      goto LABEL_75;
    }
  }
  else
  {
    uint64_t v43 = *(unsigned __int8 *)(a1 + 143);
    if (!a6) {
      goto LABEL_75;
    }
  }
  if (v43)
  {
    uint64_t v44 = (long long *)(a1 + 120);
    if ((unint64_t)v42 >= v99.__r_.__value_.__r.__words[2])
    {
      uint64_t v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v44);
    }
    else
    {
      if ((*(unsigned char *)(a1 + 143) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(a1 + 120), *(void *)(a1 + 128));
      }
      else
      {
        long long v45 = *v44;
        v42->__r_.__value_.__r.__words[2] = *(void *)(a1 + 136);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v45;
      }
      ++v42;
    }
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  }
LABEL_75:
  if (*(char *)(a1 + 167) < 0) {
    uint64_t v46 = *(void *)(a1 + 152);
  }
  else {
    uint64_t v46 = *(unsigned __int8 *)(a1 + 167);
  }
  if (a7 && v46)
  {
    double v47 = (long long *)(a1 + 144);
    if ((unint64_t)v42 >= v99.__r_.__value_.__r.__words[2])
    {
      uint64_t v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v47);
    }
    else
    {
      if ((*(unsigned char *)(a1 + 167) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(a1 + 144), *(void *)(a1 + 152));
      }
      else
      {
        long long v48 = *v47;
        v42->__r_.__value_.__r.__words[2] = *(void *)(a1 + 160);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v48;
      }
      ++v42;
    }
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  }
  if (*(char *)(a1 + 215) < 0)
  {
    uint64_t v49 = *(void *)(a1 + 200);
    if (!a9) {
      goto LABEL_99;
    }
  }
  else
  {
    uint64_t v49 = *(unsigned __int8 *)(a1 + 215);
    if (!a9) {
      goto LABEL_99;
    }
  }
  if (v49)
  {
    unint64_t v50 = (long long *)(a1 + 192);
    if ((unint64_t)v42 >= v99.__r_.__value_.__r.__words[2])
    {
      uint64_t v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v50);
    }
    else
    {
      if ((*(unsigned char *)(a1 + 215) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(a1 + 192), *(void *)(a1 + 200));
      }
      else
      {
        long long v51 = *v50;
        v42->__r_.__value_.__r.__words[2] = *(void *)(a1 + 208);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v51;
      }
      ++v42;
    }
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  }
LABEL_99:
  if (*(char *)(a1 + 191) < 0) {
    uint64_t v52 = *(void *)(a1 + 176);
  }
  else {
    uint64_t v52 = *(unsigned __int8 *)(a1 + 191);
  }
  if (a8 && v52)
  {
    unint64_t v53 = (long long *)(a1 + 168);
    if ((unint64_t)v42 >= v99.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v55 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v99, v53);
    }
    else
    {
      if ((*(unsigned char *)(a1 + 191) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v42, *(const std::string::value_type **)(a1 + 168), *(void *)(a1 + 176));
      }
      else
      {
        long long v54 = *v53;
        v42->__r_.__value_.__r.__words[2] = *(void *)(a1 + 184);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v54;
      }
      std::string::size_type v55 = (std::string::size_type)&v42[1];
    }
    v99.__r_.__value_.__l.__size_ = v55;
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"running engine", 14);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  }
  v93 = a6;
  uint64_t v56 = a5;
  uint64_t v57 = *(void *)(a1 + 480);
  memset(v100, 0, 24);
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, uint64_t **))(*(void *)v57 + 128))(v57, &v101, &v99, v100, a10);
  std::string __p = v100;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = 0;
  v97 = 0;
  v98 = 0;
  uint64_t v59 = *a10;
  uint64_t v58 = a10[1];
  if (*a10 != v58)
  {
    int v60 = 0;
    do
    {
      uint64_t v61 = *v59;
      if (v60 >= v98)
      {
        uint64_t v62 = (v60 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v62 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v63 = (v98 - (unsigned char *)__p) >> 2;
        if (v63 <= v62 + 1) {
          unint64_t v63 = v62 + 1;
        }
        if ((unint64_t)(v98 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v63;
        }
        if (v64) {
          int v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v98, v64);
        }
        else {
          int v65 = 0;
        }
        unsigned int v66 = &v65[8 * v62];
        *(void *)unsigned int v66 = v61;
        int v60 = v66 + 8;
        int v68 = (char *)__p;
        uint64_t v67 = v97;
        if (v97 != __p)
        {
          do
          {
            uint64_t v69 = *((void *)v67 - 1);
            v67 -= 8;
            *((void *)v66 - 1) = v69;
            v66 -= 8;
          }
          while (v67 != v68);
          uint64_t v67 = (char *)__p;
        }
        std::string __p = v66;
        v97 = v60;
        v98 = &v65[8 * v64];
        if (v67) {
          operator delete(v67);
        }
      }
      else
      {
        *(void *)int v60 = v61;
        v60 += 8;
      }
      v97 = v60;
      ++v59;
    }
    while (v59 != v58);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"organizing outputs", 18);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v100);
  }
  if (*(char *)(a1 + 191) < 0) {
    uint64_t v70 = *(void *)(a1 + 176);
  }
  else {
    uint64_t v70 = *(unsigned __int8 *)(a1 + 191);
  }
  if (a8 && v70)
  {
    uint64_t v71 = *((void *)v97 - 1);
    int v72 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 176))(v71);
    uint64_t v73 = (*(uint64_t (**)(uint64_t, void))(*(void *)v71 + 184))(v71, (v72 - 1));
    kaldi::quasar::CopyBufferToMatrix(v71, 0xFFFFFFFFLL, v73, a8);
    v97 -= 8;
  }
  if (*(char *)(a1 + 215) < 0)
  {
    if (!*(void *)(a1 + 200)) {
      goto LABEL_147;
    }
  }
  else if (!*(unsigned char *)(a1 + 215))
  {
    goto LABEL_147;
  }
  if (a9)
  {
    uint64_t v74 = *((void *)v97 - 1);
    int v75 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 176))(v74);
    uint64_t v76 = (*(uint64_t (**)(uint64_t, void))(*(void *)v74 + 184))(v74, (v75 - 1));
    kaldi::quasar::CopyBufferToMatrix(v74, 0xFFFFFFFFLL, v76, a9);
  }
  v97 -= 8;
LABEL_147:
  if (*(char *)(a1 + 167) < 0) {
    uint64_t v77 = *(void *)(a1 + 152);
  }
  else {
    uint64_t v77 = *(unsigned __int8 *)(a1 + 167);
  }
  if (a7 && v77)
  {
    uint64_t v78 = *((void *)v97 - 1);
    int v79 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 176))(v78);
    uint64_t v80 = (*(uint64_t (**)(uint64_t, void))(*(void *)v78 + 184))(v78, (v79 - 1));
    kaldi::quasar::CopyBufferToMatrix(v78, 0xFFFFFFFFLL, v80, a7);
    v97 -= 8;
  }
  if (*(char *)(a1 + 143) < 0) {
    uint64_t v81 = *(void *)(a1 + 128);
  }
  else {
    uint64_t v81 = *(unsigned __int8 *)(a1 + 143);
  }
  uint64_t v82 = v97;
  if (v93 && v81)
  {
    uint64_t v83 = *((void *)v97 - 1);
    int v84 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 176))(v83);
    uint64_t v85 = (*(uint64_t (**)(uint64_t, void))(*(void *)v83 + 184))(v83, (v84 - 1));
    kaldi::quasar::CopyBufferToMatrix(v83, 0xFFFFFFFFLL, v85, v93);
    uint64_t v82 = v97 - 8;
    v97 -= 8;
  }
  uint64_t v86 = *((void *)v82 - 1);
  int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 176))(v86);
  uint64_t v88 = (*(uint64_t (**)(uint64_t, void))(*(void *)v86 + 184))(v86, (v87 - 1));
  kaldi::quasar::CopyBufferToMatrix(v86, 0xFFFFFFFFLL, v88, v56);
  uint64_t v89 = (char *)__p;
  v97 -= 8;
  uint64_t v90 = *a4;
  uint64_t v91 = a4[1];
  if (v91 - *a4 != v97 - (unsigned char *)__p)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v100);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"input_states.size() == output_states.size()", 43);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v100);
  }
  if (v91 != v90)
  {
    unint64_t v92 = 0;
    do
    {
      kaldi::quasar::ComputeEngineBufferItf::CopyFrom(*(kaldi::quasar::ComputeEngineBufferItf **)(v90 + 8 * v92), *((const kaldi::quasar::ComputeEngineBufferItf **)__p + v92));
      ++v92;
      uint64_t v90 = *a4;
    }
    while (v92 < (a4[1] - *a4) >> 3);
    uint64_t v89 = (char *)__p;
  }
  if (v89)
  {
    v97 = v89;
    operator delete(v89);
  }
  v100[0] = (void **)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v100);
  v100[0] = (void **)&v101;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v100);
}

void kaldi::quasar::CEFusedAcousticEncoder::CreateFeatures(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::quasar::ComputeEngineBufferItf **a3@<X2>, kaldi::quasar::ComputeEngineBufferItf **a4@<X8>)
{
  unint64_t v8 = (kaldi::quasar::InputShapeTemplate *)(a1 + 312);
  if (*(unsigned char *)(a1 + 444)) {
    char v9 = (int *)(a2 + 20);
  }
  else {
    char v9 = (int *)(a1 + 364);
  }
  kaldi::quasar::InputShapeTemplate::Get(v8, *v9, *(int *)(a1 + 348), __p);
  uint64_t v10 = *a3;
  *a3 = 0;
  uint64_t v12 = v10;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 480, a2, (uint64_t)__p, &v12, a4);
  int v11 = v12;
  uint64_t v12 = 0;
  if (v11) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v11 + 8))(v11);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B21A8870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>(a2);
  }
  quasar::createConstituentDfstsFromSecondPassDecoder((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FlexibleInputSizeIsAllowed(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned __int8 *)this + 444);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 91);
}

float kaldi::quasar::CEFusedAcousticEncoder::InitialStates@<S0>(kaldi::quasar::CEFusedAcousticEncoder *this@<X0>, kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((void *)this + 33) != *((void *)this + 34))
  {
    uint64_t v4 = this;
    uint64_t v5 = *((void *)this + 57);
    for (uint64_t i = *((void *)this + 58); v5 != i; v5 += 24)
    {
      (*(void (**)(kaldi::quasar::CEFusedAcousticEncoder **__return_ptr))(**((void **)v4 + 60) + 56))(&v24);
      char v9 = (kaldi::quasar::CEFusedAcousticEncoder **)a3[1];
      unint64_t v8 = a3[2];
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v12 = ((uint64_t)v9 - *a3) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v8 - *a3;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        int v23[4] = a3 + 2;
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (kaldi::quasar::CEFusedAcousticEncoder **)&v16[8 * v12];
        v23[0] = v16;
        v23[1] = v17;
        _DWORD v23[3] = &v16[8 * v15];
        long long v18 = v24;
        uint64_t v24 = 0;
        char *v17 = v18;
        v23[2] = v17 + 1;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(a3, v23);
        int v11 = (void *)a3[1];
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(v23);
      }
      else
      {
        uint64_t v10 = v24;
        uint64_t v24 = 0;
        *char v9 = v10;
        int v11 = v9 + 1;
        a3[1] = (uint64_t)v11;
      }
      a3[1] = (uint64_t)v11;
      this = v24;
      uint64_t v24 = 0;
      if (this) {
        this = (kaldi::quasar::CEFusedAcousticEncoder *)(*(uint64_t (**)(kaldi::quasar::CEFusedAcousticEncoder *))(*(void *)this + 8))(this);
      }
    }
    uint64_t v19 = *((unsigned int *)v4 + 94);
    if ((v19 & 0x80000000) == 0) {
      this = (kaldi::quasar::CEFusedAcousticEncoder *)kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)this, (void *)(*a3 + 8 * v19), (*((_DWORD *)v4 + 91) - *((_DWORD *)v4 + 92))/ *((_DWORD *)v4 + 93), 1, 0);
    }
    uint64_t v20 = *((unsigned int *)v4 + 109);
    if ((v20 & 0x80000000) == 0) {
      kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)this, (void *)(*a3 + 8 * v20), (*((_DWORD *)v4 + 91) - *((_DWORD *)v4 + 92)) / *((_DWORD *)v4 + 108), 1, 0);
    }
    uint64_t v21 = *((unsigned int *)v4 + 95);
    if ((v21 & 0x80000000) == 0) {
      float result = kaldi::quasar::Range(*(kaldi::quasar **)(*a3 + 8 * v21), a2);
    }
    uint64_t v22 = *((unsigned int *)v4 + 110);
    if ((v22 & 0x80000000) == 0) {
      return kaldi::quasar::Range(*(kaldi::quasar **)(*a3 + 8 * v22), a2);
    }
  }
  return result;
}

void sub_1B21A8AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 94);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 92);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 93);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMaskFusion(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 109);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactorFusion(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 108);
}

void kaldi::quasar::CEFusedAcousticEncoder::SetContextEmbeddings(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_34;
    }
  }
  else if (!*(unsigned char *)(a1 + 47))
  {
    goto LABEL_34;
  }
  int v4 = *(_DWORD *)(a2 + 20);
  if (v4 >= 1)
  {
    int v5 = *(_DWORD *)(a1 + 352);
    std::string __p = &unk_1F0A472A0;
    if (v4 >= v5) {
      int v6 = v5;
    }
    else {
      int v6 = v4;
    }
    if (v5 > 0)
    {
      uint64_t v7 = v5;
    }
    else
    {
      int v6 = v4;
      uint64_t v7 = v4;
    }
    unsigned int v8 = *(_DWORD *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)&long long v28 = *(void *)(a2 + 8);
    *((void *)&v28 + 1) = __PAIR64__(v6, v8);
    *(void *)&long long v29 = *(void *)(a2 + 24);
    *((void *)&v29 + 1) = v9;
    uint64_t v32 = &unk_1F0A472A0;
    long long v33 = 0u;
    long long v34 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v32);
    kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 324), v7, *(int *)(a2 + 16), &v32);
    uint64_t v30 = 0;
    kaldi::quasar::CreateBufferFromMatrix(a1 + 480, a2, (uint64_t)&v32, &v30, &v31);
    uint64_t v10 = v31;
    uint64_t v31 = 0;
    uint64_t v11 = *(void *)(a1 + 496);
    *(void *)(a1 + 496) = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      uint64_t v12 = v31;
      uint64_t v31 = 0;
      if (v12) {
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v12 + 8))(v12);
      }
    }
    uint64_t v13 = v30;
    uint64_t v30 = 0;
    if (v13) {
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v13 + 8))(v13);
    }
    if (v32)
    {
      *(void *)&long long v33 = v32;
      operator delete(v32);
    }
    std::string __p = &unk_1F0A472A0;
    long long v28 = 0u;
    long long v29 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    goto LABEL_34;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(void *)(a1 + 56))
    {
LABEL_22:
      int v14 = *(_DWORD *)(a1 + 352);
      if (v14 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v14;
      }
      goto LABEL_27;
    }
  }
  else if (*(unsigned char *)(a1 + 71))
  {
    goto LABEL_22;
  }
  uint64_t v15 = 1;
LABEL_27:
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 324), v15, *(int *)(a1 + 356), &v32);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 480) + 56))(&__p);
  uint64_t v16 = __p;
  std::string __p = 0;
  uint64_t v17 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    long long v18 = __p;
    std::string __p = 0;
    if (v18) {
      (*(void (**)(void *))(*(void *)v18 + 8))(v18);
    }
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"The model expects context embeddings. But it's not provided. Use all zeros", 74);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if (v32)
  {
    *(void *)&long long v33 = v32;
    operator delete(v32);
  }
LABEL_34:
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(void *)(a1 + 56)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 71))
  {
    return;
  }
  int v19 = *(_DWORD *)(a2 + 20);
  int v20 = *(_DWORD *)(a1 + 352);
  if (v20 >= 1) {
    int v21 = *(_DWORD *)(a1 + 352);
  }
  else {
    int v21 = *(_DWORD *)(a2 + 20);
  }
  if (v20 < 1 && v19 < 1) {
    int v20 = 1;
  }
  if (v19 >= 1) {
    int v23 = *(_DWORD *)(a2 + 20);
  }
  else {
    int v23 = v20;
  }
  if (v19 >= 1) {
    int v24 = v21;
  }
  else {
    int v24 = v20;
  }
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 336), 1, v24, &__p);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 480) + 56))(&v32);
  long long v25 = v32;
  uint64_t v32 = 0;
  uint64_t v26 = *(void **)(a1 + 488);
  *(void *)(a1 + 488) = v25;
  if (v26)
  {
    (*(void (**)(void *))(*(void *)v26 + 8))(v26);
    uint64_t v26 = v32;
    uint64_t v32 = 0;
    if (v26) {
      uint64_t v26 = (void *)(*(uint64_t (**)(void *))(*(void *)v26 + 8))(v26);
    }
  }
  kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)v26, (void *)(a1 + 488), v23, 1, 1);
  if (__p)
  {
    *(void *)&long long v28 = __p;
    operator delete(__p);
  }
}

void sub_1B21A8F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  uint64_t v12 = *(void **)(v10 - 88);
  if (v12)
  {
    *(void *)(v10 - 80) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::OutputDim(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 90);
}

BOOL kaldi::quasar::CEFusedAcousticEncoder::HasRfdnnOut(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  if (*((char *)this + 167) < 0) {
    uint64_t v1 = *((void *)this + 19);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 167);
  }
  return v1 != 0;
}

BOOL kaldi::quasar::CEFusedAcousticEncoder::HasEpOut(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  if (*((char *)this + 191) < 0) {
    uint64_t v1 = *((void *)this + 22);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 191);
  }
  return v1 != 0;
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingMaskDim(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 88);
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingDim(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  return *((unsigned int *)this + 89);
}

BOOL kaldi::quasar::CEFusedAcousticEncoder::HasContextualBiasing(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  if (*((char *)this + 47) < 0) {
    uint64_t v1 = *((void *)this + 4);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 47);
  }
  return v1 != 0;
}

uint64_t kaldi::quasar::CEFusedAcousticEncoder::AttemptComputeEngineUpgrade(kaldi::quasar::CEFusedAcousticEncoder *this)
{
  if (!*((unsigned char *)this + 504)) {
    return 0;
  }
  if (((*(uint64_t (**)(void))(**((void **)this + 56) + 40))(*((void *)this + 56)) & 1) == 0)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Engine upgrade unlikely", 23);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    }
    return 0;
  }
  uint64_t v2 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 56) + 32))(&v12);
  uint64_t v3 = v13;
  uint64_t v13 = 0;
  uint64_t v4 = *((void *)this + 60);
  *((void *)this + 60) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  int v5 = v12;
  *((unsigned char *)this + 504) = v12;
  if (v5)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Engine upgrade failed, still ", 29);
      if (!v3) {
        __cxa_bad_typeid();
      }
LABEL_16:
      unsigned int v8 = v6;
      uint64_t v9 = (const char *)(*(void *)(*(void *)(*v3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
      size_t v10 = strlen(v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    }
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Engine upgrade succeeded, now ", 30);
    if (!v3) {
      __cxa_bad_typeid();
    }
    goto LABEL_16;
  }
  uint64_t v11 = v13;
  uint64_t v13 = 0;
  if (v11) {
    (*(void (**)(void *))(*v11 + 8))(v11);
  }
  return 1;
}

void sub_1B21A92C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEAttnEncoderDecoderConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = 0;
  kaldi::quasar::FixedConfigStream(a3, (uint64_t)v3);
}

void sub_1B21A9F10(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAttnEncoderDecoder::CEAttnEncoderDecoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::InputShapeTemplate *)(a1 + 8));
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 168) = -1;
  *(void *)(a1 + 176) = -1;
  *(_DWORD *)(a1 + 184) = -1;
  *(void *)(a1 + 188) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 196) = -1;
  *(void *)(a1 + 200) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  int v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v8 < 0) {
    int v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v6 = (const void *)a2;
    }
    else {
      int v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEAttnEncoderDecoderConfig::Read(a1, a2, (uint64_t)__p);
}

void sub_1B21AA1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(void *)(v14 + 200);
  *(void *)(v14 + 200) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  kaldi::quasar::CEAttnEncoderDecoderConfig::~CEAttnEncoderDecoderConfig((void **)v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAttnEncoderDecoder::~CEAttnEncoderDecoder(kaldi::quasar::CEAttnEncoderDecoder *this)
{
  uint64_t v2 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  kaldi::quasar::CEAttnEncoderDecoderConfig::~CEAttnEncoderDecoderConfig((void **)this);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::Decode(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "scores != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  if (!a5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "reversed_scores != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  kaldi::CuVector<float>::Resize(a4, -1431655765 * ((unint64_t)(a3[1] - *a3) >> 3), 0);
  kaldi::CuVector<float>::Resize(a5, -1431655765 * ((unint64_t)(a3[1] - *a3) >> 3), 0);
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v7 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 71);
  }
  uint64_t v73 = v7;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"AED rescoring with dynamic shaped inputs/outputs: ", 50);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  }
  unsigned int v8 = *(_DWORD *)(a2 + 20);
  unsigned int v9 = *(_DWORD *)(a1 + 192);
  if (v73)
  {
    if ((int)v9 <= (int)v8) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v9;
    }
    uint64_t v11 = *(void *)(a1 + 200);
    uint64_t v12 = (int64x2_t *)operator new(0x18uLL);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1].u64[1];
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v12[1].u64[1];
    int64x2_t *v12 = vdupq_n_s64(1uLL);
    v12[1].i64[0] = (int)v10;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    (*(void (**)(int32x2_t *__return_ptr, uint64_t, std::string *))(*(void *)v11 + 56))(v94, v11, &__p);
    int32x2_t v13 = v94[0];
    v94[0] = 0;
    uint64_t v75 = (uint64_t)v13;
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
      int32x2_t v13 = (int32x2_t)v75;
    }
    if ((int)v10 >= 1)
    {
      uint64_t v14 = 0;
      do
      {
        (*(void (**)(int32x2_t, BOOL, uint64_t))(**(void **)&v13 + 96))(v13, (int)v14 < *(_DWORD *)(a2 + 20), v14);
        uint64_t v14 = (v14 + 1);
        int32x2_t v13 = (int32x2_t)v75;
      }
      while (v10 != v14);
    }
  }
  else
  {
    uint64_t v75 = 0;
    if ((int)v8 >= (int)v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = v8;
    }
  }
  kaldi::CuMatrix<float>::CuMatrix(v94, v10, *(unsigned int *)(a2 + 16), 0, 0, 0);
  __p.__r_.__value_.__r.__words[2] = __PAIR64__(*(_DWORD *)(a2 + 20), v95);
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v97;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A472A0;
  __p.__r_.__value_.__r.__words[1] = (std::string::size_type)v94[1];
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&__p, a2, 111);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A472A0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  uint64_t v15 = *(int *)(a2 + 16);
  if (v15 != *(_DWORD *)(a1 + 168))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"encoder_states.NumCols() == InputDim()", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 8), v96, v15, v93);
  uint64_t v91 = 0;
  uint64_t v76 = (uint64_t *)(a1 + 200);
  kaldi::quasar::CreateBufferFromMatrix(a1 + 200, (uint64_t)v94, (uint64_t)v93, &v91, &v92);
  uint64_t v16 = v91;
  uint64_t v91 = 0;
  if (v16) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v18 = 0;
    int v68 = (long long *)(a1 + 48);
    uint64_t v71 = (long long *)(a1 + 96);
    int v72 = (long long *)(a1 + 72);
    int v19 = "attn_score[";
    do
    {
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      unint64_t v90 = 0;
      int v20 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v88, (long long *)(a1 + 24), (uint64_t)v92);
      int v21 = v20;
      uint64_t v22 = (unsigned int **)(v17 + 24 * v18);
      uint64_t v89 = v20;
      if (v73)
      {
        if ((unint64_t)v20 >= v90)
        {
          uint64_t v26 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v88, v68, v75);
        }
        else
        {
          if (*(char *)(a1 + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
          }
          else
          {
            long long v23 = *v68;
            v20->__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v23;
          }
          v21[1].__r_.__value_.__r.__words[0] = v75;
          uint64_t v26 = (std::string *)((char *)v21 + 32);
        }
        uint64_t v89 = v26;
        uint64_t v27 = (*(void *)(v17 + 24 * v18 + 8) - (void)*v22) >> 2;
        if (*(_DWORD *)(a1 + 196) <= (int)v27 + 1) {
          int v25 = v27 + 1;
        }
        else {
          int v25 = *(_DWORD *)(a1 + 196);
        }
      }
      else
      {
        uint64_t v24 = (*(void *)(v17 + 24 * v18 + 8) - (void)*v22) >> 2;
        if ((int)v24 + 1 < *(_DWORD *)(a1 + 196)) {
          int v25 = v24 + 1;
        }
        else {
          int v25 = *(_DWORD *)(a1 + 196);
        }
      }
      uint64_t v28 = (uint64_t)v19;
      uint64_t v29 = *v76;
      uint64_t v30 = operator new(0x10uLL);
      uint64_t v31 = v25 + 1;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v30 + 2);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v30 + 2);
      void *v30 = 1;
      v30[1] = v31;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(void *)v29 + 56))(&v87, v29, &__p);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v32 = *v76;
      long long v33 = operator new(0x10uLL);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v33 + 2);
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 2);
      void *v33 = 1;
      v33[1] = v31;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(void *)v32 + 56))(&v86, v32, &__p);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t, void, void))(*(void *)v87 + 96))(v87, *(unsigned int *)(a1 + 184), 0);
      (*(void (**)(uint64_t, void, void))(*(void *)v86 + 96))(v86, *(unsigned int *)(a1 + 184), 0);
      long long v34 = *v22;
      uint64_t v35 = v17 + 24 * v18;
      std::string::size_type v37 = *(unsigned int **)(v35 + 8);
      uint64_t v36 = (unsigned int **)(v35 + 8);
      uint64_t v38 = 1;
      if (*v22 == v37) {
        goto LABEL_49;
      }
      do
      {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v87 + 96))(v87, *v34, v38);
        uint64_t v38 = (v38 + 1);
        ++v34;
      }
      while (v34 != *v36);
      if (v34 == *v22)
      {
LABEL_49:
        uint64_t v39 = 1;
      }
      else
      {
        uint64_t v39 = 1;
        do
        {
          unsigned int v40 = *--v34;
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v86 + 96))(v86, v40, v39);
          uint64_t v39 = (v39 + 1);
        }
        while (v34 != *v22);
      }
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v87 + 96))(v87, *(unsigned int *)(a1 + 180), v38);
      int v19 = (const char *)v28;
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v86 + 96))(v86, *(unsigned int *)(a1 + 180), v39);
      if (v25 <= (int)v38) {
        int v25 = v38;
      }
      while (1)
      {
        uint64_t v41 = v87;
        if (v25 == v38) {
          break;
        }
        uint64_t v38 = (v38 + 1);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v87 + 96))(v87, *(unsigned int *)(a1 + 176), v38);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v86 + 96))(v86, *(unsigned int *)(a1 + 176), v38);
      }
      uint64_t v42 = v89;
      if ((unint64_t)v89 >= v90)
      {
        uint64_t v44 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v88, v72, v87);
      }
      else
      {
        if (*(char *)(a1 + 95) < 0)
        {
          std::string::__init_copy_ctor_external(v89, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
        }
        else
        {
          long long v43 = *v72;
          v89->__r_.__value_.__r.__words[2] = *(void *)(a1 + 88);
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
        }
        v42[1].__r_.__value_.__r.__words[0] = v41;
        uint64_t v44 = (std::string *)((char *)v42 + 32);
      }
      uint64_t v89 = v44;
      uint64_t v45 = v86;
      if ((unint64_t)v44 >= v90)
      {
        double v47 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v88, v71, v86);
      }
      else
      {
        if (*(char *)(a1 + 119) < 0)
        {
          std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
        }
        else
        {
          long long v46 = *v71;
          v44->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
          *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v46;
        }
        v44[1].__r_.__value_.__r.__words[0] = v45;
        double v47 = (std::string *)((char *)v44 + 32);
      }
      uint64_t v89 = v47;
      uint64_t v83 = 0;
      int v84 = 0;
      uint64_t v85 = 0;
      uint64_t v48 = *(void *)(a1 + 200);
      if (*(char *)(a1 + 143) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 120), *(void *)(a1 + 128));
      }
      else {
        std::string __p = *(std::string *)(a1 + 120);
      }
      if (*(char *)(a1 + 167) < 0) {
        std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)(a1 + 144), *(void *)(a1 + 152));
      }
      else {
        std::string v100 = *(std::string *)(a1 + 144);
      }
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v77 = &v80;
      LOBYTE(v78) = 0;
      uint64_t v80 = (std::string *)operator new(0x30uLL);
      uint64_t v81 = v80;
      uint64_t v82 = v80 + 2;
      uint64_t v81 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v82, (long long *)&__p, v101, v80);
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      (*(void (**)(uint64_t, uint64_t *, std::string **, std::string ***, uint64_t *))(*(void *)v48 + 128))(v48, &v88, &v80, &v77, &v83);
      v98 = (void ***)&v77;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      uint64_t v77 = &v80;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
      for (uint64_t i = 0; i != -6; i -= 3)
      {
        if (SHIBYTE(v100.__r_.__value_.__r.__words[i + 2]) < 0) {
          operator delete(*(void **)((char *)&__p + i * 8 + 24));
        }
      }
      unint64_t v50 = v84;
      if ((char *)*v36 - (char *)*v22 != -4)
      {
        unint64_t v51 = 0;
        do
        {
          float v52 = (*(float (**)(void, unint64_t))(*(void *)*(v50 - 1) + 112))(*(v50 - 1), v51);
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"r_attn_score[", 13);
            unint64_t v53 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"][", 2);
            long long v54 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"] = ", 4);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
          }
          *(float *)(*(void *)(a5 + 8) + 4 * v18) = v52 + *(float *)(*(void *)(a5 + 8) + 4 * v18);
          ++v51;
        }
        while (*v36 - *v22 + 1 > v51);
        unint64_t v50 = v84;
      }
      uint64_t v56 = v50 - 1;
      uint64_t v55 = *(v50 - 1);
      *(v50 - 1) = 0;
      if (v55) {
        (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
      }
      int v84 = v50 - 1;
      if ((char *)*v36 - (char *)*v22 != -4)
      {
        unint64_t v57 = 0;
        do
        {
          float v58 = (*(float (**)(void, unint64_t))(*(void *)*(v50 - 2) + 112))(*(v50 - 2), v57);
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v28, 11);
            uint64_t v59 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"][", 2);
            int v60 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"] = ", 4);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
          }
          *(float *)(*(void *)(a4 + 8) + 4 * v18) = v58 + *(float *)(*(void *)(a4 + 8) + 4 * v18);
          ++v57;
        }
        while (*v36 - *v22 + 1 > v57);
        uint64_t v56 = v84;
      }
      uint64_t v63 = *(v56 - 1);
      uint64_t v62 = v56 - 1;
      uint64_t v61 = v63;
      *uint64_t v62 = 0;
      if (v63) {
        (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
      }
      int v84 = v62;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      uint64_t v64 = v86;
      uint64_t v86 = 0;
      if (v64) {
        (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
      }
      uint64_t v65 = v87;
      uint64_t v87 = 0;
      if (v65) {
        (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v18;
      uint64_t v17 = *a3;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v18);
  }
  unsigned int v66 = v92;
  unint64_t v92 = 0;
  if (v66) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v66 + 8))(v66);
  }
  if (v93[0])
  {
    v93[1] = v93[0];
    operator delete(v93[0]);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v94);
  uint64_t result = v75;
  if (v75) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  return result;
}

void sub_1B21AB124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char *a51)
{
  a51 = &a31;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  uint64_t v52 = a34;
  a34 = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  uint64_t v53 = a35;
  a35 = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  a51 = &a36;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  uint64_t v54 = a40;
  a40 = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a44);
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  _Unwind_Resume(a1);
}

void sub_1B21AB134(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B21AB25CLL);
}

void sub_1B21AB150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::BlankIndex(kaldi::quasar::CEAttnEncoderDecoder *this)
{
  return *((unsigned int *)this + 47);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::MaxEncoderSize(kaldi::quasar::CEAttnEncoderDecoder *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t kaldi::quasar::CEAttnEncoderDecoder::MaxWordpieceSize(kaldi::quasar::CEAttnEncoderDecoder *this)
{
  return *((unsigned int *)this + 49);
}

void kaldi::quasar::CEFusedAcousticEncoderConfig::~CEFusedAcousticEncoderConfig(kaldi::quasar::CEFusedAcousticEncoderConfig *this)
{
  uint64_t v3 = (void **)((char *)this + 456);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(*((void **)this + 51));
  }
  if (*((char *)this + 407) < 0) {
    operator delete(*((void **)this + 48));
  }
  uint64_t v3 = (void **)((char *)this + 288);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 264);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 263) < 0) {
    operator delete(*((void **)this + 30));
  }
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

kaldi::quasar::CEFusedAcousticEncoderConfig *kaldi::quasar::CEFusedAcousticEncoderConfig::CEFusedAcousticEncoderConfig(kaldi::quasar::CEFusedAcousticEncoderConfig *this)
{
  *((void *)this + 38) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEFusedAcousticEncoderConfig *)((char *)this + 312));
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEFusedAcousticEncoderConfig *)((char *)this + 324));
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEFusedAcousticEncoderConfig *)((char *)this + 336));
  *(void *)((char *)this + 348) = -1;
  *(void *)((char *)this + 356) = -1;
  *(_OWORD *)((char *)this + 364) = xmmword_1B25A0480;
  *((_DWORD *)this + 95) = -1;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((void *)this + 54) = 0xFFFFFFFF00000001;
  *((_DWORD *)this + 110) = -1;
  *((unsigned char *)this + 444) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  return this;
}

void sub_1B21AB4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 263) < 0) {
    operator delete(*(void **)(v10 + 240));
  }
  if (*(char *)(v10 + 239) < 0) {
    operator delete(*(void **)(v10 + 216));
  }
  if (*(char *)(v10 + 215) < 0) {
    operator delete(*(void **)(v10 + 192));
  }
  if (*(char *)(v10 + 191) < 0) {
    operator delete(*(void **)(v10 + 168));
  }
  if (*(char *)(v10 + 167) < 0) {
    operator delete(*(void **)(v10 + 144));
  }
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*(void **)(v10 + 120));
  }
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*(void **)(v10 + 96));
  }
  if (*(char *)(v10 + 95) < 0) {
    operator delete(*(void **)(v10 + 72));
  }
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*(void **)(v10 + 48));
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*(void **)(v10 + 24));
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEAttnEncoderDecoderConfig::~CEAttnEncoderDecoderConfig(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = *this;
  *this = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
}

uint64_t boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    if (*a1 == v5)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        uint64_t v6 = 0;
        do
        {
          if (*(unsigned __int8 *)(v3 + v6) != *(unsigned __int8 *)(v4 + v6)) {
            break;
          }
          if (++v6 + v3 == a3) {
            break;
          }
        }
        while (v6 + v4 != v5);
        if (v4 + v6 == v5) {
          break;
        }
        if (++v3 == a3) {
          return a3;
        }
      }
    }
  }
  return v3;
}

uint64_t boost::algorithm::detail::find_format_all_impl2<std::string,boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>,boost::algorithm::detail::const_formatF<boost::iterator_range<char const*>>,boost::iterator_range<std::__wrap_iter<char *>>,boost::iterator_range<char const*>>(uint64_t a1, uint64_t *a2, char *a3, char *a4, unsigned char *a5, unsigned char *a6, char *a7, char *a8)
{
  unsigned int v8 = a6;
  long long v38 = 0u;
  long long v39 = 0u;
  int64x2_t v37 = 0u;
  LODWORD(v10) = *(char *)(a1 + 23);
  uint64_t v11 = *(unsigned char **)a1;
  if ((int)v10 >= 0) {
    uint64_t v12 = (unsigned char *)a1;
  }
  else {
    uint64_t v12 = *(unsigned char **)a1;
  }
  if (a5 == a6)
  {
    int v19 = v12;
  }
  else
  {
    uint64_t v15 = a5;
    int v19 = v12;
    int v20 = v12;
    do
    {
      uint64_t v12 = v8;
      int v19 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v20, v15);
      int v21 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
      if ((void)v38 == v37.i64[1]) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = *(void *)v21 + (((_WORD)v39 + WORD4(v39)) & 0xFFF);
      }
      std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(&v37, v21, v22, a7, a8, a8 - a7);
      uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
      if ((v23 & 0x80u) == 0) {
        uint64_t v24 = a1;
      }
      else {
        uint64_t v24 = *(void *)a1;
      }
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(a1 + 8);
      }
      uint64_t v15 = (unsigned char *)boost::algorithm::detail::first_finderF<char const*,boost::algorithm::is_equal>::operator()<std::__wrap_iter<char *>>(a2, (uint64_t)v12, v24 + v23);
      unsigned int v8 = v25;
      int v20 = v12;
      a7 = a3;
      a8 = a4;
    }
    while (v15 != v25);
    LOBYTE(v10) = *(unsigned char *)(a1 + 23);
    uint64_t v11 = *(unsigned char **)a1;
  }
  uint64_t v10 = v10;
  if ((v10 & 0x80u) == 0) {
    uint64_t v26 = a1;
  }
  else {
    uint64_t v26 = (uint64_t)v11;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  uint64_t v27 = boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>((int)&v40, &v37, a1, v19, v12, (unsigned char *)(v26 + v10));
  uint64_t v28 = *(unsigned __int8 *)(a1 + 23);
  if ((v28 & 0x80u) == 0) {
    uint64_t v29 = a1;
  }
  else {
    uint64_t v29 = *(void *)a1;
  }
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(a1 + 8);
  }
  uint64_t v30 = v29 + v28;
  if (*((void *)&v39 + 1))
  {
    uint64_t v31 = (char *)(v37.i64[1] + 8 * ((unint64_t)v39 >> 12));
    if ((void)v38 == v37.i64[1])
    {
      uint64_t v32 = 0;
      long long v34 = 0;
      long long v33 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
    }
    else
    {
      uint64_t v32 = (std::string::value_type *)(*(void *)v31 + (v39 & 0xFFF));
      long long v33 = (char *)(v37.i64[1] + 8 * (((void)v39 + *((void *)&v39 + 1)) >> 12));
      long long v34 = (std::string::value_type *)(*(void *)v33 + ((v39 + *((void *)&v39 + 1)) & 0xFFF));
    }
    if (v34 == v32) {
      std::string::size_type v35 = 0;
    }
    else {
      std::string::size_type v35 = &v34[512 * (v33 - v31)] - &v32[*(void *)v33] + *(void *)v31;
    }
    std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(a1, v30, v31, v32, (uint64_t)v33, v34, v35);
  }
  else
  {
    std::string::erase((std::string *)a1, (std::string::size_type)&v27[-v29], v30 - (void)v27);
  }
  return std::deque<char>::~deque[abi:ne180100](&v37);
}

void sub_1B21AB8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *boost::algorithm::detail::process_segment_helper<false>::operator()<std::deque<char>,std::string,std::__wrap_iter<char *>>(int a1, int64x2_t *a2, int a3, unsigned char *__dst, unsigned char *__src, unsigned char *a6)
{
  unsigned int v8 = __dst;
  uint64_t v10 = a2[2].i64[1];
  if (v10) {
    BOOL v11 = __dst == __src;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    do
    {
      *v8++ = *(unsigned char *)(*(void *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_1B255E5F0);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
      uint64_t v10 = a2[2].i64[1];
    }
    while (v10 && v8 != __src);
  }
  if (v10)
  {
    while (v8 != a6)
    {
      std::deque<char>::push_back(a2, v8);
      *v8++ = *(unsigned char *)(*(void *)(a2->i64[1] + (((unint64_t)a2[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a2[2].i64[0] & 0xFFF));
      a2[2] = vaddq_s64(a2[2], (int64x2_t)xmmword_1B255E5F0);
      std::deque<char>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a2, 1);
    }
  }
  else if (v8 != __src)
  {
    size_t v12 = a6 - __src;
    if (v12) {
      memmove(v8, __src, v12);
    }
    return &v8[v12];
  }
  return a6;
}

void std::deque<char>::push_back(void *a1, unsigned char *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 9) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<char>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(unsigned char *)(*(void *)(v5 + ((v7 >> 9) & 0x7FFFFFFFFFFFF8)) + (v7 & 0xFFF)) = *a2;
  ++a1[5];
}

void std::deque<char>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1000;
  unint64_t v4 = v2 - 4096;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unsigned int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unsigned int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      std::string::size_type v35 = &v34[8 * (v33 >> 2)];
      int64x2_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unsigned int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unsigned int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unsigned int v9 = (char *)a1[1];
    }
    unsigned int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unsigned int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      std::string::size_type v35 = &v34[8 * (v46 >> 2)];
      int64x2_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unsigned int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unsigned int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unsigned int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B21ABD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<char>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1000) {
    a2 = 1;
  }
  if (v2 < 0x2000) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 4096;
  }
  return v4 ^ 1u;
}

void *std::deque<char>::__insert_bidirectional[abi:ne180100]<char const*>(int64x2_t *a1, char *a2, uint64_t a3, char *a4, char *a5, unint64_t a6)
{
  unint64_t v6 = a6;
  unint64_t v10 = a1[2].u64[0];
  unint64_t v11 = v10 >> 12;
  uint64_t v12 = a1->i64[1];
  uint64_t v13 = a1[1].i64[0];
  BOOL v14 = (char *)(v12 + 8 * (v10 >> 12));
  if (v13 == v12) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *(void *)v14 + (a1[2].i64[0] & 0xFFF);
  }
  if (a3 == v15) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = a3 + ((a2 - v14) << 9) - (v15 + *(void *)a2) + *(void *)v14;
  }
  uint64_t v17 = a1[2].i64[1];
  if (v16 >= v17 - v16)
  {
    uint64_t v20 = ((v13 - v12) << 9) - 1;
    if (v13 == v12) {
      uint64_t v20 = 0;
    }
    unint64_t v21 = v10 + v17;
    unint64_t v22 = v20 - v21;
    if (a6 > v22)
    {
      std::deque<char>::__add_back_capacity(a1, a6 - v22);
      uint64_t v17 = a1[2].i64[1];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v21 = a1[2].i64[0] + v17;
    }
    uint64_t v23 = (void *)(v12 + 8 * (v21 >> 12));
    if (v13 == v12) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = (char *)(*v23 + (v21 & 0xFFF));
    }
    *(void *)&long long v68 = v12 + 8 * (v21 >> 12);
    *((void *)&v68 + 1) = v24;
    unint64_t v45 = v17 - v16;
    if (v17 - v16 < v6)
    {
      unint64_t v46 = &a5[v17 - v16 - v6];
      if (v45 < v6 >> 1) {
        unint64_t v46 = &a4[v45];
      }
      if (v46 != a5)
      {
        uint64_t v47 = v46;
        do
        {
          *v24++ = *v47;
          if (&v24[-*v23] == (char *)4096)
          {
            uint64_t v48 = (char *)v23[1];
            ++v23;
            uint64_t v24 = v48;
          }
          ++v47;
          ++a1[2].i64[1];
        }
        while (v47 != a5);
        a5 = v46;
      }
      unint64_t v6 = v17 - v16;
    }
    if (v6)
    {
      uint64_t v49 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v6);
      unint64_t v51 = v49;
      uint64_t v52 = v50;
      uint64_t v53 = *((void *)&v68 + 1);
      if (*((char **)&v68 + 1) != v50)
      {
        long long v54 = v49;
        long long v55 = v50;
        do
        {
          *v24++ = *v55;
          if (&v24[-*v23] == (char *)4096)
          {
            uint64_t v56 = (char *)v23[1];
            ++v23;
            uint64_t v24 = v56;
          }
          if (&(++v55)[-*v54] == (char *)4096)
          {
            unint64_t v57 = (char *)v54[1];
            ++v54;
            long long v55 = v57;
          }
          ++a1[2].i64[1];
          uint64_t v53 = *((void *)&v68 + 1);
        }
        while (v55 != *((char **)&v68 + 1));
      }
      if (v6 < v45)
      {
        float v58 = (const void **)std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100]((uint64_t)&v68, v45);
        std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>(v58, v59, v51, v52, (const void **)v68, *((char **)&v68 + 1), (const void ***)&v69);
        uint64_t v53 = *((void *)&v70 + 1);
        long long v68 = v70;
      }
      if (a5 != a4)
      {
        uint64_t v61 = (uint64_t *)(v68 - 8);
        uint64_t v60 = *(void *)v68;
        while (1)
        {
          int64_t v62 = v53 - v60;
          if (a5 - a4 >= v62) {
            size_t v63 = v62;
          }
          else {
            size_t v63 = a5 - a4;
          }
          a5 -= v63;
          if (v63) {
            memmove((void *)(v53 - v63), a5, v63);
          }
          if (a5 == a4) {
            break;
          }
          uint64_t v64 = *v61--;
          uint64_t v60 = v64;
          uint64_t v53 = v64 + 4096;
        }
      }
    }
  }
  else
  {
    if (a6 > v10)
    {
      std::deque<char>::__add_front_capacity((void **)a1, a6 - v10);
      unint64_t v10 = a1[2].u64[0];
      uint64_t v12 = a1->i64[1];
      uint64_t v13 = a1[1].i64[0];
      unint64_t v11 = v10 >> 12;
    }
    uint64_t v18 = (void *)(v12 + 8 * v11);
    if (v13 == v12) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = *v18 + (v10 & 0xFFF);
    }
    *(void *)&long long v68 = v12 + 8 * v11;
    *((void *)&v68 + 1) = v19;
    if (v6 > v16)
    {
      unint64_t v25 = &a4[v6 - v16];
      if (v16 < v6 >> 1) {
        unint64_t v25 = &a5[-v16];
      }
      if (v25 != a4)
      {
        uint64_t v26 = v25;
        do
        {
          if (v19 == *v18)
          {
            uint64_t v27 = *--v18;
            unint64_t v19 = v27 + 4096;
          }
          char v28 = *--v26;
          *(unsigned char *)--unint64_t v19 = v28;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255FD00);
        }
        while (v26 != a4);
        a4 = v25;
      }
      unint64_t v6 = v16;
    }
    if (v6)
    {
      long long v30 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v6);
      long long v31 = v29;
      long long v32 = (unsigned char *)*((void *)&v68 + 1);
      if (*((unsigned char **)&v68 + 1) != v29)
      {
        unint64_t v33 = v30;
        long long v34 = v29;
        do
        {
          if (v19 == *v18)
          {
            uint64_t v35 = *--v18;
            unint64_t v19 = v35 + 4096;
          }
          if (v34 == (unsigned char *)*v33)
          {
            uint64_t v36 = *--v33;
            long long v34 = (unsigned char *)(v36 + 4096);
          }
          char v37 = *--v34;
          *(unsigned char *)--unint64_t v19 = v37;
          a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255FD00);
          long long v32 = (unsigned char *)*((void *)&v68 + 1);
        }
        while (v34 != *((unsigned char **)&v68 + 1));
      }
      if (v6 < v16)
      {
        long long v38 = std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v68, v16);
        long long v69 = v68;
        std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(v30, v31, (unsigned char **)v38, v39, (void ***)&v69);
        long long v32 = (unsigned char *)*((void *)&v69 + 1);
        long long v68 = v69;
      }
      if (a4 != a5)
      {
        uint64_t v41 = (void **)(v68 + 8);
        uint64_t v40 = *(unsigned char **)v68;
        while (1)
        {
          uint64_t v42 = v40 - v32 + 4096;
          if (a5 - a4 >= v42) {
            size_t v43 = v42;
          }
          else {
            size_t v43 = a5 - a4;
          }
          if (v43) {
            memmove(v32, a4, v43);
          }
          a4 += v43;
          if (a4 == a5) {
            break;
          }
          uint64_t v44 = *v41++;
          uint64_t v40 = v44;
          long long v32 = v44;
        }
      }
    }
  }
  uint64_t v65 = a1->i64[1];
  if (a1[1].i64[0] == v65) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = *(void *)(v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12)) + (a1[2].i64[0] & 0xFFF);
  }
  *(void *)&long long v69 = v65 + 8 * ((unint64_t)a1[2].i64[0] >> 12);
  *((void *)&v69 + 1) = v66;
  return std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100]((uint64_t)&v69, v16);
}

void std::deque<char>::__add_front_capacity(void **a1, unint64_t a2)
{
  BOOL v3 = a1[1];
  int v4 = a1[2];
  uint64_t v5 = v4 - v3;
  if (v4 == v3) {
    unint64_t v6 = a2 + 1;
  }
  else {
    unint64_t v6 = a2;
  }
  if (v4 == v3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v4 - v3) << 9) - 1;
  }
  if ((v6 & 0xFFF) != 0) {
    unint64_t v8 = (v6 >> 12) + 1;
  }
  else {
    unint64_t v8 = v6 >> 12;
  }
  uint64_t v9 = (uint64_t)a1[4];
  unint64_t v10 = v7 - ((void)a1[5] + v9);
  if (v8 >= v10 >> 12) {
    unint64_t v11 = v10 >> 12;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v8 <= v10 >> 12)
  {
    for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
    {
      unint64_t v19 = (void **)a1[2];
      __p[0] = *(v19 - 1);
      a1[2] = v19 - 1;
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
    }
  }
  else
  {
    uint64_t v12 = (uint64_t)(a1 + 3);
    unint64_t v13 = v8 - v11;
    uint64_t v14 = (unsigned char *)a1[3] - (unsigned char *)*a1;
    if (v8 - v11 <= (v14 >> 3) - (v5 >> 3))
    {
      if (v13)
      {
        if (v3 == *a1)
        {
LABEL_30:
          unint64_t v22 = v13;
          do
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, __p);
            --v22;
          }
          while (v22);
          v11 += v13;
          uint64_t v9 = (uint64_t)a1[4];
        }
        else
        {
          while (1)
          {
            __p[0] = operator new(0x1000uLL);
            std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
            uint64_t v20 = a1[1];
            uint64_t v21 = (unsigned char *)a1[2] - v20 == 8 ? 4095 : 4096;
            uint64_t v9 = (uint64_t)a1[4] + v21;
            a1[4] = (void *)v9;
            if (!--v13) {
              break;
            }
            if (v20 == *a1) {
              goto LABEL_30;
            }
          }
        }
      }
      for (a1[4] = (void *)(v9 + (v11 << 12)); v11; --v11)
      {
        uint64_t v23 = (void **)a1[2];
        __p[0] = *(v23 - 1);
        a1[2] = v23 - 1;
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
      }
    }
    else
    {
      BOOL v15 = v4 == v3;
      unint64_t v16 = v8 << 12;
      if (v14 >> 2 <= v13 + (v5 >> 3)) {
        unint64_t v17 = v13 + (v5 >> 3);
      }
      else {
        unint64_t v17 = v14 >> 2;
      }
      long long v70 = a1 + 3;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v12, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v24 = v16 - v15;
      __p[0] = v18;
      __p[1] = v18;
      long long v68 = v18;
      long long v69 = &v18[8 * v17];
      do
      {
        uint64_t v66 = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(__p, &v66);
        --v13;
      }
      while (v13);
      unint64_t v25 = (char *)a1[2];
      for (uint64_t i = v68; v11; --v11)
      {
        if (i == v69)
        {
          int64_t v27 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if (i == __p[0]) {
              unint64_t v35 = 1;
            }
            else {
              unint64_t v35 = (i - (char *)__p[0]) >> 2;
            }
            uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v70, v35);
            long long v38 = (uint64_t *)__p[1];
            uint64_t i = &v36[8 * (v35 >> 2)];
            uint64_t v39 = v68 - (char *)__p[1];
            if (v68 != __p[1])
            {
              uint64_t i = &v36[8 * (v35 >> 2) + (v39 & 0xFFFFFFFFFFFFFFF8)];
              uint64_t v40 = 8 * (v39 >> 3);
              uint64_t v41 = &v36[8 * (v35 >> 2)];
              do
              {
                uint64_t v42 = *v38++;
                *(void *)uint64_t v41 = v42;
                v41 += 8;
                v40 -= 8;
              }
              while (v40);
            }
            size_t v43 = __p[0];
            __p[0] = v36;
            __p[1] = &v36[8 * (v35 >> 2)];
            long long v68 = i;
            long long v69 = &v36[8 * v37];
            if (v43)
            {
              operator delete(v43);
              uint64_t i = v68;
            }
          }
          else
          {
            uint64_t v28 = v27 >> 3;
            BOOL v29 = v27 >> 3 < -1;
            uint64_t v30 = (v27 >> 3) + 2;
            if (v29) {
              uint64_t v31 = v30;
            }
            else {
              uint64_t v31 = v28 + 1;
            }
            long long v32 = (char *)__p[1] - 8 * (v31 >> 1);
            int64_t v33 = i - (char *)__p[1];
            if (i != __p[1])
            {
              memmove((char *)__p[1] - 8 * (v31 >> 1), __p[1], i - (char *)__p[1]);
              uint64_t i = (char *)__p[1];
            }
            long long v34 = &i[-8 * (v31 >> 1)];
            uint64_t i = &v32[v33];
            __p[1] = v34;
            long long v68 = &v32[v33];
          }
        }
        *(void *)uint64_t i = *((void *)v25 - 1);
        uint64_t i = v68 + 8;
        v68 += 8;
        unint64_t v25 = (char *)a1[2] - 8;
        a1[2] = v25;
      }
      uint64_t v44 = (char *)a1[1];
      if (v44 == v25)
      {
        uint64_t v44 = v25;
      }
      else
      {
        do
        {
          if (i == v69)
          {
            int64_t v45 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (i == __p[0]) {
                unint64_t v52 = 1;
              }
              else {
                unint64_t v52 = (i - (char *)__p[0]) >> 2;
              }
              uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v70, v52);
              long long v55 = (uint64_t *)__p[1];
              uint64_t i = &v53[8 * (v52 >> 2)];
              uint64_t v56 = v68 - (char *)__p[1];
              if (v68 != __p[1])
              {
                uint64_t i = &v53[8 * (v52 >> 2) + (v56 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v57 = 8 * (v56 >> 3);
                float v58 = &v53[8 * (v52 >> 2)];
                do
                {
                  uint64_t v59 = *v55++;
                  *(void *)float v58 = v59;
                  v58 += 8;
                  v57 -= 8;
                }
                while (v57);
              }
              uint64_t v60 = __p[0];
              __p[0] = v53;
              __p[1] = &v53[8 * (v52 >> 2)];
              long long v68 = i;
              long long v69 = &v53[8 * v54];
              if (v60)
              {
                operator delete(v60);
                uint64_t i = v68;
              }
            }
            else
            {
              uint64_t v46 = v45 >> 3;
              BOOL v29 = v45 >> 3 < -1;
              uint64_t v47 = (v45 >> 3) + 2;
              if (v29) {
                uint64_t v48 = v47;
              }
              else {
                uint64_t v48 = v46 + 1;
              }
              uint64_t v49 = (char *)__p[1] - 8 * (v48 >> 1);
              int64_t v50 = i - (char *)__p[1];
              if (i != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v48 >> 1), __p[1], i - (char *)__p[1]);
                uint64_t i = (char *)__p[1];
              }
              unint64_t v51 = &i[-8 * (v48 >> 1)];
              uint64_t i = &v49[v50];
              __p[1] = v51;
              long long v68 = &v49[v50];
            }
          }
          uint64_t v61 = *(void *)v44;
          v44 += 8;
          *(void *)uint64_t i = v61;
          uint64_t i = v68 + 8;
          v68 += 8;
        }
        while (v44 != a1[2]);
        unint64_t v25 = (char *)a1[1];
      }
      int64_t v62 = v69;
      size_t v63 = (char *)a1[3];
      uint64_t v64 = (char *)a1[4];
      a1[2] = i;
      a1[3] = v62;
      uint64_t v65 = *a1;
      *(_OWORD *)a1 = *(_OWORD *)__p;
      __p[0] = v65;
      __p[1] = v25;
      long long v68 = v44;
      long long v69 = v63;
      a1[4] = &v64[v24];
      if (v44 != v25) {
        long long v68 = &v44[(v25 - v44 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v65) {
        operator delete(v65);
      }
    }
  }
}

void sub_1B21AC704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8) - *result + a2;
    if (v4 < 1) {
      result -= (unint64_t)(4095 - v4) >> 12;
    }
    else {
      result += (unint64_t)v4 >> 12;
    }
  }
  return result;
}

void std::deque<char>::__add_back_capacity(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((v5 & 0xFFF) != 0) {
    unint64_t v6 = (v5 >> 12) + 1;
  }
  else {
    unint64_t v6 = v5 >> 12;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 12) {
    unint64_t v8 = v7 >> 12;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 12)
  {
    for (a1[4] = v7 - (v8 << 12); v8; --v8)
    {
      unint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      unint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          BOOL v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v28);
          uint64_t v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          int64_t v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 4095;
          }
          else {
            uint64_t v64 = 4096;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 12);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          long long v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              uint64_t v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                uint64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)uint64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              uint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              uint64_t v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              uint64_t v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      uint64_t v91 = a1 + 3;
      if (v13) {
        BOOL v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v13);
      }
      else {
        BOOL v15 = 0;
      }
      uint64_t v38 = v8 << 12;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        uint64_t v88 = operator new(0x1000uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v91, v48);
              unint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                uint64_t v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)uint64_t v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              int64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1B21ACCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__deque_iterator<char,char *,char &,char **,long,4096l>::operator-[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 8) - a2 - *result;
    if (v4 < 1) {
      result -= (unint64_t)(4095 - v4) >> 12;
    }
    else {
      result += (unint64_t)v4 >> 12;
    }
  }
  return result;
}

void ****std::__for_each_segment[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>>(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, void ***a5)
{
  uint64_t v11 = a5;
  if (a1 != a3)
  {
    unint64_t v7 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4096); ; uint64_t i = v9 + 4096)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, i);
      if (v7 == a3) {
        break;
      }
      unint64_t v9 = (unsigned char *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](&v11, a2, a4);
}

void ****std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>::operator()[abi:ne180100](void ****result, unsigned char *__src, unsigned char *a3)
{
  BOOL v3 = *result;
  unint64_t v5 = **result;
  uint64_t v4 = (*result)[1];
  if (__src != a3)
  {
    unint64_t v7 = __src;
    unint64_t v8 = result;
    uint64_t v10 = (char *)*v5++;
    unint64_t v9 = (void **)v10;
    while (1)
    {
      uint64_t v11 = (char *)v9 - (char *)v4 + 4096;
      if (a3 - v7 >= v11) {
        size_t v12 = v11;
      }
      else {
        size_t v12 = a3 - v7;
      }
      if (v12) {
        uint64_t result = (void ****)memmove(v4, v7, v12);
      }
      v7 += v12;
      if (v7 == a3) {
        break;
      }
      unint64_t v13 = (void **)*v5++;
      unint64_t v9 = v13;
      uint64_t v4 = v13;
    }
    uint64_t v4 = (void **)((char *)v4 + v12);
    if ((char *)*(v5 - 1) + 4096 == (char *)v4) {
      uint64_t v4 = (void **)*v5;
    }
    else {
      --v5;
    }
    BOOL v3 = *v8;
  }
  *BOOL v3 = v5;
  v3[1] = v4;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>,0>@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  unint64_t v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4) {
      goto LABEL_46;
    }
    uint64_t v35 = (uint64_t)*a5;
    uint64_t v36 = a4;
    while (1)
    {
      uint64_t v37 = &a6[-v35];
      if (v36 - a2 >= (uint64_t)v37) {
        size_t v38 = (size_t)v37;
      }
      else {
        size_t v38 = v36 - a2;
      }
      v36 -= v38;
      a6 -= v38;
      if (v38) {
        uint64_t result = memmove(a6, v36, v38);
      }
      if (v36 == a2) {
        break;
      }
      uint64_t v39 = (uint64_t)*--v8;
      uint64_t v35 = v39;
      a6 = (char *)(v39 + 4096);
    }
    goto LABEL_44;
  }
  unint64_t v14 = *a3;
  if (*a3 != a4)
  {
    uint64_t v15 = (uint64_t)*a5;
    unint64_t v16 = a4;
    while (1)
    {
      unint64_t v17 = &a6[-v15];
      if (v16 - v14 >= (uint64_t)v17) {
        size_t v18 = (size_t)v17;
      }
      else {
        size_t v18 = v16 - v14;
      }
      v16 -= v18;
      a6 -= v18;
      if (v18) {
        uint64_t result = memmove(a6, v16, v18);
      }
      if (v16 == v14) {
        break;
      }
      uint64_t v20 = (uint64_t)*--v8;
      uint64_t v15 = v20;
      a6 = (char *)(v20 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }
  BOOL v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    uint64_t v23 = (char *)*v8;
    do
    {
      uint64_t v24 = *v22;
      unint64_t v25 = (char *)*v22 + 4096;
      while (1)
      {
        int64_t v26 = (char *)(a6 - v23);
        if (v25 - v24 >= (uint64_t)v26) {
          size_t v27 = (size_t)v26;
        }
        else {
          size_t v27 = v25 - v24;
        }
        v25 -= v27;
        a6 -= v27;
        if (v27) {
          uint64_t result = memmove(a6, v25, v27);
        }
        if (v25 == v24) {
          break;
        }
        unint64_t v28 = (char *)*--v8;
        uint64_t v23 = v28;
        a6 = v28 + 4096;
      }
      uint64_t v23 = (char *)*v8;
      if ((char *)*v8 + 4096 == a6)
      {
        BOOL v29 = (char *)v8[1];
        ++v8;
        uint64_t v23 = v29;
        a6 = v29;
      }
      --v22;
    }
    while (v22 != a1);
  }
  uint64_t v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    uint64_t v31 = (uint64_t)*v8;
    while (1)
    {
      long long v32 = &a6[-v31];
      if (v30 - a2 >= (uint64_t)v32) {
        size_t v33 = (size_t)v32;
      }
      else {
        size_t v33 = v30 - a2;
      }
      v30 -= v33;
      a6 -= v33;
      if (v33) {
        uint64_t result = memmove(a6, v30, v33);
      }
      if (v30 == a2) {
        break;
      }
      uint64_t v34 = (uint64_t)*--v8;
      uint64_t v31 = v34;
      a6 = (char *)(v34 + 4096);
    }
LABEL_44:
    if ((char *)*v8 + 4096 == a6)
    {
      uint64_t v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }
LABEL_46:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

char *std::string::__insert_with_size<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(uint64_t a1, uint64_t a2, void *a3, std::string::value_type *a4, uint64_t a5, std::string::value_type *a6, std::string::size_type a7)
{
  unint64_t v8 = (std::string *)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::size_type v9 = a2 - *(void *)a1;
    if (!a7)
    {
      unint64_t v8 = *(std::string **)a1;
      return (char *)v8 + v9;
    }
  }
  else
  {
    std::string::size_type v9 = a2 - a1;
    if (!a7) {
      return (char *)v8 + v9;
    }
  }
  std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(&__p, a3, a4, a5, a6);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(v8, a7, v9, (char *)p_p, (char *)p_p + size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return (char *)v12;
}

void sub_1B21AD1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__insert_from_safe_copy[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  std::string::size_type v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    uint64_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

void std::string::__init_with_sentinel[abi:ne180100]<std::__deque_iterator<char,char *,char &,char **,long,4096l>,std::__deque_iterator<char,char *,char &,char **,long,4096l>>(std::string *this, void *a2, std::string::value_type *a3, uint64_t a4, std::string::value_type *a5)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3 != a5)
  {
    unint64_t v6 = a3;
    do
    {
      std::string::push_back(this, *v6++);
      if (&v6[-*a2] == (std::string::value_type *)4096)
      {
        std::string::size_type v9 = (std::string::value_type *)a2[1];
        ++a2;
        unint64_t v6 = v9;
      }
    }
    while (v6 != a5);
  }
}

void sub_1B21AD358(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_1B21AD374(_Unwind_Exception *a1)
{
}

uint64_t std::deque<char>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 2048;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 4096;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void *std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a1 + 8);
  *BOOL v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B21AD47C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string::size_type v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  char v16 = &v10[24 * v9];
  *(void *)std::string::size_type v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<long long>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B21AD588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<long long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>,std::reverse_iterator<std::vector<long long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<long long>>,std::reverse_iterator<std::vector<long long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void quasar::tennessee::lm::CreatePersonalizationSlotInfoT()
{
}

void sub_1B21AD8C0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)v1, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B21AD9A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::tennessee::lm::LoadDefaultPersonalizationSlotInfos(uint64_t *a1@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::reserve(a1, 0x23uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "\\NT-contact");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(&v7, "\\company-first", "COMPANYFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(v8, "\\contact-first", "CONTACTFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[17],0>(v9, "\\contact-first-derived", "CONTACTFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(v10, "\\contact-group", "CONTACTGROUPNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(v11, "\\contact-last", "CONTACTLASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[16],0>(v12, "\\contact-last-derived", "CONTACTLASTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v13, "\\contact-middle", "CONTACTMIDDLENAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v14, "\\contact-nickname", "CONTACTFIRSTNAME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v15, "\\interaction-first", "INTERACTIONNAMELME");
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[19],0>(v16, "\\interaction-last", "INTERACTIONNAMELME");
  uint64_t v3 = 0;
  uint64_t v2 = 0;
  uint64_t v4 = 0;
  __p[4] = &v2;
  LOBYTE(v6) = 0;
  uint64_t v2 = (std::string *)operator new(0x1E0uLL);
  uint64_t v3 = v2;
  uint64_t v4 = v2 + 20;
  uint64_t v3 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v4, &v7, v17, v2);
  quasar::tennessee::lm::CreatePersonalizationSlotInfoT();
}

void sub_1B21B1B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)&STACK[0x368]);
  uint64_t v11 = STACK[0x360];
  STACK[0x360] = 0;
  if (v11) {
    std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)&STACK[0x360], v11);
  }
  STACK[0x390] = (unint64_t)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x390]);
  std::pair<std::string,std::string>::~pair((uint64_t)&STACK[0x398]);
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete((void *)STACK[0x348]);
  }
  STACK[0x398] = v9;
  std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x398]);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1B21B2C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *quasar::tennessee::lm::ExtractPreItnPersonalizationTags@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  while (v3 != v4)
  {
    uint64_t v5 = *(const void ****)(*(void *)v3 + 24);
    uint64_t v6 = *(const void ****)(*(void *)v3 + 32);
    while (v5 != v6)
      uint64_t result = quasar::tennessee::InsertOrDie<std::set<std::string>>((uint64_t **)a2, *v5++);
    v3 += 8;
  }
  return result;
}

void sub_1B21B2CD4(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *quasar::tennessee::InsertOrDie<std::set<std::string>>(uint64_t **a1, const void **a2)
{
  uint64_t result = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
  if ((v4 & 1) == 0)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"duplicate element ", 18);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)a2);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return result;
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B2DBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B2E10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B2E64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B2EB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B2F0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B2F60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B2FB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3008(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B305C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B30B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3104(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3158(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B31AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3200(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3254(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[13],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B32A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B32FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[11],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3350(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B33A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B33F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B344C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B34A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B34F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3548(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B359C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B35F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3644(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3698(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B36EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[28],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3740(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3794(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[29],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B37E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B383C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3890(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B38E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[19],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3938(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B398C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B39E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[22],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3A34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[32],char const(&)[18],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3A88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3ADC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3B30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[24],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3B84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3BD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3C2C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3C80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[20],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3CD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3D28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[16],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3D7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[26],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3DD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3E24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[27],char const(&)[17],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3E78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[24],char const(&)[14],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1B21B3ECC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  char v4 = *(uint64_t **)(result + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        uint64_t result = std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    uint64_t *v1 = 0;
    if (v3) {
      std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

uint64_t std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    char v4 = (void **)(a2 + 24);
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    return MEMORY[0x1B3EA8670](a2, 0x1032C402D514303);
  }
  return result;
}

void std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  char v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationPreItnTokenInfoT>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>,std::reverse_iterator<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    uint64_t *v1 = 0;
    if (v3) {
      uint64_t result = std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = v2 - 8;
      *(void *)(v4 + 16) = v2 - 8;
      uint64_t v5 = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (v5) {
        uint64_t result = std::default_delete<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>::operator()[abi:ne180100](result, v5);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void quasar::MovingAverage::init(quasar::MovingAverage *this, uint64_t a2)
{
  if (!a2)
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "n must be positive");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  *(void *)this = a2;
  quasar::MovingAverage::clear(this);
}

void quasar::MovingAverage::clear(quasar::MovingAverage *this)
{
  *((_DWORD *)this + 2) = 0;
  uint64_t v2 = (void **)*((void *)this + 3);
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 7) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *((void *)this + 4);
      uint64_t v2 = (void **)(*((void *)this + 3) + 8);
      *((void *)this + 3) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 1024;
  }
  *((void *)this + 6) = v6;
}

void quasar::MovingAverage::add(quasar::MovingAverage *this, float a2)
{
  float v8 = a2;
  if (!*(void *)this)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "init() was not called");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  uint64_t v3 = (char *)this + 16;
  std::deque<float>::push_back((void *)this + 2, &v8);
  float v4 = v8 + *((float *)this + 2);
  *((float *)this + 2) = v4;
  unint64_t v5 = *((void *)this + 7);
  if (v5 > *(void *)this)
  {
    unint64_t v6 = *((void *)this + 6);
    *((float *)this + 2) = v4
                         - *(float *)(*(void *)(*((void *)this + 3) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * (v6 & 0x3FF));
    *((void *)this + 6) = v6 + 1;
    *((void *)this + 7) = v5 - 1;
    std::deque<int>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)v3, 1);
  }
}

float std::deque<float>::push_back(void *a1, float *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<float>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  float result = *a2;
  *(float *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

BOOL quasar::MovingAverage::full(quasar::MovingAverage *this)
{
  return *((void *)this + 7) == *(void *)this;
}

float quasar::MovingAverage::getAverage(quasar::MovingAverage *this)
{
  unint64_t v1 = *((void *)this + 7);
  if (!v1)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Cannot compute average of 0 items");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
  return *((float *)this + 2) / (float)v1;
}

uint64_t quasar::MovingAverage::getCount(quasar::MovingAverage *this)
{
  return *((void *)this + 7);
}

uint64_t quasar::MovingAverage::resize(uint64_t this, unint64_t a2)
{
  if (!a2)
  {
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "n must be positive for resize");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  uint64_t v3 = this;
  unint64_t v4 = *(void *)(this + 56);
  if (v4 > a2)
  {
    unint64_t v5 = a2;
    do
    {
      unint64_t v6 = *(void *)(v3 + 48);
      *(float *)(v3 + 8) = *(float *)(v3 + 8)
                         - *(float *)(*(void *)(*(void *)(v3 + 24) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8))
                                    + 4 * (v6 & 0x3FF));
      *(void *)(v3 + 48) = v6 + 1;
      *(void *)(v3 + 56) = v4 - 1;
      this = std::deque<int>::__maybe_remove_front_spare[abi:ne180100](v3 + 16, 1);
      ++v5;
      unint64_t v4 = *(void *)(v3 + 56);
    }
    while (v5 < v4);
  }
  *(void *)uint64_t v3 = a2;
  return this;
}

void std::deque<float>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    unint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      size_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  size_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  BOOL v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B21B4C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B21B4E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1B3EA8670](v19, 0x10F2C406BFFAF76);

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::SystemConfig,char const*>()
{
}

void sub_1B21B4F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v10 - 33) < 0) {
    operator delete(*(void **)(v10 - 56));
  }
  MEMORY[0x1B3EA8670](v9, 0x10B3C4039F8198BLL);
  _Unwind_Resume(a1);
}

void sub_1B21B5088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1B21B5578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a14);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a22);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v37 = *(void **)(v35 - 152);
  if (v37)
  {
    *(void *)(v35 - 144) = v37;
    operator delete(v37);
  }
  uint64_t v38 = *(void *)(v35 - 128);
  *(void *)(v35 - 128) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 32))(v38);
  }

  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(quasar::ptt::RecognizePronunciationResult const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::unique_ptr<kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>>::reset[abi:ne180100](void **a1, void *a2)
{
  float result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReader(result);
    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void *kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::~RandomAccessTableReader(void *a1)
{
  if (*a1 && (kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"RandomAccessTableReader destructor: failure detected.", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return a1;
}

uint64_t kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::Close(void *a1)
{
  kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(a1);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 40))(*a1);
  }
  *a1 = 0;
  return v2;
}

void *kaldi::RandomAccessTableReader<kaldi::KaldiObjectHolder<quasar::KaldiString>>::CheckImpl(void *result)
{
  if (!*result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Trying to use empty RandomAccessTableReader (perhaps you ", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "passed the empty string as an argument to a program?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

BOOL sdapi::SdapiITNImpl::fetchHeadClone(sdapi::SdapiITNImpl *this, const char *a2, char *a3)
{
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(this);
  std::recursive_mutex::lock(SharedMutex);
  if (TPLexicon_GetInfo())
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Failed TPLexicon_GetInfo()", 26);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  LODWORD(v6[0]) = 0;
  BOOL v4 = TPLexicon_GetHeadClone() == 0;
  std::recursive_mutex::unlock(SharedMutex);
  return v4;
}

void sub_1B21B5DD4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sdapi::SdapiITNImpl::formatWords(sdapi::SdapiUtil *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v231 = *MEMORY[0x1E4F143B8];
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(a1);
  std::recursive_mutex::lock(SharedMutex);
  if (*a2 == a2[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_293;
  }
  v216 = 0;
  v215 = 0;
  uint64_t v217 = 0;
  int v6 = quasar::QsrText::SingletonInstance(v5);
  quasar::QsrText::qsrToHatTokens(v6, (uint64_t)a2, (uint64_t *)&v215, 1);
  v213 = 0;
  v212 = 0;
  v214 = 0;
  v210 = 0;
  std::string __p = 0;
  v211 = 0;
  uint64_t v7 = v215;
  if (v215 == v216) {
    goto LABEL_116;
  }
  int v8 = 0;
  uint64_t v173 = 0;
  v169 = a3;
  uint64_t v9 = MEMORY[0x1E4F14390];
  do
  {
    if (quasar::Token::isPrintable(v7))
    {
      uint64_t v10 = (const char *)v7;
      if (*((char *)v7 + 23) < 0) {
        uint64_t v10 = *(const char **)v7;
      }
      if (sdapi::SdapiITNImpl::fetchHeadClone(a1, v10, (char *)v219))
      {
        std::string::basic_string[abi:ne180100]<0>(&v184, (char *)v219);
      }
      else if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v184, *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v11 = *(_OWORD *)v7;
        v184.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v11;
      }
      int v171 = v8;
      BOOL v12 = (v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type size = HIBYTE(v184.__r_.__value_.__r.__words[2]);
      if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v184.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::string::size_type v14 = 0;
        int v15 = 0;
        int v16 = 1;
        do
        {
          if (v12) {
            uint64_t v17 = (std::string *)v184.__r_.__value_.__r.__words[0];
          }
          else {
            uint64_t v17 = &v184;
          }
          int v18 = v17->__r_.__value_.__s.__data_[v14];
          if (v18 == 94)
          {
            int v19 = 0;
            int v20 = 0;
            int v21 = v15 + 2;
            int v22 = v15 + 1;
            do
            {
              if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v23 = &v184;
              }
              else {
                uint64_t v23 = (std::string *)v184.__r_.__value_.__r.__words[0];
              }
              uint64_t v24 = v23->__r_.__value_.__s.__data_[v22 + v19];
              if ((*(_DWORD *)(v9 + 4 * v24 + 60) & 0x400) != 0)
              {
                int v26 = v24 - 48;
              }
              else
              {
                if ((v24 & 0x80) != 0) {
                  int v25 = __maskrune(v24, 0x1000uLL);
                }
                else {
                  int v25 = *(_DWORD *)(v9 + 4 * v24 + 60) & 0x1000;
                }
                if (v25) {
                  LODWORD(v24) = __toupper(v24);
                }
                int v26 = v24 - 55;
              }
              int v20 = v26 + 16 * v20;
              ++v19;
            }
            while (v19 != 2);
            size_t v27 = v213;
            if (v213 >= v214)
            {
              unint64_t v37 = (unint64_t)v212;
              uint64_t v38 = v213 - (unsigned char *)v212;
              uint64_t v39 = v213 - (unsigned char *)v212 + 1;
              if (v39 < 0) {
LABEL_294:
              }
                std::vector<int>::__throw_length_error[abi:ne180100]();
              unint64_t v40 = v214 - (unsigned char *)v212;
              if (2 * (v214 - (unsigned char *)v212) > (unint64_t)v39) {
                uint64_t v39 = 2 * v40;
              }
              if (v40 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v41 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v41 = v39;
              }
              if (v41) {
                uint64_t v42 = (char *)operator new(v41);
              }
              else {
                uint64_t v42 = 0;
              }
              uint64_t v47 = &v42[v38];
              unint64_t v48 = &v42[v38];
              *unint64_t v48 = v20;
              uint64_t v28 = v48 + 1;
              if (v27 != (char *)v37)
              {
                uint64_t v49 = &v27[~v37];
                do
                {
                  char v50 = *--v27;
                  (v49--)[(void)v42] = v50;
                }
                while (v27 != (char *)v37);
                size_t v27 = (char *)v212;
                uint64_t v47 = v42;
              }
              v212 = v47;
              v213 = v28;
              v214 = &v42[v41];
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              char *v213 = v20;
              uint64_t v28 = v27 + 1;
            }
            v213 = v28;
            if (!v20) {
              ++v16;
            }
            int v15 = v21;
          }
          else
          {
            BOOL v29 = v213;
            if (v213 >= v214)
            {
              unint64_t v31 = (unint64_t)v212;
              uint64_t v32 = v213 - (unsigned char *)v212;
              uint64_t v33 = v213 - (unsigned char *)v212 + 1;
              if (v33 < 0) {
                goto LABEL_294;
              }
              unint64_t v34 = v214 - (unsigned char *)v212;
              if (2 * (v214 - (unsigned char *)v212) > (unint64_t)v33) {
                uint64_t v33 = 2 * v34;
              }
              if (v34 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v35 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v35 = v33;
              }
              if (v35) {
                uint64_t v36 = (char *)operator new(v35);
              }
              else {
                uint64_t v36 = 0;
              }
              uint64_t v43 = &v36[v32];
              uint64_t v44 = &v36[v32];
              *uint64_t v44 = v18;
              long long v30 = v44 + 1;
              if (v29 != (char *)v31)
              {
                uint64_t v45 = &v29[~v31];
                do
                {
                  char v46 = *--v29;
                  (v45--)[(void)v36] = v46;
                }
                while (v29 != (char *)v31);
                BOOL v29 = (char *)v212;
                uint64_t v43 = v36;
              }
              v212 = v43;
              v213 = v30;
              v214 = &v36[v35];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              char *v213 = v18;
              long long v30 = v29 + 1;
            }
            v213 = v30;
          }
          std::string::size_type v14 = (v15 + 1);
          BOOL v12 = (v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
          std::string::size_type v51 = HIBYTE(v184.__r_.__value_.__r.__words[2]);
          if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v51 = v184.__r_.__value_.__l.__size_;
          }
          ++v15;
        }
        while (v51 > v14);
      }
      else
      {
        int v16 = 1;
      }
      uint64_t v52 = v210;
      if (v210 >= v211)
      {
        long long v54 = (int *)__p;
        uint64_t v55 = ((char *)v210 - (unsigned char *)__p) >> 2;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v57 = (char *)v211 - (unsigned char *)__p;
        if (((char *)v211 - (unsigned char *)__p) >> 1 > v56) {
          unint64_t v56 = v57 >> 1;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58)
        {
          uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v211, v58);
          uint64_t v52 = v210;
          long long v54 = (int *)__p;
        }
        else
        {
          uint64_t v59 = 0;
        }
        long long v60 = (int *)&v59[4 * v55];
        int *v60 = v16;
        uint64_t v53 = v60 + 1;
        while (v52 != v54)
        {
          int v61 = *--v52;
          *--long long v60 = v61;
        }
        std::string __p = v60;
        v210 = v53;
        v211 = (int *)&v59[4 * v58];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        int *v210 = v16;
        uint64_t v53 = v52 + 1;
      }
      v210 = v53;
      long long v62 = v213;
      if (v213 >= v214)
      {
        unint64_t v64 = (unint64_t)v212;
        uint64_t v65 = v213 - (unsigned char *)v212;
        uint64_t v66 = v213 - (unsigned char *)v212 + 1;
        if (v66 < 0) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v67 = v214 - (unsigned char *)v212;
        if (2 * (v214 - (unsigned char *)v212) > (unint64_t)v66) {
          uint64_t v66 = 2 * v67;
        }
        if (v67 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v68 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v68 = v66;
        }
        if (v68) {
          uint64_t v69 = (char *)operator new(v68);
        }
        else {
          uint64_t v69 = 0;
        }
        uint64_t v70 = &v69[v65];
        uint64_t v71 = &v69[v65];
        char *v71 = 0;
        size_t v63 = v71 + 1;
        if (v62 != (char *)v64)
        {
          uint64_t v72 = &v62[~v64];
          do
          {
            char v73 = *--v62;
            (v72--)[(void)v69] = v73;
          }
          while (v62 != (char *)v64);
          long long v62 = (char *)v212;
          uint64_t v70 = v69;
        }
        v212 = v70;
        v213 = v63;
        v214 = &v69[v68];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        char *v213 = 0;
        size_t v63 = v62 + 1;
      }
      v213 = v63;
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      int v8 = v16 + v171;
      ++v173;
    }
    uint64_t v7 = (quasar::Token *)((char *)v7 + 224);
  }
  while (v7 != v216);
  a3 = v169;
  if (!v173)
  {
LABEL_116:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_288;
  }
  uint64_t v74 = v213;
  if (v213 >= v214)
  {
    unint64_t v76 = (unint64_t)v212;
    uint64_t v77 = v213 - (unsigned char *)v212;
    uint64_t v78 = v213 - (unsigned char *)v212 + 1;
    if (v78 < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v79 = v214 - (unsigned char *)v212;
    if (2 * (v214 - (unsigned char *)v212) > (unint64_t)v78) {
      uint64_t v78 = 2 * v79;
    }
    if (v79 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v80 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v80 = v78;
    }
    if (v80) {
      uint64_t v81 = operator new(v80);
    }
    else {
      uint64_t v81 = 0;
    }
    uint64_t v82 = (char *)v81 + v77;
    uint64_t v83 = (char *)v81 + v80;
    uint64_t v84 = (char *)v81 + v77;
    unsigned char *v84 = 0;
    uint64_t v75 = v84 + 1;
    if (v74 == (char *)v76)
    {
      uint64_t v81 = v82;
    }
    else
    {
      uint64_t v85 = &v74[~v76];
      do
      {
        char v86 = *--v74;
        (v85--)[(void)v81] = v86;
      }
      while (v74 != (char *)v76);
      uint64_t v74 = (char *)v212;
    }
    v212 = v81;
    v213 = v75;
    v214 = v83;
    if (v74) {
      operator delete(v74);
    }
  }
  else
  {
    char *v213 = 0;
    uint64_t v75 = v74 + 1;
  }
  v213 = v75;
  uint64_t v208 = 0;
  uint64_t v207 = 0;
  if (TPItn_WordSequenceToResult())
  {
    long long v230 = 0u;
    long long v229 = 0u;
    long long v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    long long v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not format word sequence: ", 32);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  LODWORD(__n) = 0;
  if (TPItn_GetResultText())
  {
    long long v230 = 0u;
    long long v229 = 0u;
    long long v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    long long v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not get text of word sequence", 35);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  std::vector<char>::vector(&v205, __n);
  if (TPItn_GetResultText())
  {
    long long v230 = 0u;
    long long v229 = 0u;
    long long v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    long long v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not get result", 20);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  std::string::basic_string[abi:ne180100](&__dst_4, v205.__begin_, (__n - 1));
  unsigned int __dst = 0;
  if (TPItn_GetResultAlignment())
  {
    long long v230 = 0u;
    long long v229 = 0u;
    long long v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    long long v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not get result Alignment ", 31);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  std::vector<unsigned int>::vector(&v202, __dst);
  std::vector<unsigned int>::vector(&v201, __dst);
  if (TPItn_GetResultAlignment())
  {
    long long v230 = 0u;
    long long v229 = 0u;
    long long v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    long long v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"could not get result Alignment ", 31);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  v199 = 0;
  v198 = 0;
  v200 = 0;
  v196 = 0;
  v195 = 0;
  v197 = 0;
  uint64_t v87 = __p;
  if (v210 == __p) {
    goto LABEL_223;
  }
  unint64_t v88 = 0;
  uint64_t v89 = 0;
  do
  {
    unsigned int v90 = __dst;
    if (v89 >= __dst) {
      goto LABEL_222;
    }
    int v91 = 0;
    int v92 = 0;
    int v93 = 0;
    int v94 = v87[v88];
    uint64_t v168 = v89;
    uint64_t v95 = (int)v89;
    uint64_t v96 = (int)v89;
    while (1)
    {
      int v97 = v201.__begin_[v96];
      unsigned int v98 = v202.__begin_[v96];
      if (v97) {
        BOOL v99 = 0;
      }
      else {
        BOOL v99 = v96 == v95;
      }
      if (v99)
      {
        std::string v100 = v199;
        if (v199 >= v200)
        {
          uint64_t v102 = (char *)v198;
          uint64_t v103 = (v199 - (unsigned char *)v198) >> 2;
          unint64_t v104 = v103 + 1;
          if ((unint64_t)(v103 + 1) >> 62) {
            goto LABEL_295;
          }
          uint64_t v105 = v200 - (unsigned char *)v198;
          if ((v200 - (unsigned char *)v198) >> 1 > v104) {
            unint64_t v104 = v105 >> 1;
          }
          if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v106 = v104;
          }
          if (v106)
          {
            v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v200, v106);
            std::string v100 = v199;
            uint64_t v102 = (char *)v198;
          }
          else
          {
            v107 = 0;
          }
          v108 = &v107[4 * v103];
          *(_DWORD *)v108 = 0;
          uint64_t v101 = v108 + 4;
          while (v100 != v102)
          {
            int v109 = *((_DWORD *)v100 - 1);
            v100 -= 4;
            *((_DWORD *)v108 - 1) = v109;
            v108 -= 4;
          }
          v198 = v108;
          v199 = v101;
          v200 = &v107[4 * v106];
          if (v102) {
            operator delete(v102);
          }
        }
        else
        {
          *(_DWORD *)v199 = 0;
          uint64_t v101 = v100 + 4;
        }
        v199 = v101;
        v110 = v196;
        if (v196 >= v197)
        {
          v112 = (char *)v195;
          uint64_t v113 = (v196 - (unsigned char *)v195) >> 2;
          unint64_t v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 62) {
            goto LABEL_295;
          }
          uint64_t v115 = v197 - (unsigned char *)v195;
          if ((v197 - (unsigned char *)v195) >> 1 > v114) {
            unint64_t v114 = v115 >> 1;
          }
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v116 = v114;
          }
          if (v116)
          {
            v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v197, v116);
            v110 = v196;
            v112 = (char *)v195;
          }
          else
          {
            v117 = 0;
          }
          v118 = (unsigned int *)&v117[4 * v113];
          unsigned int *v118 = v98;
          v111 = (char *)(v118 + 1);
          while (v110 != v112)
          {
            unsigned int v119 = *((_DWORD *)v110 - 1);
            v110 -= 4;
            *--v118 = v119;
          }
          v195 = v118;
          v196 = v111;
          v197 = &v117[4 * v116];
          if (v112) {
            operator delete(v112);
          }
        }
        else
        {
          *(_DWORD *)v196 = v98;
          v111 = v110 + 4;
        }
        v196 = v111;
        unsigned int v90 = __dst;
        goto LABEL_184;
      }
      v93 += v98;
      if (v97 > 0) {
        ++v92;
      }
      v91 += v97;
      if (v92 == v94) {
        break;
      }
LABEL_184:
      if (v90 <= ++v96)
      {
        uint64_t v89 = v168;
        goto LABEL_222;
      }
    }
    if (v94 > 1) {
      int v120 = 1;
    }
    else {
      int v120 = v91;
    }
    v121 = v199;
    if (v199 >= v200)
    {
      v123 = (char *)v198;
      uint64_t v124 = (v199 - (unsigned char *)v198) >> 2;
      unint64_t v125 = v124 + 1;
      if ((unint64_t)(v124 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v126 = v200 - (unsigned char *)v198;
      if ((v200 - (unsigned char *)v198) >> 1 > v125) {
        unint64_t v125 = v126 >> 1;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v127 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v127 = v125;
      }
      if (v127)
      {
        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v200, v127);
        v121 = v199;
        v123 = (char *)v198;
      }
      else
      {
        v128 = 0;
      }
      v129 = (int *)&v128[4 * v124];
      int *v129 = v120;
      v122 = (char *)(v129 + 1);
      while (v121 != v123)
      {
        int v130 = *((_DWORD *)v121 - 1);
        v121 -= 4;
        *--v129 = v130;
      }
      v198 = v129;
      v199 = v122;
      v200 = &v128[4 * v127];
      if (v123) {
        operator delete(v123);
      }
    }
    else
    {
      *(_DWORD *)v199 = v120;
      v122 = v121 + 4;
    }
    v199 = v122;
    v131 = v196;
    if (v196 >= v197)
    {
      v133 = (char *)v195;
      uint64_t v134 = (v196 - (unsigned char *)v195) >> 2;
      unint64_t v135 = v134 + 1;
      if ((unint64_t)(v134 + 1) >> 62) {
LABEL_295:
      }
        std::vector<int>::__throw_length_error[abi:ne180100]();
      uint64_t v136 = v197 - (unsigned char *)v195;
      if ((v197 - (unsigned char *)v195) >> 1 > v135) {
        unint64_t v135 = v136 >> 1;
      }
      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v137 = v135;
      }
      if (v137)
      {
        v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v197, v137);
        v131 = v196;
        v133 = (char *)v195;
      }
      else
      {
        v138 = 0;
      }
      v139 = &v138[4 * v134];
      *(_DWORD *)v139 = v93;
      v132 = v139 + 4;
      while (v131 != v133)
      {
        int v140 = *((_DWORD *)v131 - 1);
        v131 -= 4;
        *((_DWORD *)v139 - 1) = v140;
        v139 -= 4;
      }
      v195 = v139;
      v196 = v132;
      v197 = &v138[4 * v137];
      if (v133) {
        operator delete(v133);
      }
    }
    else
    {
      *(_DWORD *)v196 = v93;
      v132 = v131 + 4;
    }
    uint64_t v89 = (v96 + 1);
    v196 = v132;
LABEL_222:
    ++v88;
    uint64_t v87 = __p;
  }
  while (v88 < ((char *)v210 - (unsigned char *)__p) >> 2);
LABEL_223:
  quasar::Token::Token((quasar::Token *)&v184);
  *(_DWORD *)((char *)v183 + 3) = 0;
  v183[0] = 0;
  v169[1] = 0;
  v169[2] = 0;
  uint64_t *v169 = 0;
  if ((int)((unint64_t)(v199 - (unsigned char *)v198) >> 2) < 1)
  {
    v167 = 0;
    char v174 = 0;
  }
  else
  {
    uint64_t v141 = 0;
    int v142 = 0;
    uint64_t v143 = 0;
    char v174 = 0;
    v167 = 0;
    uint64_t v172 = ((unint64_t)(v199 - (unsigned char *)v198) >> 2);
    do
    {
      uint64_t v144 = *((int *)v198 + v141);
      if (v144)
      {
        uint64_t v145 = v144 + (int)v143;
        if ((int)v144 < 1)
        {
          int v146 = 0;
        }
        else
        {
          int v146 = 0;
          uint64_t v147 = (int)v143;
          v148 = (float *)((char *)v215 + 224 * (int)v143 + 40);
          do
          {
            float v149 = *v148;
            v148 += 56;
            int v146 = (int)(float)(v149 + (float)v146);
            ++v147;
          }
          while (v147 < (int)v145);
        }
        int v152 = *((_DWORD *)v215 + 56 * (int)v143 + 7);
        v153 = (char *)v215 + 224 * v145;
        int v154 = *((_DWORD *)v153 - 48);
        int v155 = *((_DWORD *)v153 - 47);
        std::string::basic_string(v219, &__dst_4, v142, *((int *)v195 + v141), (std::allocator<char> *)v180);
        if (v174 < 0) {
          operator delete(v167);
        }
        v183[0] = v219[0].__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v183 + 3) = *(_DWORD *)((char *)&v219[0].__r_.__value_.__r.__words[2] + 3);
        v167 = (void *)v219[0].__r_.__value_.__r.__words[0];
        char v174 = HIBYTE(v219[0].__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v219[0].__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v182, v219[0].__r_.__value_.__l.__data_, v219[0].__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v182.__r_.__value_.__l.__data_ = *(_OWORD *)&v219[0].__r_.__value_.__l.__data_;
          LODWORD(v182.__r_.__value_.__r.__words[2]) = v183[0];
          *(_DWORD *)((char *)&v182.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v183 + 3);
          *((unsigned char *)&v182.__r_.__value_.__s + 23) = *((unsigned char *)&v219[0].__r_.__value_.__s + 23);
        }
        std::string::basic_string[abi:ne180100]<0>(v180, "");
        std::string::basic_string[abi:ne180100]<0>(v178, "");
        memset(v177, 0, sizeof(v177));
        std::string::basic_string[abi:ne180100]<0>(v175, "");
        quasar::Token::Token(v219, (long long *)&v182, v152, v154, v155, 0, 0, (long long *)v180, (float)(v146 / (int)v144), (long long *)v178, v177, 0, (long long *)v175, 0, 0);
        unint64_t v156 = v169[1];
        if (v156 >= v169[2])
        {
          uint64_t v164 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(v169, (long long *)v219);
          int v165 = SBYTE7(v227[0]);
          v169[1] = v164;
          if (v165 < 0) {
            operator delete(v226[0]);
          }
        }
        else
        {
          long long v157 = *(_OWORD *)&v219[0].__r_.__value_.__l.__data_;
          *(void *)(v156 + 16) = *((void *)&v219[0].__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v156 = v157;
          memset(v219, 0, 24);
          uint64_t v158 = *(std::string::size_type *)((char *)&v219[1].__r_.__value_.__r.__words[1] + 6);
          *(_OWORD *)(v156 + 24) = *(_OWORD *)&v219[1].__r_.__value_.__l.__data_;
          *(void *)(v156 + 38) = v158;
          uint64_t v159 = v221[0];
          *(_OWORD *)(v156 + 48) = *(_OWORD *)v220;
          *(void *)(v156 + 64) = v159;
          *(void *)(v156 + 72) = 0;
          v220[1] = 0;
          v221[0] = 0;
          v220[0] = 0;
          *(void *)(v156 + 80) = 0;
          *(void *)(v156 + 88) = 0;
          *(_OWORD *)(v156 + 72) = *(_OWORD *)&v221[1];
          *(void *)(v156 + 88) = v221[3];
          memset(&v221[1], 0, 24);
          long long v160 = *(_OWORD *)v222;
          *(void *)(v156 + 112) = v223[0];
          *(void *)(v156 + 120) = 0;
          *(_OWORD *)(v156 + 96) = v160;
          v222[1] = 0;
          v223[0] = 0;
          v222[0] = 0;
          *(void *)(v156 + 128) = 0;
          *(void *)(v156 + 136) = 0;
          *(_OWORD *)(v156 + 120) = *(_OWORD *)&v223[1];
          *(void *)(v156 + 136) = v223[3];
          memset(&v223[1], 0, 24);
          long long v161 = *(_OWORD *)v224;
          *(void *)(v156 + 160) = v225;
          *(_OWORD *)(v156 + 144) = v161;
          v224[1] = 0;
          *(void *)&long long v225 = 0;
          v224[0] = 0;
          LODWORD(v159) = DWORD2(v225);
          *(_WORD *)(v156 + 172) = WORD6(v225);
          *(_DWORD *)(v156 + 168) = v159;
          long long v162 = *(_OWORD *)v226;
          *(void *)(v156 + 192) = *(void *)&v227[0];
          *(_OWORD *)(v156 + 176) = v162;
          v226[1] = 0;
          *(void *)&v227[0] = 0;
          v226[0] = 0;
          long long v163 = *(_OWORD *)((char *)v227 + 8);
          *(_DWORD *)(v156 + 216) = DWORD2(v227[1]);
          *(_OWORD *)(v156 + 200) = v163;
          v169[1] = v156 + 224;
        }
        if (SBYTE7(v225) < 0) {
          operator delete(v224[0]);
        }
        v218 = (void **)&v223[1];
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v218);
        if (SHIBYTE(v223[0]) < 0) {
          operator delete(v222[0]);
        }
        v218 = (void **)&v221[1];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v218);
        if (SHIBYTE(v221[0]) < 0) {
          operator delete(v220[0]);
        }
        if (SHIBYTE(v219[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v219[0].__r_.__value_.__l.__data_);
        }
        if (v176 < 0) {
          operator delete(v175[0]);
        }
        v175[0] = v177;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v175);
        if (v179 < 0) {
          operator delete(v178[0]);
        }
        if (v181 < 0) {
          operator delete(v180[0]);
        }
        if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v182.__r_.__value_.__l.__data_);
        }
        int v150 = *((_DWORD *)v195 + v141);
      }
      else
      {
        int v150 = *((_DWORD *)v195 + v141);
        uint64_t v151 = v169[1];
        if (v151 != *v169) {
          *(unsigned char *)(v151 - 180) = v202.__begin_[v141] != 0;
        }
        uint64_t v145 = v143;
      }
      v142 += v150;
      ++v141;
      uint64_t v143 = v145;
    }
    while (v141 != v172);
  }
  if (TPItn_DeleteResult())
  {
    long long v230 = 0u;
    long long v229 = 0u;
    long long v228 = 0u;
    *(_OWORD *)v226 = 0u;
    memset(v227, 0, sizeof(v227));
    *(_OWORD *)v224 = 0u;
    long long v225 = 0u;
    memset(v223, 0, sizeof(v223));
    *(_OWORD *)v222 = 0u;
    *(_OWORD *)v220 = 0u;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v219);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"result could not be deleted", 27);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v219);
  }
  if (v174 < 0) {
    operator delete(v167);
  }
  if (v194 < 0) {
    operator delete(v193);
  }
  if (v192 < 0) {
    operator delete(v191);
  }
  v219[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v190;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v219);
  if (v189 < 0) {
    operator delete(v188);
  }
  v219[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v219);
  if (v186 < 0) {
    operator delete(v185);
  }
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v184.__r_.__value_.__l.__data_);
  }
  if (v195)
  {
    v196 = (char *)v195;
    operator delete(v195);
  }
  if (v198)
  {
    v199 = (char *)v198;
    operator delete(v198);
  }
  if (v201.__begin_)
  {
    v201.__end_ = v201.__begin_;
    operator delete(v201.__begin_);
  }
  if (v202.__begin_)
  {
    v202.__end_ = v202.__begin_;
    operator delete(v202.__begin_);
  }
  if (SHIBYTE(__dst_4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst_4.__r_.__value_.__l.__data_);
  }
  if (v205.__begin_)
  {
    v205.__end_ = v205.__begin_;
    operator delete(v205.__begin_);
  }
LABEL_288:
  if (__p)
  {
    v210 = (int *)__p;
    operator delete(__p);
  }
  if (v212)
  {
    v213 = (char *)v212;
    operator delete(v212);
  }
  v219[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v215;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v219);
LABEL_293:
  std::recursive_mutex::unlock(SharedMutex);
}

void sub_1B21B7140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::recursive_mutex *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  STACK[0x320] = a27;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  if (a30 < 0) {
    operator delete(__p);
  }
  quasar::Token::~Token((void **)&a47);
  unint64_t v48 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v48;
    operator delete(v48);
  }
  uint64_t v49 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v49;
    operator delete(v49);
  }
  char v50 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v50;
    operator delete(v50);
  }
  std::string::size_type v51 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v51;
    operator delete(v51);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  uint64_t v52 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v52;
    operator delete(v52);
  }
  uint64_t v53 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v53;
    operator delete(v53);
  }
  long long v54 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v54;
    operator delete(v54);
  }
  STACK[0x320] = (unint64_t)&STACK[0x300];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  std::recursive_mutex::unlock(a21);
  _Unwind_Resume(a1);
}

void SpeechITN::createSdapiITN()
{
}

void sub_1B21B73C4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sdapi::SdapiITNImpl::~SdapiITNImpl(sdapi::SdapiITNImpl *this)
{
  sdapi::SdapiITNImpl::~SdapiITNImpl(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::recursive_mutex *SharedMutex;
  uint64_t vars8;

  *(void *)this = &unk_1F0A517E8;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex(this);
  std::recursive_mutex::lock(SharedMutex);
  if (*((void *)this + 3) != -1)
  {
    TPItn_Close();
    *((void *)this + 3) = -1;
  }
  if (*((void *)this + 2) != -1)
  {
    TPLexicon_Close();
    *((void *)this + 2) = -1;
  }
  if (*((void *)this + 1) != -1)
  {
    SDVoc_Delete();
    *((void *)this + 1) = -1;
  }
  std::recursive_mutex::unlock(SharedMutex);
  quasar::Bitmap::~Bitmap(this);
}

uint64_t *sdapi::SdapiITNImpl::SdapiITNImpl(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = (uint64_t)&unk_1F0A517E8;
  SharedMutex = (std::recursive_mutex *)sdapi::SdapiUtil::getSharedMutex((sdapi::SdapiUtil *)a1);
  std::recursive_mutex::lock(SharedMutex);
  uint64_t GeneralVoc = sdapi::SdapiUtil::loadGeneralVoc(a2, a3);
  if (GeneralVoc == -1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Could not load general voc", 26);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  a1[1] = GeneralVoc;
  uint64_t LexiconHandle = sdapi::SdapiUtil::fetchLexiconHandle(GeneralVoc, a4);
  a1[2] = LexiconHandle;
  a1[3] = sdapi::SdapiUtil::fetchItnHandle(a1[1], LexiconHandle, a5);
  std::recursive_mutex::unlock(SharedMutex);
  return a1;
}

void sub_1B21B75F0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void sub_1B21B7A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)&__p, a19);
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  std::__tree<std::string>::destroy((uint64_t)&a13, a14);

  _Unwind_Resume(a1);
}

void sub_1B21B7B6C(void *a1, int a2)
{
  BOOL v3 = __cxa_begin_catch(a1);
  BOOL v4 = EarArtifactLogger();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    [(_EARArtifact *)v5 getVersion];
  }
  else {
    setInputFormatHelper(v5, v4);
  }
  JUMPOUT(0x1B21B7B4CLL);
}

id EarArtifactLogger(void)
{
  uint64_t v0 = &unk_1E9C2D000;
  {
    uint64_t v0 = (void *)&unk_1E9C2D000;
    if (v3)
    {
      EarArtifactLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar.artifact");
      uint64_t v0 = (void *)&unk_1E9C2D000;
    }
  }
  uint64_t v1 = (void *)v0[506];
  return v1;
}

void sub_1B21B7D38(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,long long buf)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
    if (a14 < 0) {
      operator delete(a9);
    }
    std::pair<std::string,std::string>::~pair((uint64_t)&buf);
    uint64_t v23 = __cxa_begin_catch(a1);
    uint64_t v24 = EarArtifactLogger();
    BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v25)
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v26;
        _os_log_impl(&dword_1B1A86000, v24, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v25)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v24, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21B7CF4);
  }
  _Unwind_Resume(a1);
}

void sub_1B21B7EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B21B7F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B21B80B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    int v21 = __cxa_begin_catch(exception_object);
    int v22 = EarArtifactLogger();
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v23)
      {
        uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1B1A86000, v22, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v23)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v22, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21B8068);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21B8260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B21B8300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1B21B8420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    int v21 = __cxa_begin_catch(exception_object);
    int v22 = EarArtifactLogger();
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v23)
      {
        uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v21 + 16))(v21);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1B1A86000, v22, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v23)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v22, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21B83D8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21B85CC(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarArtifactLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B21B85BCLL);
}

void sub_1B21B86C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    std::string::size_type v14 = __cxa_begin_catch(exception_object);
    int v15 = EarArtifactLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21B868CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21B8824(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarArtifactLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B21B880CLL);
}

void sub_1B21B887C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B21B8930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, int a10, __int16 a11, char a12, char a13)
{
  if (a2)
  {
    std::string::size_type v14 = __cxa_begin_catch(exception_object);
    int v15 = EarArtifactLogger();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(void *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1B1A86000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21B88F8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21B8BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B21B8D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    int v20 = __cxa_begin_catch(exception_object);
    int v21 = EarArtifactLogger();
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v22)
      {
        uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1B1A86000, v21, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v22)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v21, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21B8D10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21B9010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B21B9504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,long long buf,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
  {
    size_t v35 = __cxa_begin_catch(exception_object);
    uint64_t v36 = EarArtifactLogger();
    BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v37)
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v35 + 16))(v35);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v38;
        _os_log_impl(&dword_1B1A86000, v36, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v37)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v36, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B21B93DCLL);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<quasar::AppLmData>::operator=[abi:ne180100]<quasar::AppLmData,std::default_delete<quasar::AppLmData>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::AppLmData>::shared_ptr[abi:ne180100]<quasar::AppLmData,std::default_delete<quasar::AppLmData>,void>((uint64_t *)&v6, a2);
  int v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1B21B98DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21B9BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    BOOL v16 = __cxa_begin_catch(exception_object);
    uint64_t v17 = EarArtifactLogger();
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v18)
      {
        uint64_t v19 = (*(uint64_t (**)(void *))(*(void *)v16 + 16))(v16);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v19;
        _os_log_impl(&dword_1B1A86000, v17, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v18)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v17, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B21B9B40);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21B9E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100]((void ***)&a9, 0);
    long long v11 = __cxa_begin_catch(exception_object);
    BOOL v12 = EarArtifactLogger();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v13)
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 16))(v11);
        LODWORD(a9) = 136315138;
        *(void *)((char *)&a9 + 4) = v14;
        _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&a9, 0xCu);
      }
    }
    else if (v13)
    {
      LOWORD(a9) = 0;
      _os_log_impl(&dword_1B1A86000, v12, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&a9, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B21B9E3CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21BA2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, long long buf,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    uint64_t v26 = buf;
    *(void *)&buf = 0;
    if (v26) {
      -[_EARAppLmArtifact loadLmHandle]();
    }
    if (a19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a19);
    }
    size_t v27 = __cxa_begin_catch(exception_object);
    uint64_t v28 = EarArtifactLogger();
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v29)
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v30;
        _os_log_impl(&dword_1B1A86000, v28, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v29)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v28, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B21BA270);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<kaldi::quasar::LmHandle>::operator=[abi:ne180100]<kaldi::quasar::LmHandle,std::default_delete<kaldi::quasar::LmHandle>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<kaldi::quasar::LmHandle>::shared_ptr[abi:ne180100]<kaldi::quasar::LmHandle,std::default_delete<kaldi::quasar::LmHandle>,void>((uint64_t *)&v6, a2);
  int v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1B21BA6EC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,long long buf)
{
  if (a2)
  {
    std::pair<std::string,std::string>::~pair((uint64_t)&buf);
    if (a18 < 0) {
      operator delete(__p);
    }
    if (a24 < 0) {
      operator delete(a19);
    }
    uint64_t v28 = __cxa_begin_catch(a1);
    BOOL v29 = EarArtifactLogger();
    BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v30)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    if (!v25) {
      JUMPOUT(0x1B21BA6ACLL);
    }
    JUMPOUT(0x1B21BA6A4);
  }
  _Unwind_Resume(a1);
}

void sub_1B21BAA3C(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  int v3 = EarArtifactLogger();
  char v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2) {
    -[_EARPhoneticMatchBuilder buildGFsts](v4);
  }
  else {
    [(_EARPhoneticMatchBuilder *)v4 buildGFsts];
  }

  __cxa_end_catch();
  JUMPOUT(0x1B21BAA14);
}

void sub_1B21BAA90(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21BACB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,long long buf,int a36,__int16 a37,char a38,char a39)
{
  if (a2)
  {
    if (a34) {
      (*(void (**)(uint64_t))(*(void *)a34 + 8))(a34);
    }
    size_t v41 = __cxa_begin_catch(exception_object);
    uint64_t v42 = EarArtifactLogger();
    BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v43)
      {
        uint64_t v44 = (*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v44;
        _os_log_impl(&dword_1B1A86000, v42, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v43)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v42, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21BAC64);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21BB1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a2)
  {
    uint64_t v56 = *(void *)(v53 - 152);
    *(void *)(v53 - 152) = 0;
    if (v56) {
      (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
    }
    uint64_t v57 = __cxa_begin_catch(exception_object);
    unint64_t v58 = EarArtifactLogger();
    BOOL v59 = os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v59)
      {
        uint64_t v60 = (*(uint64_t (**)(void *))(*(void *)v57 + 16))(v57);
        *(_DWORD *)(v53 - 144) = 136315138;
        *(void *)(v53 - 140) = v60;
        _os_log_impl(&dword_1B1A86000, v58, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)(v53 - 144), 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v59)
      {
        *(_WORD *)(v53 - 144) = 0;
        _os_log_impl(&dword_1B1A86000, v58, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)(v53 - 144), 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21BB158);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21BB954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,long long buf,int a30,__int16 a31,char a32,char a33)
{
  if (a2)
  {
    if (a20 < 0) {
      operator delete(__p);
    }
    if (a33 < 0) {
      operator delete((void *)buf);
    }
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
    uint64_t v36 = __cxa_begin_catch(exception_object);
    BOOL v37 = EarArtifactLogger();
    BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v38)
      {
        uint64_t v39 = (*(uint64_t (**)(void *))(*(void *)v36 + 16))(v36);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v39;
        _os_log_impl(&dword_1B1A86000, v37, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v38)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B1A86000, v37, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1B21BB8F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21BBD2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B21BBE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B21BC074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, long long buf,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    uint64_t v25 = __cxa_begin_catch(exception_object);
    uint64_t v26 = EarArtifactLogger();
    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v27)
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1B1A86000, v26, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v27)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1B1A86000, v26, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B21BC008);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21BC8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__10(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  char v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void ___ZN10EARHelpers15DictionaryToMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6vectorIS7_NS5_IS7_EEEEZ63___EARArtifact_initWithAcceptedContent_acceptedInfo_dependent__E3__2Z63___EARArtifact_initWithAcceptedContent_acceptedInfo_dependent__E3__3EENS1_3mapIT_T0_NS1_4lessISE_EENS5_INS1_4pairIKSE_SF_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  v38[16] = *(void ***)MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v27 = a3;
  id v5 = v4;
  uint64_t v6 = v5;
  uint64_t v26 = v5;
  if (v5)
  {
    objc_msgSend(v5, "ear_toString");
  }
  else
  {
    v29[0] = 0;
    v29[1] = 0;
    uint64_t v30 = 0;
  }

  id v7 = v27;
  memset(&v28, 0, sizeof(v28));
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v8 = v7;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v33 objects:v38 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v9; ++i)
      {
        if (*(void *)v34 != v10) {
          objc_enumerationMutation(v8);
        }
        id v12 = *(id *)(*((void *)&v33 + 1) + 8 * i);
        BOOL v13 = v12;
        if (v12)
        {
          objc_msgSend(v12, "ear_toString");
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          std::string::size_type v32 = 0;
        }

        std::vector<std::string>::pointer end = v28.__end_;
        if (v28.__end_ >= v28.__end_cap_.__value_)
        {
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3);
          unint64_t v17 = v16 + 1;
          if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3) > v17) {
            unint64_t v17 = 0x5555555555555556 * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_cap_.__value_ - (char *)v28.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v18 = v17;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v28.__end_cap_;
          if (v18) {
            uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v28.__end_cap_, v18);
          }
          else {
            uint64_t v19 = 0;
          }
          int v20 = v19 + v16;
          __v.__first_ = v19;
          __v.__begin_ = v20;
          __v.__end_cap_.__value_ = &v19[v18];
          long long v21 = *(_OWORD *)__p;
          v20->__r_.__value_.__r.__words[2] = v32;
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          __p[1] = 0;
          std::string::size_type v32 = 0;
          __p[0] = 0;
          __v.__end_ = v20 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v28, &__v);
          BOOL v22 = v28.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v28.__end_ = v22;
          if (SHIBYTE(v32) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v15 = *(_OWORD *)__p;
          v28.__end_->__r_.__value_.__r.__words[2] = v32;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
          v28.__end_ = end + 1;
        }
      }
      uint64_t v9 = [v8 countByEnumeratingWithState:&v33 objects:v38 count:16];
    }
    while (v9);
  }

  uint64_t v23 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  *(void *)&long long v33 = v29;
  uint64_t v24 = (std::vector<std::wstring> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (const void **)v29, (uint64_t)&std::piecewise_construct, (long long **)&v33)+ 7);
  if (v24 != (std::vector<std::wstring> *)&v28) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v24, v28.__begin_, (long long *)v28.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3));
  }
  v38[0] = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v38);
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
}

void sub_1B21BCDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, void *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__pa,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__split_buffer<std::wstring> *a28,uint64_t a29)
{
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::artifact::Artifact,std::allocator<quasar::artifact::Artifact>,std::set<std::string> &,std::set<std::string> &,std::map<std::string,std::vector<std::string>> &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x120uLL);
  float result = std::__shared_ptr_emplace<quasar::artifact::Artifact>::__shared_ptr_emplace[abi:ne180100]<std::set<std::string> &,std::set<std::string> &,std::map<std::string,std::vector<std::string>> &,std::allocator<quasar::artifact::Artifact>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B21BCED4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::artifact::Artifact>::__shared_ptr_emplace[abi:ne180100]<std::set<std::string> &,std::set<std::string> &,std::map<std::string,std::vector<std::string>> &,std::allocator<quasar::artifact::Artifact>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62550;
  quasar::artifact::Artifact::Artifact(a1 + 3);
  return a1;
}

void sub_1B21BCF30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::Artifact>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::Artifact>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::Artifact>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::artifact::AppLmArtifact,std::allocator<quasar::artifact::AppLmArtifact>,std::string,quasar::Locale,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x120uLL);
  float result = std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__shared_ptr_emplace[abi:ne180100]<std::string,quasar::Locale,std::allocator<quasar::artifact::AppLmArtifact>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B21BD030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__shared_ptr_emplace[abi:ne180100]<std::string,quasar::Locale,std::allocator<quasar::artifact::AppLmArtifact>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62470;
  quasar::artifact::AppLmArtifact::AppLmArtifact(a1 + 3);
  return a1;
}

void sub_1B21BD08C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<quasar::artifact::AppLmArtifact,std::allocator<quasar::artifact::AppLmArtifact>,std::string,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x120uLL);
  float result = std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::artifact::AppLmArtifact>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B21BD184(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::artifact::AppLmArtifact>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::artifact::AppLmArtifact>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62470;
  quasar::artifact::AppLmArtifact::AppLmArtifact(a1 + 3);
  return a1;
}

void sub_1B21BD1E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<quasar::AppLmData>::shared_ptr[abi:ne180100]<quasar::AppLmData,std::default_delete<quasar::AppLmData>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *float result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::AppLmData  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::AppLmData  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::AppLmData  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<quasar::CustomPronData  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::CustomPronData  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<quasar::CustomPronData>::operator()[abi:ne180100](a1 + 24, *(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<quasar::CustomPronData  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<quasar::artifact::AppLmArtifact  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::artifact::AppLmArtifact  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::artifact::AppLmArtifact  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::shared_ptr<kaldi::quasar::LmHandle>::shared_ptr[abi:ne180100]<kaldi::quasar::LmHandle,std::default_delete<kaldi::quasar::LmHandle>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<kaldi::quasar::LmHandle  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::LmHandle  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::LmHandle  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t quasar::Align::getDestToks(quasar::Align *this)
{
  return (uint64_t)this + 32;
}

uint64_t quasar::Align::splitTime(uint64_t result, int a2, int a3, int a4, uint64_t *a5)
{
  int v5 = a2 - result;
  if (a2 - (int)result >= 0)
  {
    uint64_t v6 = *a5;
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((a5[1] - *a5) >> 5);
    if (v7 <= (int)result) {
      goto LABEL_11;
    }
    *(_DWORD *)(v6 + 224 * (int)result + 28) = a3;
    if (a2 > (int)result)
    {
      int v8 = v5 + 1;
      uint64_t v9 = (_DWORD *)(v6 + 224 * (int)result + 252);
      unint64_t v10 = (int)result + 1;
      int v11 = a4 - a3;
      while (1)
      {
        int v12 = v11 / v8 + a3;
        *(v9 - 55) = v12;
        if (v7 <= v10) {
          break;
        }
        *uint64_t v9 = v12;
        v9 += 56;
        v11 += a4 - a3;
        ++v10;
        if (!--v5) {
          goto LABEL_7;
        }
      }
LABEL_11:
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_7:
    if (v7 <= a2) {
      goto LABEL_11;
    }
    *(_DWORD *)(v6 + 224 * a2 + 32) = a4;
    unint64_t v13 = a2 - 1;
    if (v7 <= v13) {
      goto LABEL_11;
    }
    *(_DWORD *)(v6 + 224 * a2 + 28) = *(_DWORD *)(v6 + 224 * v13 + 32);
  }
  return result;
}

BOOL quasar::Align::monotonicStartAndEnd(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = v1 - *a1;
  if (v1 != *a1)
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
    unint64_t v6 = v3 / 224;
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    int v8 = (unsigned int *)(v2 + 32);
    while (1)
    {
      if (v4)
      {
        unint64_t v9 = (v4 - 1);
        if (v6 <= v9) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        unsigned int v10 = *(_DWORD *)(v2 + 224 * v9 + 32);
        unsigned int v11 = *(v8 - 1);
        if (v10 > v11) {
          return v5;
        }
      }
      else
      {
        unsigned int v11 = *(_DWORD *)(v2 + 28);
      }
      if (v11 <= *v8)
      {
        BOOL v5 = v6 <= ++v4;
        v8 += 56;
        if (v7 != v4) {
          continue;
        }
      }
      return v5;
    }
  }
  return 1;
}

BOOL quasar::Align::applyAlignment(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v137, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v137 = *(std::string *)a1;
  }
  std::string::size_type size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
  uint64_t v7 = &v137;
  if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = v137.__r_.__value_.__l.__size_;
    uint64_t v7 = (std::string *)v137.__r_.__value_.__r.__words[0];
  }
  for (; size; --size)
  {
    if (v7->__r_.__value_.__s.__data_[0] == 83) {
      v7->__r_.__value_.__s.__data_[0] = 67;
    }
    uint64_t v7 = (std::string *)((char *)v7 + 1);
  }
  if (quasar::Align::monotonicStartAndEnd(a2))
  {
    std::string::size_type v8 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    int v9 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = v137.__r_.__value_.__l.__size_;
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = v137.__r_.__value_.__l.__size_;
    }
    if (v8)
    {
      std::string::size_type v11 = 0;
      int v12 = 0;
      int v13 = 0;
      int v14 = 0;
      while (1)
      {
        std::string::reference v15 = std::string::at(&v137, v11++);
        std::string::size_type v16 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v16 = v137.__r_.__value_.__l.__size_;
        }
        int v17 = *v15;
        switch(v17)
        {
          case 'I':
            ++v13;
            if (v11 != v16 && *std::string::at(&v137, v11) == 68)
            {
              if (quasar::gLogLevel >= 2)
              {
                long long v135 = 0u;
                long long v136 = 0u;
                long long v134 = 0u;
                long long v132 = 0u;
                memset(v133, 0, sizeof(v133));
                long long v130 = 0u;
                long long v131 = 0u;
                memset(v129, 0, sizeof(v129));
                long long v128 = 0u;
                memset(v127, 0, sizeof(v127));
                *(_OWORD *)uint64_t v126 = 0u;
                long long v124 = 0u;
                memset(v125, 0, sizeof(v125));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Adjacent 'ID'", 13);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
              }
              goto LABEL_236;
            }
            break;
          case 'D':
            ++v12;
            if (v11 != v16 && *std::string::at(&v137, v11) == 73)
            {
              if (quasar::gLogLevel >= 2)
              {
                long long v135 = 0u;
                long long v136 = 0u;
                long long v134 = 0u;
                long long v132 = 0u;
                memset(v133, 0, sizeof(v133));
                long long v130 = 0u;
                long long v131 = 0u;
                memset(v129, 0, sizeof(v129));
                long long v128 = 0u;
                memset(v127, 0, sizeof(v127));
                *(_OWORD *)uint64_t v126 = 0u;
                long long v124 = 0u;
                memset(v125, 0, sizeof(v125));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Adjacent 'DI'", 13);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
              }
              goto LABEL_236;
            }
            break;
          case 'C':
            ++v14;
            break;
          default:
            if (quasar::gLogLevel >= 2)
            {
              long long v135 = 0u;
              long long v136 = 0u;
              long long v134 = 0u;
              long long v132 = 0u;
              memset(v133, 0, sizeof(v133));
              long long v130 = 0u;
              long long v131 = 0u;
              memset(v129, 0, sizeof(v129));
              long long v128 = 0u;
              memset(v127, 0, sizeof(v127));
              *(_OWORD *)uint64_t v126 = 0u;
              long long v124 = 0u;
              memset(v125, 0, sizeof(v125));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Unexpected character", 20);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
            }
            goto LABEL_236;
        }
        std::string::size_type v18 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        int v9 = SHIBYTE(v137.__r_.__value_.__r.__words[2]);
        std::string::size_type v10 = v137.__r_.__value_.__l.__size_;
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v18 = v137.__r_.__value_.__l.__size_;
        }
        if (v18 <= v11) {
          goto LABEL_33;
        }
      }
    }
    int v14 = 0;
    int v13 = 0;
    int v12 = 0;
LABEL_33:
    if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) != v12 + v14
      || 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) != v13 + v14)
    {
      if (quasar::gLogLevel >= 2)
      {
        long long v135 = 0u;
        long long v136 = 0u;
        long long v134 = 0u;
        long long v132 = 0u;
        memset(v133, 0, sizeof(v133));
        long long v130 = 0u;
        long long v131 = 0u;
        memset(v129, 0, sizeof(v129));
        long long v128 = 0u;
        memset(v127, 0, sizeof(v127));
        *(_OWORD *)uint64_t v126 = 0u;
        long long v124 = 0u;
        memset(v125, 0, sizeof(v125));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Invalid alignment string", 24);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
      }
      goto LABEL_236;
    }
    if (!v14)
    {
      if (quasar::gLogLevel >= 2)
      {
        long long v135 = 0u;
        long long v136 = 0u;
        long long v134 = 0u;
        long long v132 = 0u;
        memset(v133, 0, sizeof(v133));
        long long v130 = 0u;
        long long v131 = 0u;
        memset(v129, 0, sizeof(v129));
        long long v128 = 0u;
        memset(v127, 0, sizeof(v127));
        *(_OWORD *)uint64_t v126 = 0u;
        long long v124 = 0u;
        memset(v125, 0, sizeof(v125));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"String is all I's, all D's, or empty", 36);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
      }
      goto LABEL_236;
    }
    uint64_t v121 = 0;
    v122 = 0;
    unint64_t v123 = 0;
    std::string __p = 0;
    unsigned int v119 = 0;
    int v120 = 0;
    uint64_t v115 = 0;
    unint64_t v116 = 0;
    if (v9 >= 0) {
      unint64_t v19 = v9;
    }
    else {
      unint64_t v19 = v10;
    }
    v117 = 0;
    std::vector<quasar::Token>::reserve(&v121, v19);
    std::string::size_type v20 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v20 = v137.__r_.__value_.__l.__size_;
    }
    if (v20)
    {
      std::string::size_type v21 = 0;
      int v22 = 0;
      do
      {
        if (*std::string::at(&v137, v21) == 67 || *std::string::at(&v137, v21) == 68)
        {
          uint64_t v23 = *a2;
          if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) <= (unint64_t)v22) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v24 = (const quasar::Token *)(v23 + 224 * v22);
          uint64_t v25 = v122;
          if ((unint64_t)v122 >= v123)
          {
            uint64_t v26 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v121, v24);
          }
          else
          {
            quasar::Token::Token(v122, v24);
            uint64_t v26 = (std::string *)((char *)v25 + 224);
          }
          v122 = v26;
          if (a4 == 2 && *std::string::at((const std::string *)a1, v21) != 67)
          {
            MEMORY[0x1B3EA7B20](&v122[-8].__r_.__value_.__r.__words[2], "");
            MEMORY[0x1B3EA7B20](&v122[-6].__r_.__value_.__r.__words[2], "");
          }
          int v27 = *(_DWORD *)(v23 + 224 * v22 + 28);
          std::vector<std::string> v28 = v119;
          if (v119 >= v120)
          {
            uint64_t v30 = (char *)__p;
            uint64_t v31 = (v119 - (unsigned char *)__p) >> 2;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v33 = v120 - (unsigned char *)__p;
            if ((v120 - (unsigned char *)__p) >> 1 > v32) {
              unint64_t v32 = v33 >> 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v120, v34);
              uint64_t v30 = (char *)__p;
              std::vector<std::string> v28 = v119;
            }
            else
            {
              long long v35 = 0;
            }
            uint64_t v44 = &v35[4 * v31];
            *(_DWORD *)uint64_t v44 = v27;
            BOOL v29 = v44 + 4;
            while (v28 != v30)
            {
              int v45 = *((_DWORD *)v28 - 1);
              v28 -= 4;
              *((_DWORD *)v44 - 1) = v45;
              v44 -= 4;
            }
            std::string __p = v44;
            unsigned int v119 = v29;
            int v120 = &v35[4 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v119 = v27;
            BOOL v29 = v28 + 4;
          }
          unsigned int v119 = v29;
          int v46 = *(_DWORD *)(v23 + 224 * v22 + 32);
          uint64_t v47 = v116;
          if (v116 >= v117)
          {
            uint64_t v49 = v115;
            uint64_t v50 = (v116 - v115) >> 2;
            unint64_t v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v52 = v117 - v115;
            if ((v117 - v115) >> 1 > v51) {
              unint64_t v51 = v52 >> 1;
            }
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v53 = v51;
            }
            if (v53)
            {
              long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v53);
              uint64_t v49 = v115;
              uint64_t v47 = v116;
            }
            else
            {
              long long v54 = 0;
            }
            uint64_t v55 = &v54[4 * v50];
            *(_DWORD *)uint64_t v55 = v46;
            unint64_t v48 = v55 + 4;
            while (v47 != v49)
            {
              int v56 = *((_DWORD *)v47 - 1);
              v47 -= 4;
              *((_DWORD *)v55 - 1) = v56;
              v55 -= 4;
            }
            uint64_t v115 = v55;
            v117 = &v54[4 * v53];
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v116 = v46;
            unint64_t v48 = v116 + 4;
          }
          unint64_t v116 = v48;
          ++v22;
        }
        else
        {
          quasar::Token::Token((quasar::Token *)&v124);
          long long v36 = v122;
          if ((unint64_t)v122 >= v123)
          {
            v122 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(&v121, &v124);
            if (SHIBYTE(v133[0]) < 0) {
              operator delete((void *)v132);
            }
          }
          else
          {
            long long v37 = v124;
            v122->__r_.__value_.__r.__words[2] = *(void *)&v125[0];
            *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
            *(void *)&v125[0] = 0;
            long long v124 = 0uLL;
            std::string::size_type v38 = *(void *)((char *)&v125[1] + 6);
            *(_OWORD *)&v36[1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v125 + 8);
            *(std::string::size_type *)((char *)&v36[1].__r_.__value_.__r.__words[1] + 6) = v38;
            std::string::size_type v39 = v127[0];
            *(_OWORD *)&v36[2].__r_.__value_.__l.__data_ = *(_OWORD *)v126;
            v36[2].__r_.__value_.__r.__words[2] = v39;
            v36[3].__r_.__value_.__r.__words[0] = 0;
            v126[1] = 0;
            v127[0] = 0;
            v126[0] = 0;
            v36[3].__r_.__value_.__l.__size_ = 0;
            v36[3].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v36[3].__r_.__value_.__l.__data_ = *(_OWORD *)&v127[1];
            v36[3].__r_.__value_.__r.__words[2] = v127[3];
            memset(&v127[1], 0, 24);
            long long v40 = v128;
            v36[4].__r_.__value_.__r.__words[2] = v129[0];
            v36[5].__r_.__value_.__r.__words[0] = 0;
            *(_OWORD *)&v36[4].__r_.__value_.__l.__data_ = v40;
            v129[0] = 0;
            long long v128 = 0uLL;
            v36[5].__r_.__value_.__l.__size_ = 0;
            v36[5].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v36[5].__r_.__value_.__l.__data_ = *(_OWORD *)&v129[1];
            v36[5].__r_.__value_.__r.__words[2] = v129[3];
            memset(&v129[1], 0, 24);
            long long v41 = v130;
            v36[6].__r_.__value_.__r.__words[2] = v131;
            *(_OWORD *)&v36[6].__r_.__value_.__l.__data_ = v41;
            *(void *)&long long v131 = 0;
            long long v130 = 0uLL;
            LODWORD(v39) = DWORD2(v131);
            WORD2(v36[7].__r_.__value_.__r.__words[0]) = WORD6(v131);
            LODWORD(v36[7].__r_.__value_.__l.__data_) = v39;
            long long v42 = v132;
            v36[8].__r_.__value_.__r.__words[0] = v133[0];
            *(_OWORD *)&v36[7].__r_.__value_.__r.__words[1] = v42;
            v133[0] = 0;
            long long v132 = 0uLL;
            long long v43 = *(_OWORD *)&v133[1];
            LODWORD(v36[9].__r_.__value_.__l.__data_) = v133[3];
            *(_OWORD *)&v36[8].__r_.__value_.__r.__words[1] = v43;
            v122 = (std::string *)((char *)v36 + 224);
          }
          if (SBYTE7(v131) < 0) {
            operator delete((void *)v130);
          }
          v138[0] = (void **)&v129[1];
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v138);
          if (SHIBYTE(v129[0]) < 0) {
            operator delete((void *)v128);
          }
          v138[0] = (void **)&v127[1];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v138);
          if (SHIBYTE(v127[0]) < 0) {
            operator delete(v126[0]);
          }
          if (SBYTE7(v125[0]) < 0) {
            operator delete((void *)v124);
          }
          uint64_t v57 = v119;
          if (v119 >= v120)
          {
            BOOL v59 = (char *)__p;
            uint64_t v60 = (v119 - (unsigned char *)__p) >> 2;
            unint64_t v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v62 = v120 - (unsigned char *)__p;
            if ((v120 - (unsigned char *)__p) >> 1 > v61) {
              unint64_t v61 = v62 >> 1;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v61;
            }
            if (v63)
            {
              unint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v120, v63);
              BOOL v59 = (char *)__p;
              uint64_t v57 = v119;
            }
            else
            {
              unint64_t v64 = 0;
            }
            uint64_t v65 = &v64[4 * v60];
            *(_DWORD *)uint64_t v65 = -1;
            unint64_t v58 = v65 + 4;
            while (v57 != v59)
            {
              int v66 = *((_DWORD *)v57 - 1);
              v57 -= 4;
              *((_DWORD *)v65 - 1) = v66;
              v65 -= 4;
            }
            std::string __p = v65;
            unsigned int v119 = v58;
            int v120 = &v64[4 * v63];
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v119 = -1;
            unint64_t v58 = v57 + 4;
          }
          unsigned int v119 = v58;
          unint64_t v67 = v116;
          if (v116 >= v117)
          {
            uint64_t v69 = v115;
            uint64_t v70 = (v116 - v115) >> 2;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v72 = v117 - v115;
            if ((v117 - v115) >> 1 > v71) {
              unint64_t v71 = v72 >> 1;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v73);
              uint64_t v69 = v115;
              unint64_t v67 = v116;
            }
            else
            {
              uint64_t v74 = 0;
            }
            uint64_t v75 = &v74[4 * v70];
            *(_DWORD *)uint64_t v75 = -1;
            size_t v68 = v75 + 4;
            while (v67 != v69)
            {
              int v76 = *((_DWORD *)v67 - 1);
              v67 -= 4;
              *((_DWORD *)v75 - 1) = v76;
              v75 -= 4;
            }
            uint64_t v115 = v75;
            v117 = &v74[4 * v73];
            if (v69) {
              operator delete(v69);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v116 = -1;
            size_t v68 = v116 + 4;
          }
          unint64_t v116 = v68;
        }
        ++v21;
        std::string::size_type v77 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
        if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v77 = v137.__r_.__value_.__l.__size_;
        }
      }
      while (v77 > v21);
      if (v77)
      {
        std::string::size_type v78 = 0;
        int v79 = 1;
        LODWORD(v80) = -1;
        while (1)
        {
          std::string::size_type v81 = v78;
          int v82 = *std::string::at(&v137, v78++);
          std::string::size_type v83 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          char v84 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          std::string::size_type v85 = v137.__r_.__value_.__l.__size_;
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v86 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v86 = v137.__r_.__value_.__l.__size_;
          }
          if (v86 <= v78)
          {
            int v87 = 0;
          }
          else
          {
            int v87 = *std::string::at(&v137, v81 + 1);
            std::string::size_type v83 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
            std::string::size_type v85 = v137.__r_.__value_.__l.__size_;
            char v84 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          }
          std::string::size_type v88 = v81 + 2;
          if (v84 < 0) {
            std::string::size_type v83 = v85;
          }
          if (v83 <= v88) {
            int v89 = 0;
          }
          else {
            int v89 = *std::string::at(&v137, v88);
          }
          if ((v82 == 68 || v82 == 73) && v80 == -1) {
            LODWORD(v80) = v81;
          }
          if (v82 == 73)
          {
            if (!v87 || v87 == 67 && v89 != 73) {
              goto LABEL_162;
            }
          }
          else if (v82 == 68 && (v87 == 67 || !v87))
          {
LABEL_162:
            if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v92 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v92 = v137.__r_.__value_.__l.__size_;
            }
            unint64_t v93 = (v80 - 1);
            if ((int)v80 < 1) {
              int v94 = -1;
            }
            else {
              int v94 = v80 - 1;
            }
            if (v82 == 73)
            {
              if ((int)v80 >= 1) {
                uint64_t v80 = v93;
              }
              else {
                uint64_t v80 = v80;
              }
              if (v92 > v78) {
                LODWORD(v81) = v81 + 1;
              }
              if ((int)v80 <= (int)v81)
              {
                std::string::size_type v98 = (int)v80;
                uint64_t v99 = 224 * (int)v80;
                int v100 = v79 + (v92 > v78) - v80;
                int v96 = -1;
                int v95 = -1;
                do
                {
                  if (*std::string::at(&v137, v98) == 67)
                  {
                    if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5) <= v98) {
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    }
                    int v96 = *(_DWORD *)(v121 + v99 + 32);
                    if (v95 == -1) {
                      int v95 = *(_DWORD *)(v121 + v99 + 28);
                    }
                  }
                  ++v98;
                  v99 += 224;
                  --v100;
                }
                while (v100);
              }
              else
              {
                int v95 = -1;
                int v96 = -1;
              }
              quasar::Align::splitTime(v80, v81, v95, v96, &v121);
            }
            else
            {
              if ((int)v80 < 1) {
                goto LABEL_189;
              }
              if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5) <= (unint64_t)v93) {
                goto LABEL_254;
              }
              if (v93 >= (v119 - (unsigned char *)__p) >> 2) {
LABEL_257:
              }
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              if (*(_DWORD *)(v121 + 224 * v93 + 28) == *((_DWORD *)__p + v93))
              {
                if (v93 >= (v116 - v115) >> 2) {
                  goto LABEL_257;
                }
                BOOL v97 = *(_DWORD *)(v121 + 224 * v93 + 32) != *(_DWORD *)&v115[4 * v93];
              }
              else
              {
LABEL_189:
                BOOL v97 = 1;
              }
              if (v97 && v92 > v78)
              {
                unint64_t v101 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5);
                if (v101 <= (int)v80 || v101 <= v78) {
                  goto LABEL_254;
                }
                *(_DWORD *)(v121 + 224 * v78 + 28) = *(_DWORD *)(v121 + 224 * (int)v80 + 28);
              }
              else
              {
                unint64_t v102 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5);
                if (v102 <= v81 || v102 <= v94) {
LABEL_254:
                }
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                *(_DWORD *)(v121 + 224 * v94 + 32) = *(_DWORD *)(v121 + 224 * v81 + 32);
              }
            }
            LODWORD(v80) = -1;
          }
          std::string::size_type v103 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v103 = v137.__r_.__value_.__l.__size_;
          }
          ++v79;
          if (v103 <= v78)
          {
            if (v103)
            {
              uint64_t v104 = 0;
              std::string::size_type v105 = 0;
              int v106 = 0;
              do
              {
                if (*std::string::at(&v137, v105) == 67 || *std::string::at(&v137, v105) == 73)
                {
                  uint64_t v107 = *a3;
                  if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) <= (unint64_t)v106) {
                    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                  }
                  quasar::Token::Token((std::string *)&v124, (const quasar::Token *)(v107 + 224 * v106));
                  if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v122 - v121) >> 5) <= v105) {
                    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                  }
                  quasar::Token::operator=(v107 + 224 * v106, v121 + v104);
                  *(_DWORD *)(v107 + 224 * v106 + 40) = DWORD2(v125[1]);
                  if (!a4)
                  {
                    std::string::operator=((std::string *)(v107 + 224 * v106 + 48), (const std::string *)v126);
                    std::string::operator=((std::string *)(v107 + 224 * v106 + 96), (const std::string *)&v128);
                  }
                  if (SHIBYTE(v133[0]) < 0) {
                    operator delete((void *)v132);
                  }
                  if (SBYTE7(v131) < 0) {
                    operator delete((void *)v130);
                  }
                  v138[0] = (void **)&v129[1];
                  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v138);
                  if (SHIBYTE(v129[0]) < 0) {
                    operator delete((void *)v128);
                  }
                  v138[0] = (void **)&v127[1];
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v138);
                  if (SHIBYTE(v127[0]) < 0) {
                    operator delete(v126[0]);
                  }
                  if (SBYTE7(v125[0]) < 0) {
                    operator delete((void *)v124);
                  }
                  ++v106;
                }
                ++v105;
                std::string::size_type v108 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
                if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v108 = v137.__r_.__value_.__l.__size_;
                }
                v104 += 224;
              }
              while (v108 > v105);
            }
            break;
          }
        }
      }
    }
    BOOL v109 = quasar::Align::monotonicStartAndEnd(a3);
    BOOL v110 = v109;
    char v111 = quasar::gLogLevel < 2 || v109;
    if ((v111 & 1) == 0)
    {
      long long v135 = 0u;
      long long v136 = 0u;
      long long v134 = 0u;
      long long v132 = 0u;
      memset(v133, 0, sizeof(v133));
      long long v130 = 0u;
      long long v131 = 0u;
      memset(v129, 0, sizeof(v129));
      long long v128 = 0u;
      memset(v127, 0, sizeof(v127));
      *(_OWORD *)uint64_t v126 = 0u;
      long long v124 = 0u;
      memset(v125, 0, sizeof(v125));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Output not monotonic", 20);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
    }
    if (v115) {
      operator delete(v115);
    }
    if (__p)
    {
      unsigned int v119 = (char *)__p;
      operator delete(__p);
    }
    *(void *)&long long v124 = &v121;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      long long v135 = 0u;
      long long v136 = 0u;
      long long v134 = 0u;
      long long v132 = 0u;
      memset(v133, 0, sizeof(v133));
      long long v130 = 0u;
      long long v131 = 0u;
      memset(v129, 0, sizeof(v129));
      long long v128 = 0u;
      memset(v127, 0, sizeof(v127));
      *(_OWORD *)uint64_t v126 = 0u;
      long long v124 = 0u;
      memset(v125, 0, sizeof(v125));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v124);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v124, (uint64_t)"Input not monotonic", 19);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v124);
    }
LABEL_236:
    BOOL v110 = 0;
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  return v110;
}

void sub_1B21BE750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a31);
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t *quasar::Align::MakeMonotonic(uint64_t *result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  uint64_t v5 = v4 - *result;
  if (v4 != *result)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v5 / 224;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    std::string::size_type v8 = (unsigned int *)(v3 + 36);
    do
    {
      unsigned int v10 = *(v8 - 2);
      unsigned int v9 = *(v8 - 1);
      if (v10 == v9) {
        *a2 = 1;
      }
      if (v6)
      {
        unsigned int v11 = *(_DWORD *)(v3 + 224 * (v6 - 1) + 32);
        if (v11 > v10)
        {
          *(v8 - 2) = v11;
          *a3 = 1;
          unsigned int v10 = v11;
        }
      }
      unsigned int v12 = *v8;
      if (v10 > *v8)
      {
        *std::string::size_type v8 = v10;
        *a3 = 1;
        unsigned int v12 = v10;
      }
      if (v12 > v9)
      {
        *(v8 - 1) = v12;
        *a3 = 1;
      }
      ++v6;
      v8 += 56;
    }
    while (v7 != v6);
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;

  uint64_t v3 = (uint64_t *)*result;
  uint64_t v4 = (uint64_t *)result[1];
  if ((uint64_t *)*result != v4)
  {
    do
    {
      uint64_t result = quasar::Align::MakeMonotonic(v3, a2, a3);
      v3 += 3;
    }
    while (v3 != v4);
  }
  return result;
}

void quasar::Align::RestoreSilence(void *a1, void *a2)
{
  v22[0] = 0;
  v22[1] = 0;
  std::string::size_type v21 = (uint64_t *)v22;
  uint64_t v4 = (_DWORD *)*a1;
  uint64_t v5 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v5)
  {
    do
    {
      if (v4[7] != v4[8])
      {
        int v6 = v4[9];
        uint64_t v23 = v4 + 8;
        *((_DWORD *)std::__tree<std::__value_type<unsigned int,float>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,float>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,float>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v21, v4 + 8, (uint64_t)&std::piecewise_construct, &v23)+ 8) = v6;
      }
      v4 += 56;
    }
    while (v4 != v5);
  }
  std::string::size_type v8 = (_DWORD *)*a2;
  unint64_t v7 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v7)
  {
    unsigned int v9 = v22[0];
    do
    {
      unsigned int v10 = v8[8];
      v8[9] = v10;
      if (v9)
      {
        unsigned int v11 = v22;
        unsigned int v12 = v9;
        do
        {
          int v13 = v12;
          int v14 = v11;
          unsigned int v15 = *((_DWORD *)v12 + 7);
          if (v15 >= v10) {
            unsigned int v11 = (void **)v12;
          }
          else {
            ++v12;
          }
          unsigned int v12 = (void *)*v12;
        }
        while (v12);
        if (v11 != v22)
        {
          if (v15 < v10) {
            int v13 = v14;
          }
          if (v10 >= *((_DWORD *)v13 + 7))
          {
            unsigned int v16 = *((_DWORD *)v11 + 8);
            if (v8[7] < v16 && v16 <= v10) {
              v8[9] = v16;
            }
          }
        }
      }
      v8 += 56;
    }
    while (v8 != v7);
    uint64_t v18 = a1[1];
    if (*a1 != v18)
    {
      unsigned int v19 = *(_DWORD *)(v18 - 188);
      if (*(v7 - 49) < v19 && v19 < *(v7 - 48)) {
        *(v7 - 47) = v19;
      }
    }
  }
  std::__tree<int>::destroy((uint64_t)&v21, v22[0]);
}

void sub_1B21BEB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void quasar::SyncRecogAudioBuffer::SyncRecogAudioBuffer(quasar::SyncRecogAudioBuffer *this, unsigned int a2, int a3, int a4)
{
  *(void *)this = &unk_1F0A55488;
  int v4 = a3 * a2;
  if (a3 < 0) {
    int v4 = -1;
  }
  int v5 = a4 * a2;
  if (a4 < 0) {
    int v5 = -1;
  }
  *((_DWORD *)this + 2) = v4;
  *((_DWORD *)this + 3) = v5;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 4) = (float)((float)a2 * 5.0);
  operator new();
}

void sub_1B21BECB0(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    v1[6] = (uint64_t)v4;
    operator delete(v4);
  }
  std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100](v1 + 4, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void quasar::SyncRecogAudioBuffer::~SyncRecogAudioBuffer(quasar::SyncRecogAudioBuffer *this)
{
  *(void *)this = &unk_1F0A55488;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100]((uint64_t *)this + 4, 0);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::SyncRecogAudioBuffer::~SyncRecogAudioBuffer(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::SyncRecogAudioBuffer::addAudioHelper(quasar::SyncRecogAudioBuffer *this, float *a2, int a3, char a4)
{
  if (*((unsigned char *)this + 66))
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v49, "Coding error. addAudio() called after endAudio()");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v49);
  }
  if (*((unsigned char *)this + 64)) {
    return 0;
  }
  unsigned int v8 = *((_DWORD *)this + 2);
  if ((v8 & 0x80000000) == 0 && *((_DWORD *)this + 6) >= v8)
  {
    *((unsigned char *)this + 64) = 1;
    if (quasar::gLogLevel >= 2)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Maximum buffer length ", 22);
      uint64_t v47 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" has been reached. All additional audio will be dropped.", 56);
LABEL_75:
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v49);
    }
    return 0;
  }
  unint64_t v9 = *((unsigned int *)this + 3);
  if ((v9 & 0x80000000) == 0 && *(void *)(*((void *)this + 4) + 32) >= v9)
  {
    *((unsigned char *)this + 64) = 1;
    if (quasar::gLogLevel >= 2)
    {
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v49 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Maximum ring size ", 18);
      unint64_t v48 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" has been reached. All additional audio will be dropped.", 56);
      goto LABEL_75;
    }
    return 0;
  }
  int v10 = a3;
  if ((v8 & 0x80000000) == 0)
  {
    int v11 = v8 - *((_DWORD *)this + 6);
    if (v11 >= a3) {
      int v10 = a3;
    }
    else {
      int v10 = v11;
    }
  }
  if ((v9 & 0x80000000) == 0)
  {
    int v12 = v9 - *(_DWORD *)(*((void *)this + 4) + 32);
    if (v12 < v10) {
      int v10 = v12;
    }
  }
  if (v10 < a3 && quasar::gLogLevel >= 5)
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Clipped audio length ", 21);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v49);
  }
  uint64_t v14 = *((void *)this + 4);
  uint64_t v15 = *(void *)(v14 + 8) - *(void *)v14;
  unint64_t v16 = *(void *)(v14 + 32) + v10;
  if (v16 > v15 >> 2)
  {
    unint64_t v17 = v15 >> 1;
    if (v17 <= v16) {
      unint64_t v17 = *(void *)(v14 + 32) + v10;
    }
    unint64_t v18 = *((unsigned int *)this + 3);
    if (v17 >= v18) {
      unint64_t v19 = *((unsigned int *)this + 3);
    }
    else {
      unint64_t v19 = v17;
    }
    if ((v18 & 0x80000000) == 0) {
      unint64_t v20 = v19;
    }
    else {
      unint64_t v20 = v17;
    }
    boost::circular_buffer<float,std::allocator<float>>::set_capacity((char **)v14, v20);
  }
  if (*((unsigned char *)this + 65))
  {
    std::string::size_type v21 = (float *)*((void *)this + 6);
    int v22 = (void **)((char *)this + 40);
    uint64_t v23 = (uint64_t)v21 - *((void *)this + 5);
    unint64_t v24 = *((unsigned int *)this + 4);
    if (v24 > v23 >> 2)
    {
      int v25 = v24 - ((unint64_t)v23 >> 2);
      uint64_t v26 = v10 >= v25 ? v25 : v10;
      if (v26)
      {
        uint64_t v27 = 0;
        std::vector<std::string> v28 = (void *)((char *)this + 56);
        do
        {
          float v29 = a2[v27];
          if ((a4 & 1) == 0)
          {
            float v30 = 1.0;
            if (v29 <= 1.0)
            {
              float v30 = a2[v27];
              if (v29 < -1.0) {
                float v30 = -1.0;
              }
            }
            float v29 = v30 * 32767.0;
          }
          if ((unint64_t)v21 >= *v28)
          {
            unint64_t v32 = (float *)*v22;
            uint64_t v33 = ((char *)v21 - (unsigned char *)*v22) >> 2;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v35 = *v28 - (void)v32;
            if (v35 >> 1 > v34) {
              unint64_t v34 = v35 >> 1;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              long long v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 56, v36);
              unint64_t v32 = (float *)*((void *)this + 5);
              std::string::size_type v21 = (float *)*((void *)this + 6);
            }
            else
            {
              long long v37 = 0;
            }
            std::string::size_type v38 = (float *)&v37[4 * v33];
            *std::string::size_type v38 = v29;
            uint64_t v31 = v38 + 1;
            while (v21 != v32)
            {
              int v39 = *((_DWORD *)v21-- - 1);
              *((_DWORD *)v38-- - 1) = v39;
            }
            *((void *)this + 5) = v38;
            *((void *)this + 6) = v31;
            *((void *)this + 7) = &v37[4 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            float *v21 = v29;
            uint64_t v31 = v21 + 1;
          }
          *((void *)this + 6) = v31;
          ++v27;
          std::string::size_type v21 = v31;
        }
        while (v27 != v26);
      }
    }
  }
  if (v10 >= 1)
  {
    uint64_t v40 = v10;
    do
    {
      float v41 = *a2;
      if ((a4 & 1) == 0)
      {
        if (v41 < -1.0) {
          float v42 = -1.0;
        }
        else {
          float v42 = *a2;
        }
        if (v41 <= 1.0) {
          float v43 = v42;
        }
        else {
          float v43 = 1.0;
        }
        float v41 = v43 * 32767.0;
      }
      uint64_t v44 = (void *)*((void *)this + 4);
      *(float *)&long long v49 = v41;
      boost::circular_buffer<float,std::allocator<float>>::push_back_impl<float const&>(v44, &v49);
      ++a2;
      --v40;
    }
    while (v40);
  }
  if (quasar::gLogLevel > 4)
  {
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v49, (uint64_t)"Added ", 6);
    int v45 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" samples: ", 10);
    int v46 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"-", 1);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v49);
  }
  *((_DWORD *)this + 6) += v10;
  return 1;
}

void sub_1B21BF2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::SyncRecogAudioBuffer::addAudio(quasar::SyncRecogAudioBuffer *this, const __int16 *a2, uint64_t a3)
{
  int v3 = a3;
  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize((void **)v10, a3, 0);
  int v6 = v10[0];
  if (v3)
  {
    uint64_t v7 = 0;
    do
    {
      v6[(int)v7] = (float)a2[v7];
      ++v7;
    }
    while (v3 != v7);
  }
  uint64_t v8 = quasar::SyncRecogAudioBuffer::addAudioHelper(this, v6, v3, 1);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
  return v8;
}

void sub_1B21BF3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncRecogAudioBuffer::addScaledAudio(quasar::SyncRecogAudioBuffer *this, float *a2, int a3)
{
  return quasar::SyncRecogAudioBuffer::addAudioHelper(this, a2, a3, 1);
}

uint64_t quasar::SyncRecogAudioBuffer::addUnscaledAudio(quasar::SyncRecogAudioBuffer *this, float *a2, int a3)
{
  return quasar::SyncRecogAudioBuffer::addAudioHelper(this, a2, a3, 0);
}

uint64_t quasar::SyncRecogAudioBuffer::Read(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 8))(a1, a2, 0);
}

BOOL quasar::SyncRecogAudioBuffer::Read(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 66))
  {
    if (*(_DWORD *)(a1 + 20) >= *(_DWORD *)(a1 + 24))
    {
      kaldi::Vector<float>::Resize((void **)a2, 0, 0);
      return 0;
    }
    else
    {
      unsigned int v5 = *(_DWORD *)(*(void *)(a1 + 32) + 32);
      unsigned int v6 = *(_DWORD *)(a2 + 8);
      if ((int)v6 >= (int)v5) {
        uint64_t v7 = v5;
      }
      else {
        uint64_t v7 = v6;
      }
      kaldi::Vector<float>::Resize((void **)a2, v7, 0);
      return quasar::SyncRecogAudioBuffer::exportAudio(a1, (void *)a2, v7);
    }
  }
  else
  {
    int v10 = *(_DWORD *)(a2 + 8);
    if (v10 >= a3) {
      unsigned int v11 = a3;
    }
    else {
      unsigned int v11 = *(_DWORD *)(a2 + 8);
    }
    if (a3 <= 0) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t v13 = *(void *)(*(void *)(a1 + 32) + 32);
    if (v13 >= v12)
    {
      if (v13 < v10)
      {
        kaldi::Vector<float>::Resize((void **)a2, v13, 0);
        int v10 = *(_DWORD *)(a2 + 8);
      }
      quasar::SyncRecogAudioBuffer::exportAudio(a1, (void *)a2, v10);
    }
    else
    {
      kaldi::Vector<float>::Resize((void **)a2, 0, 0);
    }
    return 1;
  }
}

BOOL quasar::SyncRecogAudioBuffer::exportAudio(uint64_t a1, void *a2, int a3)
{
  if (a3 >= 1)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      unsigned int v6 = *(void **)(a1 + 32);
      uint64_t v7 = v6[1];
      uint64_t v8 = v6[2];
      if (v7 - v8 <= 0) {
        uint64_t v9 = -((v7 - *v6) >> 2);
      }
      else {
        uint64_t v9 = 0;
      }
      *(_DWORD *)(*a2 + 4 * i) = *(_DWORD *)(v8 + 4 * v9);
      uint64_t v10 = v8 + 4;
      v6[2] = v10;
      if (v10 == v7) {
        v6[2] = *v6;
      }
      --v6[4];
    }
  }
  if (quasar::gLogLevel > 4)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Copied ", 7);
    unsigned int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" samples (", 10);
    unint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"-", 1);
    unint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") into data", 11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v15);
  }
  *(_DWORD *)(a1 + 20) += a3;
  return *(void *)(*(void *)(a1 + 32) + 32) != 0;
}

void sub_1B21BF69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::SyncRecogAudioBuffer::endAudio(uint64_t this)
{
  *(unsigned char *)(this + 66) = 1;
  return this;
}

uint64_t kaldi::OnlineAudioSourceItf::HasReadAllFrames(kaldi::OnlineAudioSourceItf *this)
{
  return 0;
}

void kaldi::nnet1::GatedRecurrentUnit::InitData(int32x2_t *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  *(float *)&int v57 = -2.0;
  v58[0] = -1;
  float v55 = 0.1;
  float v56 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v54);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[19].u32[1], &v53);
  memset(v52, 0, sizeof(v52));
  while (2)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_118;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v52);
    if ((SHIBYTE(v52[2]) & 0x80000000) == 0)
    {
      switch(HIBYTE(v52[2]))
      {
        case 9:
          BOOL v6 = v52[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v52[1]) == 62;
          uint64_t v7 = (float *)&a1[76] + 1;
          if (v6) {
            goto LABEL_99;
          }
          BOOL v8 = v52[0] == (void *)0x6461724778614D3CLL && LOBYTE(v52[1]) == 62;
          goto LABEL_20;
        case 0xA:
          if (v52[0] != (void *)0x61654D736169423CLL || LOWORD(v52[1]) != 15982) {
            goto LABEL_132;
          }
          goto LABEL_98;
        case 0xB:
          if (v52[0] != (void *)0x6E6152736169423CLL || *(void **)((char *)v52 + 3) != (void *)0x3E65676E61527361) {
            goto LABEL_132;
          }
          goto LABEL_77;
        case 0xC:
          if (v52[0] == (void *)0x536D6F646E61523CLL && LODWORD(v52[1]) == 1046766949) {
            goto LABEL_92;
          }
          std::vector<std::string> v28 = v52;
          goto LABEL_113;
        case 0xD:
          if (v52[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v52 + 5) != (void *)0x3E7665646474536DLL) {
            goto LABEL_132;
          }
          goto LABEL_66;
        case 0xF:
          BOOL v11 = v52[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v52 + 7) == (void *)0x3E66656F43657461;
          goto LABEL_70;
        case 0x12:
          if (v52[0] != (void *)0x6E6569646172473CLL
            || v52[1] != (void *)0x7079546D726F4E74
            || LOWORD(v52[2]) != 15973)
          {
            goto LABEL_132;
          }
          goto LABEL_108;
        case 0x13:
          if (v52[0] != (void *)0x61725474696E493CLL
            || v52[1] != (void *)0x79546D726F66736ELL
            || *(void **)((char *)&v52[1] + 3) != (void *)0x3E657079546D726FLL)
          {
            goto LABEL_132;
          }
          goto LABEL_86;
        default:
          goto LABEL_132;
      }
    }
    switch((unint64_t)v52[1])
    {
      case 9uLL:
        BOOL v9 = *(void *)v52[0] == 0x6D726F4E78614D3CLL && *((unsigned char *)v52[0] + 8) == 62;
        uint64_t v7 = (float *)&a1[76] + 1;
        if (!v9)
        {
          BOOL v8 = *(void *)v52[0] == 0x6461724778614D3CLL && *((unsigned char *)v52[0] + 8) == 62;
LABEL_20:
          uint64_t v7 = (float *)&a1[19];
          if (!v8) {
            goto LABEL_132;
          }
        }
        goto LABEL_99;
      case 0xAuLL:
        if (*(void *)v52[0] != 0x61654D736169423CLL || *((_WORD *)v52[0] + 4) != 15982) {
          goto LABEL_132;
        }
LABEL_98:
        uint64_t v7 = (float *)&v57;
        goto LABEL_99;
      case 0xBuLL:
        if (*(void *)v52[0] != 0x6E6152736169423CLL || *(void *)((char *)v52[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_132;
        }
LABEL_77:
        uint64_t v7 = &v56;
        goto LABEL_99;
      case 0xCuLL:
        if (*(void *)v52[0] != 0x536D6F646E61523CLL || *((_DWORD *)v52[0] + 2) != 1046766949) {
          goto LABEL_112;
        }
LABEL_92:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v58);
        goto LABEL_110;
      case 0xDuLL:
        if (*(void *)v52[0] != 0x74536D617261503CLL || *(void *)((char *)v52[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_132;
        }
LABEL_66:
        uint64_t v7 = &v55;
LABEL_99:
        kaldi::ReadBasicType<float>(a2, 0, v7);
        goto LABEL_110;
      case 0xFuLL:
        BOOL v11 = *(void *)v52[0] == 0x61526E7261654C3CLL && *(void *)((char *)v52[0] + 7) == 0x3E66656F43657461;
LABEL_70:
        uint64_t v7 = (float *)&a1[76];
        if (!v11) {
          goto LABEL_132;
        }
        goto LABEL_99;
      case 0x12uLL:
        if (*(void *)v52[0] != 0x6E6569646172473CLL
          || *((void *)v52[0] + 1) != 0x7079546D726F4E74
          || *((_WORD *)v52[0] + 8) != 15973)
        {
          goto LABEL_132;
        }
LABEL_108:
        uint64_t v23 = &v53;
        goto LABEL_109;
      case 0x13uLL:
        if (*(void *)v52[0] == 0x61725474696E493CLL
          && *((void *)v52[0] + 1) == 0x79546D726F66736ELL
          && *(void *)((char *)v52[0] + 11) == 0x3E657079546D726FLL)
        {
LABEL_86:
          uint64_t v23 = &v54;
LABEL_109:
          kaldi::ReadToken(a2, 0, (uint64_t)v23);
LABEL_110:
          std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
          continue;
        }
        if (v52[1] != (void *)12) {
          goto LABEL_132;
        }
LABEL_112:
        std::vector<std::string> v28 = (void **)v52[0];
LABEL_113:
        float v29 = *v28;
        int v30 = *((_DWORD *)v28 + 2);
        if (v29 != (void *)0x6E6F706D6F432F3CLL || v30 != 1047817829)
        {
LABEL_132:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
          int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Invalid token ", 14);
          if (SHIBYTE(v52[2]) >= 0) {
            uint64_t v40 = v52;
          }
          else {
            uint64_t v40 = (void **)v52[0];
          }
          if (SHIBYTE(v52[2]) >= 0) {
            uint64_t v41 = HIBYTE(v52[2]);
          }
          else {
            uint64_t v41 = (uint64_t)v52[1];
          }
          float v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
          float v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)". Allowed tokens: ", 18);
          uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(BiasMean|BiasRange|ParamStddev|LearnRateCoef|MaxNorm|MaxGrad|InitTransformType", 79);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"|GradientNormType|RandomSeed)", 29);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v48);
        }
LABEL_118:
        kaldi::nnet1::GatedRecurrentUnit::AllocateParams(a1);
        int inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v54);
        a1[19].i32[1] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v53);
        if (v58[0] >= 1) {
          kaldi::UniformRandomNumber::SetRandomSeeds(a3, v58[0]);
        }
        kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v48, a3);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v48, inited, (uint64_t)&a1[20], v55);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v48, inited, (uint64_t)&a1[26], v55);
        kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v48, inited, (uint64_t)&a1[32], v55);
        uint64_t v33 = a1[40].u32[0];
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        int v45 = 0;
        kaldi::Vector<float>::Resize((void **)&v45, v33, 0);
        uint64_t v34 = v46;
        if ((int)v46 >= 1)
        {
          uint64_t v35 = 0;
          do
          {
            float v36 = *(float *)&v57;
            float v37 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
            float v38 = v36 + (v37 + -0.5) * v56;
            uint64_t v34 = (int)v46;
            v45[v35++] = v38;
          }
          while (v35 < v34);
        }
        kaldi::CuVector<float>::Resize((uint64_t)&a1[38], v34, 1);
        kaldi::CuVectorBase<float>::CopyFromVec<float>(&a1[38], (uint64_t)&v45);
        (*(void (**)(int32x2_t *))(*(void *)a1 + 128))(a1);
        kaldi::Vector<float>::Destroy((uint64_t)&v45);
        if (__p)
        {
          long long v51 = __p;
          operator delete(__p);
        }
        int v45 = (float *)&v49;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        if (SHIBYTE(v52[2]) < 0) {
          operator delete(v52[0]);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        return;
      default:
        goto LABEL_132;
    }
  }
}

void sub_1B21BFEC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 169) < 0) {
    operator delete(*(void **)(v1 - 192));
  }
  if (*(char *)(v1 - 145) < 0) {
    operator delete(*(void **)(v1 - 168));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateParams(int32x2_t *this)
{
  kaldi::CuMatrix<float>::Resize(this + 20, (3 * *(__int32 *)((char *)&this[1].i32[1] + *(void *)(*(void *)this - 24))), *(unsigned int *)((char *)this[1].u32 + *(void *)(*(void *)this - 24)), 0, 0);
  uint64_t v2 = *(unsigned int *)((char *)&this[1].u32[1] + *(void *)(*(void *)this - 24));
  kaldi::CuMatrix<float>::Resize(this + 26, (2 * v2), v2, 0, 0);
  uint64_t v3 = *(unsigned int *)((char *)&this[1].u32[1] + *(void *)(*(void *)this - 24));
  kaldi::CuMatrix<float>::Resize(this + 32, v3, v3, 0, 0);
  kaldi::CuVector<float>::Resize((uint64_t)&this[38], (3 * *(__int32 *)((char *)&this[1].i32[1] + *(void *)(*(void *)this - 24))), 0);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, int32x2_t *))(*(void *)this + 232))(__p, this);
    if ((v8 & 0x80u) == 0) {
      unsigned int v5 = __p;
    }
    else {
      unsigned int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_1B21C00E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v15, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  uint64_t v10 = 0;
LABEL_2:
  if (v10 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v15))
  {
    for (uint64_t i = 0; ; ++i)
    {
      if (i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v15))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0);
          float v12 = v13 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v12 = (kaldi::UniformRandomNumber::RandUniform(a1, 0) + -0.5) * (float)(a5 + a5);
        }
      }
      else if (v10 == i)
      {
        float v12 = 1.0;
      }
      else
      {
        float v12 = 0.0;
      }
      *(float *)(*(void *)v15 + 4 * (int)v10 * v16 + 4 * i) = v12;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, v15, 111);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v15);
}

void sub_1B21C0254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InitData(void *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ReadData(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (kaldi::Peek(a2, a3) == 60)
  {
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v29);
    if (SHIBYTE(v30) < 0)
    {
      uint64_t v10 = *((void *)&v29 + 1);
      if (*((void *)&v29 + 1) == 9)
      {
        BOOL v13 = *(void *)v29 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v29 + 8) == 62;
        float v12 = a1 + 153;
        if (!v13)
        {
          uint64_t v10 = *((void *)&v29 + 1);
LABEL_27:
          if (v10 == 18)
          {
            if (*(void *)v29 == 0x6E6569646172473CLL
              && *(void *)(v29 + 8) == 0x7079546D726F4E74
              && *(_WORD *)(v29 + 16) == 15973)
            {
              goto LABEL_59;
            }
            uint64_t v10 = *((void *)&v29 + 1);
          }
          if (v10 != 9) {
            goto LABEL_62;
          }
          int v16 = (long long *)v29;
LABEL_49:
          uint64_t v19 = *(void *)v16;
          int v20 = *((unsigned __int8 *)v16 + 8);
          BOOL v21 = v19 == 0x6461724778614D3CLL && v20 == 62;
          float v12 = a1 + 38;
          if (!v21) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        if (*((void *)&v29 + 1) != 15) {
          goto LABEL_27;
        }
        BOOL v11 = *(void *)v29 == 0x61526E7261654C3CLL && *(void *)(v29 + 7) == 0x3E66656F43657461;
        float v12 = a1 + 152;
        if (!v11) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      if (HIBYTE(v30) != 9)
      {
        if (HIBYTE(v30) == 15)
        {
          BOOL v17 = (void)v29 == 0x61526E7261654C3CLL && *(void *)((char *)&v29 + 7) == 0x3E66656F43657461;
          float v12 = a1 + 152;
          if (!v17)
          {
LABEL_62:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v30 >= 0) {
              int v25 = &v29;
            }
            else {
              int v25 = (long long *)v29;
            }
            if (v30 >= 0) {
              uint64_t v26 = HIBYTE(v30);
            }
            else {
              uint64_t v26 = *((void *)&v29 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
          goto LABEL_54;
        }
        if (HIBYTE(v30) != 18) {
          goto LABEL_62;
        }
        if ((void)v29 == 0x6E6569646172473CLL
          && *((void *)&v29 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v30 == 15973)
        {
LABEL_59:
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v28 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p);
          *((_DWORD *)a1 + 39) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v28) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_55;
        }
LABEL_47:
        if (HIBYTE(v30) != 9) {
          goto LABEL_62;
        }
        int v16 = &v29;
        goto LABEL_49;
      }
      BOOL v18 = (void)v29 == 0x6D726F4E78614D3CLL && BYTE8(v29) == 62;
      float v12 = a1 + 153;
      if (!v18) {
        goto LABEL_47;
      }
    }
LABEL_54:
    kaldi::ReadBasicType<float>(a2, a3, v12);
LABEL_55:
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 40), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 52), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 64), a2, a3, a4);
  double v22 = kaldi::CuVector<float>::Read((uint64_t)(a1 + 76), a2, a3);
  return (*(uint64_t (**)(float *, double))(*(void *)a1 + 128))(a1, v22);
}

void sub_1B21C063C()
{
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::ReadData(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::ReadData((float *)((char *)a1 + *(void *)(*a1 - 176)), a2, a3, a4);
}

void *kaldi::nnet1::GatedRecurrentUnit::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  return kaldi::WriteBasicType<float>((uint64_t)a2, a3);
}

void sub_1B21C075C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteConfig(void *a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::GatedRecurrentUnit::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3);
}

void kaldi::nnet1::GatedRecurrentUnit::WriteData(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  uint64_t v8 = a1 + 160;
  (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)a1 + 168))(a1, a2, a3);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write(a1 + 208, a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write(a1 + 256, a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1 + 304, a2, a3);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return (*((_DWORD *)this + 44) * *((_DWORD *)this + 45)
                      + *((_DWORD *)this + 56) * *((_DWORD *)this + 57)
                      + *((_DWORD *)this + 68) * *((_DWORD *)this + 69)
                      + *((_DWORD *)this + 80));
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t v1 = (_DWORD *)((char *)this + *(void *)(*(void *)this - 192));
  return (v1[44] * v1[45] + v1[56] * v1[57] + v1[68] * v1[69] + v1[80]);
}

const void **kaldi::nnet1::GatedRecurrentUnit::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = *(_DWORD *)(a1 + 176) * *(_DWORD *)(a1 + 180);
  int v6 = *(_DWORD *)(a1 + 224) * *(_DWORD *)(a1 + 228);
  int v7 = *(_DWORD *)(a1 + 272) * *(_DWORD *)(a1 + 276);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2;
  LODWORD(v11) = v5;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, a1 + 160);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2 + 4 * v5;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, a1 + 208);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2 + 4 * v6 + 4 * v5;
  LODWORD(v11) = v7;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, a1 + 256);
  int v8 = *(_DWORD *)(a1 + 320);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = (char *)*a2 + 4 * v7 + 4 * v6 + 4 * v5;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 304), (uint64_t)&v10);
}

const void **virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetParams(void *a1, void **a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetParams((uint64_t)a1 + *(void *)(*a1 - 200), a2);
}

void *kaldi::nnet1::GatedRecurrentUnit::SetParams(_DWORD *a1, char **a2)
{
  (*(void (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  int v4 = a1[44] * a1[45];
  int v5 = a1[56] * a1[57];
  int v6 = a1[68] * a1[69];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v9 = *a2;
  LODWORD(v10) = v4;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v9);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v9 = &(*a2)[4 * v4];
  LODWORD(v10) = v5;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 52), &v9);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v9 = &(*a2)[4 * v5 + 4 * v4];
  LODWORD(v10) = v6;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 64), &v9);
  int v7 = a1[80];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  BOOL v9 = &(*a2)[4 * v6 + 4 * v5 + 4 * v4];
  LODWORD(v10) = v7;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 76, (uint64_t)&v9);
}

void *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetParams(void *a1, char **a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::SetParams((void *)((char *)a1 + *(void *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  float v2 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160);
  float v3 = v2 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 208);
  float v4 = v3 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 256);
  double v5 = kaldi::CuVectorBase<float>::Sum((uint64_t)this + 304);
  return v4 + *(float *)&v5;
}

float virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::SumParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                        + *(void *)(*(void *)this - 224)));
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  int v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    BOOL v9 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, void, void))(*v9 + 296))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 0);
  int v11 = a1[44] * a1[45];
  int v13 = a1[56];
  int v12 = a1[57];
  int v14 = a1[69];
  int v15 = a1[68];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = *a4;
  LODWORD(v24) = v11;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v20, v9[81], 111);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v23, (uint64_t)&v20);
  int v16 = v15 * v14;
  int v17 = v13 * v12;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v20);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = (uint64_t)*a4 + 4 * v11;
  LODWORD(v21) = v17;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v20, v9[84]);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = (uint64_t)*a4 + 4 * v17 + 4 * v11;
  LODWORD(v21) = v16;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v20, v9[87]);
  int v18 = a1[80];
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = (uint64_t)*a4 + 4 * v16 + 4 * v17 + 4 * v11;
  LODWORD(v21) = v18;
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v9[90], (uint64_t)&v20);
  return (*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

void sub_1B21C0E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetGradient((void *)((char *)a1 + *(void *)(*a1 - 240)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  kaldi::CuMatrix<float>::CuMatrix(v7, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v7, 111, a2, 1.0);
  kaldi::CuMatrix<float>::Resize(v7, *((unsigned int *)this + 57), *((unsigned int *)this + 56), 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)v7, 111, a2, 1.0);
  kaldi::CuMatrix<float>::Resize(v7, *((unsigned int *)this + 69), *((unsigned int *)this + 68), 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)v7, 111, a2, 1.0);
  uint64_t v4 = *((unsigned int *)this + 80);
  v6[0] = &unk_1F0A517C0;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)v6, a2, 1.0);
  kaldi::CuVector<float>::~CuVector(v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1B21C0F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::PerturbParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(void *)(*(void *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, void *, void))(*(void *)this + 168))(this, v26, 0);
  float v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n Input weights:", 16);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v25 & 0x80u) == 0) {
    float v3 = v24;
  }
  else {
    float v3 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v4 = v25;
  }
  else {
    uint64_t v4 = (uint64_t)v24[1];
  }
  double v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n Gate recurrent weights:", 25);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 208);
  if ((v23 & 0x80u) == 0) {
    int v7 = v22;
  }
  else {
    int v7 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (uint64_t)v22[1];
  }
  BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n Activation recurrent weights:", 31);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 256);
  if ((v21 & 0x80u) == 0) {
    int v11 = v20;
  }
  else {
    int v11 = (void **)v20[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v12 = v21;
  }
  else {
    uint64_t v12 = (uint64_t)v20[1];
  }
  int v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n Bias:", 7);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 304);
  if ((v19 & 0x80u) == 0) {
    int v15 = __p;
  }
  else {
    int v15 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v16 = v19;
  }
  else {
    uint64_t v16 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v21 < 0) {
    operator delete(v20[0]);
  }
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  std::stringbuf::str();
  v26[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v26 + *(void *)(v26[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v26[1] = MEMORY[0x1E4FBA470] + 16;
  if (v27 < 0) {
    operator delete((void *)v26[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v28);
}

void sub_1B21C1268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::Info((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                   + *(void *)(*(void *)this - 80)));
}

void kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 640))
  {
    memset(&v84, 0, sizeof(v84));
    int v83 = 0;
    if (*((int *)this + 20) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n For batch ");
        kaldi::quasar::to_string<int>();
        if ((v70 & 0x80u) == 0) {
          float v3 = v69;
        }
        else {
          float v3 = (void **)v69[0];
        }
        if ((v70 & 0x80u) == 0) {
          std::string::size_type v4 = v70;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v69[1];
        }
        double v5 = std::string::append(&v71, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v67, ": ");
        if ((v68 & 0x80u) == 0) {
          int v7 = v67;
        }
        else {
          int v7 = (void **)v67[0];
        }
        if ((v68 & 0x80u) == 0) {
          std::string::size_type v8 = v68;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v67[1];
        }
        BOOL v9 = std::string::append(&v72, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v73.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v65, "\n  Input weights gradient: ");
        if ((v66 & 0x80u) == 0) {
          int v11 = v65;
        }
        else {
          int v11 = (void **)v65[0];
        }
        if ((v66 & 0x80u) == 0) {
          std::string::size_type v12 = v66;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v65[1];
        }
        int v13 = std::string::append(&v73, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v74.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 81) + 48 * v83);
        if ((v64 & 0x80u) == 0) {
          int v15 = v63;
        }
        else {
          int v15 = (void **)v63[0];
        }
        if ((v64 & 0x80u) == 0) {
          std::string::size_type v16 = v64;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v63[1];
        }
        int v17 = std::string::append(&v74, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v61, "\n  Gate recurrent weights gradient: ");
        if ((v62 & 0x80u) == 0) {
          unsigned __int8 v19 = v61;
        }
        else {
          unsigned __int8 v19 = (void **)v61[0];
        }
        if ((v62 & 0x80u) == 0) {
          std::string::size_type v20 = v62;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v61[1];
        }
        unsigned __int8 v21 = std::string::append(&v75, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 84) + 48 * v83);
        if ((v60 & 0x80u) == 0) {
          unsigned __int8 v23 = v59;
        }
        else {
          unsigned __int8 v23 = (void **)v59[0];
        }
        if ((v60 & 0x80u) == 0) {
          std::string::size_type v24 = v60;
        }
        else {
          std::string::size_type v24 = (std::string::size_type)v59[1];
        }
        unsigned __int8 v25 = std::string::append(&v76, (const std::string::value_type *)v23, v24);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v57, "\n  Activation recurrent weights gradient: ");
        if ((v58 & 0x80u) == 0) {
          char v27 = v57;
        }
        else {
          char v27 = (void **)v57[0];
        }
        if ((v58 & 0x80u) == 0) {
          std::string::size_type v28 = v58;
        }
        else {
          std::string::size_type v28 = (std::string::size_type)v57[1];
        }
        long long v29 = std::string::append(&v77, (const std::string::value_type *)v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v78.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 87) + 48 * v83);
        if ((v56 & 0x80u) == 0) {
          uint64_t v31 = v55;
        }
        else {
          uint64_t v31 = (void **)v55[0];
        }
        if ((v56 & 0x80u) == 0) {
          std::string::size_type v32 = v56;
        }
        else {
          std::string::size_type v32 = (std::string::size_type)v55[1];
        }
        uint64_t v33 = std::string::append(&v78, (const std::string::value_type *)v31, v32);
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v53, "\n  Bias gradient: ");
        if ((v54 & 0x80u) == 0) {
          uint64_t v35 = v53;
        }
        else {
          uint64_t v35 = (void **)v53[0];
        }
        if ((v54 & 0x80u) == 0) {
          std::string::size_type v36 = v54;
        }
        else {
          std::string::size_type v36 = (std::string::size_type)v53[1];
        }
        float v37 = std::string::append(&v79, (const std::string::value_type *)v35, v36);
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((void *)this + 90) + 32 * v83);
        if ((v52 & 0x80u) == 0) {
          int v39 = __p;
        }
        else {
          int v39 = (void **)__p[0];
        }
        if ((v52 & 0x80u) == 0) {
          std::string::size_type v40 = v52;
        }
        else {
          std::string::size_type v40 = (std::string::size_type)__p[1];
        }
        uint64_t v41 = std::string::append(&v80, (const std::string::value_type *)v39, v40);
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        int64_t v82 = v41->__r_.__value_.__r.__words[2];
        long long v81 = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        if (v82 >= 0) {
          float v43 = (const std::string::value_type *)&v81;
        }
        else {
          float v43 = (const std::string::value_type *)v81;
        }
        if (v82 >= 0) {
          std::string::size_type v44 = HIBYTE(v82);
        }
        else {
          std::string::size_type v44 = *((void *)&v81 + 1);
        }
        std::string::append(&v84, v43, v44);
        if (SHIBYTE(v82) < 0) {
          operator delete((void *)v81);
        }
        if ((char)v52 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if ((char)v54 < 0) {
          operator delete(v53[0]);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if ((char)v56 < 0) {
          operator delete(v55[0]);
        }
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if ((char)v58 < 0) {
          operator delete(v57[0]);
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if ((char)v60 < 0) {
          operator delete(v59[0]);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if ((char)v62 < 0) {
          operator delete(v61[0]);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
        if ((char)v64 < 0) {
          operator delete(v63[0]);
        }
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v74.__r_.__value_.__l.__data_);
        }
        if ((char)v66 < 0) {
          operator delete(v65[0]);
        }
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        if ((char)v68 < 0) {
          operator delete(v67[0]);
        }
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v72.__r_.__value_.__l.__data_);
        }
        if ((char)v70 < 0) {
          operator delete(v69[0]);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        ++v83;
      }
      while (v83 < *((_DWORD *)this + 20));
    }
    int v45 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v81, "\n");
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v46 = &v84;
    }
    else {
      uint64_t v46 = (std::string *)v84.__r_.__value_.__r.__words[0];
    }
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v84.__r_.__value_.__l.__size_;
    }
    unint64_t v48 = std::string::insert(v45, 0, (const std::string::value_type *)v46, size);
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v48->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v82) < 0) {
      operator delete((void *)v81);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1B21C18D4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B21C1A98()
{
}

void sub_1B21C1AA0()
{
}

void sub_1B21C1AA8()
{
}

void sub_1B21C1AB0()
{
}

void sub_1B21C1AB8()
{
}

void sub_1B21C1AC0()
{
}

void sub_1B21C1AC8()
{
}

void sub_1B21C1AD0()
{
}

void sub_1B21C1AD8()
{
}

void sub_1B21C1AE0()
{
}

void sub_1B21C1AE8()
{
}

void sub_1B21C1AF0()
{
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 0, sizeof(v69));
  int v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v57 & 0x80u) == 0) {
        float v3 = v56;
      }
      else {
        float v3 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v4 = v57;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v56[1];
      }
      double v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0) {
        int v7 = v54;
      }
      else {
        int v7 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v8 = v55;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v54[1];
      }
      BOOL v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates values: ");
      if ((v53 & 0x80u) == 0) {
        int v11 = v52;
      }
      else {
        int v11 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v12 = v53;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v52[1];
      }
      int v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 46) + 48 * v68);
      if ((v51 & 0x80u) == 0) {
        int v15 = v50;
      }
      else {
        int v15 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v16 = v51;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v50[1];
      }
      int v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activations: ");
      if ((v49 & 0x80u) == 0) {
        unsigned __int8 v19 = v48;
      }
      else {
        unsigned __int8 v19 = (void **)v48[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v20 = v49;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v48[1];
      }
      unsigned __int8 v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 49) + 48 * v68);
      if ((v47 & 0x80u) == 0) {
        unsigned __int8 v23 = v46;
      }
      else {
        unsigned __int8 v23 = (void **)v46[0];
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v24 = v47;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v46[1];
      }
      unsigned __int8 v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activations: ");
      if ((v45 & 0x80u) == 0) {
        char v27 = v44;
      }
      else {
        char v27 = (void **)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v44[1];
      }
      long long v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 61) + 48 * v68);
      if ((v43 & 0x80u) == 0) {
        uint64_t v31 = __p;
      }
      else {
        uint64_t v31 = (void **)__p[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v32 = v43;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v67 = v33->__r_.__value_.__r.__words[2];
      long long v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v66;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v66;
      }
      if (v67 >= 0) {
        std::string::size_type v36 = HIBYTE(v67);
      }
      else {
        std::string::size_type v36 = *((void *)&v66 + 1);
      }
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      if ((char)v43 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if ((char)v47 < 0) {
        operator delete(v46[0]);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  float v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v38 = &v69;
  }
  else {
    long long v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  std::string::size_type v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_1B21C1FC4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B21C2148()
{
}

void sub_1B21C2150()
{
}

void sub_1B21C2158()
{
}

void sub_1B21C2160()
{
}

void sub_1B21C2168()
{
}

void sub_1B21C2170()
{
}

void sub_1B21C2178()
{
}

void sub_1B21C2180()
{
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  memset(&v69, 0, sizeof(v69));
  int v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v57 & 0x80u) == 0) {
        float v3 = v56;
      }
      else {
        float v3 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v4 = v57;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v56[1];
      }
      double v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0) {
        int v7 = v54;
      }
      else {
        int v7 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v8 = v55;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v54[1];
      }
      BOOL v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates diff: ");
      if ((v53 & 0x80u) == 0) {
        int v11 = v52;
      }
      else {
        int v11 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v12 = v53;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v52[1];
      }
      int v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 70) + 48 * v68);
      if ((v51 & 0x80u) == 0) {
        int v15 = v50;
      }
      else {
        int v15 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v16 = v51;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v50[1];
      }
      int v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activation diff: ");
      if ((v49 & 0x80u) == 0) {
        unsigned __int8 v19 = v48;
      }
      else {
        unsigned __int8 v19 = (void **)v48[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v20 = v49;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v48[1];
      }
      unsigned __int8 v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 67) + 48 * v68);
      if ((v47 & 0x80u) == 0) {
        unsigned __int8 v23 = v46;
      }
      else {
        unsigned __int8 v23 = (void **)v46[0];
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v24 = v47;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v46[1];
      }
      unsigned __int8 v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activation diff: ");
      if ((v45 & 0x80u) == 0) {
        char v27 = v44;
      }
      else {
        char v27 = (void **)v44[0];
      }
      if ((v45 & 0x80u) == 0) {
        std::string::size_type v28 = v45;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v44[1];
      }
      long long v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((void *)this + 64) + 48 * v68);
      if ((v43 & 0x80u) == 0) {
        uint64_t v31 = __p;
      }
      else {
        uint64_t v31 = (void **)__p[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v32 = v43;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v67 = v33->__r_.__value_.__r.__words[2];
      long long v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v66;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v66;
      }
      if (v67 >= 0) {
        std::string::size_type v36 = HIBYTE(v67);
      }
      else {
        std::string::size_type v36 = *((void *)&v66 + 1);
      }
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0) {
        operator delete((void *)v66);
      }
      if ((char)v43 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v45 < 0) {
        operator delete(v44[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if ((char)v47 < 0) {
        operator delete(v46[0]);
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if ((char)v49 < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  float v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v38 = &v69;
  }
  else {
    long long v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v69.__r_.__value_.__l.__size_;
  }
  std::string::size_type v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0) {
    operator delete((void *)v66);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_1B21C2654(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B21C27D8()
{
}

void sub_1B21C27E0()
{
}

void sub_1B21C27E8()
{
}

void sub_1B21C27F0()
{
}

void sub_1B21C27F8()
{
}

void sub_1B21C2800()
{
}

void sub_1B21C2808()
{
}

void sub_1B21C2810()
{
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  uint64_t v9 = *((unsigned int *)this + 24);
  uint64_t v96 = ((int)v8 / (int)v9);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v125, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v125, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    long long v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v125);
  }
  int v13 = *(void **)(a3 + 32);
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(this, a4, v8, v13);
  uint64_t v14 = *((void *)this + 105);
  int v91 = a4;
  if (*((void *)this + 106) == v14 || *(int *)(v14 + 32 * a4 + 16) < 1)
  {
    int v92 = 0;
  }
  else
  {
    int v15 = (int32x2_t *)(*((void *)this + 108) + 48 * a4);
    int v15[4] = (int32x2_t)v13;
    int v92 = 1;
    kaldi::CuMatrix<float>::Resize(v15, v9, *(unsigned int *)(*((void *)this + 1) + 48 * a4 + 16), 1, 0);
  }
  uint64_t v99 = a4;
  uint64_t v16 = 3 * a4;
  uint64_t v17 = *((void *)this + 43) + 48 * a4;
  uint64_t v18 = *((void *)this + 46) + 48 * a4;
  uint64_t v19 = *((void *)this + 49);
  uint64_t v101 = *((void *)this + 55);
  uint64_t v20 = *((void *)this + 58);
  uint64_t v102 = *((void *)this + 61);
  kaldi::CuMatrixBase<float>::AddMatMat(v17, a2, CblasNoTrans, (uint64_t)this + 160, CblasTrans, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToRows(v17, (uint64_t)this + 304, 1.0, 1.0);
  int v21 = 2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  int v22 = *(_DWORD *)(v17 + 28);
  uint64_t v23 = *(void *)(v17 + 32);
  *(void *)&v126[0] = *(void *)(v17 + 8);
  DWORD2(v126[0]) = v21;
  *(void *)((char *)v126 + 12) = *(void *)(v17 + 20);
  DWORD1(v126[1]) = v22;
  *((void *)&v126[1] + 1) = v23;
  unint64_t v125 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v18, (uint64_t)&v125, 111);
  unint64_t v125 = &unk_1F0A472A0;
  memset(v126, 0, sizeof(v126));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v125);
  uint64_t v24 = *(int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  int v25 = *(_DWORD *)(v17 + 28) - 2 * v24;
  uint64_t v26 = *(void *)(v17 + 32);
  *(void *)&v126[0] = *(void *)(v17 + 8) + 8 * v24;
  DWORD2(v126[0]) = v24;
  *(void *)((char *)v126 + 12) = *(void *)(v17 + 20);
  DWORD1(v126[1]) = v25;
  *((void *)&v126[1] + 1) = v26;
  unint64_t v125 = &unk_1F0A472A0;
  uint64_t v95 = v19 + 48 * a4;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v95, (uint64_t)&v125, 111);
  unint64_t v125 = &unk_1F0A472A0;
  memset(v126, 0, sizeof(v126));
  uint64_t v98 = v102 + 48 * a4;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v125);
  uint64_t v94 = v20 + 48 * a4;
  kaldi::CuMatrixBase<float>::Set(v94, 1.0);
  unsigned int v27 = v9;
  if ((int)v96 >= 1)
  {
    uint64_t v103 = 0;
    int v28 = 0;
    uint64_t v29 = 0;
    BOOL v97 = (char *)this + 12;
    uint64_t v93 = v101 + 16 * v16;
    long long v30 = 0uLL;
    while (1)
    {
      v126[0] = v30;
      v126[1] = v30;
      unint64_t v125 = &unk_1F0A472A0;
      long long v123 = v30;
      long long v124 = v30;
      v122 = &unk_1F0A472A0;
      uint64_t v100 = v29;
      if (!v29) {
        break;
      }
      if (!v92)
      {
        unsigned int v50 = *(_DWORD *)(v98 + 16);
        unsigned int v51 = *(_DWORD *)(v98 + 24);
        int v52 = v51 * (v28 - v9);
        uint64_t v53 = *(void *)(v98 + 8) + 4 * v52;
        unsigned int v54 = *(_DWORD *)(v98 + 28) - v52;
        uint64_t v55 = *(void *)(v98 + 32);
        *(void *)&v126[0] = v53;
        *((void *)&v126[0] + 1) = __PAIR64__(v27, v50);
        *(void *)&v126[1] = __PAIR64__(v54, v51);
        *((void *)&v126[1] + 1) = v55;
        unsigned int v119 = &unk_1F0A472A0;
        long long v30 = 0uLL;
        goto LABEL_14;
      }
      kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 108) + 48 * (int)v99);
      uint64_t v31 = *((void *)this + 108) + 48 * (int)v99;
      uint64_t v32 = *(void *)(v31 + 8);
      unsigned int v33 = *(_DWORD *)(v31 + 20);
      unsigned int v34 = *(_DWORD *)(v31 + 24);
      unsigned int v35 = *(_DWORD *)(v31 + 28);
      uint64_t v36 = *(void *)(v31 + 32);
      DWORD2(v120) = *(_DWORD *)&v97[*(void *)(*(void *)this - 24)];
      *(void *)&v126[0] = v32;
      *((void *)&v126[0] + 1) = __PAIR64__(v33, DWORD2(v120));
      *(void *)&v126[1] = __PAIR64__(v35, v34);
      *((void *)&v126[1] + 1) = v36;
      unsigned int v119 = &unk_1F0A472A0;
      long long v120 = 0u;
      long long v121 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v119);
      unsigned int v37 = *(_DWORD *)(v98 + 16);
      unsigned int v38 = *(_DWORD *)(v98 + 24);
      int v39 = v38 * (v28 - v9);
      uint64_t v40 = *(void *)(v98 + 8) + 4 * v39;
      unsigned int v41 = *(_DWORD *)(v98 + 28) - v39;
      uint64_t v42 = *(void *)(v98 + 32);
      *(void *)&long long v120 = v40;
      *((void *)&v120 + 1) = __PAIR64__(v27, v37);
      *(void *)&long long v121 = __PAIR64__(v41, v38);
      *((void *)&v121 + 1) = v42;
      unsigned int v119 = &unk_1F0A472A0;
      uint64_t v43 = *((void *)this + 105) + 32 * v99;
      *((void *)&v117 + 1) = 0;
      unint64_t v116 = &unk_1F0A472D0;
      *(void *)&long long v117 = *(void *)(v43 + 8) + v103;
      DWORD2(v117) = v27;
      *(void *)&long long v118 = *(void *)(v43 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v125, (uint64_t)&v119, (uint64_t)&v116, 1);
      unsigned int v119 = &unk_1F0A472A0;
      long long v120 = 0u;
      long long v121 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v119);
LABEL_15:
      unsigned int v56 = *(_DWORD *)(v18 + 24);
      uint64_t v57 = *(void *)(v18 + 8) + 4 * (int)(v56 * v28);
      int v58 = *(_DWORD *)(v18 + 28) - v56 * v28;
      uint64_t v59 = *(void *)(v18 + 32);
      DWORD2(v120) = *(_DWORD *)(v18 + 16);
      HIDWORD(v120) = v27;
      *(void *)&long long v121 = __PAIR64__(v58, v56);
      *((void *)&v121 + 1) = v59;
      unsigned int v119 = &unk_1F0A472A0;
      *(void *)&long long v120 = v57;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v119, (uint64_t)&v125, CblasNoTrans, (uint64_t)this + 208, CblasTrans, 1.0, 1.0);
      unsigned int v119 = &unk_1F0A472A0;
      long long v120 = 0u;
      long long v121 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v119);
      unsigned int v60 = *(_DWORD *)(v18 + 24);
      uint64_t v61 = *(void *)(v18 + 8) + 4 * (int)(v60 * v28);
      int v62 = *(_DWORD *)(v18 + 28) - v60 * v28;
      uint64_t v63 = *(void *)(v18 + 32);
      DWORD2(v120) = *(_DWORD *)&v97[*(void *)(*(void *)this - 24)];
      HIDWORD(v120) = v27;
      *(void *)&long long v121 = __PAIR64__(v62, v60);
      *((void *)&v121 + 1) = v63;
      unsigned int v119 = &unk_1F0A472A0;
      *(void *)&long long v120 = v61;
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v119, (uint64_t)&v119);
      uint64_t v64 = *(int *)&v97[*(void *)(*(void *)this - 24)];
      unsigned int v65 = *(_DWORD *)(v18 + 24);
      uint64_t v66 = *(void *)(v18 + 8) + 4 * (int)(v65 * v28) + 4 * v64;
      unsigned int v67 = *(_DWORD *)(v18 + 28) - v65 * v28 - v64;
      uint64_t v68 = *(void *)(v18 + 32);
      DWORD2(v117) = *(_DWORD *)&v97[*(void *)(*(void *)this - 24)];
      HIDWORD(v117) = v27;
      *(void *)&long long v118 = __PAIR64__(v67, v65);
      *((void *)&v118 + 1) = v68;
      unint64_t v116 = &unk_1F0A472A0;
      *(void *)&long long v117 = v66;
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v116, (uint64_t)&v116);
      unsigned int v69 = *(_DWORD *)(v93 + 16);
      unsigned int v70 = *(_DWORD *)(v93 + 24);
      int v71 = *(_DWORD *)(v93 + 28) - v70 * v28;
      uint64_t v72 = *(void *)(v93 + 32);
      *(void *)&long long v123 = *(void *)(v93 + 8) + 4 * (int)(v70 * v28);
      *((void *)&v123 + 1) = __PAIR64__(v27, v69);
      *(void *)&long long v124 = __PAIR64__(v71, v70);
      *((void *)&v124 + 1) = v72;
      uint64_t v113 = &unk_1F0A472A0;
      long long v114 = 0u;
      long long v115 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v113);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v122, (uint64_t)&v116, 111, (uint64_t)&v125, 111, 1.0, 0.0);
      unsigned int v73 = *(_DWORD *)(v95 + 24);
      uint64_t v74 = *(void *)(v95 + 8) + 4 * (int)(v73 * v28);
      int v75 = *(_DWORD *)(v95 + 28) - v73 * v28;
      uint64_t v76 = *(void *)(v95 + 32);
      DWORD2(v114) = *(_DWORD *)(v95 + 16);
      HIDWORD(v114) = v27;
      *(void *)&long long v115 = __PAIR64__(v75, v73);
      *((void *)&v115 + 1) = v76;
      uint64_t v113 = &unk_1F0A472A0;
      *(void *)&long long v114 = v74;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v113, (uint64_t)&v122, CblasNoTrans, (uint64_t)this + 256, CblasNoTrans, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v113, (uint64_t)&v113);
      unsigned int v77 = *(_DWORD *)(v94 + 24);
      uint64_t v78 = *(void *)(v94 + 8) + 4 * (int)(v77 * v28);
      int v79 = *(_DWORD *)(v94 + 28) - v77 * v28;
      uint64_t v80 = *(void *)(v94 + 32);
      DWORD2(v111) = *(_DWORD *)(v94 + 16);
      HIDWORD(v111) = v27;
      *(void *)&long long v112 = __PAIR64__(v79, v77);
      *((void *)&v112 + 1) = v80;
      BOOL v110 = &unk_1F0A472A0;
      *(void *)&long long v111 = v78;
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v110, (uint64_t)&v119, 111, -1.0, 1.0);
      unsigned int v81 = *(_DWORD *)(v98 + 24);
      uint64_t v82 = *(void *)(v98 + 8) + 4 * (int)(v81 * v28);
      int v83 = *(_DWORD *)(v98 + 28) - v81 * v28;
      uint64_t v84 = *(void *)(v98 + 32);
      DWORD2(v108) = *(_DWORD *)(v98 + 16);
      HIDWORD(v108) = v27;
      *(void *)&long long v109 = __PAIR64__(v83, v81);
      *((void *)&v109 + 1) = v84;
      uint64_t v107 = &unk_1F0A472A0;
      *(void *)&long long v108 = v82;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v107, (uint64_t)&v110, 111, (uint64_t)&v125, 111, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v107, (uint64_t)&v119, 111, (uint64_t)&v113, 111, 1.0, 1.0);
      uint64_t v85 = *((void *)this + 52) + 48 * (int)v99;
      unsigned int v86 = *(_DWORD *)(v85 + 16);
      unsigned int v87 = *(_DWORD *)(v85 + 24);
      uint64_t v88 = *(void *)(v85 + 8) + 4 * (int)(v87 * v28);
      int v89 = *(_DWORD *)(v85 + 28) - v87 * v28;
      uint64_t v90 = *(void *)(v85 + 32);
      *((void *)&v105 + 1) = __PAIR64__(v9, v86);
      *(void *)&long long v106 = __PAIR64__(v89, v87);
      *((void *)&v106 + 1) = v90;
      uint64_t v104 = &unk_1F0A472A0;
      *(void *)&long long v105 = v88;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v104, (uint64_t)&v113, 111);
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v104, (uint64_t)&v125, 111, -1.0, 1.0);
      uint64_t v104 = &unk_1F0A472A0;
      long long v105 = 0u;
      long long v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      uint64_t v107 = &unk_1F0A472A0;
      long long v108 = 0u;
      long long v109 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v107);
      BOOL v110 = &unk_1F0A472A0;
      long long v111 = 0u;
      long long v112 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
      uint64_t v113 = &unk_1F0A472A0;
      long long v114 = 0u;
      long long v115 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v113);
      unint64_t v116 = &unk_1F0A472A0;
      long long v117 = 0u;
      long long v118 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v116);
      unsigned int v119 = &unk_1F0A472A0;
      long long v120 = 0u;
      long long v121 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v119);
      v122 = &unk_1F0A472A0;
      long long v123 = 0u;
      long long v124 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v122);
      unint64_t v125 = &unk_1F0A472A0;
      memset(v126, 0, sizeof(v126));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v125);
      long long v30 = 0uLL;
      uint64_t v29 = v100 + 1;
      v28 += v9;
      unsigned int v27 = v9;
      v103 += 4 * (int)v9;
      if (v96 == v100 + 1) {
        goto LABEL_16;
      }
    }
    uint64_t v44 = *((void *)this + 1) + 48 * (int)v99;
    uint64_t v45 = *(void *)(v44 + 8);
    unsigned int v46 = *(_DWORD *)(v44 + 20);
    unsigned int v47 = *(_DWORD *)(v44 + 24);
    unsigned int v48 = *(_DWORD *)(v44 + 28);
    uint64_t v49 = *(void *)(v44 + 32);
    DWORD2(v120) = *(_DWORD *)&v97[*(void *)(*(void *)this - 24)];
    HIDWORD(v120) = v46;
    *(void *)&long long v121 = __PAIR64__(v48, v47);
    *((void *)&v121 + 1) = v49;
    *(void *)&v126[0] = v45;
    *((void *)&v126[0] + 1) = __PAIR64__(v46, DWORD2(v120));
    *(void *)&v126[1] = __PAIR64__(v48, v47);
    *((void *)&v126[1] + 1) = v49;
    unsigned int v119 = &unk_1F0A472A0;
    *(void *)&long long v120 = v45;
LABEL_14:
    long long v120 = v30;
    long long v121 = v30;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v119);
    goto LABEL_15;
  }
LABEL_16:
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, v98, 111);
  kaldi::nnet1::GatedRecurrentUnit::SaveLastState(this, v91);
}

void sub_1B21C340C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _OWORD *v71 = 0u;
  v71[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a71);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 43) + 48 * a2), a3, (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 46) + 48 * a2), a3, (2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 49) + 48 * a2), a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 52) + 48 * a2), a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 55) + 48 * a2), a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 58) + 48 * a2), a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 61) + 48 * a2), a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  *(void *)(*((void *)this + 43) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 46) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 49) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 52) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 55) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 58) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 61) + 48 * a2 + 32) = a4;
}

void sub_1B21C37D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::SaveLastState(kaldi::nnet1::GatedRecurrentUnit *this, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v13, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Saving last activation batch ", 29);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v13);
  }
  uint64_t v4 = *((void *)this + 61) + 48 * a2;
  unsigned int v5 = *((_DWORD *)this + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 16);
  int v7 = (int *)(*((void *)this + 1) + 48 * a2);
  unsigned int v8 = *(_DWORD *)(v4 + 24);
  int v9 = v8 * (*(_DWORD *)(v4 + 20) - v5);
  uint64_t v10 = *(void *)(v4 + 8) + 4 * v9;
  int v11 = *(_DWORD *)(v4 + 28) - v9;
  uint64_t v12 = *(void *)(v4 + 32);
  *((void *)&v14 + 1) = __PAIR64__(v5, v6);
  *(void *)&long long v15 = __PAIR64__(v11, v8);
  *((void *)&v15 + 1) = v12;
  int v13 = &unk_1F0A472A0;
  *(void *)&long long v14 = v10;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v7, (uint64_t)&v13, 111);
  int v13 = &unk_1F0A472A0;
  long long v14 = 0u;
  long long v15 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v13);
}

void sub_1B21C38F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  float v3 = v2;
  *float v3 = 0u;
  v3[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
}

void kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(kaldi::nnet1::GatedRecurrentUnit *a1, uint64_t a2, void *a3)
{
  unsigned int v6 = (void *)a3[3];
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(a1, 0, 1, v6);
  uint64_t v7 = *((void *)a1 + 105);
  if (*((void *)a1 + 106) != v7 && *(int *)(v7 + 16) >= 1)
  {
    unsigned int v8 = (int32x2_t *)*((void *)a1 + 108);
    v8[4] = (int32x2_t)v6;
    kaldi::CuMatrix<float>::Resize(v8, 1, *(unsigned int *)(*((void *)a1 + 1) + 16), 1, 0);
  }
  uint64_t v9 = *((void *)a1 + 43);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  uint64_t v10 = *(void *)(v9 + 8);
  int v58 = &unk_1F0A472D0;
  uint64_t v59 = v10;
  LODWORD(v60) = *(_DWORD *)(v9 + 16);
  uint64_t v61 = *(void *)(v9 + 32);
  uint64_t v11 = *((void *)a1 + 46);
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  uint64_t v12 = *(void *)(v11 + 8);
  unsigned int v54 = &unk_1F0A472D0;
  uint64_t v55 = v12;
  LODWORD(v56) = *(_DWORD *)(v11 + 16);
  uint64_t v57 = *(void *)(v11 + 32);
  uint64_t v13 = *((void *)a1 + 61);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = 0;
  uint64_t v14 = *(void *)(v13 + 8);
  unsigned int v50 = &unk_1F0A472D0;
  uint64_t v51 = v14;
  LODWORD(v52) = *(_DWORD *)(v13 + 16);
  uint64_t v53 = *(void *)(v13 + 32);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v58, (uint64_t)a1 + 160, CblasNoTrans, a2, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v58, (uint64_t)a1 + 304, 1.0, 1.0);
  unsigned int v15 = 2 * *(_DWORD *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 12);
  unsigned int v46 = &unk_1F0A472D0;
  uint64_t v47 = v59;
  uint64_t v48 = v15;
  uint64_t v49 = v61;
  kaldi::CuVectorBase<float>::CopyFromVec(&v54, (uint64_t)&v46);
  uint64_t v16 = *((void *)a1 + 1);
  uint64_t v17 = *(void *)(v16 + 8);
  unsigned int v18 = *(_DWORD *)(v16 + 16);
  uint64_t v19 = *(void *)(v16 + 32);
  uint64_t v47 = v17;
  unsigned int v46 = &unk_1F0A472D0;
  uint64_t v48 = v18;
  uint64_t v49 = v19;
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v54, (uint64_t)a1 + 208, CblasNoTrans, (uint64_t)&v46, 1.0, 1.0);
  unsigned int v20 = *(_DWORD *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 12);
  v45[0] = &unk_1F0A472D0;
  v45[1] = v55;
  v45[2] = v20;
  v45[3] = v57;
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v45, (uint64_t)v45);
  uint64_t v21 = *(int *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 12);
  v44[0] = &unk_1F0A472D0;
  v44[1] = v55 + 4 * v21;
  v44[2] = v21;
  v44[3] = v57;
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v44, (uint64_t)v44);
  uint64_t v22 = *((void *)a1 + 55);
  uint64_t v42 = 0;
  uint64_t v23 = *(void *)(v22 + 8);
  v41[0] = &unk_1F0A472D0;
  v41[1] = v23;
  LODWORD(v42) = *(_DWORD *)(v22 + 16);
  uint64_t v43 = *(void *)(v22 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v41, (uint64_t)v44, (uint64_t)&v46, 1.0, 0.0);
  uint64_t v24 = *((void *)a1 + 49);
  uint64_t v39 = 0;
  uint64_t v25 = *(void *)(v24 + 8);
  v38[0] = &unk_1F0A472D0;
  v38[1] = v25;
  LODWORD(v39) = *(_DWORD *)(v24 + 16);
  uint64_t v40 = *(void *)(v24 + 32);
  uint64_t v26 = *(int *)((char *)a1 + *(void *)(*(void *)a1 - 24) + 12);
  unsigned int v34 = &unk_1F0A472D0;
  uint64_t v35 = v59 + 8 * v26;
  uint64_t v36 = v26;
  uint64_t v37 = v61;
  kaldi::CuVectorBase<float>::CopyFromVec(v38, (uint64_t)&v34);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v38, (uint64_t)a1 + 256, CblasNoTrans, (uint64_t)v41, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)v38, (uint64_t)v38);
  uint64_t v27 = *((void *)a1 + 58);
  uint64_t v36 = 0;
  uint64_t v28 = *(void *)(v27 + 8);
  unsigned int v34 = &unk_1F0A472D0;
  uint64_t v35 = v28;
  LODWORD(v36) = *(_DWORD *)(v27 + 16);
  uint64_t v37 = *(void *)(v27 + 32);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v34, 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v34, (uint64_t)v45, -1.0, 1.0);
  uint64_t v29 = *((void *)a1 + 61);
  uint64_t v32 = 0;
  uint64_t v30 = *(void *)(v29 + 8);
  v31[0] = &unk_1F0A472D0;
  v31[1] = v30;
  LODWORD(v32) = *(_DWORD *)(v29 + 16);
  uint64_t v33 = *(void *)(v29 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v31, (uint64_t)&v34, (uint64_t)&v46, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v31, (uint64_t)v45, (uint64_t)v38, 1.0, 1.0);
  kaldi::CuVectorBase<float>::CopyFromVec(a3, (uint64_t)v31);
  kaldi::nnet1::GatedRecurrentUnit::SaveLastState(a1, 0);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(void *a1, uint64_t a2, void *a3)
{
}

void kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(unsigned int *)(a2 + 20);
  signed int v11 = *(_DWORD *)(a1 + 96);
  kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers((uint64_t *)a1);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v107, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", which contains ", 17);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" frames each from ", 18);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v107);
  }
  int v76 = (int)v10 / v11;
  if (a5) {
    uint64_t v15 = a5;
  }
  else {
    uint64_t v15 = a4;
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, a6, v10, *(void **)(v15 + 32));
  uint64_t v16 = *(void *)(a1 + 368) + 48 * a6;
  uint64_t v17 = *(void *)a1;
  int v18 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v19 = *(_DWORD *)(v16 + 28);
  uint64_t v20 = *(void *)(v16 + 32);
  v107[1] = *(void *)(v16 + 8);
  LODWORD(v107[2]) = v18;
  *(void *)((char *)&v107[2] + 4) = *(void *)(v16 + 20);
  HIDWORD(v107[3]) = v19;
  v107[4] = v20;
  v107[0] = &unk_1F0A472A0;
  uint64_t v21 = *(int *)(a1 + *(void *)(v17 - 24) + 12);
  int v22 = *(_DWORD *)(v16 + 28) - v21;
  uint64_t v23 = *(void *)(v16 + 32);
  v106[1] = *(void *)(v16 + 8) + 4 * v21;
  LODWORD(v106[2]) = v21;
  *(void *)((char *)&v106[2] + 4) = *(void *)(v16 + 20);
  HIDWORD(v106[3]) = v22;
  v106[4] = v23;
  v106[0] = &unk_1F0A472A0;
  uint64_t v24 = *(void *)(a1 + 392);
  uint64_t v80 = *(void *)(a1 + 464);
  uint64_t v25 = *(void *)(a1 + 488);
  uint64_t v26 = (int *)(*(void *)(a1 + 512) + 48 * a6);
  uint64_t v27 = *(void *)(a1 + 560) + 48 * a6;
  LODWORD(v21) = *(_DWORD *)(a1 + *(void *)(v17 - 24) + 12);
  int v28 = *(_DWORD *)(v27 + 28);
  uint64_t v29 = *(void *)(v27 + 32);
  v105[1] = *(void *)(v27 + 8);
  LODWORD(v105[2]) = v21;
  *(void *)((char *)&v105[2] + 4) = *(void *)(v27 + 20);
  HIDWORD(v105[3]) = v28;
  v105[4] = v29;
  v105[0] = &unk_1F0A472A0;
  uint64_t v30 = *(int *)(a1 + *(void *)(v17 - 24) + 12);
  LODWORD(v16) = *(_DWORD *)(v27 + 28) - v30;
  uint64_t v31 = *(void *)(v27 + 32);
  v104[1] = *(void *)(v27 + 8) + 4 * v30;
  LODWORD(v104[2]) = v30;
  uint64_t v82 = v27;
  *(void *)((char *)&v104[2] + 4) = *(void *)(v27 + 20);
  HIDWORD(v104[3]) = v16;
  v104[4] = v31;
  v104[0] = &unk_1F0A472A0;
  uint64_t v32 = *(void *)(a1 + 536);
  uint64_t v78 = *(void *)(a1 + 584);
  uint64_t v84 = v26;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v26, a4, 111);
  uint64_t v77 = a1;
  uint64_t v33 = v25 + 48 * a6;
  DWORD2(v102) = v104[2];
  HIDWORD(v102) = v10 - v11;
  LODWORD(v103) = v104[3];
  DWORD1(v103) = HIDWORD(v104[3]) - LODWORD(v104[3]) * v11;
  *((void *)&v103 + 1) = v104[4];
  uint64_t v101 = &unk_1F0A472A0;
  *(void *)&long long v102 = v104[1] + 4 * LODWORD(v104[3]) * v11;
  DWORD2(v99) = v106[2];
  HIDWORD(v99) = v10 - v11;
  LODWORD(v100) = v106[3];
  DWORD1(v100) = HIDWORD(v106[3]) - LODWORD(v106[3]) * v11;
  *((void *)&v100 + 1) = v106[4];
  uint64_t v98 = &unk_1F0A472A0;
  *(void *)&long long v99 = v106[1] + 4 * LODWORD(v106[3]) * v11;
  int v34 = *(_DWORD *)(v33 + 16);
  uint64_t v35 = *(void *)(v33 + 32);
  *(void *)&long long v96 = *(void *)(v33 + 8);
  DWORD2(v96) = v34;
  HIDWORD(v96) = v10 - v11;
  *(void *)&long long v97 = *(void *)(v33 + 24);
  *((void *)&v97 + 1) = v35;
  uint64_t v95 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v101, (uint64_t)&v98, (uint64_t)&v95);
  uint64_t v95 = &unk_1F0A472A0;
  long long v96 = 0u;
  long long v97 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v95);
  uint64_t v98 = &unk_1F0A472A0;
  long long v99 = 0u;
  long long v100 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v98);
  uint64_t v101 = &unk_1F0A472A0;
  long long v102 = 0u;
  long long v103 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v101);
  *((void *)&v102 + 1) = __PAIR64__(v11, v104[2]);
  long long v103 = *(_OWORD *)&v104[3];
  uint64_t v101 = &unk_1F0A472A0;
  *(void *)&long long v102 = v104[1];
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v101);
  uint64_t v101 = &unk_1F0A472A0;
  long long v102 = 0u;
  long long v103 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v101);
  uint64_t v36 = a1;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v105, (uint64_t)v107, *(void *)(a1 + 416) + 48 * a6);
  uint64_t v85 = v32 + 48 * a6;
  kaldi::CuMatrixBase<float>::DiffTanh(v85, v24 + 48 * a6, (uint64_t)v107);
  int v37 = 0;
  int v38 = v76;
  int v83 = v11 * (v76 - 1);
  uint64_t v81 = v80 + 48 * a6;
  uint64_t v39 = v78 + 48 * a6;
  int v79 = v11 * v76;
  do
  {
    --v38;
    int v40 = v83 + v37;
    int v41 = v84[4];
    uint64_t v42 = *((void *)v84 + 1);
    int v43 = v84[6];
    int v44 = v84[7];
    uint64_t v45 = *((void *)v84 + 4);
    *((void *)&v102 + 1) = __PAIR64__(v11, v41);
    LODWORD(v103) = v43;
    DWORD1(v103) = v44 - v43 * (v83 + v37);
    *((void *)&v103 + 1) = v45;
    uint64_t v101 = &unk_1F0A472A0;
    *(void *)&long long v102 = v42 + 4 * v43 * (v83 + v37);
    if (v38 < v76 - 1)
    {
      int v46 = v43 * (v79 + v37);
      *((void *)&v99 + 1) = __PAIR64__(v11, v41);
      LODWORD(v100) = v43;
      DWORD1(v100) = v44 - v46;
      *((void *)&v100 + 1) = v45;
      uint64_t v98 = &unk_1F0A472A0;
      *(void *)&long long v99 = v42 + 4 * v46;
      unsigned int v47 = *(_DWORD *)(v81 + 24);
      int v48 = v47 * (v79 + v37);
      uint64_t v49 = *(void *)(v81 + 8) + 4 * v48;
      int v50 = *(_DWORD *)(v81 + 28) - v48;
      uint64_t v51 = *(void *)(v81 + 32);
      DWORD2(v96) = *(_DWORD *)(v81 + 16);
      HIDWORD(v96) = v11;
      *(void *)&long long v97 = __PAIR64__(v50, v47);
      *((void *)&v97 + 1) = v51;
      uint64_t v95 = &unk_1F0A472A0;
      *(void *)&long long v96 = v49;
      unsigned int v52 = *(_DWORD *)(v39 + 24);
      LODWORD(v51) = v52 * (v79 + v37);
      uint64_t v53 = *(void *)(v39 + 8) + 4 * (int)v51;
      unsigned int v54 = *(_DWORD *)(v39 + 28) - v51;
      uint64_t v55 = *(void *)(v39 + 32);
      DWORD2(v93) = *(_DWORD *)(v39 + 16);
      HIDWORD(v93) = v11;
      *(void *)&long long v94 = __PAIR64__(v54, v52);
      *((void *)&v94 + 1) = v55;
      int v92 = &unk_1F0A472A0;
      *(void *)&long long v93 = v53;
      int v56 = LODWORD(v106[3]) * (v79 + v37);
      *(void *)&long long v90 = v106[1] + 4 * v56;
      *((void *)&v90 + 1) = __PAIR64__(v11, v106[2]);
      LODWORD(v91) = v106[3];
      DWORD1(v91) = HIDWORD(v106[3]) - v56;
      *((void *)&v91 + 1) = v106[4];
      int v89 = &unk_1F0A472A0;
      unsigned int v57 = *(_DWORD *)(v82 + 24);
      int v58 = v57 * (v79 + v37);
      uint64_t v59 = *(void *)(v82 + 8) + 4 * v58;
      int v60 = *(_DWORD *)(v82 + 28) - v58;
      uint64_t v61 = *(void *)(v82 + 32);
      DWORD2(v87) = *(_DWORD *)(v82 + 16);
      HIDWORD(v87) = v11;
      *(void *)&long long v88 = __PAIR64__(v60, v57);
      *((void *)&v88 + 1) = v61;
      unsigned int v86 = &unk_1F0A472A0;
      *(void *)&long long v87 = v59;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v101, (uint64_t)&v98, 111, (uint64_t)&v95, 111, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v101, (uint64_t)&v92, 111, (uint64_t)&v89, 111, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v101, (uint64_t)&v86, CblasNoTrans, v36 + 208, CblasNoTrans, 1.0, 1.0);
      unsigned int v86 = &unk_1F0A472A0;
      long long v87 = 0u;
      long long v88 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v86);
      int v89 = &unk_1F0A472A0;
      long long v90 = 0u;
      long long v91 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v89);
      int v92 = &unk_1F0A472A0;
      long long v93 = 0u;
      long long v94 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v92);
      uint64_t v95 = &unk_1F0A472A0;
      long long v96 = 0u;
      long long v97 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v95);
      uint64_t v98 = &unk_1F0A472A0;
      long long v99 = 0u;
      long long v100 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v98);
    }
    *(void *)&long long v99 = v105[1] + 4 * LODWORD(v105[3]) * v40;
    *((void *)&v99 + 1) = __PAIR64__(v11, v105[2]);
    LODWORD(v100) = v105[3];
    DWORD1(v100) = HIDWORD(v105[3]) - LODWORD(v105[3]) * v40;
    *((void *)&v100 + 1) = v105[4];
    uint64_t v98 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v98, (uint64_t)&v101);
    unsigned int v62 = *(_DWORD *)(v85 + 24);
    uint64_t v63 = *(void *)(v85 + 8) + 4 * (int)(v62 * v40);
    int v64 = *(_DWORD *)(v85 + 28) - v62 * v40;
    uint64_t v65 = *(void *)(v85 + 32);
    DWORD2(v96) = *(_DWORD *)(v85 + 16);
    HIDWORD(v96) = v11;
    *(void *)&long long v97 = __PAIR64__(v64, v62);
    *((void *)&v97 + 1) = v65;
    uint64_t v95 = &unk_1F0A472A0;
    *(void *)&long long v96 = v63;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v95, (uint64_t)&v101);
    unsigned int v66 = *(_DWORD *)(v39 + 24);
    uint64_t v67 = *(void *)(v39 + 8) + 4 * (int)(v66 * v40);
    int v68 = *(_DWORD *)(v39 + 28) - v66 * v40;
    uint64_t v69 = *(void *)(v39 + 32);
    DWORD2(v93) = *(_DWORD *)(v39 + 16);
    HIDWORD(v93) = v11;
    *(void *)&long long v94 = __PAIR64__(v68, v66);
    *((void *)&v94 + 1) = v69;
    int v92 = &unk_1F0A472A0;
    *(void *)&long long v93 = v67;
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v92, (uint64_t)&v95, CblasNoTrans, v36 + 256, CblasNoTrans, 1.0, 0.0);
    *(void *)&long long v90 = v104[1] + 4 * LODWORD(v104[3]) * v40;
    *((void *)&v90 + 1) = __PAIR64__(v11, v104[2]);
    LODWORD(v91) = v104[3];
    DWORD1(v91) = HIDWORD(v104[3]) - LODWORD(v104[3]) * v40;
    *((void *)&v91 + 1) = v104[4];
    int v89 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v89, (uint64_t)&v92);
    int v89 = &unk_1F0A472A0;
    long long v90 = 0u;
    long long v91 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v89);
    int v92 = &unk_1F0A472A0;
    long long v93 = 0u;
    long long v94 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v92);
    uint64_t v95 = &unk_1F0A472A0;
    long long v96 = 0u;
    long long v97 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v95);
    uint64_t v98 = &unk_1F0A472A0;
    long long v99 = 0u;
    long long v100 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v98);
    uint64_t v101 = &unk_1F0A472A0;
    long long v102 = 0u;
    long long v103 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v101);
    v37 -= v11;
  }
  while (v38 > 0);
  if (a5)
  {
    unsigned int v70 = *(_DWORD *)(v77 + *(void *)(*(void *)v77 - 24) + 12);
    uint64_t v71 = *(void *)(v77 + 168);
    unsigned int v72 = *(_DWORD *)(v77 + 184);
    unsigned int v73 = *(_DWORD *)(v77 + 188);
    uint64_t v74 = *(void *)(v77 + 192);
    DWORD2(v102) = *(_DWORD *)(v77 + 176);
    HIDWORD(v102) = 2 * v70;
    *(void *)&long long v103 = __PAIR64__(v73, v72);
    *((void *)&v103 + 1) = v74;
    uint64_t v101 = &unk_1F0A472A0;
    *(void *)&long long v102 = v71;
    int v75 = 2 * v70 * v72;
    *((void *)&v99 + 1) = __PAIR64__(v70, DWORD2(v102));
    LODWORD(v100) = v72;
    DWORD1(v100) = v73 - v75;
    *((void *)&v100 + 1) = v74;
    uint64_t v98 = &unk_1F0A472A0;
    *(void *)&long long v99 = v71 + 4 * v75;
    kaldi::CuMatrixBase<float>::AddMatMat(a5, v82, CblasNoTrans, (uint64_t)&v101, CblasNoTrans, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(a5, v85, CblasNoTrans, (uint64_t)&v98, CblasNoTrans, 1.0, 1.0);
    uint64_t v98 = &unk_1F0A472A0;
    long long v99 = 0u;
    long long v100 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v98);
    uint64_t v101 = &unk_1F0A472A0;
    long long v102 = 0u;
    long long v103 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v101);
  }
  v104[0] = &unk_1F0A472A0;
  memset(&v104[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v104);
  v105[0] = &unk_1F0A472A0;
  memset(&v105[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v105);
  v106[0] = &unk_1F0A472A0;
  memset(&v106[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v106);
  v107[0] = &unk_1F0A472A0;
  memset(&v107[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v107);
}

void sub_1B21C4A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, unint64_t a13, _OWORD *a14, unint64_t a15, _OWORD *a16, uint64_t a17, _OWORD *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _OWORD *v71 = 0u;
  v71[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a61);
  a66 = a17;
  *a18 = 0u;
  a18[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a66);
  a71 = a19;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a71);
  STACK[0x218] = a13;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x218]);
  STACK[0x240] = a15;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x240]);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers(uint64_t *this)
{
  if (!*((unsigned char *)this + 337))
  {
    uint64_t v1 = this;
    std::vector<kaldi::CuMatrix<float>>::resize(this + 64, *((int *)this + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 67, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 70, *((int *)v1 + 20));
    this = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 73, *((int *)v1 + 20));
    *((unsigned char *)v1 + 337) = 1;
  }
  return this;
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    unsigned int v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 64) + 48 * a2), a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 67) + 48 * a2), a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 70) + 48 * a2), a3, (2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 73) + 48 * a2), a3, *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
  *(void *)(*((void *)this + 64) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 67) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 70) + 48 * a2 + 32) = a4;
  *(void *)(*((void *)this + 73) + 48 * a2 + 32) = a4;
}

void sub_1B21C4EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

void kaldi::nnet1::GatedRecurrentUnit::AccumGradients(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = *((_DWORD *)this + 24);
  int v10 = *(_DWORD *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v55, (uint64_t)"Accumulating gradients for batch id = ", 38);
    signed int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v55);
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(this);
  float v14 = *((float *)this + 15);
  *(_DWORD *)(*((void *)this + 77) + 4 * a5) = v10;
  uint64_t v15 = a5;
  uint64_t v16 = 3 * a5;
  uint64_t v17 = *((void *)this + 70) + 16 * v16;
  uint64_t v18 = *((void *)this + 67);
  uint64_t v19 = *((void *)this + 81) + 16 * v16;
  *(void *)(v19 + 32) = a4;
  *(void *)(*((void *)this + 84) + 16 * v16 + 32) = a4;
  *(void *)(*((void *)this + 87) + 16 * v16 + 32) = a4;
  *(void *)(*((void *)this + 90) + 32 * v15 + 24) = a4;
  unsigned int v20 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  unsigned int v21 = *(_DWORD *)(v19 + 16);
  uint64_t v22 = *(void *)(v19 + 8);
  unsigned int v23 = *(_DWORD *)(v19 + 24);
  unsigned int v24 = *(_DWORD *)(v19 + 28);
  uint64_t v25 = *(void *)(v19 + 32);
  DWORD2(v56) = v21;
  HIDWORD(v56) = 2 * v20;
  *(void *)&long long v57 = __PAIR64__(v24, v23);
  *((void *)&v57 + 1) = v25;
  uint64_t v55 = &unk_1F0A472A0;
  *(void *)&long long v56 = v22;
  int v26 = v23 * 2 * v20;
  *((void *)&v53 + 1) = __PAIR64__(v20, v21);
  LODWORD(v54) = v23;
  DWORD1(v54) = v24 - v26;
  *((void *)&v54 + 1) = v25;
  unsigned int v52 = &unk_1F0A472A0;
  *(void *)&long long v53 = v22 + 4 * v26;
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v55, v17, CblasTrans, a2, CblasNoTrans, 1.0, v14);
  uint64_t v27 = v18 + 16 * v16;
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v52, v27, CblasTrans, a2, CblasNoTrans, 1.0, v14);
  uint64_t v28 = *((void *)this + 84) + 48 * v15;
  unsigned int v29 = *(_DWORD *)(v17 + 24);
  uint64_t v30 = *(void *)(v17 + 8) + 4 * (int)(v29 * v9);
  int v31 = *(_DWORD *)(v17 + 28) - v29 * v9;
  uint64_t v32 = *(void *)(v17 + 32);
  DWORD2(v50) = *(_DWORD *)(v17 + 16);
  HIDWORD(v50) = v10 - v9;
  *(void *)&long long v51 = __PAIR64__(v31, v29);
  *((void *)&v51 + 1) = v32;
  uint64_t v49 = &unk_1F0A472A0;
  *(void *)&long long v50 = v30;
  uint64_t v33 = *((void *)this + 61) + 48 * v15;
  LODWORD(v30) = *(_DWORD *)(v33 + 16);
  uint64_t v34 = *(void *)(v33 + 32);
  *(void *)&long long v47 = *(void *)(v33 + 8);
  DWORD2(v47) = v30;
  HIDWORD(v47) = v10 - v9;
  *(void *)&long long v48 = *(void *)(v33 + 24);
  *((void *)&v48 + 1) = v34;
  int v46 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::AddMatMat(v28, (uint64_t)&v49, CblasTrans, (uint64_t)&v46, CblasNoTrans, 1.0, v14);
  int v46 = &unk_1F0A472A0;
  long long v47 = 0u;
  long long v48 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v46);
  uint64_t v49 = &unk_1F0A472A0;
  long long v50 = 0u;
  long long v51 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v49);
  uint64_t v35 = *((void *)this + 87) + 48 * v15;
  unsigned int v36 = *(_DWORD *)(v27 + 24);
  uint64_t v37 = *(void *)(v27 + 8) + 4 * (int)(v36 * v9);
  int v38 = *(_DWORD *)(v27 + 28) - v36 * v9;
  uint64_t v39 = *(void *)(v27 + 32);
  DWORD2(v50) = *(_DWORD *)(v27 + 16);
  HIDWORD(v50) = v10 - v9;
  *(void *)&long long v51 = __PAIR64__(v38, v36);
  *((void *)&v51 + 1) = v39;
  uint64_t v49 = &unk_1F0A472A0;
  *(void *)&long long v50 = v37;
  uint64_t v40 = *((void *)this + 55) + 48 * v15;
  LODWORD(v37) = *(_DWORD *)(v40 + 16);
  uint64_t v41 = *(void *)(v40 + 32);
  *(void *)&long long v47 = *(void *)(v40 + 8);
  DWORD2(v47) = v37;
  HIDWORD(v47) = v10 - v9;
  *(void *)&long long v48 = *(void *)(v40 + 24);
  *((void *)&v48 + 1) = v41;
  int v46 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::AddMatMat(v35, (uint64_t)&v49, CblasTrans, (uint64_t)&v46, CblasNoTrans, 1.0, v14);
  int v46 = &unk_1F0A472A0;
  long long v47 = 0u;
  long long v48 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v46);
  uint64_t v49 = &unk_1F0A472A0;
  long long v50 = 0u;
  long long v51 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v49);
  uint64_t v42 = *((void *)this + 90) + 32 * v15;
  int v43 = 2 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  *((void *)&v50 + 1) = 0;
  uint64_t v49 = &unk_1F0A472D0;
  *(void *)&long long v50 = *(void *)(v42 + 8);
  DWORD2(v50) = v43;
  *(void *)&long long v51 = *(void *)(v42 + 24);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v49, v17, 1.0, v14);
  uint64_t v44 = *((void *)this + 90) + 32 * v15;
  uint64_t v45 = *(int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
  *((void *)&v50 + 1) = 0;
  uint64_t v49 = &unk_1F0A472D0;
  *(void *)&long long v50 = *(void *)(v44 + 8) + 8 * v45;
  DWORD2(v50) = v45;
  *(void *)&long long v51 = *(void *)(v44 + 24);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v49, v27, 1.0, v14);
  unsigned int v52 = &unk_1F0A472A0;
  long long v53 = 0u;
  long long v54 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  uint64_t v55 = &unk_1F0A472A0;
  long long v56 = 0u;
  long long v57 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
}

void sub_1B21C5408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _OWORD *a11, uint64_t a12, _OWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  a24 = a10;
  *a11 = 0u;
  a11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a24);
  a29 = a12;
  *a13 = 0u;
  a13[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a29);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(kaldi::nnet1::GatedRecurrentUnit *this)
{
  if (!*((unsigned char *)this + 640))
  {
    int v2 = *((_DWORD *)this + 39);
    int v3 = *((_DWORD *)this + 20);
    if (v3 > 1) {
      uint64_t v4 = (v3 + 1);
    }
    else {
      uint64_t v4 = 1;
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 81, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 84, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 87, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 90, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 93, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 96, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 99, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 102, (int)v4);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      unsigned int v6 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 81) + 48 * v5), (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 8), 0, 0);
        uint64_t v7 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 84) + 48 * v5), (2 * v7), v7, 0, 0);
        uint64_t v8 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 87) + 48 * v5), v8, v8, 0, 0);
        kaldi::CuVector<float>::Resize(*((void *)this + 90) + 32 * v5, (3 * *(_DWORD *)&v6[*(void *)(*(void *)this - 24)]), 0);
        if ((v2 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 93) + 48 * v5), (3 * *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 12)), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 8), 1, 0);
          uint64_t v9 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 96) + 48 * v5), (2 * v9), v9, 1, 0);
          uint64_t v10 = *(unsigned int *)&v6[*(void *)(*(void *)this - 24)];
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 99) + 48 * v5), v10, v10, 1, 0);
          kaldi::CuVector<float>::Resize(*((void *)this + 102) + 32 * v5, (3 * *(_DWORD *)&v6[*(void *)(*(void *)this - 24)]), 1);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 93) + 48 * v5, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 96) + 48 * v5, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((void *)this + 99) + 48 * v5, 1.0);
            kaldi::CuVectorBase<float>::Set(*((void *)this + 102) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    *((unsigned char *)this + 640) = 1;
    if (kaldi::g_kaldi_verbose_level > 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16, 2);
      signed int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Allocated memory for the gradients: ", 36);
      (*(void (**)(void **__return_ptr, kaldi::nnet1::GatedRecurrentUnit *))(*(void *)this + 240))(__p, this);
      if ((v15 & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        uint64_t v13 = v15;
      }
      else {
        uint64_t v13 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16);
    }
  }
}

void sub_1B21C5830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, int a3)
{
  float v4 = *((float *)this + 14);
  float v5 = *((float *)this + 16);
  float v6 = *((float *)this + 17);
  *((void *)this + 24) = a2;
  *((void *)this + 30) = a2;
  *((void *)this + 36) = a2;
  *((void *)this + 41) = a2;
  uint64_t v7 = *(void *)this;
  if (a3 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80);
  }
  if (*(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80) == 1) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *((void *)this + 81) + 48 * v9;
  *(void *)(v11 + 32) = a2;
  *(void *)(*((void *)this + 84) + 48 * v9 + 32) = a2;
  *(void *)(*((void *)this + 87) + 48 * v9 + 32) = a2;
  *(void *)(*((void *)this + 90) + 32 * v9 + 24) = a2;
  *(void *)(*((void *)this + 93) + 48 * v9 + 32) = a2;
  *(void *)(*((void *)this + 96) + 48 * v9 + 32) = a2;
  *(void *)(*((void *)this + 99) + 48 * v9 + 32) = a2;
  *(void *)(*((void *)this + 102) + 32 * v9 + 24) = a2;
  uint64_t v12 = (char *)this + 80;
  if (v9 == *((_DWORD *)this + 20))
  {
    kaldi::CuMatrixBase<float>::SetZero(v11);
    kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 84) + 48 * v10);
    kaldi::CuMatrixBase<float>::SetZero(*((void *)this + 87) + 48 * v10);
    kaldi::CuVectorBase<float>::SetZero(*((void *)this + 90) + 32 * v10);
    uint64_t v7 = *(void *)this;
    if (*(int *)&v12[*(void *)(*(void *)this - 24)] >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 81) + 48 * v10, *((void *)this + 81) + v14, 111, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 84) + 48 * v10, *((void *)this + 84) + v14, 111, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((void *)this + 87) + 48 * v10, *((void *)this + 87) + v14, 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((void *)this + 90) + 32 * v10, *((void *)this + 90) + v13, 1.0, 1.0);
        ++v15;
        uint64_t v7 = *(void *)this;
        v14 += 48;
        v13 += 32;
      }
      while (v15 < *(int *)&v12[*(void *)(*(void *)this - 24)]);
    }
    uint64_t v16 = (int *)*((void *)this + 77);
    v16[v10] = 0;
    if ((int)v10 >= 1)
    {
      int v17 = 0;
      uint64_t v18 = v10;
      uint64_t v19 = v16;
      do
      {
        int v20 = *v19++;
        v17 += v20;
        v16[v10] = v17;
        --v18;
      }
      while (v18);
    }
  }
  if (*((unsigned char *)this + 84)) {
    float v4 = v4 / (float)*(int *)(*((void *)this + 77) + 4 * v10);
  }
  if (*((float *)this + 38) >= 0.0) {
    (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, uint64_t))(v7 + 320))(this, v10);
  }
  if (v5 != 0.0)
  {
    float v21 = -(float)(v4 * v5);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, v21 * (float)*(int *)(*((void *)this + 77) + 4 * v10), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)this + 208, 111, v21 * (float)*(int *)(*((void *)this + 77) + 4 * v10), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)this + 256, 111, v21 * (float)*(int *)(*((void *)this + 77) + 4 * v10), 1.0);
    kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)this + 304, v21, 1.0);
  }
  uint64_t v22 = *((void *)this + 81);
  if (v6 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 160, v22 + 48 * v10, (float)(v6 * v4) * (float)*(int *)(*((void *)this + 77) + 4 * v10), v4);
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 208, *((void *)this + 84) + 48 * v10, (float)(v6 * v4) * (float)*(int *)(*((void *)this + 77) + 4 * v10), v4);
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 256, *((void *)this + 87) + 48 * v10, (float)(v6 * v4) * (float)*(int *)(*((void *)this + 77) + 4 * v10), v4);
    uint64_t v22 = *((void *)this + 81);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v22 + 48 * v10, 111, -(float)(v4 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, *((void *)this + 84) + 48 * v10, 111, -(float)(v4 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, *((void *)this + 87) + 48 * v10, 111, -(float)(v4 * *((float *)this + 152)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, *((void *)this + 90) + 32 * v10, -(float)(v4 * *((float *)this + 152)), 1.0);
  float v23 = *((float *)this + 153);
  if (v23 > 0.0)
  {
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 160, 1, v23);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 208, 1, *((float *)this + 153));
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 256, 1, *((float *)this + 153));
    kaldi::CuVectorBase<float>::ApplyMaxNorm((uint64_t)this + 304, *((float *)this + 153));
  }
  unsigned int v24 = (unsigned char *)*((void *)this + 77);
  if (v10 == *(_DWORD *)((char *)this + *(void *)(*(void *)this - 24) + 80))
  {
    uint64_t v25 = (unsigned char *)*((void *)this + 78);
    if (v24 != v25)
    {
      bzero(v24, ((v25 - v24 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v24[4 * v10] = 0;
  }
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, int a3)
{
}

void kaldi::nnet1::GatedRecurrentUnit::EnsureBuffers(kaldi::nnet1::GatedRecurrentUnit *this)
{
  if (!*((unsigned char *)this + 336))
  {
    unint64_t v2 = *((int *)this + 20);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 43, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 46, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 49, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 52, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 55, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 58, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 61, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*((void *)this + 1) + v3), *((unsigned int *)this + 24), *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 616), v2);
    *((unsigned char *)this + 336) = 1;
  }
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 640) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(void *result, int a2, float a3)
{
  uint64_t v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 640) = 0;
  return result;
}

void kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3)
{
  float v3 = a2;
  int v5 = *((_DWORD *)this + 39);
  if (v5 == 1)
  {
    if (a2 > 0.0)
    {
      uint64_t v11 = a3;
      if (*((unsigned char *)this + 84)) {
        float v3 = (float)*(int *)(*((void *)this + 77) + 4 * a3) * a2;
      }
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 81) + 48 * a3, v3);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 84) + 48 * v11, v3);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((void *)this + 87) + 48 * v11, v3);
      uint64_t v14 = *((void *)this + 90) + 32 * v11;
      kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v3);
    }
  }
  else if (v5 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      uint64_t v7 = a3;
      uint64_t v8 = 3 * a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 81) + 48 * a3, *((void *)this + 93) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 84) + 16 * v8, *((void *)this + 96) + 16 * v8, v3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((void *)this + 87) + 16 * v8, *((void *)this + 99) + 16 * v8, v3);
      uint64_t v9 = *((void *)this + 90) + 32 * v7;
      uint64_t v10 = *((void *)this + 102) + 32 * v7;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, v10, v3);
    }
  }
  else if (a2 > 0.0 && v5 == 2)
  {
    uint64_t v13 = a3;
    if (*((unsigned char *)this + 84)) {
      float v3 = (float)*(int *)(*((void *)this + 77) + 4 * a3) * a2;
    }
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 81) + 48 * a3, (int *)(*((void *)this + 93) + 48 * a3), v3);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 84) + 48 * v13, (int *)(*((void *)this + 96) + 48 * v13), v3);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((void *)this + 87) + 48 * v13, (int *)(*((void *)this + 99) + 48 * v13), v3);
    uint64_t v15 = *((void *)this + 90) + 32 * v13;
    uint64_t v16 = (void *)(*((void *)this + 102) + 32 * v13);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v15, v16, v3);
  }
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3)
{
}

float kaldi::nnet1::GatedRecurrentUnit::Check(kaldi::nnet1::GatedRecurrentUnit *this)
{
  int v1 = *((_DWORD *)this + 45);
  unint64_t v2 = (char *)this + *(void *)(*(void *)this - 24);
  int v3 = *((_DWORD *)v2 + 3);
  if (v1 != 3 * v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #rows = ", 22);
    int v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    float v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 44) != *((_DWORD *)v2 + 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #columns = ", 25);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " (same as input dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 57) != 2 * v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #rows = ", 31);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 56) != v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #columns = ", 34);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 69) != v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #rows = ", 37);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 68) != v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #columns = ", 40);
    uint64_t v15 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; expecting ", 12);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 80) != v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bias dim = ", 11);
    int v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; expecting ", 12);
    uint64_t v18 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 152) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 153) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  float result = *((float *)this + 38);
  if (result < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  return result;
}

int *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  uint64_t v7 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v7, 111);
}

void *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1);
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a4;
  uint64_t v9 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  unsigned int v10 = *(_DWORD *)(v8 + 16);
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v9;
  v13[0] = &unk_1F0A472D0;
  v13[2] = v10;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

void *kaldi::nnet1::GatedRecurrentUnit::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = (void *)(a1 + 840);
  uint64_t v6 = *(void *)(a1 + 840);
  if (v6 == *(void *)(a1 + 848))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 840), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 864), *(int *)(a1 + 80));
    uint64_t v6 = *(void *)(a1 + 840);
  }
  kaldi::CuVector<float>::Resize(v6 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  uint64_t v8 = (void *)(*v5 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v8, a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::HistoryStateSize(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this + *(void *)(*(void *)this - 24) + 12);
}

int *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(void *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v6 = (int *)(a1[1] + 48 * a3);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v6, a2, 111);
}

void *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(void *a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v8 = a1[1] + 48 * a4;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  uint64_t v10 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v10;
  v13[0] = &unk_1F0A472D0;
  v13[2] = v9;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(void *a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  *(void *)(a1[1] + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v8 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8))
      {
        uint64_t v9 = a1[1] + 48 * a4;
        uint64_t v10 = *(void *)(v9 + 8) + 4 * *(_DWORD *)(v9 + 24) * (int)v8;
        unsigned int v11 = *(_DWORD *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 32);
        v20[1] = v10;
        v20[0] = &unk_1F0A472D0;
        v20[2] = v11;
        v20[3] = v12;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          uint64_t v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        }
      }
      ++v8;
    }
    while (a2[1] > v8);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20, 3);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v16 = v19;
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20);
  }
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v23);
}

void sub_1B21C6C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(kaldi::nnet1::GatedRecurrentUnit *this)
{
  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *))(*(void *)this + 88))(this);
  for (uint64_t i = *((void *)this + 1); i != *((void *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
}

{
  uint64_t v1;
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
}

void sub_1B21C6D9C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40B7274482);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetType(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return 277;
}

void kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  unint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 888);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                           + *(void *)(*(void *)this - 24)));
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::nnet1::GatedRecurrentUnit::Copy((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                            + *(void *)(*(void *)this - 32)));
}

uint64_t virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetType(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return 277;
}

void virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 24)) = a2[3];
  uint64_t v6 = (void **)((char *)this + 864);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 840);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 816);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 792);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 768);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 744);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 720);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 696);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 672);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 648);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  int v5 = (void *)*((void *)this + 77);
  if (v5)
  {
    *((void *)this + 78) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void **)((char *)this + 584);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 560);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 536);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 512);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 488);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 464);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)((char *)this + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuVector<float>::~CuVector((void *)this + 38);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 256);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 208);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

kaldi::nnet1::GatedRecurrentUnit *kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, const kaldi::nnet1::GatedRecurrentUnit *a2)
{
  uint64_t v4 = (char *)a2 + *(void *)(*(void *)a2 - 24);
  *((void *)this + 111) = &unk_1F0A4FA88;
  uint64_t v5 = *((void *)v4 + 1);
  *((_WORD *)this + 452) = *((_WORD *)v4 + 8);
  *((void *)this + 112) = v5;
  *((void *)this + 114) = 0;
  *((void *)this + 116) = 0;
  *((void *)this + 115) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)this + 114, *((const void **)v4 + 3), *((void *)v4 + 4), (uint64_t)(*((void *)v4 + 4) - *((void *)v4 + 3)) >> 3);
  *((void *)this + 111) = &unk_1F0A4BA20;
  *((void *)this + 117) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 959) = *(_OWORD *)(v4 + 71);
  *((_OWORD *)this + 59) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A323A0, (uint64_t)a2);
  *(void *)this = off_1F0A4AF48;
  *((void *)this + 111) = off_1F0A4B1B0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 208, (char *)a2 + 208, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 256, (char *)a2 + 256, 111);
  kaldi::CuVector<float>::CuVector((void *)this + 38, (uint64_t)a2 + 304);
  *((_WORD *)this + 168) = *((_WORD *)a2 + 168);
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 43, *((void *)a2 + 43), *((void *)a2 + 44), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 44) - *((void *)a2 + 43)) >> 4));
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 46, *((void *)a2 + 46), *((void *)a2 + 47), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 47) - *((void *)a2 + 46)) >> 4));
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 51) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 49, *((void *)a2 + 49), *((void *)a2 + 50), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 50) - *((void *)a2 + 49)) >> 4));
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 52, *((void *)a2 + 52), *((void *)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 53) - *((void *)a2 + 52)) >> 4));
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 55, *((void *)a2 + 55), *((void *)a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 56) - *((void *)a2 + 55)) >> 4));
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 58, *((void *)a2 + 58), *((void *)a2 + 59), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 59) - *((void *)a2 + 58)) >> 4));
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 63) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 61, *((void *)a2 + 61), *((void *)a2 + 62), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 62) - *((void *)a2 + 61)) >> 4));
  *((void *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 64, *((void *)a2 + 64), *((void *)a2 + 65), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 65) - *((void *)a2 + 64)) >> 4));
  *((void *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 67, *((void *)a2 + 67), *((void *)a2 + 68), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 68) - *((void *)a2 + 67)) >> 4));
  *((void *)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 70, *((void *)a2 + 70), *((void *)a2 + 71), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 71) - *((void *)a2 + 70)) >> 4));
  *((void *)this + 75) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 73, *((void *)a2 + 73), *((void *)a2 + 74), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 74) - *((void *)a2 + 73)) >> 4));
  *((void *)this + 76) = *((void *)a2 + 76);
  *((void *)this + 77) = 0;
  *((void *)this + 79) = 0;
  *((void *)this + 78) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 77, *((const void **)a2 + 77), *((void *)a2 + 78), (uint64_t)(*((void *)a2 + 78) - *((void *)a2 + 77)) >> 2);
  *((unsigned char *)this + 640) = *((unsigned char *)a2 + 640);
  *((void *)this + 81) = 0;
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 81, *((void *)a2 + 81), *((void *)a2 + 82), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 82) - *((void *)a2 + 81)) >> 4));
  *((void *)this + 86) = 0;
  *((_OWORD *)this + 42) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 84, *((void *)a2 + 84), *((void *)a2 + 85), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 85) - *((void *)a2 + 84)) >> 4));
  *((void *)this + 89) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 87, *((void *)a2 + 87), *((void *)a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 88) - *((void *)a2 + 87)) >> 4));
  *((void *)this + 92) = 0;
  *((_OWORD *)this + 45) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 90, *((void *)a2 + 90), *((void *)a2 + 91), (uint64_t)(*((void *)a2 + 91) - *((void *)a2 + 90)) >> 5);
  *((void *)this + 95) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 93, *((void *)a2 + 93), *((void *)a2 + 94), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 94) - *((void *)a2 + 93)) >> 4));
  *((void *)this + 98) = 0;
  *((_OWORD *)this + 48) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 96, *((void *)a2 + 96), *((void *)a2 + 97), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 97) - *((void *)a2 + 96)) >> 4));
  *((void *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 99, *((void *)a2 + 99), *((void *)a2 + 100), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 100) - *((void *)a2 + 99)) >> 4));
  *((void *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 102, *((void *)a2 + 102), *((void *)a2 + 103), (uint64_t)(*((void *)a2 + 103) - *((void *)a2 + 102)) >> 5);
  *((void *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 105, *((void *)a2 + 105), *((void *)a2 + 106), (uint64_t)(*((void *)a2 + 106) - *((void *)a2 + 105)) >> 5);
  *((void *)this + 110) = 0;
  *((_OWORD *)this + 54) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 108, *((void *)a2 + 108), *((void *)a2 + 109), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 109) - *((void *)a2 + 108)) >> 4));
  return this;
}

void sub_1B21C7680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  *(void *)(v33 - 96) = v28;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v30;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v31;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v24;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = v29;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  uint64_t v35 = *a11;
  if (*a11)
  {
    *((void *)v25 + 78) = v35;
    operator delete(v35);
  }
  *(void *)(v33 - 96) = v32;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  *(void *)(v33 - 96) = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 96));
  kaldi::CuVector<float>::~CuVector(a22);
  kaldi::CuMatrix<float>::~CuMatrix(a23);
  kaldi::CuMatrix<float>::~CuMatrix(a24);
  kaldi::CuMatrix<float>::~CuMatrix(*(void *)(v33 - 112));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v25, (uint64_t *)&off_1F0A323A0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(*(kaldi::nnet1::UpdatableComponent **)(v33 - 104));
  _Unwind_Resume(a1);
}

void sub_1B21C7818()
{
}

void sub_1B21C7820()
{
}

void sub_1B21C7828()
{
}

void sub_1B21C7830()
{
}

void sub_1B21C7838()
{
}

void sub_1B21C7840()
{
}

void sub_1B21C7848()
{
}

void sub_1B21C7850()
{
}

void sub_1B21C7858()
{
}

void sub_1B21C7860()
{
}

void sub_1B21C7868()
{
}

void sub_1B21C7870()
{
}

void sub_1B21C7878()
{
}

void sub_1B21C7880()
{
}

void sub_1B21C7888()
{
}

void sub_1B21C7890()
{
}

void sub_1B21C7898()
{
}

void sub_1B21C78A0()
{
}

void sub_1B21C78A8()
{
}

void sub_1B21C78B0()
{
}

void sub_1B21C78B8()
{
}

void sub_1B21C78C0()
{
}

void quasar::AppleFileCoordinator::AppleFileCoordinator(quasar::AppleFileCoordinator *this)
{
  *(void *)this = &unk_1F0A54EE8;
  operator new();
}

void sub_1B21C7958(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void quasar::AppleFileCoordinator::~AppleFileCoordinator(id **this)
{
  *this = (id *)&unk_1F0A54EE8;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  uint64_t vars8;

  *this = (id *)&unk_1F0A54EE8;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

BOOL quasar::AppleFileCoordinator::coordinateReadingItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = **(void ***)(a1 + 8);
  uint64_t v5 = (void *)MEMORY[0x1E4F1CB10];
  if (*((char *)a2 + 23) >= 0) {
    long long v6 = a2;
  }
  else {
    long long v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  unint64_t v8 = [v5 fileURLWithPath:v7];
  int v15[4] = a3;
  id v16 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = ___ZN6quasar20AppleFileCoordinator21coordinateReadingItemERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvS9_EEE_block_invoke;
  void v15[3] = &__block_descriptor_40_e15_v16__0__NSURL_8l;
  [v4 coordinateReadingItemAtURL:v8 options:1 error:&v16 byAccessor:v15];
  id v9 = v16;

  if (v9 && quasar::gLogLevel >= 1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    id v10 = [v9 description];
    unsigned int v11 = (const char *)[v10 UTF8String];
    size_t v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v11, v12);

    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
  }

  return v9 == 0;
}

void sub_1B21C7BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);

  _Unwind_Resume(a1);
}

void ___ZN6quasar20AppleFileCoordinator21coordinateReadingItemERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvS9_EEE_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [v3 path];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v5 UTF8String]);
  uint64_t v6 = *(void *)(v4 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 48))(v6, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B21C7CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

BOOL quasar::AppleFileCoordinator::coordinateWritingItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = **(void ***)(a1 + 8);
  id v5 = (void *)MEMORY[0x1E4F1CB10];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  char v8 = [v5 fileURLWithPath:v7];
  int v15[4] = a3;
  id v16 = 0;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 3221225472;
  v15[2] = ___ZN6quasar20AppleFileCoordinator21coordinateWritingItemERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvS9_EEE_block_invoke;
  void v15[3] = &__block_descriptor_40_e15_v16__0__NSURL_8l;
  [v4 coordinateWritingItemAtURL:v8 options:4 error:&v16 byAccessor:v15];
  id v9 = v16;

  if (v9 && quasar::gLogLevel >= 1)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    id v10 = [v9 description];
    unsigned int v11 = (const char *)[v10 UTF8String];
    size_t v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v11, v12);

    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v14);
  }

  return v9 == 0;
}

void sub_1B21C7E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);

  _Unwind_Resume(a1);
}

void ___ZN6quasar20AppleFileCoordinator21coordinateWritingItemERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8functionIFvS9_EEE_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = [v3 path];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v5 UTF8String]);
  uint64_t v6 = *(void *)(v4 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 48))(v6, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B21C7F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void quasar::AppleLanguageRecognizer::AppleLanguageRecognizer(quasar::AppleLanguageRecognizer *this)
{
  *(void *)this = &unk_1F0A568D0;
  operator new();
}

void sub_1B21C8038(_Unwind_Exception *a1)
{
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](v2, 0);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void quasar::AppleLanguageRecognizer::~AppleLanguageRecognizer(id **this)
{
  *this = (id *)&unk_1F0A568D0;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  uint64_t vars8;

  *this = (id *)&unk_1F0A568D0;
  std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](this + 1, 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::AppleLanguageRecognizer::processString(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = **(void ***)(a1 + 8);
  if (*((char *)a2 + 23) >= 0) {
    id v3 = a2;
  }
  else {
    id v3 = (uint64_t *)*a2;
  }
  id v4 = [NSString stringWithUTF8String:v3];
  objc_msgSend(v2, "processString:");
}

void sub_1B21C8198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void quasar::AppleLanguageRecognizer::dominantLanguage(id **this@<X0>, void *a2@<X8>)
{
  id v5 = [*this[1] dominantLanguage];
  uint64_t v3 = [v5 UTF8String];
  if (v3) {
    id v4 = (char *)v3;
  }
  else {
    id v4 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

void sub_1B21C821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t quasar::AppleLanguageRecognizer::reset(id **this)
{
  return [*this[1] reset];
}

uint64_t quasar::appleCreateDirectories(uint64_t a1, int a2)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) >= 4)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Unknown protection class: ", 26);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v23);
    }
    return 0;
  }
  else
  {
    id v3 = **((id **)&unk_1E5FFFC58 + a2 - 1);
    id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v5 = (void *)MEMORY[0x1E4F1CB10];
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = *(void *)a1;
    }
    uint64_t v7 = [NSString stringWithUTF8String:v6];
    char v8 = [v5 fileURLWithPath:v7];
    uint64_t v40 = *MEMORY[0x1E4F28370];
    v41[0] = v3;
    id v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v41 forKeys:&v40 count:1];
    id v22 = 0;
    uint64_t v10 = [v4 createDirectoryAtURL:v8 withIntermediateDirectories:1 attributes:v9 error:&v22];
    id v11 = v22;

    if (v11 && quasar::gLogLevel >= 1)
    {
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
      size_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Failed to set protection class for path: ", 41);
      int v13 = *(char *)(a1 + 23);
      if (v13 >= 0) {
        uint64_t v14 = a1;
      }
      else {
        uint64_t v14 = *(void *)a1;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v15 = *(void *)(a1 + 8);
      }
      id v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" error: ", 8);
      id v18 = [v11 description];
      unsigned __int8 v19 = (const char *)[v18 UTF8String];
      size_t v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);

      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v23);
    }
  }
  return v10;
}

void sub_1B21C84E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id **std::unique_ptr<quasar::AppleFileCoordinatorData>::reset[abi:ne180100](id **result, id *a2)
{
  unint64_t v2 = *result;
  *float result = a2;
  if (v2)
  {

    JUMPOUT(0x1B3EA8670);
  }
  return result;
}

void sub_1B21C8774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B21C87D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)_EAREmojiRecognition;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1B21C8AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  a10 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1B21C8C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1B21C8D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B21C8EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1B21C9388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1B21C9538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1B21C96D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void kaldi::quasar::LoadClassifier(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, ".xgb.json");
  size_t v2 = *(unsigned __int8 *)(a1 + 23);
  size_t v3 = *(void *)(a1 + 8);
  if ((v2 & 0x80u) == 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v4 = *(void *)(a1 + 8);
  }
  unsigned __int8 v5 = v45;
  if ((v45 & 0x80u) == 0) {
    size_t v6 = v45;
  }
  else {
    size_t v6 = v44;
  }
  BOOL v8 = v4 >= v6;
  size_t v7 = v4 - v6;
  if (!v8) {
    goto LABEL_35;
  }
  if ((v2 & 0x80) != 0)
  {
    if (v6 == -1 || v3 < v7) {
LABEL_113:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v3 - v7 >= v6) {
      size_t v10 = v6;
    }
    else {
      size_t v10 = v3 - v7;
    }
    uint64_t v11 = *(void *)a1;
  }
  else
  {
    BOOL v8 = v6 != -1 && v2 >= v7;
    if (!v8) {
      goto LABEL_113;
    }
    size_t v9 = v2 - v7;
    if (v9 >= v6) {
      size_t v10 = v6;
    }
    else {
      size_t v10 = v9;
    }
    uint64_t v11 = a1;
  }
  if ((v45 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  int v14 = memcmp((const void *)(v11 + v7), p_p, v10);
  if (v10 == v6 && v14 == 0)
  {
    BOOL v22 = 1;
    if ((v5 & 0x80) == 0)
    {
LABEL_46:
      if (v22)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Compile with USE_XGBOOST=ON to use XGBoost models");
        goto LABEL_112;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, ".mlmodelc");
      size_t v23 = *(unsigned __int8 *)(a1 + 23);
      size_t v24 = *(void *)(a1 + 8);
      if ((v23 & 0x80u) == 0) {
        size_t v25 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v25 = *(void *)(a1 + 8);
      }
      int v26 = (char)v45;
      if ((v45 & 0x80u) == 0) {
        size_t v27 = v45;
      }
      else {
        size_t v27 = v44;
      }
      BOOL v8 = v25 >= v27;
      size_t v28 = v25 - v27;
      if (!v8)
      {
        BOOL v29 = 0;
        if (((char)v45 & 0x80000000) == 0)
        {
LABEL_56:
          if (v29) {
            operator new();
          }
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No Classifier for model file: ", 30);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v42, a1);
LABEL_112:
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
LABEL_55:
        operator delete(__p);
        goto LABEL_56;
      }
      if ((v23 & 0x80) != 0)
      {
        if (v27 == -1 || v24 < v28) {
LABEL_114:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        if (v24 - v28 >= v27) {
          size_t v31 = v27;
        }
        else {
          size_t v31 = v24 - v28;
        }
        uint64_t v32 = *(void *)a1;
      }
      else
      {
        if (v27 == -1) {
          goto LABEL_114;
        }
        BOOL v8 = v23 >= v28;
        size_t v30 = v23 - v28;
        if (!v8) {
          goto LABEL_114;
        }
        if (v30 >= v27) {
          size_t v31 = v27;
        }
        else {
          size_t v31 = v30;
        }
        uint64_t v32 = a1;
      }
      if ((v45 & 0x80u) == 0) {
        long long v36 = &__p;
      }
      else {
        long long v36 = __p;
      }
      int v37 = memcmp((const void *)(v32 + v28), v36, v31);
      BOOL v29 = v31 == v27 && v37 == 0;
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_56;
      }
      goto LABEL_55;
    }
LABEL_45:
    operator delete(__p);
    goto LABEL_46;
  }
LABEL_35:
  std::string::basic_string[abi:ne180100]<0>(v46, ".xgb.ubj");
  unint64_t v16 = *(unsigned __int8 *)(a1 + 23);
  unint64_t v17 = *(void *)(a1 + 8);
  if ((v16 & 0x80u) == 0) {
    unint64_t v18 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    unint64_t v18 = *(void *)(a1 + 8);
  }
  int v19 = (char)v47;
  if ((v47 & 0x80u) == 0) {
    size_t v20 = v47;
  }
  else {
    size_t v20 = (size_t)v46[1];
  }
  BOOL v8 = v18 >= v20;
  unint64_t v21 = v18 - v20;
  if (!v8)
  {
    BOOL v22 = 0;
    if (((char)v47 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if ((v16 & 0x80) != 0)
  {
    if (v20 == -1 || v17 < v21) {
LABEL_115:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v17 - v21 >= v20) {
      size_t v34 = v20;
    }
    else {
      size_t v34 = v17 - v21;
    }
    uint64_t v35 = *(void *)a1;
  }
  else
  {
    if (v20 == -1) {
      goto LABEL_115;
    }
    BOOL v8 = v16 >= v21;
    size_t v33 = v16 - v21;
    if (!v8) {
      goto LABEL_115;
    }
    if (v33 >= v20) {
      size_t v34 = v20;
    }
    else {
      size_t v34 = v33;
    }
    uint64_t v35 = a1;
  }
  if ((v47 & 0x80u) == 0) {
    long long v39 = v46;
  }
  else {
    long long v39 = (void **)v46[0];
  }
  int v40 = memcmp((const void *)(v35 + v21), v39, v34);
  BOOL v22 = v34 == v20 && v40 == 0;
  if ((v19 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v45 & 0x80) == 0) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_43:
  operator delete(v46[0]);
  goto LABEL_44;
}

void sub_1B21C9AB8(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1B21C9ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::OnlineDecodableIdenticalMatrix::~OnlineDecodableIdenticalMatrix(kaldi::OnlineDecodableIdenticalMatrix *this)
{
  *(void *)this = &unk_1F0A48350;
  kaldi::Vector<float>::Destroy((uint64_t)this + 24);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::OnlineDecodableIdenticalMatrix::~OnlineDecodableIdenticalMatrix(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::OnlineDecodableMatrixScaled::~OnlineDecodableMatrixScaled(kaldi::OnlineDecodableMatrixScaled *this)
{
  *(void *)this = &unk_1F0A48250;
  kaldi::Vector<float>::Destroy((uint64_t)this + 56);
  size_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::OnlineDecodableMatrixScaled::~OnlineDecodableMatrixScaled(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::OnlineDecodableMatrixScaledMapped::~OnlineDecodableMatrixScaledMapped(kaldi::OnlineDecodableMatrixScaledMapped *this)
{
  *(void *)this = &unk_1F0A48488;
  kaldi::Vector<float>::Destroy((uint64_t)this + 96);
  kaldi::Vector<float>::Destroy((uint64_t)this + 72);
  kaldi::Vector<float>::Destroy((uint64_t)this + 40);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::OnlineDecodableMatrixScaledMapped::~OnlineDecodableMatrixScaledMapped(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::OnlineDecodableMatrixScaledMappedTm::~OnlineDecodableMatrixScaledMappedTm(kaldi::OnlineDecodableMatrixScaledMappedTm *this)
{
  kaldi::OnlineDecodableMatrixScaledMapped::~OnlineDecodableMatrixScaledMapped(this);
  JUMPOUT(0x1B3EA8670);
}

BOOL kaldi::OnlineDecodableNnet1Lazy::ProcessBatch(kaldi::OnlineDecodableNnet1Lazy *this, int a2)
{
  int v4 = *((_DWORD *)this + 17);
  if (v4 == -1)
  {
    int v4 = 0;
    *((_DWORD *)this + 17) = 0;
  }
  *((_DWORD *)this + 17) = v4 + *((_DWORD *)this + 28);
  *((_DWORD *)this + 26) += *((_DWORD *)this + 27);
  kaldi::OnlineFeatureMatrix::GetCurrentBatch(*((void *)this + 5), (int32x2_t *)this + 18);
  int CurrentBatchOffset = kaldi::OnlineFeatureMatrix::GetCurrentBatchOffset(*((kaldi::OnlineFeatureMatrix **)this + 5));
  int v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)this + 144) + CurrentBatchOffset;
  if (*((unsigned char *)this + 184))
  {
    int v7 = *((_DWORD *)this + 12);
    if (CurrentBatchOffset % v7) {
      int v8 = v7 + CurrentBatchOffset - CurrentBatchOffset % v7;
    }
    else {
      int v8 = CurrentBatchOffset;
    }
    int v9 = v6 % v7;
    int v10 = v7 + v6 - v6 % v7;
    if (v9) {
      int v6 = v10;
    }
    int v11 = v8 - CurrentBatchOffset;
    int CurrentBatchOffset = v8;
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v12 = (v6 - CurrentBatchOffset);
  *((_DWORD *)this + 47) = v12;
  if (CurrentBatchOffset > a2 || v6 <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Did not get correct batch [", 27);
    long long v54 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
    uint64_t v55 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") for frame ", 12);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
  }
  int v14 = *((_DWORD *)this + 12);
  uint64_t v15 = (char *)this + 192;
  uint64_t v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)this + 144);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 24, v12, v16, 1, 0);
  int v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)this + 144);
  uint64_t v18 = *((void *)this + 25);
  uint64_t v19 = *((void *)this + 28);
  DWORD2(v58) = *((_DWORD *)this + 52);
  HIDWORD(v58) = v17 - v11;
  *(void *)&long long v59 = *((void *)this + 27);
  *((void *)&v59 + 1) = v19;
  int32x2_t v57 = (int32x2_t)&unk_1F0A472A0;
  *(void *)&long long v58 = v18;
  int v20 = kaldi::MatrixBase<float>::NumRows((uint64_t)this + 144);
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v56, (uint64_t)this + 144, v11, v20 - v11, 0, *((_DWORD *)this + 38));
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v57, v56, 111);
  uint64_t v21 = (((int)v12 - 1) / v14 + 1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v56);
  int32x2_t v57 = (int32x2_t)&unk_1F0A472A0;
  long long v58 = 0u;
  long long v59 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v57);
  kaldi::CuMatrixBase<float>::SetStride((uint64_t)this + 192, *((_DWORD *)this + 12) * *((_DWORD *)this + 54));
  kaldi::Matrix<float>::Resize((int32x2_t *)this + 46, *(unsigned int *)(*((void *)this + 1) + 240), *((unsigned int *)this + 47), 0, 0);
  unint64_t v22 = *(int *)(*((void *)this + 1) + 240);
  v57.i8[0] = 0;
  std::vector<BOOL>::assign((uint64_t)this + 408, v22, &v57);
  uint64_t v23 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 3) + 176))(*((void *)this + 3), 1);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 36, v21, v23, 0, 0);
  kaldi::CuVector<float>::Resize((uint64_t)this + 336, v21, 0);
  size_t v24 = (uint64_t *)*((void *)this + 2);
  if (v24)
  {
    kaldi::nnet1::Nnet::Feedforward(v24, (uint64_t)this + 192, (int32x2_t *)this + 30, -1, 0);
    uint64_t v15 = (char *)this + 240;
  }
  (*(void (**)(void, char *, char *, uint64_t))(**((void **)this + 3) + 96))(*((void *)this + 3), v15, (char *)this + 288, 1);
  uint64_t v25 = *((void *)this + 62);
  if (v25)
  {
    uint64_t v26 = *((unsigned int *)this + 77);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, void))(*(void *)v25 + 176))(v25, 0);
    kaldi::CuMatrix<float>::CuMatrix(&v57, v26, v27, 0, 0, 0);
    std::deque<kaldi::CuMatrix<float>>::push_back((void *)this + 64, (uint64_t)&v57);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v57);
    if (*((unsigned char *)this + 64))
    {
      size_t v28 = *(void (**)(void))(**((void **)this + 62) + 96);
    }
    else
    {
      if (*((void *)this + 54) && *((unsigned char *)this + 65))
      {
        uint64_t v29 = *((unsigned int *)this + 77);
        uint64_t v30 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 62) + 176))(*((void *)this + 62), 1);
        kaldi::CuMatrix<float>::CuMatrix(&v57, v29, v30, 0, 0, 0);
        (*(void (**)(void, char *, int32x2_t *, uint64_t))(**((void **)this + 62) + 96))(*((void *)this + 62), v15, &v57, 1);
        unint64_t v31 = *((void *)this + 69) + *((void *)this + 68) - 1;
        (*(void (**)(void, int32x2_t *, unint64_t))(**((void **)this + 62) + 144))(*((void *)this + 62), &v57, *(void *)(*((void *)this + 65) + 8 * (v31 / 0x55)) + 48 * (v31 % 0x55));
        uint64_t v32 = HIDWORD(v58);
        uint64_t v33 = (*(uint64_t (**)(void))(**((void **)this + 54) + 40))(*((void *)this + 54));
        kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 55, v32, v33, 0, 0);
        (*(void (**)(void, int32x2_t *, char *))(**((void **)this + 54) + 16))(*((void *)this + 54), &v57, (char *)this + 440);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v57);
        goto LABEL_25;
      }
      size_t v28 = *(void (**)(void))(**((void **)this + 62) + 96);
    }
    v28();
  }
LABEL_25:
  if (*((float *)this + 14) == 0.0)
  {
    *((_DWORD *)this + 28) = *((_DWORD *)this + 47);
  }
  else
  {
    long long v58 = 0u;
    long long v59 = 0u;
    int32x2_t v57 = (int32x2_t)&unk_1F0A51768;
    char v60 = 0;
    (*(void (**)(void, char *, int32x2_t *))(**((void **)this + 3) + 144))(*((void *)this + 3), (char *)this + 288, &v57);
    kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow((uint64_t)&v57, (uint64_t)&v57);
    LOBYTE(v56[0]) = 1;
    std::vector<BOOL>::assign((uint64_t)this + 80, SHIDWORD(v58), v56);
    uint64_t v35 = (void **)((char *)this + 120);
    size_t v34 = (char *)*((void *)this + 15);
    *((void *)this + 16) = v34;
    int v36 = HIDWORD(v58);
    if (SHIDWORD(v58) < 1)
    {
      long long v48 = v34;
    }
    else
    {
      unint64_t v37 = 0;
      long long v38 = (void *)((char *)this + 136);
      do
      {
        if (*(float *)(v58 + 4 * (int)v59 * (int)v37 + 4 * *((int *)this + 15)) < *((float *)this + 14))
        {
          *(void *)(*((void *)this + 10) + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v37);
          if ((unint64_t)v34 >= *v38)
          {
            int v40 = (char *)*v35;
            uint64_t v41 = (v34 - (unsigned char *)*v35) >> 2;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v43 = *v38 - (void)v40;
            if (v43 >> 1 > v42) {
              unint64_t v42 = v43 >> 1;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44)
            {
              unsigned __int8 v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 136, v44);
              int v40 = (char *)*((void *)this + 15);
              size_t v34 = (char *)*((void *)this + 16);
            }
            else
            {
              unsigned __int8 v45 = 0;
            }
            int v46 = &v45[4 * v41];
            *(_DWORD *)int v46 = v37;
            long long v39 = v46 + 4;
            while (v34 != v40)
            {
              int v47 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            *((void *)this + 15) = v46;
            *((void *)this + 16) = v39;
            *((void *)this + 17) = &v45[4 * v44];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            *(_DWORD *)size_t v34 = v37;
            long long v39 = v34 + 4;
          }
          *((void *)this + 16) = v39;
          int v36 = HIDWORD(v58);
          size_t v34 = v39;
        }
        ++v37;
      }
      while ((uint64_t)v37 < v36);
      long long v48 = (char *)*v35;
    }
    unint64_t v49 = (unint64_t)(v34 - v48) >> 2;
    *((_DWORD *)this + 27) = *((_DWORD *)this + 47) - v49;
    *((_DWORD *)this + 28) = v49;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v57);
  }
  uint64_t v50 = *((void *)this + 54);
  if (v50 && !*((unsigned char *)this + 65))
  {
    uint64_t v51 = *((unsigned int *)this + 77);
    uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 40))(v50);
    kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 55, v51, v52, 0, 0);
    (*(void (**)(void, char *, char *))(**((void **)this + 54) + 16))(*((void *)this + 54), (char *)this + 288, (char *)this + 440);
  }
  return *((_DWORD *)this + 28) > 0;
}

float kaldi::OnlineDecodableNnet1Lazy::LogLikelihood(kaldi::OnlineDecodableNnet1Lazy *this, uint64_t a2, int a3)
{
  int v5 = *((_DWORD *)this + 17);
  if (v5 > (int)a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Request for expired frame (", 27);
    size_t v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"): current frame offset is ", 27);
    std::ostream::operator<<();
    goto LABEL_41;
  }
  if (v5 != -1 && *((_DWORD *)this + 28) + v5 > (int)a2) {
    goto LABEL_21;
  }
  while (1)
  {
    signed int v7 = *((_DWORD *)this + 26) + a2 + *((_DWORD *)this + 27);
    if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 5), v7, 1)) {
      break;
    }
    if (kaldi::OnlineDecodableNnet1Lazy::ProcessBatch(this, v7)) {
      goto LABEL_21;
    }
  }
  if (*((float *)this + 14) == 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Request for invalid frame (", 27);
    uint64_t v35 = (void *)std::ostream::operator<<();
    int v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"): you need to check", 20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, " IsLastFrame, or, for frame zero, check that the input is valid.");
LABEL_41:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  *((_DWORD *)this + 17) = a2;
  *((_DWORD *)this + 26) = *((_DWORD *)this + 27) + *((_DWORD *)this + 26) - 1;
  uint64_t v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)this + 144);
  kaldi::Matrix<float>::Resize((int32x2_t *)this + 18, 1, v8, 0, 0);
  unint64_t v9 = *((void *)this + 17);
  *((_DWORD *)this + 47) = 1;
  *(void *)((char *)this + 108) = 0x100000000;
  int v10 = (int *)*((void *)this + 15);
  *((void *)this + 16) = v10;
  int v11 = *((_DWORD *)this + 77) - 1;
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v13 = v9 - (void)v10;
    uint64_t v14 = v13 >> 1;
    if ((unint64_t)(v13 >> 1) <= 1) {
      uint64_t v14 = 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 136, v15);
    int v17 = (char *)*((void *)this + 15);
    uint64_t v18 = (char *)*((void *)this + 16);
    int v20 = &v16[v19];
    _DWORD *v16 = v11;
    uint64_t v12 = v16 + 1;
    while (v18 != v17)
    {
      int v21 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--uint64_t v16 = v21;
    }
    *((void *)this + 15) = v16;
    *((void *)this + 16) = v12;
    *((void *)this + 17) = v20;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *int v10 = v11;
    uint64_t v12 = v10 + 1;
  }
  *((void *)this + 16) = v12;
LABEL_21:
  int v22 = a2 - *((_DWORD *)this + 17);
  uint64_t v23 = *((void *)this + 15);
  if (v23 != *((void *)this + 16)) {
    int v22 = *(_DWORD *)(v23 + 4 * v22);
  }
  size_t v24 = (kaldi::TransitionModel *)*((void *)this + 1);
  unint64_t v25 = *(int *)(*((void *)v24 + 12) + 4 * a3);
  if (*((_DWORD *)this + 142) == -1 && *((void *)this + 77) == *((void *)this + 78))
  {
    float v26 = 0.0;
  }
  else
  {
    float v26 = 0.0;
    if (v25 == *((_DWORD *)this + 15))
    {
      int v27 = kaldi::TransitionModel::TransitionIdToPhone(v24, a3);
      if (!kaldi::SilencePhoneSet::isSilencePhone((kaldi::OnlineDecodableNnet1Lazy *)((char *)this + 568), v27)
        && (*(float (**)(kaldi::OnlineDecodableNnet1Lazy *, uint64_t))(*(void *)this + 64))(this, a2) > *((float *)this + 141))
      {
        float v26 = *((float *)this + 140);
      }
    }
  }
  if ((*(void *)(*((void *)this + 51) + 8 * (v25 >> 6)) & (1 << v25)) != 0)
  {
    size_t v28 = (void *)((char *)this + 368);
    uint64_t v29 = (_DWORD *)((char *)this + 384);
  }
  else
  {
    (*(void (**)(void, char *, unint64_t, char *))(**((void **)this + 3) + 128))(*((void *)this + 3), (char *)this + 288, v25, (char *)this + 336);
    uint64_t v30 = *((void *)this + 4);
    if (v30) {
      kaldi::nnet1::PdfPrior::SubtractLogpostForPdf(v30, v25, (uint64_t)this + 336);
    }
    *(void *)(*((void *)this + 51) + 8 * (v25 >> 6)) |= 1 << v25;
    size_t v28 = (void *)((char *)this + 368);
    if ((int)kaldi::MatrixBase<float>::NumCols((uint64_t)this + 368) >= 1)
    {
      uint64_t v31 = 0;
      do
      {
        *(_DWORD *)(*((void *)this + 46) + 4 * *((_DWORD *)this + 96) * (int)v25 + 4 * v31) = *(_DWORD *)(*((void *)this + 43) + 4 * ((int)v31 / *((_DWORD *)this + 12)));
        ++v31;
      }
      while (v31 < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)this + 368));
    }
    uint64_t v29 = (_DWORD *)((char *)this + 384);
    uint64_t v32 = *((void *)this + 46) + 4 * *((_DWORD *)this + 96) * (int)v25;
    uint64_t v37[2] = 0;
    v37[0] = v32;
    v37[1] = kaldi::MatrixBase<float>::NumCols((uint64_t)this + 368);
    kaldi::VectorBase<float>::Scale((uint64_t)v37, *((float *)this + 13));
  }
  return *(float *)(*v28 + 4 * *v29 * (int)v25 + 4 * v22) - v26;
}

BOOL kaldi::OnlineDecodableNnet1Lazy::SkipFrame(kaldi::OnlineDecodableNnet1Lazy *this, int a2)
{
  int v4 = *((_DWORD *)this + 17);
  if (v4 > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Request for expired frame (", 27);
    signed int v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): current frame offset is ", 27);
    std::ostream::operator<<();
    goto LABEL_16;
  }
  if (v4 == -1 || *((_DWORD *)this + 26) + v4 + *((_DWORD *)this + 47) <= a2)
  {
    if (kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 5), a2, 1))
    {
      kaldi::OnlineDecodableNnet1Lazy::ProcessBatch(this, a2);
      goto LABEL_6;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Request for invalid frame (", 27);
    uint64_t v8 = (void *)std::ostream::operator<<();
    unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"): you need to check", 20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " IsLastFrame, or, for frame zero, check that the input is valid.");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
LABEL_6:
  if (*((void *)this + 11))
  {
    uint64_t v5 = (1 << (a2 - (*((unsigned char *)this + 68) + *((unsigned char *)this + 104)))) & *(void *)(*((void *)this + 10)
                                                                                      + (((unint64_t)(a2 - (*((_DWORD *)this + 17) + *((_DWORD *)this + 26))) >> 3) & 0x1FFFFFFFFFFFFFF8));
    BOOL result = v5 != 0;
    if (*((_DWORD *)this + 19) >= a2) {
      return result;
    }
    *((_DWORD *)this + 19) = a2;
    if (v5)
    {
      ++*((_DWORD *)this + 18);
      return 1;
    }
  }
  else if (*((_DWORD *)this + 19) < a2)
  {
    BOOL result = 0;
    *((_DWORD *)this + 19) = a2;
    return result;
  }
  return 0;
}

double kaldi::OnlineDecodableNnet1Lazy::GetSilencePosterior(kaldi::OnlineDecodableNnet1Lazy *this, int a2)
{
  if (*((void *)this + 54))
  {
    int v2 = *((_DWORD *)this + 17);
    if (v2 > a2 || v2 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Could not calculate silence posterior for frame=", 48);
      signed int v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", current frame offset is=", 26);
      std::ostream::operator<<();
    }
    else
    {
      int v4 = (a2 - (v2 + *((_DWORD *)this + 26))) / *((_DWORD *)this + 12);
      if (v4 < *((_DWORD *)this + 115) && *((int *)this + 114) >= 1)
      {
        LODWORD(result) = *(_DWORD *)(*((void *)this + 56) + 4 * *((_DWORD *)this + 116) * v4);
        return result;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Silence posterior cache incorrectly calculated rows=", 52);
      int v6 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", cols=", 7);
      std::ostream::operator<<();
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return 0.0;
}

void kaldi::OnlineDecodableNnet1Lazy::GetLikelihoodsForRealignment(uint64_t a1, int a2, int32x2_t *a3)
{
  int v3 = *(_DWORD *)(a1 + 504);
  BOOL v4 = __OFSUB__(v3, a2);
  int v5 = v3 - a2;
  if (!((v5 < 0) ^ v4 | (v5 == 0)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Requested posteriors for realignment do no longer exist.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  uint64_t v6 = *(void *)(a1 + 520);
  if (*(void *)(a1 + 528) == v6
    || (unint64_t v7 = *(void *)(a1 + 544),
        uint64_t v8 = (unint64_t *)(v6 + 8 * (v7 / 0x55)),
        unint64_t v9 = *v8,
        unint64_t v10 = *v8 + 48 * (v7 % 0x55),
        unint64_t v11 = *(void *)(v6 + 8 * ((*(void *)(a1 + 552) + v7) / 0x55)) + 48 * ((*(void *)(a1 + 552) + v7) % 0x55),
        v10 == v11))
  {
    int v12 = 0;
  }
  else
  {
    int v12 = 0;
    do
    {
      unint64_t v13 = v10 + 48;
      if (v10 + 48 - v9 == 4080)
      {
        unint64_t v14 = v8[1];
        ++v8;
        unint64_t v9 = v14;
        unint64_t v13 = v14;
      }
      v12 += *(_DWORD *)(v10 + 20);
      unint64_t v10 = v13;
    }
    while (v13 != v11);
  }
  kaldi::OnlineDecodableNnet1Lazy::GetLikelihoodsForRealignment(a1, a2, (v5 + v12), a3);
}

void kaldi::OnlineDecodableNnet1Lazy::GetLikelihoodsForRealignment(uint64_t a1, int a2, uint64_t a3, int32x2_t *a4)
{
  uint64_t v5 = a3;
  int v6 = a2;
  if ((int)a3 >= 1 && !*(void *)(a1 + 552))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v36, "Realignment model posterior cache is empty, make sure that acoustic model for realignment is configured correctly");
    goto LABEL_29;
  }
  if (*(_DWORD *)(a1 + 504) > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v36, "Requested posteriors for realignment do no longer exist.");
LABEL_29:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v36);
  }
  uint64_t v8 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 496) + 176))(*(void *)(a1 + 496), 0);
  kaldi::CuMatrix<float>::Resize(a4, v5, v8, 0, 0);
  if (v5)
  {
    uint64_t v9 = *(void *)(a1 + 520);
    if (*(void *)(a1 + 528) != v9)
    {
      unint64_t v10 = *(void *)(a1 + 544);
      unint64_t v11 = *(void *)(v9 + 8 * (v10 / 0x55)) + 48 * (v10 % 0x55);
      unint64_t v12 = *(void *)(v9 + 8 * ((*(void *)(a1 + 552) + v10) / 0x55)) + 48 * ((*(void *)(a1 + 552) + v10) % 0x55);
      if (v11 != v12)
      {
        int v13 = 0;
        int v14 = *(_DWORD *)(a1 + 504);
        unint64_t v15 = (void *)(v9 + 8 * (v10 / 0x55));
        int v31 = v6;
        do
        {
          int v16 = *(_DWORD *)(v11 + 20);
          if (v16 + v14 <= v6)
          {
            v14 += v16;
          }
          else
          {
            uint64_t v32 = v15;
            if (v6 <= v14) {
              int v17 = 0;
            }
            else {
              int v17 = v6 - v14;
            }
            unsigned int v18 = v16 - v17;
            uint64_t v19 = v5;
            if ((int)(v18 + v13) <= (int)v5) {
              unsigned int v20 = v18;
            }
            else {
              unsigned int v20 = v5 - v13;
            }
            unsigned int v21 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 496) + 176))(*(void *)(a1 + 496), 0);
            __int32 v22 = a4[3].i32[0];
            int v23 = a4[3].i32[1] - v22 * v13;
            int32x2_t v24 = a4[4];
            *(void *)&long long v37 = *(void *)&a4[1] + 4 * v22 * v13;
            *((void *)&v37 + 1) = __PAIR64__(v20, v21);
            *(void *)&long long v38 = __PAIR64__(v23, v22);
            *((int32x2_t *)&v38 + 1) = v24;
            unsigned int v25 = *(_DWORD *)(v11 + 24);
            uint64_t v26 = *(void *)(v11 + 8) + 4 * (int)(v25 * v17);
            v24.i32[0] = *(_DWORD *)(v11 + 28) - v25 * v17;
            uint64_t v27 = *(void *)(v11 + 32);
            DWORD2(v34) = *(_DWORD *)(v11 + 16);
            HIDWORD(v34) = v20;
            *(void *)&long long v35 = __PAIR64__(v24.u32[0], v25);
            *((void *)&v35 + 1) = v27;
            int v36 = &unk_1F0A472A0;
            uint64_t v33 = &unk_1F0A472A0;
            *(void *)&long long v34 = v26;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v36, (uint64_t)&v33, 111);
            v13 += v20;
            uint64_t v33 = &unk_1F0A472A0;
            long long v34 = 0u;
            long long v35 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
            int v36 = &unk_1F0A472A0;
            long long v37 = 0u;
            long long v38 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v36);
            v14 += *(_DWORD *)(v11 + 20);
            uint64_t v5 = v19;
            int v6 = v31;
            unint64_t v15 = v32;
          }
          if (v13 >= (int)v5) {
            break;
          }
          v11 += 48;
          if (v11 - *v15 == 4080)
          {
            unint64_t v28 = v15[1];
            ++v15;
            unint64_t v11 = v28;
          }
        }
        while (v11 != v12);
      }
    }
    uint64_t v29 = *(void *)(a1 + 488);
    if (v29) {
      kaldi::nnet1::PdfPrior::SubtractOnLogpost(v29, (uint64_t)a4);
    }
    while (*(void *)(a1 + 552))
    {
      int v30 = *(_DWORD *)(*(void *)(*(void *)(a1 + 520) + 8 * (*(void *)(a1 + 544) / 0x55uLL))
                      + 48 * (*(void *)(a1 + 544) % 0x55uLL)
                      + 20)
          + *(_DWORD *)(a1 + 504);
      if (v30 > v6) {
        break;
      }
      *(_DWORD *)(a1 + 504) = v30;
      std::deque<kaldi::CuMatrix<float>>::pop_front((int64x2_t *)(a1 + 512));
    }
  }
}

void sub_1B21CB134(_Unwind_Exception *a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  *a3 = 0u;
  a3[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  *a4 = 0u;
  a4[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va1);
  _Unwind_Resume(a1);
}

float kaldi::OnlineDecodableMatrixScaled::LogLikelihood(kaldi::OnlineDecodableMatrixScaled *this, signed int a2, int a3)
{
  if (*((_DWORD *)this + 20) != a2) {
    kaldi::OnlineDecodableMatrixScaled::CacheFrame(this, a2);
  }
  return *((float *)this + 8) * *(float *)(*((void *)this + 7) + 4 * *(int *)(*((void *)this + 1) + 4 * a3));
}

BOOL kaldi::OnlineDecodableMatrixScaled::IsLastFrame(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[5], a2 + 1, 1);
}

BOOL kaldi::OnlineDecodableMatrixScaled::IsLastFrameNoBlocking(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[5], a2 + 1, 0);
}

uint64_t kaldi::OnlineDecodableMatrixScaled::NumIndices(kaldi::OnlineDecodableMatrixScaled *this)
{
  return (*((void *)this + 2) - *((void *)this + 1)) >> 2;
}

double kaldi::OnlineDecodableIdenticalMatrix::LogLikelihood(kaldi::OnlineDecodableIdenticalMatrix *this)
{
  return 0.0;
}

BOOL kaldi::OnlineDecodableIdenticalMatrix::IsLastFrame(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[1], a2 + 1, 1);
}

BOOL kaldi::OnlineDecodableIdenticalMatrix::IsLastFrameNoBlocking(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[1], a2 + 1, 0);
}

uint64_t kaldi::OnlineDecodableIdenticalMatrix::NumIndices(kaldi::OnlineDecodableIdenticalMatrix *this)
{
  return 0;
}

float kaldi::OnlineDecodableMatrixScaledMapped::LogLikelihood(kaldi::OnlineDecodableMatrixScaledMapped *this, signed int a2, int a3)
{
  if (*((_DWORD *)this + 31) != a2) {
    kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(this, a2);
  }
  if (*((unsigned char *)this + 28)) {
    float v5 = *(float *)(*((void *)this + 5) + 4 * a3);
  }
  else {
    float v5 = 0.0;
  }
  float v6 = *(float *)(*((void *)this + 9) + 4 * *(int *)(*(void *)(*((void *)this + 1) + 96) + 4 * a3)) + v5;
  if (v6 <= (float)-*((float *)this + 8)) {
    float v6 = -INFINITY;
  }
  return *((float *)this + 6) * v6;
}

BOOL kaldi::OnlineDecodableMatrixScaledMapped::IsLastFrame(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[2], a2 + 1, 1);
}

BOOL kaldi::OnlineDecodableMatrixScaledMapped::IsLastFrameNoBlocking(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[2], a2 + 1, 0);
}

uint64_t kaldi::OnlineDecodableMatrixScaledMapped::NumIndices(kaldi::OnlineDecodableMatrixScaledMapped *this)
{
  return ((*(void *)(*((void *)this + 1) + 152) - *(void *)(*((void *)this + 1) + 144)) >> 2)
       - 1;
}

uint64_t kaldi::OnlineDecodableMatrixScaledMapped::HasSilencePosterior(kaldi::OnlineDecodableMatrixScaledMapped *this)
{
  return *((unsigned __int8 *)this + 128);
}

double kaldi::OnlineDecodableMatrixScaledMapped::GetSilencePosterior(kaldi::OnlineDecodableMatrixScaledMapped *this, signed int a2)
{
  if (*((_DWORD *)this + 31) != a2)
  {
    kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(this, a2);
    if (*((_DWORD *)this + 31) != a2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "LogLikelihood() must be called before this method as silence posteriors are pre-computed there");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
    }
  }
  if (!*((unsigned char *)this + 128)) {
    return 0.0;
  }
  LODWORD(result) = *((_DWORD *)this + 30);
  return result;
}

uint64_t kaldi::OnlineDecodableMatrixScaledMapped::HasEndpointerScore(kaldi::OnlineDecodableMatrixScaledMapped *this)
{
  return *((unsigned __int8 *)this + 129);
}

float kaldi::OnlineDecodableMatrixScaledMapped::GetEndpointerScore(kaldi::OnlineDecodableMatrixScaledMapped *this, signed int a2, int a3)
{
  if (*((_DWORD *)this + 31) != a2)
  {
    kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(this, a2);
    if (*((_DWORD *)this + 31) != a2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "LogLikelihood() must be called before this method as endpointer scores are pre-computed there");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
    }
  }
  return *(float *)(*((void *)this + 12) + 4 * a3);
}

float kaldi::OnlineDecodableMatrixScaledMappedTm::LogLikelihood(kaldi::OnlineDecodableMatrixScaledMappedTm *this, signed int a2, int a3)
{
  if (*((_DWORD *)this + 31) != a2) {
    kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(this, a2);
  }
  float v5 = (kaldi::TransitionModel *)*((void *)this + 1);
  float v6 = *((float *)this + 6);
  float v7 = *(float *)(*((void *)this + 9) + 4 * *(int *)(*((void *)v5 + 12) + 4 * a3));
  float v8 = *((float *)this + 33);
  int v9 = *((_DWORD *)this + 34);
  return v6
       * (float)(v7
               + (float)(v8
                       * *(float *)(*((void *)this + 9)
                                  + 4 * (int)(kaldi::TransitionModel::TransitionIdToTransitionIndex(v5, a3) + v9))));
}

BOOL kaldi::OnlineDecodableNnet1Lazy::IsLastFrame(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[5], a2 + *((_DWORD *)this + 26) + *((_DWORD *)this + 27) + 1, 1);
}

BOOL kaldi::OnlineDecodableNnet1Lazy::IsLastFrameNoBlocking(int32x2_t **this, int a2)
{
  return !kaldi::OnlineFeatureMatrix::IsValidFrame(this[5], a2 + *((_DWORD *)this + 26) + *((_DWORD *)this + 27) + 1, 0);
}

uint64_t kaldi::OnlineDecodableNnet1Lazy::NumFramesSkipped(kaldi::OnlineDecodableNnet1Lazy *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t kaldi::OnlineDecodableNnet1Lazy::NumIndices(kaldi::OnlineDecodableNnet1Lazy *this)
{
  return ((*(void *)(*((void *)this + 1) + 152) - *(void *)(*((void *)this + 1) + 144)) >> 2)
       - 1;
}

BOOL kaldi::OnlineDecodableNnet1Lazy::HasSilencePosterior(kaldi::OnlineDecodableNnet1Lazy *this)
{
  return *((void *)this + 54) != 0;
}

void kaldi::OnlineDecodableNnet1Lazy::~OnlineDecodableNnet1Lazy(kaldi::OnlineDecodableNnet1Lazy *this)
{
  kaldi::OnlineDecodableNnet1Lazy::~OnlineDecodableNnet1Lazy(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F0A48090;
  int v2 = (void *)*((void *)this + 77);
  if (v2)
  {
    *((void *)this + 78) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 74);
  if (v3) {
    operator delete(v3);
  }
  std::deque<kaldi::CuMatrix<float>>::~deque[abi:ne180100]((void *)this + 64);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  BOOL v4 = (void *)*((void *)this + 51);
  if (v4) {
    operator delete(v4);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 368);
  kaldi::CuVector<float>::~CuVector((void *)this + 42);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 288);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 240);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 144);
  float v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 10);
  if (v6) {
    operator delete(v6);
  }
  quasar::Bitmap::~Bitmap(this);
}

void *kaldi::OnlineDecodableMatrixScaled::CacheFrame(kaldi::OnlineDecodableMatrixScaled *this, signed int a2)
{
  BOOL v4 = (char *)this + 56;
  kaldi::Vector<float>::Resize((void **)this + 7, *((unsigned int *)this + 12), 0);
  if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 5), a2, 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Request for invalid frame (you need to check IsLastFrame,", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, " or, for frame zero, check that the input is valid.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 5), a2, (uint64_t *)v7);
  double result = kaldi::VectorBase<float>::CopyFromVec((uint64_t)v4, v7);
  *((_DWORD *)this + 20) = a2;
  return result;
}

void kaldi::OnlineDecodableMatrixScaledMapped::CacheFrame(kaldi::OnlineDecodableMatrixScaledMapped *this, signed int a2)
{
  BOOL v4 = (char *)this + 72;
  kaldi::Vector<float>::Resize((void **)this + 9, *((unsigned int *)this + 16), 0);
  if (!kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 2), a2, 1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v7);
    float v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Request for invalid frame (you need to check IsLastFrame,", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, " or, for frame zero, check that the input is valid.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v7);
  }
  kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 2), a2, (uint64_t *)&v7);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v4, &v7);
  if (*((unsigned char *)this + 129))
  {
    kaldi::OnlineFeatureMatrix::GetEndpointerScore(*((kaldi::OnlineFeatureMatrix **)this + 2), a2, (uint64_t *)&v7);
    kaldi::Vector<float>::Resize((void **)this + 12, v8, 0);
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)this + 96, &v7);
  }
  double SilencePosterior = kaldi::OnlineFeatureMatrix::GetSilencePosterior(*((kaldi::OnlineFeatureMatrix **)this + 2), a2);
  *((_DWORD *)this + 30) = LODWORD(SilencePosterior);
  *((_DWORD *)this + 31) = a2;
}

long double quasar::mergedAcousticCost(uint64_t a1, double **a2)
{
  int v2 = *(uint64_t **)a1;
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  unint64_t v5 = v4 >> 3;
  if (v4)
  {
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v4 >> 3;
    }
    float v7 = *a2;
    do
    {
      uint64_t v8 = *v2++;
      *v7++ = -*(double *)(v8 + 16);
      --v6;
    }
    while (v6);
  }
  int v9 = a2[1];
  uint64_t v10 = v9 - v3;
  if (v10)
  {
    if (v10 == 1)
    {
      double v11 = *v3;
    }
    else
    {
      unint64_t v12 = v3 + 1;
      double v13 = *v3;
      while (v12 != v9)
      {
        double v14 = *v12++;
        double v15 = v14;
        if (v14 > v13) {
          double v13 = v15;
        }
      }
      for (long double i = 0.0; v3 != v9; ++v3)
      {
        double v17 = *v3 - v13;
        if (v17 >= -36.0436534) {
          long double i = i + exp(v17);
        }
      }
      double v11 = v13 + log(i);
    }
  }
  else
  {
    double v11 = -INFINITY;
  }
  return -(v11 - log((double)v5));
}

long double quasar::mergedAcousticCostUnpushed(uint64_t a1, double **a2)
{
  int v2 = *(uint64_t **)a1;
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  unint64_t v5 = v4 >> 3;
  if (v4)
  {
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v4 >> 3;
    }
    float v7 = *a2;
    do
    {
      uint64_t v8 = *v2++;
      *v7++ = -*(double *)(v8 + 24);
      --v6;
    }
    while (v6);
  }
  int v9 = a2[1];
  uint64_t v10 = v9 - v3;
  if (v10)
  {
    if (v10 == 1)
    {
      double v11 = *v3;
    }
    else
    {
      unint64_t v12 = v3 + 1;
      double v13 = *v3;
      while (v12 != v9)
      {
        double v14 = *v12++;
        double v15 = v14;
        if (v14 > v13) {
          double v13 = v15;
        }
      }
      for (long double i = 0.0; v3 != v9; ++v3)
      {
        double v17 = *v3 - v13;
        if (v17 >= -36.0436534) {
          long double i = i + exp(v17);
        }
      }
      double v11 = v13 + log(i);
    }
  }
  else
  {
    double v11 = -INFINITY;
  }
  return -(v11 - log((double)v5));
}

long double quasar::mergedAcousticCostGeneric(uint64_t *a1, double **a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (a1[1] == *a1)
  {
    uint64_t v12 = 0;
    uint64_t v10 = *a2;
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      double v9 = (*(double (**)(uint64_t, void))(*(void *)v8 + 48))(v8, *(void *)(v4 + 8 * v7));
      uint64_t v10 = *a2;
      (*a2)[v7++] = -v9;
      uint64_t v4 = *a1;
      uint64_t v11 = a1[1] - *a1;
    }
    while (v7 < v11 >> 3);
    uint64_t v12 = v11 >> 3;
  }
  double v13 = a2[1];
  uint64_t v14 = v13 - v10;
  if (v14)
  {
    if (v14 == 1)
    {
      double v15 = *v10;
    }
    else
    {
      int v16 = v10 + 1;
      double v17 = *v10;
      while (v16 != v13)
      {
        double v18 = *v16++;
        double v19 = v18;
        if (v18 > v17) {
          double v17 = v19;
        }
      }
      for (long double i = 0.0; v10 != v13; ++v10)
      {
        double v21 = *v10 - v17;
        if (v21 >= -36.0436534) {
          long double i = i + exp(v21);
        }
      }
      double v15 = v17 + log(i);
    }
  }
  else
  {
    double v15 = -INFINITY;
  }
  return -(v15 - log((double)(unint64_t)v12));
}

double quasar::mergedConfidence(uint64_t **a1, int a2)
{
  int v2 = *a1;
  if (a2)
  {
    int v3 = a1[1];
    if (v2 == v3)
    {
      return 0.0;
    }
    else
    {
      char v4 = 1;
      double result = 0.0;
      do
      {
        if ((v4 & 1) != 0 || *(double *)(*v2 + 32) > result) {
          double result = *(double *)(*v2 + 32);
        }
        char v4 = 0;
        ++v2;
      }
      while (v2 != v3);
    }
  }
  else
  {
    uint64_t v6 = a1[1];
    double v7 = 0.0;
    if (v2 != v6)
    {
      uint64_t v8 = *a1;
      do
      {
        uint64_t v9 = *v8++;
        double v7 = v7 + *(double *)(v9 + 32);
      }
      while (v8 != v6);
    }
    return v7 / (double)(unint64_t)(v6 - v2);
  }
  return result;
}

void quasar::mergedLogPosterior(uint64_t a1, double **a2)
{
  int v2 = *(uint64_t **)a1;
  int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8) - *(void *)a1;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    uint64_t v6 = *a2;
    do
    {
      uint64_t v7 = *v2++;
      *v6++ = *(double *)(v7 + 56);
      --v5;
    }
    while (v5);
  }
  uint64_t v8 = a2[1];
  if ((unint64_t)(v8 - v3) > 1)
  {
    uint64_t v9 = v3 + 1;
    double v10 = *v3;
    while (v9 != v8)
    {
      double v11 = *v9++;
      double v12 = v11;
      if (v11 > v10) {
        double v10 = v12;
      }
    }
    for (long double i = 0.0; v3 != v8; ++v3)
    {
      double v14 = *v3 - v10;
      if (v14 >= -36.0436534) {
        long double i = i + exp(v14);
      }
    }
    log(i);
  }
}

void quasar::mergedLogPosteriorGeneric(uint64_t *a1, double **a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (a1[1] == *a1)
  {
    double v10 = *a2;
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      double v9 = (*(double (**)(uint64_t, void))(*(void *)v8 + 48))(v8, *(void *)(v4 + 8 * v7));
      double v10 = *a2;
      (*a2)[v7++] = v9;
      uint64_t v4 = *a1;
    }
    while (v7 < (a1[1] - *a1) >> 3);
  }
  double v11 = a2[1];
  if ((unint64_t)(v11 - v10) > 1)
  {
    double v12 = v10 + 1;
    double v13 = *v10;
    while (v12 != v11)
    {
      double v14 = *v12++;
      double v15 = v14;
      if (v14 > v13) {
        double v13 = v15;
      }
    }
    for (long double i = 0.0; v10 != v11; ++v10)
    {
      double v17 = *v10 - v13;
      if (v17 >= -36.0436534) {
        long double i = i + exp(v17);
      }
    }
    log(i);
  }
}

double quasar::mergedMin(void *a1, uint64_t a2)
{
  int v3 = (void *)*a1;
  if (a1[1] == *a1) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    goto LABEL_10;
  }
  double v6 = (*(double (**)(uint64_t, void))(*(void *)v5 + 48))(v5, *v3);
  unint64_t v7 = (void *)*a1;
  if (a1[1] - *a1 >= 9uLL)
  {
    unint64_t v8 = 1;
    while (1)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      if (!v9) {
        break;
      }
      double v10 = (*(double (**)(uint64_t, void))(*(void *)v9 + 48))(v9, v7[v8]);
      if (v10 < v6) {
        double v6 = v10;
      }
      ++v8;
      unint64_t v7 = (void *)*a1;
      if (v8 >= (uint64_t)(a1[1] - *a1) >> 3) {
        return v6;
      }
    }
LABEL_10:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return v6;
}

double quasar::mergedMax(void *a1, uint64_t a2)
{
  int v3 = (void *)*a1;
  if (a1[1] == *a1) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    goto LABEL_10;
  }
  double v6 = (*(double (**)(uint64_t, void))(*(void *)v5 + 48))(v5, *v3);
  unint64_t v7 = (void *)*a1;
  if (a1[1] - *a1 >= 9uLL)
  {
    unint64_t v8 = 1;
    while (1)
    {
      uint64_t v9 = *(void *)(a2 + 24);
      if (!v9) {
        break;
      }
      double v10 = (*(double (**)(uint64_t, void))(*(void *)v9 + 48))(v9, v7[v8]);
      if (v6 < v10) {
        double v6 = v10;
      }
      ++v8;
      unint64_t v7 = (void *)*a1;
      if (v8 >= (uint64_t)(a1[1] - *a1) >> 3) {
        return v6;
      }
    }
LABEL_10:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return v6;
}

double quasar::mergedGraphCost(uint64_t **a1, double **a2)
{
  int v2 = *a1;
  int v3 = a1[1];
  uint64_t v4 = *a2;
  unint64_t v5 = v3 - *a1;
  if (v3 != *a1)
  {
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v3 - *a1;
    }
    unint64_t v7 = *a2;
    unint64_t v8 = *a1;
    do
    {
      uint64_t v9 = *v8++;
      *v7++ = *(double *)(v9 + 240);
      --v6;
    }
    while (v6);
  }
  double v10 = a2[1];
  uint64_t v11 = v10 - v4;
  if (v11)
  {
    if (v11 == 1)
    {
      double v12 = *v4;
    }
    else
    {
      double v13 = v4 + 1;
      double v14 = *v4;
      while (v13 != v10)
      {
        double v15 = *v13++;
        double v16 = v15;
        if (v15 > v14) {
          double v14 = v16;
        }
      }
      long double v17 = 0.0;
      if (v4 != v10)
      {
        double v18 = v4;
        do
        {
          double v19 = *v18 - v14;
          if (v19 >= -36.0436534) {
            long double v17 = v17 + exp(v19);
          }
          ++v18;
        }
        while (v18 != v10);
      }
      double v12 = v14 + log(v17);
    }
  }
  else
  {
    double v12 = -INFINITY;
  }
  if (v3 != v2)
  {
    if (v5 <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = v5;
    }
    double v21 = v4;
    do
    {
      uint64_t v22 = *v2++;
      *v21++ = *(double *)(v22 + 240) - *(double *)(v22 + 40);
      --v20;
    }
    while (v20);
  }
  if (v11)
  {
    if (v11 == 1)
    {
      double v23 = *v4;
    }
    else
    {
      int32x2_t v24 = v4 + 1;
      double v25 = *v4;
      while (v24 != v10)
      {
        double v26 = *v24++;
        double v27 = v26;
        if (v26 > v25) {
          double v25 = v27;
        }
      }
      for (long double i = 0.0; v4 != v10; ++v4)
      {
        double v29 = *v4 - v25;
        if (v29 >= -36.0436534) {
          long double i = i + exp(v29);
        }
      }
      double v23 = v25 + log(i);
    }
  }
  else
  {
    double v23 = -INFINITY;
  }
  return -(v23 - v12);
}

void *quasar::getNormWord@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (v3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v5 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    uint64_t v6 = (char *)&v11;
    quasar::QsrText::decodeQsrText(v5, a1, (uint64_t)&v11);
    if (v13 >= 0) {
      unint64_t v7 = (char *)&v11 + HIBYTE(v13);
    }
    else {
      unint64_t v7 = (char *)v11 + v12;
    }
    if (v13 < 0) {
      uint64_t v6 = (char *)v11;
    }
    while (v6 != v7)
    {
      char *v6 = __tolower(*v6);
      ++v6;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::splitStringSimple((uint64_t)&v11, (uint64_t *)&__p, (unint64_t)&v10);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_1B21CC438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::setNormWords(quasar *this, kaldi::WordHypLattice *a2)
{
  int v2 = (void *)*((void *)this + 5);
  uint64_t v3 = (void *)*((void *)this + 6);
  while (v2 != v3)
  {
    quasar::getNormWord(*v2 + 264, __p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(*v2 + 464, (long long *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    ++v2;
  }
}

void sub_1B21CC528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::mergeArcs(kaldi::WordHypLattice *a1, uint64_t a2, int a3)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3 != 8)
  {
    uint64_t v7 = **(void **)a2;
    std::vector<double>::vector(__p, v3 >> 3);
    *(long double *)(v7 + 16) = quasar::mergedAcousticCost(a2, (double **)__p);
    *(long double *)(v7 + 24) = quasar::mergedAcousticCostUnpushed(a2, (double **)__p);
    *(double *)(v7 + 32) = quasar::mergedConfidence((uint64_t **)a2, a3);
    quasar::mergedLogPosterior(a2, (double **)__p);
    *(void *)(v7 + 56) = v8;
    v38[0] = &unk_1F0A5C438;
    uint64_t v38[3] = v38;
    quasar::mergedLogPosteriorGeneric((uint64_t *)a2, (double **)__p, (uint64_t)v38);
    *(void *)(v7 + 64) = v9;
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v38);
    *(double *)(v7 + 40) = quasar::mergedGraphCost((uint64_t **)a2, (double **)__p);
    uint64_t v10 = *(uint64_t **)a2;
    uint64_t v11 = *(uint64_t **)(a2 + 8);
    if (*(uint64_t **)a2 == v11)
    {
      BOOL v12 = 0;
    }
    else
    {
      BOOL v12 = 0;
      do
      {
        uint64_t v13 = *v10++;
        BOOL v12 = (*(unsigned __int8 *)(v13 + 49) | v12) != 0;
      }
      while (v10 != v11);
    }
    *(unsigned char *)(v7 + 49) = v12;
    v37[0] = &unk_1F0A5C490;
    v37[3] = v37;
    *(double *)(v7 + 128) = quasar::mergedMin((void *)a2, (uint64_t)v37);
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v37);
    v36[0] = &unk_1F0A5C4E8;
    v36[3] = v36;
    *(double *)(v7 + 136) = quasar::mergedMax((void *)a2, (uint64_t)v36);
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v36);
    v35[0] = &unk_1F0A5C540;
    v35[3] = v35;
    *(long double *)(v7 + 192) = quasar::mergedAcousticCostGeneric((uint64_t *)a2, (double **)__p, (uint64_t)v35);
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v35);
    v34[0] = &unk_1F0A5C598;
    v34[3] = v34;
    *(long double *)(v7 + 200) = quasar::mergedAcousticCostGeneric((uint64_t *)a2, (double **)__p, (uint64_t)v34);
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v34);
    v33[0] = &unk_1F0A5C5F0;
    v33[3] = v33;
    quasar::mergedLogPosteriorGeneric((uint64_t *)a2, (double **)__p, (uint64_t)v33);
    *(void *)(v7 + 208) = v14;
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v33);
    double v15 = *(uint64_t **)a2;
    uint64_t v16 = *(void *)(a2 + 8);
    uint64_t v17 = v16 - *(void *)a2;
    if (v16 == *(void *)a2)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      int v19 = 0;
      unint64_t v20 = v17 >> 3;
      if (v20 <= 1) {
        unint64_t v20 = 1;
      }
      double v21 = -INFINITY;
      do
      {
        if (*(double *)(v15[v18] + 56) > v21)
        {
          int v19 = v18;
          double v21 = *(double *)(v15[v18] + 56);
        }
        ++v18;
      }
      while (v20 != v18);
      uint64_t v22 = v19;
    }
    double v23 = (const std::string *)v15[v22];
    *(void *)(v7 + 256) = *((void *)&v23[10].__r_.__value_.__l + 2);
    std::string::operator=((std::string *)(v7 + 264), v23 + 11);
    uint64_t v24 = *(void *)(*(void *)a2 + 8 * v22);
    *(_DWORD *)(v7 + 288) = *(_DWORD *)(v24 + 288);
    if (v7 == v24)
    {
      double v26 = (const std::string *)v7;
    }
    else
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v7 + 80), *(std::string **)(v24 + 80), *(long long **)(v24 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v24 + 88) - *(void *)(v24 + 80)) >> 3));
      uint64_t v25 = *(void *)(*(void *)a2 + 8 * v22);
      double v26 = (const std::string *)v7;
      if (v7 != v25)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v7 + 104), *(char **)(v25 + 104), *(void *)(v25 + 112), (uint64_t)(*(void *)(v25 + 112) - *(void *)(v25 + 104)) >> 2);
        double v26 = *(const std::string **)(*(void *)a2 + 8 * v22);
      }
    }
    std::string::operator=((std::string *)(v7 + 216), v26 + 9);
    double v27 = *(uint64_t **)a2;
    uint64_t v28 = *(void *)(*(void *)a2 + 8 * v22);
    if (v7 != v28)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v7 + 168), *(std::string **)(v28 + 168), *(long long **)(v28 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 176) - *(void *)(v28 + 168)) >> 3));
      double v27 = *(uint64_t **)a2;
      uint64_t v29 = *(void *)(*(void *)a2 + 8 * v22);
      if (v7 != v29)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v7 + 144), *(char **)(v29 + 144), *(void *)(v29 + 152), (uint64_t)(*(void *)(v29 + 152) - *(void *)(v29 + 144)) >> 2);
        double v27 = *(uint64_t **)a2;
      }
    }
    for (long double i = (kaldi::WordHypLattice::Arc **)(v27 + 1); i != *(kaldi::WordHypLattice::Arc ***)(a2 + 8); long double i = v31)
    {
      int v31 = i + 1;
      kaldi::WordHypLattice::DeleteArc(a1, i);
    }
    *(unsigned char *)a1 = 0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1B21CC94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::mergeArcs(quasar *this, kaldi::WordHypLattice *a2)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v30 = *((void *)this + 3);
  if (v3 != v30)
  {
    int v4 = (int)a2;
    do
    {
      v32[0] = 0;
      v32[1] = 0;
      int v31 = (uint64_t *)v32;
      uint64_t v5 = *(void *)v3 + 64;
      uint64_t v6 = *(void *)(*(void *)v3 + 72);
      if (v6 != v5)
      {
        do
        {
          uint64_t v33 = (unint64_t *)(*(void *)(v6 + 16) + 8);
          uint64_t v7 = std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(&v31, v33, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
          uint64_t v33 = (unint64_t *)(*(void *)(v6 + 16) + 464);
          uint64_t v8 = std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v7 + 5, (const void **)v33, (uint64_t)&std::piecewise_construct, (long long **)&v33);
          uint64_t v9 = (void *)v8[8];
          unint64_t v10 = v8[9];
          if ((unint64_t)v9 >= v10)
          {
            uint64_t v12 = v8[7];
            uint64_t v13 = ((uint64_t)v9 - v12) >> 3;
            if ((unint64_t)(v13 + 1) >> 61) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v14 = v10 - v12;
            uint64_t v15 = v14 >> 2;
            if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
              uint64_t v15 = v13 + 1;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v15;
            }
            if (v16) {
              uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v8 + 9), v16);
            }
            else {
              uint64_t v17 = 0;
            }
            uint64_t v18 = &v17[8 * v13];
            *(void *)uint64_t v18 = *(void *)(v6 + 16);
            uint64_t v11 = v18 + 8;
            unint64_t v20 = (char *)v8[7];
            int v19 = (char *)v8[8];
            if (v19 != v20)
            {
              do
              {
                uint64_t v21 = *((void *)v19 - 1);
                v19 -= 8;
                *((void *)v18 - 1) = v21;
                v18 -= 8;
              }
              while (v19 != v20);
              int v19 = (char *)v8[7];
            }
            v8[7] = (uint64_t)v18;
            v8[8] = (uint64_t)v11;
            v8[9] = (uint64_t)&v17[8 * v16];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *uint64_t v9 = *(void *)(v6 + 16);
            uint64_t v11 = v9 + 1;
          }
          v8[8] = (uint64_t)v11;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6 != v5);
        uint64_t v22 = v31;
        if (v31 != (uint64_t *)v32)
        {
          do
          {
            double v23 = (uint64_t *)v22[5];
            if (v23 != v22 + 6)
            {
              do
              {
                if ((unint64_t)(v23[8] - v23[7]) >= 9) {
                  quasar::mergeArcs(this, (uint64_t)(v23 + 7), v4);
                }
                uint64_t v24 = (uint64_t *)v23[1];
                if (v24)
                {
                  do
                  {
                    uint64_t v25 = v24;
                    uint64_t v24 = (uint64_t *)*v24;
                  }
                  while (v24);
                }
                else
                {
                  do
                  {
                    uint64_t v25 = (uint64_t *)v23[2];
                    BOOL v26 = *v25 == (void)v23;
                    double v23 = v25;
                  }
                  while (!v26);
                }
                double v23 = v25;
              }
              while (v25 != v22 + 6);
            }
            double v27 = (uint64_t *)v22[1];
            if (v27)
            {
              do
              {
                uint64_t v28 = v27;
                double v27 = (uint64_t *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                uint64_t v28 = (uint64_t *)v22[2];
                BOOL v26 = *v28 == (void)v22;
                uint64_t v22 = v28;
              }
              while (!v26);
            }
            uint64_t v22 = v28;
          }
          while (v28 != (uint64_t *)v32);
        }
      }
      std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy((uint64_t)&v31, v32[0]);
      v3 += 8;
    }
    while (v3 != v30);
  }
  kaldi::WordHypLattice::RecomputeTopSortedNodes(this);
  kaldi::WordHypLattice::ReassignNodeIds((uint64_t)this);
  return kaldi::WordHypLattice::ReassignArcIds((uint64_t)this);
}

void sub_1B21CCC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F0A5C438;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C438;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 64);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F0A5C490;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C490;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 128);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F0A5C4E8;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C4E8;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 136);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F0A5C540;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C540;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 192);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_3>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F0A5C598;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C598;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 200);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F0A5C5F0;
  return result;
}

void std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C5F0;
}

double std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 208);
}

uint64_t std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5,std::allocator<quasar::mergeArcs(kaldi::WordHypLattice &,std::vector<kaldi::WordHypLattice::Arc *> &,BOOL)::$_5>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<std::string,std::vector<kaldi::WordHypLattice::Arc *>>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[7] = 0;
    void v11[6] = 0;
    void v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t quasar::Lexicon::Lexicon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a3)
  {
    quasar::Lexicon::readMappedLexicon(a2, &v24);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v24;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"read mmaped lexicon from ", 25);
      int v7 = *(char *)(a2 + 23);
      if (v7 >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = *(void *)a2;
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v24);
    }
    if (!*(void *)a1)
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Could not read lexicon data from mmaped source ", 47);
      int v11 = *(char *)(a2 + 23);
      if (v11 >= 0) {
        uint64_t v12 = a2;
      }
      else {
        uint64_t v12 = *(void *)a2;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v24);
    }
  }
  else
  {
    uint64_t v23 = 0;
    if ((kaldi::Input::OpenInternal(&v23, a2, a3, 0) & 1) == 0)
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
      uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Could not read lexicon data from text source ", 45);
      int v19 = *(char *)(a2 + 23);
      if (v19 >= 0) {
        uint64_t v20 = a2;
      }
      else {
        uint64_t v20 = *(void *)a2;
      }
      if (v19 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v21 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v24);
    }
    uint64_t v14 = kaldi::Input::Stream((kaldi::Input *)&v23);
    __int16 v22 = 0;
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Lexicon,std::allocator<kaldi::quasar::Lexicon>,std::istream &,BOOL,BOOL,void>(v14, (unsigned __int8 *)&v22 + 1, (unsigned __int8 *)&v22, &v24);
    long long v15 = v24;
    long long v24 = 0uLL;
    unint64_t v16 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (*((void *)&v24 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    kaldi::Input::Close((kaldi::Input *)&v23);
    kaldi::Input::~Input((kaldi::Input *)&v23);
  }
  return a1;
}

void sub_1B21CD498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  unint64_t v16 = (std::__shared_weak_count *)v14[5];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)v14[3];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = (std::__shared_weak_count *)v14[1];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::Lexicon::readMappedLexicon@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  v43[19] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = MEMORY[0x1E4FBA460] + 64;
  v43[0] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v41[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v41 + *(void *)(v41[0] - 24)) = v6;
  v41[1] = 0;
  int v7 = (std::ios_base *)((char *)v41 + *(void *)(v41[0] - 24));
  std::ios_base::init(v7, v42);
  uint64_t v8 = MEMORY[0x1E4FBA460] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v41[0] = v8;
  v43[0] = v4;
  MEMORY[0x1B3EA7CE0](v42);
  std::ifstream::open();
  uint64_t v9 = (void *)std::istream::read();
  if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) != 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Could not read magic header from ", 33);
      int v11 = *(char *)(a1 + 23);
      if (v11 >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *(void *)a1;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v13 = *(void *)(a1 + 8);
      }
LABEL_28:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v22);
    }
  }
  else if (v39 == 0x2D58454C2D525351 && v40 == 3158102)
  {
    int v21 = 0;
    unint64_t v16 = (void *)std::istream::read();
    if ((*((unsigned char *)v16 + *(void *)(*v16 - 24) + 32) & 5) == 0)
    {
      fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
      int v20 = 2;
      fst::MappedFile::Map((uint64_t)v41, (uint64_t)__p, (fst::MappedFile *)((4 * v21 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    if (quasar::gLogLevel >= 1)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Could not read the number of words from the mapped file ", 56);
      int v17 = *(char *)(a1 + 23);
      if (v17 >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *(void *)a1;
      }
      if (v17 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v13 = *(void *)(a1 + 8);
      }
      goto LABEL_28;
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Magic header was wrong in ", 26);
    int v15 = *(char *)(a1 + 23);
    if (v15 >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *(void *)a1;
    }
    if (v15 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 8);
    }
    goto LABEL_28;
  }
  *a2 = 0;
  a2[1] = 0;
  v41[0] = *v5;
  *(void *)((char *)v41 + *(void *)(v41[0] - 24)) = v5[3];
  MEMORY[0x1B3EA7CF0](v42);
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](v43);
}

void sub_1B21CDB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a72);
  _Unwind_Resume(a1);
}

void quasar::Lexicon::create(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (v2) {
    operator new();
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3) {
    operator new();
  }
  memset(v4, 0, sizeof(v4));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Both dictMappedFile and dictFile are empty");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
}

void sub_1B21CDD64(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x20C40A759441BLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::Lexicon::lookUpProns(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a3);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (!v8) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 16))(*a1, a2);
  if (result)
  {
    (*(void (**)(char ***__return_ptr))(*(void *)*a1 + 32))(&v18);
    unint64_t v10 = v18;
    int v11 = v19;
    if (v18 != v19)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(v16, *v10);
        unint64_t v12 = v17;
        unsigned __int8 v13 = v17;
        if ((v17 & 0x80u) != 0) {
          unint64_t v12 = (unint64_t)v16[1];
        }
        if (v12)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, " ");
          quasar::replaceAll((uint64_t)v16, (uint64_t)__p, a4);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a3, (unsigned __int8 *)v16, (uint64_t)v16);
          unsigned __int8 v13 = v17;
        }
        if ((v13 & 0x80) != 0) {
          operator delete(v16[0]);
        }
        ++v10;
      }
      while (v10 != v11);
      unint64_t v10 = v18;
    }
    if (v10)
    {
      int v19 = v10;
      operator delete(v10);
    }
    return 1;
  }
  return result;
}

void sub_1B21CDF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::Lexicon,std::allocator<kaldi::quasar::Lexicon>,std::istream &,BOOL,BOOL,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, unsigned __int8 *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x180uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::__shared_ptr_emplace[abi:ne180100]<std::istream &,BOOL,BOOL,std::allocator<kaldi::quasar::Lexicon>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B21CDFB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::__shared_ptr_emplace[abi:ne180100]<std::istream &,BOOL,BOOL,std::allocator<kaldi::quasar::Lexicon>,0>(void *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F5A0;
  kaldi::quasar::Lexicon::Lexicon(a1 + 3, a2, *a3, *a4, 0);
  return a1;
}

void sub_1B21CE018(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F5A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F5A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::Lexicon>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void *std::allocate_shared[abi:ne180100]<kaldi::quasar::ConstLexicon,std::allocator<kaldi::quasar::ConstLexicon>,int &,fst::MappedFile &,fst::MappedFile &,void>@<X0>(int *a1@<X1>, const fst::MappedFile *a2@<X2>, const fst::MappedFile *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x88uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::__shared_ptr_emplace[abi:ne180100]<int &,fst::MappedFile &,fst::MappedFile &,std::allocator<kaldi::quasar::ConstLexicon>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B21CE128(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::__shared_ptr_emplace[abi:ne180100]<int &,fst::MappedFile &,fst::MappedFile &,std::allocator<kaldi::quasar::ConstLexicon>,0>(void *a1, int *a2, const fst::MappedFile *a3, const fst::MappedFile *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F140;
  kaldi::quasar::ConstLexicon::ConstLexicon((kaldi::quasar::ConstLexicon *)(a1 + 3), *a2, a3, a4);
  return a1;
}

void sub_1B21CE188(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::ConstLexicon>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

kaldi::quasar::ConstLexicon *kaldi::quasar::ConstLexicon::ConstLexicon(kaldi::quasar::ConstLexicon *this, int a2, const fst::MappedFile *a3, const fst::MappedFile *a4)
{
  *(void *)this = &unk_1F0A50030;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_DWORD *)this + 12) = a2 - 1;
  uint64_t v5 = *((void *)a4 + 1);
  *((void *)this + 7) = *((void *)a3 + 1);
  *((void *)this + 8) = v5;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  kaldi::quasar::ConstLexicon::Init(this);
  return this;
}

void sub_1B21CE2BC(_Unwind_Exception *a1)
{
  if (v1[103] < 0) {
    operator delete(*v3);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<kaldi::quasar::ShortlistDataInOneFile,kaldi::quasar::ShortlistDataOnDisk,std::vector<std::string>>()
{
}

void sub_1B21CE4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v6 - 40) = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v6 - 40));
  kaldi::quasar::ShortlistDataOnDisk::~ShortlistDataOnDisk((kaldi::quasar::ShortlistDataOnDisk *)va);
  MEMORY[0x1B3EA8670](v4, 0x10F1C408308A222);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShortlistDataOnDisk::~ShortlistDataOnDisk(kaldi::quasar::ShortlistDataOnDisk *this)
{
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if (*((unsigned char *)this + i + 120))
    {
      uint64_t v3 = *(void *)((char *)this + i + 104);
      if (v3) {
        MEMORY[0x1B3EA8630](v3, 0x1000C8077774924);
      }
    }
  }
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    if (*((unsigned char *)this + j + 72))
    {
      uint64_t v5 = *(void *)((char *)this + j + 56);
      if (v5) {
        MEMORY[0x1B3EA8630](v5, 0x1000C8077774924);
      }
    }
  }
  uint64_t v6 = *(void *)this;
  *(void *)this = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
}

void kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataInOneFile(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  kaldi::ExpectToken(a1, a2, "<ShortlistTable>");
}

void anonymous namespace'::BuildFromModelFileWithEmbeddedShortlist(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unsigned __int8 v13 = 0;
  while (1)
  {
    while (1)
    {
      if (kaldi::Peek(a1, a2) != 60)
      {
        kaldi::quasar::ShortlistDataOnDisk::ShortlistDataOnDisk(v12, a1, a2, a3, v13);
        kaldi::ExpectToken(a1, a2, "<ShortlistLangPairs>");
        memset(&__p, 0, sizeof(__p));
        kaldi::ReadToken(a1, a2, (uint64_t)&__p);
        kaldi::SplitStringToVector(&__p, ",", v10);
        std::make_unique[abi:ne180100]<kaldi::quasar::ShortlistDataInOneFile,kaldi::quasar::ShortlistDataOnDisk,std::vector<std::string>>();
      }
      kaldi::ReadToken(a1, a2, (uint64_t)&v14);
      if (SHIBYTE(v16) < 0) {
        break;
      }
      if (SHIBYTE(v16) == 16)
      {
        uint64_t v6 = (uint64_t *)&v14;
        goto LABEL_8;
      }
    }
    if (v15 == 16)
    {
      uint64_t v6 = v14;
LABEL_8:
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      if (v8 == 0x6853746F7669503CLL && v7 == 0x3E7473696C74726FLL) {
        kaldi::ReadBasicType<BOOL>(a1, a2, (char *)&v13);
      }
    }
  }
}

void sub_1B21CE838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  *(void *)(v20 - 72) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 72));
  if (a18 < 0) {
    operator delete(__p);
  }
  kaldi::quasar::ShortlistDataOnDisk::~ShortlistDataOnDisk((kaldi::quasar::ShortlistDataOnDisk *)&a19);
  if (*(char *)(v20 - 73) < 0) {
    operator delete(*(void **)(v20 - 96));
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataBasedOnTagInInput(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  kaldi::ReadToken(a1, a2, (uint64_t)&v43);
  if (SHIBYTE(v45) < 0)
  {
    if (v44 != 16
      || (*(void *)v43 == 0x696C74726F68533CLL ? (BOOL v9 = *((void *)v43 + 1) == 0x3E656C6261547473) : (BOOL v9 = 0), !v9))
    {
      if (v44 != 27) {
        goto LABEL_81;
      }
      uint64_t v8 = (uint64_t *)v43;
      goto LABEL_12;
    }
  }
  else
  {
    if (HIBYTE(v45) != 16)
    {
      if (HIBYTE(v45) != 27) {
        goto LABEL_81;
      }
      uint64_t v8 = (uint64_t *)&v43;
LABEL_12:
      uint64_t v10 = *v8;
      uint64_t v11 = v8[1];
      uint64_t v12 = v8[2];
      uint64_t v13 = *(uint64_t *)((char *)v8 + 19);
      if (v10 != 0x696C74726F68533CLL
        || v11 != 0x49656C6261547473
        || v12 != 0x6C6946796E614D6ELL
        || v13 != 0x3E73656C6946796ELL)
      {
        goto LABEL_81;
      }
      memset(v42, 0, sizeof(v42));
      kaldi::ReadToken(a1, a2, (uint64_t)v42);
      *(_OWORD *)int v40 = *(_OWORD *)a4;
      uint64_t v41 = *(void *)(a4 + 16);
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)a4 = 0;
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v39.__pn_, (char *)v42);
      std::__fs::filesystem::operator/[abi:ne180100](&v39, (uint64_t)v40, &v54);
      std::__fs::filesystem::__status(&v54, 0);
      if (LOBYTE(v53[0].__first_) != 2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        long long v38 = std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(v53, (uint64_t *)&v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" is not a directory", 19);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
      }
      memset(v51, 0, sizeof(v51));
      int v52 = 1065353216;
      memset(&v50, 0, sizeof(v50));
      MEMORY[0x1B3EA8270](&v48, &v54, 0, 0);
      unsigned __int8 v17 = v48;
      uint64_t v18 = v49;
      if (v49)
      {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v19 = v49;
        v47.__imp_.__ptr_ = v17;
        v47.__imp_.__cntrl_ = v18;
        if (v49)
        {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
      }
      else
      {
        v47.__imp_.__ptr_ = v48;
        v47.__imp_.__cntrl_ = 0;
      }
      while (1)
      {
        if (!v47.__imp_.__ptr_)
        {
          if (v47.__imp_.__cntrl_) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47.__imp_.__cntrl_);
          }
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
            long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Available shortlist files: ", 27);
            kaldi::JoinVectorToString<std::string>((uint64_t *)&v50, ",");
            if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::__fs::filesystem::path *)__p.__pn_.__r_.__value_.__r.__words[0];
            }
            if ((__p.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__pn_.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)p_p, size);
            if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            }
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v53);
          }
          std::make_unique[abi:ne180100]<kaldi::quasar::ShortlistDataInManyFiles,std::__fs::filesystem::path,std::__fs::filesystem::path,std::unordered_map<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>();
        }
        int v21 = std::__fs::filesystem::directory_iterator::__dereference(&v47);
        std::__fs::filesystem::path::extension[abi:ne180100](&v21->__p_, (uint64_t)v53);
        std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p.__pn_, &kaldi::quasar::ShortlistConstants::SHORTLIST_EXTENSION);
        v55.__data_ = (const std::string_view::value_type *)&__p;
        BOOL v22 = std::__fs::filesystem::operator!=[abi:ne180100]((const std::__fs::filesystem::path *)v53, v55);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53[0].__end_) < 0)
        {
          operator delete(v53[0].__first_);
          if (v22) {
            goto LABEL_64;
          }
        }
        else if (v22)
        {
          goto LABEL_64;
        }
        std::__fs::filesystem::path::stem[abi:ne180100](&v21->__p_, (uint64_t)&__p);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v53, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v53[0].__first_ = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
          v53[0].__end_ = (std::__split_buffer<std::wstring>::pointer)__p.__pn_.__r_.__value_.__r.__words[2];
        }
        std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__emplace_unique_key_args<std::string,std::string,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk>((uint64_t)v51, (unsigned __int8 *)v53, (uint64_t)v53);
        if (SHIBYTE(v53[0].__end_) < 0) {
          operator delete(v53[0].__first_);
        }
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v21->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p.__pn_, v21->__p_.__pn_.__r_.__value_.__l.__data_, v21->__p_.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          __p.__pn_ = (std::__fs::filesystem::path::string_type)v21->__p_;
        }
        std::vector<std::string>::pointer end = v50.__end_;
        if (v50.__end_ >= v50.__end_cap_.__value_)
        {
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v50.__end_ - (char *)v50.__begin_) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 3) > v26) {
            unint64_t v26 = 0x5555555555555556 * (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v27 = v26;
          }
          v53[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v50.__end_cap_;
          if (v27) {
            long long v28 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v50.__end_cap_, v27);
          }
          else {
            long long v28 = 0;
          }
          long long v29 = v28 + v25;
          v53[0].__first_ = v28;
          v53[0].__begin_ = v29;
          v53[0].__end_cap_.__value_ = &v28[v27];
          long long v30 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
          v29->__r_.__value_.__r.__words[2] = __p.__pn_.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
          memset(&__p, 0, sizeof(__p));
          v53[0].__end_ = v29 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v50, (std::__split_buffer<std::string> *)v53);
          long long v31 = v50.__end_;
          std::__split_buffer<std::string>::~__split_buffer(v53);
          v50.__end_ = v31;
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v24 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
          v50.__end_->__r_.__value_.__r.__words[2] = __p.__pn_.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v24;
          v50.__end_ = end + 1;
        }
LABEL_64:
        std::__fs::filesystem::directory_iterator::__increment(&v47, 0);
      }
    }
    if (v43 != (void *)0x696C74726F68533CLL || v44 != 0x3E656C6261547473)
    {
LABEL_81:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Unknown shortlist type: ", 24);
      if (v45 >= 0) {
        long long v36 = &v43;
      }
      else {
        long long v36 = v43;
      }
      if (v45 >= 0) {
        uint64_t v37 = HIBYTE(v45);
      }
      else {
        uint64_t v37 = v44;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v53);
    }
  }
}

void sub_1B21CEEC8()
{
}

void sub_1B21CEEDC()
{
}

void sub_1B21CEEE4()
{
}

void sub_1B21CEEEC()
{
}

void sub_1B21CEEF4()
{
}

void sub_1B21CEF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__pa,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__split_buffer<std::wstring> *a34)
{
  if (SHIBYTE(a28) < 0) {
    operator delete(__pa);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  uint64_t v44 = (void **)&v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v44);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)&v46);
  if (*(char *)(v34 - 97) < 0) {
    operator delete(*(void **)(v34 - 120));
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&pn, kaldi::quasar::ShortlistConstants::SHORTLISTS_DIRECTORY_NAME);
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&pn, a1, v29);
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t v7 = v23;
  std::string::basic_string[abi:ne180100]((uint64_t)v23, v6 + 10);
  if ((v23[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::__fs::filesystem::path *)v23[0].__pn_.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, ".shortlist");
  __p[0] = v23[0];
  memset(v23, 0, 24);
  std::__fs::filesystem::operator/[abi:ne180100](__p, (uint64_t)v29, &v26);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23[0].__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29[0].__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(&v26, 0);
  if (v29[0].__pn_.__r_.__value_.__s.__data_[0] == 255 || !v29[0].__pn_.__r_.__value_.__s.__data_[0])
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Shortlist file: ", 16);
      uint64_t v10 = v9;
      std::string::size_type size = HIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]);
      if ((v26.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v26;
      }
      else {
        uint64_t v12 = (std::__fs::filesystem::path *)v26.__pn_.__r_.__value_.__r.__words[0];
      }
      if ((v26.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v26.__pn_.__r_.__value_.__l.__size_;
      }
      std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v9, v12, (unsigned char *)v12 + size, 0x22u, 0x5Cu);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" is not found", 13);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    }
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_55;
  }
  {
    operator new();
  }
  {
    operator new();
  }
  uint64_t v13 = (std::mutex *)kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::mutex;
  std::mutex::lock((std::mutex *)kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::mutex);
  v29[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  uint64_t v14 = std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__emplace_unique_key_args<std::__fs::filesystem::path,std::piecewise_construct_t const&,std::tuple<std::__fs::filesystem::path const&>,std::tuple<>>((uint64_t **)kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(std::__fs::filesystem::path const&,std::string const&)::loaded_files_with_shortlist_data, (std::basic_string_view<_CharT, _Traits>::size_type)&v26, (uint64_t)&std::piecewise_construct, (long long **)v29);
  *a3 = 0;
  a3[1] = 0;
  uint64_t v15 = (std::__shared_weak_count *)v14[8];
  if (!v15 || (uint64_t v16 = std::__shared_weak_count::lock(v15), (a3[1] = (uint64_t)v16) == 0))
  {
LABEL_42:
    if (SHIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, v26.__pn_.__r_.__value_.__l.__data_, v26.__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = v26.__pn_;
    }
    std::ifstream::basic_ifstream((uint64_t *)v29);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pn.__r_.__value_.__l.__data_);
    }
    if ((v29[1].__pn_.__r_.__value_.__s.__data_[*(void *)(v29[0].__pn_.__r_.__value_.__r.__words[0] - 24) + 8] & 5) == 0)
    {
      if (SHIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&pn, v26.__pn_.__r_.__value_.__l.__data_, v26.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::string pn = v26.__pn_;
      }
      fst::FstReadOptions::FstReadOptions(v23, &pn, 0, 0, 0);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(pn.__r_.__value_.__l.__data_);
      }
      int v24 = 2;
      std::istream::tellg();
      std::istream::seekg();
      fst::MappedFile::Map((uint64_t)v29, (uint64_t)v23, v28);
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&pn);
    BOOL v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&pn, (uint64_t)"Failed to open shortlist file: ", 31);
    std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(v22, (uint64_t *)&v26);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&pn);
  }
  uint64_t v17 = v14[7];
  *a3 = v17;
  if (!v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    goto LABEL_42;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Shortlist for path: ", 20);
    uint64_t v19 = v18;
    std::string::size_type v20 = HIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]);
    if ((v26.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v21 = &v26;
    }
    else {
      int v21 = (std::__fs::filesystem::path *)v26.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v26.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v20 = v26.__pn_.__r_.__value_.__l.__size_;
    }
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v18, v21, (unsigned char *)v21 + v20, 0x22u, 0x5Cu);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" is already loaded. Returning cached object.", 44);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v29);
  }
  std::mutex::unlock(v13);
LABEL_55:
  if (SHIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_1B21CF768()
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&STACK[0x218]);
  if (*(void *)(v0 + 8)) {
    JUMPOUT(0x1B21CF77CLL);
  }
  JUMPOUT(0x1B21CF8A0);
}

void sub_1B21CF798(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  kaldi::Input::~Input((kaldi::Input *)va);
  JUMPOUT(0x1B21CF854);
}

void sub_1B21CF7AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  JUMPOUT(0x1B21CF888);
}

void sub_1B21CF7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x1B21CF894);
  }
  JUMPOUT(0x1B21CF898);
}

void sub_1B21CF7DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B21CF8A0);
}

void sub_1B21CF7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  JUMPOUT(0x1B21CF888);
}

void sub_1B21CF804()
{
}

void sub_1B21CF810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataOnDisk(a10);
  }
  if (v10) {
    MEMORY[0x1B3EA8670](v11, 0x1070C40E0CA08F1);
  }
  JUMPOUT(0x1B21CF84CLL);
}

void sub_1B21CF8B0()
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x218]);
  if (v0 < 0) {
    JUMPOUT(0x1B21CF934);
  }
  JUMPOUT(0x1B21CF938);
}

void sub_1B21CF8C0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B21CF938);
}

void sub_1B21CF8E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (a29 < 0) {
    JUMPOUT(0x1B21CF934);
  }
  JUMPOUT(0x1B21CF938);
}

void sub_1B21CF940()
{
}

void *std::__fs::filesystem::operator<<[abi:ne180100]<char,std::char_traits<char>,0>(void *a1, uint64_t *a2)
{
  uint64_t v3 = *((unsigned __int8 *)a2 + 23);
  uint64_t v4 = a2[1];
  if ((v3 & 0x80u) != 0)
  {
    a2 = (uint64_t *)*a2;
    uint64_t v3 = v4;
  }
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(a1, a2, (unsigned char *)a2 + v3, 0x22u, 0x5Cu);
  return a1;
}

BOOL std::__fs::filesystem::operator!=[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2 = *((void *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) != 0;
}

double std::__fs::filesystem::path::extension[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void std::make_unique[abi:ne180100]<kaldi::quasar::ShortlistDataInManyFiles,std::__fs::filesystem::path,std::__fs::filesystem::path,std::unordered_map<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>()
{
}

void sub_1B21CFB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::~__hash_table((uint64_t)&a10);
  if (a20 < 0) {
    operator delete(__p);
  }
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned long &,int,int,BOOL,char const(&)[1],std::shared_ptr<kaldi::Timer const>,int>((uint64_t)&a22);
  MEMORY[0x1B3EA8670](v22, 0x10B3C409C5B7BD4);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__emplace_unique_key_args<std::string,std::string,kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  v16[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((_DWORD *)v16 + 14) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B21CFE3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>,std::reverse_iterator<std::vector<std::vector<int>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<int>>>,std::reverse_iterator<std::vector<std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__emplace_unique_key_args<std::__fs::filesystem::path,std::piecewise_construct_t const&,std::tuple<std::__fs::filesystem::path const&>,std::tuple<>>(uint64_t **a1, std::basic_string_view<_CharT, _Traits>::size_type a2, uint64_t a3, long long **a4)
{
  v12.__size_ = a2;
  v12.__data_ = (const std::string_view::value_type *)&v11;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__find_equal<std::__fs::filesystem::path>((uint64_t)a1, v12);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__find_equal<std::__fs::filesystem::path>(uint64_t a1, std::__fs::filesystem::path::__string_view a2)
{
  int data = (std::string_view::value_type *)a2.__data_;
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    std::string::size_type size = (const std::__fs::filesystem::path *)a2.__size_;
    do
    {
      while (1)
      {
        uint64_t v6 = (void *)v3;
        uint64_t v7 = (const std::__fs::filesystem::path *)(v3 + 32);
        a2.__data_ = (const std::string_view::value_type *)(v3 + 32);
        if (!std::__fs::filesystem::operator<[abi:ne180100](size, a2)) {
          break;
        }
        uint64_t v3 = *v6;
        uint64_t v4 = v6;
        if (!*v6) {
          goto LABEL_10;
        }
      }
      a2.__data_ = (const std::string_view::value_type *)size;
      if (!std::__fs::filesystem::operator<[abi:ne180100](v7, a2)) {
        break;
      }
      uint64_t v4 = v6 + 1;
      uint64_t v3 = v6[1];
    }
    while (v3);
  }
  else
  {
    uint64_t v6 = (void *)(a1 + 8);
  }
LABEL_10:
  *(void *)int data = v6;
  return v4;
}

uint64_t std::__fs::filesystem::operator<[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2 = *((void *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) >> 31;
}

void std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::shared_ptr[abi:ne180100]<kaldi::quasar::ShortlistDataOnDisk,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B21D0190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<kaldi::quasar::ShortlistDataOnDisk>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::ShortlistDataOnDisk *,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_default_delete<kaldi::quasar::ShortlistDataOnDisk,kaldi::quasar::ShortlistDataOnDisk>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_pointer<kaldi::quasar::ShortlistDataOnDisk *,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_default_delete<kaldi::quasar::ShortlistDataOnDisk,kaldi::quasar::ShortlistDataOnDisk>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ShortlistDataOnDisk *,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::__shared_ptr_default_delete<kaldi::quasar::ShortlistDataOnDisk,kaldi::quasar::ShortlistDataOnDisk>,std::allocator<kaldi::quasar::ShortlistDataOnDisk>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<kaldi::quasar::ShortlistDataOnDisk>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v3 = 0;
    while (1)
    {
      if (LOBYTE(a2[v3 + 15]))
      {
        uint64_t v4 = a2[v3 + 13];
        if (v4) {
          MEMORY[0x1B3EA8630](v4, 0x1000C8077774924);
        }
      }
      v3 -= 3;
      if (v3 == -6)
      {
        uint64_t v5 = 0;
        while (1)
        {
          if (LOBYTE(a2[v5 + 9]))
          {
            uint64_t v6 = a2[v5 + 7];
            if (v6) {
              MEMORY[0x1B3EA8630](v6, 0x1000C8077774924);
            }
          }
          v5 -= 3;
          if (v5 == -9)
          {
            uint64_t v7 = *a2;
            *a2 = 0;
            if (v7) {
              (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
            }
            JUMPOUT(0x1B3EA8670);
          }
        }
      }
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__emplace_unique_key_args<std::__fs::filesystem::path,std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &>(uint64_t **a1, std::basic_string_view<_CharT, _Traits>::size_type a2, long long *a3, std::string::size_type *a4)
{
  v13.__size_ = a2;
  v13.__data_ = (const std::string_view::value_type *)&v12;
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__find_equal<std::__fs::filesystem::path>((uint64_t)a1, v13);
  long long v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__construct_node<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v9, v11[0]);
    long long v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

std::string *std::__tree<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>::__construct_node<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, std::string::size_type *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  long long v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = std::pair<std::__fs::filesystem::path const,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>::pair[abi:ne180100]<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &,0>((std::string *)(v8 + 32), a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1B21D0424(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::__fs::filesystem::path const,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>::pair[abi:ne180100]<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

void quasar::symbolicMatch(uint64_t a1, uint64_t a2)
{
  char v2 = 0;
  uint64_t v3 = 0;
  fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase(a2, a1);
}

void sub_1B21D058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v11);
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a9);
  fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a11);
  _Unwind_Resume(a1);
}

void sub_1B21D0654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B21D09DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_1B21D0BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B21D0D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void sub_1B21D1014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);

  _Unwind_Resume(a1);
}

void sub_1B21D1170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t _getNSDataForLastRowInMatrix(uint64_t a1)
{
  uint64_t v2 = *(void *)a1 + 4 * (int)(*(_DWORD *)(a1 + 16) * (kaldi::MatrixBase<float>::NumRows(a1) - 1));
  kaldi::MatrixBase<float>::NumCols(a1);
  uint64_t v3 = 4 * (int)kaldi::MatrixBase<float>::NumCols(a1);
  uint64_t v4 = (void *)MEMORY[0x1E4F1C9B8];
  return [v4 dataWithBytes:v2 length:v3];
}

void sub_1B21D14C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

id _getNSDataForLastNRowsInMatrix(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 4 * (int)kaldi::MatrixBase<float>::NumCols(a1);
  long long v5 = [MEMORY[0x1E4F1CA58] dataWithCapacity:v4 * a2];
  for (int i = kaldi::MatrixBase<float>::NumRows(a1) - a2; i < (int)kaldi::MatrixBase<float>::NumRows(a1); ++i)
    [v5 appendBytes:*(void *)a1 + 4 * *(_DWORD *)(a1 + 16) * i length:v4];
  return v5;
}

void sub_1B21D15BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B21D1894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SyncPSRAudioProcessor,std::allocator<quasar::SyncPSRAudioProcessor>,quasar::SystemConfig &,std::string,unsigned long &,void>@<X0>(quasar::SystemConfig *a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  long long v8 = operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::allocator<quasar::SyncPSRAudioProcessor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1B21D1A54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::allocator<quasar::SyncPSRAudioProcessor>,0>(void *a1, quasar::SystemConfig *a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60E90;
  quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor((uint64_t)(a1 + 3), a2, a3, *a4, 120);
  return a1;
}

void sub_1B21D1AB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60E90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60E90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::SyncPSRAudioProcessor>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::SyncPSRAudioProcessor>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  kaldi::Matrix<float>::~Matrix(a2 + 88);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v5 = (void **)(a2 + 40);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 32);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (void **)a2;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void quasar::result_handler::VoiceEditingResultHandlerConfig::VoiceEditingResultHandlerConfig(quasar::result_handler::VoiceEditingResultHandlerConfig *this, const quasar::SystemConfig *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)this = xmmword_1B25A1250;
  *((_OWORD *)this + 1) = xmmword_1B25A1260;
  *((_OWORD *)this + 2) = xmmword_1B25A1270;
  *((void *)this + 6) = 0xF000000000;
  *((_DWORD *)this + 14) = 2;
  *((unsigned char *)this + 60) = 0;
  *((void *)this + 8) = 0x300000005;
  std::string::basic_string[abi:ne180100]<0>(__p, "at|did it");
  int v6 = 3;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)this + 72, (unsigned __int8 *)__p, 1);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>((void *)this + 14, "and|in|at|so|did|also|at .*");
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.result-handler");
  quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
}

void sub_1B21D1D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 135) < 0) {
    operator delete(*v17);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandlerConfig::read(quasar::result_handler::VoiceEditingResultHandlerConfig *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "command-leading-pause-ms");
  quasar::PTree::getIntOptional<int>((uint64_t)a2, (uint64_t)__p);
}

void sub_1B21D2330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::result_handler::VoiceEditingResultHandler::VoiceEditingResultHandler(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, void *a5)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F0A1C800;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 80) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 32) = v10;
  std::unordered_map<std::string,int>::unordered_map(a1 + 88, a2 + 72);
  uint64_t v13 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 144) = *(void *)(a2 + 128);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  uint64_t v15 = *a3;
  *a3 = 0;
  *(void *)(a1 + 152) = v15;
  *(void *)(a1 + 160) = *a4;
  uint64_t v16 = a4[1];
  *(void *)(a1 + 168) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 176) = *a5;
  uint64_t v17 = a5[1];
  *(void *)(a1 + 184) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(void *)(a1 + 308) = 0;
  *(void *)(a1 + 320) = 30;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,void *>,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,void *>>>>::unordered_map(a1 + 328, 0, (char *)&v39, v40);
  *(void *)(a1 + 376) = a1 + 376;
  *(void *)(a1 + 384) = a1 + 376;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 508) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 605) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  uint64_t v18 = *(void *)(a2 + 88);
  if (v18) {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&v39, v18 + 16, 0);
  }
  uint64_t v19 = *(unsigned __int8 *)(a2 + 135);
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a2 + 120);
  }
  if (v19) {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((std::regex_traits<char> *)v22, a2 + 112, 0);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)&v22[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Created VoiceEditingResultHandler, parser=", 42);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v22);
  }
  return a1;
}

void sub_1B21D2770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale *a15, uint64_t a16, std::locale a17)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v18);
  quasar::Bitmap::~Bitmap(v17);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::basic_regex<char,std::regex_traits<char>>>::operator=[abi:ne180100]<std::basic_regex<char,std::regex_traits<char>>,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 8);
  char v5 = (_OWORD *)(a2 + 8);
  int v6 = (_OWORD *)(a1 + 24);
  uint64_t v7 = (_OWORD *)(a2 + 24);
  long long v8 = (void *)(a2 + 40);
  if (*(unsigned char *)(a1 + 64))
  {
    std::locale::operator=((std::locale *)a1, (const std::locale *)a2);
    *uint64_t v4 = *v5;
    _OWORD *v6 = *v7;
    long long v9 = *(_OWORD *)(a2 + 40);
    *long long v8 = 0;
    v8[1] = 0;
    long long v10 = *(std::__shared_weak_count **)(a1 + 48);
    *(_OWORD *)(a1 + 40) = v9;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
  }
  else
  {
    std::locale::locale((std::locale *)a1, (const std::locale *)a2);
    *uint64_t v4 = *v5;
    _OWORD *v6 = *v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *long long v8 = 0;
    v8[1] = 0;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = 1;
  }
  return a1;
}

void quasar::PartialHistory::~PartialHistory(quasar::PartialHistory *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::pair<std::vector<std::vector<quasar::Token>>,std::vector<int>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)a1;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void quasar::result_handler::VoiceEditingResultHandler::~VoiceEditingResultHandler(quasar::result_handler::VoiceEditingResultHandler *this)
{
  *(void *)this = &unk_1F0A1C800;
  if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Destroying VoiceEditingResultHandler, parser=", 45);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  uint64_t v3 = (quasar::corrective_reranking::PhoneticMatcher **)*((void *)this + 20);
  if (v3) {
    quasar::corrective_reranking::Parser::clearLongTermCache(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 81);
  if (v4)
  {
    *((void *)this + 82) = v4;
    operator delete(v4);
  }
  *(void *)&v10[0] = (char *)this + 624;
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  char v5 = (void *)*((void *)this + 73);
  if (v5)
  {
    *((void *)this + 74) = v5;
    operator delete(v5);
  }
  *(void *)&v10[0] = (char *)this + 560;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  int v6 = (void *)*((void *)this + 67);
  if (v6)
  {
    *((void *)this + 68) = v6;
    operator delete(v6);
  }
  *(void *)&v10[0] = (char *)this + 512;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)this + 464);
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 52, 0);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 51, 0);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 50, 0);
  std::__list_imp<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>>::clear((uint64_t *)this + 47);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 328);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)this + 37, 0);
  std::__optional_destruct_base<std::basic_regex<char,std::regex_traits<char>>,false>::~__optional_destruct_base[abi:ne180100]((std::locale *)this + 27);
  *(void *)&v10[0] = (char *)this + 192;
  std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 88);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::result_handler::VoiceEditingResultHandler::~VoiceEditingResultHandler(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(quasar::result_handler::VoiceEditingResultHandler *this, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v4 = a2;
  v5[0] = &unk_1F0A1CD20;
  v5[1] = this;
  v5[3] = v5;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v5);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
  *((unsigned char *)this + 508) = (*(uint64_t (**)(void))(**((void **)this + 22) + 32))(*((void *)this + 22));
  *((unsigned char *)this + 509) = (*(uint64_t (**)(void))(**((void **)this + 22) + 24))(*((void *)this + 22));
  if (a2 >= 1) {
    *((unsigned char *)this + 288) = 1;
  }
  (*(void (**)(quasar::result_handler::VoiceEditingResultHandler *, int *))(*(void *)this + 72))(this, &v4);
  quasar::result_handler::VoiceEditingResultHandler::runCommandLogic(this);
  quasar::result_handler::VoiceEditingResultHandler::runSuppressionLogic((uint64_t)this);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v6);
}

void sub_1B21D2DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::runCommandLogic(quasar::result_handler::VoiceEditingResultHandler *this)
{
  char v1 = (quasar::result_handler::Package *)*((void *)this + 37);
  if (v1)
  {
    uint64_t v3 = (quasar::result_handler::Package **)((char *)this + 296);
    int v4 = (void *)*((void *)v1 + 6);
    if (v4 == *((void **)v1 + 7) || *v4 == v4[1])
    {
      std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](v3, 0);
    }
    else
    {
      if (*((void *)v1 + 20) != *((void *)v1 + 21) || *((unsigned char *)v1 + 368)) {
        goto LABEL_52;
      }
      int v27 = *((_DWORD *)v1 + 19);
      int started = quasar::result_handler::topChoiceSilStartMs((uint64_t)v1 + 48);
      int v29 = *((_DWORD *)this + 5);
      std::string::basic_string[abi:ne180100]<0>(__p, "eager non-command send");
      long long v30 = operator new(4uLL);
      int v31 = started + v29 + v27;
      std::__fs::filesystem::path::__string_view v55 = v30;
      _DWORD *v30 = v31;
      long long v56 = v30 + 1;
      int32x2_t v57 = v30 + 1;
      quasar::result_handler::VoiceEditingResultHandler::logDeadlines((uint64_t)this, (uint64_t)__p, (uint64_t *)&v55);
      if (v55)
      {
        long long v56 = v55;
        operator delete(v55);
      }
      if (SBYTE7(v39) < 0) {
        operator delete(__p[0]);
      }
      if (*((_DWORD *)this + 2) >= v31)
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          *(_OWORD *)std::__fs::filesystem::path __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"(now=", 5);
          long long v33 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)") sending non-command candidate package for non-suppressed partials", 67);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        uint64_t v34 = *((void *)this + 37);
        *((void *)this + 37) = 0;
        uint64_t v37 = v34;
        quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate((uint64_t)this, (uint64_t)&v37);
      }
      char v1 = *v3;
      if (*v3)
      {
LABEL_52:
        if (*((unsigned char *)v1 + 368))
        {
          int v5 = *((_DWORD *)v1 + 19);
          int v6 = quasar::result_handler::topChoiceSilStartMs((uint64_t)v1 + 48);
          int v7 = *((_DWORD *)this + 113);
          if (v7 <= *((_DWORD *)this + 114)) {
            uint64_t v8 = 0;
          }
          else {
            uint64_t v8 = (*((_DWORD *)this + 6) + v7);
          }
          int v9 = *((_DWORD *)this + 5);
          std::string::basic_string[abi:ne180100]<0>(__p, "eager command send");
          long long v10 = operator new(8uLL);
          uint64_t v11 = (v6 + v9 + v5);
          std::__fs::filesystem::path::__string_view v55 = v10;
          *long long v10 = v11 | (v8 << 32);
          long long v56 = v10 + 1;
          int32x2_t v57 = v10 + 1;
          quasar::result_handler::VoiceEditingResultHandler::logDeadlines((uint64_t)this, (uint64_t)__p, (uint64_t *)&v55);
          if (v55)
          {
            long long v56 = v55;
            operator delete(v55);
          }
          if (SBYTE7(v39) < 0) {
            operator delete(__p[0]);
          }
          int v12 = *((_DWORD *)this + 2);
          if (v12 >= (int)v11 && v12 >= (int)v8)
          {
            if (quasar::gLogLevel >= 5)
            {
              long long v53 = 0u;
              long long v54 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              long long v49 = 0u;
              long long v50 = 0u;
              long long v47 = 0u;
              long long v48 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              long long v43 = 0u;
              long long v44 = 0u;
              long long v41 = 0u;
              long long v42 = 0u;
              long long v39 = 0u;
              long long v40 = 0u;
              *(_OWORD *)std::__fs::filesystem::path __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(now=", 5);
              long long v14 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)") sending command candidate package", 35);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
            }
            uint64_t v15 = (quasar::result_handler::Package *)*((void *)this + 37);
            *((void *)this + 37) = 0;
            long long v36 = v15;
            quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate((uint64_t)this, (uint64_t)&v36);
          }
        }
        uint64_t v16 = *v3;
        if (*v3)
        {
          int v17 = *((_DWORD *)v16 + 19);
          int v18 = quasar::result_handler::topChoiceSilStartMs((uint64_t)v16 + 48);
          int v19 = *((_DWORD *)this + 7);
          std::string::basic_string[abi:ne180100]<0>(__p, "thought pause stop");
          unint64_t v20 = operator new(4uLL);
          int v21 = v18 + v19 + v17;
          std::__fs::filesystem::path::__string_view v55 = v20;
          *unint64_t v20 = v21;
          long long v56 = v20 + 1;
          int32x2_t v57 = v20 + 1;
          quasar::result_handler::VoiceEditingResultHandler::logDeadlines((uint64_t)this, (uint64_t)__p, (uint64_t *)&v55);
          if (v55)
          {
            long long v56 = v55;
            operator delete(v55);
          }
          if (SBYTE7(v39) < 0) {
            operator delete(__p[0]);
          }
          if (*((_DWORD *)this + 2) >= v21)
          {
            if (quasar::gLogLevel >= 5)
            {
              long long v53 = 0u;
              long long v54 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              long long v49 = 0u;
              long long v50 = 0u;
              long long v47 = 0u;
              long long v48 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              long long v43 = 0u;
              long long v44 = 0u;
              long long v41 = 0u;
              long long v42 = 0u;
              long long v39 = 0u;
              long long v40 = 0u;
              *(_OWORD *)std::__fs::filesystem::path __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(now=", 5);
              long long v25 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") sending command candidate package after thought pause", 55);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
            }
            long long v26 = (quasar::result_handler::Package *)*((void *)this + 37);
            *((void *)this + 37) = 0;
            long long v35 = v26;
            quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate((uint64_t)this, (uint64_t)&v35);
          }
        }
      }
      if (*((void *)this + 51) && *((int *)this + 126) >= 1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "non-command send for suppressed partials");
        int v22 = *((_DWORD *)this + 126);
        long long v23 = operator new(4uLL);
        std::__fs::filesystem::path::__string_view v55 = v23;
        _DWORD *v23 = v22;
        long long v56 = v23 + 1;
        int32x2_t v57 = v23 + 1;
        quasar::result_handler::VoiceEditingResultHandler::logDeadlines((uint64_t)this, (uint64_t)__p, (uint64_t *)&v55);
        if (v55)
        {
          long long v56 = v55;
          operator delete(v55);
        }
        if (SBYTE7(v39) < 0) {
          operator delete(__p[0]);
        }
        if (*((_DWORD *)this + 2) >= *((_DWORD *)this + 126)) {
          std::make_unique[abi:ne180100]<quasar::result_handler::Package,quasar::result_handler::Package&>();
        }
      }
    }
  }
}

void sub_1B21D342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(v24 - 88), 0);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::VoiceEditingResultHandler::runSuppressionLogic(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 400);
  if (v1)
  {
    uint64_t v2 = this;
    unsigned int v3 = *(_DWORD *)(this + 8);
    int v4 = v3 - *(_DWORD *)(this + 308);
    int v5 = *(quasar::Token ***)(v1 + 48);
    this = v1 + 48;
    if (v5 != *(quasar::Token ***)(v1 + 56) && !*(unsigned char *)(v2 + 508) && !*(unsigned char *)(v2 + 509))
    {
      int v6 = *(_DWORD *)(v1 + 76);
      this = quasar::result_handler::topChoiceSilStartMs(this);
      if (v3 >= (int)this + *(_DWORD *)(v2 + 44) + v6 && v4 <= *(_DWORD *)(v2 + 8)) {
        int v4 = *(_DWORD *)(v2 + 8);
      }
      int v7 = v5[1];
      if (v7 != *v5)
      {
        int v8 = 0;
        int v9 = (quasar::Token *)((char *)v7 - 224);
        do
        {
          int v10 = *((_DWORD *)v9 + 8) + *(_DWORD *)(*(void *)(v2 + 400) + 76);
          if (v4 >= v10) {
            break;
          }
          int v11 = *(_DWORD *)(v2 + 36);
          if ((v11 & 0x80000000) == 0 && v8 >= v11)
          {
            int v13 = v10 - 1;
            if (v4 <= v13) {
              int v4 = v13;
            }
            break;
          }
          this = quasar::Token::isAutoPunctuation(v9);
          v8 += this ^ 1;
          BOOL v12 = v9 == *v5;
          int v9 = (quasar::Token *)((char *)v9 - 224);
        }
        while (!v12);
      }
    }
    if (v4 >= *(_DWORD *)(v2 + 312))
    {
      *(_DWORD *)(v2 + 312) = v4;
      operator new();
    }
  }
  return this;
}

void sub_1B21D3EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(v36 - 88), 0);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::handlePartial(uint64_t a1, signed int a2, uint64_t **a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  signed int v68 = a2;
  v86[0] = &unk_1F0A1CCC8;
  v86[1] = a1;
  v86[3] = v86;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v87, (uint64_t)v86);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v86);
  *(unsigned char *)(a1 + 508) = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 32))(*(void *)(a1 + 176));
  *(unsigned char *)(a1 + 509) = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 24))(*(void *)(a1 + 176));
  (*(void (**)(uint64_t, signed int *))(*(void *)a1 + 72))(a1, &v68);
  int v5 = *a3;
  quasar::result_handler::clean(*a3);
  quasar::result_handler::clean(v5 + 3);
  quasar::result_handler::clean(v5 + 6);
  int v6 = *a3;
  signed int v7 = v68;
  signed int v8 = *((_DWORD *)*a3 + 19);
  if (v8 > v68)
  {
    *((_DWORD *)v6 + 19) = v68;
    signed int v8 = v7;
    if (quasar::gLogLevel >= 5)
    {
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      *(_OWORD *)uint64_t v69 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
      int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Utterance timestamp is too large and likely wrong. Clamping it.", 63);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
      signed int v8 = *((_DWORD *)v6 + 19);
    }
  }
  unsigned int v10 = v7 - v8;
  quasar::result_handler::clampTimestampsIfNeeded((uint64_t)v6, v10);
  quasar::result_handler::clampTimestampsIfNeeded((uint64_t)(v6 + 3), v10);
  quasar::result_handler::clampTimestampsIfNeeded((uint64_t)(v6 + 6), v10);
  int v11 = (uint64_t *)**a3;
  BOOL v12 = (uint64_t *)(a1 + 512);
  if ((uint64_t *)(*a3)[1] == v11)
  {
    v69[0] = 0;
    v69[1] = 0;
    *(void *)&long long v70 = 0;
    std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](v12, (uint64_t)v69);
    v59[0] = v69;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
  }
  else
  {
    unint64_t v13 = *(void *)(a1 + 520);
    if (v13 >= *(void *)(a1 + 528))
    {
      uint64_t v14 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v12, v11);
    }
    else
    {
      std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v12, v11);
      uint64_t v14 = v13 + 24;
    }
    *(void *)(a1 + 520) = v14;
  }
  uint64_t v15 = *(signed int **)(a1 + 544);
  unint64_t v16 = *(void *)(a1 + 552);
  if ((unint64_t)v15 >= v16)
  {
    int v18 = *(signed int **)(a1 + 536);
    uint64_t v19 = v15 - v18;
    if ((unint64_t)(v19 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v20 = v16 - (void)v18;
    unint64_t v21 = (uint64_t)(v16 - (void)v18) >> 1;
    if (v21 <= v19 + 1) {
      unint64_t v21 = v19 + 1;
    }
    if (v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22)
    {
      long long v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 552, v22);
      uint64_t v15 = *(signed int **)(a1 + 544);
      int v18 = *(signed int **)(a1 + 536);
    }
    else
    {
      long long v23 = 0;
    }
    uint64_t v24 = (signed int *)&v23[4 * v19];
    long long v25 = &v23[4 * v22];
    signed int *v24 = v68;
    int v17 = v24 + 1;
    while (v15 != v18)
    {
      signed int v26 = *--v15;
      *--uint64_t v24 = v26;
    }
    *(void *)(a1 + 536) = v24;
    *(void *)(a1 + 544) = v17;
    *(void *)(a1 + 552) = v25;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v15 = v68;
    int v17 = v15 + 1;
  }
  *(void *)(a1 + 544) = v17;
  if (quasar::gLogLevel >= 5)
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    *(_OWORD *)uint64_t v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"(now=", 5);
    long long v28 = (void *)std::ostream::operator<<();
    int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)") recv partial: ", 16);
    quasar::getTopChoice((uint64_t)(*a3 + 6), 1, v59);
    if ((v60 & 0x80u) == 0) {
      long long v30 = v59;
    }
    else {
      long long v30 = (void **)v59[0];
    }
    if ((v60 & 0x80u) == 0) {
      uint64_t v31 = v60;
    }
    else {
      uint64_t v31 = (uint64_t)v59[1];
    }
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ::::: ", 7);
    quasar::topChoiceWithTimes((uint64_t **)*a3 + 6, v66);
    if (v67 >= 0) {
      uint64_t v34 = v66;
    }
    else {
      uint64_t v34 = (void **)v66[0];
    }
    if (v67 >= 0) {
      uint64_t v35 = HIBYTE(v67);
    }
    else {
      uint64_t v35 = (uint64_t)v66[1];
    }
    uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" utteranceStartMs=", 18);
    uint64_t v37 = (void *)std::ostream::operator<<();
    long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" ::::: preItn=", 14);
    quasar::topChoiceWithTimes((uint64_t **)*a3, &__p);
    if ((v65 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v65 & 0x80u) == 0) {
      uint64_t v40 = v65;
    }
    else {
      uint64_t v40 = v64;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)p_p, v40);
    if ((char)v65 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v67) < 0) {
      operator delete(v66[0]);
    }
    if ((char)v60 < 0) {
      operator delete(v59[0]);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
  }
  std::string::basic_string[abi:ne180100]<0>(v69, "partial");
  quasar::result_handler::VoiceEditingResultHandler::logSnippet(a1, (uint64_t)v69, (uint64_t)*a3);
  if (SBYTE7(v70) < 0) {
    operator delete(v69[0]);
  }
  if (!*(void *)(a1 + 160) && quasar::gLogLevel >= 5)
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    *(_OWORD *)uint64_t v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    long long v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Parser is unavailable", 21);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
  }
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 176) + 16))(v59);
  v66[0] = 0;
  v66[1] = 0;
  uint64_t v67 = 0;
  uint64_t v42 = *(void *)(a1 + 160);
  if (v42)
  {
    quasar::result_handler::findPartialCommands(v42, (uint64_t)v59, (uint64_t)&v61, *a3 + 6, *a3, *(unsigned __int8 *)(a1 + 509), (_DWORD *)(a1 + 16), (unint64_t *)(a1 + 320), (uint64_t *)v69, (quasar::PartialHistory *)(a1 + 624));
    std::vector<quasar::result_handler::CommandData>::__vdeallocate(v66);
    *(_OWORD *)unsigned int v66 = *(_OWORD *)v69;
    uint64_t v67 = v70;
    v69[1] = 0;
    *(void *)&long long v70 = 0;
    v69[0] = 0;
    std::__fs::filesystem::path __p = v69;
    std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    *(_OWORD *)uint64_t v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    long long v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(now=", 5);
    long long v44 = (void *)std::ostream::operator<<();
    long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") handlePartial: partialCommands before filter: ", 48);
    int32x2_t v57 = " ";
    uint64_t v58 = 1;
    quasar::join<std::vector<quasar::result_handler::CommandData>>((uint64_t *)v66, (uint64_t *)&v57);
    if ((v65 & 0x80u) == 0) {
      long long v46 = &__p;
    }
    else {
      long long v46 = __p;
    }
    if ((v65 & 0x80u) == 0) {
      uint64_t v47 = v65;
    }
    else {
      uint64_t v47 = v64;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
    if ((char)v65 < 0) {
      operator delete(__p);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
  }
  memset(v56, 0, sizeof(v56));
  std::vector<quasar::result_handler::CommandData>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(v56, (uint64_t)v66[0], (uint64_t)v66[1], 0xD37A6F4DE9BD37A7 * (((char *)v66[1] - (char *)v66[0]) >> 3));
  quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForSuppression(a1, v56, *((_DWORD *)*a3 + 19), v68, (uint64_t *)v69);
  std::vector<quasar::result_handler::CommandData>::__vdeallocate(v66);
  *(_OWORD *)unsigned int v66 = *(_OWORD *)v69;
  uint64_t v67 = v70;
  v69[1] = 0;
  *(void *)&long long v70 = 0;
  v69[0] = 0;
  std::__fs::filesystem::path __p = v69;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__fs::filesystem::path __p = v56;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (quasar::gLogLevel >= 5)
  {
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    *(_OWORD *)uint64_t v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
    long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"(now=", 5);
    long long v49 = (void *)std::ostream::operator<<();
    long long v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)") handlePartial: partialCommands after filter: ", 47);
    int32x2_t v57 = " ";
    uint64_t v58 = 1;
    quasar::join<std::vector<quasar::result_handler::CommandData>>((uint64_t *)v66, (uint64_t *)&v57);
    if ((v65 & 0x80u) == 0) {
      long long v51 = &__p;
    }
    else {
      long long v51 = __p;
    }
    if ((v65 & 0x80u) == 0) {
      uint64_t v52 = v65;
    }
    else {
      uint64_t v52 = v64;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
    if ((char)v65 < 0) {
      operator delete(__p);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
  }
  quasar::result_handler::VoiceEditingResultHandler::updateSuppressionState(a1, (uint64_t *)v66, 0);
  long long v53 = *a3;
  *a3 = 0;
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 400), (quasar::result_handler::Package *)v53);
  quasar::result_handler::VoiceEditingResultHandler::runSuppressionLogic(a1);
  if (*(unsigned char *)(a1 + 304))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      *(_OWORD *)uint64_t v69 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v69);
      long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"(now=", 5);
      std::__fs::filesystem::path::__string_view v55 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)") resetting nonCommandCandidatePackageDeadline to 0 since we're starting to suppress partials", 93);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v69);
    }
    *(_DWORD *)(a1 + 504) = 0;
  }
  *(_DWORD *)(a1 + 452) = v68;
  v69[0] = v66;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)v69);
  if (v62 < 0) {
    operator delete(v61);
  }
  if ((char)v60 < 0) {
    operator delete(v59[0]);
  }
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v87);
}

void sub_1B21D496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void **a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a38 = &a31;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&a38);
  std::pair<std::string,std::string>::~pair((uint64_t)&a16);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)(v43 - 88));
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::logSnippet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v115 = 0;
  unint64_t v116 = 0;
  unint64_t v117 = 0;
  unint64_t v112 = 0;
  uint64_t v113 = 0;
  unint64_t v114 = 0;
  int v5 = *(uint64_t **)a3;
  if (*(void *)a3 == *(void *)(a3 + 8) || (v6 = *v5, uint64_t v7 = v5[1], *v5 == v7))
  {
    BOOL v12 = 0;
  }
  else if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v7 - v6) >> 5)) > 3)
  {
    uint64_t v67 = 0;
    unint64_t v68 = 0;
    uint64_t v69 = -1;
    do
    {
      long long v70 = (const quasar::Token *)(v6 + v67);
      long long v71 = v116;
      if ((unint64_t)v116 >= v117)
      {
        long long v72 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(&v115, v70);
      }
      else
      {
        quasar::Token::Token(v116, v70);
        long long v72 = (std::string *)((char *)v71 + 224);
      }
      unint64_t v116 = v72;
      long long v73 = (const quasar::Token *)(*v5 + 224 * (v69 + (v5[1] - *v5) / 224));
      long long v74 = v113;
      if ((unint64_t)v113 >= v114)
      {
        BOOL v12 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>((uint64_t *)&v112, v73);
      }
      else
      {
        quasar::Token::Token(v113, v73);
        BOOL v12 = (std::string *)((char *)v74 + 224);
      }
      uint64_t v113 = v12;
      if (v68 > 1) {
        break;
      }
      ++v68;
      uint64_t v6 = *v5;
      v67 += 224;
      --v69;
    }
    while ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5)) >> 1 > v68);
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
    unint64_t v10 = 0;
    do
    {
      int v11 = (const quasar::Token *)(v6 + v8);
      if ((unint64_t)v9 >= v117)
      {
        int v9 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(&v115, v11);
      }
      else
      {
        quasar::Token::Token(v9, v11);
        int v9 = (std::string *)((char *)v9 + 224);
      }
      unint64_t v116 = v9;
      if (v10 > 1) {
        break;
      }
      ++v10;
      uint64_t v6 = *v5;
      v8 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v5[1] - *v5) >> 5) > v10);
    BOOL v12 = v113;
  }
  unint64_t v13 = v112;
  uint64_t v14 = (long long *)&v12[-10].__r_.__value_.__r.__words[2];
  if ((std::string *)v112 != v12 && (unint64_t)v14 > v112)
  {
    do
    {
      std::swap[abi:ne180100]<quasar::Token>(v13, v14);
      v13 += 224;
      v14 -= 14;
    }
    while (v13 < (unint64_t)v14);
  }
  uint64_t v109 = 0;
  BOOL v110 = 0;
  unint64_t v111 = 0;
  unint64_t v106 = 0;
  uint64_t v107 = 0;
  unint64_t v108 = 0;
  unint64_t v16 = *(uint64_t **)(a3 + 48);
  if (v16 == *(uint64_t **)(a3 + 56) || (v17 = *v16, uint64_t v18 = v16[1], *v16 == v18))
  {
    long long v23 = 0;
  }
  else if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v18 - v17) >> 5)) > 3)
  {
    uint64_t v75 = 0;
    unint64_t v76 = 0;
    uint64_t v77 = -1;
    do
    {
      long long v78 = (const quasar::Token *)(v17 + v75);
      long long v79 = v110;
      if ((unint64_t)v110 >= v111)
      {
        long long v80 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(&v109, v78);
      }
      else
      {
        quasar::Token::Token(v110, v78);
        long long v80 = (std::string *)((char *)v79 + 224);
      }
      BOOL v110 = v80;
      long long v81 = (const quasar::Token *)(*v16 + 224 * (v77 + (v16[1] - *v16) / 224));
      long long v82 = v107;
      if ((unint64_t)v107 >= v108)
      {
        long long v23 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>((uint64_t *)&v106, v81);
      }
      else
      {
        quasar::Token::Token(v107, v81);
        long long v23 = (std::string *)((char *)v82 + 224);
      }
      uint64_t v107 = v23;
      if (v76 > 1) {
        break;
      }
      ++v76;
      uint64_t v17 = *v16;
      v75 += 224;
      --v77;
    }
    while ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v16[1] - *v16) >> 5)) >> 1 > v76);
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    do
    {
      unint64_t v22 = (const quasar::Token *)(v17 + v19);
      if ((unint64_t)v20 >= v111)
      {
        unint64_t v20 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(&v109, v22);
      }
      else
      {
        quasar::Token::Token(v20, v22);
        unint64_t v20 = (std::string *)((char *)v20 + 224);
      }
      BOOL v110 = v20;
      if (v21 > 1) {
        break;
      }
      ++v21;
      uint64_t v17 = *v16;
      v19 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v16[1] - *v16) >> 5) > v21);
    long long v23 = v107;
  }
  unint64_t v24 = v106;
  long long v25 = (long long *)&v23[-10].__r_.__value_.__r.__words[2];
  if ((std::string *)v106 != v23 && (unint64_t)v25 > v106)
  {
    do
    {
      std::swap[abi:ne180100]<quasar::Token>(v24, v25);
      v24 += 224;
      v25 -= 14;
    }
    while (v24 < (unint64_t)v25);
  }
  unsigned int v27 = *(_DWORD *)(a3 + 76);
  uint64_t v28 = v115;
  int v29 = v116;
  int32x2_t v30 = vdup_n_s32(v27);
  while ((std::string *)v28 != v29)
  {
    *(_DWORD *)(v28 + 36) += v27;
    *(int32x2_t *)(v28 + 28) = vadd_s32(*(int32x2_t *)(v28 + 28), v30);
    v28 += 224;
  }
  uint64_t v31 = v112;
  long long v32 = v113;
  while ((std::string *)v31 != v32)
  {
    *(_DWORD *)(v31 + 36) += v27;
    *(int32x2_t *)(v31 + 28) = vadd_s32(*(int32x2_t *)(v31 + 28), v30);
    v31 += 224;
  }
  uint64_t v33 = v109;
  uint64_t v34 = v110;
  while ((std::string *)v33 != v34)
  {
    *(_DWORD *)(v33 + 36) += v27;
    *(int32x2_t *)(v33 + 28) = vadd_s32(*(int32x2_t *)(v33 + 28), v30);
    v33 += 224;
  }
  uint64_t v35 = v106;
  uint64_t v36 = v107;
  while ((std::string *)v35 != v36)
  {
    *(_DWORD *)(v35 + 36) += v27;
    *(int32x2_t *)(v35 + 28) = vadd_s32(*(int32x2_t *)(v35 + 28), v30);
    v35 += 224;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v89 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
    uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(now=", 5);
    long long v38 = (void *)std::ostream::operator<<();
    long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)") snippet of ", 13);
    int v40 = *(char *)(a2 + 23);
    if (v40 >= 0) {
      uint64_t v41 = a2;
    }
    else {
      uint64_t v41 = *(void *)a2;
    }
    if (v40 >= 0) {
      uint64_t v42 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v42 = *(void *)(a2 + 8);
    }
    uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": utteranceStartMs=", 19);
    long long v44 = (void *)std::ostream::operator<<();
    long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" preItn: ", 9);
    quasar::tokensWithTimes(&v115);
    if ((v88 & 0x80u) == 0) {
      long long v46 = &v86;
    }
    else {
      long long v46 = v86;
    }
    if ((v88 & 0x80u) == 0) {
      uint64_t v47 = v88;
    }
    else {
      uint64_t v47 = v87;
    }
    long long v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
    long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" ... ", 5);
    quasar::tokensWithTimes((uint64_t *)&v112);
    if ((v85 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v85 & 0x80u) == 0) {
      uint64_t v51 = v85;
    }
    else {
      uint64_t v51 = v84;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)p_p, v51);
    if ((char)v85 < 0) {
      operator delete(__p);
    }
    if ((char)v88 < 0) {
      operator delete(v86);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v89);
    if (quasar::gLogLevel >= 5)
    {
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v89);
      uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v89, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"(now=", 5);
      long long v53 = (void *)std::ostream::operator<<();
      long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)") snippet of ", 13);
      int v55 = *(char *)(a2 + 23);
      if (v55 >= 0) {
        uint64_t v56 = a2;
      }
      else {
        uint64_t v56 = *(void *)a2;
      }
      if (v55 >= 0) {
        uint64_t v57 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v57 = *(void *)(a2 + 8);
      }
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)": utteranceStartMs=", 19);
      long long v59 = (void *)std::ostream::operator<<();
      unsigned __int8 v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" postItn: ", 10);
      quasar::tokensWithTimes(&v109);
      if ((v88 & 0x80u) == 0) {
        uint64_t v61 = &v86;
      }
      else {
        uint64_t v61 = v86;
      }
      if ((v88 & 0x80u) == 0) {
        uint64_t v62 = v88;
      }
      else {
        uint64_t v62 = v87;
      }
      uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
      uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ... ", 5);
      quasar::tokensWithTimes((uint64_t *)&v106);
      if ((v85 & 0x80u) == 0) {
        unsigned __int8 v65 = &__p;
      }
      else {
        unsigned __int8 v65 = __p;
      }
      if ((v85 & 0x80u) == 0) {
        uint64_t v66 = v85;
      }
      else {
        uint64_t v66 = v84;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
      if ((char)v85 < 0) {
        operator delete(__p);
      }
      if ((char)v88 < 0) {
        operator delete(v86);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v89);
    }
  }
  *(void *)&long long v89 = &v106;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(void *)&long long v89 = &v109;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(void *)&long long v89 = &v112;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  *(void *)&long long v89 = &v115;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
}

void sub_1B21D522C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a23);
  a23 = v23 - 184;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 160;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 136;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a23 = v23 - 112;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void quasar::result_handler::findPartialCommands(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, int a6@<W5>, _DWORD *a7@<X6>, unint64_t *a8@<X7>, uint64_t *a9@<X8>, quasar::PartialHistory *a10)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  int v11 = (void *)*a4;
  if (*a4 == a4[1]
    || (uint64_t v12 = *v11, v13 = v11[1], *v11 == v13)
    || *a5 == a5[1]
    || *(void *)*a5 == *(void *)(*a5 + 8))
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    return;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v12) >> 5);
  unsigned int v15 = v14 - 1;
  if ((int)v14 < 1) {
    return;
  }
  uint64_t v17 = a1;
  uint64_t v64 = v11;
  int v18 = 0;
  uint64_t v61 = a1 + 592;
  uint64_t v62 = a9;
  unint64_t v14 = v14;
  if (v15 >= 0x1D) {
    unsigned int v15 = 29;
  }
  unsigned int v66 = v15;
  do
  {
    unint64_t v19 = v14 - 1;
    if (v14 < 2
      || (int)quasar::Token::trailingSilenceMilliseconds((quasar::Token *)(*v64 + 224 * (v14 - 2))) >= *a7)
    {
      quasar::result_handler::initSegmentation(a2, a3, (uint64_t)a4, (uint64_t)a5, v19, a10, v79);
      if (!v88)
      {
LABEL_99:
        std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v79);
        goto LABEL_100;
      }
      if ((v82 & 0x80u) == 0) {
        unint64_t v20 = v82;
      }
      else {
        unint64_t v20 = v81;
      }
      std::to_string(&v72, v20);
      unint64_t v21 = std::string::append(&v72, " ");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (v84 >= 0) {
        unint64_t v23 = HIBYTE(v84);
      }
      else {
        unint64_t v23 = *((void *)&v83 + 1);
      }
      std::to_string(&v71, v23);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v24 = &v71;
      }
      else {
        unint64_t v24 = (std::string *)v71.__r_.__value_.__r.__words[0];
      }
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v71.__r_.__value_.__l.__size_;
      }
      signed int v26 = std::string::append(&v73, (const std::string::value_type *)v24, size);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      uint64_t v28 = std::string::append(&v74, " ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if ((v82 & 0x80u) == 0) {
        int32x2_t v30 = (const std::string::value_type *)&v80;
      }
      else {
        int32x2_t v30 = v80;
      }
      if ((v82 & 0x80u) == 0) {
        std::string::size_type v31 = v82;
      }
      else {
        std::string::size_type v31 = v81;
      }
      long long v32 = std::string::append(&v75, v30, v31);
      long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      uint64_t v34 = std::string::append(&v76, " ");
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *(void *)&v89[16] = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)long long v89 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v84 >= 0) {
        uint64_t v36 = (const std::string::value_type *)&v83;
      }
      else {
        uint64_t v36 = (const std::string::value_type *)v83;
      }
      if (v84 >= 0) {
        std::string::size_type v37 = HIBYTE(v84);
      }
      else {
        std::string::size_type v37 = *((void *)&v83 + 1);
      }
      long long v38 = std::string::append((std::string *)v89, v36, v37);
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      std::string::size_type v78 = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v77 = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if ((v89[23] & 0x80000000) != 0) {
        operator delete(*(void **)v89);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (!kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Get((uint64_t)a8, (uint64_t)v77, (uint64_t)&v85))
      {
        if (SHIBYTE(v84) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v89, (const std::string::value_type *)v83, *((std::string::size_type *)&v83 + 1));
        }
        else
        {
          *(_OWORD *)long long v89 = v83;
          *(void *)&v89[16] = v84;
        }
        *(_DWORD *)&v89[24] = 0;
        memset(&v75, 0, sizeof(v75));
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
        v74.__r_.__value_.__s.__data_[8] = 0;
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        v75.__r_.__value_.__l.__size_ = v75.__r_.__value_.__r.__words[0];
        v75.__r_.__value_.__r.__words[2] = v75.__r_.__value_.__r.__words[0] + 32;
        v75.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*>((uint64_t)&v75.__r_.__value_.__r.__words[2], (long long *)v89, &v90, (std::string *)v75.__r_.__value_.__l.__data_);
        quasar::corrective_reranking::Models::generateWFSTParses(v61, 0, (uint64_t *)&v75, (unsigned __int8 *)&v80, 1, (uint64_t *)&v76);
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if ((v89[23] & 0x80000000) != 0) {
          operator delete(*(void **)v89);
        }
        quasar::corrective_reranking::CorrectiveReranker::applyOverridePhrases(*(void *)(v17 + 624), (uint64_t *)&v76, 1, (std::string::size_type)v89);
        std::vector<quasar::corrective_reranking::Parse>::__vdeallocate((void **)&v76.__r_.__value_.__l.__data_);
        std::string v76 = *(std::string *)v89;
        memset(v89, 0, 24);
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
        if (quasar::gLogLevel >= 5)
        {
          memset(v94, 0, sizeof(v94));
          memset(v93, 0, sizeof(v93));
          *(_OWORD *)std::__fs::filesystem::path __p = 0u;
          long long v92 = 0u;
          long long v90 = 0u;
          memset(v89, 0, sizeof(v89));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v89);
          int v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"VoiceEditingResultHandler: ", 27);
          uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Testing: WFST ", 14);
          if (v84 >= 0) {
            uint64_t v42 = &v83;
          }
          else {
            uint64_t v42 = (long long *)v83;
          }
          if (v84 >= 0) {
            uint64_t v43 = HIBYTE(v84);
          }
          else {
            uint64_t v43 = *((void *)&v83 + 1);
          }
          long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" ", 1);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v89);
        }
        long long v45 = a7;
        std::string::size_type v47 = v76.__r_.__value_.__l.__size_;
        for (uint64_t i = v76.__r_.__value_.__r.__words[0]; i != v47; i += 232)
        {
          quasar::result_handler::parseToInterpretation(i, (uint64_t)&v80, (uint64_t)v89);
          if (HIDWORD(v92)) {
            BOOL v48 = 0;
          }
          else {
            BOOL v48 = BYTE1(v93[0]) == 0;
          }
          if (!v48)
          {
            long long v49 = v86;
            if ((unint64_t)v86 >= v87)
            {
              long long v50 = (std::string *)std::vector<quasar::result_handler::CommandInterpretation>::__emplace_back_slow_path<quasar::result_handler::CommandInterpretation&>((uint64_t *)&v85, (const quasar::result_handler::CommandInterpretation *)v89);
            }
            else
            {
              quasar::result_handler::CommandInterpretation::CommandInterpretation(v86, (const quasar::result_handler::CommandInterpretation *)v89);
              long long v50 = v49 + 7;
            }
            unsigned int v86 = v50;
          }
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94[1] + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v93 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          if (SBYTE7(v92) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v90) < 0) {
            operator delete(*(void **)&v89[24]);
          }
          if ((v89[23] & 0x80000000) != 0) {
            operator delete(*(void **)v89);
          }
        }
        unint64_t v51 = 126 - 2 * __clz(0xCF3CF3CF3CF3CF3DLL * (((char *)v86 - (char *)v85) >> 3));
        if (v86 == v85) {
          uint64_t v52 = 0;
        }
        else {
          uint64_t v52 = v51;
        }
        std::__introsort<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,false>((uint64_t)v85, (unint64_t)v86, v52, 1);
        if (*a8) {
          kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,std::vector<quasar::result_handler::CommandInterpretation> const&)::{lambda(std::vector<quasar::result_handler::CommandInterpretation>&)#1}>(a8, (std::string::size_type)v77, (uint64_t)&v85);
        }
        *(void *)long long v89 = &v76;
        std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v89);
        a7 = v45;
        a9 = v62;
        uint64_t v17 = a1;
      }
      long long v53 = v85;
      long long v54 = v85;
      if (v85 == v86)
      {
LABEL_92:
        if (!a6) {
          goto LABEL_97;
        }
      }
      else
      {
        while (SHIDWORD(v54[3].__r_.__value_.__r.__words[0]) <= 0)
        {
          v54 += 7;
          if (v54 == v86)
          {
            while (!v53[3].__r_.__value_.__s.__data_[9])
            {
              v53 += 7;
              if (v53 == v86) {
                goto LABEL_92;
              }
            }
            break;
          }
        }
      }
      unint64_t v55 = a9[1];
      if (v55 >= a9[2])
      {
        uint64_t v56 = std::vector<quasar::result_handler::CommandData>::__push_back_slow_path<quasar::result_handler::CommandData const&>(a9, (uint64_t)v79);
      }
      else
      {
        quasar::result_handler::CommandData::CommandData(a9[1], (uint64_t)v79);
        uint64_t v56 = v55 + 184;
        a9[1] = v55 + 184;
      }
      a9[1] = v56;
LABEL_97:
      if (SHIBYTE(v78) < 0) {
        operator delete(v77[0]);
      }
      goto LABEL_99;
    }
LABEL_100:
    unint64_t v14 = v19;
    BOOL v48 = v18++ == v66;
  }
  while (!v48);
  unint64_t v58 = *a9;
  uint64_t v57 = a9[1];
  if (*a9 != v57)
  {
    for (unint64_t j = v57 - 184; v58 < j; j -= 184)
    {
      std::swap[abi:ne180100]<quasar::result_handler::CommandData>(v58, j);
      v58 += 184;
    }
  }
}

void sub_1B21D5AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,char a54)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a54);
  STACK[0x210] = a13;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForSuppression(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 == *a2) {
    return;
  }
  unint64_t v11 = 0;
  uint64_t v12 = "VoiceEditingResultHandler: ";
  while (1)
  {
    uint64_t v13 = (void *)(v7 + 184 * v11);
    uint64_t v15 = (uint64_t)(v13 + 3);
    unint64_t v14 = (uint64_t *)v13[3];
    if (v14 == (uint64_t *)v13[4] || (uint64_t v16 = *v14, *v14 == v14[1]))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"!emptyTopChoice(partialCommand.commandUtterance)", 48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v41);
    }
    uint64_t v17 = *(void *)(a1 + 408);
    if (v17)
    {
      int v18 = *(void **)(v17 + 48);
      int v19 = v18 == *(void **)(v17 + 56) ? 0 : -1227133513 * ((v18[1] - *v18) >> 5);
      int v20 = *v13 == v13[1] ? 0 : 1227133513 * ((*(void *)(*v13 + 8) - *(void *)*v13) >> 5);
      if (v20 + v19 > *(_DWORD *)(a1 + 60))
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v41 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"FILTERING: REJECT1", 18);
LABEL_39:
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v41);
          goto LABEL_40;
        }
        goto LABEL_40;
      }
    }
    unsigned int v22 = *(_DWORD *)(v16 + 36) + a3;
    if (v22 + *(_DWORD *)(a1 + 40) <= a4)
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"FILTERING: REJECT2", 18);
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    uint64_t v23 = v7 + 184 * v11;
    uint64_t v24 = *(void *)(v23 + 152);
    uint64_t v25 = *(void *)(v23 + 160);
    uint64_t v26 = v24;
    if (v24 != v25) {
      break;
    }
LABEL_22:
    if (*(unsigned char *)(a1 + 509))
    {
      if (*(_DWORD *)(v16 + 28) + a3 + *(_DWORD *)(a1 + 56) > a4) {
        goto LABEL_43;
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"FILTERING: REJECT4", 18);
        goto LABEL_39;
      }
    }
    else
    {
      if (v22 > a4) {
        goto LABEL_43;
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        long long v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"FILTERING: REJECT5", 18);
        goto LABEL_39;
      }
    }
LABEL_40:
    ++v11;
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (0xD37A6F4DE9BD37A7 * ((v6 - *a2) >> 3) <= v11) {
      return;
    }
  }
  while (*(int *)(v26 + 76) <= 0)
  {
    v26 += 168;
    if (v26 == v25)
    {
      uint64_t v27 = v24;
      while (!*(unsigned char *)(v27 + 81))
      {
        v27 += 168;
        if (v27 == v25) {
          goto LABEL_22;
        }
      }
      break;
    }
  }
  uint64_t v30 = (uint64_t)v12;
  if (*(_DWORD *)(v24 + 76) >= *(_DWORD *)(a1 + 52)) {
    int v31 = *(_DWORD *)(a1 + 48);
  }
  else {
    int v31 = 0;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    long long v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, v30, 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"(now=", 5);
    long long v33 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)") LEO relevantNow=", 18);
    uint64_t v34 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" utteranceStartMs=", 18);
    long long v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" token=", 7);
    quasar::result_handler::topChoiceSilStartMs(v15);
    uint64_t v36 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" constant=", 10);
    std::string::size_type v37 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" sum=", 5);
    quasar::result_handler::topChoiceSilStartMs(v15);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v41);
  }
  if (v31 + a3 + quasar::result_handler::topChoiceSilStartMs(v15) + *(_DWORD *)(a1 + 44) <= a4)
  {
    uint64_t v12 = (const char *)v30;
    if (quasar::gLogLevel >= 5)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, v30, 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"FILTERING: REJECT3", 18);
      goto LABEL_39;
    }
    goto LABEL_40;
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
LABEL_43:
  std::vector<quasar::result_handler::CommandData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::result_handler::CommandData const*>,std::__wrap_iter<quasar::result_handler::CommandData const*>>(a5, a5[1], v7 + 184 * v11, v6, 0xD37A6F4DE9BD37A7 * ((uint64_t)(v6 - (v7 + 184 * v11)) >> 3));
}

void quasar::result_handler::VoiceEditingResultHandler::updateSuppressionState(uint64_t a1, uint64_t *a2, int a3)
{
  int v4 = *(unsigned __int8 *)(a1 + 304);
  int v5 = *(_DWORD *)(a1 + 308);
  if (a3)
  {
    int v6 = 0;
    int v7 = 0;
    *(unsigned char *)(a1 + 304) = 0;
    *(_DWORD *)(a1 + 308) = 0;
  }
  else
  {
    int v6 = *(unsigned __int8 *)(a1 + 304);
    int v7 = *(_DWORD *)(a1 + 308);
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    uint64_t v10 = *a2;
    while (2)
    {
      for (uint64_t i = *(void *)(v10 + 152); i != *(void *)(v10 + 160); i += 168)
      {
        if (*(int *)(i + 76) > 0)
        {
LABEL_22:
          *(unsigned char *)(a1 + 304) = 1;
          int v17 = *(_DWORD *)(a1 + 32);
          if (v17 <= v7) {
            int v17 = v7;
          }
          *(_DWORD *)(a1 + 308) = v17;
          if (*(char *)(v9 + 151) < 0)
          {
            int v18 = *(char **)(v9 + 128);
            uint64_t v19 = *(void *)(v9 + 136);
          }
          else
          {
            int v18 = (char *)(v9 + 128);
            uint64_t v19 = *(unsigned __int8 *)(v9 + 151);
          }
          quasar::utf8::convertToLowerCaseOrEmpty(v18, v19, &v44);
          std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v44.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            if (*(unsigned char *)(a1 + 280))
            {
              if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v21 = (__int32 *)&v44;
              }
              else {
                unint64_t v21 = (__int32 *)v44.__r_.__value_.__r.__words[0];
              }
              long long v30 = 0uLL;
              LOBYTE(v31) = 0;
              *((void *)&v31 + 1) = 0;
              *(void *)&long long v32 = 0;
              BYTE8(v32) = 0;
              LOBYTE(v33) = 0;
              *((void *)&v33 + 1) = 0;
              *(_OWORD *)std::__fs::filesystem::path __p = 0u;
              memset(v29, 0, 25);
              char v22 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v21, (__int32 *)((char *)v21 + size), (uint64_t)__p, a1 + 216, 0);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              if (v22) {
                goto LABEL_40;
              }
            }
            if (!quasar::result_handler::hasInterpretationWithEmptyOrShortEnoughArguments(v9, a1 + 16, (uint64_t *)(a1 + 192))|| (uint64_t v23 = *(void *)(a1 + 160)) != 0&& (quasar::result_handler::hasInterpretationWithMaybeMatchingTarget(v9, v23, a1 + 16) & 1) == 0)
            {
LABEL_40:
              *(_DWORD *)(a1 + 308) = 0;
            }
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          int v6 = *(unsigned __int8 *)(a1 + 304);
          goto LABEL_44;
        }
      }
      v10 += 184;
      if (v10 != v8) {
        continue;
      }
      break;
    }
    uint64_t v12 = *a2;
    do
    {
      for (uint64_t j = *(void *)(v12 + 152); j != *(void *)(v12 + 160); j += 168)
      {
        if (*(unsigned char *)(j + 81)) {
          goto LABEL_22;
        }
      }
      v12 += 184;
    }
    while (v12 != v8);
    if (*(unsigned char *)(a1 + 508))
    {
      if (v9 == v8) {
        goto LABEL_44;
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        memset(v29, 0, sizeof(v29));
        *(_OWORD *)std::__fs::filesystem::path __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"(now=", 5);
        uint64_t v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)") favorCommandSuppressionState=", 31);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        int v7 = *(_DWORD *)(a1 + 308);
      }
      int v6 = 1;
      *(unsigned char *)(a1 + 304) = 1;
      int v16 = *(_DWORD *)(a1 + 68);
    }
    else
    {
      if (v9 == v8) {
        goto LABEL_44;
      }
      int v16 = *(_DWORD *)(a1 + 64);
    }
    if (v16 > v7) {
      int v7 = v16;
    }
    *(_DWORD *)(a1 + 308) = v7;
  }
LABEL_44:
  if (v4 != v6)
  {
    if (quasar::gLogLevel < 5) {
      return;
    }
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 308) != (v5 != 0) && quasar::gLogLevel > 4)
  {
LABEL_52:
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    memset(v29, 0, sizeof(v29));
    *(_OWORD *)std::__fs::filesystem::path __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(now=", 5);
    uint64_t v26 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") isSuppressing=", 16);
    uint64_t v27 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" partialDelay=", 14);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
}

void sub_1B21D6570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(uint64_t a1, int a2, uint64_t **a3)
{
  uint64_t v4 = a1;
  uint64_t v211 = *MEMORY[0x1E4F143B8];
  int v159 = a2;
  v198[0] = &unk_1F0A1CD78;
  v198[1] = a1;
  v198[3] = v198;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v199, (uint64_t)v198);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v198);
  *(unsigned char *)(v4 + 508) = (*(uint64_t (**)(void))(**(void **)(v4 + 176) + 32))(*(void *)(v4 + 176));
  *(unsigned char *)(v4 + 509) = (*(uint64_t (**)(void))(**(void **)(v4 + 176) + 24))(*(void *)(v4 + 176));
  if (!*(unsigned char *)(v4 + 288)) {
    goto LABEL_149;
  }
  (*(void (**)(uint64_t, int *))(*(void *)v4 + 72))(v4, &v159);
  int v5 = *a3;
  quasar::result_handler::clean(*a3);
  quasar::result_handler::clean(v5 + 3);
  quasar::result_handler::clean(v5 + 6);
  if (quasar::gLogLevel >= 5)
  {
    long long v210 = 0u;
    long long v209 = 0u;
    long long v208 = 0u;
    long long v207 = 0u;
    long long v206 = 0u;
    long long v205 = 0u;
    memset(v204, 0, sizeof(v204));
    long long v203 = 0u;
    memset(v202, 0, sizeof(v202));
    *(_OWORD *)std::vector<unsigned int> v201 = 0u;
    memset(v200, 0, sizeof(v200));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
    int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(now=", 5);
    int v7 = (void *)std::ostream::operator<<();
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") recv commandCandidate: ", 25);
    quasar::getTopChoice((uint64_t)(*a3 + 6), 1, &v185);
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v185;
    }
    else {
      uint64_t v9 = (std::string *)v185.__r_.__value_.__r.__words[0];
    }
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v185.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v185.__r_.__value_.__l.__size_;
    }
    unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, size);
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ::::: ", 7);
    quasar::topChoiceWithTimes((uint64_t **)*a3 + 6, __p);
    if ((v150 & 0x80u) == 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    if ((v150 & 0x80u) == 0) {
      uint64_t v14 = v150;
    }
    else {
      uint64_t v14 = (uint64_t)__p[1];
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utteranceStartMs=", 18);
    std::ostream::operator<<();
    if ((char)v150 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
  }
  std::string::basic_string[abi:ne180100]<0>(v200, "commandCandidate");
  quasar::result_handler::VoiceEditingResultHandler::logSnippet(v4, (uint64_t)v200, (uint64_t)*a3);
  if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200[0].__r_.__value_.__l.__data_);
  }
  if (!*(void *)(v4 + 160) && quasar::gLogLevel >= 5)
  {
    long long v210 = 0u;
    long long v209 = 0u;
    long long v208 = 0u;
    long long v207 = 0u;
    long long v206 = 0u;
    long long v205 = 0u;
    memset(v204, 0, sizeof(v204));
    long long v203 = 0u;
    memset(v202, 0, sizeof(v202));
    *(_OWORD *)std::vector<unsigned int> v201 = 0u;
    memset(v200, 0, sizeof(v200));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Parser is unavailable", 21);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
  }
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 176) + 16))(v155);
  uint64_t v17 = *(void *)(v4 + 160);
  if (v17)
  {
    quasar::result_handler::findPartialCommands(v17, (uint64_t)v155, (uint64_t)v157, *a3 + 6, *a3, *(unsigned __int8 *)(v4 + 509), (_DWORD *)(v4 + 16), (unint64_t *)(v4 + 320), v154, (quasar::PartialHistory *)(v4 + 624));
    quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForThoughtPause(v154, (uint64_t *)v200);
    int v18 = *a3;
    std::vector<quasar::result_handler::CommandData>::__vdeallocate((void **)*a3 + 20);
    *(std::string *)(v18 + 20) = v200[0];
    memset(v200, 0, 24);
    v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
    std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
    v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v154;
    std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
  }
  (*a3)[58] = mach_continuous_time();
  uint64_t v19 = mach_absolute_time();
  unint64_t v21 = *a3;
  (*a3)[60] = v19;
  LOBYTE(__p[0]) = 0;
  char v151 = 0;
  __int32 v152 = 0;
  char v153 = 0;
  long long v124 = *(quasar::corrective_reranking::Parser **)(v4 + 160);
  if (v124)
  {
    char v22 = (void *)v21[6];
    if (v22 == (void *)v21[7] || *v22 == v22[1])
    {
      v132[0].__r_.__value_.__s.__data_[0] = 0;
      char v146 = 0;
      char v148 = 0;
      int v147 = 0;
LABEL_138:
      std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<quasar::result_handler::CommandData,false>>((uint64_t)__p, (uint64_t)v132);
      __int32 v152 = v147;
      char v153 = v148;
      std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v132);
      unint64_t v21 = *a3;
      goto LABEL_139;
    }
    char v125 = *(unsigned char *)(v4 + 509);
    unint64_t v179 = 0;
    uint64_t v178 = 0;
    unint64_t v180 = 0;
    char v176 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)&v175, v20);
    uint64_t v177 = 0;
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v23);
    long long v121 = a3;
    uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v22[1] - *v22) >> 5);
    unsigned int v26 = v25 - 1;
    uint64_t v123 = v4;
    if ((int)v25 < 1)
    {
      uint64_t v127 = 0;
      char v128 = 0;
      uint64_t v126 = 0;
    }
    else
    {
      int v130 = 0;
      int v27 = 0;
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      char v128 = 0;
      v122 = v22;
      unint64_t v28 = -1227133513 * ((uint64_t)(v22[1] - *v22) >> 5);
      if (v26 >= 0x1D) {
        unsigned int v26 = 29;
      }
      unsigned int v129 = v26;
      do
      {
        unint64_t v29 = (v25 - 1);
        if (v28 < 2
          || (unint64_t v30 = (v25 - 1),
              int v31 = quasar::Token::trailingSilenceMilliseconds((quasar::Token *)(*v122 + 224 * (v25 - 2))),
              unint64_t v29 = v30,
              v31 >= *(_DWORD *)(v4 + 16)))
        {
          int v131 = v29;
          quasar::result_handler::initSegmentation((uint64_t)v155, (uint64_t)v157, (uint64_t)(v21 + 6), (uint64_t)v21, v29, (quasar::PartialHistory *)(v4 + 624), &v185);
          if (v196)
          {
            *(_OWORD *)v167 = 0u;
            long long v168 = 0u;
            *(_OWORD *)v166 = 0u;
            memset(v165, 0, sizeof(v165));
            uint64_t v169 = 0x101010101010101;
            int v170 = 0;
            __int16 v171 = 257;
            char v172 = 0;
            int v173 = 10;
            __int16 v174 = 256;
            std::string::operator=(v165, &v190);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(v200, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              v200[0] = __s;
            }
            LODWORD(v200[1].__r_.__value_.__l.__data_) = 0;
            std::vector<quasar::corrective_reranking::ASRCandidate>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*>((uint64_t)&v165[1], v200, (long long *)&v200[1].__r_.__value_.__r.__words[1], 1uLL);
            if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v200[0].__r_.__value_.__l.__data_);
            }
            __int16 v174 = 1;
            char v172 = v125;
            if (quasar::gLogLevel >= 5)
            {
              long long v210 = 0u;
              long long v209 = 0u;
              long long v208 = 0u;
              long long v207 = 0u;
              long long v206 = 0u;
              long long v205 = 0u;
              memset(v204, 0, sizeof(v204));
              long long v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)std::vector<unsigned int> v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"disambiguationActive ", 21);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
            }
            kaldi::Timer::GetSeconds((kaldi::Timer *)5, v32);
            quasar::corrective_reranking::Parser::run(v124, (const quasar::corrective_reranking::Parser::RunArgs *)v165, (uint64_t)&__val);
            kaldi::Timer::GetSeconds((kaldi::Timer *)5, v34);
            if (quasar::gLogLevel >= 5)
            {
              long long v210 = 0u;
              long long v209 = 0u;
              long long v208 = 0u;
              long long v207 = 0u;
              long long v206 = 0u;
              long long v205 = 0u;
              memset(v204, 0, sizeof(v204));
              long long v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)std::vector<unsigned int> v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"findMaybeCompleteCommand: parserRunIter=", 40);
              long long v36 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" parserRunTime=", 15);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
            }
            v183[1] = 0;
            v183[0] = 0;
            std::string v184 = 0;
            if (BYTE4(__val.__begin_))
            {
              uint64_t v37 = std::vector<quasar::result_handler::CommandInterpretation>::emplace_back<>((uint64_t *)v183);
              MEMORY[0x1B3EA7B20](v37, "disambiguation");
              if (!BYTE4(__val.__begin_)) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              std::to_string(v200, (int)__val.__begin_);
              long long v38 = (void **)(v37 + 24);
              if (*(char *)(v37 + 47) < 0) {
                operator delete(*v38);
              }
              *(_OWORD *)long long v38 = *(_OWORD *)&v200[0].__r_.__value_.__l.__data_;
              *(void *)(v37 + 40) = *((void *)&v200[0].__r_.__value_.__l + 2);
              *(_DWORD *)(v37 + 76) = 1;
              *(unsigned char *)(v37 + 80) = 1;
            }
            else if (v162 && v161)
            {
              std::vector<std::string>::pointer end = __val.__end_;
              value = __val.__end_cap_.__value_;
              while (end != value)
              {
                quasar::result_handler::parseToInterpretation((uint64_t)end, (uint64_t)v165, (uint64_t)v200);
                long long v50 = (char *)v183[1];
                if (v183[1] >= v184)
                {
                  long long v55 = (void *)std::vector<quasar::result_handler::CommandInterpretation>::__emplace_back_slow_path<quasar::result_handler::CommandInterpretation>((uint64_t *)v183, (long long *)v200);
                }
                else
                {
                  long long v51 = *(_OWORD *)&v200[0].__r_.__value_.__l.__data_;
                  *((void *)v183[1] + 2) = *((void *)&v200[0].__r_.__value_.__l + 2);
                  *(_OWORD *)long long v50 = v51;
                  memset(v200, 0, 24);
                  std::string::size_type v52 = v200[1].__r_.__value_.__r.__words[2];
                  *(_OWORD *)(v50 + 24) = *(_OWORD *)&v200[1].__r_.__value_.__l.__data_;
                  *((void *)v50 + 5) = v52;
                  memset(&v200[1], 0, sizeof(std::string));
                  long long v53 = *(_OWORD *)v201;
                  *((void *)v50 + 8) = *(void *)&v202[0];
                  *((_OWORD *)v50 + 3) = v53;
                  v201[1] = 0;
                  *(void *)&v202[0] = 0;
                  v201[0] = 0;
                  uint64_t v54 = *((void *)&v202[0] + 1);
                  *((_WORD *)v50 + 40) = v202[1];
                  *((void *)v50 + 9) = v54;
                  *((void *)v50 + 11) = 0;
                  *((void *)v50 + 12) = 0;
                  *((void *)v50 + 13) = 0;
                  *((void *)v50 + 14) = 0;
                  *(_OWORD *)(v50 + 88) = *(_OWORD *)((char *)&v202[1] + 8);
                  *((void *)v50 + 13) = *((void *)&v202[2] + 1);
                  memset((char *)&v202[1] + 8, 0, 24);
                  *((void *)v50 + 15) = 0;
                  *((void *)v50 + 16) = 0;
                  *((_OWORD *)v50 + 7) = v203;
                  long long v203 = 0uLL;
                  *((void **)v50 + 16) = v204[0];
                  *((void *)v50 + 17) = 0;
                  v204[0] = 0;
                  *((void *)v50 + 18) = 0;
                  *((void *)v50 + 19) = 0;
                  *(_OWORD *)(v50 + 136) = *(_OWORD *)&v204[1];
                  *((void **)v50 + 19) = v204[3];
                  memset(&v204[1], 0, 24);
                  *((void **)v50 + 20) = v204[4];
                  long long v55 = v50 + 168;
                }
                v183[1] = v55;
                v181[0] = &v204[1];
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
                v181[0] = &v203;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
                v181[0] = (char *)&v202[1] + 8;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v181);
                if (SBYTE7(v202[0]) < 0) {
                  operator delete(v201[0]);
                }
                if (SHIBYTE(v200[1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v200[1].__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v200[0].__r_.__value_.__l.__data_);
                }
                std::vector<std::string>::pointer end = (std::vector<std::string>::pointer)((char *)end + 232);
              }
            }
            std::vector<quasar::result_handler::CommandInterpretation>::__vdeallocate((void **)&v193);
            long long v193 = *(_OWORD *)v183;
            char v194 = v184;
            std::string v184 = 0;
            v183[1] = 0;
            v183[0] = 0;
            v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
            std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
            LODWORD(v195) = v163;
            BYTE4(v195) = v164;
            char v39 = v163;
            char v40 = BYTE1(v163);
            char v41 = BYTE2(v163);
            int v42 = HIBYTE(v163);
            char v43 = v164;
            if (quasar::gLogLevel >= 6)
            {
              long long v210 = 0u;
              long long v209 = 0u;
              long long v208 = 0u;
              long long v207 = 0u;
              long long v206 = 0u;
              long long v205 = 0u;
              memset(v204, 0, sizeof(v204));
              long long v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)std::vector<unsigned int> v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              std::string v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              long long v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"LEO MAYBE: segmentation->asrCandidate ", 38);
              quasar::result_handler::operator<<(v45, (uint64_t)&v185);
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v200);
            }
            if ((void)v193 != *((void *)&v193 + 1))
            {
              unint64_t v46 = v179;
              if (v179 >= v180)
              {
                uint64_t v47 = std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData>(&v178, (uint64_t)&v185);
              }
              else
              {
                std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>((uint64_t)&v180, v179, (uint64_t)&v185);
                uint64_t v47 = v46 + 184;
              }
              unint64_t v179 = v47;
            }
            v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__val.__end_;
            std::vector<quasar::corrective_reranking::Parse>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
            if (v167[1])
            {
              *(void **)&long long v168 = v167[1];
              operator delete(v167[1]);
            }
            if (v166[0])
            {
              v166[1] = v166[0];
              operator delete(v166[0]);
            }
            v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v165[1];
            std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
            if (SHIBYTE(v165[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v165[0].__r_.__value_.__l.__data_);
            }
            ++v130;
            BYTE4(v127) |= v39;
            LOBYTE(v127) = v40 | v127;
            LOBYTE(v126) = v41 | v126;
            HIDWORD(v126) |= v42;
            v128 |= v43;
          }
          std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v185);
          LODWORD(v29) = v131;
        }
        --v28;
        LODWORD(v25) = v29;
      }
      while (v27++ != v129);
    }
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v24);
    a3 = v121;
    if (quasar::gLogLevel >= 5)
    {
      long long v210 = 0u;
      long long v209 = 0u;
      long long v208 = 0u;
      long long v207 = 0u;
      long long v206 = 0u;
      long long v205 = 0u;
      memset(v204, 0, sizeof(v204));
      long long v203 = 0u;
      memset(v202, 0, sizeof(v202));
      *(_OWORD *)std::vector<unsigned int> v201 = 0u;
      memset(v200, 0, sizeof(v200));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
      long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"findMaybeCompleteCommand: parserRunIters=", 41);
      unint64_t v58 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" parserLoopTime=", 16);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
    }
    uint64_t v59 = v178;
    unint64_t v60 = v179;
    if (v178 == v179) {
      goto LABEL_103;
    }
    for (uint64_t i = v178 + 184; i != v60; i += 184)
    {
      unint64_t v62 = quasar::result_handler::maybeCompleteCommandSegmentationScore(v59);
      unint64_t v63 = quasar::result_handler::maybeCompleteCommandSegmentationScore(i);
      if ((int)v62 < (int)v63 || (int)v63 >= (int)v62 && *((float *)&v62 + 1) < *((float *)&v63 + 1)) {
        uint64_t v59 = i;
      }
    }
    uint64_t v64 = *(void *)(v59 + 152);
    if (v64 == *(void *)(v59 + 160) || !*(unsigned char *)(v64 + 80))
    {
LABEL_103:
      v132[0].__r_.__value_.__s.__data_[0] = 0;
      char v146 = 0;
      char v148 = v128;
      int v147 = (v126 << 16) | (HIDWORD(v126) << 24) | (v127 << 8) | BYTE4(v127);
LABEL_137:
      v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
      std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
      goto LABEL_138;
    }
    std::vector<quasar::result_handler::CommandInterpretation>::resize((uint64_t *)(v59 + 152), 1uLL);
    unsigned __int8 v65 = *(void **)v59;
    if (*(void *)v59 == *(void *)(v59 + 8) || (uint64_t v66 = v65[1], *v65 == v66))
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v210 = 0u;
        long long v209 = 0u;
        long long v208 = 0u;
        long long v207 = 0u;
        long long v206 = 0u;
        long long v205 = 0u;
        memset(v204, 0, sizeof(v204));
        long long v203 = 0u;
        memset(v202, 0, sizeof(v202));
        *(_OWORD *)std::vector<unsigned int> v201 = 0u;
        memset(v200, 0, sizeof(v200));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
        unint64_t v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"dropUnwantedAutoPunc: input is empty", 36);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
      }
      goto LABEL_132;
    }
    quasar::Token::Token(&v185, (const quasar::Token *)(v66 - 224));
    if (!quasar::Token::isAutoPunctuation((quasar::Token *)&v185))
    {
      if (quasar::gLogLevel < 5) {
        goto LABEL_122;
      }
      long long v210 = 0u;
      long long v209 = 0u;
      long long v208 = 0u;
      long long v207 = 0u;
      long long v206 = 0u;
      long long v205 = 0u;
      memset(v204, 0, sizeof(v204));
      long long v203 = 0u;
      memset(v202, 0, sizeof(v202));
      *(_OWORD *)std::vector<unsigned int> v201 = 0u;
      memset(v200, 0, sizeof(v200));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
      uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"dropUnwantedAutoPunc: input does not end with AutoPunc", 54);
LABEL_121:
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
      goto LABEL_122;
    }
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v185.__r_.__value_.__l.__size_ == 1)
      {
        uint64_t v67 = (std::string *)v185.__r_.__value_.__r.__words[0];
LABEL_110:
        if (v67->__r_.__value_.__s.__data_[0] == 46)
        {
          unint64_t v70 = *(unsigned __int8 *)(v59 + 119);
          if ((v70 & 0x80u) != 0) {
            unint64_t v70 = *(void *)(v59 + 104);
          }
          if (!v70)
          {
            if (quasar::gLogLevel < 5) {
              goto LABEL_122;
            }
            long long v210 = 0u;
            long long v209 = 0u;
            long long v208 = 0u;
            long long v207 = 0u;
            long long v206 = 0u;
            long long v205 = 0u;
            memset(v204, 0, sizeof(v204));
            long long v203 = 0u;
            memset(v202, 0, sizeof(v202));
            *(_OWORD *)std::vector<unsigned int> v201 = 0u;
            memset(v200, 0, sizeof(v200));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
            unint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"dropUnwantedAutoPunc: displayedText is empty", 44);
            goto LABEL_121;
          }
          unint64_t v71 = *(unsigned int *)(v59 + 120);
          std::string::size_type v72 = (v71 - 1);
          if ((int)v71 >= 1 && v70 >= v71)
          {
            std::string::basic_string(v165, (const std::string *)(v59 + 96), (v71 - 1), 1uLL, (std::allocator<char> *)v200);
            BOOL v73 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)v165, (unsigned __int8 *)&v185);
            if (v73)
            {
              if (quasar::gLogLevel >= 5)
              {
                long long v210 = 0u;
                long long v209 = 0u;
                long long v208 = 0u;
                long long v207 = 0u;
                long long v206 = 0u;
                long long v205 = 0u;
                memset(v204, 0, sizeof(v204));
                long long v203 = 0u;
                memset(v202, 0, sizeof(v202));
                *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                memset(v200, 0, sizeof(v200));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                std::string v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"dropUnwantedAutoPunc: unexpected character before cursor", 56);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
              }
              goto LABEL_226;
            }
            uint64_t v89 = *(void *)(v59 + 152);
            if (v89 == *(void *)(v59 + 160))
            {
              if (quasar::gLogLevel < 5) {
                goto LABEL_226;
              }
              long long v210 = 0u;
              long long v209 = 0u;
              long long v208 = 0u;
              long long v207 = 0u;
              long long v206 = 0u;
              long long v205 = 0u;
              memset(v204, 0, sizeof(v204));
              long long v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)std::vector<unsigned int> v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              long long v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"dropUnwantedAutoPunc: no interpretatoin", 39);
            }
            else
            {
              if (*(char *)(v89 + 23) < 0) {
                uint64_t v90 = *(void *)(v89 + 8);
              }
              else {
                uint64_t v90 = *(unsigned __int8 *)(v89 + 23);
              }
              if (v90)
              {
                long long v92 = (void *)quasar::corrective_reranking::Parse::getCommandsWithNoTransformerVisibleChange((quasar::corrective_reranking::Parse *)v73);
                if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v92, (unsigned __int8 *)v89))
                {
                  a3 = v121;
                  if (quasar::gLogLevel < 5) {
                    goto LABEL_226;
                  }
                  long long v210 = 0u;
                  long long v209 = 0u;
                  long long v208 = 0u;
                  long long v207 = 0u;
                  long long v206 = 0u;
                  long long v205 = 0u;
                  memset(v204, 0, sizeof(v204));
                  long long v203 = 0u;
                  memset(v202, 0, sizeof(v202));
                  *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                  memset(v200, 0, sizeof(v200));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                  long long v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"dropUnwantedAutoPunc: command without visible change", 52);
LABEL_164:
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
LABEL_224:
                  uint64_t v4 = v123;
                  goto LABEL_225;
                }
                if (*(char *)(v89 + 47) < 0) {
                  uint64_t v95 = *(void *)(v89 + 32);
                }
                else {
                  uint64_t v95 = *(unsigned __int8 *)(v89 + 47);
                }
                if (!v95)
                {
                  a3 = v121;
                  if (quasar::gLogLevel < 5) {
                    goto LABEL_226;
                  }
                  long long v210 = 0u;
                  long long v209 = 0u;
                  long long v208 = 0u;
                  long long v207 = 0u;
                  long long v206 = 0u;
                  long long v205 = 0u;
                  memset(v204, 0, sizeof(v204));
                  long long v203 = 0u;
                  memset(v202, 0, sizeof(v202));
                  *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                  memset(v200, 0, sizeof(v200));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                  long long v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"dropUnwantedAutoPunc: no target", 31);
                  goto LABEL_164;
                }
                std::string::basic_string[abi:ne180100]<0>(v200, "en_US");
                quasar::getSentenceBoundarySeparatedString((char *)(v59 + 96), &__val);
                if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v200[0].__r_.__value_.__l.__data_);
                }
                std::vector<std::string>::pointer begin = __val.__begin_;
                if (__val.__begin_ == __val.__end_)
                {
                  if (quasar::gLogLevel >= 5)
                  {
                    long long v210 = 0u;
                    long long v209 = 0u;
                    long long v208 = 0u;
                    long long v207 = 0u;
                    long long v206 = 0u;
                    long long v205 = 0u;
                    memset(v204, 0, sizeof(v204));
                    long long v203 = 0u;
                    memset(v202, 0, sizeof(v202));
                    *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                    memset(v200, 0, sizeof(v200));
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                    long long v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"dropUnwantedAutoPunc: unable to obtain sentences", 48);
LABEL_215:
                    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
                  }
                }
                else
                {
                  int v97 = 0;
                  int v98 = 0;
                  uint64_t v99 = v89 + 24;
                  while (1)
                  {
                    int v100 = v98;
                    int v101 = SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0
                         ? LODWORD(begin->__r_.__value_.__r.__words[1])
                         : HIBYTE(begin->__r_.__value_.__r.__words[2]);
                    if (v98 > *(_DWORD *)(v59 + 120)) {
                      break;
                    }
                    v98 += v101;
                    ++begin;
                    int v97 = v100;
                    if (begin == __val.__end_) {
                      goto LABEL_187;
                    }
                  }
                  int v100 = v97;
LABEL_187:
                  if (v98)
                  {
                    std::string::basic_string[abi:ne180100]<0>(v200, "en_US");
                    quasar::getRangesForSearchStringWithWordBoundariesValidation(v99, v59 + 96, (uint64_t)v200, v183);
                    if (SHIBYTE(v200[0].__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v200[0].__r_.__value_.__l.__data_);
                    }
                    long long v104 = (unint64_t *)v183[0];
                    long long v105 = (unint64_t *)v183[1];
                    if (v183[0] == v183[1])
                    {
LABEL_194:
                      if (quasar::gLogLevel >= 5)
                      {
                        long long v210 = 0u;
                        long long v209 = 0u;
                        long long v208 = 0u;
                        long long v207 = 0u;
                        long long v206 = 0u;
                        long long v205 = 0u;
                        memset(v204, 0, sizeof(v204));
                        long long v203 = 0u;
                        memset(v202, 0, sizeof(v202));
                        *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                        memset(v200, 0, sizeof(v200));
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                        unint64_t v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                        uint64_t v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"dropUnwantedAutoPunc: dropping AutoPunc from precedingUtterance: ", 65);
                        BOOL v110 = (v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                             ? &v185
                             : (std::string *)v185.__r_.__value_.__r.__words[0];
                        uint64_t v111 = (v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                             ? HIBYTE(v185.__r_.__value_.__r.__words[2])
                             : v185.__r_.__value_.__l.__size_;
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)v110, v111);
                        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
                        if (quasar::gLogLevel >= 5)
                        {
                          long long v210 = 0u;
                          long long v209 = 0u;
                          long long v208 = 0u;
                          long long v207 = 0u;
                          long long v206 = 0u;
                          long long v205 = 0u;
                          memset(v204, 0, sizeof(v204));
                          long long v203 = 0u;
                          memset(v202, 0, sizeof(v202));
                          *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                          memset(v200, 0, sizeof(v200));
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                          unint64_t v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                          uint64_t v113 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"dropUnwantedAutoPunc: precedingUtterance ", 41);
                          quasar::getTopChoice(v59, 1, v181);
                          if ((v182 & 0x80u) == 0) {
                            unint64_t v114 = v181;
                          }
                          else {
                            unint64_t v114 = (void **)v181[0];
                          }
                          if ((v182 & 0x80u) == 0) {
                            uint64_t v115 = v182;
                          }
                          else {
                            uint64_t v115 = (uint64_t)v181[1];
                          }
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v113, (uint64_t)v114, v115);
                          if ((char)v182 < 0) {
                            operator delete(v181[0]);
                          }
                          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
                        }
                      }
                      uint64_t v116 = v65[1];
                      quasar::Token::~Token((void **)(v116 - 224));
                      v65[1] = v117;
                      if (*v65 != v117) {
                        *(unsigned char *)(v116 - 404) = v186;
                      }
                    }
                    else
                    {
                      while (1)
                      {
                        v200[0].__r_.__value_.__r.__words[0] = v72;
                        v200[0].__r_.__value_.__l.__size_ = 1;
                        quasar::intersectionRange(v104, (unint64_t *)v200);
                        if (v106)
                        {
                          if (quasar::gLogLevel < 5) {
                            goto LABEL_221;
                          }
                          long long v210 = 0u;
                          long long v209 = 0u;
                          long long v208 = 0u;
                          long long v207 = 0u;
                          long long v206 = 0u;
                          long long v205 = 0u;
                          memset(v204, 0, sizeof(v204));
                          long long v203 = 0u;
                          memset(v202, 0, sizeof(v202));
                          *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                          memset(v200, 0, sizeof(v200));
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                          unsigned int v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"dropUnwantedAutoPunc: target might include AutoPunc", 51);
                          goto LABEL_220;
                        }
                        v200[0].__r_.__value_.__r.__words[0] = v100;
                        v200[0].__r_.__value_.__l.__size_ = v98;
                        quasar::intersectionRange(v104, (unint64_t *)v200);
                        if (!v107) {
                          break;
                        }
                        v104 += 2;
                        if (v104 == v105) {
                          goto LABEL_194;
                        }
                      }
                      if (quasar::gLogLevel < 5) {
                        goto LABEL_221;
                      }
                      long long v210 = 0u;
                      long long v209 = 0u;
                      long long v208 = 0u;
                      long long v207 = 0u;
                      long long v206 = 0u;
                      long long v205 = 0u;
                      memset(v204, 0, sizeof(v204));
                      long long v203 = 0u;
                      memset(v202, 0, sizeof(v202));
                      *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                      memset(v200, 0, sizeof(v200));
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                      long long v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"dropUnwantedAutoPunc: target might include another sentence", 59);
LABEL_220:
                      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
                    }
LABEL_221:
                    if (v183[0])
                    {
                      v183[1] = v183[0];
                      operator delete(v183[0]);
                    }
                    goto LABEL_223;
                  }
                  if (quasar::gLogLevel >= 5)
                  {
                    long long v210 = 0u;
                    long long v209 = 0u;
                    long long v208 = 0u;
                    long long v207 = 0u;
                    long long v206 = 0u;
                    long long v205 = 0u;
                    memset(v204, 0, sizeof(v204));
                    long long v203 = 0u;
                    memset(v202, 0, sizeof(v202));
                    *(_OWORD *)std::vector<unsigned int> v201 = 0u;
                    memset(v200, 0, sizeof(v200));
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
                    long long v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)"dropUnwantedAutoPunc: unable to find last sentence that ends with cursor or includes cursor", 91);
                    goto LABEL_215;
                  }
                }
LABEL_223:
                v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__val;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
                goto LABEL_224;
              }
              if (quasar::gLogLevel < 5) {
                goto LABEL_226;
              }
              long long v210 = 0u;
              long long v209 = 0u;
              long long v208 = 0u;
              long long v207 = 0u;
              long long v206 = 0u;
              long long v205 = 0u;
              memset(v204, 0, sizeof(v204));
              long long v203 = 0u;
              memset(v202, 0, sizeof(v202));
              *(_OWORD *)std::vector<unsigned int> v201 = 0u;
              memset(v200, 0, sizeof(v200));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
              long long v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"dropUnwantedAutoPunc: no command", 32);
            }
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
LABEL_225:
            a3 = v121;
LABEL_226:
            if (SHIBYTE(v165[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v165[0].__r_.__value_.__l.__data_);
            }
            goto LABEL_122;
          }
          if (quasar::gLogLevel >= 5)
          {
            long long v210 = 0u;
            long long v209 = 0u;
            long long v208 = 0u;
            long long v207 = 0u;
            long long v206 = 0u;
            long long v205 = 0u;
            memset(v204, 0, sizeof(v204));
            long long v203 = 0u;
            memset(v202, 0, sizeof(v202));
            *(_OWORD *)std::vector<unsigned int> v201 = 0u;
            memset(v200, 0, sizeof(v200));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
            char v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"dropUnwantedAutoPunc: cursor position is invalid", 48);
            goto LABEL_121;
          }
LABEL_122:
          if (v197 < 0) {
            operator delete(v195);
          }
          if (SHIBYTE(v193) < 0) {
            operator delete((void *)__s.__r_.__value_.__r.__words[2]);
          }
          v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
          if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v190.__r_.__value_.__l.__data_);
          }
          v200[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v200);
          if (v188 < 0) {
            operator delete(v187);
          }
          if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v185.__r_.__value_.__l.__data_);
          }
LABEL_132:
          quasar::result_handler::CommandData::CommandData((uint64_t)v200, v59);
          int v76 = *(_DWORD *)(v59 + 176);
          BYTE12(v205) = *(unsigned char *)(v59 + 180);
          DWORD2(v205) = v76;
          v132[0] = v200[0];
          memset(v200, 0, sizeof(v200));
          v132[1] = v200[1];
          long long v133 = *(_OWORD *)v201;
          uint64_t v134 = *(void *)&v202[0];
          v201[1] = 0;
          v201[0] = 0;
          uint64_t v136 = *((void *)&v202[1] + 1);
          uint64_t v138 = v203;
          int v139 = DWORD2(v203);
          uint64_t v141 = v204[2];
          long long v135 = *(_OWORD *)((char *)v202 + 8);
          memset(v202, 0, sizeof(v202));
          long long v137 = v202[2];
          long long v140 = *(_OWORD *)v204;
          *(void *)&long long v203 = 0;
          memset(v204, 0, sizeof(v204));
          long long v142 = *(_OWORD *)&v204[3];
          uint64_t v143 = v204[5];
          char v145 = BYTE4(v205);
          int v144 = v205;
          char v146 = 1;
          char v148 = BYTE12(v205);
          int v147 = v76;
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v204[3];
          std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          if (SHIBYTE(v204[2]) < 0) {
            operator delete(v204[0]);
          }
          if (SBYTE7(v203) < 0) {
            operator delete(*(void **)&v202[2]);
          }
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v202 + 8;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v201;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200[1];
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
          std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
          goto LABEL_137;
        }
      }
    }
    else if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) == 1)
    {
      uint64_t v67 = &v185;
      goto LABEL_110;
    }
    if (quasar::gLogLevel < 5) {
      goto LABEL_122;
    }
    long long v210 = 0u;
    long long v209 = 0u;
    long long v208 = 0u;
    long long v207 = 0u;
    long long v206 = 0u;
    long long v205 = 0u;
    memset(v204, 0, sizeof(v204));
    long long v203 = 0u;
    memset(v202, 0, sizeof(v202));
    *(_OWORD *)std::vector<unsigned int> v201 = 0u;
    memset(v200, 0, sizeof(v200));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
    std::string v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"dropUnwantedAutoPunc: input does not end with AutoPunc period", 61);
    goto LABEL_121;
  }
LABEL_139:
  std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::result_handler::CommandData,false> const&>((uint64_t)(v21 + 23), (uint64_t)__p);
  v77.i32[0] = v152;
  int16x8_t v78 = (int16x8_t)vmovl_u8(v77);
  v79.i32[0] = *(_DWORD *)(v4 + 616);
  *(int8x8_t *)v78.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(v79), *(int8x8_t *)v78.i8);
  *(_DWORD *)(v4 + 616) = vmovn_s16(v78).u32[0];
  *(unsigned char *)(v4 + 620) |= v153;
  (*a3)[59] = mach_continuous_time();
  (*a3)[61] = mach_absolute_time();
  if (quasar::gLogLevel >= 5)
  {
    long long v210 = 0u;
    long long v209 = 0u;
    long long v208 = 0u;
    long long v207 = 0u;
    long long v206 = 0u;
    long long v205 = 0u;
    memset(v204, 0, sizeof(v204));
    long long v203 = 0u;
    memset(v202, 0, sizeof(v202));
    *(_OWORD *)std::vector<unsigned int> v201 = 0u;
    memset(v200, 0, sizeof(v200));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
    long long v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"(now=", 5);
    unint64_t v81 = (void *)std::ostream::operator<<();
    unsigned __int8 v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") handleCommandCandidate: maybeCompleteCommand ", 47);
    if (*((unsigned char *)*a3 + 368)) {
      quasar::result_handler::operator<<(v82, (uint64_t)(*a3 + 23));
    }
    else {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"null", 4);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
    if (quasar::gLogLevel >= 5)
    {
      long long v210 = 0u;
      long long v209 = 0u;
      long long v208 = 0u;
      long long v207 = 0u;
      long long v206 = 0u;
      long long v205 = 0u;
      memset(v204, 0, sizeof(v204));
      long long v203 = 0u;
      memset(v202, 0, sizeof(v202));
      *(_OWORD *)std::vector<unsigned int> v201 = 0u;
      memset(v200, 0, sizeof(v200));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v200);
      long long v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"(now=", 5);
      uint64_t v84 = (void *)std::ostream::operator<<();
      unsigned __int8 v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)") handleCommandCandidate: debugInfo", 35);
      quasar::result_handler::operator<<(v85);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v200);
    }
  }
  unsigned int v86 = *a3;
  *a3 = 0;
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(v4 + 296), (quasar::result_handler::Package *)v86);
  *(_DWORD *)(v4 + 456) = v159;
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v158 < 0) {
    operator delete(v157[0]);
  }
  if (v156 < 0) {
    operator delete(v155[0]);
  }
LABEL_149:
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v199);
}

void sub_1B21D8430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t v64 = (void *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    STACK[0x3D8] = (unint64_t)v64;
    operator delete(v64);
  }
  STACK[0x510] = (unint64_t)&STACK[0x2C8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x510]);
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  quasar::Token::~Token((void **)&STACK[0x3F0]);
  STACK[0x300] = (unint64_t)&STACK[0x3A0];
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a63);
  std::pair<std::string,std::string>::~pair((uint64_t)&STACK[0x290]);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)&STACK[0x4F0]);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForThoughtPause(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v4 + 184 * v7;
      uint64_t v9 = *(void *)(v8 + 152);
      uint64_t v10 = *(void *)(v8 + 160);
      uint64_t v11 = v9;
      if (v9 != v10)
      {
        while (*(int *)(v11 + 76) <= 0)
        {
          v11 += 168;
          if (v11 == v10)
          {
            while (!*(unsigned char *)(v9 + 81))
            {
              v9 += 168;
              if (v9 == v10) {
                goto LABEL_13;
              }
            }
            break;
          }
        }
        if (v6 >= a2[2])
        {
          unint64_t v6 = std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData const&>(a2, v8);
        }
        else
        {
          quasar::result_handler::CommandData::CommandData(v6, v8);
          v6 += 184;
          a2[1] = v6;
        }
        a2[1] = v6;
        uint64_t v4 = *a1;
        uint64_t v3 = a1[1];
      }
LABEL_13:
      ++v7;
    }
    while (0xD37A6F4DE9BD37A7 * ((v3 - v4) >> 3) > v7);
  }
}

void sub_1B21D888C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

quasar::result_handler::Package *quasar::result_handler::VoiceEditingResultHandler::handleFinalCandidate(void *a1, unsigned int a2, quasar::result_handler::Package **a3)
{
  unsigned int v11 = a2;
  (*(void (**)(void *, unsigned int *))(*a1 + 72))(a1, &v11);
  uint64_t v5 = a1[19];
  uint64_t v6 = v11;
  unint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v10 = v7;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(void *)v5 + 40))(v5, v6, &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    quasar::result_handler::Package::~Package(result);
    return (quasar::result_handler::Package *)MEMORY[0x1B3EA8670](v9);
  }
  return result;
}

void sub_1B21D8968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, quasar::result_handler::Package *a9)
{
}

void quasar::result_handler::VoiceEditingResultHandler::handleFinal(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  unsigned int v157 = a2;
  v179[0] = &unk_1F0A1CC70;
  v179[1] = a1;
  v179[3] = v179;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v180, (uint64_t)v179);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v179);
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 72))(a1, &v157);
  uint64_t v5 = *a3;
  quasar::result_handler::clean(*a3);
  quasar::result_handler::clean(v5 + 3);
  quasar::result_handler::clean(v5 + 6);
  uint64_t v6 = *a3;
  int v7 = *(_DWORD *)(a1 + 616);
  *((unsigned char *)v6 + 46std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(a1 + 620);
  *((_DWORD *)v6 + 114) = v7;
  *(unsigned char *)(a1 + 62std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  quasar::getTopChoice((uint64_t)*a3, 1, &v158);
  if (SBYTE7(v159) < 0)
  {
    uint64_t v8 = *((void *)&v158 + 1);
    operator delete((void *)v158);
    if (!v8) {
      goto LABEL_189;
    }
  }
  else if (!BYTE7(v159))
  {
    goto LABEL_189;
  }
  uint64_t v9 = (uint64_t *)**a3;
  quasar::strictAlignTokensToFirstSeenPartialResults((uint64_t *)(a1 + 560), v9, *(_DWORD *)(a1 + 612), (std::vector<int> *)&v158);
  uint64_t v10 = *a3;
  uint64_t v12 = (uint64_t)(*a3 + 11);
  unsigned int v11 = *(void **)v12;
  if (*(void *)v12)
  {
    v10[12] = (uint64_t)v11;
    operator delete(v11);
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0;
  }
  *(_OWORD *)(v10 + 11) = v158;
  v10[13] = v159;
  std::pair<std::vector<std::vector<quasar::Token>>,std::vector<int>>::pair[abi:ne180100](&v151, a1 + 512);
  uint64_t v13 = v152;
  if ((unint64_t)v152 >= v153)
  {
    uint64_t v14 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v151, v9);
  }
  else
  {
    *__int32 v152 = 0;
    v13[1] = 0;
    v13[2] = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v13, *v9, v9[1], 0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5));
    uint64_t v14 = (uint64_t)(v13 + 3);
  }
  __int32 v152 = (void *)v14;
  uint64_t v15 = v155;
  if ((unint64_t)v155 >= v156)
  {
    uint64_t v17 = (char *)__p;
    uint64_t v18 = (v155 - (unsigned char *)__p) >> 2;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v156 - (void)__p;
    if ((uint64_t)(v156 - (void)__p) >> 1 > v19) {
      unint64_t v19 = v20 >> 1;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      char v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v156, v21);
      uint64_t v17 = (char *)__p;
      uint64_t v15 = v155;
    }
    else
    {
      char v22 = 0;
    }
    clockid_t v23 = &v22[4 * v18];
    clockid_t v24 = &v22[4 * v21];
    *(_DWORD *)clockid_t v23 = v157;
    int v16 = v23 + 4;
    while (v15 != v17)
    {
      int v25 = *((_DWORD *)v15 - 1);
      v15 -= 4;
      *((_DWORD *)v23 - 1) = v25;
      v23 -= 4;
    }
    std::__fs::filesystem::path __p = v23;
    int v155 = v16;
    unint64_t v156 = (unint64_t)v24;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *(_DWORD *)int v155 = v157;
    int v16 = v15 + 4;
  }
  int v155 = v16;
  std::pair<std::vector<std::vector<quasar::Token>>,std::vector<int>>::pair[abi:ne180100](&v145, a1 + 560);
  unsigned int v26 = v146;
  if ((unint64_t)v146 >= v147)
  {
    uint64_t v27 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v145, v9);
  }
  else
  {
    *char v146 = 0;
    v26[1] = 0;
    void v26[2] = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v26, *v9, v9[1], 0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5));
    uint64_t v27 = (uint64_t)(v26 + 3);
  }
  char v146 = (void *)v27;
  unint64_t v28 = v149;
  if ((unint64_t)v149 >= v150)
  {
    unint64_t v30 = (char *)v148;
    uint64_t v31 = (v149 - (unsigned char *)v148) >> 2;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = v150 - (void)v148;
    if ((uint64_t)(v150 - (void)v148) >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v150, v34);
      unint64_t v30 = (char *)v148;
      unint64_t v28 = v149;
    }
    else
    {
      long long v35 = 0;
    }
    long long v36 = &v35[4 * v31];
    uint64_t v37 = &v35[4 * v34];
    *(_DWORD *)long long v36 = v157;
    unint64_t v29 = v36 + 4;
    while (v28 != v30)
    {
      int v38 = *((_DWORD *)v28 - 1);
      v28 -= 4;
      *((_DWORD *)v36 - 1) = v38;
      v36 -= 4;
    }
    char v148 = v36;
    float v149 = v29;
    unint64_t v150 = (unint64_t)v37;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *(_DWORD *)float v149 = v157;
    unint64_t v29 = v28 + 4;
  }
  float v149 = v29;
  quasar::alignTokensToFirstSeenPartialResultsV3(&v145, (unsigned __int8 **)v9, *(_DWORD *)(a1 + 612), (std::vector<int> *)&v158);
  char v39 = *a3;
  uint64_t v41 = (uint64_t)(*a3 + 14);
  char v40 = *(void **)v41;
  if (*(void *)v41)
  {
    v39[15] = (uint64_t)v40;
    operator delete(v40);
    *(void *)uint64_t v41 = 0;
    *(void *)(v41 + 8) = 0;
    *(void *)(v41 + 16) = 0;
  }
  *((_OWORD *)v39 + 7) = v158;
  _OWORD v39[16] = v159;
  int v42 = *a3;
  int v43 = *(_DWORD *)(a1 + 608);
  int v44 = *(_DWORD *)(a1 + 612);
  char v176 = 0;
  long long v175 = 0uLL;
  if (*v9 != v9[1])
  {
    quasar::alignTokensToFirstSeenPartialResultsV3((unsigned __int8 ***)&v151, (unsigned __int8 **)v9, v43, (std::vector<int> *)&v177);
    long long v45 = (void *)v177.__r_.__value_.__r.__words[0];
    uint64_t v46 = (uint64_t)(v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 2;
    uint64_t v47 = v9[1];
    if (v46 != 0x6DB6DB6DB6DB6DB7 * ((v47 - *v9) >> 5))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"correctAlignedReceivedPartialResultIndexList.size() == tokens.size()", 68);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
    }
    if (v46 != (v42[15] - v42[14]) >> 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"correctAlignedSentPartialResultIndexList.size() == tokens.size()", 64);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
    }
    if (v47 != *v9)
    {
      unint64_t v48 = 0;
      while (1)
      {
        if (v48 >= (uint64_t)(v177.__r_.__value_.__l.__size_ - v177.__r_.__value_.__r.__words[0]) >> 2) {
LABEL_211:
        }
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        int v49 = *(_DWORD *)(v177.__r_.__value_.__r.__words[0] + 4 * v48);
        if (v49 == -1) {
          goto LABEL_60;
        }
        uint64_t v50 = v42[14];
        if (v48 >= (v42[15] - v50) >> 2) {
          goto LABEL_211;
        }
        int v51 = *(_DWORD *)(v50 + 4 * v48);
        if (v51 == -1)
        {
LABEL_60:
          long long v57 = (char *)*((void *)&v175 + 1);
          if (*((void *)&v175 + 1) >= (unint64_t)v176)
          {
            uint64_t v59 = (char *)v175;
            uint64_t v60 = (uint64_t)(*((void *)&v175 + 1) - v175) >> 2;
            unint64_t v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v62 = (uint64_t)&v176[-v175];
            if ((uint64_t)&v176[-v175] >> 1 > v61) {
              unint64_t v61 = v62 >> 1;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v61;
            }
            if (v63)
            {
              uint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v176, v63);
              long long v57 = (char *)*((void *)&v175 + 1);
              uint64_t v59 = (char *)v175;
            }
            else
            {
              uint64_t v64 = 0;
            }
            unint64_t v68 = (int *)&v64[4 * v60];
            *unint64_t v68 = 0;
            unint64_t v58 = v68 + 1;
            while (v57 != v59)
            {
              int v69 = *((_DWORD *)v57 - 1);
              v57 -= 4;
              *--unint64_t v68 = v69;
            }
            goto LABEL_83;
          }
          **((_DWORD **)&v175 + 1) = 0;
          long long v56 = v57 + 4;
        }
        else
        {
          unint64_t v52 = (v51 - v44);
          if (v52 >= (v149 - (unsigned char *)v148) >> 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"indexInSentEmissionPair < sentPartialResultsEmissionPair.second.size()", 70);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
          }
          unint64_t v53 = (v49 - v43);
          if (v53 >= (v155 - (unsigned char *)__p) >> 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"indexInReceivedEmissionPair < receivedPartialResultsEmissionPair.second.size()", 78);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
          }
          int v54 = *((_DWORD *)v148 + v52) - *((_DWORD *)__p + v53);
          long long v55 = (char *)*((void *)&v175 + 1);
          if (*((void *)&v175 + 1) >= (unint64_t)v176)
          {
            uint64_t v59 = (char *)v175;
            uint64_t v65 = (uint64_t)(*((void *)&v175 + 1) - v175) >> 2;
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v67 = (uint64_t)&v176[-v175];
            if ((uint64_t)&v176[-v175] >> 1 > v66) {
              unint64_t v66 = v67 >> 1;
            }
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v66;
            }
            if (v63)
            {
              uint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v176, v63);
              long long v55 = (char *)*((void *)&v175 + 1);
              uint64_t v59 = (char *)v175;
            }
            else
            {
              uint64_t v64 = 0;
            }
            unint64_t v68 = (int *)&v64[4 * v65];
            *unint64_t v68 = v54 & ~(v54 >> 31);
            unint64_t v58 = v68 + 1;
            while (v55 != v59)
            {
              int v70 = *((_DWORD *)v55 - 1);
              v55 -= 4;
              *--unint64_t v68 = v70;
            }
LABEL_83:
            *(void *)&long long v175 = v68;
            *((void *)&v175 + 1) = v58;
            char v176 = &v64[4 * v63];
            if (v59) {
              operator delete(v59);
            }
            goto LABEL_85;
          }
          **((_DWORD **)&v175 + 1) = v54 & ~(v54 >> 31);
          long long v56 = v55 + 4;
        }
        unint64_t v58 = v56;
LABEL_85:
        *((void *)&v175 + 1) = v58;
        if (0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5) <= ++v48)
        {
          long long v45 = (void *)v177.__r_.__value_.__r.__words[0];
          break;
        }
      }
    }
    if (v45)
    {
      v177.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
      operator delete(v45);
    }
    int v42 = *a3;
  }
  unint64_t v71 = (void *)v42[17];
  if (v71)
  {
    v42[18] = (uint64_t)v71;
    operator delete(v71);
    v42[17] = 0;
    v42[18] = 0;
    v42[19] = 0;
  }
  *(_OWORD *)(v42 + 17) = v175;
  v42[19] = (uint64_t)v176;
  std::string::size_type v72 = *a3;
  BOOL v73 = (_DWORD *)(*a3)[14];
  for (uint64_t i = (_DWORD *)(*a3)[15]; v73 != i; ++v73)
  {
    if (*v73 != -1)
    {
      uint64_t v75 = (*v73 - *(_DWORD *)(a1 + 612));
      if ((int)v75 < 0
        || (unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 568) - *(void *)(a1 + 560)) >> 3),
            v76 < v75))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"0 <= partialResultIndexWithoutOffset && partialResultIndexWithoutOffset <= sentPartialResultsEmissionPair.first.size()", 118);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
      }
      if (v76 == v75) {
        *BOOL v73 = -2;
      }
    }
  }
  uint64_t v77 = *(void *)(a1 + 416);
  if (v77 && *(unsigned char *)(v77 + 368) && *((unsigned char *)v72 + 80))
  {
    int16x8_t v78 = *(char ***)(v77 + 232);
    if (v78 == *(char ***)(v77 + 240)) {
      std::string::basic_string[abi:ne180100]<0>(&v144, "");
    }
    else {
      quasar::result_handler::toksToNormString(v78, &v144);
    }
    uint8x8_t v79 = (uint64_t *)a3;
    uint64_t v80 = *(void *)(a1 + 560);
    if (*(void *)(a1 + 568) != v80)
    {
      uint64_t v81 = 0;
      unint64_t v82 = 0;
      do
      {
        if ((uint64_t)v82 >= *(int *)(a1 + 448)) {
          break;
        }
        quasar::result_handler::toksToNormString((char **)(v80 + v81), &v177);
        if (quasar::startsWith((unsigned __int8 *)&v177, (unsigned __int8 *)&v144))
        {
          std::string::size_type size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v144.__r_.__value_.__l.__size_;
          }
          std::string::size_type v84 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
          if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v84 = v177.__r_.__value_.__l.__size_;
          }
          if (size < v84 && quasar::gLogLevel >= 5)
          {
            long long v173 = 0u;
            long long v174 = 0u;
            long long v171 = 0u;
            long long v172 = 0u;
            long long v169 = 0u;
            long long v170 = 0u;
            long long v167 = 0u;
            long long v168 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v158 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
            unsigned __int8 v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"VoiceEditingResultHandler: ", 27);
            unsigned int v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"preItnPrecedingUtteranceTopChoice: ", 35);
            unint64_t v87 = (v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v144
                : (std::string *)v144.__r_.__value_.__r.__words[0];
            uint64_t v88 = (v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v144.__r_.__value_.__r.__words[2])
                : v144.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)v87, v88);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v158);
            if (quasar::gLogLevel >= 5)
            {
              long long v173 = 0u;
              long long v174 = 0u;
              long long v171 = 0u;
              long long v172 = 0u;
              long long v169 = 0u;
              long long v170 = 0u;
              long long v167 = 0u;
              long long v168 = 0u;
              long long v165 = 0u;
              long long v166 = 0u;
              long long v163 = 0u;
              long long v164 = 0u;
              long long v161 = 0u;
              long long v162 = 0u;
              long long v159 = 0u;
              long long v160 = 0u;
              long long v158 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
              uint64_t v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"VoiceEditingResultHandler: ", 27);
              uint64_t v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"voiceCommandDefiniteLeak: ", 26);
              if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v91 = &v177;
              }
              else {
                long long v91 = (std::string *)v177.__r_.__value_.__r.__words[0];
              }
              if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v92 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v92 = v177.__r_.__value_.__l.__size_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v91, v92);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v158);
            }
          }
        }
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v177.__r_.__value_.__l.__data_);
        }
        ++v82;
        uint64_t v80 = *(void *)(a1 + 560);
        v81 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 568) - v80) >> 3) > v82);
    }
    a3 = (uint64_t **)v79;
    if (quasar::gLogLevel > 4)
    {
      long long v173 = 0u;
      long long v174 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v158 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
      long long v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"hasVoiceCommandDefiniteLeak: ", 29);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v158);
    }
    uint64_t v94 = *v79;
    uint64_t v95 = *(void *)(a1 + 416);
    quasar::getTopChoice(v95, 1, &v177);
    quasar::getTopChoice(v94, 1, &v175);
    uint64_t v96 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
    if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v97 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v97 = v177.__r_.__value_.__l.__size_;
    }
    if (!v97) {
      goto LABEL_178;
    }
    uint64_t v98 = HIBYTE(v176);
    if (SHIBYTE(v176) < 0) {
      uint64_t v98 = *((void *)&v175 + 1);
    }
    if (!v98 || v97 != v98) {
      goto LABEL_178;
    }
    if (SHIBYTE(v176) >= 0) {
      int v100 = (unsigned __int8 *)&v175;
    }
    else {
      int v100 = (unsigned __int8 *)v175;
    }
    if ((*((unsigned char *)&v177.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v177.__r_.__value_.__l.__data_, v100, v177.__r_.__value_.__l.__size_))
      {
LABEL_178:
        if (SHIBYTE(v176) < 0) {
          operator delete((void *)v175);
        }
        if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v177.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v144.__r_.__value_.__l.__data_);
        }
        goto LABEL_184;
      }
    }
    else if (*((unsigned char *)&v177.__r_.__value_.__s + 23))
    {
      int v101 = &v177;
      while (v101->__r_.__value_.__s.__data_[0] == *v100)
      {
        int v101 = (std::string *)((char *)v101 + 1);
        ++v100;
        if (!--v96) {
          goto LABEL_159;
        }
      }
      goto LABEL_178;
    }
LABEL_159:
    uint64_t v103 = **(void **)v94;
    uint64_t v102 = *(void *)(*(void *)v94 + 8);
    unint64_t v104 = 0x6DB6DB6DB6DB6DB7 * ((v102 - v103) >> 5);
    uint64_t v105 = **(void **)v95;
    if (v104 != 0x6DB6DB6DB6DB6DB7 * ((*(void *)(*(void *)v95 + 8) - v105) >> 5))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"topChoicePackage.size() == topChoiceLastSentCommandCandidate.size()", 67);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v158);
    }
    if (v102 != v103)
    {
      if (v104 <= 1) {
        uint64_t v106 = 1;
      }
      else {
        uint64_t v106 = 0x6DB6DB6DB6DB6DB7 * ((v102 - v103) >> 5);
      }
      uint64_t v107 = (_DWORD *)(v103 + 36);
      unint64_t v108 = (_DWORD *)(v105 + 36);
      do
      {
        _DWORD *v107 = *v108;
        *((void *)v107 - 1) = *((void *)v108 - 1);
        v107 += 56;
        v108 += 56;
        --v106;
      }
      while (v106);
    }
    if (!*(unsigned char *)(v95 + 368)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    quasar::getTopChoice((long long ***)(v95 + 232), (uint64_t *)&v158);
    uint64_t v109 = *(void *)(v94 + 88);
    unint64_t v110 = (*(void *)(v94 + 96) - v109) >> 2;
    unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v158 + 1) - v158) >> 3);
    if (v110 > v111 && v110 > (int)v111)
    {
      uint64_t v112 = 0;
      unint64_t v113 = (int)v111;
      uint64_t v115 = *(void *)(v94 + 112);
      uint64_t v114 = *(void *)(v94 + 120);
      uint64_t v116 = v94 + 112;
      unint64_t v117 = (v114 - v115) >> 2;
      uint64_t v118 = *(void *)(v116 + 24);
      unint64_t v119 = (*(void *)(v116 + 32) - v118) >> 2;
      uint64_t v120 = v110 - v113;
      uint64_t v121 = v118 + 4 * v113;
      BOOL v122 = v119 >= v113;
      uint64_t v123 = v119 - v113;
      if (!v122) {
        uint64_t v123 = 0;
      }
      uint64_t v124 = v115 + 4 * v113;
      BOOL v122 = v117 >= v113;
      uint64_t v125 = v117 - v113;
      if (!v122) {
        uint64_t v125 = 0;
      }
      uint64_t v126 = v109 + 4 * v113;
      do
      {
        *(_DWORD *)(v126 + 4 * v112) = -1;
        if (v125 == v112 || (*(_DWORD *)(v124 + 4 * v112) = -1, v123 == v112)) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        *(_DWORD *)(v121 + 4 * v112++) = 0;
      }
      while (v120 != v112);
    }
    uint64_t v178 = (void **)&v158;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v178);
    goto LABEL_178;
  }
LABEL_184:
  if (v148)
  {
    float v149 = (char *)v148;
    operator delete(v148);
  }
  *(void *)&long long v158 = &v145;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  if (__p)
  {
    int v155 = (char *)__p;
    operator delete(__p);
  }
  *(void *)&long long v158 = &v151;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
LABEL_189:
  if (quasar::gLogLevel >= 5)
  {
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    long long v161 = 0u;
    long long v162 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    long long v158 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v158);
    uint64_t v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)"(now=", 5);
    char v128 = (void *)std::ostream::operator<<();
    unsigned int v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)") handleFinal: debugInfo", 24);
    quasar::result_handler::operator<<(v129);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v158);
  }
  uint64_t v130 = *(void *)(a1 + 152);
  uint64_t v131 = v157;
  long long v132 = *a3;
  *a3 = 0;
  uint64_t v143 = (quasar::result_handler::Package *)v132;
  (*(void (**)(uint64_t, uint64_t, quasar::result_handler::Package **))(*(void *)v130 + 48))(v130, v131, &v143);
  long long v133 = v143;
  uint64_t v143 = 0;
  if (v133)
  {
    quasar::result_handler::Package::~Package(v133);
    MEMORY[0x1B3EA8670]();
  }
  *(unsigned char *)(a1 + 288) = 0;
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 296), 0);
  *(unsigned char *)(a1 + 304) = 0;
  *(void *)(a1 + 308) = 0;
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 400), 0);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 408), 0);
  std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100]((quasar::result_handler::Package **)(a1 + 416), 0);
  if (*(char *)(a1 + 447) < 0)
  {
    **(unsigned char **)(a1 + 424) = 0;
    *(void *)(a1 + 432) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 424) = 0;
    *(unsigned char *)(a1 + 447) = 0;
  }
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::clear(a1 + 464);
  uint64_t v134 = *(void *)(a1 + 520);
  uint64_t v135 = *(void *)(a1 + 512);
  uint64_t v136 = *(void *)(a1 + 568);
  uint64_t v137 = *(void *)(a1 + 560);
  v138.i64[0] = v134;
  v138.i64[1] = v136;
  v139.i64[0] = v135;
  v139.i64[1] = v137;
  int64x2_t v140 = (int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(v138, v139), 3uLL);
  v140.i64[0] = (-1431655765 * v140.i32[0]);
  v140.i64[1] = (-1431655765 * v140.i32[2]);
  *(unsigned char *)(a1 + 508) = 0;
  *(int32x2_t *)(a1 + 608) = vadd_s32(*(int32x2_t *)(a1 + 608), vmovn_s64(v140));
  if (v134 != v135)
  {
    do
    {
      v134 -= 24;
      *(void *)&long long v158 = v134;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
    }
    while (v134 != v135);
    uint64_t v136 = *(void *)(a1 + 568);
    uint64_t v137 = *(void *)(a1 + 560);
  }
  *(void *)(a1 + 52std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v135;
  while (v136 != v137)
  {
    v136 -= 24;
    *(void *)&long long v158 = v136;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
  }
  *(void *)(a1 + 568) = v137;
  *(void *)(a1 + 544) = *(void *)(a1 + 536);
  *(void *)(a1 + 592) = *(void *)(a1 + 584);
  *(void *)&long long v161 = 0;
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__vdeallocate((void ***)(a1 + 624));
  *(void *)(a1 + 64std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(void *)&long long v159 = 0;
  long long v158 = 0uLL;
  uint64_t v141 = (void *)(a1 + 648);
  long long v142 = *(void **)(a1 + 648);
  if (v142)
  {
    *(void *)(a1 + 656) = v142;
    operator delete(v142);
    *uint64_t v141 = 0;
    *(void *)(a1 + 656) = 0;
    *(void *)(a1 + 664) = 0;
  }
  *uint64_t v141 = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 664) = 0;
  long long v160 = 0uLL;
  *((void *)&v159 + 1) = 0;
  *(_DWORD *)(a1 + 672) = 0;
  char v151 = (void **)&v158;
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__destroy_vector::operator()[abi:ne180100](&v151);
  quasar::ScopeGuard::~ScopeGuard((quasar::ScopeGuard *)v180);
}

void quasar::result_handler::toksToNormString(char **a1@<X0>, std::string *a2@<X8>)
{
  int v16 = 0;
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      quasar::getNormString(v3, &__p);
      uint64_t v5 = v17;
      if (v16 == v17) {
        goto LABEL_18;
      }
      uint64_t v6 = HIBYTE(v17[-1].__r_.__value_.__r.__words[2]);
      if ((v6 & 0x80u) == 0) {
        std::string::size_type size = HIBYTE(v17[-1].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17[-1].__r_.__value_.__l.__size_;
      }
      std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
      }
      if (size != v8) {
        goto LABEL_18;
      }
      p_int data = (const void **)&v17[-1].__r_.__value_.__l.__data_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(*p_data, p_p, v17[-1].__r_.__value_.__l.__size_)) {
          goto LABEL_18;
        }
      }
      else if (*((unsigned char *)&v17[-1].__r_.__value_.__s + 23))
      {
        while (*(unsigned __int8 *)p_data == p_p->__r_.__value_.__s.__data_[0])
        {
          p_int data = (const void **)((char *)p_data + 1);
          p_p = (std::string *)((char *)p_p + 1);
          if (!--v6) {
            goto LABEL_25;
          }
        }
LABEL_18:
        if ((unint64_t)v5 >= v18)
        {
          uint64_t v13 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v16, (long long *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v5->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v12;
          }
          uint64_t v13 = (uint64_t)&v5[1];
        }
        uint64_t v17 = (std::string *)v13;
        char v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
LABEL_25:
      if (v9 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v3 += 224;
    }
    while (v3 != v4);
  }
  v14[0] = (uint64_t)" ";
  v14[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)&v16, v14);
  quasar::copyAndTrim((uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B21D9CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::VoiceEditingResultHandler::handlePause(quasar::result_handler::VoiceEditingResultHandler *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 19) + 56))();
}

uint64_t quasar::result_handler::VoiceEditingResultHandler::handleResume(quasar::result_handler::VoiceEditingResultHandler *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 19) + 64))();
}

void quasar::result_handler::VoiceEditingResultHandler::setParser(uint64_t a1, uint64_t *a2)
{
  if (quasar::gLogLevel >= 5)
  {
    memset(v8, 0, sizeof(v8));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Setting parser, parser=", 23);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v8);
  }
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v6;
  *(void *)(a1 + 168) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1B21D9E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::result_handler::topChoiceSilStartMs(uint64_t a1)
{
  uint64_t v1 = *(unsigned int ***)a1;
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    uint64_t v2 = v1[1];
    if (*v1 != v2)
    {
      while (v2 != *v1)
      {
        v2 -= 56;
        if (!quasar::Token::isAutoPunctuation((quasar::Token *)v2)) {
          return v2[9];
        }
      }
    }
  }
  return 0;
}

void quasar::result_handler::VoiceEditingResultHandler::filterPartialCommandsForWriting(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v7 = a1 + 16;
    std::string::size_type v8 = (uint64_t *)(a1 + 192);
    do
    {
      if (quasar::gLogLevel >= 5)
      {
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v21 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
        char v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
        uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"filter2 ", 8);
        quasar::result_handler::operator<<(v10, v3);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
      }
      uint64_t v11 = *(void *)(v3 + 152);
      uint64_t v12 = *(void *)(v3 + 160);
      uint64_t v13 = v11;
      if (v11 == v12)
      {
LABEL_10:
        if (quasar::gLogLevel >= 5)
        {
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v21 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
          uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"filter2 reject1", 15);
LABEL_25:
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
        }
      }
      else
      {
        while (*(int *)(v13 + 76) <= 0)
        {
          v13 += 168;
          if (v13 == v12)
          {
            while (!*(unsigned char *)(v11 + 81))
            {
              v11 += 168;
              if (v11 == v12) {
                goto LABEL_10;
              }
            }
            break;
          }
        }
        if (quasar::result_handler::hasInterpretationWithEmptyOrShortEnoughArguments(v3, v7, v8))
        {
          uint64_t v15 = *(void *)(a1 + 160);
          if (!v15 || (quasar::result_handler::hasInterpretationWithMaybeMatchingTarget(v3, v15, v7) & 1) != 0)
          {
            if (quasar::gLogLevel >= 5)
            {
              long long v36 = 0u;
              long long v37 = 0u;
              long long v34 = 0u;
              long long v35 = 0u;
              long long v32 = 0u;
              long long v33 = 0u;
              long long v30 = 0u;
              long long v31 = 0u;
              long long v28 = 0u;
              long long v29 = 0u;
              long long v26 = 0u;
              long long v27 = 0u;
              long long v24 = 0u;
              long long v25 = 0u;
              long long v22 = 0u;
              long long v23 = 0u;
              long long v21 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
              int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"filter2 pass", 12);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v21);
            }
            unint64_t v17 = a3[1];
            if (v17 >= a3[2])
            {
              uint64_t v18 = std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData const&>(a3, v3);
            }
            else
            {
              quasar::result_handler::CommandData::CommandData(a3[1], v3);
              uint64_t v18 = v17 + 184;
              a3[1] = v17 + 184;
            }
            a3[1] = v18;
            goto LABEL_26;
          }
          if (quasar::gLogLevel >= 5)
          {
            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v26 = 0u;
            long long v27 = 0u;
            long long v24 = 0u;
            long long v25 = 0u;
            long long v22 = 0u;
            long long v23 = 0u;
            long long v21 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
            uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"filter2 reject3", 15);
            goto LABEL_25;
          }
        }
        else if (quasar::gLogLevel >= 5)
        {
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v21 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
          unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"filter2 reject2", 15);
          goto LABEL_25;
        }
      }
LABEL_26:
      v3 += 184;
    }
    while (v3 != v4);
  }
}

void sub_1B21DA1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t quasar::result_handler::hasInterpretationWithEmptyOrShortEnoughArguments(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 152);
  long long v23 = *(uint64_t **)(a1 + 160);
  if (v3 != v23)
  {
    while (1)
    {
      v24[0] = (uint64_t)" ";
      v24[1] = 1;
      quasar::join<std::vector<std::string>>(v3 + 11, v24);
      if (v27[7] >= 0) {
        uint64_t v5 = (char *)__p;
      }
      else {
        uint64_t v5 = (char *)__p[0];
      }
      if (v27[7] >= 0) {
        uint64_t v6 = v27[7];
      }
      else {
        uint64_t v6 = (uint64_t)__p[1];
      }
      quasar::utf8::convertToLowerCaseOrEmpty(v5, v6, &v25);
      if ((v27[7] & 0x80000000) != 0) {
        operator delete(__p[0]);
      }
      uint64_t v7 = *a3;
      uint64_t v8 = a3[1];
      if (*a3 != v8)
      {
        LOBYTE(v9) = 0;
        do
        {
          std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v11 = (__int32 *)&v25;
          }
          else {
            uint64_t v11 = (__int32 *)v25.__r_.__value_.__r.__words[0];
          }
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v25.__r_.__value_.__l.__size_;
          }
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          char v30 = 0;
          uint64_t v31 = 0;
          uint64_t v32 = 0;
          char v33 = 0;
          char v34 = 0;
          uint64_t v35 = 0;
          *(_OWORD *)std::string __p = 0u;
          memset(v27, 0, sizeof(v27));
          int v12 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v11, (__int32 *)((char *)v11 + size), (uint64_t)__p, v7, 0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (v12)
          {
            unint64_t v13 = *(int *)(v7 + 64);
            if (0xAAAAAAAAAAAAAAABLL * ((v3[15] - v3[14]) >> 3) <= v13)
            {
              uint64_t v9 = 1;
              if (0xAAAAAAAAAAAAAAABLL * ((v3[18] - v3[17]) >> 3) <= v13) {
                goto LABEL_35;
              }
            }
            else
            {
              LOBYTE(v9) = 1;
            }
          }
          v7 += 72;
        }
        while (v7 != v8);
        if (v9) {
          goto LABEL_34;
        }
      }
      std::string::size_type v14 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v14 = v25.__r_.__value_.__l.__size_;
      }
      if (v14)
      {
        uint64_t v15 = v3[14];
        uint64_t v16 = v3[15];
      }
      else
      {
        uint64_t v15 = v3[14];
        uint64_t v19 = v3[15];
        if (v15 != v19)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v15) >> 3);
          unint64_t v18 = *(int *)(a2 + 68);
          goto LABEL_32;
        }
        uint64_t v16 = v3[14];
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
      unint64_t v18 = *(int *)(a2 + 64);
LABEL_32:
      if (v17 <= v18 && 0xAAAAAAAAAAAAAAABLL * ((v3[18] - v3[17]) >> 3) <= v18)
      {
        uint64_t v9 = 1;
        goto LABEL_35;
      }
LABEL_34:
      uint64_t v9 = 0;
LABEL_35:
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      v3 += 21;
      if (v3 == v23) {
        char v20 = 1;
      }
      else {
        char v20 = v9;
      }
      if (v20) {
        return v9;
      }
    }
  }
  return 0;
}

void sub_1B21DA480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::result_handler::hasInterpretationWithMaybeMatchingTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 60)) {
    return 1;
  }
  uint64_t v4 = *(void *)(a1 + 152);
  if (v4 == *(void *)(a1 + 160)) {
    return 0;
  }
  if (!*(unsigned char *)(v4 + 160)) {
    return 1;
  }
  uint64_t v6 = (void *)(v4 + 112);
  quasar::corrective_reranking::detokenize(v36, v4 + 112);
  unint64_t v7 = v37;
  if ((v37 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)v36[1];
  }
  if (!v7)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"target matching 1", 17);
      goto LABEL_24;
    }
LABEL_25:
    uint64_t v9 = 1;
    goto LABEL_26;
  }
  if (quasar::corrective_reranking::OverridesDictionary::slotOverrideStartsWith(*(void *)(a2 + 648), (uint64_t)v36))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"target matching 2", 17);
LABEL_24:
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v19);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "en_US");
  uint64_t v11 = a1 + 96;
  quasar::getRangesForSearchStringWithWordBoundariesValidation((uint64_t)v36, v11, (uint64_t)__p, (void **)&v19);
  long long v12 = v19;
  if ((void)v19)
  {
    *((void *)&v19 + 1) = v19;
    operator delete((void *)v12);
  }
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if ((void)v12 != *((void *)&v12 + 1))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      unint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"target matching 3", 17);
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  quasar::corrective_reranking::CorrectiveReranker::findTargetCandidates(*(void *)(a2 + 624), v11, v6, (uint64_t *)&v19);
  long long v14 = v19;
  __p[0] = &v19;
  std::vector<std::pair<std::string,quasar::corrective_reranking::TargetRange>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((void)v14 != *((void *)&v14 + 1))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"target matching 4", 17);
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  uint64_t v9 = 0;
LABEL_26:
  if ((char)v37 < 0) {
    operator delete(v36[0]);
  }
  return v9;
}

void sub_1B21DA7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (*(char *)(v16 - 65) < 0) {
    operator delete(*(void **)(v16 - 88));
  }
  _Unwind_Resume(exception_object);
}

void quasar::result_handler::VoiceEditingResultHandler::logDeadlines(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&v23[0] = a2;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<std::string_view,std::string_view>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 464, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)v23);
  size_t v6 = a3[1] - *a3;
  unint64_t v7 = (const void *)*((void *)v5 + 5);
  uint64_t v8 = *((void *)v5 + 6);
  uint64_t v9 = (char *)(v5 + 40);
  if (v6 != v8 - (void)v7 || memcmp((const void *)*a3, v7, v6))
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(v23, 0, sizeof(v23));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(now=", 5);
      uint64_t v11 = (void *)std::ostream::operator<<();
      long long v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") Deadlines for ", 16);
      int v13 = *(char *)(a2 + 23);
      if (v13 >= 0) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = *(void *)a2;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v15 = *(void *)(a2 + 8);
      }
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
      v20[0] = (uint64_t)" ";
      v20[1] = 1;
      quasar::join<std::vector<int>>(a3, v20);
      if ((v22 & 0x80u) == 0) {
        char v18 = __p;
      }
      else {
        char v18 = (void **)__p[0];
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v19 = v22;
      }
      else {
        uint64_t v19 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      if ((char)v22 < 0) {
        operator delete(__p[0]);
      }
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v23);
    }
    if (v9 != (char *)a3) {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v9, (char *)*a3, a3[1], (a3[1] - *a3) >> 2);
    }
  }
}

void sub_1B21DA9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a18);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::sendCommandCandidate(uint64_t a1, uint64_t a2)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)unsigned __int8 v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(now=", 5);
    uint64_t v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") send commandCandidate: ", 25);
    quasar::getTopChoice(*(void *)a2 + 48, 1, __p);
    if ((v13 & 0x80u) == 0) {
      size_t v6 = __p;
    }
    else {
      size_t v6 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v7 = v13;
    }
    else {
      uint64_t v7 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v14);
  }
  if (*(unsigned char *)(*(void *)a2 + 368))
  {
    if (quasar::gLogLevel < 5) {
      goto LABEL_17;
    }
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)unsigned __int8 v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(now=", 5);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") Sending eager for command execution", 37);
  }
  else
  {
    if (quasar::gLogLevel < 5) {
      goto LABEL_17;
    }
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)long long v24 = 0u;
    long long v25 = 0u;
    *(_OWORD *)unsigned __int8 v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    *(_OWORD *)uint64_t v19 = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(now=", 5);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") Sending eager for non-command utterance", 41);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v14);
LABEL_17:
  operator new();
}

void std::make_unique[abi:ne180100]<quasar::result_handler::Package,quasar::result_handler::Package&>()
{
}

void sub_1B21DB20C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1032C40821F4C15);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::extract@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(uint64_t **)result;
  long long v32 = *(uint64_t **)(result + 8);
  if (*(uint64_t **)result != v32)
  {
    long long v31 = a3 + 2;
    do
    {
      uint64_t v7 = (void *)v3[1];
      unint64_t v6 = v3[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = *v3;
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *v3) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
        if (2 * v12 > v11) {
          unint64_t v11 = 2 * v12;
        }
        if (v12 >= 0x555555555555555) {
          unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v13 = v11;
        }
        void v35[4] = v31;
        if (v13) {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v31, v13);
        }
        else {
          uint64_t v14 = 0;
        }
        long long v15 = &v14[24 * v10];
        v35[0] = v14;
        v35[1] = v15;
        v35[3] = &v14[24 * v13];
        *(void *)long long v15 = 0;
        *((void *)v15 + 1) = 0;
        *((void *)v15 + 2) = 0;
        v35[2] = v15 + 24;
        uint64_t v3 = a3;
        std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a3, v35);
        uint64_t v8 = (void *)a3[1];
        uint64_t result = (uint64_t)std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v35);
      }
      else
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        uint64_t v8 = v7 + 3;
        v3[1] = (uint64_t)(v7 + 3);
      }
      v3[1] = (uint64_t)v8;
      uint64_t v17 = *v4;
      uint64_t v16 = v4[1];
      if (v16 != *v4)
      {
        uint64_t v18 = 0;
        int v19 = 0;
        long long v34 = v8 - 3;
        do
        {
          long long v20 = (const quasar::Token *)(v17 + 224 * v18);
          if (*((_DWORD *)v20 + 7) <= a2 && *((_DWORD *)v20 + 9) >= -1)
          {
            unint64_t v22 = *(v8 - 2);
            if (v22 >= *(v8 - 1))
            {
              uint64_t result = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(v34, v20);
              long long v23 = (std::string *)result;
            }
            else
            {
              uint64_t result = (uint64_t)quasar::Token::Token((std::string *)*(v8 - 2), v20);
              long long v23 = (std::string *)(v22 + 224);
              *(v8 - 2) = v23;
            }
            *(v8 - 2) = v23;
            unint64_t v24 = v19 + 1;
            uint64_t v17 = *v4;
            uint64_t v16 = v4[1];
            if (0x6DB6DB6DB6DB6DB7 * ((v16 - *v4) >> 5) > v24
              && *(_DWORD *)(v17 + 224 * v24 + 32) == *(_DWORD *)(v17 + 224 * v19 + 32))
            {
              long long v25 = (const quasar::Token *)(v17 + 224 * v24);
              unint64_t v26 = v24 << 32;
              uint64_t v27 = 224 * v24 + 256;
              unint64_t v28 = v19 + 2;
              do
              {
                if ((unint64_t)v23 >= *(v8 - 1))
                {
                  uint64_t result = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(v34, v25);
                  long long v23 = (std::string *)result;
                }
                else
                {
                  uint64_t result = (uint64_t)quasar::Token::Token(v23, v25);
                  long long v23 = (std::string *)((char *)v23 + 224);
                  *(v8 - 2) = v23;
                }
                int v19 = v24;
                *(v8 - 2) = v23;
                uint64_t v17 = *v4;
                uint64_t v16 = v4[1];
                if (0x6DB6DB6DB6DB6DB7 * ((v16 - *v4) >> 5) <= v28) {
                  break;
                }
                ++v24;
                long long v25 = (const quasar::Token *)(v17 + 224 * v24);
                int v29 = *(_DWORD *)(v17 + v27);
                int v30 = *(_DWORD *)(v17 + 224 * SHIDWORD(v26) + 32);
                v26 += 0x100000000;
                v27 += 224;
                ++v28;
              }
              while (v29 == v30);
            }
          }
          uint64_t v18 = ++v19;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((v16 - v17) >> 5) > (unint64_t)v19);
      }
      v4 += 3;
      uint64_t v3 = a3;
    }
    while (v4 != v32);
  }
  return result;
}

void sub_1B21DB530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::repairAutoPunc(quasar::PartialHistory *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 == a2[1] || (uint64_t v3 = *(void *)(v2 + 8), *(void *)v2 == v3))
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"repairAutoPunc: input is empty", 30);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    }
    return 0;
  }
  if (quasar::Token::isAutoPunctuation((quasar::Token *)(v3 - 224)))
  {
    uint64_t v5 = *(void *)(v2 + 8);
    unint64_t v6 = (unsigned char *)(v5 - 224);
    int v7 = *(char *)(v5 - 201);
    if ((v7 & 0x80000000) == 0)
    {
      if (v7 != 1) {
        goto LABEL_16;
      }
LABEL_12:
      if (*v6 == 44)
      {
        if (quasar::gLogLevel >= 5)
        {
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          long long v32 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
          unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"repairAutoPunc: removed trailing AutoPunc comma", 47);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
          uint64_t v5 = *(void *)(v2 + 8);
        }
        quasar::Token::~Token((void **)(v5 - 224));
        *(void *)(v2 + 8) = v11;
      }
      goto LABEL_16;
    }
    if (*(void *)(v5 - 216) == 1)
    {
      unint64_t v6 = *(unsigned char **)v6;
      goto LABEL_12;
    }
  }
LABEL_16:
  quasar::PartialHistory::annotatePartial((uint64_t)a1, (long long **)v2, v31);
  unint64_t v12 = (quasar::Token *)v31[1];
  do
  {
    if (v12 == (quasar::Token *)v31[0]) {
      goto LABEL_33;
    }
    unint64_t v12 = (quasar::Token *)((char *)v12 - 232);
  }
  while (quasar::Token::isAutoPunctuation(v12));
  int v13 = *((_DWORD *)v12 + 57);
  if (v13 < 0)
  {
LABEL_33:
    if (quasar::gLogLevel >= 5)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"repairAutoPunc: input lacks non-AutoPunc token", 46);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    }
    goto LABEL_35;
  }
  quasar::PartialHistory::findLastMatchingPartial(a1, v13, (uint64_t)&v28);
  if (!v30)
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"repairAutoPunc: cannot find matching previous result", 52);
      goto LABEL_42;
    }
LABEL_35:
    uint64_t v9 = 0;
    goto LABEL_36;
  }
  if (v28 == v29)
  {
    if (quasar::gLogLevel < 5)
    {
LABEL_43:
      uint64_t v9 = 0;
      goto LABEL_44;
    }
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"repairAutoPunc: matching previous result is empty", 49);
LABEL_42:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    goto LABEL_43;
  }
  if (!quasar::Token::isAutoPunctuation((quasar::Token *)(v29 - 232))
    || quasar::Token::isAutoPunctuation((quasar::Token *)(*(void *)(v2 + 8) - 224)))
  {
    goto LABEL_43;
  }
  uint64_t v14 = *(void *)(v2 + 8);
  quasar::Token::Token(&v23, (const quasar::Token *)(v29 - 232));
  int v25 = *(_DWORD *)(v14 - 192);
  int v26 = v25;
  int v24 = v25;
  char v27 = *(unsigned char *)(v14 - 180);
  *(unsigned char *)(v14 - 18std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<quasar::Token>::emplace_back<quasar::Token&>((uint64_t *)v2, (const quasar::Token *)&v23);
  if (quasar::gLogLevel >= 5)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"VoiceEditingResultHandler: ", 27);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"repairAutoPunc: added trailing AutoPunc: ", 41);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = &v23;
    }
    else {
      uint64_t v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
  }
  quasar::Token::~Token((void **)&v23.__r_.__value_.__l.__data_);
  uint64_t v9 = 1;
LABEL_44:
  if (v30)
  {
    *(void *)&long long v32 = &v28;
    std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  }
LABEL_36:
  *(void *)&long long v32 = v31;
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  return v9;
}

void sub_1B21DB9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,__int16 *a48)
{
  if (a41)
  {
    a48 = (__int16 *)&a37;
    std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  }
  a48 = &a43;
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  _Unwind_Resume(a1);
}

void quasar::result_handler::VoiceEditingResultHandler::sendPartial(uint64_t a1, uint64_t *a2)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v3 = *(void *)(a1 + 408);
  if (v3)
  {
    quasar::getTopChoice(v3 + 48, 1, &v16);
  }
  else
  {
    long long v16 = 0uLL;
    *(void *)&long long v17 = 0;
  }
  uint64_t v4 = *a2;
  long long v21 = v16;
  *(void *)&long long v22 = v17;
  quasar::getTopChoice(v4 + 48, 1, &v16);
  if (SBYTE7(v19) < 0) {
    operator delete((void *)v18);
  }
  *(void *)&long long v19 = v17;
  long long v18 = v16;
  uint64_t v5 = BYTE7(v22);
  if ((SBYTE7(v22) & 0x80u) == 0) {
    uint64_t v6 = BYTE7(v22);
  }
  else {
    uint64_t v6 = *((void *)&v21 + 1);
  }
  uint64_t v7 = BYTE7(v19);
  if (SBYTE7(v19) < 0) {
    uint64_t v7 = *((void *)&v18 + 1);
  }
  if (v6 != v7) {
    goto LABEL_38;
  }
  if ((SBYTE7(v19) & 0x80u) == 0) {
    uint64_t v8 = (unsigned __int8 *)&v18;
  }
  else {
    uint64_t v8 = (unsigned __int8 *)v18;
  }
  if ((BYTE7(v22) & 0x80) != 0)
  {
    if (memcmp((const void *)v21, v8, *((size_t *)&v21 + 1))) {
      goto LABEL_38;
    }
  }
  else if (BYTE7(v22))
  {
    uint64_t v9 = (unsigned __int8 *)&v21;
    while (*v9 == *v8)
    {
      ++v9;
      ++v8;
      if (!--v5) {
        goto LABEL_22;
      }
    }
LABEL_38:
    operator new();
  }
LABEL_22:
  uint64_t v10 = HIBYTE(v23);
  if (v23 >= 0) {
    uint64_t v11 = HIBYTE(v23);
  }
  else {
    uint64_t v11 = v23;
  }
  uint64_t v12 = HIBYTE(v20);
  char v13 = HIBYTE(v20);
  if (v20 < 0) {
    uint64_t v12 = v20;
  }
  if (v11 != v12) {
    goto LABEL_38;
  }
  if (v20 >= 0) {
    uint64_t v14 = (unsigned __int8 *)&v19 + 8;
  }
  else {
    uint64_t v14 = (unsigned __int8 *)*((void *)&v19 + 1);
  }
  if ((HIBYTE(v23) & 0x80) != 0)
  {
    if (memcmp(*((const void **)&v22 + 1), v14, v23)) {
      goto LABEL_38;
    }
  }
  else if (HIBYTE(v23))
  {
    long long v15 = (unsigned __int8 *)&v22 + 8;
    while (*v15 == *v14)
    {
      ++v15;
      ++v14;
      if (!--v10) {
        goto LABEL_39;
      }
    }
    goto LABEL_38;
  }
LABEL_39:
  if (v13 < 0) {
    operator delete(*((void **)&v19 + 1));
  }
  if (SBYTE7(v19) < 0) {
    operator delete((void *)v18);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(*((void **)&v22 + 1));
  }
  if (SBYTE7(v22) < 0) {
    operator delete((void *)v21);
  }
}

void sub_1B21DC000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  std::pair<std::string,std::string>::~pair(v16 - 144);
  std::pair<std::string,std::string>::~pair(v16 - 96);
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::VoiceEditingResultHandler::finishHandling(quasar::result_handler::VoiceEditingResultHandler *this)
{
  uint64_t v2 = *((void *)this + 22);
  if (*((unsigned char *)this + 304))
  {
    BOOL v3 = 0;
  }
  else
  {
    uint64_t v4 = *((void *)this + 37);
    if (v4) {
      BOOL v3 = *(void *)(v4 + 160) == *(void *)(v4 + 168);
    }
    else {
      BOOL v3 = 1;
    }
  }
  return (*(uint64_t (**)(uint64_t, BOOL))(*(void *)v2 + 48))(v2, v3);
}

void quasar::PartialHistory::addPartial(uint64_t *a1, long long **a2, int a3)
{
  quasar::PartialHistory::annotatePartial((uint64_t)a1, a2, v17);
  std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::emplace_back<std::vector<quasar::PartialHistory::AnnotatedToken>>(a1, (uint64_t)v17);
  long long v18 = (void **)v17;
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v18);
  unint64_t v5 = a1[5];
  uint64_t v6 = (char *)a1[4];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)a1[3];
    uint64_t v9 = (v6 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v5 - (void)v8;
    unint64_t v11 = (uint64_t)(v5 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 5), v12);
      uint64_t v8 = (char *)a1[3];
      uint64_t v6 = (char *)a1[4];
    }
    else
    {
      char v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    long long v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = a3;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    a1[3] = (uint64_t)v14;
    a1[4] = (uint64_t)v7;
    a1[5] = (uint64_t)v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v6 = a3;
    uint64_t v7 = v6 + 4;
  }
  a1[4] = (uint64_t)v7;
}

void sub_1B21DC218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1B21DC290(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::pair<std::string const,int> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1B21DC504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::pair<std::string const,int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B21DC5B8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::Token::~Token(v4 - 29);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__list_imp<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void quasar::result_handler::CommandInterpretation::~CommandInterpretation(void **this)
{
  uint64_t v2 = this + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::locale *std::__optional_destruct_base<std::basic_regex<char,std::regex_traits<char>>,false>::~__optional_destruct_base[abi:ne180100](std::locale *this)
{
  if (LOBYTE(this[8].__locale_))
  {
    locale = this[6].__locale_;
    if (locale) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
    }
    std::locale::~locale(this);
  }
  return this;
}

void quasar::ScopeGuard::~ScopeGuard(quasar::ScopeGuard *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](this);
}

uint64_t *quasar::result_handler::clean(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void **)a1[1];
  if ((void **)*a1 != v3)
  {
    if (*(void *)v2 == *(void *)(v2 + 8))
    {
      do
      {
        v3 -= 3;
        unint64_t v12 = v3;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v12);
      }
      while (v3 != (void **)v2);
      a1[1] = v2;
    }
    else
    {
      while (*(void *)v2 != *(void *)(v2 + 8))
      {
        v2 += 24;
        if ((void **)v2 == v3)
        {
          uint64_t v2 = a1[1];
          goto LABEL_14;
        }
      }
      if ((void **)v2 != v3)
      {
        uint64_t v4 = v2 + 24;
        if ((void **)(v2 + 24) != v3)
        {
          do
          {
            if (*(void *)v4 != *(void *)(v4 + 8))
            {
              std::vector<quasar::Token>::__vdeallocate((void **)v2);
              *(_OWORD *)uint64_t v2 = *(_OWORD *)v4;
              *(void *)(v2 + 16) = *(void *)(v4 + 16);
              *(void *)uint64_t v4 = 0;
              *(void *)(v4 + 8) = 0;
              *(void *)(v4 + 16) = 0;
              v2 += 24;
            }
            v4 += 24;
          }
          while ((void **)v4 != v3);
          uint64_t v3 = (void **)a1[1];
        }
      }
LABEL_14:
      std::vector<std::vector<quasar::Token>>::erase((uint64_t)a1, v2, (uint64_t)v3);
    }
  }
  __int16 v11 = 0;
  uint64_t result = quasar::Align::MakeMonotonic(a1, (unsigned char *)&v11 + 1, &v11);
  uint64_t v6 = (void *)*a1;
  uint64_t v7 = (void *)a1[1];
  if ((void *)*a1 != v7)
  {
    do
    {
      unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6[1] - *v6) >> 5);
      if (v8 >= 2)
      {
        unint64_t v9 = v8 - 1;
        unint64_t v10 = (_DWORD *)(*v6 + 252);
        do
        {
          if (*(v10 - 55) != *v10) {
            *(v10 - 55) = *v10;
          }
          v10 += 56;
          --v9;
        }
        while (v9);
      }
      v6 += 3;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t std::vector<std::vector<quasar::Token>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<quasar::Token> *,std::vector<quasar::Token> *,std::vector<quasar::Token> *>((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void ***)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        unint64_t v10 = v7;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v10);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void quasar::result_handler::clampTimestampsIfNeeded(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (*(void **)a1 != v3)
  {
    char v4 = 0;
    do
    {
      unint64_t v5 = (_DWORD *)*v2;
      uint64_t v6 = (_DWORD *)v2[1];
      while (v5 != v6)
      {
        if (v5[7] > a2)
        {
          v5[7] = a2;
          char v4 = 1;
        }
        if (v5[9] > a2)
        {
          v5[9] = a2;
          char v4 = 1;
        }
        if (v5[8] > a2)
        {
          v5[8] = a2;
          char v4 = 1;
        }
        v5 += 56;
      }
      v2 += 3;
    }
    while (v2 != v3);
    if ((v4 & (quasar::gLogLevel > 4)) != 0)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"VoiceEditingResultHandler: ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Token timestamp is too large and likely wrong. Clamping it.", 59);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v8);
    }
  }
}

void sub_1B21DCBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *quasar::result_handler::initSegmentation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, quasar::PartialHistory *a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(uint64_t **)a3;
  if (*(void *)a3 == *(void *)(a3 + 8)) {
    goto LABEL_64;
  }
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (*result == v11) {
    goto LABEL_64;
  }
  char v13 = *(uint64_t **)a4;
  if (*(void *)a4 == *(void *)(a4 + 8) || *v13 == v13[1]) {
    goto LABEL_64;
  }
  unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((v11 - v10) >> 5);
  if ((int)a5 >= 1)
  {
    uint64_t v18 = a5;
    BOOL v19 = v17 > a5;
    a5 = v17 <= a5 ? a5 : v17;
    if (v19)
    {
      unint64_t v20 = (int *)(v10 + 224 * v18 + 32);
      while (1)
      {
        int v21 = *v20;
        v20 += 56;
        if (*(_DWORD *)(v10 + 224 * (v18 - 1) + 32) != v21) {
          break;
        }
        if (a5 == ++v18) {
          goto LABEL_16;
        }
      }
      LODWORD(a5) = v18;
    }
  }
LABEL_16:
  int v82 = a5;
  if (v17 <= (int)a5)
  {
LABEL_64:
    *a7 = 0;
    a7[184] = 0;
  }
  else
  {
    uint64_t v80 = 0;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    *(_OWORD *)uint64_t v77 = 0u;
    long long v74 = 0u;
    *(_OWORD *)uint64_t v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    char v81 = 1;
    int v22 = *(_DWORD *)(v10 + 224 * (int)a5 + 28);
    quasar::result_handler::splitChoice(result, &v82, (uint64_t *)&v69, 0);
    if (*((void *)&v70 + 1) == (void)v71 || **((void **)&v70 + 1) == *(void *)(*((void *)&v70 + 1) + 8))
    {
      *a7 = 0;
      a7[184] = 0;
    }
    else
    {
      int v54 = a7;
      uint64_t v55 = a2;
      int SplitEnd = quasar::result_handler::findSplitEnd(v13, v22);
      if ((SplitEnd & 0x80000000) == 0) {
        quasar::result_handler::splitChoice(v13, &SplitEnd, (uint64_t *)&v69, 1);
      }
      uint64_t v56 = a1;
      unint64_t v23 = *(uint64_t **)a3;
      uint64_t v24 = *(void *)(a3 + 8);
      if (0xAAAAAAAAAAAAAAABLL * ((v24 - *(void *)a3) >> 3) >= 2)
      {
        unint64_t v25 = 1;
        uint64_t v26 = 3;
        do
        {
          LODWORD(v85) = 0;
          LODWORD(v85) = quasar::result_handler::findSplitEnd(&v23[v26], v22);
          if ((v85 & 0x80000000) == 0)
          {
            quasar::result_handler::splitChoice(&v23[v26], (int *)&v85, (uint64_t *)&v69, 0);
            unint64_t v23 = *(uint64_t **)a3;
            uint64_t v24 = *(void *)(a3 + 8);
          }
          ++v25;
          v26 += 3;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3) > v25);
      }
      char v27 = *(uint64_t **)a4;
      uint64_t v28 = *(void *)(a4 + 8);
      if (0xAAAAAAAAAAAAAAABLL * ((v28 - *(void *)a4) >> 3) >= 2)
      {
        unint64_t v29 = 1;
        uint64_t v30 = 3;
        do
        {
          LODWORD(v85) = 0;
          LODWORD(v85) = quasar::result_handler::findSplitEnd(&v27[v30], v22);
          if ((v85 & 0x80000000) == 0)
          {
            quasar::result_handler::splitChoice(&v27[v30], (int *)&v85, (uint64_t *)&v69, 1);
            char v27 = *(uint64_t **)a4;
            uint64_t v28 = *(void *)(a4 + 8);
          }
          ++v29;
          v30 += 3;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v28 - (uint64_t)v27) >> 3) > v29);
      }
      int v31 = quasar::result_handler::repairAutoPunc(a6, (uint64_t *)&v69);
      if (quasar::gLogLevel > 4) {
        int v32 = v31;
      }
      else {
        int v32 = 0;
      }
      if (v32 == 1)
      {
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        memset(v86, 0, sizeof(v86));
        long long v85 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v85);
        long long v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"VoiceEditingResultHandler: ", 27);
        long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"repaired AutoPunc: precedingUtterance ", 38);
        quasar::getTopChoice((uint64_t)&v69, 1, &__p);
        if (v67 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if (v67 >= 0) {
          uint64_t v36 = HIBYTE(v67);
        }
        else {
          uint64_t v36 = v66;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)p_p, v36);
        if (SHIBYTE(v67) < 0) {
          operator delete(__p);
        }
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v85);
        if (quasar::gLogLevel >= 5)
        {
          long long v99 = 0u;
          long long v100 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          memset(v86, 0, sizeof(v86));
          long long v85 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v85);
          long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"VoiceEditingResultHandler: ", 27);
          long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"repaired AutoPunc: commandUtterance ", 36);
          quasar::getTopChoice((uint64_t)&v70 + 8, 1, &__p);
          if (v67 >= 0) {
            long long v39 = &__p;
          }
          else {
            long long v39 = __p;
          }
          if (v67 >= 0) {
            uint64_t v40 = HIBYTE(v67);
          }
          else {
            uint64_t v40 = v66;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
          if (SHIBYTE(v67) < 0) {
            operator delete(__p);
          }
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v85);
        }
      }
      std::string __p = 0;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      if (&__p != (void **)v69 && (void)v69 != *((void *)&v69 + 1)) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&__p, *(void *)v69, *(void *)(v69 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v69 + 8) - *(void *)v69) >> 5));
      }
      if (&v62 != *((uint64_t **)&v70 + 1) && *((void *)&v70 + 1) != (void)v71) {
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)&v62, **((void **)&v70 + 1), *(void *)(*((void *)&v70 + 1) + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(*((void *)&v70 + 1) + 8) - **((void **)&v70 + 1)) >> 5));
      }
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v59, (uint64_t)__p, v66, 0x6DB6DB6DB6DB6DB7 * ((v66 - (uint64_t)__p) >> 5));
      if (v59 != v60 && *(unsigned char *)(v60 - 180)) {
        *(unsigned char *)(v60 - 18std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      }
      if (*(char *)(v56 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v85, *(const std::string::value_type **)v56, *(void *)(v56 + 8));
      }
      else
      {
        long long v85 = *(_OWORD *)v56;
        *(void *)&v86[0] = *(void *)(v56 + 16);
      }
      quasar::tokens2Str(&v59, (std::string *)((char *)v86 + 8));
      memset(&v57, 0, sizeof(v57));
      long long v83 = &v57;
      char v84 = 0;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
      v57.__r_.__value_.__r.__words[2] = v57.__r_.__value_.__r.__words[0] + 48;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57.__r_.__value_.__r.__words[2], &v85, &v87, (std::string *)v57.__r_.__value_.__l.__data_);
      quasar::joinAndAutoSpace(&v57, &v58);
      if (SBYTE7(v76) < 0) {
        operator delete(v75[0]);
      }
      *(_OWORD *)uint64_t v75 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(void *)&long long v76 = *((void *)&v58.__r_.__value_.__l + 2);
      *((unsigned char *)&v58.__r_.__value_.__s + 23) = 0;
      v58.__r_.__value_.__s.__data_[0] = 0;
      long long v83 = &v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      for (uint64_t i = 0; i != -48; i -= 24)
      {
        if (*((char *)&v86[1] + i + 15) < 0) {
          operator delete(*(void **)((char *)v86 + i + 8));
        }
      }
      if ((BYTE7(v76) & 0x80) != 0)
      {
        DWORD2(v76) = v75[1];
        std::string::__init_copy_ctor_external((std::string *)&v85, (const std::string::value_type *)v75[0], (std::string::size_type)v75[1]);
      }
      else
      {
        DWORD2(v76) = BYTE7(v76);
        long long v85 = *(_OWORD *)v75;
        *(void *)&v86[0] = v76;
      }
      if (*(char *)(v55 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)v86 + 8), *(const std::string::value_type **)v55, *(void *)(v55 + 8));
      }
      else
      {
        *(_OWORD *)((char *)v86 + 8) = *(_OWORD *)v55;
        *((void *)&v86[1] + 1) = *(void *)(v55 + 16);
      }
      memset(&v57, 0, sizeof(v57));
      long long v83 = &v57;
      char v84 = 0;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
      v57.__r_.__value_.__r.__words[2] = v57.__r_.__value_.__r.__words[0] + 48;
      v57.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57.__r_.__value_.__r.__words[2], &v85, &v87, (std::string *)v57.__r_.__value_.__l.__data_);
      quasar::joinAndAutoSpace(&v57, &v58);
      if (SBYTE7(v76) < 0) {
        operator delete(v75[0]);
      }
      *(_OWORD *)uint64_t v75 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
      *(void *)&long long v76 = *((void *)&v58.__r_.__value_.__l + 2);
      *((unsigned char *)&v58.__r_.__value_.__s + 23) = 0;
      v58.__r_.__value_.__s.__data_[0] = 0;
      long long v83 = &v57;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
      for (uint64_t j = 0; j != -48; j -= 24)
      {
        if (*((char *)&v86[1] + j + 15) < 0) {
          operator delete(*(void **)((char *)v86 + j + 8));
        }
      }
      memset(&v58, 0, sizeof(v58));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v58, v62, v63, 0x6DB6DB6DB6DB6DB7 * ((v63 - v62) >> 5));
      std::string::size_type size = v58.__r_.__value_.__l.__size_;
      long long v43 = (quasar::Token *)v58.__r_.__value_.__r.__words[0];
      if (v58.__r_.__value_.__l.__size_ == v58.__r_.__value_.__r.__words[0])
      {
LABEL_106:
        long long v43 = (quasar::Token *)size;
      }
      else
      {
        uint64_t v45 = 0;
        unint64_t v46 = (int64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) / 224;
        if (v46 <= 1) {
          int64_t v47 = 1;
        }
        else {
          int64_t v47 = (int64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) / 224;
        }
        long long v48 = (unsigned char *)(v58.__r_.__value_.__r.__words[0] + 172);
        do
        {
          if (v45 && *v48) {
            *((unsigned char *)v43 + 224 * (v45 - 1) + 44) = *(v48 - 128);
          }
          if (v46 > ++v45 && v48[1]) {
            v48[97] = *(v48 - 127);
          }
          v48 += 224;
        }
        while (v47 != v45);
        while (!quasar::Token::isAutoPunctuation(v43))
        {
          long long v43 = (quasar::Token *)((char *)v43 + 224);
          if (v43 == (quasar::Token *)size) {
            goto LABEL_106;
          }
        }
        if (v43 != (quasar::Token *)size)
        {
          for (unint64_t k = (long long *)((char *)v43 + 224); k != (long long *)size; k += 14)
          {
            if (!quasar::Token::isAutoPunctuation((quasar::Token *)k))
            {
              quasar::Token::operator=((uint64_t)v43, k);
              long long v43 = (quasar::Token *)((char *)v43 + 224);
            }
          }
        }
      }
      std::vector<quasar::Token>::erase((uint64_t)&v58, (uint64_t)v43, (long long *)v58.__r_.__value_.__l.__size_);
      unint64_t v50 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v58.__r_.__value_.__l.__size_ - v58.__r_.__value_.__r.__words[0]) >> 5);
      if (v50 >= 2)
      {
        unint64_t v51 = v50 - 1;
        unint64_t v52 = (_DWORD *)(v58.__r_.__value_.__r.__words[0] + 252);
        do
        {
          *(v52 - 55) = *v52;
          v52 += 56;
          --v51;
        }
        while (v51);
      }
      quasar::tokens2Str((uint64_t *)&v58, (std::string *)&v85);
      if (SBYTE7(v78) < 0) {
        operator delete(v77[0]);
      }
      *(_OWORD *)uint64_t v77 = v85;
      *(void *)&long long v78 = *(void *)&v86[0];
      BYTE7(v86[0]) = 0;
      LOBYTE(v85) = 0;
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      unint64_t v53 = (void *)BYTE7(v78);
      if (SBYTE7(v78) < 0) {
        unint64_t v53 = v77[1];
      }
      unsigned char *v54 = 0;
      v54[184] = 0;
      if (v53 && v81)
      {
        std::__construct_at[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData,quasar::result_handler::CommandData*>((uint64_t)v54, (uint64_t)&v69);
        v54[184] = 1;
      }
      *(void *)&long long v85 = &v59;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      *(void *)&long long v85 = &v62;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
      *(void *)&long long v85 = &__p;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
    }
    return (uint64_t *)std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v69);
  }
  return result;
}

void sub_1B21DD524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a60);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

BOOL kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  BOOL v4 = kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Get(a1, a2, &v6);
  if (v4 && v6 != a3) {
    std::vector<quasar::result_handler::CommandInterpretation>::__assign_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>(a3, *(std::string **)v6, *(quasar::result_handler::CommandInterpretation **)(v6 + 8), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
  }
  return v4;
}

void quasar::result_handler::parseToInterpretation(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a3;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 3212836864;
  *(_OWORD *)(a3 + 88) = 0u;
  unint64_t v68 = (uint64_t *)(a3 + 88);
  *(_WORD *)(a3 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_DWORD *)(a3 + 164) = 0;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 145) = 0u;
  Intent = (char *)quasar::corrective_reranking::Parse::getIntent((quasar::corrective_reranking::Parse *)a1, (uint64_t)&v77);
  LOBYTE(v7) = v79;
  if (v79 < 0)
  {
    if (v78 != 7) {
      goto LABEL_13;
    }
    unint64_t v8 = v77;
  }
  else
  {
    if (v79 != 7)
    {
LABEL_11:
      uint64_t v7 = v7;
      goto LABEL_14;
    }
    unint64_t v8 = (void **)&v77;
  }
  int v9 = *(_DWORD *)v8;
  int v10 = *(_DWORD *)((char *)v8 + 3);
  if (v9 == 1952672100 && v10 == 1702125940)
  {
    Intent = (char *)MEMORY[0x1B3EA7B20](&v77, "");
    LOBYTE(v7) = v79;
    if ((v79 & 0x80) == 0) {
      goto LABEL_11;
    }
  }
  else if ((v79 & 0x80) == 0)
  {
    goto LABEL_11;
  }
LABEL_13:
  uint64_t v7 = v78;
LABEL_14:
  uint64_t v69 = v5;
  if (!v7) {
    goto LABEL_48;
  }
  quasar::corrective_reranking::intentToCommandIdentifier((uint64_t *)&v77, (std::string *)v70);
  if (*(char *)(v5 + 23) < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v70;
  *(void **)(v5 + 16) = v71[0];
  unint64_t v12 = (quasar::corrective_reranking::Parse *)quasar::corrective_reranking::TextEdit::TextEdit((quasar::corrective_reranking::TextEdit *)v70, (const quasar::corrective_reranking::Parse *)a1);
  CommandsWithMetaTarget = (void *)quasar::corrective_reranking::Parse::getCommandsWithMetaTarget(v12);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandsWithMetaTarget, (unsigned __int8 *)&v77))
  {
    quasar::corrective_reranking::TextEdit::targetIn((uint64_t)v70, a2, &v76);
    uint64_t v14 = (void **)(v5 + 24);
    if (*(char *)(v5 + 47) < 0) {
      operator delete(*v14);
    }
    *(_OWORD *)uint64_t v14 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
    *(void *)(v5 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)&v76.__r_.__value_.__l + 2);
  }
  std::string::operator=((std::string *)(v5 + 48), (const std::string *)&__p[1]);
  *(_DWORD *)(v5 + 76) = 1;
  uint64_t v15 = *(unsigned __int8 *)(v5 + 47);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(v5 + 32);
  }
  if (v15)
  {
    int v16 = 2;
    *(_DWORD *)(v5 + 76) = 2;
    uint64_t v17 = *(unsigned __int8 *)(v5 + 71);
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(v5 + 56);
    }
    if (v17)
    {
      int v16 = 3;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v18 = *(unsigned __int8 *)(v5 + 71);
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = *(void *)(v5 + 56);
    }
    if (v18)
    {
      int v16 = 2;
      *(_DWORD *)(v5 + 76) = 2;
    }
    else
    {
      int v16 = 1;
    }
  }
  uint64_t v19 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 56) == v19) {
    goto LABEL_41;
  }
  unint64_t v20 = (void *)(v19 - 24);
  int v21 = *(char *)(v19 - 1);
  if (v21 < 0)
  {
    if (*(void *)(v19 - 16) != 4) {
      goto LABEL_41;
    }
    unint64_t v20 = (void *)*v20;
  }
  else if (v21 != 4)
  {
    goto LABEL_41;
  }
  if (*(_DWORD *)v20 != 1701736270) {
    goto LABEL_41;
  }
LABEL_28:
  *(_DWORD *)(v5 + 76) = v16 + 1;
LABEL_41:
  *(unsigned char *)(v5 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = !quasar::corrective_reranking::Parse::isIncomplete((quasar::corrective_reranking::Parse *)a1);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  if (SHIBYTE(v74) < 0) {
    operator delete(__p[1]);
  }
  if (LOBYTE(__p[0]))
  {
    Intent = (char *)v71[1];
    if (v71[1])
    {
      *(void **)&long long v72 = v71[1];
      operator delete(v71[1]);
    }
  }
  if (SHIBYTE(v71[0]) < 0) {
    operator delete(v70[0]);
  }
LABEL_48:
  *(_DWORD *)(v5 + 72) = *(_DWORD *)(a1 + 144);
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v22 = *(void *)(a1 + 64);
  if (v23 != v22)
  {
    int v24 = *(char *)(v23 + 23);
    if ((v24 & 0x80000000) == 0)
    {
      unint64_t v25 = *(_DWORD **)(a1 + 56);
      if (v24 != 4) {
        goto LABEL_55;
      }
LABEL_54:
      BOOL v26 = *v25 == 1701736270;
      goto LABEL_56;
    }
    if (*(void *)(v23 + 8) == 4)
    {
      unint64_t v25 = *(_DWORD **)v23;
      goto LABEL_54;
    }
  }
LABEL_55:
  BOOL v26 = 0;
LABEL_56:
  *(unsigned char *)(v5 + 81) = v26;
  if (0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 3) != (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"parse.outputs.size() == parse.utterance.size()", 46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v70);
  }
  if (v23 != v22)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v66 = (uint64_t *)(v5 + 136);
    uint64_t v67 = (uint64_t *)(v5 + 112);
    do
    {
      uint64_t v29 = *(void *)(a1 + 32);
      CommandTokens = (void *)quasar::corrective_reranking::Parse::getCommandTokens((quasar::corrective_reranking::Parse *)Intent);
      int v31 = (char *)(v23 + 24 * v27);
      int v32 = (long long *)(v29 + 32 * v27);
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(CommandTokens, (unsigned __int8 *)v31))
      {
        unint64_t v33 = *(void *)(v5 + 96);
        if (v33 >= *(void *)(v5 + 104))
        {
          uint64_t v34 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v68, v32);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v68, v32);
          uint64_t v34 = v33 + 24;
        }
        *(void *)(v5 + 96) = v34;
      }
      else
      {
        uint64_t v35 = v31[23];
        if (v31[23] < 0)
        {
          uint64_t v36 = *(char **)v31;
          uint64_t v37 = *((void *)v31 + 1);
        }
        else
        {
          uint64_t v36 = v31;
          uint64_t v37 = v31[23];
        }
        if (v37 >= 6)
        {
          long long v38 = &v36[v37];
          long long v39 = v36;
          do
          {
            uint64_t v40 = (char *)memchr(v39, 84, v37 - 5);
            if (!v40) {
              break;
            }
            if (*(_DWORD *)v40 == 1196573012 && *((_WORD *)v40 + 2) == 21573)
            {
              if (v40 == v38 || v40 - v36 == -1) {
                break;
              }
              unint64_t v42 = *(void *)(v69 + 120);
              if (v42 >= *(void *)(v69 + 128))
              {
                uint64_t v43 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v67, v32);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v67, v32);
                uint64_t v43 = v42 + 24;
              }
              *(void *)(v69 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v43;
              goto LABEL_112;
            }
            long long v39 = v40 + 1;
            uint64_t v37 = v38 - (unsigned char *)v39;
          }
          while (v38 - (unsigned char *)v39 >= 6);
        }
        if ((v35 & 0x80) != 0)
        {
          long long v44 = *(char **)v31;
          uint64_t v45 = *((void *)v31 + 1);
        }
        else
        {
          long long v44 = v31;
          uint64_t v45 = v35;
        }
        if (v45 >= 7)
        {
          unint64_t v46 = &v44[v45];
          int64_t v47 = v44;
          do
          {
            long long v48 = (char *)memchr(v47, 80, v45 - 6);
            if (!v48) {
              break;
            }
            if (*(_DWORD *)v48 == 1280917840 && *(_DWORD *)(v48 + 3) == 1145130828)
            {
              if (v48 == v46 || v48 - v44 == -1) {
                break;
              }
              unint64_t v50 = *(void *)(v69 + 144);
              if (v50 >= *(void *)(v69 + 152))
              {
                uint64_t v51 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v66, v32);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v66, v32);
                uint64_t v51 = v50 + 24;
              }
              *(void *)(v69 + 144) = v51;
              goto LABEL_112;
            }
            int64_t v47 = v48 + 1;
            uint64_t v45 = v46 - (unsigned char *)v47;
          }
          while (v46 - (unsigned char *)v47 >= 7);
        }
        if ((v35 & 0x80) != 0)
        {
          unint64_t v52 = *(char **)v31;
          uint64_t v35 = *((void *)v31 + 1);
        }
        else
        {
          unint64_t v52 = v31;
        }
        if (v35 >= 4)
        {
          unint64_t v53 = &v52[v35];
          int v54 = v52;
          do
          {
            uint64_t v55 = (char *)memchr(v54, 78, v35 - 3);
            if (!v55) {
              break;
            }
            if (*(_DWORD *)v55 == 1701736270)
            {
              if (v55 != v53 && v55 - v52 != -1) {
                ++*(_DWORD *)(v69 + 164);
              }
              break;
            }
            int v54 = v55 + 1;
            uint64_t v35 = v53 - (unsigned char *)v54;
          }
          while (v53 - (unsigned char *)v54 >= 4);
        }
      }
LABEL_112:
      if (v31[23] < 0)
      {
        std::string v57 = v31;
        int v31 = *(char **)v31;
        uint64_t v56 = *((void *)v57 + 1);
      }
      else
      {
        uint64_t v56 = v31[23];
      }
      std::string v58 = &v31[v56];
      if (v56 >= 6)
      {
        uint64_t v59 = v31;
        uint64_t v5 = v69;
        do
        {
          Intent = (char *)memchr(v59, 84, v56 - 5);
          if (!Intent) {
            break;
          }
          if (*(_DWORD *)Intent == 1196573012 && *((_WORD *)Intent + 2) == 21573) {
            goto LABEL_125;
          }
          uint64_t v59 = Intent + 1;
          uint64_t v56 = v58 - (unsigned char *)v59;
        }
        while (v58 - (unsigned char *)v59 > 5);
        Intent = v58;
      }
      else
      {
        Intent = &v31[v56];
        uint64_t v5 = v69;
      }
LABEL_125:
      BOOL v61 = Intent == v58 || Intent - v31 == -1;
      int v62 = !v61;
      uint64_t v63 = v62 | v28;
      if (v61 && ((v28 ^ 1) & 1) == 0)
      {
        *(unsigned char *)(v5 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1;
        uint64_t v63 = v28;
      }
      ++v27;
      uint64_t v23 = *(void *)(a1 + 56);
      uint64_t v28 = v63;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 64) - v23) >> 3) > v27);
  }
  if (quasar::gLogLevel > 4)
  {
    memset(v75, 0, sizeof(v75));
    *(_OWORD *)std::string __p = 0u;
    long long v74 = 0u;
    *(_OWORD *)long long v71 = 0u;
    long long v72 = 0u;
    *(_OWORD *)long long v70 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
    uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"VoiceEditingResultHandler: ", 27);
    uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"created interpretation ", 23);
    quasar::result_handler::operator<<(v65, v5);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v70);
  }
  if (v79 < 0) {
    operator delete(v77);
  }
}

uint64_t quasar::result_handler::splitChoice(uint64_t *a1, int *a2, uint64_t *a3, int a4)
{
  if (a4)
  {
    uint64_t v7 = *a1;
    unint64_t v8 = *a2;
    uint64_t v9 = *a1 + 224 * (int)v8;
    uint64_t v24 = v9;
    uint64_t v25 = v7;
    int v10 = (void *)a3[7];
    if ((unint64_t)v10 >= a3[8])
    {
      uint64_t v11 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(a3 + 6, &v25, &v24);
    }
    else
    {
      *int v10 = 0;
      v10[1] = 0;
      uint64_t v10[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v10, v7, v9, v8);
      uint64_t v11 = (uint64_t)(v10 + 3);
      a3[7] = (uint64_t)(v10 + 3);
    }
    a3[7] = v11;
    uint64_t v17 = a1[1];
    uint64_t v18 = *a1 + 224 * *a2;
    uint64_t v24 = v17;
    uint64_t v25 = v18;
    uint64_t v19 = (void *)a3[10];
    if ((unint64_t)v19 >= a3[11])
    {
      uint64_t result = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(a3 + 9, &v25, &v24);
    }
    else
    {
      void *v19 = 0;
      v19[1] = 0;
      std::locale v19[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v19, v18, v17, 0x6DB6DB6DB6DB6DB7 * ((v17 - v18) >> 5));
      uint64_t result = (uint64_t)(v19 + 3);
      a3[10] = (uint64_t)(v19 + 3);
    }
    a3[10] = result;
  }
  else
  {
    uint64_t v12 = *a1;
    unint64_t v13 = *a2;
    uint64_t v14 = *a1 + 224 * (int)v13;
    uint64_t v24 = v14;
    uint64_t v25 = v12;
    uint64_t v15 = (void *)a3[1];
    if ((unint64_t)v15 >= a3[2])
    {
      uint64_t v16 = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(a3, &v25, &v24);
    }
    else
    {
      *uint64_t v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v15, v12, v14, v13);
      uint64_t v16 = (uint64_t)(v15 + 3);
      a3[1] = (uint64_t)(v15 + 3);
    }
    a3[1] = v16;
    uint64_t v21 = a1[1];
    uint64_t v22 = *a1 + 224 * *a2;
    uint64_t v24 = v21;
    uint64_t v25 = v22;
    uint64_t v23 = (void *)a3[4];
    if ((unint64_t)v23 >= a3[5])
    {
      uint64_t result = std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(a3 + 3, &v25, &v24);
    }
    else
    {
      void *v23 = 0;
      v23[1] = 0;
      std::__fs::filesystem::path v23[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v23, v22, v21, 0x6DB6DB6DB6DB6DB7 * ((v21 - v22) >> 5));
      uint64_t result = (uint64_t)(v23 + 3);
      a3[4] = (uint64_t)(v23 + 3);
    }
    a3[4] = result;
  }
  return result;
}

void sub_1B21DE074(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

void sub_1B21DE07C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v2;
  _Unwind_Resume(a1);
}

void sub_1B21DE084(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B21DE08C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

uint64_t quasar::result_handler::findSplitEnd(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2 || *(_DWORD *)(v3 + 28) > a2) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 192);
  uint64_t v6 = (unsigned __int128)((v2 - v3) * (__int128)0x4924924924924925) >> 64;
  unint64_t v7 = (v6 >> 6) + ((unint64_t)v6 >> 63);
  if (v5 <= a2) {
    return v7;
  }
  uint64_t result = 0;
  if (v7 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v7;
  }
  for (uint64_t i = (int *)(v3 + 256); ; i += 56)
  {
    if (*(i - 55) <= a2)
    {
      int v10 = *(i - 56);
      if (v10 >= a2) {
        break;
      }
    }
    if (v8 == ++result) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v7 <= result + 1) {
    unint64_t v11 = result + 1;
  }
  else {
    unint64_t v11 = v7;
  }
  while (v7 > ++result)
  {
    int v12 = *i;
    i += 56;
    if (v12 != v10) {
      return result;
    }
  }
  return v11;
}

uint64_t std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v22 = a1 + 2;
  if (v11) {
    int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v11);
  }
  else {
    int v12 = 0;
  }
  unint64_t v13 = &v12[24 * v5];
  v19[0] = v12;
  v19[1] = v13;
  unint64_t v20 = v13;
  uint64_t v21 = &v12[24 * v11];
  uint64_t v14 = *a2;
  uint64_t v15 = *a3;
  unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((*a3 - *a2) >> 5);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(v13, v14, v15, v16);
  v20 += 24;
  std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v19);
  uint64_t v17 = a1[1];
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v19);
  return v17;
}

void sub_1B21DE278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        quasar::Token::~Token((void **)(v7 - 224));
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

__n128 std::__construct_at[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData,quasar::result_handler::CommandData*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 88) = 0;
  long long v2 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v2;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a2 + 120);
  long long v3 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v3;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 168) = 0;
  __n128 result = *(__n128 *)(a2 + 152);
  *(__n128 *)(a1 + 152) = result;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 168) = 0;
  int v5 = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 18std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = v5;
  return result;
}

BOOL kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Get(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "v != nullptr");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v9[0] = a2;
  int v5 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>((void *)(a1 + 8), v9);
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = (uint64_t *)v5[3];
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 56, *(uint64_t **)(a1 + 64), a1 + 56, v7);
    *a3 = v7 + 5;
  }
  return v6 != 0;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  int v12 = this;
  unint64_t v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  uint64_t v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      uint64_t v4 = (std::string *)((char *)v8 + 32);
      unint64_t v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B21DE550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<quasar::result_handler::CommandInterpretation>::__emplace_back_slow_path<quasar::result_handler::CommandInterpretation&>(uint64_t *a1, const quasar::result_handler::CommandInterpretation *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x186186186186186) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xC30C30C30C30C3) {
    unint64_t v9 = 0x186186186186186;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v13 = v10;
  uint64_t v14 = (std::string *)&v10[168 * v4];
  unint64_t v16 = &v10[168 * v9];
  quasar::result_handler::CommandInterpretation::CommandInterpretation(v14, a2);
  uint64_t v15 = v14 + 7;
  std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(&v13);
  return v11;
}

void sub_1B21DE6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>((uint64_t)(a1 + 2), a1[1], (long long *)a1[1], *a1, (long long *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      unint64_t v9 = (long long *)((char *)v9 - 168);
      std::allocator<quasar::result_handler::CommandInterpretation>::construct[abi:ne180100]<quasar::result_handler::CommandInterpretation,quasar::result_handler::CommandInterpretation>(a1, v7 - 168, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 168;
      *((void *)&v16 + 1) -= 168;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::result_handler::CommandInterpretation>::construct[abi:ne180100]<quasar::result_handler::CommandInterpretation,quasar::result_handler::CommandInterpretation>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  uint64_t v6 = *((void *)a3 + 9);
  *(_WORD *)(a2 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((_WORD *)a3 + 40);
  *(void *)(a2 + 72) = v6;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 88) = *(long long *)((char *)a3 + 88);
  *(void *)(a2 + 104) = *((void *)a3 + 13);
  *((void *)a3 + 11) = 0;
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = a3[7];
  *(void *)(a2 + 128) = *((void *)a3 + 16);
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 136);
  *(__n128 *)(a2 + 136) = result;
  *(void *)(a2 + 152) = *((void *)a3 + 19);
  *((void *)a3 + 17) = 0;
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a3 + 20);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandInterpretation>,std::reverse_iterator<quasar::result_handler::CommandInterpretation*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](v3, v1);
      v1 += 168;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::result_handler::CommandInterpretation>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 168;
    std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100](v4, i - 168);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = a2 - 168;
    uint64_t v229 = a2 - 504;
    uint64_t v231 = a2 - 336;
    v227 = (_DWORD *)(a2 - 4);
    unint64_t v10 = a1;
    unint64_t v235 = a2;
    while (1)
    {
      while (1)
      {
        a1 = v10;
        uint64_t v11 = a2 - v10;
        uint64_t v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2 - v10) >> 3);
        if (v5 || !v4)
        {
          switch(v12)
          {
            case 0:
            case 1:
              return;
            case 2:
              int v86 = *(_DWORD *)(a2 - 92);
              int v87 = *(_DWORD *)(a1 + 76);
              if (v87 < v86 || (v86 >= v87 ? (BOOL v88 = *(_DWORD *)(a1 + 164) < *(_DWORD *)(a2 - 4)) : (BOOL v88 = 0), v88)) {
                std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, v9);
              }
              break;
            case 3:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, v9);
              break;
            case 4:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, a1 + 336, v9);
              break;
            case 5:
              std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,0>(a1, a1 + 168, a1 + 336, a1 + 504, v9);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v11 <= 4031)
        {
          if (a4)
          {
            if (a1 != a2)
            {
              uint64_t v89 = a1 + 168;
              if (a1 + 168 != a2)
              {
                uint64_t v90 = 0;
                uint64_t v91 = a1;
                do
                {
                  uint64_t v92 = v89;
                  int v93 = *(_DWORD *)(v91 + 244);
                  int v94 = *(_DWORD *)(v91 + 76);
                  if (v94 < v93
                    || (v93 >= v94 ? (BOOL v95 = *(_DWORD *)(v91 + 164) < *(_DWORD *)(v91 + 332)) : (BOOL v95 = 0), v95))
                  {
                    long long v96 = *(_OWORD *)v92;
                    uint64_t v254 = *(void *)(v92 + 16);
                    *(_OWORD *)v253 = v96;
                    *(void *)(v92 + 8) = 0;
                    *(void *)(v92 + 16) = 0;
                    *(void *)uint64_t v92 = 0;
                    long long v255 = *(_OWORD *)(v91 + 192);
                    uint64_t v256 = *(void *)(v91 + 208);
                    long long __p = *(_OWORD *)(v91 + 216);
                    uint64_t v97 = *(void *)(v91 + 240);
                    uint64_t v258 = *(void *)(v91 + 232);
                    uint64_t v259 = v97;
                    __int16 v260 = *(_WORD *)(v91 + 248);
                    long long v261 = *(_OWORD *)(v91 + 256);
                    uint64_t v262 = *(void *)(v91 + 272);
                    long long v98 = *(_OWORD *)(v91 + 280);
                    uint64_t v99 = *(void *)(v91 + 320);
                    unint64_t v100 = *(void *)(v91 + 328);
                    uint64_t v264 = *(void *)(v91 + 296);
                    uint64_t v266 = v99;
                    *(void *)(v91 + 192) = 0;
                    *(void *)(v91 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                    *(void *)(v91 + 208) = 0;
                    *(void *)(v91 + 216) = 0;
                    *(void *)(v91 + 224) = 0;
                    *(void *)(v91 + 232) = 0;
                    *(void *)(v91 + 256) = 0;
                    *(void *)(v91 + 264) = 0;
                    long long v263 = v98;
                    *(void *)(v91 + 272) = 0;
                    *(void *)(v91 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                    *(void *)(v91 + 288) = 0;
                    *(void *)(v91 + 296) = 0;
                    long long v265 = *(_OWORD *)(v91 + 304);
                    *(void *)(v91 + 304) = 0;
                    *(void *)(v91 + 312) = 0;
                    *(void *)(v91 + 32std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                    unint64_t v267 = v100;
                    quasar::result_handler::CommandInterpretation::operator=(v92, (long long *)v91);
                    uint64_t v101 = a1;
                    if (v91 != a1)
                    {
                      uint64_t v102 = v90;
                      do
                      {
                        uint64_t v103 = a1 + v102;
                        int v104 = *(_DWORD *)(a1 + v102 - 92);
                        if (v104 >= SHIDWORD(v259)
                          && (SHIDWORD(v259) < v104 || *(_DWORD *)(v103 - 4) >= SHIDWORD(v267)))
                        {
                          uint64_t v101 = a1 + v102;
                          goto LABEL_157;
                        }
                        quasar::result_handler::CommandInterpretation::operator=(v103, (long long *)(v103 - 168));
                        v102 -= 168;
                      }
                      while (v102);
                      uint64_t v101 = a1;
                    }
LABEL_157:
                    if (*(char *)(v101 + 23) < 0) {
                      operator delete(*(void **)v101);
                    }
                    long long v106 = *(_OWORD *)v253;
                    *(void *)(v101 + 16) = v254;
                    *(_OWORD *)uint64_t v101 = v106;
                    HIBYTE(v254) = 0;
                    LOBYTE(v253[0]) = 0;
                    uint64_t v107 = (void **)(v101 + 24);
                    if (*(char *)(v101 + 47) < 0) {
                      operator delete(*v107);
                    }
                    long long v108 = v255;
                    *(void *)(v101 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v256;
                    *(_OWORD *)uint64_t v107 = v108;
                    HIBYTE(v256) = 0;
                    LOBYTE(v255) = 0;
                    uint64_t v109 = (void **)(v101 + 48);
                    if (*(char *)(v101 + 71) < 0) {
                      operator delete(*v109);
                    }
                    long long v110 = __p;
                    *(void *)(v101 + 64) = v258;
                    *(_OWORD *)uint64_t v109 = v110;
                    HIBYTE(v258) = 0;
                    LOBYTE(__p) = 0;
                    __int16 v111 = v260;
                    *(void *)(v101 + 72) = v259;
                    *(_WORD *)(v101 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v111;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v101 + 88));
                    *(_OWORD *)(v101 + 88) = v261;
                    *(void *)(v101 + 104) = v262;
                    long long v261 = 0uLL;
                    uint64_t v262 = 0;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v101 + 112));
                    *(_OWORD *)(v101 + 112) = v263;
                    *(void *)(v101 + 128) = v264;
                    long long v263 = 0uLL;
                    uint64_t v264 = 0;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v101 + 136));
                    *(_OWORD *)(v101 + 136) = v265;
                    *(void *)(v101 + 152) = v266;
                    long long v265 = 0uLL;
                    uint64_t v266 = 0;
                    *(void *)(v101 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v267;
                    v237[0] = &v265;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                    v237[0] = &v263;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                    v237[0] = &v261;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                    if (SHIBYTE(v258) < 0) {
                      operator delete((void *)__p);
                    }
                    if (SHIBYTE(v256) < 0) {
                      operator delete((void *)v255);
                    }
                    if (SHIBYTE(v254) < 0) {
                      operator delete(v253[0]);
                    }
                  }
                  uint64_t v89 = v92 + 168;
                  v90 += 168;
                  uint64_t v91 = v92;
                }
                while (v92 + 168 != v235);
              }
            }
          }
          else if (a1 != a2)
          {
            uint64_t v202 = a1 + 168;
            if (a1 + 168 != a2)
            {
              do
              {
                uint64_t v203 = v202;
                int v204 = *(_DWORD *)(a1 + 244);
                int v205 = *(_DWORD *)(a1 + 76);
                if (v205 < v204
                  || (v204 >= v205 ? (BOOL v206 = *(_DWORD *)(a1 + 164) < *(_DWORD *)(a1 + 332)) : (BOOL v206 = 0), v206))
                {
                  long long v207 = *(_OWORD *)v203;
                  uint64_t v254 = *(void *)(v203 + 16);
                  *(_OWORD *)v253 = v207;
                  *(void *)(v203 + 8) = 0;
                  *(void *)(v203 + 16) = 0;
                  *(void *)uint64_t v203 = 0;
                  long long v255 = *(_OWORD *)(a1 + 192);
                  uint64_t v256 = *(void *)(a1 + 208);
                  long long __p = *(_OWORD *)(a1 + 216);
                  uint64_t v208 = *(void *)(a1 + 240);
                  uint64_t v258 = *(void *)(a1 + 232);
                  uint64_t v259 = v208;
                  __int16 v260 = *(_WORD *)(a1 + 248);
                  long long v261 = *(_OWORD *)(a1 + 256);
                  uint64_t v262 = *(void *)(a1 + 272);
                  long long v209 = *(_OWORD *)(a1 + 280);
                  uint64_t v210 = *(void *)(a1 + 320);
                  unint64_t v211 = *(void *)(a1 + 328);
                  uint64_t v264 = *(void *)(a1 + 296);
                  uint64_t v266 = v210;
                  *(void *)(a1 + 192) = 0;
                  *(void *)(a1 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                  *(void *)(a1 + 208) = 0;
                  *(void *)(a1 + 216) = 0;
                  *(void *)(a1 + 224) = 0;
                  *(void *)(a1 + 232) = 0;
                  *(void *)(a1 + 256) = 0;
                  *(void *)(a1 + 264) = 0;
                  long long v263 = v209;
                  *(void *)(a1 + 272) = 0;
                  *(void *)(a1 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                  *(void *)(a1 + 288) = 0;
                  *(void *)(a1 + 296) = 0;
                  long long v265 = *(_OWORD *)(a1 + 304);
                  *(void *)(a1 + 304) = 0;
                  *(void *)(a1 + 312) = 0;
                  *(void *)(a1 + 32std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                  uint64_t v212 = v203;
                  unint64_t v267 = v211;
                  while (1)
                  {
                    v213 = (void **)(v212 - 168);
                    quasar::result_handler::CommandInterpretation::operator=(v212, (long long *)(v212 - 168));
                    int v214 = *(_DWORD *)(v212 - 260);
                    if (v214 >= SHIDWORD(v259) && (SHIDWORD(v259) < v214 || *(_DWORD *)(v212 - 172) >= SHIDWORD(v267))) {
                      break;
                    }
                    v212 -= 168;
                  }
                  if (*(char *)(v212 - 145) < 0) {
                    operator delete(*v213);
                  }
                  long long v216 = *(_OWORD *)v253;
                  *(void *)(v212 - 152) = v254;
                  *(_OWORD *)v213 = v216;
                  HIBYTE(v254) = 0;
                  LOBYTE(v253[0]) = 0;
                  uint64_t v217 = (void **)(v212 - 144);
                  if (*(char *)(v212 - 121) < 0) {
                    operator delete(*v217);
                  }
                  long long v218 = v255;
                  *(void *)(v212 - 128) = v256;
                  *(_OWORD *)uint64_t v217 = v218;
                  HIBYTE(v256) = 0;
                  LOBYTE(v255) = 0;
                  v219 = (void **)(v212 - 120);
                  if (*(char *)(v212 - 97) < 0) {
                    operator delete(*v219);
                  }
                  long long v220 = __p;
                  *(void *)(v212 - 104) = v258;
                  *(_OWORD *)v219 = v220;
                  HIBYTE(v258) = 0;
                  LOBYTE(__p) = 0;
                  uint64_t v221 = v259;
                  *(_WORD *)(v212 - 88) = v260;
                  *(void *)(v212 - 96) = v221;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v212 - 80));
                  *(_OWORD *)(v212 - 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v261;
                  *(void *)(v212 - 64) = v262;
                  long long v261 = 0uLL;
                  uint64_t v262 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v212 - 56));
                  *(_OWORD *)(v212 - 56) = v263;
                  *(void *)(v212 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v264;
                  long long v263 = 0uLL;
                  uint64_t v264 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v212 - 32));
                  *(_OWORD *)(v212 - 32) = v265;
                  *(void *)(v212 - 16) = v266;
                  long long v265 = 0uLL;
                  uint64_t v266 = 0;
                  *(void *)(v212 - 8) = v267;
                  v237[0] = &v265;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                  v237[0] = &v263;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                  v237[0] = &v261;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                  if (SHIBYTE(v258) < 0) {
                    operator delete((void *)__p);
                  }
                  a2 = v235;
                  if (SHIBYTE(v256) < 0) {
                    operator delete((void *)v255);
                  }
                  if (SHIBYTE(v254) < 0) {
                    operator delete(v253[0]);
                  }
                }
                uint64_t v202 = v203 + 168;
                a1 = v203;
              }
              while (v203 + 168 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            int64_t v112 = (unint64_t)(v12 - 2) >> 1;
            int64_t v113 = v112;
            do
            {
              int64_t v114 = v113;
              if (v112 >= v113)
              {
                uint64_t v115 = (2 * v113) | 1;
                uint64_t v116 = a1 + 168 * v115;
                if (2 * v114 + 2 < v12)
                {
                  int v117 = *(_DWORD *)(a1 + 168 * v115 + 76);
                  int v118 = *(_DWORD *)(v116 + 244);
                  if (v118 < v117
                    || (v117 >= v118
                      ? (BOOL v119 = *(_DWORD *)(v116 + 332) < *(_DWORD *)(a1 + 168 * v115 + 164))
                      : (BOOL v119 = 0),
                        v119))
                  {
                    v116 += 168;
                    uint64_t v115 = 2 * v114 + 2;
                  }
                }
                int v120 = *(_DWORD *)(v116 + 76);
                int v121 = *(_DWORD *)(a1 + 168 * v114 + 76);
                if (v121 >= v120 && (v120 < v121 || *(_DWORD *)(a1 + 168 * v114 + 164) >= *(_DWORD *)(v116 + 164)))
                {
                  uint64_t v123 = a1 + 168 * v114;
                  long long v124 = *(_OWORD *)v123;
                  uint64_t v254 = *(void *)(v123 + 16);
                  *(_OWORD *)v253 = v124;
                  *(void *)(v123 + 8) = 0;
                  *(void *)(v123 + 16) = 0;
                  *(void *)uint64_t v123 = 0;
                  long long v125 = *(_OWORD *)(v123 + 24);
                  uint64_t v256 = *(void *)(v123 + 40);
                  long long v255 = v125;
                  *(void *)(v123 + 32) = 0;
                  *(void *)(v123 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                  *(void *)(v123 + 24) = 0;
                  long long v126 = *(_OWORD *)(v123 + 48);
                  uint64_t v258 = *(void *)(v123 + 64);
                  long long __p = v126;
                  *(void *)(v123 + 56) = 0;
                  *(void *)(v123 + 64) = 0;
                  *(void *)(v123 + 48) = 0;
                  uint64_t v127 = *(void *)(v123 + 72);
                  __int16 v260 = *(_WORD *)(v123 + 80);
                  uint64_t v259 = v127;
                  long long v261 = *(_OWORD *)(v123 + 88);
                  uint64_t v262 = *(void *)(v123 + 104);
                  *(void *)(v123 + 88) = 0;
                  *(void *)(v123 + 96) = 0;
                  *(void *)(v123 + 104) = 0;
                  long long v263 = *(_OWORD *)(v123 + 112);
                  uint64_t v264 = *(void *)(v123 + 128);
                  *(void *)(v123 + 112) = 0;
                  *(void *)(v123 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                  *(void *)(v123 + 128) = 0;
                  long long v265 = *(_OWORD *)(v123 + 136);
                  uint64_t v266 = *(void *)(v123 + 152);
                  *(void *)(v123 + 144) = 0;
                  *(void *)(v123 + 152) = 0;
                  *(void *)(v123 + 136) = 0;
                  unint64_t v267 = *(void *)(v123 + 160);
                  int v128 = HIDWORD(v259);
                  unint64_t v129 = HIDWORD(v267);
                  do
                  {
                    uint64_t v130 = v116;
                    quasar::result_handler::CommandInterpretation::operator=(v123, (long long *)v116);
                    if (v112 < v115) {
                      break;
                    }
                    uint64_t v131 = (2 * v115) | 1;
                    uint64_t v116 = a1 + 168 * v131;
                    if (2 * v115 + 2 < v12)
                    {
                      int v132 = *(_DWORD *)(a1 + 168 * v131 + 76);
                      int v133 = *(_DWORD *)(v116 + 244);
                      if (v133 < v132
                        || (v132 >= v133
                          ? (BOOL v134 = *(_DWORD *)(v116 + 332) < *(_DWORD *)(a1 + 168 * v131 + 164))
                          : (BOOL v134 = 0),
                            v134))
                      {
                        v116 += 168;
                        uint64_t v131 = 2 * v115 + 2;
                      }
                    }
                    int v135 = *(_DWORD *)(v116 + 76);
                    if (v128 < v135) {
                      break;
                    }
                    BOOL v136 = v135 < v128 || *(_DWORD *)(v116 + 164) <= (int)v129;
                    uint64_t v123 = v130;
                    uint64_t v115 = v131;
                  }
                  while (v136);
                  if (*(char *)(v130 + 23) < 0) {
                    operator delete(*(void **)v130);
                  }
                  long long v137 = *(_OWORD *)v253;
                  *(void *)(v130 + 16) = v254;
                  *(_OWORD *)uint64_t v130 = v137;
                  HIBYTE(v254) = 0;
                  LOBYTE(v253[0]) = 0;
                  int64x2_t v138 = (void **)(v130 + 24);
                  if (*(char *)(v130 + 47) < 0) {
                    operator delete(*v138);
                  }
                  long long v139 = v255;
                  *(void *)(v130 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v256;
                  *(_OWORD *)int64x2_t v138 = v139;
                  HIBYTE(v256) = 0;
                  LOBYTE(v255) = 0;
                  int64x2_t v140 = (void **)(v130 + 48);
                  if (*(char *)(v130 + 71) < 0) {
                    operator delete(*v140);
                  }
                  long long v141 = __p;
                  *(void *)(v130 + 64) = v258;
                  *(_OWORD *)int64x2_t v140 = v141;
                  HIBYTE(v258) = 0;
                  LOBYTE(__p) = 0;
                  __int16 v142 = v260;
                  *(void *)(v130 + 72) = v259;
                  *(_WORD *)(v130 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v142;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v130 + 88));
                  *(_OWORD *)(v130 + 88) = v261;
                  *(void *)(v130 + 104) = v262;
                  long long v261 = 0uLL;
                  uint64_t v262 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v130 + 112));
                  *(_OWORD *)(v130 + 112) = v263;
                  *(void *)(v130 + 128) = v264;
                  long long v263 = 0uLL;
                  uint64_t v264 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v130 + 136));
                  *(_OWORD *)(v130 + 136) = v265;
                  *(void *)(v130 + 152) = v266;
                  long long v265 = 0uLL;
                  uint64_t v266 = 0;
                  *(void *)(v130 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v267;
                  v237[0] = &v265;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                  v237[0] = &v263;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                  v237[0] = &v261;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
                  if (SHIBYTE(v258) < 0) {
                    operator delete((void *)__p);
                  }
                  a2 = v235;
                  if (SHIBYTE(v256) < 0) {
                    operator delete((void *)v255);
                  }
                  if (SHIBYTE(v254) < 0) {
                    operator delete(v253[0]);
                  }
                }
              }
              int64_t v113 = v114 - 1;
            }
            while (v114);
            int64_t v143 = v11 / 0xA8uLL;
            v222 = (long long *)(a1 + 48);
            v223 = (long long *)(a1 + 24);
            do
            {
              uint64_t v144 = 0;
              long long v145 = *(_OWORD *)a1;
              unint64_t v146 = a2;
              uint64_t v238 = *(void *)(a1 + 16);
              *(_OWORD *)v237 = v145;
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
              *(void *)a1 = 0;
              long long v147 = *v223;
              uint64_t v240 = *(void *)(a1 + 40);
              long long v239 = v147;
              *(void *)(a1 + 32) = 0;
              *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
              *(void *)v223 = 0;
              long long v148 = *v222;
              uint64_t v242 = *(void *)(a1 + 64);
              long long v241 = v148;
              *(void *)v222 = 0;
              *(void *)(a1 + 56) = 0;
              *(void *)(a1 + 64) = 0;
              uint64_t v149 = *(void *)(a1 + 72);
              __int16 v244 = *(_WORD *)(a1 + 80);
              uint64_t v243 = v149;
              uint64_t v150 = *(void *)(a1 + 96);
              uint64_t v233 = *(void *)(a1 + 88);
              *(void *)&long long v245 = v233;
              *((void *)&v245 + 1) = v150;
              uint64_t v228 = v150;
              uint64_t v151 = *(void *)(a1 + 112);
              uint64_t v224 = *(void *)(a1 + 104);
              uint64_t v246 = v224;
              *(void *)(a1 + 88) = 0;
              *(void *)(a1 + 96) = 0;
              *(void *)(a1 + 104) = 0;
              uint64_t v152 = *(void *)(a1 + 120);
              uint64_t v153 = *(void *)(a1 + 128);
              uint64_t v232 = v151;
              *(void *)&long long v247 = v151;
              *((void *)&v247 + 1) = v152;
              uint64_t v226 = v152;
              uint64_t v248 = v153;
              *(void *)(a1 + 112) = 0;
              *(void *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
              *(void *)(a1 + 128) = 0;
              uint64_t v154 = *(void *)(a1 + 144);
              uint64_t v230 = *(void *)(a1 + 136);
              *(void *)&long long v249 = v230;
              *((void *)&v249 + 1) = v154;
              uint64_t v225 = v154;
              uint64_t v155 = *(void *)(a1 + 152);
              uint64_t v156 = *(void *)(a1 + 160);
              uint64_t v250 = v155;
              *(void *)(a1 + 136) = 0;
              *(void *)(a1 + 144) = 0;
              *(void *)(a1 + 152) = 0;
              uint64_t v157 = a1;
              uint64_t v251 = v156;
              do
              {
                uint64_t v158 = v157;
                uint64_t v159 = v144 + 1;
                v157 += 168 * (v144 + 1);
                uint64_t v160 = 2 * v144;
                uint64_t v144 = (2 * v144) | 1;
                int64_t v161 = v160 + 2;
                if (v161 < v143)
                {
                  int v162 = *(_DWORD *)(v158 + 168 * v159 + 76);
                  int v163 = *(_DWORD *)(v157 + 244);
                  if (v163 < v162
                    || ((int v164 = *(_DWORD *)(v158 + 168 * v159 + 164), v162 >= v163)
                      ? (BOOL v165 = *(_DWORD *)(v157 + 332) < v164)
                      : (BOOL v165 = 0),
                        v165))
                  {
                    v157 += 168;
                    uint64_t v144 = v161;
                  }
                }
                quasar::result_handler::CommandInterpretation::operator=(v158, (long long *)v157);
              }
              while (v144 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
              long long v166 = (void **)(v146 - 168);
              unint64_t v236 = v146 - 168;
              if (v157 == v146 - 168)
              {
                if (*(char *)(v157 + 23) < 0) {
                  operator delete(*(void **)v157);
                }
                long long v185 = *(_OWORD *)v237;
                *(void *)(v157 + 16) = v238;
                *(_OWORD *)uint64_t v157 = v185;
                HIBYTE(v238) = 0;
                LOBYTE(v237[0]) = 0;
                char v186 = (void **)(v157 + 24);
                if (*(char *)(v157 + 47) < 0) {
                  operator delete(*v186);
                }
                long long v187 = v239;
                *(void *)(v157 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v240;
                *(_OWORD *)char v186 = v187;
                HIBYTE(v24std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                LOBYTE(v239) = 0;
                char v188 = (void **)(v157 + 48);
                if (*(char *)(v157 + 71) < 0) {
                  operator delete(*v188);
                }
                long long v189 = v241;
                *(void *)(v157 + 64) = v242;
                *(_OWORD *)char v188 = v189;
                HIBYTE(v242) = 0;
                LOBYTE(v241) = 0;
                __int16 v190 = v244;
                *(void *)(v157 + 72) = v243;
                *(_WORD *)(v157 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v190;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v157 + 88));
                *(_OWORD *)(v157 + 88) = v245;
                *(void *)(v157 + 104) = v246;
                long long v245 = 0uLL;
                uint64_t v246 = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v157 + 112));
                *(_OWORD *)(v157 + 112) = v247;
                *(void *)(v157 + 128) = v248;
                long long v247 = 0uLL;
                uint64_t v248 = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v157 + 136));
                *(_OWORD *)(v157 + 136) = v249;
                *(void *)(v157 + 152) = v250;
                long long v249 = 0uLL;
                uint64_t v250 = 0;
                *(void *)(v157 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v251;
              }
              else
              {
                quasar::result_handler::CommandInterpretation::operator=(v157, (long long *)(v146 - 168));
                if (*(char *)(v146 - 145) < 0) {
                  operator delete(*v166);
                }
                long long v167 = *(_OWORD *)v237;
                *(void *)(v146 - 152) = v238;
                *(_OWORD *)long long v166 = v167;
                HIBYTE(v238) = 0;
                LOBYTE(v237[0]) = 0;
                long long v168 = (void **)(v146 - 144);
                if (*(char *)(v146 - 121) < 0) {
                  operator delete(*v168);
                }
                long long v169 = v239;
                *(void *)(v146 - 128) = v240;
                *(_OWORD *)long long v168 = v169;
                HIBYTE(v24std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                LOBYTE(v239) = 0;
                long long v170 = (void **)(v146 - 120);
                if (*(char *)(v146 - 97) < 0) {
                  operator delete(*v170);
                }
                long long v171 = v241;
                *(void *)(v146 - 104) = v242;
                *(_OWORD *)long long v170 = v171;
                HIBYTE(v242) = 0;
                LOBYTE(v241) = 0;
                uint64_t v172 = v243;
                *(_WORD *)(v146 - 88) = v244;
                *(void *)(v146 - 96) = v172;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v146 - 80));
                *(void *)(v146 - 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v233;
                *(void *)(v146 - 72) = v228;
                *(void *)(v146 - 64) = v224;
                long long v245 = 0uLL;
                uint64_t v246 = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v146 - 56));
                *(void *)(v146 - 56) = v232;
                *(void *)(v146 - 48) = v226;
                *(void *)(v146 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v153;
                long long v247 = 0uLL;
                uint64_t v248 = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v146 - 32));
                *(void *)(v146 - 32) = v230;
                *(void *)(v146 - 24) = v225;
                *(void *)(v146 - 16) = v155;
                long long v249 = 0uLL;
                uint64_t v250 = 0;
                *(void *)(v146 - 8) = v156;
                if (v157 + 168 - a1 >= 169)
                {
                  unint64_t v173 = (v157 + 168 - a1) / 0xA8uLL - 2;
                  unint64_t v174 = v173 >> 1;
                  uint64_t v175 = a1 + 168 * (v173 >> 1);
                  int v176 = *(_DWORD *)(v175 + 76);
                  int v177 = *(_DWORD *)(v157 + 76);
                  if (v177 < v176
                    || (v176 >= v177
                      ? (BOOL v178 = *(_DWORD *)(v157 + 164) < *(_DWORD *)(a1 + 168 * v174 + 164))
                      : (BOOL v178 = 0),
                        v178))
                  {
                    long long v179 = *(_OWORD *)v157;
                    uint64_t v254 = *(void *)(v157 + 16);
                    *(_OWORD *)v253 = v179;
                    *(void *)(v157 + 8) = 0;
                    *(void *)(v157 + 16) = 0;
                    *(void *)uint64_t v157 = 0;
                    long long v180 = *(_OWORD *)(v157 + 24);
                    uint64_t v256 = *(void *)(v157 + 40);
                    long long v255 = v180;
                    *(void *)(v157 + 32) = 0;
                    *(void *)(v157 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                    *(void *)(v157 + 24) = 0;
                    long long v181 = *(_OWORD *)(v157 + 48);
                    uint64_t v258 = *(void *)(v157 + 64);
                    long long __p = v181;
                    *(void *)(v157 + 56) = 0;
                    *(void *)(v157 + 64) = 0;
                    *(void *)(v157 + 48) = 0;
                    uint64_t v182 = *(void *)(v157 + 72);
                    __int16 v260 = *(_WORD *)(v157 + 80);
                    uint64_t v259 = v182;
                    long long v261 = *(_OWORD *)(v157 + 88);
                    uint64_t v262 = *(void *)(v157 + 104);
                    *(void *)(v157 + 88) = 0;
                    *(void *)(v157 + 96) = 0;
                    *(void *)(v157 + 104) = 0;
                    long long v263 = *(_OWORD *)(v157 + 112);
                    uint64_t v264 = *(void *)(v157 + 128);
                    *(void *)(v157 + 112) = 0;
                    *(void *)(v157 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
                    *(void *)(v157 + 128) = 0;
                    long long v265 = *(_OWORD *)(v157 + 136);
                    uint64_t v266 = *(void *)(v157 + 152);
                    *(void *)(v157 + 136) = 0;
                    *(void *)(v157 + 144) = 0;
                    *(void *)(v157 + 152) = 0;
                    unint64_t v183 = *(void *)(v157 + 160);
                    unint64_t v267 = v183;
                    quasar::result_handler::CommandInterpretation::operator=(v157, (long long *)(a1 + 168 * (v173 >> 1)));
                    if (v173 >= 2)
                    {
                      unint64_t v191 = HIDWORD(v183);
                      int v192 = HIDWORD(v259);
                      while (1)
                      {
                        unint64_t v193 = v174 - 1;
                        unint64_t v174 = (v174 - 1) >> 1;
                        uint64_t v184 = a1 + 168 * v174;
                        int v194 = *(_DWORD *)(v184 + 76);
                        if (v192 >= v194 && (v194 < v192 || *(_DWORD *)(a1 + 168 * v174 + 164) <= (int)v191)) {
                          break;
                        }
                        quasar::result_handler::CommandInterpretation::operator=(v175, (long long *)(a1 + 168 * v174));
                        uint64_t v175 = a1 + 168 * v174;
                        if (v193 <= 1) {
                          goto LABEL_256;
                        }
                      }
                    }
                    uint64_t v184 = v175;
LABEL_256:
                    if (*(char *)(v184 + 23) < 0) {
                      operator delete(*(void **)v184);
                    }
                    long long v196 = *(_OWORD *)v253;
                    *(void *)(v184 + 16) = v254;
                    *(_OWORD *)uint64_t v184 = v196;
                    HIBYTE(v254) = 0;
                    LOBYTE(v253[0]) = 0;
                    char v197 = (void **)(v184 + 24);
                    if (*(char *)(v184 + 47) < 0) {
                      operator delete(*v197);
                    }
                    long long v198 = v255;
                    *(void *)(v184 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v256;
                    *(_OWORD *)char v197 = v198;
                    HIBYTE(v256) = 0;
                    LOBYTE(v255) = 0;
                    v199 = (void **)(v184 + 48);
                    if (*(char *)(v184 + 71) < 0) {
                      operator delete(*v199);
                    }
                    long long v200 = __p;
                    *(void *)(v184 + 64) = v258;
                    *(_OWORD *)v199 = v200;
                    HIBYTE(v258) = 0;
                    LOBYTE(__p) = 0;
                    __int16 v201 = v260;
                    *(void *)(v184 + 72) = v259;
                    *(_WORD *)(v184 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v201;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v184 + 88));
                    *(_OWORD *)(v184 + 88) = v261;
                    *(void *)(v184 + 104) = v262;
                    long long v261 = 0uLL;
                    uint64_t v262 = 0;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v184 + 112));
                    *(_OWORD *)(v184 + 112) = v263;
                    *(void *)(v184 + 128) = v264;
                    long long v263 = 0uLL;
                    uint64_t v264 = 0;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v184 + 136));
                    *(_OWORD *)(v184 + 136) = v265;
                    *(void *)(v184 + 152) = v266;
                    long long v265 = 0uLL;
                    uint64_t v266 = 0;
                    *(void *)(v184 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v267;
                    v252 = (void **)&v265;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v252);
                    v252 = (void **)&v263;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v252);
                    v252 = (void **)&v261;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v252);
                    if (SHIBYTE(v258) < 0) {
                      operator delete((void *)__p);
                    }
                    if (SHIBYTE(v256) < 0) {
                      operator delete((void *)v255);
                    }
                    if (SHIBYTE(v254) < 0) {
                      operator delete(v253[0]);
                    }
                  }
                }
              }
              v253[0] = &v249;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v253);
              v253[0] = &v247;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v253);
              v253[0] = &v245;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v253);
              if (SHIBYTE(v242) < 0) {
                operator delete((void *)v241);
              }
              a2 = v236;
              if (SHIBYTE(v240) < 0) {
                operator delete((void *)v239);
              }
              if (SHIBYTE(v238) < 0) {
                operator delete(v237[0]);
              }
              BOOL v28 = v143-- <= 2;
            }
            while (!v28);
          }
          return;
        }
        unint64_t v13 = (unint64_t)v12 >> 1;
        uint64_t v14 = a1 + 168 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0x5401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(v14, a1, v9);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, v14, v9);
          uint64_t v15 = 168 * v13;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1 + 168, v15 + a1 - 168, v231);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1 + 336, a1 + 168 + v15, v229);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(v15 + a1 - 168, v14, a1 + 168 + v15);
          std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, v14);
        }
        --a3;
        if (a4) {
          break;
        }
        int v16 = *(_DWORD *)(a1 - 92);
        int v17 = *(_DWORD *)(a1 + 76);
        if (v17 < v16 || v16 >= v17 && *(_DWORD *)(a1 + 164) < *(_DWORD *)(a1 - 4)) {
          break;
        }
        long long v54 = *(_OWORD *)a1;
        uint64_t v254 = *(void *)(a1 + 16);
        *(_OWORD *)v253 = v54;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        long long v55 = *(_OWORD *)(a1 + 24);
        uint64_t v256 = *(void *)(a1 + 40);
        long long v255 = v55;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
        *(void *)(a1 + 24) = 0;
        long long v56 = *(_OWORD *)(a1 + 48);
        uint64_t v57 = *(void *)(a1 + 72);
        uint64_t v258 = *(void *)(a1 + 64);
        long long __p = v56;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        __int16 v260 = *(_WORD *)(a1 + 80);
        uint64_t v259 = v57;
        long long v261 = *(_OWORD *)(a1 + 88);
        uint64_t v262 = *(void *)(a1 + 104);
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 104) = 0;
        long long v263 = *(_OWORD *)(a1 + 112);
        uint64_t v264 = *(void *)(a1 + 128);
        *(void *)(a1 + 112) = 0;
        *(void *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
        *(void *)(a1 + 128) = 0;
        long long v265 = *(_OWORD *)(a1 + 136);
        unint64_t v58 = *(void *)(a1 + 160);
        uint64_t v266 = *(void *)(a1 + 152);
        *(void *)(a1 + 136) = 0;
        *(void *)(a1 + 144) = 0;
        *(void *)(a1 + 152) = 0;
        unint64_t v267 = v58;
        int v59 = HIDWORD(v259);
        unint64_t v60 = HIDWORD(v58);
        a2 = v235;
        int v61 = *(_DWORD *)(v235 - 92);
        if (v61 >= SHIDWORD(v259) && (SHIDWORD(v259) < v61 || *(_DWORD *)(v235 - 4) >= SHIDWORD(v58)))
        {
          unint64_t v82 = a1 + 168;
          do
          {
            unint64_t v10 = v82;
            if (v82 >= v235) {
              break;
            }
            int v83 = *(_DWORD *)(v82 + 76);
            if (v83 < SHIDWORD(v259)) {
              break;
            }
            int v84 = *(_DWORD *)(v82 + 164);
            v82 += 168;
          }
          while (SHIDWORD(v259) < v83 || v84 >= (int)v60);
        }
        else
        {
          unint64_t v62 = a1 + 168;
          do
          {
            unint64_t v10 = v62;
            int v63 = *(_DWORD *)(v62 + 76);
            if (v63 < SHIDWORD(v259)) {
              break;
            }
            int v64 = *(_DWORD *)(v62 + 164);
            v62 += 168;
          }
          while (SHIDWORD(v259) < v63 || v64 >= (int)v60);
        }
        uint64_t v66 = v9;
        unint64_t v67 = v235;
        if (v10 < v235)
        {
          for (uint64_t i = v227; v61 < SHIDWORD(v259) || SHIDWORD(v259) >= v61 && *i < (int)v60; i -= 42)
            int v61 = *(i - 64);
          unint64_t v67 = (unint64_t)(i - 41);
        }
        while (v10 < v67)
        {
          std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(v10, v67);
          unint64_t v69 = v10 + 168;
          do
          {
            unint64_t v10 = v69;
            int v70 = *(_DWORD *)(v69 + 76);
            if (v70 < v59) {
              break;
            }
            int v71 = *(_DWORD *)(v69 + 164);
            v69 += 168;
          }
          while (v59 < v70 || v71 >= (int)v60);
          do
          {
            do
            {
              v67 -= 168;
              int v73 = *(_DWORD *)(v67 + 76);
            }
            while (v73 < v59);
          }
          while (v59 >= v73 && *(_DWORD *)(v67 + 164) < (int)v60);
        }
        uint64_t v75 = (void **)(v10 - 168);
        if (v10 - 168 != a1) {
          quasar::result_handler::CommandInterpretation::operator=(a1, (long long *)(v10 - 168));
        }
        if (*(char *)(v10 - 145) < 0) {
          operator delete(*v75);
        }
        long long v76 = *(_OWORD *)v253;
        *(void *)(v10 - 152) = v254;
        *(_OWORD *)uint64_t v75 = v76;
        HIBYTE(v254) = 0;
        LOBYTE(v253[0]) = 0;
        uint64_t v77 = (void **)(v10 - 144);
        if (*(char *)(v10 - 121) < 0) {
          operator delete(*v77);
        }
        long long v78 = v255;
        *(void *)(v10 - 128) = v256;
        *(_OWORD *)uint64_t v77 = v78;
        HIBYTE(v256) = 0;
        LOBYTE(v255) = 0;
        char v79 = (void **)(v10 - 120);
        uint64_t v9 = v66;
        if (*(char *)(v10 - 97) < 0) {
          operator delete(*v79);
        }
        long long v80 = __p;
        *(void *)(v10 - 104) = v258;
        *(_OWORD *)char v79 = v80;
        HIBYTE(v258) = 0;
        LOBYTE(__p) = 0;
        uint64_t v81 = v259;
        *(_WORD *)(v10 - 88) = v260;
        *(void *)(v10 - 96) = v81;
        std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v10 - 80));
        *(_OWORD *)(v10 - 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v261;
        *(void *)(v10 - 64) = v262;
        long long v261 = 0uLL;
        uint64_t v262 = 0;
        std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v10 - 56));
        *(_OWORD *)(v10 - 56) = v263;
        *(void *)(v10 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v264;
        long long v263 = 0uLL;
        uint64_t v264 = 0;
        std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v10 - 32));
        *(_OWORD *)(v10 - 32) = v265;
        *(void *)(v10 - 16) = v266;
        long long v265 = 0uLL;
        uint64_t v266 = 0;
        *(void *)(v10 - 8) = v267;
        v237[0] = &v265;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
        v237[0] = &v263;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
        v237[0] = &v261;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
        if (SHIBYTE(v258) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v256) < 0) {
          operator delete((void *)v255);
        }
        if (SHIBYTE(v254) < 0) {
          operator delete(v253[0]);
        }
LABEL_70:
        a4 = 0;
      }
      uint64_t v18 = a3;
      uint64_t v19 = 0;
      long long v20 = *(_OWORD *)a1;
      uint64_t v254 = *(void *)(a1 + 16);
      *(_OWORD *)v253 = v20;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      long long v21 = *(_OWORD *)(a1 + 24);
      uint64_t v256 = *(void *)(a1 + 40);
      long long v255 = v21;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(a1 + 24) = 0;
      long long v22 = *(_OWORD *)(a1 + 48);
      uint64_t v23 = *(void *)(a1 + 72);
      uint64_t v258 = *(void *)(a1 + 64);
      long long __p = v22;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      __int16 v260 = *(_WORD *)(a1 + 80);
      uint64_t v259 = v23;
      long long v261 = *(_OWORD *)(a1 + 88);
      uint64_t v262 = *(void *)(a1 + 104);
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      long long v263 = *(_OWORD *)(a1 + 112);
      uint64_t v264 = *(void *)(a1 + 128);
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(a1 + 128) = 0;
      long long v265 = *(_OWORD *)(a1 + 136);
      unint64_t v24 = *(void *)(a1 + 160);
      uint64_t v266 = *(void *)(a1 + 152);
      *(void *)(a1 + 136) = 0;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      unint64_t v267 = v24;
      unint64_t v25 = HIDWORD(v24);
      int v26 = HIDWORD(v259);
      while (1)
      {
        int v27 = *(_DWORD *)(a1 + v19 + 244);
        if (SHIDWORD(v259) >= v27)
        {
          BOOL v28 = v27 < SHIDWORD(v259) || *(_DWORD *)(a1 + v19 + 332) <= (int)v25;
          if (v28) {
            break;
          }
        }
        v19 += 168;
      }
      unint64_t v29 = a1 + v19 + 168;
      uint64_t v30 = v9;
      uint64_t v31 = v9;
      if (v19)
      {
        do
        {
          unint64_t v32 = v31;
          int v33 = *(_DWORD *)(v31 + 76);
          if (SHIDWORD(v259) < v33) {
            break;
          }
          int v34 = *(_DWORD *)(v31 + 164);
          v31 -= 168;
        }
        while (v33 < SHIDWORD(v259) || v34 <= (int)v25);
      }
      else
      {
        unint64_t v32 = v235;
        while (v29 < v32)
        {
          unint64_t v36 = v32 - 168;
          int v37 = *(_DWORD *)(v32 - 92);
          if (SHIDWORD(v259) >= v37)
          {
            BOOL v38 = v37 < SHIDWORD(v259) || *(_DWORD *)(v32 - 4) <= (int)v25;
            v32 -= 168;
            if (v38) {
              continue;
            }
          }
          unint64_t v32 = v36;
          break;
        }
      }
      unint64_t v10 = v29;
      if (v29 < v32)
      {
        unint64_t v39 = v32;
        do
        {
          std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(v10, v39);
          do
          {
            do
            {
              v10 += 168;
              int v40 = *(_DWORD *)(v10 + 76);
            }
            while (v26 < v40);
          }
          while (v40 >= v26 && *(_DWORD *)(v10 + 164) > (int)v25);
          unint64_t v42 = v39 - 168;
          do
          {
            unint64_t v39 = v42;
            int v43 = *(_DWORD *)(v42 + 76);
            if (v26 < v43) {
              break;
            }
            int v44 = *(_DWORD *)(v42 + 164);
            v42 -= 168;
          }
          while (v43 < v26 || v44 <= (int)v25);
        }
        while (v10 < v39);
      }
      unint64_t v46 = (void **)(v10 - 168);
      if (v10 - 168 != a1) {
        quasar::result_handler::CommandInterpretation::operator=(a1, (long long *)(v10 - 168));
      }
      a3 = v18;
      if (*(char *)(v10 - 145) < 0) {
        operator delete(*v46);
      }
      long long v47 = *(_OWORD *)v253;
      *(void *)(v10 - 152) = v254;
      *(_OWORD *)unint64_t v46 = v47;
      HIBYTE(v254) = 0;
      LOBYTE(v253[0]) = 0;
      long long v48 = (void **)(v10 - 144);
      if (*(char *)(v10 - 121) < 0) {
        operator delete(*v48);
      }
      long long v49 = v255;
      *(void *)(v10 - 128) = v256;
      *(_OWORD *)long long v48 = v49;
      HIBYTE(v256) = 0;
      LOBYTE(v255) = 0;
      unint64_t v50 = (void **)(v10 - 120);
      if (*(char *)(v10 - 97) < 0) {
        operator delete(*v50);
      }
      long long v51 = __p;
      *(void *)(v10 - 104) = v258;
      *(_OWORD *)unint64_t v50 = v51;
      HIBYTE(v258) = 0;
      LOBYTE(__p) = 0;
      uint64_t v52 = v259;
      *(_WORD *)(v10 - 88) = v260;
      *(void *)(v10 - 96) = v52;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v10 - 80));
      *(_OWORD *)(v10 - 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v261;
      *(void *)(v10 - 64) = v262;
      long long v261 = 0uLL;
      uint64_t v262 = 0;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v10 - 56));
      *(_OWORD *)(v10 - 56) = v263;
      *(void *)(v10 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v264;
      long long v263 = 0uLL;
      uint64_t v264 = 0;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v10 - 32));
      *(_OWORD *)(v10 - 32) = v265;
      *(void *)(v10 - 16) = v266;
      long long v265 = 0uLL;
      uint64_t v266 = 0;
      *(void *)(v10 - 8) = v267;
      v237[0] = &v265;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
      v237[0] = &v263;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
      v237[0] = &v261;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v237);
      if (SHIBYTE(v258) < 0) {
        operator delete((void *)__p);
      }
      a2 = v235;
      if (SHIBYTE(v256) < 0) {
        operator delete((void *)v255);
      }
      if (SHIBYTE(v254) < 0) {
        operator delete(v253[0]);
      }
      BOOL v4 = v29 >= v32;
      uint64_t v9 = v30;
      if (!v4)
      {
LABEL_69:
        std::__introsort<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,false>(a1, v10 - 168, v18, a4 & 1);
        goto LABEL_70;
      }
      BOOL v53 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, v10 - 168);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(v10, v235))
      {
        break;
      }
      if (!v53) {
        goto LABEL_69;
      }
    }
    a2 = v10 - 168;
    if (!v53) {
      continue;
    }
    break;
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a2, a3, a4);
  int v10 = *(_DWORD *)(a5 + 76);
  int v11 = *(_DWORD *)(a4 + 76);
  if (v11 < v10 || (v10 >= v11 ? (BOOL v12 = *(_DWORD *)(a4 + 164) < *(_DWORD *)(a5 + 164)) : (BOOL v12 = 0), v12))
  {
    std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a4, a5);
    int v13 = *(_DWORD *)(a4 + 76);
    int v14 = *(_DWORD *)(a3 + 76);
    if (v14 < v13 || (v13 >= v14 ? (BOOL v15 = *(_DWORD *)(a3 + 164) < *(_DWORD *)(a4 + 164)) : (BOOL v15 = 0), v15))
    {
      std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a3, a4);
      int v16 = *(_DWORD *)(a3 + 76);
      int v17 = *(_DWORD *)(a2 + 76);
      if (v17 < v16 || v16 >= v17 && *(_DWORD *)(a2 + 164) < *(_DWORD *)(a3 + 164))
      {
        std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a2, a3);
        int v18 = *(_DWORD *)(a2 + 76);
        int v19 = *(_DWORD *)(a1 + 76);
        if (v19 < v18 || v18 >= v19 && *(_DWORD *)(a1 + 164) < *(_DWORD *)(a2 + 164))
        {
          std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a2);
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  int v6 = *(_DWORD *)(a2 + 76);
  int v7 = *(_DWORD *)(a1 + 76);
  if (v7 < v6 || ((int v8 = *(_DWORD *)(a2 + 164), v6 >= v7) ? (v9 = *(_DWORD *)(a1 + 164) < v8) : (v9 = 0), v9))
  {
    int v15 = *(_DWORD *)(a3 + 76);
    if (v6 >= v15 && (v15 < v6 || *(_DWORD *)(a2 + 164) >= *(_DWORD *)(a3 + 164)))
    {
      std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a2);
      int v17 = *(_DWORD *)(a3 + 76);
      int v18 = *(_DWORD *)(a2 + 76);
      if (v18 >= v17 && (v17 < v18 || *(_DWORD *)(a2 + 164) >= *(_DWORD *)(a3 + 164))) {
        return;
      }
      a1 = a2;
    }
    uint64_t v14 = a3;
    goto LABEL_26;
  }
  int v10 = *(_DWORD *)(a3 + 76);
  if (v6 < v10 || (v10 >= v6 ? (BOOL v11 = v8 < *(_DWORD *)(a3 + 164)) : (BOOL v11 = 0), v11))
  {
    std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a2, a3);
    int v12 = *(_DWORD *)(a2 + 76);
    int v13 = *(_DWORD *)(v5 + 76);
    if (v13 < v12 || v12 >= v13 && *(_DWORD *)(v5 + 164) < *(_DWORD *)(a2 + 164))
    {
      a1 = v5;
      uint64_t v14 = a2;
LABEL_26:
      std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, v14);
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCF3CF3CF3CF3CF3DLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = *(_DWORD *)(a2 - 92);
      int v7 = *(_DWORD *)(a1 + 76);
      if (v7 < v6 || (v6 >= v7 ? (BOOL v8 = *(_DWORD *)(a1 + 164) < *(_DWORD *)(a2 - 4)) : (BOOL v8 = 0), v8))
      {
        std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a2 - 168);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, a2 - 168);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, a1 + 336, a2 - 168);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,0>(a1, a1 + 168, a1 + 336, a1 + 504, a2 - 168);
      return 1;
    default:
      uint64_t v9 = a1 + 336;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, a1 + 336);
      uint64_t v10 = a1 + 504;
      if (a1 + 504 == v2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      uint64_t v30 = v2;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)(v10 + 76);
    int v14 = *(_DWORD *)(v9 + 76);
    if (v14 < v13 || (v13 >= v14 ? (BOOL v15 = *(_DWORD *)(v9 + 164) < *(_DWORD *)(v10 + 164)) : (BOOL v15 = 0), v15))
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v10;
      uint64_t v32 = *(void *)(v10 + 16);
      *(void *)uint64_t v10 = 0;
      *(void *)(v10 + 8) = 0;
      long long v16 = *(_OWORD *)(v10 + 24);
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      long long v33 = v16;
      uint64_t v34 = *(void *)(v10 + 40);
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      uint64_t v17 = *(void *)(v10 + 72);
      uint64_t v36 = *(void *)(v10 + 64);
      long long __p = *(_OWORD *)(v10 + 48);
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(void *)(v10 + 64) = 0;
      __int16 v38 = *(_WORD *)(v10 + 80);
      uint64_t v37 = v17;
      long long v39 = *(_OWORD *)(v10 + 88);
      uint64_t v40 = *(void *)(v10 + 104);
      *(void *)(v10 + 88) = 0;
      *(void *)(v10 + 96) = 0;
      long long v41 = *(_OWORD *)(v10 + 112);
      uint64_t v18 = *(void *)(v10 + 128);
      *(void *)(v10 + 104) = 0;
      *(void *)(v10 + 112) = 0;
      *(void *)(v10 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v10 + 128) = 0;
      long long v43 = *(_OWORD *)(v10 + 136);
      uint64_t v19 = *(void *)(v10 + 152);
      uint64_t v20 = *(void *)(v10 + 160);
      uint64_t v42 = v18;
      uint64_t v44 = v19;
      uint64_t v45 = v20;
      *(void *)(v10 + 136) = 0;
      *(void *)(v10 + 144) = 0;
      *(void *)(v10 + 152) = 0;
      quasar::result_handler::CommandInterpretation::operator=(v10, (long long *)v9);
      uint64_t v21 = a1;
      if (v9 != a1)
      {
        uint64_t v22 = v11;
        do
        {
          uint64_t v23 = a1 + v22;
          int v24 = *(_DWORD *)(a1 + v22 + 244);
          if (v24 >= SHIDWORD(v37) && (SHIDWORD(v37) < v24 || *(_DWORD *)(v23 + 332) >= SHIDWORD(v45)))
          {
            uint64_t v21 = a1 + v22 + 336;
            goto LABEL_27;
          }
          quasar::result_handler::CommandInterpretation::operator=(v23 + 336, (long long *)(v23 + 168));
          v22 -= 168;
        }
        while (v22 != -336);
        uint64_t v21 = a1;
      }
LABEL_27:
      if (*(char *)(v21 + 23) < 0) {
        operator delete(*(void **)v21);
      }
      *(_OWORD *)uint64_t v21 = *(_OWORD *)v31;
      *(void *)(v21 + 16) = v32;
      int v26 = (void **)(v21 + 24);
      if (*(char *)(v21 + 47) < 0) {
        operator delete(*v26);
      }
      *(_OWORD *)int v26 = v33;
      *(void *)(v21 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v34;
      int v27 = (void **)(v21 + 48);
      if (*(char *)(v21 + 71) < 0) {
        operator delete(*v27);
      }
      *(_OWORD *)int v27 = __p;
      *(void *)(v21 + 64) = v36;
      *(void *)(v21 + 72) = v37;
      *(_WORD *)(v21 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v38;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v21 + 88));
      *(_OWORD *)(v21 + 88) = v39;
      *(void *)(v21 + 104) = v40;
      uint64_t v40 = 0;
      long long v39 = 0uLL;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v21 + 112));
      *(_OWORD *)(v21 + 112) = v41;
      *(void *)(v21 + 128) = v42;
      uint64_t v42 = 0;
      long long v41 = 0uLL;
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v21 + 136));
      *(_OWORD *)(v21 + 136) = v43;
      uint64_t v28 = v44;
      uint64_t v29 = v45;
      uint64_t v44 = 0;
      long long v43 = 0uLL;
      *(void *)(v21 + 152) = v28;
      *(void *)(v21 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v29;
      v46[0] = (void **)&v43;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v46);
      v46[0] = (void **)&v41;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v46);
      v46[0] = (void **)&v39;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v46);
      uint64_t v2 = v30;
      if (++v12 == 8) {
        return v10 + 168 == v30;
      }
    }
    uint64_t v9 = v10;
    v11 += 168;
    v10 += 168;
    if (v10 == v2) {
      return 1;
    }
  }
}

void std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v22 = *(_OWORD *)a1;
  uint64_t v23 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)int v24 = v3;
  uint64_t v25 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  __int16 v29 = *(_WORD *)(a1 + 80);
  uint64_t v27 = v4;
  uint64_t v28 = v5;
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v30 = v14;
  uint64_t v31 = v6;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v32 = v8;
  uint64_t v33 = v7;
  uint64_t v19 = v7;
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 120);
  uint64_t v34 = v17;
  uint64_t v35 = v9;
  uint64_t v15 = v9;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  uint64_t v20 = *(void *)(a1 + 144);
  uint64_t v21 = *(void *)(a1 + 136);
  uint64_t v36 = v21;
  uint64_t v37 = v20;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v10 = *(void *)(a1 + 152);
  uint64_t v11 = *(void *)(a1 + 160);
  *(void *)(a1 + 152) = 0;
  uint64_t v18 = v10;
  uint64_t v38 = v10;
  uint64_t v39 = v11;
  uint64_t v16 = v11;
  quasar::result_handler::CommandInterpretation::operator=(a1, (long long *)a2);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = *(_OWORD *)v22;
  *(void *)(a2 + 16) = v23;
  int v12 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)int v12 = *(_OWORD *)v24;
  *(void *)(a2 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v25;
  int v13 = (void **)(a2 + 48);
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*v13);
  }
  *(_OWORD *)int v13 = *(_OWORD *)__p;
  *(void *)(a2 + 64) = v27;
  *(void *)(a2 + 72) = v28;
  *(_WORD *)(a2 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v29;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 88));
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 96) = v6;
  *(void *)(a2 + 104) = v8;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 112));
  *(void *)(a2 + 112) = v19;
  *(void *)(a2 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v17;
  *(void *)(a2 + 128) = v15;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a2 + 136));
  *(void *)(a2 + 136) = v21;
  *(void *)(a2 + 144) = v20;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = 0;
  *(void *)(a2 + 152) = v18;
  *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v16;
  v40[0] = (void **)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v40[0] = (void **)&v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
  v40[0] = (void **)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v40);
}

uint64_t quasar::result_handler::CommandInterpretation::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint64_t v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  uint64_t v9 = *((void *)a2 + 9);
  *(_WORD *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((_WORD *)a2 + 40);
  *(void *)(a1 + 72) = v9;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 112));
  *(_OWORD *)(a1 + 112) = a2[7];
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 20);
  return a1;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a2, a3);
  int v8 = *(_DWORD *)(a4 + 76);
  int v9 = *(_DWORD *)(a3 + 76);
  if (v9 < v8 || (v8 >= v9 ? (BOOL v10 = *(_DWORD *)(a3 + 164) < *(_DWORD *)(a4 + 164)) : (BOOL v10 = 0), v10))
  {
    std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a3, a4);
    int v11 = *(_DWORD *)(a3 + 76);
    int v12 = *(_DWORD *)(a2 + 76);
    if (v12 < v11 || (v11 >= v12 ? (BOOL v13 = *(_DWORD *)(a2 + 164) < *(_DWORD *)(a3 + 164)) : (BOOL v13 = 0), v13))
    {
      std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a2, a3);
      int v14 = *(_DWORD *)(a2 + 76);
      int v15 = *(_DWORD *)(a1 + 76);
      if (v15 < v14 || v14 >= v15 && *(_DWORD *)(a1 + 164) < *(_DWORD *)(a2 + 164))
      {
        std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, a2);
      }
    }
  }
}

uint64_t *kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::InsertWithValueFunction<kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::Insert(std::string const&,std::vector<quasar::result_handler::CommandInterpretation> const&)::{lambda(std::vector<quasar::result_handler::CommandInterpretation>&)#1}>(unint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v28 = (uint64_t *)&v28;
  __int16 v29 = (uint64_t *)&v28;
  uint64_t v30 = 0;
  long long v6 = a1 + 1;
  v27.__r_.__value_.__r.__words[0] = a2;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::find<std::string const*>(a1 + 1, (uint64_t *)&v27);
  if (v7)
  {
    int v8 = (uint64_t *)v7[3];
    if (&v28 != (uint64_t **)v8)
    {
      int v9 = (uint64_t *)v8[1];
      if (v9 != (uint64_t *)&v28)
      {
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *(void *)v8[1] = v10;
        uint64_t v11 = (uint64_t)v28;
        v28[1] = (uint64_t)v8;
        *int v8 = v11;
        v8[1] = (uint64_t)&v28;
        --a1[9];
        uint64_t v28 = v8;
        ++v30;
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v6, v7);
  }
  else
  {
    unint64_t v12 = a1[9];
    if (v12 >= *a1)
    {
      BOOL v13 = (uint64_t *)a1[7];
      if (&v28 != (uint64_t **)v13)
      {
        int v14 = (uint64_t *)v13[1];
        if (v14 != (uint64_t *)&v28)
        {
          uint64_t v15 = *v13;
          *(void *)(v15 + 8) = v14;
          *(void *)v13[1] = v15;
          uint64_t v16 = (uint64_t)v28;
          v28[1] = (uint64_t)v13;
          uint64_t *v13 = v16;
          v13[1] = (uint64_t)&v28;
          a1[9] = v12 - 1;
          uint64_t v28 = v13;
          ++v30;
        }
      }
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v29 + 2);
      std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__erase_unique<std::string const*>(v6, (uint64_t *)&v27);
      std::string::operator=((std::string *)(v29 + 2), (const std::string *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v27 = *(std::string *)a2;
      }
      uint64_t v17 = (uint64_t *)operator new(0x40uLL);
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
      void v17[2] = v27.__r_.__value_.__r.__words[0];
      uint64_t v17[3] = size;
      *(uint64_t *)((char *)v17 + 31) = *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7);
      LOBYTE(size) = *((unsigned char *)&v27.__r_.__value_.__s + 23);
      memset(&v27, 0, sizeof(v27));
      *((unsigned char *)v17 + 39) = size;
      v17[6] = 0;
      v17[7] = 0;
      void v17[5] = 0;
      uint64_t v19 = (uint64_t)v28;
      uint64_t *v17 = (uint64_t)v28;
      v17[1] = (uint64_t)&v28;
      *(void *)(v19 + 8) = v17;
      uint64_t v28 = v17;
      ++v30;
    }
  }
  uint64_t v20 = v29;
  uint64_t v21 = v29 + 5;
  if (v29 + 5 != (uint64_t *)a3) {
    std::vector<quasar::result_handler::CommandInterpretation>::__assign_with_size[abi:ne180100]<quasar::result_handler::CommandInterpretation*,quasar::result_handler::CommandInterpretation*>((uint64_t)(v29 + 5), *(std::string **)a3, *(quasar::result_handler::CommandInterpretation **)(a3 + 8), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)(v20 + 2);
  v27.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  std::__hash_table<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,std::__unordered_map_hasher<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,false>,std::__unordered_map_equal<std::string const*,std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,kaldi::LRUCacheMap<std::string,quasar::SystemConfig::SystemConfigInfo,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,false>,std::allocator<std::__hash_value_type<std::string const*,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>>::__emplace_unique_key_args<std::string const*,std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,quasar::SystemConfig::SystemConfigInfo>,void *>>>((uint64_t)v6, (uint64_t *)&v27, &v27);
  uint64_t v22 = (uint64_t *)a1[8];
  if (v22 != v20)
  {
    uint64_t v23 = (uint64_t *)v20[1];
    if (v23 != v22)
    {
      uint64_t v24 = *v20;
      *(void *)(v24 + 8) = v23;
      *(void *)v20[1] = v24;
      uint64_t v25 = *v22;
      *(void *)(v25 + 8) = v20;
      *uint64_t v20 = v25;
      uint64_t *v22 = (uint64_t)v20;
      v20[1] = (uint64_t)v22;
      --v30;
      ++a1[9];
    }
  }
  std::__list_imp<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>>::clear((uint64_t *)&v28);
  return v21;
}

void sub_1B21E1108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
}

uint64_t std::vector<quasar::result_handler::CommandData>::__push_back_slow_path<quasar::result_handler::CommandData const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xB21642C8590B21) {
    unint64_t v9 = 0x1642C8590B21642;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v13 = v10;
  int v14 = &v10[184 * v4];
  uint64_t v16 = &v10[184 * v9];
  quasar::result_handler::CommandData::CommandData((uint64_t)v14, a2);
  uint64_t v15 = v14 + 184;
  std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(&v13);
  return v11;
}

void sub_1B21E1258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(184 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 184;
      std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>(a1, v7 - 184, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 184;
      *((void *)&v16 + 1) -= 184;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a3 + 88) = 0;
  long long v3 = *(_OWORD *)(a3 + 96);
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  *(_OWORD *)(a2 + 96) = v3;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 96) = 0;
  *(_DWORD *)(a2 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a3 + 120);
  long long v4 = *(_OWORD *)(a3 + 128);
  *(void *)(a2 + 144) = *(void *)(a3 + 144);
  *(_OWORD *)(a2 + 128) = v4;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 168) = 0;
  __n128 result = *(__n128 *)(a3 + 152);
  *(__n128 *)(a2 + 152) = result;
  *(void *)(a2 + 168) = *(void *)(a3 + 168);
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a3 + 168) = 0;
  int v6 = *(_DWORD *)(a3 + 176);
  *(unsigned char *)(a2 + 18std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(unsigned char *)(a3 + 180);
  *(_DWORD *)(a2 + 176) = v6;
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](v3, v1);
      v1 += 184;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::result_handler::CommandData>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 184;
    std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](v4, i - 184);
  }
}

void std::swap[abi:ne180100]<quasar::result_handler::CommandData>(uint64_t a1, uint64_t a2)
{
  long long v6 = *(_OWORD *)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v8 = *(_OWORD *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  long long v10 = *(_OWORD *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v12 = *(_OWORD *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  long long v3 = *(_OWORD *)(a1 + 96);
  uint64_t v15 = *(void *)(a1 + 112);
  *(_OWORD *)char v14 = v3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  int v16 = *(_DWORD *)(a1 + 120);
  long long v4 = *(_OWORD *)(a1 + 128);
  uint64_t v18 = *(void *)(a1 + 144);
  *(_OWORD *)long long __p = v4;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  long long v19 = *(_OWORD *)(a1 + 152);
  uint64_t v20 = *(void *)(a1 + 168);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 168) = 0;
  int v5 = *(_DWORD *)(a1 + 176);
  char v22 = *(unsigned char *)(a1 + 180);
  int v21 = v5;
  quasar::result_handler::CommandData::operator=(a1, a2);
  quasar::result_handler::CommandData::operator=(a2, (uint64_t)&v6);
  uint64_t v23 = (void **)&v19;
  std::vector<quasar::result_handler::CommandInterpretation>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  uint64_t v23 = (void **)&v12;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v23);
  uint64_t v23 = (void **)&v10;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v23);
  uint64_t v23 = (void **)&v8;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v23);
  uint64_t v23 = (void **)&v6;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v23);
}

void std::vector<quasar::result_handler::CommandInterpretation>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::result_handler::CommandInterpretation>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 168 * a2;
    while (v3 != v7)
    {
      v3 -= 168;
      std::allocator<quasar::result_handler::CommandInterpretation>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<quasar::corrective_reranking::ASRCandidate>::__assign_with_size[abi:ne180100]<quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    std::vector<std::pair<std::string,float>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = (std::string *)((char *)__str + 32 * v14);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*,0>(__str, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::corrective_reranking::ASRCandidate>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*>(v8, (long long *)v15, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*,0>(__str, (std::string *)a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 9) < 0) {
        operator delete(*(void **)(v18 - 32));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1B21E1A70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B21E1A78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate const*,quasar::corrective_reranking::ASRCandidate*,0>(std::string *__str, std::string *a2, std::string *this)
{
  unint64_t v4 = __str;
  if (__str == a2) {
    return __str;
  }
  BOOL v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    LODWORD(this[1].__r_.__value_.__l.__data_) = v4[1].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 32);
    unint64_t v4 = (std::string *)((char *)v4 + 32);
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::vector<quasar::result_handler::CommandInterpretation>::emplace_back<>(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = a1 + 2;
  unint64_t v3 = v4;
  unint64_t v5 = *(v2 - 1);
  if (v5 >= v4)
  {
    unint64_t v7 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0x186186186186186) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0xC30C30C30C30C3) {
      unint64_t v10 = 0x186186186186186;
    }
    else {
      unint64_t v10 = v8;
    }
    int v15[4] = v2;
    uint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>((uint64_t)v2, v10);
    unint64_t v12 = &v11[168 * v7];
    v15[0] = v11;
    v15[1] = v12;
    void v15[3] = &v11[168 * v13];
    *((void *)v12 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 8) = 0u;
    *((_OWORD *)v12 + 9) = 0u;
    *(_OWORD *)unint64_t v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_DWORD *)v12 + 18) = -1082130432;
    *((_DWORD *)v12 + 41) = 0;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 145) = 0u;
    v15[2] = v12 + 168;
    std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(a1, v15);
    uint64_t v6 = a1[1];
    std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(v15);
  }
  else
  {
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(void *)(v5 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)unint64_t v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 72) = -1082130432;
    *(_OWORD *)(v5 + 88) = 0u;
    *(_OWORD *)(v5 + 104) = 0u;
    *(_OWORD *)(v5 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
    *(_OWORD *)(v5 + 136) = 0u;
    *(_OWORD *)(v5 + 145) = 0u;
    uint64_t v6 = v5 + 168;
    a1[1] = v5 + 168;
  }
  a1[1] = v6;
  return v6 - 168;
}

void sub_1B21E1C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandInterpretation>::__emplace_back_slow_path<quasar::result_handler::CommandInterpretation>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v6 = 0x186186186186186;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[168 * v3];
  uint64_t v13 = &v7[168 * v6];
  std::allocator<quasar::result_handler::CommandInterpretation>::construct[abi:ne180100]<quasar::result_handler::CommandInterpretation,quasar::result_handler::CommandInterpretation>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 168;
  std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(&v10);
  return v8;
}

void sub_1B21E1D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v6 = 0x1642C8590B21642;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[184 * v3];
  uint64_t v13 = &v7[184 * v6];
  std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  unint64_t v12 = v11 + 184;
  std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(&v10);
  return v8;
}

void sub_1B21E1EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unint64_t quasar::result_handler::maybeCompleteCommandSegmentationScore(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 152);
  if (v1 == *(void *)(a1 + 160))
  {
    uint64_t v3 = 0;
    float v4 = 0.0;
  }
  else
  {
    if (*(char *)(v1 + 23) < 0)
    {
      uint64_t v5 = *(void *)(v1 + 8);
      if (!v5) {
        goto LABEL_15;
      }
      if (v5 != 14)
      {
LABEL_14:
        float v4 = *(float *)(v1 + 72);
        uint64_t v3 = 3;
        return v3 | ((unint64_t)LODWORD(v4) << 32);
      }
      uint64_t v2 = *(uint64_t **)v1;
    }
    else
    {
      uint64_t v2 = *(uint64_t **)(a1 + 152);
      if (*(unsigned char *)(v1 + 23) != 14)
      {
        if (*(unsigned char *)(v1 + 23)) {
          goto LABEL_14;
        }
LABEL_15:
        float v4 = *(float *)(v1 + 72);
        uint64_t v3 = 1;
        return v3 | ((unint64_t)LODWORD(v4) << 32);
      }
    }
    uint64_t v6 = *v2;
    uint64_t v7 = *(uint64_t *)((char *)v2 + 6);
    if (v6 != 0x6769626D61736964 || v7 != 0x6E6F697461756769) {
      goto LABEL_14;
    }
    unint64_t v9 = *(unsigned __int8 *)(a1 + 151);
    if ((v9 & 0x80u) != 0) {
      unint64_t v9 = *(void *)(a1 + 136);
    }
    float v4 = (float)v9;
    uint64_t v3 = 2;
  }
  return v3 | ((unint64_t)LODWORD(v4) << 32);
}

void **std::vector<quasar::result_handler::CommandInterpretation>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0xCF3CF3CF3CF3CF3DLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 168 * a2;
      do
      {
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0uLL;
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 128) = 0uLL;
        *(_OWORD *)(v7 + 144) = 0uLL;
        *(void *)(v7 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 72) = -1082130432;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(_OWORD *)(v7 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0uLL;
        *(_OWORD *)(v7 + 136) = 0uLL;
        *(_OWORD *)(v7 + 145) = 0uLL;
        v7 += 168;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCF3CF3CF3CF3CF3DLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x186186186186186) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCF3CF3CF3CF3CF3DLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xC30C30C30C30C3) {
      unint64_t v11 = 0x186186186186186;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandInterpretation>>((uint64_t)result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v14 = &v12[168 * v8];
    v16[0] = v12;
    v16[1] = v14;
    void v16[3] = &v12[168 * v11];
    uint64_t v15 = &v14[168 * a2];
    do
    {
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 8) = 0uLL;
      *((_OWORD *)v14 + 9) = 0uLL;
      *((void *)v14 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)unint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 18) = -1082130432;
      *(_OWORD *)(v14 + 88) = 0uLL;
      *(_OWORD *)(v14 + 104) = 0uLL;
      *(_OWORD *)(v14 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0uLL;
      *(_OWORD *)(v14 + 136) = 0uLL;
      *(_OWORD *)(v14 + 145) = 0uLL;
      v14 += 168;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<quasar::result_handler::CommandInterpretation>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer(v16);
  }
  return result;
}

void sub_1B21E2120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandInterpretation>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::pair<std::vector<std::vector<quasar::Token>>,std::vector<int>>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  return a1;
}

void sub_1B21E21A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__vdeallocate(void ***a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    float v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        uint64_t v5 = v3;
        std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      float v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void quasar::PartialHistory::annotatePartial(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v80 = *(void *)(a1 + 8);
  v91[0] = -1431655765 * ((unint64_t)(v80 - *(void *)a1) >> 3);
  if (v91[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&v90, "<eps>");
    memset(&v89, 0, sizeof(v89));
    memset(&v88, 0, sizeof(v88));
    uint64_t v5 = *(long long **)(v80 - 24);
    for (i = *(long long **)(v80 - 16); v5 != i; uint64_t v5 = (long long *)((char *)v5 + 232))
    {
      uint64_t v6 = *((unsigned __int8 *)v5 + 23);
      std::string::size_type v7 = *((void *)v5 + 1);
      if ((v6 & 0x80u) == 0) {
        uint64_t v8 = *((unsigned __int8 *)v5 + 23);
      }
      else {
        uint64_t v8 = *((void *)v5 + 1);
      }
      std::string::size_type size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v90.__r_.__value_.__l.__size_;
      }
      if (v8 == size)
      {
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v10 = &v90;
        }
        else {
          unint64_t v10 = (std::string *)v90.__r_.__value_.__r.__words[0];
        }
        if ((v6 & 0x80) != 0)
        {
          uint64_t v13 = *(const std::string::value_type **)v5;
          if (!memcmp(*(const void **)v5, v10, *((void *)v5 + 1)))
          {
LABEL_23:
            std::string::basic_string[abi:ne180100]<0>(&v87, "");
            goto LABEL_24;
          }
          goto LABEL_22;
        }
        if (!*((unsigned char *)v5 + 23)) {
          goto LABEL_23;
        }
        uint64_t v11 = 0;
        while (*((unsigned __int8 *)v5 + v11) == v10->__r_.__value_.__s.__data_[v11])
        {
          if (v6 == ++v11) {
            goto LABEL_23;
          }
        }
      }
      if ((v6 & 0x80) != 0)
      {
        uint64_t v13 = *(const std::string::value_type **)v5;
LABEL_22:
        std::string::__init_copy_ctor_external(&v87, v13, v7);
        goto LABEL_24;
      }
      long long v12 = *v5;
      v87.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v12;
LABEL_24:
      std::vector<std::string>::pointer end = v89.__end_;
      if (v89.__end_ >= v89.__end_cap_.__value_)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v89.__end_ - (char *)v89.__begin_) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v89.__end_cap_.__value_ - (char *)v89.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v89.__end_cap_;
        if (v18) {
          long long v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v89.__end_cap_, v18);
        }
        else {
          long long v19 = 0;
        }
        uint64_t v20 = v19 + v16;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        long long v21 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
        v20->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        memset(&v87, 0, sizeof(v87));
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v89, &__v);
        char v22 = v89.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v89.__end_ = v22;
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v87.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v15 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
        v89.__end_->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
        v89.__end_ = end + 1;
      }
    }
    uint64_t v24 = *a2;
    uint64_t v23 = a2[1];
    if (*a2 != v23)
    {
      do
      {
        uint64_t v25 = *((unsigned __int8 *)v24 + 23);
        std::string::size_type v26 = *((void *)v24 + 1);
        if ((v25 & 0x80u) == 0) {
          uint64_t v27 = *((unsigned __int8 *)v24 + 23);
        }
        else {
          uint64_t v27 = *((void *)v24 + 1);
        }
        std::string::size_type v28 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v28 = v90.__r_.__value_.__l.__size_;
        }
        if (v27 == v28)
        {
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v29 = &v90;
          }
          else {
            __int16 v29 = (std::string *)v90.__r_.__value_.__r.__words[0];
          }
          if ((v25 & 0x80) != 0)
          {
            uint64_t v32 = *(const std::string::value_type **)v24;
            if (!memcmp(*(const void **)v24, v29, *((void *)v24 + 1)))
            {
LABEL_59:
              std::string::basic_string[abi:ne180100]<0>(&v87, "");
              goto LABEL_60;
            }
            goto LABEL_58;
          }
          if (!*((unsigned char *)v24 + 23)) {
            goto LABEL_59;
          }
          uint64_t v30 = 0;
          while (*((unsigned __int8 *)v24 + v30) == v29->__r_.__value_.__s.__data_[v30])
          {
            if (v25 == ++v30) {
              goto LABEL_59;
            }
          }
        }
        if ((v25 & 0x80) != 0)
        {
          uint64_t v32 = *(const std::string::value_type **)v24;
LABEL_58:
          std::string::__init_copy_ctor_external(&v87, v32, v26);
          goto LABEL_60;
        }
        long long v31 = *v24;
        v87.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v31;
LABEL_60:
        std::vector<std::string>::pointer v33 = v88.__end_;
        if (v88.__end_ >= v88.__end_cap_.__value_)
        {
          unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88.__end_ - (char *)v88.__begin_) >> 3);
          unint64_t v36 = v35 + 1;
          if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3) > v36) {
            unint64_t v36 = 0x5555555555555556 * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v88.__end_cap_.__value_ - (char *)v88.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v37 = v36;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v88.__end_cap_;
          if (v37) {
            uint64_t v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v88.__end_cap_, v37);
          }
          else {
            uint64_t v38 = 0;
          }
          uint64_t v39 = v38 + v35;
          __v.__first_ = v38;
          __v.__begin_ = v39;
          __v.__end_cap_.__value_ = &v38[v37];
          long long v40 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
          v39->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
          memset(&v87, 0, sizeof(v87));
          __v.__end_ = v39 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v88, &__v);
          long long v41 = v88.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v88.__end_ = v41;
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v87.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v34 = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
          v88.__end_->__r_.__value_.__r.__words[2] = v87.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          v88.__end_ = v33 + 1;
        }
        v24 += 14;
      }
      while (v24 != v23);
    }
    memset(&v87, 0, sizeof(v87));
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v86, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
    }
    else {
      std::string v86 = v90;
    }
    kaldi::LevenshteinAlignmentWithPrefixOptimization<std::string>(&v89, &v88, (uint64_t)&v86, (std::vector<std::pair<std::string, std::string>> *)&v87, 0);
    long long v47 = a2;
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    std::string::size_type v83 = v87.__r_.__value_.__l.__size_;
    std::string::size_type v48 = v87.__r_.__value_.__r.__words[0];
    if (v87.__r_.__value_.__r.__words[0] != v87.__r_.__value_.__l.__size_)
    {
      int v49 = 0;
      do
      {
        uint64_t v50 = *(unsigned __int8 *)(v48 + 23);
        size_t v51 = *(void *)(v48 + 8);
        if ((v50 & 0x80u) == 0) {
          uint64_t v52 = *(unsigned __int8 *)(v48 + 23);
        }
        else {
          uint64_t v52 = *(void *)(v48 + 8);
        }
        int v53 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v54 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v54 = v90.__r_.__value_.__l.__size_;
        }
        if (v52 == v54)
        {
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v55 = &v90;
          }
          else {
            long long v55 = (std::string *)v90.__r_.__value_.__r.__words[0];
          }
          if ((v50 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v48, v55, *(void *)(v48 + 8)))
            {
LABEL_118:
              unint64_t v62 = v3[1];
              if (0x6DB6DB6DB6DB6DB7 * (((char *)v47[1] - (char *)*v47) >> 5) <= (unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v62 - *v3) >> 3))) {
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
              int v63 = (const quasar::Token *)&(*v47)[0x58469EE58469EE6 * ((uint64_t)(v62 - *v3) >> 3)];
              int v64 = *(_DWORD *)(a1 + 48);
              *(_DWORD *)(a1 + 48) = v64 + 1;
              LODWORD(__v.__first_) = v64;
              if (v62 >= v3[2])
              {
                uint64_t v66 = std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int &,int>(v3, v63, v91, (int *)&__v);
              }
              else
              {
                int v65 = v91[0];
                quasar::Token::Token((std::string *)v62, v63);
                *(_DWORD *)(v62 + 224) = v65;
                *(_DWORD *)(v62 + 228) = v64;
                uint64_t v66 = v62 + 232;
                v3[1] = v62 + 232;
              }
              v3[1] = v66;
              goto LABEL_153;
            }
          }
          else
          {
            if (!*(unsigned char *)(v48 + 23)) {
              goto LABEL_118;
            }
            uint64_t v56 = 0;
            while (*(unsigned __int8 *)(v48 + v56) == v55->__r_.__value_.__s.__data_[v56])
            {
              if (v50 == ++v56) {
                goto LABEL_118;
              }
            }
          }
        }
        uint64_t v57 = (const void **)(v48 + 24);
        uint64_t v58 = *(unsigned __int8 *)(v48 + 47);
        if ((v58 & 0x80u) == 0) {
          uint64_t v59 = *(unsigned __int8 *)(v48 + 47);
        }
        else {
          uint64_t v59 = *(void *)(v48 + 32);
        }
        if (v59 != v54) {
          goto LABEL_124;
        }
        if (v53 >= 0) {
          unint64_t v60 = &v90;
        }
        else {
          unint64_t v60 = (std::string *)v90.__r_.__value_.__r.__words[0];
        }
        if ((v58 & 0x80) != 0)
        {
          if (memcmp(*v57, v60, *(void *)(v48 + 32))) {
            goto LABEL_124;
          }
        }
        else if (*(unsigned char *)(v48 + 47))
        {
          uint64_t v61 = 0;
          while (*(unsigned __int8 *)(v48 + v61 + 24) == v60->__r_.__value_.__s.__data_[v61])
          {
            if (v58 == ++v61) {
              goto LABEL_140;
            }
          }
LABEL_124:
          if (v52 == v59)
          {
            if ((v58 & 0x80u) == 0) {
              unint64_t v67 = (unsigned __int8 *)(v48 + 24);
            }
            else {
              unint64_t v67 = (unsigned __int8 *)*v57;
            }
            if ((v50 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v48, v67, v51)) {
                goto LABEL_142;
              }
            }
            else if (v50)
            {
              uint64_t v68 = 0;
              while (*(unsigned __int8 *)(v48 + v68) == v67[v68])
              {
                if (v50 == ++v68)
                {
                  uint64_t v69 = 0;
                  do
                  {
                    BOOL v70 = *(unsigned __int8 *)(v48 + v69) != v67[v69] || v50 - 1 == v69;
                    ++v69;
                  }
                  while (!v70);
                  goto LABEL_146;
                }
              }
              goto LABEL_142;
            }
LABEL_146:
            uint64_t v76 = *(void *)(v80 - 24);
            if (0x34F72C234F72C235 * ((*(void *)(v80 - 16) - v76) >> 3) <= (unint64_t)v49) {
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v3 = a3;
            long long v47 = a2;
            unint64_t v71 = a3[1];
            if (0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 5) <= (unint64_t)(0x34F72C234F72C235
                                                                                                 * ((uint64_t)(v71 - *a3) >> 3)))
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            uint64_t v77 = (const quasar::Token *)&(*a2)[0x58469EE58469EE6 * ((uint64_t)(v71 - *a3) >> 3)];
            long long v78 = (int *)(v76 + 232 * v49 + 224);
            if (v71 >= a3[2])
            {
              uint64_t v75 = std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int const&,int const&>(a3, v77, v78, (int *)(v76 + 232 * v49 + 228));
            }
            else
            {
              uint64_t v79 = *(void *)v78;
              quasar::Token::Token((std::string *)a3[1], v77);
              *(void *)(v71 + 224) = v79;
LABEL_150:
              uint64_t v75 = v71 + 232;
              v3[1] = v71 + 232;
            }
          }
          else
          {
LABEL_142:
            uint64_t v3 = a3;
            long long v47 = a2;
            unint64_t v71 = a3[1];
            if (0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 5) <= (unint64_t)(0x34F72C234F72C235
                                                                                                 * ((uint64_t)(v71 - *a3) >> 3)))
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            long long v72 = (const quasar::Token *)&(*a2)[0x58469EE58469EE6 * ((uint64_t)(v71 - *a3) >> 3)];
            int v73 = *(_DWORD *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v73 + 1;
            LODWORD(__v.__first_) = v73;
            if (v71 < a3[2])
            {
              int v74 = v91[0];
              quasar::Token::Token((std::string *)v71, v72);
              *(_DWORD *)(v71 + 224) = v74;
              *(_DWORD *)(v71 + 228) = v73;
              goto LABEL_150;
            }
            uint64_t v75 = std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int &,int>(a3, v72, v91, (int *)&__v);
          }
          v3[1] = v75;
          ++v49;
          goto LABEL_153;
        }
LABEL_140:
        ++v49;
        uint64_t v3 = a3;
        long long v47 = a2;
LABEL_153:
        v48 += 48;
      }
      while (v48 != v83);
    }
    if (0x34F72C234F72C235 * ((v3[1] - *v3) >> 3) != 0x6DB6DB6DB6DB6DB7 * (((char *)v47[1] - (char *)*v47) >> 5))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__v);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__v, (uint64_t)"annotatedPartial.size() == partial.size()", 41);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__v);
    }
    __v.__first_ = &v87;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v88;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v89;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v42 = (const quasar::Token *)*a2;
    long long v43 = (const quasar::Token *)a2[1];
    if (*a2 != (long long *)v43)
    {
      unint64_t v44 = 0;
      do
      {
        int v45 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = v45 + 1;
        LODWORD(__v.__first_) = v45;
        if (v44 >= v3[2])
        {
          unint64_t v44 = std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int &,int>(v3, v42, v91, (int *)&__v);
        }
        else
        {
          int v46 = v91[0];
          quasar::Token::Token((std::string *)v44, v42);
          *(_DWORD *)(v44 + 224) = v46;
          *(_DWORD *)(v44 + 228) = v45;
          v44 += 232;
          v3[1] = v44;
        }
        v3[1] = v44;
        uint64_t v42 = (const quasar::Token *)((char *)v42 + 224);
      }
      while (v42 != v43);
    }
  }
}

void quasar::PartialHistory::findLastMatchingPartial(quasar::PartialHistory *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((int)(-1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3)) >= 1)
  {
    uint64_t v6 = -1431655765 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
    while (2)
    {
      uint64_t v7 = v6--;
      uint64_t v8 = (uint64_t *)(*(void *)this + 24 * v6);
      int v9 = *(_DWORD *)(*((void *)this + 3) + 4 * v6);
      unint64_t v10 = (quasar::Token *)v8[1];
      while (v10 != (quasar::Token *)*v8)
      {
        unint64_t v10 = (quasar::Token *)((char *)v10 - 232);
        if (!quasar::Token::isAutoPunctuation(v10))
        {
          if (*((_DWORD *)v10 + 57) == a2)
          {
            long long v11 = 0uLL;
            uint64_t v12 = 0;
            std::vector<quasar::PartialHistory::AnnotatedToken>::__init_with_size[abi:ne180100]<quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*>(&v11, *v8, v8[1], 0x34F72C234F72C235 * ((v8[1] - *v8) >> 3));
            int v13 = v9;
            *(_OWORD *)a3 = v11;
            *(void *)(a3 + 16) = v12;
            long long v11 = 0uLL;
            uint64_t v12 = 0;
            *(_DWORD *)(a3 + 24) = v9;
            *(unsigned char *)(a3 + 32) = 1;
            unint64_t v14 = (void **)&v11;
            std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v14);
            return;
          }
          break;
        }
      }
      if (v7 > 1) {
        continue;
      }
      break;
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 32) = 0;
}

uint64_t std::vector<quasar::Token>::emplace_back<quasar::Token&>(uint64_t *a1, const quasar::Token *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v4 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>(a1, a2);
  }
  else
  {
    quasar::Token::Token((std::string *)a1[1], a2);
    uint64_t v4 = v3 + 224;
    a1[1] = v3 + 224;
  }
  a1[1] = v4;
  return v4 - 224;
}

void sub_1B21E2EA8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t kaldi::LevenshteinAlignmentWithPrefixOptimization<std::string>(void *a1, void *a2, uint64_t a3, std::vector<std::pair<std::string, std::string>> *a4, int a5)
{
  uint64_t v5 = a4;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((a2[1] - *a2) / 24 >= (unint64_t)((a1[1] - *a1) / 24)) {
    uint64_t v9 = (a1[1] - *a1) / 24;
  }
  else {
    uint64_t v9 = (a2[1] - *a2) / 24;
  }
  unint64_t v36 = 0;
  unint64_t v37 = 0;
  unint64_t v38 = 0;
  if ((int)v9 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    int v26 = a5;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= v11
        || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v11)
      {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v12 = *a1 + 24 * v11;
      uint64_t v13 = *a2 + 24 * v11;
      uint64_t v14 = *(unsigned __int8 *)(v12 + 23);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        uint64_t v15 = *(void *)(v12 + 8);
      }
      uint64_t v16 = *(unsigned __int8 *)(v13 + 23);
      int v17 = (char)v16;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *(void *)(v13 + 8);
      }
      if (v15 != v16) {
        break;
      }
      if (v17 >= 0) {
        unint64_t v18 = (unsigned __int8 *)(*a2 + 24 * v11);
      }
      else {
        unint64_t v18 = *(unsigned __int8 **)v13;
      }
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v12, v18, *(void *)(v12 + 8))) {
          break;
        }
      }
      else if (*(unsigned char *)(v12 + 23))
      {
        long long v19 = (unsigned __int8 *)(*a1 + 24 * v11);
        while (*v19 == *v18)
        {
          ++v19;
          ++v18;
          if (!--v14) {
            goto LABEL_24;
          }
        }
        break;
      }
LABEL_24:
      if ((unint64_t)v10 >= v38)
      {
        unint64_t v10 = (std::string *)std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string const&,std::string const&>((uint64_t *)&v36, (long long *)v12, (long long *)v12);
      }
      else
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(v10, (long long *)v12, (long long *)v12);
        v10 += 2;
      }
      unint64_t v37 = (long long *)v10;
      if (++v11 == v9)
      {
        LODWORD(v11) = v9;
        break;
      }
    }
    uint64_t v5 = a4;
    a5 = v26;
  }
  std::vector<std::string>::pointer v33 = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  if (a5) {
    __src.__r_.__value_.__r.__words[0] = 0x200000001;
  }
  else {
    __src.__r_.__value_.__r.__words[0] = 0x100000002;
  }
  LODWORD(__src.__r_.__value_.__r.__words[1]) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v33, (char *)&__src, (uint64_t)&__src.__r_.__value_.__r.__words[1] + 4, 3uLL);
  uint64_t v20 = (long long *)a1[1];
  long long v21 = (long long *)(*a1 + 24 * v11);
  memset(&__src, 0, sizeof(__src));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&__src, v21, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v21) >> 3));
  char v22 = (long long *)a2[1];
  uint64_t v23 = (long long *)(*a2 + 24 * v11);
  memset(&v32, 0, sizeof(v32));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v32, v23, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v23) >> 3));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v31 = *(std::string *)a3;
  }
  long long __p = 0;
  __int16 v29 = 0;
  uint64_t v30 = 0;
  std::vector<kaldi::LevenshteinOp::Value>::__init_with_size[abi:ne180100]<kaldi::LevenshteinOp::Value*,kaldi::LevenshteinOp::Value*>(&__p, v33, (uint64_t)v34, (v34 - (unsigned char *)v33) >> 2);
  uint64_t v24 = kaldi::LevenshteinAlignment<std::string>((uint64_t *)&__src, &v32, &v31, v5, (char *)&__p);
  if (__p)
  {
    __int16 v29 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  uint64_t v39 = &v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  std::vector<std::pair<std::string,std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string>*>,std::__wrap_iter<std::pair<std::string,std::string>*>>(v5, v5->__begin_, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 4));
  if (v33)
  {
    long long v34 = v33;
    operator delete(v33);
  }
  std::vector<std::string>::pointer v33 = &v36;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  return v24;
}

void sub_1B21E325C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char *__p,char *a25,uint64_t a26,char a27,uint64_t a28)
{
  *(void *)(v28 - 128) = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 128));
  a21 = v28 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (__p)
  {
    a25 = __p;
    operator delete(__p);
  }
  long long __p = &a27;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int &,int>(uint64_t *a1, const quasar::Token *a2, int *a3, int *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x34F72C234F72C235 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x8D3DCB08D3DCB0) {
    unint64_t v13 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v24 = a1 + 2;
  if (v13) {
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v11, v13);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v20 = v14;
  long long v21 = (std::string *)&v14[232 * v6];
  char v22 = v21;
  uint64_t v23 = &v14[232 * v13];
  int v15 = *a3;
  int v16 = *a4;
  quasar::Token::Token(v21, a2);
  int v17 = v21;
  LODWORD(v21[9].__r_.__value_.__r.__words[1]) = v15;
  HIDWORD(v17[9].__r_.__value_.__r.__words[1]) = v16;
  char v22 = (std::string *)((char *)v22 + 232);
  std::vector<quasar::PartialHistory::AnnotatedToken>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1B21E343C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::PartialHistory::AnnotatedToken>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (long long *)*a1)
  {
    do
    {
      v6 -= 232;
      uint64_t v4 = (long long *)((char *)v4 - 232);
      std::allocator<quasar::PartialHistory::AnnotatedToken>::construct[abi:ne180100]<quasar::PartialHistory::AnnotatedToken,quasar::PartialHistory::AnnotatedToken>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::allocator<quasar::PartialHistory::AnnotatedToken>::construct[abi:ne180100]<quasar::PartialHistory::AnnotatedToken,quasar::PartialHistory::AnnotatedToken>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 38) = *(void *)((char *)a3 + 38);
  *(_OWORD *)(a2 + 24) = v4;
  long long v5 = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)a3 + 11) = 0;
  long long v6 = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *(_OWORD *)(a2 + 96) = v6;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 12) = 0;
  *(void *)(a2 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  long long v7 = a3[9];
  *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a3 + 20);
  *(_OWORD *)(a2 + 144) = v7;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)a3 + 18) = 0;
  int v8 = *((_DWORD *)a3 + 42);
  *(_WORD *)(a2 + 172) = *((_WORD *)a3 + 86);
  *(_DWORD *)(a2 + 168) = v8;
  long long v9 = a3[11];
  *(void *)(a2 + 192) = *((void *)a3 + 24);
  *(_OWORD *)(a2 + 176) = v9;
  *((void *)a3 + 23) = 0;
  *((void *)a3 + 24) = 0;
  *((void *)a3 + 22) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 200);
  *(_DWORD *)(a2 + 216) = *((_DWORD *)a3 + 54);
  *(__n128 *)(a2 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = result;
  *(void *)(a2 + 224) = *((void *)a3 + 28);
  return result;
}

uint64_t std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 232;
    quasar::Token::~Token((void **)(i - 232));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t kaldi::LevenshteinAlignment<std::string>(uint64_t *a1, void *a2, const std::string *a3, std::vector<std::pair<std::string, std::string>> *a4, char *a5)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  long long v9 = *(int **)a5;
  unint64_t v10 = (unsigned int *)*((void *)a5 + 1);
  if (*(unsigned int **)a5 == v10)
  {
    __src.__r_.__value_.__r.__words[0] = 0x100000000;
    LODWORD(__src.__r_.__value_.__r.__words[1]) = 2;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, (char *)&__src, (uint64_t)&__src.__r_.__value_.__r.__words[1] + 4, 3uLL);
    long long v9 = *(int **)a5;
    unint64_t v10 = (unsigned int *)*((void *)a5 + 1);
  }
  if (v9 == (int *)v10) {
    goto LABEL_124;
  }
  int v11 = 0;
  int v12 = 0;
  int v13 = 0;
  do
  {
    int v14 = *v9;
    if (*v9 == 2)
    {
      ++v13;
    }
    else if (v14 == 1)
    {
      ++v12;
    }
    else
    {
      if (v14)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "Unexpected op in backtrace_precedence");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      ++v11;
    }
    ++v9;
  }
  while (v9 != (int *)v10);
  if (v11 != 1 || v12 != 1 || v13 != 1)
  {
LABEL_124:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "numSubOrOk == 1 && numDel == 1 && numIns == 1");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  std::vector<std::string>::pointer begin = a4->__begin_;
  uint64_t end = (uint64_t)a4->__end_;
  if ((std::vector<std::pair<std::string, std::string>>::pointer)end != a4->__begin_)
  {
    do
    {
      end -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&a4->__end_cap_, end);
    }
    while ((std::pair<std::string, std::string> *)end != begin);
  }
  a4->__end_ = begin;
  uint64_t v18 = *a1;
  uint64_t v17 = a1[1];
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a1) >> 3);
  uint64_t v20 = *a2;
  uint64_t v21 = a2[1];
  unint64_t v118 = v19 + 1;
  std::vector<std::vector<int>>::vector(v122, v19 + 1);
  unint64_t v108 = v19;
  uint64_t v109 = a4;
  char v22 = (unsigned int **)a5;
  uint64_t v23 = a3;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  uint64_t v117 = v21;
  uint64_t v111 = (v21 - v20) / 24;
  std::vector<unsigned int>::size_type v26 = v111 + 1;
  do
  {
    std::vector<int>::resize((std::vector<unsigned int> *)(v122[0] + v24), v26);
    ++v25;
    v24 += 24;
  }
  while (v25 <= v19);
  unint64_t v105 = v19;
  long long v110 = a2;
  uint64_t v107 = v23;
  int64_t v112 = v22;
  uint64_t v27 = 0;
  uint64_t v116 = v122[0];
  uint64_t v28 = *(int **)v122[0];
  if (v26 <= 1) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v111 + 1;
  }
  do
  {
    v28[v27] = v27;
    ++v27;
  }
  while (v29 != v27);
  uint64_t v106 = v18;
  uint64_t v30 = v20;
  if (v17 != v18)
  {
    uint64_t v113 = *a1;
    uint64_t v31 = *a2;
    uint64_t v32 = 2;
    if (v26 <= 2) {
      std::vector<unsigned int>::size_type v26 = 2;
    }
    if (v118 > 2) {
      uint64_t v32 = v118;
    }
    uint64_t v115 = v32;
    int v119 = *v28;
    for (uint64_t i = 1; i != v115; ++i)
    {
      long long v34 = *(int **)(v116 + 24 * i);
      *long long v34 = ++v119;
      if (v117 != v30)
      {
        int v35 = v119;
        for (uint64_t j = 1; j != v26; ++j)
        {
          int v37 = v28[j - 1];
          unint64_t v38 = (unsigned __int8 **)(v31 + 24 * (j - 1));
          uint64_t v39 = *(unsigned __int8 *)(v113 + 24 * i - 1);
          if ((v39 & 0x80u) == 0) {
            long long v40 = (unsigned __int8 *)*(unsigned __int8 *)(v113 + 24 * i - 1);
          }
          else {
            long long v40 = *(unsigned __int8 **)(v113 + 24 * i - 16);
          }
          uint64_t v41 = (unsigned __int8 *)*((unsigned __int8 *)v38 + 23);
          int v42 = (char)v41;
          if ((char)v41 < 0) {
            uint64_t v41 = v38[1];
          }
          if (v40 == v41)
          {
            if (v42 >= 0) {
              long long v43 = (unsigned __int8 *)(v31 + 24 * (j - 1));
            }
            else {
              long long v43 = *v38;
            }
            if ((v39 & 0x80) != 0)
            {
              BOOL v53 = memcmp(*(const void **)(v113 + 24 * i - 24), v43, *(void *)(v113 + 24 * i - 16)) == 0;
            }
            else if (*(unsigned char *)(v113 + 24 * i - 1))
            {
              uint64_t v44 = v39 - 1;
              int v45 = (unsigned __int8 *)(v113 + 24 * i - 24);
              do
              {
                int v47 = *v45++;
                int v46 = v47;
                int v49 = *v43++;
                int v48 = v49;
                BOOL v50 = v44-- != 0;
                char v51 = v50;
                BOOL v52 = v46 == v48;
                BOOL v53 = v46 == v48;
              }
              while (v52 && (v51 & 1) != 0);
            }
            else
            {
              BOOL v53 = 1;
            }
          }
          else
          {
            BOOL v53 = 0;
          }
          int v54 = v37 + !v53;
          int v55 = v28[j];
          if (v35 < v55) {
            int v55 = v35;
          }
          if (v55 + 1 < v54) {
            int v35 = v55 + 1;
          }
          else {
            int v35 = v54;
          }
          v34[j] = v35;
        }
      }
      uint64_t v28 = v34;
      uint64_t v30 = v20;
    }
  }
  if (v17 != v106)
  {
    uint64_t v57 = v110;
    uint64_t v56 = v111;
    unint64_t v58 = v108;
    uint64_t v59 = v109;
    unint64_t v60 = v107;
    if (!v108) {
      goto LABEL_83;
    }
    goto LABEL_63;
  }
  uint64_t v57 = v110;
  uint64_t v56 = v111;
  unint64_t v58 = v108;
  uint64_t v59 = v109;
  unint64_t v60 = v107;
  if (v117 != v30)
  {
    do
    {
      if (!v58)
      {
LABEL_83:
        unint64_t v62 = 0;
        uint64_t v81 = v56 - 1;
        goto LABEL_101;
      }
LABEL_63:
      if (!v56)
      {
        uint64_t v81 = 0;
        unint64_t v62 = v58 - 1;
        memset(&v121, 0, sizeof(v121));
        memset(&v120, 0, sizeof(v120));
LABEL_102:
        std::vector<std::string> v89 = (const std::string *)(*a1 + 24 * v62);
        unint64_t v58 = v62;
        goto LABEL_103;
      }
      unint64_t v61 = v58;
      unint64_t v62 = v58 - 1;
      uint64_t v63 = v122[0];
      uint64_t v64 = 3 * (v58 - 1);
      uint64_t v65 = *(void *)(v122[0] + 24 * (v58 - 1));
      int v66 = *(_DWORD *)(v65 + 4 * (v56 - 1));
      unint64_t v67 = (unsigned __int8 *)(*a1 + 8 * v64);
      uint64_t v68 = *v57 + 24 * (v56 - 1);
      uint64_t v69 = v67[23];
      if ((v69 & 0x80u) == 0) {
        uint64_t v70 = v67[23];
      }
      else {
        uint64_t v70 = *((void *)v67 + 1);
      }
      uint64_t v71 = *(unsigned __int8 *)(v68 + 23);
      int v72 = (char)v71;
      if ((v71 & 0x80u) != 0) {
        uint64_t v71 = *(void *)(v68 + 8);
      }
      if (v70 == v71)
      {
        if (v72 >= 0) {
          int v73 = (unsigned __int8 *)(*v57 + 24 * (v56 - 1));
        }
        else {
          int v73 = *(unsigned __int8 **)v68;
        }
        if ((v69 & 0x80) != 0)
        {
          BOOL v80 = memcmp(*(const void **)v67, v73, *((void *)v67 + 1)) == 0;
        }
        else if (v67[23])
        {
          uint64_t v74 = v69 - 1;
          do
          {
            int v76 = *v67++;
            int v75 = v76;
            int v78 = *v73++;
            int v77 = v78;
            BOOL v50 = v74-- != 0;
            char v79 = v50;
            BOOL v52 = v75 == v77;
            BOOL v80 = v75 == v77;
          }
          while (v52 && (v79 & 1) != 0);
        }
        else
        {
          BOOL v80 = 1;
        }
      }
      else
      {
        BOOL v80 = 0;
      }
      int v82 = v66 + !v80;
      LODWORD(__src.__r_.__value_.__l.__data_) = v82;
      int v83 = *(_DWORD *)(v65 + 4 * v56);
      HIDWORD(__src.__r_.__value_.__r.__words[0]) = v83 + 1;
      unint64_t v58 = v61;
      int v84 = *(_DWORD *)(*(void *)(v63 + 24 * v61) + 4 * (v56 - 1));
      LODWORD(__src.__r_.__value_.__r.__words[1]) = v84 + 1;
      if (v84 >= v83) {
        int v85 = v83 + 1;
      }
      else {
        int v85 = v84 + 1;
      }
      if (v85 < v82) {
        int v82 = v85;
      }
      std::string v86 = *v112;
      std::string v87 = v112[1];
      if (*v112 == v87)
      {
LABEL_96:
        unint64_t v62 = 0;
        uint64_t v81 = 0;
        goto LABEL_101;
      }
      while (1)
      {
        uint64_t v88 = *v86;
        if (*((_DWORD *)&__src.__r_.__value_.__l.__data_ + v88) == v82) {
          break;
        }
        if (++v86 == v87) {
          goto LABEL_96;
        }
      }
      if (v88)
      {
        uint64_t v81 = v56;
        if (v88 == 1) {
          goto LABEL_101;
        }
        unint64_t v62 = v61;
      }
      uint64_t v81 = v56 - 1;
LABEL_101:
      memset(&v121, 0, sizeof(v121));
      memset(&v120, 0, sizeof(v120));
      std::vector<std::string> v89 = v60;
      if (v62 != v58) {
        goto LABEL_102;
      }
LABEL_103:
      std::string::operator=(&v121, v89);
      if (v81 == v56) {
        std::string v90 = v60;
      }
      else {
        std::string v90 = (const std::string *)(*v57 + 24 * v81);
      }
      std::string::operator=(&v120, v90);
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&__src, (long long *)&v121, (long long *)&v120);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v59, (long long *)&__src);
      if (v125 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__src.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v121.__r_.__value_.__l.__data_);
      }
      uint64_t v56 = v81;
    }
    while (v58 | v81);
  }
  unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)v59->__end_ - (char *)v59->__begin_) >> 4);
  if (v91 >= 2)
  {
    uint64_t v92 = 0;
    uint64_t v93 = v91 >> 1;
    if (v91 >> 1 <= 1) {
      uint64_t v93 = 1;
    }
    uint64_t v94 = 16 * (((char *)v59->__end_ - (char *)v59->__begin_) >> 4);
    do
    {
      BOOL v95 = &v59->__begin_[v92];
      long long v96 = (char *)v59->__begin_ + v94;
      std::string::size_type v97 = v95->first.__r_.__value_.__r.__words[2];
      long long v98 = *(_OWORD *)&v95->first.__r_.__value_.__l.__data_;
      std::string::size_type v99 = *((void *)v96 - 4);
      *(_OWORD *)&v95->first.__r_.__value_.__l.__data_ = *((_OWORD *)v96 - 3);
      v95->first.__r_.__value_.__r.__words[2] = v99;
      *((_OWORD *)v96 - 3) = v98;
      *((void *)v96 - 4) = v97;
      std::string::size_type v100 = v95->second.__r_.__value_.__r.__words[2];
      long long v101 = *(_OWORD *)&v95->second.__r_.__value_.__l.__data_;
      std::string::size_type v102 = *((void *)v96 - 1);
      *(_OWORD *)&v95->second.__r_.__value_.__l.__data_ = *(_OWORD *)(v96 - 24);
      v95->second.__r_.__value_.__r.__words[2] = v102;
      *(_OWORD *)(v96 - 24) = v101;
      *((void *)v96 - 1) = v100;
      ++v92;
      v94 -= 48;
      --v93;
    }
    while (v93);
  }
  uint64_t v103 = *(unsigned int *)(*(void *)(v122[0] + 24 * v105) + 4 * v111);
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
  return v103;
}

void sub_1B21E3D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::string,std::string>>::__emplace_back_slow_path<std::string const&,std::string const&>(uint64_t *a1, long long *a2, long long *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 4);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v11 = 0x555555555555555;
  }
  else {
    unint64_t v11 = v6;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v11) {
    int v12 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v9, v11);
  }
  else {
    int v12 = 0;
  }
  __v.__first_ = v12;
  __v.__begin_ = v12 + v5;
  __v.__end_cap_.__value_ = &v12[v11];
  std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&__v.__begin_->first, a2, a3);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer((std::vector<std::pair<std::string, std::string>> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  return v13;
}

void sub_1B21E3EBC(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::pair<std::string, std::string> *std::vector<std::pair<std::string,std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<std::string,std::string>*>,std::__wrap_iter<std::pair<std::string,std::string>*>>(std::vector<std::pair<std::string, std::string>> *a1, std::pair<std::string, std::string> *a2, std::string *a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    long long v7 = a3;
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
    unint64_t v10 = value;
    int v12 = (std::pair<std::string, std::string> *)*((void *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 4)) >= a5)
    {
      uint64_t v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 4)) >= a5)
      {
        uint64_t v21 = (long long *)&a3[2 * a5];
      }
      else
      {
        uint64_t v21 = (long long *)((char *)a3 + 16 * (((char *)v12 - (char *)a2) >> 4));
        a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::pair<std::string,std::string>>::__move_range(a1, v5, v12, &v5[a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>((int)&__v, v7, (std::string *)v21, &v5->first);
    }
    else
    {
      std::vector<std::pair<std::string, std::string>>::pointer begin = a1->__begin_;
      unint64_t v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 4);
      if (v14 > 0x555555555555555) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 4);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 4);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18) {
        unint64_t v19 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      char v22 = v19 + v15;
      __v.__first_ = v19;
      __v.__begin_ = v22;
      __v.__end_ = v22;
      __v.__end_cap_.__value_ = &v19[v18];
      uint64_t v23 = 3 * a5;
      uint64_t v24 = &v22[a5];
      uint64_t v25 = 16 * v23;
      do
      {
        std::pair<std::string,std::string>::pair[abi:ne180100](&v22->first, (long long *)v7);
        ++v22;
        v7 += 2;
        v25 -= 48;
      }
      while (v25);
      __v.__end_ = v24;
      unint64_t v5 = std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
    }
  }
  return v5;
}

void sub_1B21E4094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__move_range(std::vector<std::pair<std::string, std::string>> *this, std::vector<std::pair<std::string, std::string>>::pointer __from_s, std::vector<std::pair<std::string, std::string>>::pointer __from_e, std::vector<std::pair<std::string, std::string>>::pointer __to)
{
  std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
  long long v7 = (long long *)((char *)__from_s + (char *)end - (char *)__to);
  std::vector<std::pair<std::string, std::string>>::pointer v8 = end;
  if (v7 < (long long *)__from_e)
  {
    unint64_t v9 = (unint64_t)v7;
    std::vector<std::pair<std::string, std::string>>::pointer v8 = this->__end_;
    do
    {
      long long v10 = *(_OWORD *)v9;
      v8->first.__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
      *(_OWORD *)&v8->first.__r_.__value_.__l.__data_ = v10;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      long long v11 = *(_OWORD *)(v9 + 24);
      v8->second.__r_.__value_.__r.__words[2] = *(void *)(v9 + 40);
      *(_OWORD *)&v8->second.__r_.__value_.__l.__data_ = v11;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v9 + 24) = 0;
      ++v8;
      v9 += 48;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,0>((long long *)__from_s, v7, (uint64_t)end);
}

std::vector<std::pair<std::string, std::string>>::pointer std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v, std::vector<std::pair<std::string, std::string>>::pointer __p)
{
  std::vector<std::pair<std::string, std::string>>::pointer begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (long long *)__p, (long long *)this->__end_, (uint64_t)__v->__end_);
  unint64_t v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,0>(long long *a1, long long *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    unint64_t v6 = a2;
    do
    {
      v6 -= 3;
      a3 -= 48;
      std::pair<std::string,std::string>::operator=[abi:ne180100](a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      long long v6 = *(long long *)((char *)a2 + 24);
      *(void *)(v4 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 5);
      *(_OWORD *)(v4 + 24) = v6;
      *((void *)a2 + 4) = 0;
      *((void *)a2 + 5) = 0;
      *((void *)a2 + 3) = 0;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v11 = v4;
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

uint64_t std::vector<quasar::PartialHistory::AnnotatedToken>::__emplace_back_slow_path<quasar::Token const&,int const&,int const&>(uint64_t *a1, const quasar::Token *a2, int *a3, int *a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x11A7B9611A7B961) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x34F72C234F72C235 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x8D3DCB08D3DCB0) {
    unint64_t v13 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v24 = a1 + 2;
  if (v13) {
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::Parse>>(v11, v13);
  }
  else {
    unint64_t v14 = 0;
  }
  uint64_t v20 = v14;
  uint64_t v21 = (std::string *)&v14[232 * v6];
  char v22 = v21;
  uint64_t v23 = &v14[232 * v13];
  int v15 = *a3;
  int v16 = *a4;
  quasar::Token::Token(v21, a2);
  uint64_t v17 = v21;
  LODWORD(v21[9].__r_.__value_.__r.__words[1]) = v15;
  HIDWORD(v17[9].__r_.__value_.__r.__words[1]) = v16;
  char v22 = (std::string *)((char *)v22 + 232);
  std::vector<quasar::PartialHistory::AnnotatedToken>::__swap_out_circular_buffer(a1, &v20);
  uint64_t v18 = a1[1];
  std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1B21E4418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::PartialHistory::AnnotatedToken>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<quasar::PartialHistory::AnnotatedToken>::__init_with_size[abi:ne180100]<quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::corrective_reranking::Parse>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PartialHistory::AnnotatedToken>,quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B21E4494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::PartialHistory::AnnotatedToken>,quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*,quasar::PartialHistory::AnnotatedToken*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::Token::Token((std::string *)(a4 + v7), (const quasar::Token *)(a2 + v7))[9].__r_.__value_.__l.__size_ = *(void *)(a2 + v7 + 224);
      v7 += 232;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B21E4528(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 232;
    do
    {
      quasar::Token::~Token((void **)(v4 + v2));
      v2 -= 232;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::emplace_back<std::vector<quasar::PartialHistory::AnnotatedToken>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    unint64_t v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    uint64_t v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v17[2] = v14 + 24;
    std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__swap_out_circular_buffer(a1, v17);
    std::vector<std::pair<std::string, std::string>>::pointer v8 = (void *)a1[1];
    std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::~__split_buffer(v17);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::vector<std::pair<std::string, std::string>>::pointer v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1B21E467C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::PartialHistory::AnnotatedToken>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::PartialHistory::AnnotatedToken>>,std::reverse_iterator<std::vector<quasar::PartialHistory::AnnotatedToken>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<quasar::PartialHistory::AnnotatedToken>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<quasar::PartialHistory::AnnotatedToken>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

long long *std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>(uint64_t *a1, long long *a2, const quasar::Token *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v11 - v12) >> 5) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)a2) >> 5) >= a5)
      {
        uint64_t v21 = (uint64_t)a3 + 224 * a5;
      }
      else
      {
        uint64_t v21 = (uint64_t)a3 + 32 * ((uint64_t)(v12 - (void)a2) >> 5);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<quasar::Token>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[14 * a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((uint64_t)v7, v21, (uint64_t)v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *a1) >> 5);
      if (v14 > 0x124924924924924) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v13) >> 5);
      unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v10 - v13) >> 5);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x92492492492492) {
        unint64_t v18 = 0x124924924924924;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      char v22 = (std::string *)&v19[224 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = &v19[224 * v18];
      uint64_t v23 = 224 * a5;
      uint64_t v24 = (std::string *)((char *)v22 + 224 * a5);
      do
      {
        quasar::Token::Token(v22, v7);
        char v22 = (std::string *)((char *)v22 + 224);
        uint64_t v7 = (const quasar::Token *)((char *)v7 + 224);
        v23 -= 224;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = (long long *)std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v26);
    }
  }
  return v5;
}

void sub_1B21E4A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token>&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B21E4B24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::Token>>::__emplace_back_slow_path<std::vector<quasar::Token>&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v15 += 24;
  std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v14);
  return v12;
}

void sub_1B21E4C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token const&>(uint64_t *a1, const quasar::Token *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492) {
    unint64_t v9 = 0x124924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = (std::string *)&v10[224 * v4];
  unint64_t v16 = &v10[224 * v9];
  quasar::Token::Token(v14, a2);
  uint64_t v15 = &v14[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1B21E4D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,int>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_1B21E4DDC(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string const*,std::__list_iterator<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,void *>,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::PointerHasher,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>>::PointerPred,std::allocator<std::pair<std::string const* const,std::__list_iterator<std::pair<std::string,std::vector<quasar::result_handler::CommandInterpretation>>,void *>>>>::unordered_map(uint64_t a1, size_t a2, char *a3, char *a4)
{
  char v5 = *a3;
  char v6 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *(unsigned char *)(a1 + 44) = v6;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B21E4E38(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (std::locale **)*a1;
  if (*v2)
  {
    std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, std::locale *a2)
{
  for (uint64_t i = *(std::locale **)(a1 + 8); i != a2; std::locale::~locale(i))
  {
    locale = (std::__shared_weak_count *)i[-3].__locale_;
    if (locale) {
      std::__shared_weak_count::__release_shared[abi:ne180100](locale);
    }
    i -= 9;
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__emplace_back_slow_path<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1C71C71C71C71C7) {
    unint64_t v9 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v14[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[72 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v14[3] = &v10[72 * v9];
  std::locale::locale((std::locale *)v11, (const std::locale *)a2);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  *((_DWORD *)v11 + 16) = *(_DWORD *)(a2 + 64);
  uint64_t v14[2] = v11 + 72;
  std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B21E5030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      std::locale::locale((std::locale *)(v7 - 72), (const std::locale *)(v9 - 72));
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(v9 - 64);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(v9 - 48);
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(v9 - 32);
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v7 - 16) = *(void *)(v9 - 16);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
      v9 -= 72;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(std::locale **)(a2 + 32); i != *(std::locale **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    locale = (std::__shared_weak_count *)i[6].__locale_;
    if (locale) {
      std::__shared_weak_count::__release_shared[abi:ne180100](locale);
    }
    std::locale::~locale(i);
    uint64_t i = (std::locale *)(*(void *)(a2 + 32) + 72);
  }
}

uint64_t std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (std::locale *)(i - 72);
    *(void *)(a1 + 16) = i - 72;
    uint64_t v6 = *(std::__shared_weak_count **)(i - 24);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    std::locale::~locale(v5);
  }
}

void std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A1CD20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1CD20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return quasar::result_handler::VoiceEditingResultHandler::finishHandling(*(quasar::result_handler::VoiceEditingResultHandler **)(a1 + 8));
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleRecogProgress(int)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A1CCC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1CCC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return quasar::result_handler::VoiceEditingResultHandler::finishHandling(*(quasar::result_handler::VoiceEditingResultHandler **)(a1 + 8));
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handlePartial(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target_type()
{
}

void std::vector<quasar::result_handler::CommandData>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 184;
        std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::vector<quasar::result_handler::CommandData>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<quasar::result_handler::CommandData>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B21E55DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::result_handler::CommandData>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1642C8590B21643) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[184 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::result_handler::CommandData::CommandData(v4, v6);
      v6 += 184;
      uint64_t v4 = v11 + 184;
      v11 += 184;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B21E56E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 184;
      std::allocator<quasar::result_handler::CommandData>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A1CD78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1CD78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return quasar::result_handler::VoiceEditingResultHandler::finishHandling(*(quasar::result_handler::VoiceEditingResultHandler **)(a1 + 8));
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleCommandCandidate(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target_type()
{
}

void std::__optional_storage_base<quasar::result_handler::CommandData,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<quasar::result_handler::CommandData,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 184) == *(unsigned __int8 *)(a2 + 184))
  {
    if (*(unsigned char *)(a1 + 184))
    {
      quasar::result_handler::CommandData::operator=(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 184))
  {
    std::__optional_destruct_base<quasar::result_handler::CommandData,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::__construct_at[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData,quasar::result_handler::CommandData*>(a1, a2);
    *(unsigned char *)(a1 + 184) = 1;
  }
}

void std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A1CC70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A1CC70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return quasar::result_handler::VoiceEditingResultHandler::finishHandling(*(quasar::result_handler::VoiceEditingResultHandler **)(a1 + 8));
}

uint64_t std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0,std::allocator<quasar::result_handler::VoiceEditingResultHandler::handleFinal(int,std::unique_ptr<quasar::result_handler::Package>)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::vector<quasar::result_handler::CommandData>::__emplace_back_slow_path<quasar::result_handler::CommandData const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1642C8590B21642) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xD37A6F4DE9BD37A7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xB21642C8590B21) {
    unint64_t v9 = 0x1642C8590B21642;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  uint64_t v14 = &v10[184 * v4];
  uint64_t v16 = &v10[184 * v9];
  quasar::result_handler::CommandData::CommandData((uint64_t)v14, a2);
  uint64_t v15 = v14 + 184;
  std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(&v13);
  return v11;
}

void sub_1B21E5AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::result_handler::CommandData const*>,std::__wrap_iter<quasar::result_handler::CommandData const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xD37A6F4DE9BD37A7 * ((uint64_t)(v12 - a2) >> 3)) >= a5)
      {
        uint64_t v21 = a3 + 184 * a5;
      }
      else
      {
        uint64_t v21 = a3 + 8 * ((uint64_t)(v12 - a2) >> 3);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData const*,quasar::result_handler::CommandData const*,quasar::result_handler::CommandData*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<quasar::result_handler::CommandData>::__move_range((uint64_t)a1, v5, v12, v5 + 184 * a5);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::result_handler::CommandData const*>,std::__wrap_iter<quasar::result_handler::CommandData const*>,quasar::result_handler::CommandData*,0>(v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x2C8590B21642C859 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x1642C8590B21642) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xD37A6F4DE9BD37A7 * ((a2 - v13) >> 3);
      unint64_t v16 = 0xD37A6F4DE9BD37A7 * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0xB21642C8590B21) {
        unint64_t v18 = 0x1642C8590B21642;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v29 = v9;
      if (v18) {
        unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>>(v9, v18);
      }
      else {
        unint64_t v19 = 0;
      }
      char v22 = &v19[184 * v15];
      v26[0] = v19;
      v26[1] = v22;
      uint64_t v27 = v22;
      uint64_t v28 = &v19[184 * v18];
      uint64_t v23 = 184 * a5;
      uint64_t v24 = &v22[184 * a5];
      do
      {
        quasar::result_handler::CommandData::CommandData((uint64_t)v22, v7);
        v22 += 184;
        v7 += 184;
        v23 -= 184;
      }
      while (v23);
      uint64_t v27 = v24;
      uint64_t v5 = std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<quasar::result_handler::CommandData>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_1B21E5CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>(a1 + 16, v8, v10);
      v10 += 184;
      v8 += 184;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::result_handler::CommandData *,quasar::result_handler::CommandData *,quasar::result_handler::CommandData *,0>(a2, v7, v6);
}

uint64_t std::vector<quasar::result_handler::CommandData>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>,std::reverse_iterator<quasar::result_handler::CommandData*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData const*,quasar::result_handler::CommandData const*,quasar::result_handler::CommandData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      quasar::result_handler::CommandData::CommandData(v4, v6);
      v6 += 184;
      uint64_t v4 = v11 + 184;
      v11 += 184;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B21E5EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,quasar::result_handler::CommandData *,quasar::result_handler::CommandData *,quasar::result_handler::CommandData *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      v6 -= 184;
      a3 -= 184;
      quasar::result_handler::CommandData::operator=(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<quasar::result_handler::CommandData const*>,std::__wrap_iter<quasar::result_handler::CommandData const*>,quasar::result_handler::CommandData*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::result_handler::CommandData::operator=(a3, v4);
      v4 += 184;
      a3 += 184;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<quasar::result_handler::CommandData>::construct[abi:ne180100]<quasar::result_handler::CommandData,quasar::result_handler::CommandData>(a1, v4, v6);
      v6 += 184;
      uint64_t v4 = v12 + 184;
      v12 += 184;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::result_handler::CommandData>,quasar::result_handler::CommandData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

quasar::result_handler::Package *quasar::result_handler::Package::Package(quasar::result_handler::Package *this, const quasar::result_handler::Package *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(this, *(uint64_t **)a2, *((uint64_t **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 3));
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)this + 3, *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((void *)this + 6, *((uint64_t **)a2 + 6), *((uint64_t **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
  uint64_t v4 = *((void *)a2 + 9);
  __int16 v5 = *((_WORD *)a2 + 40);
  *((void *)this + 11) = 0;
  *((_WORD *)this + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v5;
  *((void *)this + 9) = v4;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 11, *((const void **)a2 + 11), *((void *)a2 + 12), (uint64_t)(*((void *)a2 + 12) - *((void *)a2 + 11)) >> 2);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 14, *((const void **)a2 + 14), *((void *)a2 + 15), (uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 2);
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 17, *((const void **)a2 + 17), *((void *)a2 + 18), (uint64_t)(*((void *)a2 + 18) - *((void *)a2 + 17)) >> 2);
  *((void *)this + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  std::vector<quasar::result_handler::CommandData>::__init_with_size[abi:ne180100]<quasar::result_handler::CommandData*,quasar::result_handler::CommandData*>((void *)this + 20, *((void *)a2 + 20), *((void *)a2 + 21), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 3));
  std::__optional_copy_base<quasar::result_handler::CommandData,false>::__optional_copy_base[abi:ne180100]((unsigned char *)this + 184, (uint64_t)a2 + 184);
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 49) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((void *)this + 47, *((void *)a2 + 47), *((void *)a2 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 48) - *((void *)a2 + 47)) >> 5));
  *((void *)this + 5std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + 52) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((void *)this + 50, *((void *)a2 + 50), *((void *)a2 + 51), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 51) - *((void *)a2 + 50)) >> 5));
  *((unsigned char *)this + 424) = *((unsigned char *)a2 + 424);
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 54) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((void *)this + 54, *((void *)a2 + 54), *((void *)a2 + 55), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 55) - *((void *)a2 + 54)) >> 5));
  long long v6 = *(_OWORD *)((char *)a2 + 456);
  long long v7 = *(_OWORD *)((char *)a2 + 472);
  *((void *)this + 61) = *((void *)a2 + 61);
  *(_OWORD *)((char *)this + 456) = v6;
  *(_OWORD *)((char *)this + 472) = v7;
  return this;
}

void sub_1B21E6264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100](a10);
  std::vector<quasar::result_handler::CommandData>::__destroy_vector::operator()[abi:ne180100](&a12);
  uint64_t v17 = *v15;
  if (*v15)
  {
    *(void *)(v12 + 144) = v17;
    operator delete(v17);
  }
  unint64_t v18 = *v14;
  if (*v14)
  {
    *(void *)(v12 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v18;
    operator delete(v18);
  }
  unint64_t v19 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 96) = v19;
    operator delete(v19);
  }
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a11;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)v12;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1B21E632C()
{
}

void sub_1B21E6334()
{
}

unsigned char *std::__optional_copy_base<quasar::result_handler::CommandData,false>::__optional_copy_base[abi:ne180100](unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[184] = 0;
  if (*(unsigned char *)(a2 + 184))
  {
    quasar::result_handler::CommandData::CommandData((uint64_t)a1, a2);
    a1[184] = 1;
  }
  return a1;
}

void sub_1B21E6380(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<quasar::result_handler::CommandData,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::utf8Length(uint64_t **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (uint64_t **)*a1;
    unint64_t v2 = v1;
  }
  quasar::utf8::codepointsCtr(a1, v2, 0, v2, (unint64_t)v6);
  if (v8) {
    return LODWORD(v6[0]);
  }
  *(_OWORD *)long long __p = *(_OWORD *)v6;
  uint64_t v10 = v7;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v7 = 0;
  if (quasar::gLogLevel >= 1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    if (v10 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if (v10 >= 0) {
      uint64_t v5 = HIBYTE(v10);
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v4, v5);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = 0;
  if (!v8 && SHIBYTE(v7) < 0)
  {
    operator delete(v6[0]);
    return 0;
  }
  return result;
}

void sub_1B21E64A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (!a15 && a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void quasar::removeUtf8Suffix(std::string *a1, int a2)
{
  unint64_t v2 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (a2 > 0)
  {
    int v3 = 0;
    int v4 = 0;
    unint64_t size = a1->__r_.__value_.__l.__size_;
    if ((v2 & 0x80u) == 0) {
      unint64_t v6 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    else {
      unint64_t v6 = a1->__r_.__value_.__l.__size_;
    }
    while (1)
    {
      if (v6 <= v4) {
        goto LABEL_16;
      }
      unint64_t v7 = v4++;
      uint64_t v8 = ~v7;
      if ((v2 & 0x80) == 0) {
        break;
      }
      while (1)
      {
        char v9 = (std::string *)a1->__r_.__value_.__r.__words[0];
        std::string::size_type v10 = a1->__r_.__value_.__l.__size_;
        if (size <= v7) {
          break;
        }
LABEL_10:
        if ((v9->__r_.__value_.__s.__data_[v10 + v8] & 0xC0) != 0x80) {
          break;
        }
        ++v7;
        ++v4;
        --v8;
        if ((v2 & 0x80) == 0) {
          goto LABEL_7;
        }
      }
LABEL_13:
      if (++v3 == a2) {
        goto LABEL_16;
      }
    }
LABEL_7:
    char v9 = a1;
    std::string::size_type v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v7 >= v2) {
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  int v4 = 0;
  unint64_t size = a1->__r_.__value_.__l.__size_;
LABEL_16:
  if ((v2 & 0x80u) != 0) {
    unint64_t v2 = size;
  }
  std::string::resize(a1, v2 - v4, 0);
}

std::string *quasar::removeUtf8Prefix(std::string *a1, int a2)
{
  if (a2 < 1)
  {
    int v3 = 0;
  }
  else
  {
    int v2 = 0;
    int v3 = 0;
    unint64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    BOOL v5 = (size & 0x80u) != 0;
    if ((size & 0x80u) != 0) {
      unint64_t size = a1->__r_.__value_.__l.__size_;
    }
    if (v5) {
      unint64_t v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    else {
      unint64_t v6 = a1;
    }
    uint64_t v7 = (uint64_t)v6->__r_.__value_.__r.__words + 1;
    do
    {
      if (size <= v3) {
        break;
      }
      uint64_t v8 = v3;
      ++v2;
      unint64_t v9 = v3 + 1;
      if (size > v9) {
        LODWORD(v9) = size;
      }
      while (1)
      {
        int v3 = v8 + 1;
        if (size <= v8 + 1) {
          break;
        }
        int v10 = *(unsigned char *)(v7 + v8++) & 0xC0;
        if (v10 != 128) {
          goto LABEL_15;
        }
      }
      int v3 = v9;
LABEL_15:
      ;
    }
    while (v2 != a2);
  }
  return std::string::erase(a1, 0, v3);
}

void quasar::utf8toAscii(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    int v4 = (std::string::value_type *)a1;
  }
  else {
    int v4 = *(std::string::value_type **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  for (; v5; --v5)
  {
    int v6 = *v4;
    if ((v6 & 0xFFFFFFC0) != 0xFFFFFF80)
    {
      if (v6 < 0) {
        std::string::value_type v7 = 63;
      }
      else {
        std::string::value_type v7 = *v4;
      }
      std::string::push_back(a2, v7);
    }
    ++v4;
  }
}

void sub_1B21E66B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void quasar::DoNotTranslateBlock::performReplacements(uint64_t a1, void *a2, std::string *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v128 = 0;
  v127[0] = (int *)&v128 + 1;
  v127[1] = (int *)a4;
  v127[2] = (int *)a1;
  v127[3] = (int *)&v128;
  int v6 = (void *)*a2;
  std::string v90 = a2 + 1;
  if ((void *)*a2 == a2 + 1)
  {
    unint64_t v88 = 0;
    goto LABEL_132;
  }
  unint64_t v91 = a3;
  do
  {
    unint64_t v8 = *(void *)((char *)v6 + 36);
    unint64_t v9 = HIDWORD(v8);
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t size = a3->__r_.__value_.__l.__size_;
      BOOL v11 = size < (int)v8;
      if (size < (int)v8) {
        LODWORD(v8) = a3->__r_.__value_.__l.__size_;
      }
      int v93 = v8;
      if (size < (int)v8 + (int)v9)
      {
LABEL_8:
        int v92 = size - v93;
        BOOL v11 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      BOOL v11 = (int)v8 > size;
      unint64_t v12 = (int)size + HIDWORD(v8);
      if ((int)v8 > size) {
        LODWORD(v8) = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        unint64_t v12 = HIDWORD(v8) + (int)v8;
      }
      int v93 = v8;
      if (v12 > size) {
        goto LABEL_8;
      }
    }
    int v92 = v9;
LABEL_13:
    if (v11 && quasar::gLogLevel >= 2)
    {
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      long long v118 = 0u;
      memset(v117, 0, sizeof(v117));
      long long v115 = 0u;
      memset(v116, 0, sizeof(v116));
      long long v113 = 0u;
      long long v114 = 0u;
      long long v112 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Source span [", 13);
      unint64_t v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      unint64_t v15 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"] for out of bounds.", 20);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v112);
    }
    int v94 = *((_DWORD *)v6 + 8);
    int v95 = *((_DWORD *)v6 + 7);
    *(void *)&long long v112 = (char *)v6 + 36;
    *((_DWORD *)std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, (void **)&v112)+ 9) = 0;
    if (quasar::gLogLevel >= 6)
    {
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      long long v118 = 0u;
      memset(v117, 0, sizeof(v117));
      long long v115 = 0u;
      memset(v116, 0, sizeof(v116));
      long long v113 = 0u;
      long long v114 = 0u;
      long long v112 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"mapping [", 9);
      unint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] -> [", 6);
      unint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
      unint64_t v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
      if (quasar::gLogLevel >= 6)
      {
        long long v125 = 0u;
        long long v126 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v118 = 0u;
        memset(v117, 0, sizeof(v117));
        long long v115 = 0u;
        memset(v116, 0, sizeof(v116));
        long long v113 = 0u;
        long long v114 = 0u;
        long long v112 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"Tokens:", 7);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
      }
    }
    for (int i = v128;
          0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3) > SHIDWORD(v128)
       && (int)v128 < v95;
          int i = v128)
    {
      quasar::DoNotTranslateBlock::performReplacements(quasar::TranslationPhraseInternal const&,std::map<std::pair<int,int>,std::pair<int,int>> const&,std::string const&,std::vector<quasar::TranslationTokenInternal> &,std::map<std::pair<int,int>,int> &)::$_0::operator()(v127);
    }
    if (i != v95)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (*(void *)a4 == v23)
      {
        long long v125 = 0u;
        long long v126 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v118 = 0u;
        memset(v117, 0, sizeof(v117));
        long long v115 = 0u;
        memset(v116, 0, sizeof(v116));
        long long v113 = 0u;
        long long v114 = 0u;
        long long v112 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v112, "Logic error! newTokens should not be empty here.");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v112);
      }
      int v24 = *(unsigned __int8 *)(v23 - 112);
      if (quasar::gLogLevel >= 6)
      {
        long long v125 = 0u;
        long long v126 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v118 = 0u;
        memset(v117, 0, sizeof(v117));
        long long v115 = 0u;
        memset(v116, 0, sizeof(v116));
        long long v113 = 0u;
        long long v114 = 0u;
        long long v112 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       shrinking token before replacement", 41);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        uint64_t v23 = *(void *)(a4 + 8);
      }
      quasar::removeUtf8Suffix((std::string *)(v23 - 136), i - v95 - v24);
      *(unsigned char *)(*(void *)(a4 + 8) - 112) = 0;
    }
    quasar::utf8::substr(v91, v93, v92, &v111);
    unint64_t v108 = 0;
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    kaldi::SplitStringToVector(&v111, " ", 1, (uint64_t)&v108);
    std::vector<unsigned int>::size_type v26 = v108;
    uint64_t v25 = v109;
    if (v108 != v109)
    {
      do
      {
        std::string::size_type v99 = 0;
        std::string::size_type v100 = 0;
        uint64_t v101 = 0;
        memset(&v97, 0, sizeof(v97));
        __int16 v98 = 0;
        uint64_t v102 = 3212836864;
        int v103 = -1;
        std::string::operator=(&v97, v26);
        LODWORD(v102) = 1148846080;
        LOBYTE(v98) = 1;
        quasar::TranslationTokenInternal::TranslationTokenInternal((std::string *)&v112, (const quasar::TranslationToken *)&v97);
        unint64_t v27 = *(void *)(a4 + 8);
        if (v27 >= *(void *)(a4 + 16))
        {
          uint64_t v31 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal>((uint64_t *)a4, &v112);
          uint64_t v32 = (void *)v117[1];
          *(void *)(a4 + 8) = v31;
          if (v32)
          {
            v117[2] = v32;
            operator delete(v32);
          }
        }
        else
        {
          long long v28 = v112;
          *(void *)(v27 + 16) = v113;
          *(_OWORD *)unint64_t v27 = v28;
          *(void *)&long long v113 = 0;
          long long v112 = 0uLL;
          *(_WORD *)(v27 + 24) = WORD4(v113);
          *(void *)(v27 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
          *(void *)(v27 + 48) = 0;
          *(void *)(v27 + 32) = 0;
          *(_OWORD *)(v27 + 32) = v114;
          *(void *)(v27 + 48) = v115;
          long long v114 = 0uLL;
          *(void *)&long long v115 = 0;
          uint64_t v29 = *((void *)&v115 + 1);
          *(_DWORD *)(v27 + 64) = v116[0];
          *(void *)(v27 + 56) = v29;
          long long v30 = *(_OWORD *)&v116[1];
          *(void *)(v27 + 88) = v116[3];
          *(_OWORD *)(v27 + 72) = v30;
          memset(&v116[1], 0, 24);
          *(void *)(v27 + 96) = v117[0];
          *(void *)(v27 + 104) = 0;
          *(void *)(v27 + 112) = 0;
          *(void *)(v27 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
          *(_OWORD *)(v27 + 104) = *(_OWORD *)&v117[1];
          *(void *)(v27 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v117[3];
          memset(&v117[1], 0, 24);
          *(void *)(v27 + 128) = v118;
          *(void *)(a4 + 8) = v27 + 136;
        }
        if (SHIBYTE(v116[3]) < 0) {
          operator delete((void *)v116[1]);
        }
        if ((void)v114)
        {
          *((void *)&v114 + 1) = v114;
          operator delete((void *)v114);
        }
        if (SBYTE7(v113) < 0) {
          operator delete((void *)v112);
        }
        if (quasar::gLogLevel >= 6)
        {
          long long v125 = 0u;
          long long v126 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          long long v121 = 0u;
          long long v122 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          long long v118 = 0u;
          memset(v117, 0, sizeof(v117));
          long long v115 = 0u;
          memset(v116, 0, sizeof(v116));
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          std::vector<std::string>::pointer v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"   DNT copy: '", 14);
          uint64_t v34 = *(void *)(a4 + 8);
          uint64_t v37 = *(void *)(v34 - 136);
          uint64_t v35 = v34 - 136;
          uint64_t v36 = v37;
          int v38 = *(char *)(v35 + 23);
          if (v38 >= 0) {
            uint64_t v39 = v35;
          }
          else {
            uint64_t v39 = v36;
          }
          if (v38 >= 0) {
            uint64_t v40 = *(unsigned __int8 *)(v35 + 23);
          }
          else {
            uint64_t v40 = *(void *)(v35 + 8);
          }
          uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v39, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"'", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        }
        int v42 = quasar::utf8Length((uint64_t **)&v97);
        unint64_t v129 = (void *)((char *)v6 + 36);
        long long v43 = std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, &v129);
        *((_DWORD *)v43 + 9) += v42 + 1;
        if (v99)
        {
          std::string::size_type v100 = v99;
          operator delete(v99);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        ++v26;
      }
      while (v26 != v25);
      if (v108 != v109)
      {
        *(unsigned char *)(*(void *)(a4 + 8) - 112) = 0;
        v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + 36;
        uint64_t v44 = std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, &v97);
        --*((_DWORD *)v44 + 9);
      }
    }
    int v45 = HIDWORD(v128);
    uint64_t v46 = *(void *)(a1 + 136);
    if (HIDWORD(v128))
    {
      --HIDWORD(v128);
      int v47 = quasar::utf8Length((uint64_t **)(v46 + 136 * (v45 - 1)));
      int v48 = HIDWORD(v128);
      uint64_t v46 = *(void *)(a1 + 136);
      LODWORD(v128) = v128 - v47 - *(unsigned __int8 *)(v46 + 136 * SHIDWORD(v128) + 24);
      if (quasar::gLogLevel >= 6)
      {
        long long v125 = 0u;
        long long v126 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v118 = 0u;
        memset(v117, 0, sizeof(v117));
        long long v115 = 0u;
        memset(v116, 0, sizeof(v116));
        long long v113 = 0u;
        long long v114 = 0u;
        long long v112 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
        int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"   step backward to: '", 22);
        uint64_t v50 = *(void *)(a1 + 136) + 136 * SHIDWORD(v128);
        int v51 = *(char *)(v50 + 23);
        if (v51 >= 0) {
          uint64_t v52 = *(void *)(a1 + 136) + 136 * SHIDWORD(v128);
        }
        else {
          uint64_t v52 = *(void *)v50;
        }
        if (v51 >= 0) {
          uint64_t v53 = *(unsigned __int8 *)(v50 + 23);
        }
        else {
          uint64_t v53 = *(void *)(v50 + 8);
        }
        int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v52, v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"' / ", 4);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        int v48 = HIDWORD(v128);
        uint64_t v46 = *(void *)(a1 + 136);
      }
    }
    else
    {
      int v48 = 0;
    }
    unint64_t v55 = v48;
    unint64_t v56 = 0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 144) - v46) >> 3);
    if (v56 > v48)
    {
      while (1)
      {
        int v57 = v128;
        int v58 = quasar::utf8Length((uint64_t **)(v46 + 136 * v55));
        unint64_t v55 = SHIDWORD(v128);
        uint64_t v46 = *(void *)(a1 + 136);
        uint64_t v59 = v46 + 136 * SHIDWORD(v128);
        if (v94 + v95 < v58 + v57 + *(unsigned __int8 *)(v59 + 24)) {
          break;
        }
        int v60 = quasar::utf8Length((uint64_t **)(v46 + 136 * SHIDWORD(v128)));
        LODWORD(v128) = v60 + v128 + *(unsigned __int8 *)(v59 + 24);
        if (quasar::gLogLevel >= 6)
        {
          long long v125 = 0u;
          long long v126 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          long long v121 = 0u;
          long long v122 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          long long v118 = 0u;
          memset(v117, 0, sizeof(v117));
          long long v115 = 0u;
          memset(v116, 0, sizeof(v116));
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          unint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"   discarding: '", 16);
          int v62 = *(char *)(v59 + 23);
          if (v62 >= 0) {
            uint64_t v63 = v59;
          }
          else {
            uint64_t v63 = *(void *)v59;
          }
          if (v62 >= 0) {
            uint64_t v64 = *(unsigned __int8 *)(v59 + 23);
          }
          else {
            uint64_t v64 = *(void *)(v59 + 8);
          }
          uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v63, v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"' / ", 4);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        }
        unint64_t v55 = SHIDWORD(v128) + 1;
        ++HIDWORD(v128);
        uint64_t v46 = *(void *)(a1 + 136);
        unint64_t v56 = 0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 144) - v46) >> 3);
        if (v56 <= v55) {
          goto LABEL_84;
        }
      }
      unint64_t v56 = 0xF0F0F0F0F0F0F0F1 * ((*(void *)(a1 + 144) - v46) >> 3);
    }
LABEL_84:
    if (v56 > v55)
    {
      int v66 = v94 + v95 - v128;
      if (v94 + v95 > (int)v128)
      {
        unint64_t v67 = (const quasar::TranslationTokenInternal *)(v46 + 136 * v55);
        if (*((unsigned char *)v67 + 24) && v66 == quasar::utf8Length((uint64_t **)v67))
        {
          if (*(unsigned char *)(*(void *)(a4 + 8) - 112))
          {
            if (quasar::gLogLevel >= 6)
            {
              long long v125 = 0u;
              long long v126 = 0u;
              long long v123 = 0u;
              long long v124 = 0u;
              long long v121 = 0u;
              long long v122 = 0u;
              long long v119 = 0u;
              long long v120 = 0u;
              long long v118 = 0u;
              memset(v117, 0, sizeof(v117));
              long long v115 = 0u;
              memset(v116, 0, sizeof(v116));
              long long v113 = 0u;
              long long v114 = 0u;
              long long v112 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       already hasSpaceAfter of DNT token", 41);
              goto LABEL_115;
            }
          }
          else if (quasar::gLogLevel >= 6)
          {
            long long v125 = 0u;
            long long v126 = 0u;
            long long v123 = 0u;
            long long v124 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            long long v119 = 0u;
            long long v120 = 0u;
            long long v118 = 0u;
            memset(v117, 0, sizeof(v117));
            long long v115 = 0u;
            memset(v116, 0, sizeof(v116));
            long long v113 = 0u;
            long long v114 = 0u;
            long long v112 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       setting hasSpaceAfter of DNT token", 41);
LABEL_115:
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
          }
          *(unsigned char *)(*(void *)(a4 + 8) - 112) = 1;
        }
        else
        {
          quasar::TranslationTokenInternal::TranslationTokenInternal(&v97, v67);
          quasar::removeUtf8Prefix(&v97, v66);
          uint64_t v68 = *(std::string **)(a4 + 8);
          if (v68[-5].__r_.__value_.__s.__data_[8] && quasar::gLogLevel >= 6)
          {
            long long v125 = 0u;
            long long v126 = 0u;
            long long v123 = 0u;
            long long v124 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            long long v119 = 0u;
            long long v120 = 0u;
            long long v118 = 0u;
            memset(v117, 0, sizeof(v117));
            long long v115 = 0u;
            memset(v116, 0, sizeof(v116));
            long long v113 = 0u;
            long long v114 = 0u;
            long long v112 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       removing hasSpaceAfter of DNT token", 42);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
            uint64_t v68 = *(std::string **)(a4 + 8);
          }
          v68[-5].__r_.__value_.__s.__data_[8] = 0;
          if ((unint64_t)v68 >= *(void *)(a4 + 16))
          {
            uint64_t v69 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)a4, (const quasar::TranslationTokenInternal *)&v97);
          }
          else
          {
            quasar::TranslationTokenInternal::TranslationTokenInternal(v68, (const quasar::TranslationTokenInternal *)&v97);
            uint64_t v69 = (uint64_t)&v68[5].__r_.__value_.__r.__words[2];
            *(void *)(a4 + 8) = (char *)v68 + 136;
          }
          *(void *)(a4 + 8) = v69;
          if (quasar::gLogLevel >= 6)
          {
            long long v125 = 0u;
            long long v126 = 0u;
            long long v123 = 0u;
            long long v124 = 0u;
            long long v121 = 0u;
            long long v122 = 0u;
            long long v119 = 0u;
            long long v120 = 0u;
            long long v118 = 0u;
            memset(v117, 0, sizeof(v117));
            long long v115 = 0u;
            memset(v116, 0, sizeof(v116));
            long long v113 = 0u;
            long long v114 = 0u;
            long long v112 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
            uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"   partial:  '", 14);
            uint64_t v71 = *(void *)(a4 + 8);
            uint64_t v74 = *(void *)(v71 - 136);
            uint64_t v72 = v71 - 136;
            uint64_t v73 = v74;
            int v75 = *(char *)(v72 + 23);
            if (v75 >= 0) {
              uint64_t v76 = v72;
            }
            else {
              uint64_t v76 = v73;
            }
            if (v75 >= 0) {
              uint64_t v77 = *(unsigned __int8 *)(v72 + 23);
            }
            else {
              uint64_t v77 = *(void *)(v72 + 8);
            }
            int v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, v76, v77);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"'", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
          }
          if (v106)
          {
            uint64_t v107 = v106;
            operator delete(v106);
          }
          if (v105 < 0) {
            operator delete(v104);
          }
          if (v99)
          {
            std::string::size_type v100 = v99;
            operator delete(v99);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
        }
        int v79 = quasar::utf8Length((uint64_t **)v67);
        LODWORD(v128) = v79 + v128 + *((unsigned __int8 *)v67 + 24);
        if (quasar::gLogLevel >= 6)
        {
          long long v125 = 0u;
          long long v126 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          long long v121 = 0u;
          long long v122 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          long long v118 = 0u;
          memset(v117, 0, sizeof(v117));
          long long v115 = 0u;
          memset(v116, 0, sizeof(v116));
          long long v113 = 0u;
          long long v114 = 0u;
          long long v112 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"       tokenStartPos: '", 23);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
        }
        ++HIDWORD(v128);
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      long long v125 = 0u;
      long long v126 = 0u;
      long long v123 = 0u;
      long long v124 = 0u;
      long long v121 = 0u;
      long long v122 = 0u;
      long long v119 = 0u;
      long long v120 = 0u;
      long long v118 = 0u;
      memset(v117, 0, sizeof(v117));
      long long v115 = 0u;
      memset(v116, 0, sizeof(v116));
      long long v113 = 0u;
      long long v114 = 0u;
      long long v112 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v112, (uint64_t)"finished mapping [", 18);
      BOOL v80 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)", ", 2);
      uint64_t v81 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"] -> [", 6);
      int v82 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)", ", 2);
      int v83 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"], actual source length: ", 25);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + 36;
      std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, &v97);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v112);
    }
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + 36;
    int v84 = std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int>&&>,std::tuple<>>(a5, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, &v97);
    *((_DWORD *)v84 + 9) -= v94;
    *(void *)&long long v112 = &v108;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v111.__r_.__value_.__l.__data_);
    }
    int v85 = (void *)v6[1];
    if (v85)
    {
      do
      {
        std::string v86 = v85;
        int v85 = (void *)*v85;
      }
      while (v85);
    }
    else
    {
      do
      {
        std::string v86 = (void *)v6[2];
        BOOL v87 = *v86 == (void)v6;
        int v6 = v86;
      }
      while (!v87);
    }
    int v6 = v86;
    a3 = v91;
  }
  while (v86 != v90);
  unint64_t v88 = SHIDWORD(v128);
LABEL_132:
  for (uint64_t j = (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3;
        0xF0F0F0F0F0F0F0F1 * j > v88;
        uint64_t j = (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3)
  {
    quasar::DoNotTranslateBlock::performReplacements(quasar::TranslationPhraseInternal const&,std::map<std::pair<int,int>,std::pair<int,int>> const&,std::string const&,std::vector<quasar::TranslationTokenInternal> &,std::map<std::pair<int,int>,int> &)::$_0::operator()(v127);
    unint64_t v88 = SHIDWORD(v128);
  }
}

void quasar::DoNotTranslateBlock::performReplacements(quasar::TranslationPhraseInternal const&,std::map<std::pair<int,int>,std::pair<int,int>> const&,std::string const&,std::vector<quasar::TranslationTokenInternal> &,std::map<std::pair<int,int>,int> &)::$_0::operator()(int **a1)
{
  int v2 = (uint64_t *)a1[1];
  int v3 = **a1;
  int v4 = (std::string *)v2[1];
  if (v3 && v4 != (std::string *)*v2 && *(unsigned char *)(*((void *)a1[2] + 17) + 136 * v3 - 112)) {
    v4[-5].__r_.__value_.__s.__data_[8] = 1;
  }
  uint64_t v5 = (unsigned __int8 *)(*((void *)a1[2] + 17) + 136 * v3);
  if ((unint64_t)v4 >= v2[2])
  {
    uint64_t v6 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>(v2, (const quasar::TranslationTokenInternal *)v5);
  }
  else
  {
    quasar::TranslationTokenInternal::TranslationTokenInternal(v4, (const quasar::TranslationTokenInternal *)v5);
    uint64_t v6 = (uint64_t)&v4[5].__r_.__value_.__r.__words[2];
    v2[1] = (uint64_t)&v4[5].__r_.__value_.__r.__words[2];
  }
  v2[1] = v6;
  *a1[3] += quasar::utf8Length((uint64_t **)v5) + v5[24];
  if (quasar::gLogLevel >= 6)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::string::value_type v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"    original: '", 15);
    uint64_t v8 = *((void *)a1[1] + 1);
    uint64_t v11 = *(void *)(v8 - 136);
    uint64_t v9 = v8 - 136;
    uint64_t v10 = v11;
    int v12 = *(char *)(v9 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v9 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v9 + 8);
    }
    unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' / ", 4);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v16);
  }
  ++**a1;
}

void sub_1B21E77DC(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void quasar::DoNotTranslateBlock::adjustAlignmentProjections(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  v58[0] = 0;
  v58[1] = 0;
  int v57 = v58;
  if (quasar::gLogLevel >= 6)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusting projections", 21);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
  }
  uint64_t v35 = a3;
  uint64_t v6 = (void *)*a1;
  uint64_t v36 = a1 + 1;
  if ((void *)*a1 != a1 + 1)
  {
    int v7 = 0;
    unsigned int v38 = a4 - 1;
    do
    {
      int v9 = *((_DWORD *)v6 + 7);
      int v8 = *((_DWORD *)v6 + 8);
      __p[0] = (void *)(*((unsigned int *)v6 + 9) | ((unint64_t)(*((_DWORD *)v6 + 10)
                                                                                    - *((_DWORD *)v6 + 9)
                                                                                    + 1) << 32));
      uint64_t v10 = std::__tree<std::__value_type<std::pair<int,int>,int>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,int>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,int>>>::find<std::pair<int,int>>(a2, (int *)__p);
      if ((uint64_t *)(a2 + 8) == v10) {
        int v11 = 0;
      }
      else {
        int v11 = *((_DWORD *)v10 + 9);
      }
      if (v7 + v9 < 0)
      {
        if (quasar::gLogLevel >= 2)
        {
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          *(_OWORD *)long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusted range start is out of bounds: ", 39);
          std::ostream::operator<<();
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
        unsigned int v12 = 0;
      }
      else if (v7 + v9 >= a4)
      {
        unsigned int v12 = a4 - 1;
        if (quasar::gLogLevel >= 2)
        {
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          *(_OWORD *)long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusted range start is out of bounds: ", 39);
          std::ostream::operator<<();
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
          unsigned int v12 = a4 - 1;
        }
      }
      else
      {
        unsigned int v12 = v7 + v9;
      }
      int v13 = v7 + v8 + v11;
      if (v13 >= a4)
      {
        uint64_t v14 = v38;
        if (quasar::gLogLevel >= 2)
        {
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          *(_OWORD *)long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusted range end is out of bounds: ", 37);
          std::ostream::operator<<();
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
          uint64_t v14 = v38;
        }
      }
      else if (v13 < 0)
      {
        if (quasar::gLogLevel >= 2)
        {
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          *(_OWORD *)long long __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adjusted range end is out of bounds: ", 37);
          std::ostream::operator<<();
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = (v7 + v8 + v11);
      }
      __p[0] = (char *)v6 + 36;
      unint64_t v15 = std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(&v57, (int *)v6 + 9, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
      unint64_t v16 = (unint64_t *)v15[6];
      unint64_t v17 = v15[7];
      if ((unint64_t)v16 >= v17)
      {
        uint64_t v19 = v15[5];
        uint64_t v20 = ((uint64_t)v16 - v19) >> 3;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = v17 - v19;
        uint64_t v22 = v21 >> 2;
        if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
          uint64_t v22 = v20 + 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v23) {
          int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v15 + 7), v23);
        }
        else {
          int v24 = 0;
        }
        uint64_t v25 = &v24[8 * v20];
        *(void *)uint64_t v25 = v12 | (unint64_t)(v14 << 32);
        unint64_t v18 = v25 + 8;
        unint64_t v27 = (char *)v15[5];
        std::vector<unsigned int>::size_type v26 = (char *)v15[6];
        if (v26 != v27)
        {
          do
          {
            uint64_t v28 = *((void *)v26 - 1);
            v26 -= 8;
            *((void *)v25 - 1) = v28;
            v25 -= 8;
          }
          while (v26 != v27);
          std::vector<unsigned int>::size_type v26 = (char *)v15[5];
        }
        void v15[5] = (uint64_t)v25;
        void v15[6] = (uint64_t)v18;
        v15[7] = (uint64_t)&v24[8 * v23];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        unint64_t *v16 = v12 | (unint64_t)(v14 << 32);
        unint64_t v18 = v16 + 1;
      }
      void v15[6] = (uint64_t)v18;
      if (quasar::gLogLevel >= 6)
      {
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        *(_OWORD *)long long __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"    Changing target ", 20);
        uint64_t v29 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
        long long v30 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" to ", 4);
        uint64_t v31 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      }
      uint64_t v32 = (void *)v6[1];
      if (v32)
      {
        do
        {
          std::vector<std::string>::pointer v33 = v32;
          uint64_t v32 = (void *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          std::vector<std::string>::pointer v33 = (void *)v6[2];
          BOOL v34 = *v33 == (void)v6;
          uint64_t v6 = v33;
        }
        while (!v34);
      }
      v7 += v11;
      uint64_t v6 = v33;
    }
    while (v33 != v36);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "alignment-queries");
  quasar::PTree::getChild(v35, (uint64_t)__p);
}

void sub_1B21E7F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&__p);
  std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(v27 - 112, *(void **)(v27 - 104));
  _Unwind_Resume(a1);
}

void quasar::DoNotTranslateBlock::processBody(quasar::DoNotTranslateBlock *this)
{
  uint64_t v1 = (quasar::DoNotTranslateBlock *)((char *)this + 8);
  Value = (void *)quasar::ProcessingInput::getValue((quasar::DoNotTranslateBlock *)((char *)this + 8));
  if (*Value != Value[1])
  {
    memset(&v12[3], 0, 24);
    int v3 = (quasar::TranslationPhraseInternal **)quasar::ProcessingInput::getValue(v1);
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v12, *v3);
    uint64_t v10 = 0;
    int v9 = 0;
    uint64_t v11 = 0;
    uint64_t v7 = 0;
    uint64_t v6 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = quasar::ProcessingInput::getValue(v1);
    uint64_t v5 = quasar::MetaInfo::get((quasar::MetaInfo *)(*(void *)v4 + 192));
    std::string::basic_string[abi:ne180100]<0>(__p, "alignment-span-info");
    quasar::PTree::getChildOptional(v5, (uint64_t)__p);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)long long __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

uint64_t std::vector<std::vector<std::pair<int,int>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    long long v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)long long v14 = 0;
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::pair<int,int>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B21E9194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::DoNotTranslateBlock::minConfigVersion(quasar::DoNotTranslateBlock *this)
{
  return 222;
}

uint64_t virtual thunk to'quasar::DoNotTranslateBlock::minConfigVersion(quasar::DoNotTranslateBlock *this)
{
  return 222;
}

void *quasar::DoNotTranslateBlock::inputs@<X0>(quasar::DoNotTranslateBlock *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *uint64_t result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void quasar::DoNotTranslateBlock::~DoNotTranslateBlock(quasar::DoNotTranslateBlock *this)
{
  *(void *)this = &off_1F0A544A8;
  uint64_t v2 = (char **)((char *)this + 120);
  *((void *)this + 15) = off_1F0A54558;
  int v3 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  int v3 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;
  void **v3;

  *(void *)this = &off_1F0A544A8;
  uint64_t v2 = (char **)((char *)this + 120);
  *((void *)this + 15) = off_1F0A54558;
  int v3 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  int v3 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  MEMORY[0x1B3EA8670](this, 0x10B3C408B4D3B57);
}

const char *quasar::DoNotTranslateBlock::blockType(quasar::DoNotTranslateBlock *this)
{
  return "DoNotTranslateBlock";
}

void virtual thunk to'quasar::DoNotTranslateBlock::~DoNotTranslateBlock(quasar::DoNotTranslateBlock *this)
{
  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &off_1F0A544A8;
  *((void *)v1 + 15) = off_1F0A54558;
  uint64_t v2 = (void **)(v1 + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[87] < 0) {
    operator delete(*((void **)v1 + 8));
  }
  uint64_t v2 = (void **)(v1 + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 15);
}

{
  char *v1;
  void **v2;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &off_1F0A544A8;
  *((void *)v1 + 15) = off_1F0A54558;
  uint64_t v2 = (void **)(v1 + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[87] < 0) {
    operator delete(*((void **)v1 + 8));
  }
  uint64_t v2 = (void **)(v1 + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[31] < 0) {
    operator delete(*((void **)v1 + 1));
  }
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 15);
  MEMORY[0x1B3EA8670](v1, 0x10B3C408B4D3B57);
}

const char *virtual thunk to'quasar::DoNotTranslateBlock::blockType(quasar::DoNotTranslateBlock *this)
{
  return "DoNotTranslateBlock";
}

void std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::pair<int,int>,std::piecewise_construct_t const&,std::tuple<std::pair<int,int> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, &v11, a2);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x40uLL);
    uint64_t v9 = **a4;
    int32x2_t v7[6] = 0;
    v7[7] = 0;
    v7[4] = v9;
    void v7[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::vector<std::pair<int,int>>>>>::__find_equal<std::pair<int,int>>(uint64_t a1, void *a2, int *a3)
{
  unint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    int v6 = *a3;
    int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        int v9 = *((_DWORD *)v4 + 8);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        int v10 = *((_DWORD *)v8 + 9);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

char *std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,std::pair<int,int>>>(uint64_t **a1, int *a2, _OWORD *a3)
{
  unint64_t v5 = std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, &v9, a2);
  int v6 = (char *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    int v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t std::map<std::pair<int,int>,std::pair<int,int>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::map<std::pair<int,int>,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__tree_node<std::__value_type<std::pair<int,int>,std::pair<int,int>>,void *> *,long>>>((char *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1B21E9740(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *std::map<std::pair<int,int>,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__tree_node<std::__value_type<std::pair<int,int>,std::pair<int,int>>,void *> *,long>>>(char *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    int v6 = (uint64_t *)(result + 8);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__emplace_hint_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,std::pair<int,int>> const&>(v5, v6, v4 + 7, v4 + 7);
      int v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__emplace_hint_unique_key_args<std::pair<int,int>,std::pair<std::pair<int,int> const,std::pair<int,int>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  int v6 = std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__find_equal<std::pair<int,int>>(a1, a2, &v11, &v10, a3);
  int v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,std::pair<int,int>>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,std::pair<int,int>>>>::__find_equal<std::pair<int,int>>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_3;
  }
  int v5 = *a5;
  int v6 = *((_DWORD *)a2 + 7);
  if (*a5 < v6) {
    goto LABEL_3;
  }
  if (v6 < v5)
  {
LABEL_9:
    uint64_t v10 = a2[1];
    if (v10)
    {
      uint64_t v11 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v11;
        uint64_t v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      long long v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v13 = *a4 == v17;
        long long v17 = (uint64_t *)a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      int v18 = *((_DWORD *)a4 + 7);
      if (v5 >= v18 && (v18 < v5 || a5[1] >= *((_DWORD *)a4 + 8))) {
        return std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, a3, a5);
      }
    }
    if (v10)
    {
      *a3 = (uint64_t *)a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return (uint64_t *)a4;
  }
  int v15 = a5[1];
  int v16 = *((_DWORD *)a2 + 8);
  if (v15 >= v16)
  {
    if (v16 >= v15)
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  int v7 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    BOOL v9 = a2;
  }
  else
  {
    if (v7)
    {
      uint64_t v8 = (uint64_t *)*a2;
      do
      {
        BOOL v9 = v8;
        uint64_t v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      unint64_t v12 = a2;
      do
      {
        BOOL v9 = (uint64_t *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        unint64_t v12 = v9;
      }
      while (v13);
    }
    int v14 = *((_DWORD *)v9 + 7);
    if (v14 >= *a5 && (*a5 < v14 || *((_DWORD *)v9 + 8) >= a5[1])) {
      return std::__tree<std::__value_type<std::pair<int,int>,float>,std::__map_value_compare<std::pair<int,int>,std::__value_type<std::pair<int,int>,float>,std::less<std::pair<int,int>>,true>,std::allocator<std::__value_type<std::pair<int,int>,float>>>::__find_equal<std::pair<int,int>>((uint64_t)a1, a3, a5);
    }
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

double quasar::ResultStreamStabilizer::ResultStreamStabilizer(void *a1, void *a2, int a3, int a4, int a5, char a6, char a7, void *a8)
{
  int v15 = quasar::RecogResultStreamBase::RecogResultStreamBase(a1);
  *int v15 = &unk_1F0A563D0;
  uint64_t v16 = a2[1];
  void v15[3] = *a2;
  int v15[4] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v15 + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = a5;
  *((unsigned char *)v15 + 44) = a7;
  uint64_t v17 = a8[1];
  void v15[6] = *a8;
  v15[7] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)v15 + 64) = a6 ^ 1 | a7;
  *((_DWORD *)v15 + 18) = a3;
  *((_DWORD *)v15 + 19) = a4;
  double result = 0.0;
  *((_OWORD *)v15 + 5) = 0u;
  *((_OWORD *)v15 + 6) = 0u;
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((_OWORD *)v15 + 9) = 0u;
  *((_OWORD *)v15 + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_OWORD *)v15 + 11) = 0u;
  *((_OWORD *)v15 + 12) = 0u;
  *((_OWORD *)v15 + 13) = 0u;
  *((_OWORD *)v15 + 14) = 0u;
  *((_OWORD *)v15 + 15) = 0u;
  *((_OWORD *)v15 + 16) = 0u;
  *((_OWORD *)v15 + 17) = 0u;
  *((_OWORD *)v15 + 18) = 0u;
  *((_OWORD *)v15 + 19) = 0u;
  *((_OWORD *)v15 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_OWORD *)v15 + 21) = 0u;
  *((_OWORD *)v15 + 22) = 0u;
  *((_OWORD *)v15 + 23) = 0u;
  *((_OWORD *)v15 + 24) = 0u;
  *((_OWORD *)v15 + 25) = 0u;
  *((_OWORD *)v15 + 26) = 0u;
  *((_OWORD *)v15 + 27) = 0u;
  *((_WORD *)v15 + 224) = 0;
  *((_WORD *)v15 + 252) = 0;
  *(_OWORD *)(v15 + 59) = 0u;
  *(_OWORD *)(v15 + 61) = 0u;
  *(_OWORD *)(v15 + 57) = 0u;
  return result;
}

void quasar::ResultStreamStabilizer::setUpLogging(quasar::ResultStreamStabilizer *this)
{
  memset(v1, 0, sizeof(v1));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "This class is internal to Quasar, and this function is never called");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v1);
}

void quasar::ResultStreamStabilizer::prepareForNextUtterance(quasar::ResultStreamStabilizer *this)
{
  quasar::ResultStabilityHelper::reset((quasar::ResultStreamStabilizer *)((char *)this + 72));
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 22);
  if (*((unsigned char *)this + 44))
  {
    uint64_t v2 = *((void *)this + 41);
    uint64_t v3 = *((void *)this + 42);
    if (v2 != v3)
    {
      long long v4 = *((_OWORD *)this + 14);
      long long v5 = *(_OWORD *)((char *)this + 344);
      long long v6 = *(_OWORD *)((char *)this + 360);
      long long v7 = *((_OWORD *)this + 15);
      *(_OWORD *)((char *)this + 328) = *((_OWORD *)this + 13);
      *(_OWORD *)((char *)this + 344) = v4;
      *((_OWORD *)this + 14) = v5;
      *((_OWORD *)this + 15) = v6;
      long long v8 = *((_OWORD *)this + 16);
      *((_OWORD *)this + 16) = *(_OWORD *)((char *)this + 376);
      *((void *)this + 26) = v2;
      *((void *)this + 27) = v3;
      *(_OWORD *)((char *)this + 36std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v7;
      *(_OWORD *)((char *)this + 376) = v8;
      uint64_t v9 = *((void *)this + 34);
      *((void *)this + 34) = *((void *)this + 49);
      *((void *)this + 49) = v9;
      quasar::getTopChoice((long long ***)this + 26, (uint64_t *)&v16);
      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 280));
      *(_OWORD *)((char *)this + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v16;
      *((void *)this + 37) = v17;
      uint64_t v17 = 0;
      long long v16 = 0uLL;
      int v18 = (void **)&v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
      quasar::formatResultTokensSimple(*((std::string **)this + 26), 0);
      uint64_t v10 = (void **)((char *)this + 304);
      if (*((char *)this + 327) < 0) {
        operator delete(*v10);
      }
      *(_OWORD *)uint64_t v10 = v16;
      *((void *)this + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v17;
    }
  }
  uint64_t v11 = *((void *)this + 41);
  uint64_t v12 = *((void *)this + 42);
  while (v12 != v11)
  {
    v12 -= 24;
    *(void *)&long long v16 = v12;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }
  *((void *)this + 42) = v11;
  *((void *)this + 45) = *((void *)this + 44);
  uint64_t v14 = *((void *)this + 47);
  uint64_t v13 = *((void *)this + 48);
  if (v13 != v14)
  {
    do
    {
      uint64_t v15 = v13 - 24;
      std::__tree<std::string>::destroy(v13 - 24, *(char **)(v13 - 16));
      uint64_t v13 = v15;
    }
    while (v15 != v14);
  }
  *((void *)this + 48) = v14;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 50);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 53);
  if (!*((unsigned char *)this + 449) && *((unsigned char *)this + 448)) {
    *((unsigned char *)this + 449) = 1;
  }
  *((unsigned char *)this + 448) = 0;
}

void quasar::ResultStabilityHelper::reset(quasar::ResultStabilityHelper *this)
{
  uint64_t v2 = (void **)*((void *)this + 2);
  uint64_t v3 = (void **)*((void *)this + 3);
  if (v3 == v2)
  {
    long long v4 = (void *)((char *)this + 48);
    uint64_t v3 = (void **)*((void *)this + 2);
  }
  else
  {
    long long v4 = (void *)((char *)this + 48);
    unint64_t v5 = *((void *)this + 5);
    long long v6 = &v2[v5 / 0xAA];
    long long v7 = (void **)((char *)*v6 + 24 * (v5 % 0xAA));
    unint64_t v8 = (unint64_t)v2[(*((void *)this + 6) + v5) / 0xAA] + 24 * ((*((void *)this + 6) + v5) % 0xAA);
    if (v7 != (void **)v8)
    {
      do
      {
        uint64_t v15 = v7;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 3;
        if ((char *)v7 - (unsigned char *)*v6 == 4080)
        {
          uint64_t v9 = (void **)v6[1];
          ++v6;
          long long v7 = v9;
        }
      }
      while (v7 != (void **)v8);
      uint64_t v2 = (void **)*((void *)this + 2);
      uint64_t v3 = (void **)*((void *)this + 3);
    }
  }
  *long long v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if (v10 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v11 = *((void *)this + 3);
      uint64_t v2 = (void **)(*((void *)this + 2) + 8);
      *((void *)this + 2) = v2;
      unint64_t v10 = v11 - (void)v2;
    }
    while (v10 > 0x10);
  }
  if (v10 >> 3 == 1)
  {
    uint64_t v12 = 85;
    goto LABEL_14;
  }
  if (v10 >> 3 == 2)
  {
    uint64_t v12 = 170;
LABEL_14:
    *((void *)this + 5) = v12;
  }
  uint64_t v14 = *((void *)this + 7);
  for (uint64_t i = *((void *)this + 8);
        i != v14;
  *((void *)this + 8) = v14;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 10);
}

void quasar::ResultStreamStabilizer::writePartial(uint64_t a1, long long **a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v13 = a6;
  uint64_t v14 = a5;
  v73[2] = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    if (a6) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v14 = *(unsigned int *)(a1 + 200);
    if (a6) {
      goto LABEL_8;
    }
  }
  if (v14 == *(_DWORD *)(a1 + 200)) {
    uint64_t v13 = *(unsigned int *)(a1 + 204);
  }
  else {
    uint64_t v13 = 0;
  }
LABEL_8:
  *(_DWORD *)(a1 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v14;
  *(_DWORD *)(a1 + 204) = v13;
  char v67 = 0;
  quasar::ResultStabilityHelper::computedBestResults((unsigned int *)(a1 + 72), a2, &v67, (uint64_t *)&v65);
  int v17 = quasar::ResultStabilityHelper::stabilityChanged(a1 + 72, &v65);
  BOOL v18 = a10
     && ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24)) & a11) == 1
     && v65 != (std::string *)v66
     && *(unsigned char *)(a1 + 504) == 0;
  if ((v17 | v18) == 1)
  {
    memset(&v64, 0, sizeof(v64));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, *(long long **)(a1 + 280), *(long long **)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)&v64, (std::string *)v64.__r_.__value_.__l.__size_, v65, v66, 0xAAAAAAAAAAAAAAABLL * (((char *)v66 - (char *)v65) >> 3));
    quasar::Token::tokenNamesWithCleanedMetadata((const std::string **)&v64, &v63);
    char v19 = v17 ^ 1;
    HIBYTE(v56) = v17 ^ 1;
    LOBYTE(v56) = a10;
    (*(void (**)(void, std::vector<std::string> *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), &v63, a3, 1, v14, v13, a7, a8, a9, v56, a12);
    if (*(unsigned char *)(a1 + 64) && v64.__r_.__value_.__r.__words[0] != v64.__r_.__value_.__l.__size_ && (int)v14 >= 1)
    {
      uint64_t v59 = " ";
      uint64_t v60 = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v64, (uint64_t *)&v59);
      long long v20 = __p;
      v73[0] = v62;
      *(void *)((char *)v73 + 7) = *(void *)((char *)&v62 + 7);
      char v21 = HIBYTE(v62);
      long long v62 = 0uLL;
      long long __p = 0;
      unint64_t v22 = *(void *)(a1 + 464);
      unint64_t v23 = *(void *)(a1 + 472);
      if (v22 >= v23)
      {
        uint64_t v26 = *(void *)(a1 + 456);
        uint64_t v27 = (uint64_t)(v22 - v26) >> 5;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v29 = v23 - v26;
        if (v29 >> 4 > v28) {
          unint64_t v28 = v29 >> 4;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        uint64_t v72 = a1 + 472;
        uint64_t v31 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 472, v30);
        uint64_t v32 = &v31[4 * v27];
        uint64_t v68 = (std::vector<std::string> *)v31;
        uint64_t v69 = v32;
        uint64_t v71 = &v31[4 * v33];
        BOOL v34 = (void *)v73[0];
        void *v32 = v20;
        v32[1] = v34;
        *(void **)((char *)v32 + 15) = *(void **)((char *)v73 + 7);
        *((unsigned char *)v32 + 23) = v21;
        *((_DWORD *)v32 + 6) = v14;
        uint64_t v70 = v32 + 4;
        std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer((uint64_t *)(a1 + 456), &v68);
        unint64_t v25 = *(void *)(a1 + 464);
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v68);
      }
      else
      {
        uint64_t v24 = v73[0];
        *(void *)unint64_t v22 = v20;
        *(void *)(v22 + 8) = v24;
        *(void *)(v22 + 15) = *(void *)((char *)v73 + 7);
        *(unsigned char *)(v22 + 23) = v21;
        *(_DWORD *)(v22 + 24) = v14;
        unint64_t v25 = v22 + 32;
        *(void *)(a1 + 464) = v22 + 32;
      }
      *(void *)(a1 + 464) = v25;
      if (SHIBYTE(v62) < 0) {
        operator delete(__p);
      }
    }
    *(unsigned char *)(a1 + 504) = v19;
    uint64_t v68 = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    uint64_t v68 = (std::vector<std::string> *)&v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  }
  uint64_t v35 = *(unsigned __int8 **)(a1 + 176);
  uint64_t v36 = *a2;
  uint64_t v37 = a2[1];
  if ((char *)v37 - (char *)*a2 == *(void *)(a1 + 184) - (void)v35)
  {
    if (v36 == v37)
    {
      int v38 = 1;
    }
    else
    {
      do
      {
        int v38 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v68, (unsigned __int8 *)v36, v35);
        if (!v38) {
          break;
        }
        uint64_t v36 = (long long *)((char *)v36 + 24);
        v35 += 24;
      }
      while (v36 != v37);
    }
  }
  else
  {
    int v38 = 0;
  }
  BOOL v39 = a10
     && ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 136))(*(void *)(a1 + 24)) & a11) == 1
     && v65 != (std::string *)v66
     && *(unsigned char *)(a1 + 505) == 0;
  if ((v39 | v38 ^ 1) == 1)
  {
    memset(&v64, 0, sizeof(v64));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v64, *(long long **)(a1 + 280), *(long long **)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)&v64, (std::string *)v64.__r_.__value_.__l.__size_, (std::string *)*a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    quasar::Token::tokenNamesWithCleanedMetadata((const std::string **)&v64, &v63);
    BYTE1(v55) = v38;
    LOBYTE(v55) = a10;
    (*(void (**)(void, std::vector<std::string> *, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), &v63, a3, 0, v14, v13, a7, a8, a9, v55, a12);
    if ((long long **)(a1 + 176) != a2) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 176), (std::string *)*a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    }
    if (*(unsigned char *)(a1 + 64) && v64.__r_.__value_.__r.__words[0] != v64.__r_.__value_.__l.__size_ && (int)v14 >= 1)
    {
      uint64_t v59 = " ";
      uint64_t v60 = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v64, (uint64_t *)&v59);
      uint64_t v40 = __p;
      v73[0] = v62;
      *(void *)((char *)v73 + 7) = *(void *)((char *)&v62 + 7);
      char v41 = HIBYTE(v62);
      long long v62 = 0uLL;
      long long __p = 0;
      unint64_t v42 = *(void *)(a1 + 488);
      unint64_t v43 = *(void *)(a1 + 496);
      if (v42 >= v43)
      {
        uint64_t v46 = *(void *)(a1 + 480);
        uint64_t v47 = (uint64_t)(v42 - v46) >> 5;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v49 = v43 - v46;
        if (v49 >> 4 > v48) {
          unint64_t v48 = v49 >> 4;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v50 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        uint64_t v72 = a1 + 496;
        long long v51 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(a1 + 496, v50);
        long long v52 = &v51[4 * v47];
        uint64_t v68 = (std::vector<std::string> *)v51;
        uint64_t v69 = v52;
        uint64_t v71 = &v51[4 * v53];
        long long v54 = (void *)v73[0];
        char *v52 = v40;
        v52[1] = v54;
        *(void **)((char *)v52 + 15) = *(void **)((char *)v73 + 7);
        *((unsigned char *)v52 + 23) = v41;
        *((_DWORD *)v52 + 6) = v14;
        uint64_t v70 = v52 + 4;
        std::vector<std::pair<std::string,int>>::__swap_out_circular_buffer((uint64_t *)(a1 + 480), &v68);
        unint64_t v45 = *(void *)(a1 + 488);
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v68);
      }
      else
      {
        uint64_t v44 = v73[0];
        *(void *)unint64_t v42 = v40;
        *(void *)(v42 + 8) = v44;
        *(void *)(v42 + 15) = *(void *)((char *)v73 + 7);
        *(unsigned char *)(v42 + 23) = v41;
        *(_DWORD *)(v42 + 24) = v14;
        unint64_t v45 = v42 + 32;
        *(void *)(a1 + 488) = v42 + 32;
      }
      *(void *)(a1 + 488) = v45;
      if (SHIBYTE(v62) < 0) {
        operator delete(__p);
      }
    }
    *(unsigned char *)(a1 + 505) = v38;
    uint64_t v68 = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    uint64_t v68 = (std::vector<std::string> *)&v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  }
  uint64_t v68 = (std::vector<std::string> *)&v65;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
}

void sub_1B21EA498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char ***__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char **a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer(v33 - 152);
  if (a26 < 0) {
    operator delete(__p);
  }
  long long __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a27 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  a30 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void sub_1B21EA554()
{
}

void quasar::ResultStabilityHelper::computedBestResults(unsigned int *a1@<X0>, long long **a2@<X1>, unsigned char *a3@<X2>, uint64_t *a4@<X8>)
{
  long long v6 = (int64x2_t *)(a1 + 2);
  if (*((void *)a1 + 6) > (unint64_t)*a1)
  {
    long long v7 = (uint64_t *)(*(void *)(*((void *)a1 + 2) + 8 * (*((void *)a1 + 5) / 0xAAuLL))
                   + 24 * (*((void *)a1 + 5) % 0xAAuLL));
    uint64_t v8 = *v7;
    if (v7[1] != *v7)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = (void *)(*((void *)a1 + 7) + v9);
        uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v12, (unsigned __int8 *)(v8 + v10));
        if (v13)
        {
          int v14 = *((_DWORD *)v13 + 10);
          BOOL v15 = v14 != 0;
          int v16 = v14 - 1;
          if (v16 != 0 && v15) {
            *((_DWORD *)v13 + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v16;
          }
          else {
            std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase(v12, (uint64_t *)v13);
          }
        }
        ++v11;
        uint64_t v8 = *v7;
        v10 += 24;
        v9 += 40;
      }
      while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3));
    }
    std::deque<std::vector<std::string>>::pop_front(v6);
  }
  std::deque<std::vector<std::string>>::push_back(v6, a2);
  BOOL v18 = *a2;
  int v17 = a2[1];
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)*a2) >> 3);
  if (v19 > 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a1 + 8) - *((void *)a1 + 7)) >> 3))
  {
    std::vector<std::unordered_map<std::string,unsigned int>>::resize((uint64_t *)a1 + 7, v19);
    BOOL v18 = *a2;
    int v17 = a2[1];
  }
  if (v17 != v18)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    do
    {
      unint64_t v23 = (char *)v18 + v21;
      uint64_t v24 = (void *)(*((void *)a1 + 7) + v20);
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v24, (unsigned __int8 *)v18 + v21);
      if (v25)
      {
        ++*((_DWORD *)v25 + 10);
      }
      else
      {
        if (v23[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)((char *)v18 + v21), *(void *)((char *)v18 + v21 + 8));
        }
        else
        {
          long long v26 = *(_OWORD *)v23;
          v63.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
          *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v26;
        }
        int v64 = 1;
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>((uint64_t)v24, (unsigned __int8 *)&v63, (uint64_t)&v63);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
      }
      ++v22;
      BOOL v18 = *a2;
      v21 += 24;
      v20 += 40;
    }
    while (v22 < 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v28 = *((void *)a1 + 7);
  uint64_t v27 = *((void *)a1 + 8);
  if (v27 == v28) {
    goto LABEL_87;
  }
  unint64_t v29 = 0;
  do
  {
    uint64_t v30 = v28 + 40 * v29;
    if (!*(void *)(v30 + 24)) {
      goto LABEL_61;
    }
    memset(&v63, 0, sizeof(v63));
    uint64_t v31 = *(uint64_t **)(v30 + 16);
    if (v31)
    {
      unint64_t v32 = 0;
      do
      {
        unint64_t v33 = *((unsigned int *)v31 + 10);
        if (v32 < v33)
        {
          std::string::operator=(&v63, (const std::string *)(v31 + 2));
          unint64_t v32 = v33;
        }
        uint64_t v31 = (uint64_t *)*v31;
      }
      while (v31);
    }
    else
    {
      unint64_t v32 = 0;
    }
    if (v32 < a1[1])
    {
      uint64_t v34 = *((void *)a1 + 10);
      std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      char v36 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      if (v29 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 11) - v34) >> 3)) {
        goto LABEL_54;
      }
      uint64_t v37 = (unsigned __int8 *)(v34 + 24 * v29);
      uint64_t v38 = v37[23];
      uint64_t v39 = *((void *)v37 + 1);
      if ((v38 & 0x80u) == 0) {
        uint64_t v40 = v37[23];
      }
      else {
        uint64_t v40 = *((void *)v37 + 1);
      }
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v63.__r_.__value_.__l.__size_;
      }
      if (v40 == size)
      {
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v41 = &v63;
        }
        else {
          char v41 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if ((v38 & 0x80) != 0)
        {
          int v42 = memcmp(*(const void **)v37, v41, *((void *)v37 + 1));
          uint64_t v40 = v39;
          if (!v42) {
            goto LABEL_50;
          }
        }
        else
        {
          if (!v37[23]) {
            goto LABEL_50;
          }
          while (*v37 == v41->__r_.__value_.__s.__data_[0])
          {
            ++v37;
            char v41 = (std::string *)((char *)v41 + 1);
            if (!--v38) {
              goto LABEL_50;
            }
          }
        }
      }
      if (!v40)
      {
LABEL_54:
        int v46 = 0;
        if ((v36 & 0x80) == 0) {
          goto LABEL_60;
        }
LABEL_59:
        operator delete(v63.__r_.__value_.__l.__data_);
        goto LABEL_60;
      }
    }
LABEL_50:
    unint64_t v43 = a4[1];
    if (v43 >= a4[2])
    {
      uint64_t v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (long long *)&v63);
    }
    else
    {
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a4[1], v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v44 = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
        *(void *)(v43 + 16) = *((void *)&v63.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v43 = v44;
      }
      uint64_t v45 = v43 + 24;
      a4[1] = v43 + 24;
    }
    a4[1] = v45;
    int v46 = 1;
    if ((*((unsigned char *)&v63.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_59;
    }
LABEL_60:
    uint64_t v28 = *((void *)a1 + 7);
    uint64_t v27 = *((void *)a1 + 8);
    if (!v46) {
      break;
    }
LABEL_61:
    ++v29;
  }
  while (v29 < 0xCCCCCCCCCCCCCCCDLL * ((v27 - v28) >> 3));
  *a3 = 0;
  if (v27 != v28)
  {
    uint64_t v48 = *a4;
    uint64_t v47 = a4[1];
    unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a4) >> 3);
    unint64_t v50 = *a2;
    if (v49 == 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) && v47 != v48)
    {
      uint64_t v52 = 0;
      if (v49 <= 1) {
        unint64_t v53 = 1;
      }
      else {
        unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *a4) >> 3);
      }
      while (1)
      {
        long long v54 = (unsigned __int8 *)(v48 + 24 * v52);
        int v55 = (unsigned __int8 **)v50 + 3 * v52;
        uint64_t v56 = v54[23];
        if ((v56 & 0x80u) == 0) {
          int v57 = (unsigned __int8 *)v54[23];
        }
        else {
          int v57 = (unsigned __int8 *)*((void *)v54 + 1);
        }
        int v58 = (unsigned __int8 *)*((unsigned __int8 *)v55 + 23);
        int v59 = (char)v58;
        if ((char)v58 < 0) {
          int v58 = v55[1];
        }
        if (v57 != v58) {
          break;
        }
        if (v59 >= 0) {
          uint64_t v60 = (unsigned __int8 *)v50 + 24 * v52;
        }
        else {
          uint64_t v60 = *v55;
        }
        if ((v56 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v54, v60, *((void *)v54 + 1))) {
            break;
          }
        }
        else if (v54[23])
        {
          while (*v54 == *v60)
          {
            ++v54;
            ++v60;
            if (!--v56) {
              goto LABEL_85;
            }
          }
          break;
        }
LABEL_85:
        *a3 = 1;
        if (++v52 == v53) {
          return;
        }
      }
LABEL_87:
      *a3 = 0;
    }
  }
}

void sub_1B21EAA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 8) = v17;
  if (a16 < 0) {
    operator delete(__p);
  }
  long long __p = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::ResultStabilityHelper::stabilityChanged(uint64_t a1, std::string **a2)
{
  long long v4 = *(unsigned __int8 **)(a1 + 80);
  uint64_t v3 = (std::vector<std::wstring> *)(a1 + 80);
  unint64_t v5 = *a2;
  long long v6 = a2[1];
  if ((char *)v6 - (char *)*a2 == *(void *)(a1 + 88) - (void)v4)
  {
    while (v5 != v6)
    {
      if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v8, (unsigned __int8 *)v5, v4)) {
        goto LABEL_5;
      }
      ++v5;
      v4 += 24;
    }
    return 0;
  }
  else
  {
LABEL_5:
    if (v3 != (std::vector<std::wstring> *)a2) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, (long long *)a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    }
    return 1;
  }
}

void quasar::ResultStreamStabilizer::writePartialFormatted()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This class is internal to Quasar, and this function is never called");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::ResultStreamStabilizer::writeFinalChoices(uint64_t a1, quasar::RecogResult *this, uint64_t a3)
{
  if (*((void *)this + 12)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = quasar::gLogLevel < 2;
  }
  if (!v6)
  {
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v79 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"recogResult.params is null. Should NEVER happen", 47);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v79);
  }
  *(unsigned char *)(a1 + 448) = a3 == 1;
  ResultChoices = (long long ***)quasar::RecogResult::getResultChoices(this);
  quasar::getTopChoice(ResultChoices, (uint64_t *)&v96);
  char v8 = (unsigned __int8 *)*((void *)&v96 + 1);
  uint64_t v9 = (unsigned __int8 *)v96;
  uint64_t v10 = *(unsigned __int8 **)(a1 + 400);
  if (*((void *)&v96 + 1) - (void)v96 == *(void *)(a1 + 408) - (void)v10)
  {
    if ((void)v96 == *((void *)&v96 + 1))
    {
      LOBYTE(v11) = 1;
    }
    else
    {
      do
      {
        int v11 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v79, v9, v10);
        if (!v11) {
          break;
        }
        v9 += 24;
        v10 += 24;
      }
      while (v9 != v8);
    }
  }
  else
  {
    LOBYTE(v11) = 0;
  }
  if (*((unsigned char *)this + 304) && (long long *)(a1 + 424) != &v96) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 424), (std::string *)v96, *((long long **)&v96 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v96 + 1) - v96) >> 3));
  }
  if (*(unsigned char *)(*((void *)this + 12) + 625))
  {
    uint64_t v12 = (unsigned __int8 *)*((void *)&v96 + 1);
    uint64_t v13 = (unsigned __int8 *)v96;
    int v14 = *(unsigned __int8 **)(a1 + 424);
    if (*((void *)&v96 + 1) - (void)v96 == *(void *)(a1 + 432) - (void)v14)
    {
      while (v13 != v12)
      {
        if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v79, v13, v14)) {
          goto LABEL_21;
        }
        v13 += 24;
        v14 += 24;
      }
      BOOL v15 = (char *)this + 132;
LABEL_30:
      long long v18 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 40std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v96;
      long long v96 = v18;
      uint64_t v19 = *(void *)(a1 + 416);
      *(void *)(a1 + 416) = v97;
      uint64_t v97 = v19;
      uint64_t v17 = (unsigned char *)(a1 + 64);
      goto LABEL_31;
    }
  }
LABEL_21:
  BOOL v15 = (char *)this + 132;
  if (*((unsigned char *)this + 132)) {
    char v16 = 0;
  }
  else {
    char v16 = v11;
  }
  if (v16) {
    goto LABEL_92;
  }
  if ((v11 & 1) == 0) {
    goto LABEL_30;
  }
  uint64_t v17 = (unsigned char *)(a1 + 64);
  if (!*(unsigned char *)(a1 + 64))
  {
LABEL_31:
    uint64_t v20 = (uint64_t **)quasar::RecogResult::getResultChoices(this);
    long long v61 = 0uLL;
    *(void *)&long long v62 = 0;
    uint64_t v21 = std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(&v61, *v20, v20[1], 0xAAAAAAAAAAAAAAABLL * (v20[1] - *v20));
    quasar::ResultStreamStabilizer::limitTokenTimestamp((uint64_t)v21, (uint64_t *)&v61, *((_DWORD *)this + 32));
    if (*(unsigned char *)(a1 + 44))
    {
      std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 328, *(uint64_t **)(a1 + 208), *(uint64_t **)(a1 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3));
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 352), *(char **)(a1 + 232), *(void *)(a1 + 240), (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3);
      ResultCosts = (uint64_t *)quasar::RecogResult::getResultCosts(this);
      quasar::concatNbest((uint64_t *)(a1 + 328), a1 + 352, &v61, ResultCosts, *((_DWORD *)this + 31), *(_DWORD *)(a1 + 40), v23);
      uint64_t v24 = *((void *)this + 12);
      if (!v24)
      {
        long long v94 = 0u;
        long long v95 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v79 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"recogResult.params is null. Should NEVER happen", 47);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v79);
      }
      quasar::MuxHelper::finalizeResult(*(uint64_t **)(a1 + 48), (uint64_t **)(v24 + 344), (uint64_t *)(a1 + 328), a1 + 352, (uint64_t *)(a1 + 376));
    }
    else
    {
      if ((long long *)(a1 + 328) != &v61) {
        std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 328, (uint64_t *)v61, *((uint64_t **)&v61 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v61 + 1) - v61) >> 3));
      }
      uint64_t v25 = quasar::RecogResult::getResultCosts(this);
      if (a1 + 352 != v25) {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 352), *(char **)v25, *(void *)(v25 + 8), (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 3);
      }
      ResultMuxIds = (const void ****)quasar::RecogResult::getResultMuxIds(this);
      if ((const void ****)(a1 + 376) != ResultMuxIds) {
        std::vector<std::set<std::string>>::__assign_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(a1 + 376, *ResultMuxIds, ResultMuxIds[1], 0xAAAAAAAAAAAAAAABLL * (ResultMuxIds[1] - *ResultMuxIds));
      }
    }
    *(void *)&long long v79 = &v61;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    goto LABEL_41;
  }
  if (*(void *)(a1 + 328) == *(void *)(a1 + 336))
  {
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 328, *(uint64_t **)(a1 + 208), *(uint64_t **)(a1 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3));
    std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 352), *(char **)(a1 + 232), *(void *)(a1 + 240), (uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3);
    std::vector<std::set<std::string>>::__assign_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(a1 + 376, *(const void ****)(a1 + 256), *(const void ****)(a1 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 3));
  }
LABEL_41:
  if (*v15
    || (long long v54 = (void *)quasar::RecogResult::getResultChoices(this), *v54 != v54[1])
    && (uint64_t v55 = quasar::RecogResult::getResultChoices(this), **(void **)v55 != *(void *)(*(void *)v55 + 8)))
  {
    if (*v17) {
      quasar::extendEndTime(a1 + 328, *((_DWORD *)this + 32) + *((_DWORD *)this + 31));
    }
    if (*(unsigned char *)(*((void *)this + 12) + 738))
    {
      if (*((unsigned char *)this + 304))
      {
        uint64_t v27 = *(uint64_t **)(a1 + 328);
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        if (v29 != v28)
        {
          do
          {
            *(_DWORD *)(v29 + 36) = *(_DWORD *)(v29 + 32);
            v29 += 224;
          }
          while (v29 != v28);
          *(_DWORD *)(v28 - 192) += 1000;
        }
      }
    }
    if (*v15 && !a3 && *(unsigned char *)(a1 + 449))
    {
      if (quasar::gLogLevel >= 3)
      {
        long long v94 = 0u;
        long long v95 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v79 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v79);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v79, (uint64_t)"Decoding for only the last utterance failed. Updating recogStatus to success", 76);
        quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)&v79);
      }
      a3 = 1;
    }
    quasar::RecogResult::RecogResult((quasar::RecogResult *)&v79, this);
    uint64_t v30 = quasar::Token::resetSpacing((uint64_t **)(a1 + 328));
    quasar::Token::tokensWithCleanedMetadata(v30, v78);
    uint64_t v31 = quasar::RecogResult::setResultChoices((uint64_t)&v79, (uint64_t)v78);
    uint64_t v32 = quasar::RecogResult::setResultCosts(v31, a1 + 352);
    quasar::RecogResult::setResultMuxIds(v32, a1 + 376);
    if (quasar::gLogLevel >= 5)
    {
      uint64_t v33 = quasar::RecogResult::getResultChoices((quasar::RecogResult *)&v79);
      int v57 = (uint64_t *)quasar::RecogResult::getResultMuxIds((quasar::RecogResult *)&v79);
      if (quasar::gLogLevel >= 5)
      {
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        long long v61 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Quasar PreITN Result. isFinal=", 30);
        uint64_t v34 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" utteranceStartMillis=", 22);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v61);
      }
      int v35 = -1431655765 * ((uint64_t)(*(void *)(v33 + 8) - *(void *)v33) >> 3);
      if (v35)
      {
        quasar::tokens2Str(*(uint64_t **)v33, &v60);
        if (quasar::gLogLevel >= 5)
        {
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v61 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
          char v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"PreITN 1-Best: ", 15);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v37 = &v60;
          }
          else {
            uint64_t v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
          }
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v60.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, size);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v61);
        }
        uint64_t v56 = a1;
        if (v35 >= 1)
        {
          for (uint64_t i = 0; i != v35; ++i)
          {
            uint64_t v40 = *v57;
            if (*(void *)(v33 + 8) - *(void *)v33 == v57[1] - *v57)
            {
              *(void *)&long long v61 = ",";
              *((void *)&v61 + 1) = 1;
              quasar::join<std::set<std::string>>((void *)(v40 + 24 * i), (uint64_t *)&v61);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "");
            }
            if (quasar::gLogLevel >= 5)
            {
              long long v76 = 0u;
              long long v77 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              long long v72 = 0u;
              long long v73 = 0u;
              long long v70 = 0u;
              long long v71 = 0u;
              long long v68 = 0u;
              long long v69 = 0u;
              long long v66 = 0u;
              long long v67 = 0u;
              long long v64 = 0u;
              long long v65 = 0u;
              long long v62 = 0u;
              long long v63 = 0u;
              long long v61 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"PreITN Choice: ", 15);
              char v41 = (void *)std::ostream::operator<<();
              int v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" muxIds: ", 9);
              if ((v59 & 0x80u) == 0) {
                unint64_t v43 = __p;
              }
              else {
                unint64_t v43 = (void **)__p[0];
              }
              if ((v59 & 0x80u) == 0) {
                uint64_t v44 = v59;
              }
              else {
                uint64_t v44 = (uint64_t)__p[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v61);
            }
            uint64_t v45 = (uint64_t *)(*(void *)v33 + 24 * i);
            uint64_t v46 = v45[1];
            uint64_t v47 = *v45;
            if (v46 != *v45)
            {
              uint64_t v48 = 0;
              unint64_t v49 = 0;
              int v50 = quasar::gLogLevel;
              do
              {
                if (v50 >= 5)
                {
                  long long v76 = 0u;
                  long long v77 = 0u;
                  long long v74 = 0u;
                  long long v75 = 0u;
                  long long v72 = 0u;
                  long long v73 = 0u;
                  long long v70 = 0u;
                  long long v71 = 0u;
                  long long v68 = 0u;
                  long long v69 = 0u;
                  long long v66 = 0u;
                  long long v67 = 0u;
                  long long v64 = 0u;
                  long long v65 = 0u;
                  long long v62 = 0u;
                  long long v63 = 0u;
                  long long v61 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v61);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"PreITN Token[", 13);
                  long long v51 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"][", 2);
                  uint64_t v52 = (void *)std::ostream::operator<<();
                  unint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"]: ", 3);
                  quasar::operator<<(v53, *v45 + v48);
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v61);
                  int v50 = quasar::gLogLevel;
                  uint64_t v46 = v45[1];
                  uint64_t v47 = *v45;
                }
                ++v49;
                v48 += 224;
              }
              while (0x6DB6DB6DB6DB6DB7 * ((v46 - v47) >> 5) > v49);
            }
            if ((char)v59 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        a1 = v56;
        a3 = a3;
      }
    }
    (*(void (**)(void, long long *, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), &v79, a3);
    *(void *)&long long v61 = v78;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
    quasar::RecogResult::~RecogResult((quasar::RecogResult *)&v79);
  }
LABEL_92:
  *(void *)&long long v79 = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
}

void sub_1B21EB528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  a22 = (void **)&a57;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a22);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a60);
  a60 = (void **)(v60 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a60);
  _Unwind_Resume(a1);
}

void sub_1B21EB548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  JUMPOUT(0x1B21EB5E8);
}

void sub_1B21EB55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_1B21EB570()
{
}

void sub_1B21EB57C()
{
}

void sub_1B21EB588()
{
}

void sub_1B21EB590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57)
{
  a57 = (void **)&a19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a57);
  JUMPOUT(0x1B21EB600);
}

void sub_1B21EB5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void **a60)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a21) < 0) {
    operator delete(a19);
  }
  a22 = (void **)&a57;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a22);
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a60);
  a60 = (void **)(v60 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a60);
  _Unwind_Resume(a1);
}

uint64_t *quasar::ResultStreamStabilizer::limitTokenTimestamp(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (a3)
  {
    __int16 v12 = 0;
    double result = quasar::Align::MakeMonotonic(a2, (unsigned char *)&v12 + 1, &v12);
    BOOL v6 = (uint64_t *)*a2;
    long long v7 = (uint64_t *)a2[1];
    if ((uint64_t *)*a2 != v7)
    {
      uint32x2_t v8 = (uint32x2_t)vdup_n_s32(a3);
      do
      {
        uint64_t v9 = *v6;
        uint64_t v10 = v6[1];
        while (v9 != v10)
        {
          *(uint32x2_t *)(v9 + 28) = vmin_u32(*(uint32x2_t *)(v9 + 28), v8);
          unsigned int v11 = *(_DWORD *)(v9 + 36);
          if (v11 >= a3) {
            unsigned int v11 = a3;
          }
          *(_DWORD *)(v9 + 36) = v11;
          v9 += 224;
        }
        v6 += 3;
      }
      while (v6 != v7);
    }
  }
  return result;
}

uint64_t quasar::join<std::set<std::string>>(void *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::set<std::string>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B21EB824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ResultStreamStabilizer::writeFinalWithFormattedResultChoices()
{
  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This class is internal to Quasar, and this function is never called");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

uint64_t quasar::ResultStreamStabilizer::reportEndPointStatus(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 64))();
}

uint64_t quasar::ResultStreamStabilizer::reportHighResolutionRecognitionProgress(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 80))();
}

uint64_t quasar::ResultStreamStabilizer::reportRecognitionProgress(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 72))();
}

uint64_t quasar::ResultStreamStabilizer::reportRecognizerProgressStatus(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

uint64_t quasar::ResultStreamStabilizer::reportPause(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 88))();
}

uint64_t quasar::ResultStreamStabilizer::reportResume(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 96))();
}

uint64_t quasar::ResultStreamStabilizer::writeEndPointData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24));
}

uint64_t quasar::ResultStreamStabilizer::endpoint(quasar::ResultStreamStabilizer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 120))();
}

std::string *quasar::ResultStreamStabilizer::getPartialResultsInfo@<X0>(quasar::ResultStreamStabilizer *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    uint64_t v3 = (long long *)*((void *)this + 57);
    uint64_t v4 = (long long *)*((void *)this + 58);
  }
  else
  {
    uint64_t v3 = (long long *)*((void *)this + 60);
    uint64_t v4 = (long long *)*((void *)this + 61);
  }
  return std::vector<std::pair<std::string,int>>::__init_with_size[abi:ne180100]<std::pair<std::string,int>*,std::pair<std::string,int>*>(a3, v3, v4, ((char *)v4 - (char *)v3) >> 5);
}

uint64_t std::deque<std::vector<std::string>>::pop_front(int64x2_t *a1)
{
  uint64_t v3 = (void **)(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0xAAuLL)) + 24 * (a1[2].i64[0] % 0xAAuLL));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1B255E5F0);
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

std::string *std::deque<std::vector<std::string>>::push_back(void *a1, long long **a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::vector<std::string>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  char v8 = (std::string *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  double result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v8, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++a1[5];
  return result;
}

uint64_t std::vector<std::unordered_map<std::string,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return std::vector<std::unordered_map<std::string,unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (result != v7)
      uint64_t result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

void quasar::ResultStreamStabilizer::~ResultStreamStabilizer(quasar::ResultStreamStabilizer *this)
{
  quasar::ResultStreamStabilizer::~ResultStreamStabilizer(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void **v6;

  *(void *)this = &unk_1F0A563D0;
  unint64_t v6 = (void **)((char *)this + 480);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 456);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 424);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 400);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 376);
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v2 = (void *)*((void *)this + 44);
  if (v2)
  {
    *((void *)this + 45) = v2;
    operator delete(v2);
  }
  unint64_t v6 = (void **)((char *)this + 328);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  unint64_t v6 = (void **)((char *)this + 280);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 256);
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v3 = (void *)*((void *)this + 29);
  if (v3)
  {
    *((void *)this + 3std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v3;
    operator delete(v3);
  }
  unint64_t v6 = (void **)((char *)this + 208);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  unint64_t v6 = (void **)((char *)this + 128);
  std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::deque<std::vector<std::string>>::~deque[abi:ne180100]((void *)this + 10);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  BOOL v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  quasar::RecogResultStreamBase::~RecogResultStreamBase(this);
}

quasar::RecogResult *quasar::RecogResult::RecogResult(quasar::RecogResult *this, const quasar::RecogResult *a2)
{
  *(void *)this = &unk_1F0A51F20;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  long long v4 = *(_OWORD *)((char *)a2 + 24);
  long long v5 = *(_OWORD *)((char *)a2 + 40);
  long long v6 = *(_OWORD *)((char *)a2 + 56);
  *((void *)this + 9) = *((void *)a2 + 9);
  *(_OWORD *)((char *)this + 56) = v6;
  *(_OWORD *)((char *)this + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v5;
  *(_OWORD *)((char *)this + 24) = v4;
  uint64_t v7 = *((void *)a2 + 11);
  *((void *)this + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 10);
  *((void *)this + 11) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)a2 + 13);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)this + 13) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = *((_OWORD *)a2 + 7);
  long long v10 = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 9) = v10;
  *((_OWORD *)this + 7) = v9;
  uint64_t v11 = *((void *)a2 + 21);
  *((void *)this + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a2 + 20);
  *((void *)this + 21) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)this + 176) = *((unsigned char *)a2 + 176);
  if (*((char *)a2 + 207) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), *((const std::string::value_type **)a2 + 23), *((void *)a2 + 24));
  }
  else
  {
    long long v12 = *(_OWORD *)((char *)a2 + 184);
    *((void *)this + 25) = *((void *)a2 + 25);
    *(_OWORD *)((char *)this + 184) = v12;
  }
  long long v13 = *((_OWORD *)a2 + 13);
  *((void *)this + 28) = *((void *)a2 + 28);
  *((_OWORD *)this + 13) = v13;
  *((unsigned char *)this + 232) = *((unsigned char *)a2 + 232);
  if (*((char *)a2 + 263) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 10, *((const std::string::value_type **)a2 + 30), *((void *)a2 + 31));
  }
  else
  {
    long long v14 = *((_OWORD *)a2 + 15);
    *((void *)this + 32) = *((void *)a2 + 32);
    *((_OWORD *)this + 15) = v14;
  }
  long long v15 = *(_OWORD *)((char *)a2 + 264);
  *((void *)this + 35) = *((void *)a2 + 35);
  *(_OWORD *)((char *)this + 264) = v15;
  long long v16 = *((_OWORD *)a2 + 18);
  *(_OWORD *)((char *)this + 30std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)((char *)a2 + 300);
  *((_OWORD *)this + 18) = v16;
  *((unsigned char *)this + 32std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((unsigned char *)a2 + 320);
  if (*((char *)a2 + 351) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 328), *((const std::string::value_type **)a2 + 41), *((void *)a2 + 42));
  }
  else
  {
    long long v17 = *(_OWORD *)((char *)a2 + 328);
    *((void *)this + 43) = *((void *)a2 + 43);
    *(_OWORD *)((char *)this + 328) = v17;
  }
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  std::vector<std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>>::__init_with_size[abi:ne180100]<std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>*,std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>*>((char *)this + 352, *((uint64_t **)a2 + 44), *((uint64_t **)a2 + 45), (uint64_t)(*((void *)a2 + 45) - *((void *)a2 + 44)) >> 3);
  return this;
}

void sub_1B21EBE0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 263) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 207) < 0) {
    operator delete(*v2);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 168);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  long long v6 = *(std::__shared_weak_count **)(v1 + 104);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 88);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>>::__init_with_size[abi:ne180100]<std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>*,std::pair<quasar::LmeDataStatus,quasar::LmeUsageStatus>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B21EBEDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::vector<std::string>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    long long v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    long long v4 = a1 + 5;
    unint64_t v5 = a1[4];
    long long v6 = &v2[v5 / 0xAA];
    uint64_t v7 = (void **)((char *)*v6 + 24 * (v5 % 0xAA));
    unint64_t v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != (void **)v8)
    {
      do
      {
        long long v15 = v7;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
        v7 += 3;
        if ((char *)v7 - (unsigned char *)*v6 == 4080)
        {
          long long v9 = (void **)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (void **)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *long long v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 85;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    long long v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::vector<std::set<std::string>>::__assign_with_size[abi:ne180100]<std::set<std::string>*,std::set<std::string>*>(uint64_t a1, const void ***a2, const void ***a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(uint64_t ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::set<std::string>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string>*,std::set<std::string>*,std::set<std::string>*>(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    long long v13 = (uint64_t **)&a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<std::string> *,std::set<std::string> *,std::set<std::string> *,0>((uint64_t)a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string>*,std::set<std::string>*,std::set<std::string>*>(v8, (const void ***)v13, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<std::string> *,std::set<std::string> *,std::set<std::string> *,0>((uint64_t)a2, (uint64_t **)a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      uint64_t v17 = v16 - 24;
      std::__tree<std::string>::destroy(v16 - 24, *(char **)(v16 - 16));
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1B21EC308(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B21EC310(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::set<std::string> *,std::set<std::string> *,std::set<std::string> *,0>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  long long v4 = (uint64_t **)a1;
  if ((uint64_t **)a1 != a2)
  {
    long long v6 = (void *)(a1 + 8);
    do
    {
      if (v4 != a3) {
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a3, *v4, v6);
      }
      v4 += 3;
      a3 += 3;
      v6 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

std::string *std::vector<std::pair<std::string,int>>::__init_with_size[abi:ne180100]<std::pair<std::string,int>*,std::pair<std::string,int>*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*,std::pair<std::string,int>*,std::pair<std::string,int>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B21EC3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*,std::pair<std::string,int>*,std::pair<std::string,int>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  uint64_t v12 = this;
  long long v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  uint64_t v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      LODWORD(v4[1].__r_.__value_.__l.__data_) = *((_DWORD *)v6 + 6);
      v6 += 2;
      long long v4 = (std::string *)((char *)v8 + 32);
      long long v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1B21EC4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,int>>,std::pair<std::string,int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::deque<std::vector<std::string>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    long long v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B21EC7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::string,unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    BOOL v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    void v16[3] = &v12[40 * v11];
    uint64_t v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)BOOL v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1B21EC970(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::getPronunciationsFromOrthography(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  quasar::getPronunciationsFromOrthography(a1, a2, a3, a4, 0, (quasar::LmeDataFactoryBase::PronSet *)v12);
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)a5 = a5 + 8;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v12);
  uint64_t v7 = v6 + 1;
  unint64_t v8 = *v6;
  if (*v6 != (const void **)(v6 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a5, v8 + 5, (uint64_t)(v8 + 5));
      unint64_t v9 = (const void **)v8[1];
      if (v9)
      {
        do
        {
          unint64_t v10 = (const void ***)v9;
          unint64_t v9 = (const void **)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v10 = (const void ***)v8[2];
          BOOL v11 = *v10 == v8;
          unint64_t v8 = (const void **)v10;
        }
        while (!v11);
      }
      unint64_t v8 = (const void **)v10;
    }
    while (v10 != v7);
  }
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v12, v13);
}

void sub_1B21ECA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::string>::destroy(v11, *(char **)(v11 + 8));
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void quasar::getPronunciationsFromOrthography(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, quasar::LmeDataFactoryBase::PronSet *a6@<X8>)
{
  v46[0] = 0;
  v46[1] = 0;
  uint64_t v47 = 0;
  quasar::TextSanitizer::sanitize(a2, a1);
  if (quasar::gLogLevel >= 4)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    memset(v30, 0, sizeof(v30));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Sanitization returned empty string", 34);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v30);
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  uint64_t v11 = (quasar::QsrText *)(*(uint64_t (**)(uint64_t, void **, long long ***))(*(void *)a3 + 16))(a3, v46, &v27);
  uint64_t v12 = v27;
  uint64_t v13 = v28;
  if (v27 == v28)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      memset(v30, 0, sizeof(v30));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Tokenizer returned empty tokens", 31);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v30);
    }
    quasar::LmeDataFactoryBase::PronSet::PronSet(a6);
  }
  else
  {
    do
    {
      BOOL v14 = *v12;
      uint64_t v15 = v12[1];
      while (v14 != v15)
      {
        if (*((char *)v14 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v30, *(const std::string::value_type **)v14, *((void *)v14 + 1));
        }
        else
        {
          long long v16 = *v14;
          *(void *)&v30[16] = *((void *)v14 + 2);
          *(_OWORD *)long long v30 = v16;
        }
        uint64_t v17 = quasar::QsrText::SingletonInstance(v11);
        uint64_t v11 = (quasar::QsrText *)quasar::QsrText::encodeTokenQsrTextWithMetadata(v17, (std::string *)v30, (std::string *)v14);
        if ((v30[23] & 0x80000000) != 0) {
          operator delete(*(void **)v30);
        }
        v14 += 2;
      }
      v12 += 4;
    }
    while (v12 != v13);
    quasar::PronGuessStats::PronGuessStats((quasar::PronGuessStats *)v25);
    quasar::G2P::getProns(a4, &v27, v25, a5, v24);
    quasar::LmeDataFactoryBase::PronSet::PronSet(a6);
    quasar::LmeDataFactoryBase::PronSet::insert((uint64_t)a6, v24);
    BOOL v18 = quasar::LmeDataFactoryBase::PronSet::empty(a6);
    if (quasar::gLogLevel > 3 && v18)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
      memset(v30, 0, sizeof(v30));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      int64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Pronguesser returned empty prons for orthography ", 49);
      int v21 = *(char *)(a1 + 23);
      if (v21 >= 0) {
        uint64_t v22 = a1;
      }
      else {
        uint64_t v22 = *(void *)a1;
      }
      if (v21 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v23 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v30);
    }
    *(void *)long long v30 = v24;
    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
    std::__tree<std::string>::destroy((uint64_t)v26, v26[1]);
  }
  *(void *)long long v30 = &v27;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
  if (SHIBYTE(v47) < 0) {
    operator delete(v46[0]);
  }
}

void sub_1B21ECD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  long long __p = &a22;
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v30 - 97) < 0) {
    operator delete(*(void **)(v30 - 120));
  }
  _Unwind_Resume(a1);
}

void quasar::writeUserDataToJsonFile(uint64_t a1, void *a2)
{
  quasar::userDataToPtree(a2, a1, 0, (quasar::PTree *)v5);
  quasar::PTree::PTree((quasar::PTree *)v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "profile");
  quasar::PTree::putChild((uint64_t)v4, (uint64_t)__p, (uint64_t)v5, 1);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  quasar::PTree::writeJsonToFile();
}

void sub_1B21ECEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  quasar::PTree::~PTree((quasar::PTree *)(v16 - 80));
  _Unwind_Resume(a1);
}

quasar::LmeConfig *quasar::LmeConfig::LmeConfig(quasar::LmeConfig *this, const quasar::SystemConfig *a2)
{
  *(void *)this = 0x1400000032;
  *((_DWORD *)this + 2) = 2;
  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(a2);
  quasar::SystemConfig::Version::Version(&v6, 218, 0);
  if (quasar::SystemConfig::Version::operator>=(__p, &v6))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
    quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
  }
  return this;
}

void sub_1B21ED0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void quasar::LmeDataFactory::LmeDataFactory(void *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = quasar::LmeDataFactoryBase::LmeDataFactoryBase(a1);
  *unint64_t v2 = &unk_1F0A52828;
  *((_DWORD *)v2 + 2) = 0;
  v2[2] = 0;
  v2[3] = 0;
  char v3 = (char *)operator new(0xA8uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)char v3 = &unk_1F0A60678;
  *(_OWORD *)(v3 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 34) = 3;
  *((void *)v3 + 19) = 0;
  *((void *)v3 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)v3 + 18) = 0;
  a1[4] = v3 + 24;
  a1[5] = v3;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 6));
}

void sub_1B21ED498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, quasar::SystemConfig *a11, uint64_t a12, fst::SymbolTable *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  int64_t v20 = (std::__shared_weak_count *)*((void *)v19 + 11);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  fst::SymbolTable::~SymbolTable(a13);
  int v21 = (std::__shared_weak_count *)*((void *)v19 + 5);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v19 + 3);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

void quasar::LmeDataFactory::~LmeDataFactory(quasar::LmeDataFactory *this)
{
  *(void *)this = &unk_1F0A52828;
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy((uint64_t)this + 2752, *((void **)this + 345));
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy((uint64_t)this + 2728, *((void **)this + 342));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 2704, *((void **)this + 339));
  if (*((char *)this + 2695) < 0) {
    operator delete(*((void **)this + 334));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 2616);
  uint64_t v5 = (void **)((char *)this + 2592);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 2568);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)((char *)this + 2544);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2504);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2464);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2424);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2384);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2344);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2304);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2264);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2224);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 2200, *((void **)this + 276));
  if (*((char *)this + 2183) < 0) {
    operator delete(*((void **)this + 270));
  }
  if (*((char *)this + 2159) < 0) {
    operator delete(*((void **)this + 267));
  }
  if (*((char *)this + 2135) < 0) {
    operator delete(*((void **)this + 264));
  }
  if (*((char *)this + 2111) < 0) {
    operator delete(*((void **)this + 261));
  }
  if (*((char *)this + 2087) < 0) {
    operator delete(*((void **)this + 258));
  }
  if (*((char *)this + 2063) < 0) {
    operator delete(*((void **)this + 255));
  }
  if (*((char *)this + 2039) < 0) {
    operator delete(*((void **)this + 252));
  }
  if (*((char *)this + 2015) < 0) {
    operator delete(*((void **)this + 249));
  }
  if (*((char *)this + 1991) < 0) {
    operator delete(*((void **)this + 246));
  }
  if (*((char *)this + 1967) < 0) {
    operator delete(*((void **)this + 243));
  }
  if (*((char *)this + 1943) < 0) {
    operator delete(*((void **)this + 240));
  }
  if (*((char *)this + 1919) < 0) {
    operator delete(*((void **)this + 237));
  }
  if (*((char *)this + 1895) < 0) {
    operator delete(*((void **)this + 234));
  }
  if (*((char *)this + 1871) < 0) {
    operator delete(*((void **)this + 231));
  }
  if (*((char *)this + 1847) < 0) {
    operator delete(*((void **)this + 228));
  }
  if (*((char *)this + 1807) < 0) {
    operator delete(*((void **)this + 223));
  }
  if (*((char *)this + 1783) < 0) {
    operator delete(*((void **)this + 220));
  }
  quasar::SystemConfig::~SystemConfig((quasar::LmeDataFactory *)((char *)this + 192));
  uint64_t v5 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  fst::SymbolTable::~SymbolTable((quasar::LmeDataFactory *)((char *)this + 48));
  char v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::LmeDataFactory::~LmeDataFactory(this);
  JUMPOUT(0x1B3EA8670);
}

std::string *quasar::LmeDataFactory::AddConfigOverride(uint64_t a1, unsigned __int8 *a2, const std::string *a3)
{
  if (*(_DWORD *)(a1 + 8)) {
    BOOL v6 = quasar::gLogLevel < 4;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"AddConfigOverride() can only be called before init()", 52);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v9);
  }
  *(void *)&v9[0] = a2;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2616, a2, (uint64_t)&std::piecewise_construct, (long long **)v9);
  return std::string::operator=((std::string *)(v7 + 40), a3);
}

void sub_1B21EDA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::LmeDataFactory::init(quasar::LmeDataFactory *this)
{
  if (*((_DWORD *)this + 2))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    *(_OWORD *)long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "LmeDataFactory already initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  char v3 = (std::string *)((char *)this + 192);
  uint64_t result = quasar::SystemConfig::readJsonFile((uint64_t)this + 192, (uint64_t)this + 96, (uint64_t *)this + 15, (uint64_t)this + 2616, 0, 0);
  if (result != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lme-create.");
    quasar::SystemConfig::setPrefix(v3, (const std::string *)__p);
    if (SBYTE7(v5) < 0) {
      operator delete(__p[0]);
    }
    quasar::LmeDataFactory::registerParams((quasar::QsrTextSymbolTable **)this);
    std::string::basic_string[abi:ne180100]<0>(__p, "lme-create");
    quasar::SystemConfig::readPtree((uint64_t)v3, (uint64_t)__p);
  }
  return result;
}

void sub_1B21EF670()
{
}

void sub_1B21EF684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  a27 = (void **)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a27);
  JUMPOUT(0x1B21EF7E4);
}

void sub_1B21EF6C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a32 < 0) {
    JUMPOUT(0x1B21EF6F8);
  }
  JUMPOUT(0x1B21EF7E4);
}

void sub_1B21EF704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  JUMPOUT(0x1B21EF7E4);
}

void sub_1B21EF748()
{
}

void sub_1B21EF754(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

void sub_1B21EF794(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char *a50)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  a50 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (a38 < 0) {
    operator delete(a33);
  }
  kaldi::Input::~Input((kaldi::Input *)&a32);
  quasar::PTree::~PTree((quasar::PTree *)&a39);
  a50 = &a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (a2 == 2 || a2 == 1)
  {
    uint64_t v52 = (fst *)__cxa_begin_catch(a1);
    unint64_t v53 = (void *)fst::cout(v52);
    long long v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"Error reading JSON config file: ", 32);
    long long v55 = (const char *)(*(uint64_t (**)(fst *))(*(void *)v52 + 16))(v52);
    size_t v56 = strlen(v55);
    int v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v57);
    __cxa_end_catch();
    JUMPOUT(0x1B21EF054);
  }
  JUMPOUT(0x1B21EF5C0);
}

void sub_1B21EF8EC()
{
}

void sub_1B21EF8F8()
{
}

uint64_t quasar::LmeDataFactory::registerParams(quasar::QsrTextSymbolTable **this)
{
  quasar::QsrTextSymbolTable::Register(this[4], (quasar::SystemConfig *)(this + 24), 2, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v6, "base-dict-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 220), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "base-dict-mapped-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base lexicon file, mmap-able (overrides text lexicon file)");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 223), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for the LME FST");
  quasar::SystemConfig::Register<float>((uint64_t)(this + 24), v6, (uint64_t)(this + 226), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-average-cost");
  std::string::basic_string[abi:ne180100]<0>(__p, "the cost of entering an LME FST");
  quasar::SystemConfig::Register<float>((uint64_t)(this + 24), v6, (uint64_t)this + 1812, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-deviation-cost");
  std::string::basic_string[abi:ne180100]<0>(__p, "the cost of deviating from an average size LME class");
  quasar::SystemConfig::Register<float>((uint64_t)(this + 24), v6, (uint64_t)(this + 227), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "supported-lme-template-plist");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-delimited LME template names, ordered by enrollment priority");
  char v3 = (char *)(this + 228);
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 228), (uint64_t)__p, 1, 18, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "supported-lme-template-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-delimited LME template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)v3, (uint64_t)__p, 1, 0, 0, 17, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "contacts-template-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "Quasar template name for user's contact names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 234), (uint64_t)__p, 1, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "appcontacts-template-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "Quasar template name for 3rd-party app contact names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 237), (uint64_t)__p, 1, 18, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-num-enumerated-contacts");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of contacts (e.g. in NT-contact and NT-appcontact) to allow in a user's profile");
  quasar::SystemConfig::Register<int>((uint64_t)(this + 24), v6, (uint64_t)this + 1820, (uint64_t)__p, 0, 18, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "just-in-time-template-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "Just in time LME template name");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 231), (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "tropical-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "When it is set to true, we will use tropical weight in the LME FST.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)(this + 24), v6, (uint64_t)this + 2658, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-phones-to-p2wp");
  std::string::basic_string[abi:ne180100]<0>(__p, "When pronunciations of an entity have fewer phones than this value, P2WP will be not used.");
  quasar::SystemConfig::Register<int>((uint64_t)(this + 24), v6, (uint64_t)this + 2660, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "p2wp-cost");
  std::string::basic_string[abi:ne180100]<0>(__p, "Extra cost applied to P2WP wordpiece representations.");
  quasar::SystemConfig::Register<float>((uint64_t)(this + 24), v6, (uint64_t)(this + 333), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "template-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Mapping from ACE category names to Quasar template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 240), (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "name-enumerator-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Mapping from Quasar template names to enumerator names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 243), (uint64_t)__p, 1, 3, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-prons-compound-word");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of pronunciations for compound words");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)(this + 24), v6, (uint64_t)(this + 337), (uint64_t)__p, 0, 14, 3, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "g2p-blacklist");
  std::string::basic_string[abi:ne180100]<0>(__p, "During G2P, empty prons will be returned for tokens listed in this file. File format: same as a lexicon text file (not hat encoded) with the prons removed so that only one column remains per line. Order does not matter.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 264), (uint64_t)__p, 0, 21, 0, 94, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "g2p-rewrite-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File format: If a rule is in the form of 'A -> B' (whitespace optional), then rewrite token A to token B before doing G2P. If a rule is in the form of 'A', then rewrite A to an empty string. This 2nd rule has the same format and effect as g2p-blacklist entries and therefore makes g2p-rewrite-file a superset of g2p-blacklist.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 267), (uint64_t)__p, 0, 95, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "name-scale-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "LME scale for specific Quasar template names");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 246), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "name-average-cost-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "the cost of entering an LME FST for a specific template");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 249), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "name-deviation-cost-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "the cost of deviating from an average size LME class for a specific template");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 252), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-entity-count-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Per-template map: If >= 0, maximum number of entities allowed. Additional entities are rejected.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 255), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-orthography-length-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Per-template map: If >= 0, maximum orthography length. Entries with any words that have longer orthography lengths are rejected.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 258), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-pronunciation-length-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Per-template map: If >= 0, maximum pronunciation length (# phonemes). Entries with longer pronunciations are rejected.");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 261), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "symbol-format");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::SystemConfig::Register<std::string>((uint64_t)(this + 24), v6, (uint64_t)(this + 270), (uint64_t)__p, 0, 25, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  MEMORY[0x1B3EA7B20](this + 220, "");
  MEMORY[0x1B3EA7B20](this + 223, "");
  this[226] = (quasar::QsrTextSymbolTable *)1065353216;
  *((_DWORD *)this + 454) = 0;
  MEMORY[0x1B3EA7B20](v3, "");
  MEMORY[0x1B3EA7B20](this + 231, "\\NT-inline");
  MEMORY[0x1B3EA7B20](this + 234, "\\NT-contact");
  MEMORY[0x1B3EA7B20](this + 237, "\\NT-appcontact");
  MEMORY[0x1B3EA7B20](this + 240, "");
  MEMORY[0x1B3EA7B20](this + 246, "");
  MEMORY[0x1B3EA7B20](this + 249, "");
  MEMORY[0x1B3EA7B20](this + 252, "");
  MEMORY[0x1B3EA7B20](this + 255, "");
  MEMORY[0x1B3EA7B20](this + 258, "");
  MEMORY[0x1B3EA7B20](this + 261, "");
  *((_DWORD *)this + 674) = 32;
  *((_DWORD *)this + 455) = 2000000000;
  return MEMORY[0x1B3EA7B20](this + 264, "");
}

void sub_1B21F0594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::WordpieceV2LmeSymbolFormat::getInstance(kaldi::quasar::WordpieceV2LmeSymbolFormat *this)
{
  {
    operator new();
  }
  return kaldi::quasar::WordpieceV2LmeSymbolFormat::getInstance(void)::singleton;
}

void sub_1B21F071C(_Unwind_Exception *a1)
{
}

uint64_t kaldi::quasar::WordpieceV1LmeSymbolFormat::getInstance(kaldi::quasar::WordpieceV1LmeSymbolFormat *this)
{
  {
    operator new();
  }
  return kaldi::quasar::WordpieceV1LmeSymbolFormat::getInstance(void)::singleton;
}

void sub_1B21F07C0(_Unwind_Exception *a1)
{
}

uint64_t kaldi::quasar::BILmeSymbolFormat::getInstance(kaldi::quasar::BILmeSymbolFormat *this)
{
  {
    operator new();
  }
  return kaldi::quasar::BILmeSymbolFormat::getInstance(void)::singleton;
}

void sub_1B21F0864(_Unwind_Exception *a1)
{
}

uint64_t kaldi::quasar::BIESLmeSymbolFormat::getInstance(kaldi::quasar::BIESLmeSymbolFormat *this)
{
  {
    operator new();
  }
  return kaldi::quasar::BIESLmeSymbolFormat::getInstance(void)::singleton;
}

void sub_1B21F0908(_Unwind_Exception *a1)
{
}

void *std::shared_ptr<quasar::Lexicon>::operator=[abi:ne180100]<quasar::Lexicon,std::default_delete<quasar::Lexicon>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<quasar::Lexicon>::shared_ptr[abi:ne180100]<quasar::Lexicon,std::default_delete<quasar::Lexicon>,void>((uint64_t *)&v6, a2);
  char v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void quasar::LmeDataFactory::getNameEnumeratorFromAceCategory(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  quasar::SystemConfig::aceCatToQuasarTemplate(a1 + 192, a2, &__p);
  quasar::LmeDataFactory::getNameEnumerator(a1, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1B21F09C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LmeDataFactory::getNameEnumerator(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 2200, (const void **)a2);
  if (a1 + 2208 == v8)
  {
    if (a3 && quasar::gLogLevel >= 4)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      long long v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Could not find enumerator for quasar template ", 46);
      int v14 = *(char *)(a2 + 23);
      if (v14 >= 0) {
        long long v15 = (const void *)a2;
      }
      else {
        long long v15 = *(const void **)a2;
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v16 = *(void *)(a2 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 56);
    uint64_t v9 = *(void *)(v8 + 64);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *a4 = v10;
    a4[1] = v9;
    if (a3 && quasar::gLogLevel >= 4)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v20 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v20);
      long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v20, (uint64_t)"Enumeration type:", 17);
      if (*(char *)(v10 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
      }
      else
      {
        long long v12 = *(_OWORD *)(v10 + 8);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_26:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v20);
    }
  }
}

void sub_1B21F0B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getMaxEntityCountFromQuasarTemplate(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 2424), a2);
  if (v2) {
    return *((unsigned int *)v2 + 10);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t quasar::LmeDataFactory::getMaxOrthographyLengthFromQuasarTemplate(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 2464), a2);
  if (v2) {
    return *((unsigned int *)v2 + 10);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t quasar::LmeDataFactory::getMaxNumEnumeratedContacts(quasar::LmeDataFactory *this)
{
  return *((unsigned int *)this + 455);
}

BOOL quasar::LmeDataFactory::isSupportedCategory(uint64_t a1, uint64_t a2, char a3)
{
  if (*(_DWORD *)(a1 + 8) != 1)
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, "LmeDataFactory not initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v22);
  }
  quasar::SystemConfig::aceCatToQuasarTemplate(a1 + 192, a2, &__p);
  uint64_t v6 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 2544), *(void *)(a1 + 2552), (unsigned __int8 **)&__p);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(a1 + 2552);
  if (quasar::gLogLevel < 4) {
    char v9 = 1;
  }
  else {
    char v9 = a3;
  }
  if (v6 == v8)
  {
    if (v9) {
      goto LABEL_23;
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    long long v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Checking category \"", 19);
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = *(void *)a2;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    long long v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\": Not supported", 16);
  }
  else
  {
    if (v9) {
      goto LABEL_23;
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Checking category \"", 19);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\": Supported", 12);
  }
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v22);
LABEL_23:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7 != v8;
}

uint64_t quasar::LmeDataFactory::startNewSpeaker(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) != 1)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v7, "LmeDataFactory not initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v7);
  }
  *(_OWORD *)(a1 + 144) = xmmword_1B25A17B0;
  *(_OWORD *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = xmmword_1B25A17C0;
  *(unsigned char *)(a1 + 184) = 0;
  if (quasar::gLogLevel >= 4)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v7 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Starting LME for new speaker.", 29);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v7);
  }
  long long v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = quasar::LmeDataFactory::setAotLmeData(a1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v5;
}

uint64_t quasar::LmeDataFactory::setAotLmeData(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long __s1 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "LmeDataFactory not initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  if (!*(unsigned char *)(a1 + 184)) {
    quasar::LmeData::LmeData((quasar::LmeData *)&v2);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long __s1 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    long long v3 = 0u;
    long long v4 = 0u;
    long long v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v2, (uint64_t)"AOT LME data has already been provided.", 39);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v2);
  }
  return 6;
}

void sub_1B21F1404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t quasar::LmeDataFactory::getLmeTypeFromUserData(uint64_t a1, void *a2)
{
  long long v40 = 0;
  unint64_t v41 = 0;
  long long v39 = (uint64_t *)&v40;
  long long v2 = a2 + 1;
  long long v3 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
LABEL_39:
    uint64_t v19 = 5;
    goto LABEL_40;
  }
  uint64_t v5 = a1 + 192;
  long long v6 = (unsigned __int8 **)(a1 + 1848);
  do
  {
    quasar::SystemConfig::aceCatToQuasarTemplate(v5, (uint64_t)(v3 + 4), (std::string *)__n);
    size_t v7 = __n[1];
    if ((SBYTE7(v22) & 0x80u) == 0) {
      size_t v8 = BYTE7(v22);
    }
    else {
      size_t v8 = __n[1];
    }
    uint64_t v9 = *(unsigned __int8 *)(a1 + 1871);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a1 + 1856);
    }
    if (v8 == v9)
    {
      if (v10 >= 0) {
        long long v11 = (unsigned __int8 *)v6;
      }
      else {
        long long v11 = *v6;
      }
      if ((BYTE7(v22) & 0x80) != 0)
      {
        if (!memcmp((const void *)__n[0], v11, __n[1]))
        {
LABEL_26:
          int v38 = 1;
          v42[0] = &v38;
          long long v15 = std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::piecewise_construct_t const&,std::tuple<quasar::LmeDataFactoryBase::LmeType&&>,std::tuple<>>(&v39, &v38, (uint64_t)&std::piecewise_construct, v42);
          goto LABEL_28;
        }
        goto LABEL_22;
      }
      if (!BYTE7(v22)) {
        goto LABEL_26;
      }
      long long v12 = __n;
      uint64_t v13 = BYTE7(v22);
      while (*(unsigned __int8 *)v12 == *v11)
      {
        long long v12 = (size_t *)((char *)v12 + 1);
        ++v11;
        if (!--v13) {
          goto LABEL_26;
        }
      }
    }
    if ((BYTE7(v22) & 0x80) == 0)
    {
      if (BYTE7(v22) != 8) {
        goto LABEL_25;
      }
      long long v14 = __n;
      goto LABEL_24;
    }
LABEL_22:
    if (v7 != 8) {
      goto LABEL_25;
    }
    long long v14 = (size_t *)__n[0];
LABEL_24:
    if (*v14 != 0x7A7A75622D544E5CLL)
    {
LABEL_25:
      int v38 = 0;
      v42[0] = &v38;
      long long v15 = std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::piecewise_construct_t const&,std::tuple<quasar::LmeDataFactoryBase::LmeType&&>,std::tuple<>>(&v39, &v38, (uint64_t)&std::piecewise_construct, v42);
      goto LABEL_28;
    }
    int v38 = 2;
    v42[0] = &v38;
    long long v15 = std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::piecewise_construct_t const&,std::tuple<quasar::LmeDataFactoryBase::LmeType&&>,std::tuple<>>(&v39, &v38, (uint64_t)&std::piecewise_construct, v42);
LABEL_28:
    *((unsigned char *)v15 + 32) = 1;
    if (SBYTE7(v22) < 0) {
      operator delete((void *)__n[0]);
    }
    long long v16 = (void *)v3[1];
    if (v16)
    {
      do
      {
        long long v17 = v16;
        long long v16 = (void *)*v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        long long v17 = (void *)v3[2];
        BOOL v18 = *v17 == (void)v3;
        long long v3 = v17;
      }
      while (!v18);
    }
    long long v3 = v17;
  }
  while (v17 != v2);
  if (v41 > 1)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    *(_OWORD *)std::vector<char>::size_type __n = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__n);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__n, (uint64_t)"Multipe LmeType in single user data is not supported.", 53);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__n);
  }
  if (!v41) {
    goto LABEL_39;
  }
  uint64_t v19 = *((unsigned int *)v39 + 7);
LABEL_40:
  std::__tree<int>::destroy((uint64_t)&v39, v40);
  return v19;
}

void sub_1B21F16A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__tree<int>::destroy(v14 - 128, *(void **)(v14 - 120));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getLmeData(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t *a12)
{
  if (a1[2] != 1)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    memset(v36, 0, sizeof(v36));
    long long v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v34, "LmeDataFactory not initialized.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v34);
  }
  quasar::getUserDataTemplateNames(a2, a11, (uint64_t)v33);
  unsigned int LmeTypeFromUserData = quasar::LmeDataFactory::getLmeTypeFromUserData((uint64_t)a1, v33);
  *a8 = LmeTypeFromUserData;
  if (LmeTypeFromUserData == 5)
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      memset(v36, 0, sizeof(v36));
      long long v34 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"is UserData empty? not able to tell which lmeType from userData which has size: ", 80);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v34);
    }
    uint64_t v21 = 5;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      memset(v36, 0, sizeof(v36));
      long long v34 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
      long long v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"generate Lme Data for lmeType: ", 31);
      quasar::operator<<(v22, *a8);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v34);
    }
    long long v34 = 0u;
    long long v35 = 0u;
    LODWORD(v36[0]) = 1065353216;
    memset((char *)v36 + 8, 0, 32);
    DWORD2(v36[2]) = 1065353216;
    uint64_t v23 = *a9;
    *a9 = 0;
    uint64_t v32 = v23;
    long long v24 = (std::__shared_weak_count *)a10[1];
    uint64_t v30 = *a10;
    long long v31 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = *a12;
    *a12 = 0;
    uint64_t v29 = v25;
    uint64_t v21 = (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, unsigned int *, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *, uint64_t, uint64_t *))(*(void *)a1 + 56))(a1, a2, a3, a8, &v34, a4, a5, a6, a7, &v32, &v30, a11, &v29);
    uint64_t v26 = v29;
    uint64_t v29 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    uint64_t v27 = v32;
    uint64_t v32 = 0;
    if (v27) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v36 + 8);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v34);
  }
  std::__tree<std::string>::destroy((uint64_t)v33, (char *)v33[1]);
  return v21;
}

uint64_t *quasar::getUserDataTemplateNames@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  if (a2)
  {
    long long v4 = *(const void ***)(a2 + 16);
    uint64_t v5 = (const void ***)(a2 + 24);
    if (v4 != (const void **)(a2 + 24))
    {
      do
      {
        uint64_t result = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, v4 + 4, (uint64_t)(v4 + 4));
        long long v6 = (const void **)v4[1];
        if (v6)
        {
          do
          {
            size_t v7 = (const void ***)v6;
            long long v6 = (const void **)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            size_t v7 = (const void ***)v4[2];
            BOOL v8 = *v7 == v4;
            long long v4 = (const void **)v7;
          }
          while (!v8);
        }
        long long v4 = (const void **)v7;
      }
      while (v7 != v5);
    }
  }
  else
  {
    uint64_t v9 = result + 1;
    int v10 = (const void **)*result;
    if ((uint64_t *)*result != result + 1)
    {
      do
      {
        uint64_t result = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, v10 + 4, (uint64_t)(v10 + 4));
        long long v11 = (uint64_t *)v10[1];
        if (v11)
        {
          do
          {
            long long v12 = v11;
            long long v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            long long v12 = (uint64_t *)v10[2];
            BOOL v8 = *v12 == (void)v10;
            int v10 = (const void **)v12;
          }
          while (!v8);
        }
        int v10 = (const void **)v12;
      }
      while (v12 != v9);
    }
  }
  return result;
}

void sub_1B21F1B50(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getLmeData(uint64_t a1, uint64_t *a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t a12, uint64_t *a13)
{
  if (*(_DWORD *)(a1 + 8) != 1)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long __str_16 = 0u;
    long long v37 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__str, "LmeDataFactory not initialized.");
    goto LABEL_44;
  }
  if (!quasar::LmeDataFactory::isWordpieceAllowed && *(unsigned char *)(a1 + 1736))
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long __str_16 = 0u;
    long long v37 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__str, "Wordpiece LME is disallowed");
LABEL_44:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__str);
  }
  if (!*a4) {
    *(unsigned char *)(a1 + 184) = 1;
  }
  if (!*a11) {
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar7LmeDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  quasar::getUserDataTemplateNames(a2, a12, (uint64_t)&v57);
  if (v58[1])
  {
    *(_DWORD *)(*a11 + 264) = a3;
    SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)(a1 + 192));
    std::string::operator=((std::string *)(*a11 + 176), SpeechModelInfo + 6);
    *(unsigned char *)(*a11 + 392) = *(unsigned char *)(a1 + 1736);
    quasar::SystemConfig::getLmeAssetPath((quasar::SystemConfig *)(a1 + 192), (std::string *)&__str);
    std::string::operator=((std::string *)(*a11 + 296), (const std::string *)&__str);
    BOOL v18 = a4;
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    uint64_t v19 = v57;
    if (v57 != v58)
    {
      do
      {
        quasar::SystemConfig::aceCatToQuasarTemplate(a1 + 192, (uint64_t)(v19 + 4), (std::string *)&__str);
        quasar::LmeDataFactory::getNameEnumerator(a1, (uint64_t)&__str, 0, &v55);
        if (v55)
        {
          if (*(char *)(v55 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v55 + 8), *(void *)(v55 + 16));
          }
          else
          {
            long long v20 = *(_OWORD *)(v55 + 8);
            v34.__r_.__value_.__r.__words[2] = *(void *)(v55 + 24);
            *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v20;
          }
          uint64_t v21 = (uint64_t **)(*a11 + 240);
          unsigned __int8 v59 = (long long *)(v19 + 4);
          long long v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, (const void **)v19 + 4, (uint64_t)&std::piecewise_construct, &v59);
          uint64_t v23 = (void **)(v22 + 7);
          if (*((char *)v22 + 79) < 0) {
            operator delete(*v23);
          }
          *(std::string *)uint64_t v23 = v34;
        }
        if (v56) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v56);
        }
        if (SBYTE7(__str_16) < 0) {
          operator delete((void *)__str);
        }
        long long v24 = v19[1];
        if (v24)
        {
          do
          {
            uint64_t v25 = (char **)v24;
            long long v24 = *(char **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            uint64_t v25 = (char **)v19[2];
            BOOL v26 = *v25 == (char *)v19;
            uint64_t v19 = v25;
          }
          while (!v26);
        }
        uint64_t v19 = v25;
      }
      while (v25 != v58);
    }
    if (*(unsigned char *)(a1 + 1736) || *(_DWORD *)(a1 + 1752))
    {
      if (a12)
      {
        uint64_t v27 = *(void *)(a12 + 8);
        *(void *)&long long __str = &unk_1F0A382C8;
        *((void *)&__str + 1) = v27;
        ++*(_DWORD *)(v27 + 168);
        std::map<std::string,std::vector<std::vector<quasar::LmePackedWord>>>::map[abi:ne180100]((uint64_t *)&__str_16, (const void ***)(a12 + 16));
      }
      else
      {
        quasar::LmePackedUserData::LmePackedUserData(&__str, a2);
      }
      uint64_t v28 = *a10;
      *a10 = 0;
      uint64_t v29 = *a13;
      *a13 = 0;
      uint64_t v52 = v29;
      uint64_t v53 = v28;
      quasar::LmeDataFactory::getLmeDataImplV2();
    }
    if (a12) {
      quasar::LmePackedUserData::unpacked((quasar::LmePackedUserData *)a12, (uint64_t)&__str);
    }
    else {
      std::map<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>::map[abi:ne180100]((uint64_t *)&__str, (const void ***)a2);
    }
    uint64_t v30 = *a11;
    uint64_t v31 = *(void *)(a1 + 8 * *v18 + 144);
    uint64_t v32 = *a10;
    *a10 = 0;
    uint64_t v54 = v32;
    quasar::LmeDataFactory::getLmeDataImplV1(a1, (uint64_t)&__str, v30, v31);
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long __str_16 = 0u;
    long long v37 = 0u;
    long long __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"User data is empty", 18);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__str);
  }
  std::__tree<std::string>::destroy((uint64_t)&v57, v58[0]);
  return 5;
}

void quasar::LmeDataFactory::getLmeDataImplV1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a4;
  std::string __p = **(void ***)(a1 + 16);
  v5[0] = (void *)(a1 + 48);
  v6[0] = 0;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::LmeFst,std::allocator<kaldi::quasar::LmeFst>,kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &,void>((uint64_t)&v4, (uint64_t *)&__p, (uint64_t *)v5, &v8, v6, (unsigned __int8 *)(a1 + 2656));
}

void sub_1B21F3368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a59);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a24);
  std::ostringstream::~ostringstream((uint64_t)&a26);
  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)&STACK[0x2B0]);
  kaldi::quasar::Lexicon::~Lexicon((kaldi::quasar::Lexicon *)&STACK[0x2F8]);
  STACK[0x2F8] = v59 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F8]);
  STACK[0x2F8] = v59 - 216;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F8]);
  long long v61 = *(std::__shared_weak_count **)(v59 - 144);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  _Unwind_Resume(a1);
}

void quasar::LmeDataFactory::getLmeDataImplV2()
{
  if (quasar::gLogLevel >= 5)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v2 = 0u;
    long long v3 = 0u;
    long long __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Build start", 11);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  }
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)v0);
}

void sub_1B21F4B28()
{
}

void sub_1B21F4B30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B21F4C00);
}

void sub_1B21F4B54()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1B21F4F60);
}

void sub_1B21F4B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::WordPronCache::~WordPronCache((quasar::WordPronCache *)&STACK[0x330]);
  uint64_t v72 = MEMORY[0x1E4FBA418];
  a62 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a62 + *(void *)(a62 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a63 = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a71);
  }
  std::streambuf::~streambuf(&a63);
  std::ostream::~ostream(&a62, v72 + 8);
  MEMORY[0x1B3EA8520](&STACK[0x218]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(&STACK[0x2D8], STACK[0x2E0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(&STACK[0x2F0]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

void sub_1B21F4B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54)
{
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  JUMPOUT(0x1B21F4E70);
}

void sub_1B21F4BB8()
{
}

void sub_1B21F4BC8()
{
}

void sub_1B21F4BD8()
{
}

void sub_1B21F4BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,char a44,char *a45)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&STACK[0x330]);
  uint64_t v46 = *(void *)(v45 - 168);
  *(void *)(v45 - 168) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  std::__tree<std::string>::destroy((uint64_t)&a44, a45);
  (*(void (**)(uint64_t))(*(void *)a27 + 8))(a27);
  JUMPOUT(0x1B21F4E60);
}

void sub_1B21F4BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x330]);
  a62 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a62 + *(void *)(a62 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a63 = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&STACK[0x218]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&STACK[0x2D8], (void *)STACK[0x2E0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

void sub_1B21F4C14()
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  uint64_t v1 = *(void *)(v0 - 168);
  *(void *)(v0 - 168) = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B21F4E20);
}

void sub_1B21F4C48()
{
}

void sub_1B21F4C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  a62 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a62 + *(void *)(a62 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a63 = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a71);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&STACK[0x218]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&STACK[0x2D8], (void *)STACK[0x2E0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

void sub_1B21F4C74()
{
}

void sub_1B21F4C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (!v71)
  {
    uint64_t v73 = MEMORY[0x1E4FBA418];
    a62 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&a62 + *(void *)(a62 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    a63 = MEMORY[0x1E4FBA470] + 16;
    if (SLOBYTE(STACK[0x207]) < 0) {
      operator delete(a71);
    }
    std::streambuf::~streambuf(&a63);
    std::ostream::~ostream(&a62, v73 + 8);
    MEMORY[0x1B3EA8520](&STACK[0x218]);
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(&STACK[0x2D8], STACK[0x2E0]);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(&STACK[0x2F0]);
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x320]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B21F4E68);
}

void sub_1B21F4C94()
{
}

void sub_1B21F4CD4()
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  JUMPOUT(0x1B21F4F58);
}

void sub_1B21F4CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39)
{
  if (*(char *)(v39 - 169) < 0) {
    operator delete(*(void **)(v39 - 192));
  }
  *(void *)(v39 - 192) = &STACK[0x330];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 192));
  STACK[0x330] = (unint64_t)&a36;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(v39 - 168, *(char **)(v39 - 160));
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  *(void *)(v39 - 168) = &a39;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 168));
  JUMPOUT(0x1B21F4E20);
}

void sub_1B21F4CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(v39 - 168, *(void *)(v39 - 160));
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  *(void *)(v39 - 168) = &a39;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](v39 - 168);
  JUMPOUT(0x1B21F4E20);
}

void sub_1B21F4D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v72 = MEMORY[0x1E4FBA418];
  a62 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a62 + *(void *)(a62 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a63 = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a71);
  }
  std::streambuf::~streambuf(&a63);
  std::ostream::~ostream(&a62, v72 + 8);
  MEMORY[0x1B3EA8520](&STACK[0x218]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(&STACK[0x2D8], STACK[0x2E0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(&STACK[0x2F0]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

void sub_1B21F4D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&STACK[0x330]);
  a62 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a62 + *(void *)(a62 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a63 = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a71);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520](&STACK[0x218]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&STACK[0x2D8], (void *)STACK[0x2E0]);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&STACK[0x2F0]);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&STACK[0x320]);
  _Unwind_Resume(a1);
}

void sub_1B21F4D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  STACK[0x330] = (unint64_t)&a36;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x330]);
  JUMPOUT(0x1B21F4E10);
}

void sub_1B21F4D38()
{
}

void sub_1B21F4D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  std::__tree<std::string>::destroy(&a44, a45);
  (*(void (**)(uint64_t))(*(void *)a27 + 8))(a27);
  JUMPOUT(0x1B21F4E60);
}

void sub_1B21F4D4C()
{
}

void sub_1B21F4DAC()
{
}

void sub_1B21F4DBC()
{
  if (*(char *)(v0 - 193) < 0) {
    operator delete(*(void **)(v0 - 216));
  }
  *(void *)(v0 - 216) = v0 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 216));
  JUMPOUT(0x1B21F4DF8);
}

void sub_1B21F4DD4()
{
}

void quasar::LmePackedUserData::~LmePackedUserData(quasar::LmePackedUserData *this)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
  fst::SymbolTable::~SymbolTable(this);
}

void quasar::WordPronCache::setPronCache(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(a1 + 24, *(void **)(a1 + 32));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)&v2);
}

void sub_1B21F5070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::LmeDataFactory::processUserData(uint64_t a1, const void ***a2, uint64_t *a3, uint64_t *a4, const quasar::LmeDataFactoryBase::Word *a5, quasar::WordPronCache *a6, uint64_t **a7, uint64_t a8, unint64_t *a9)
{
  long long v14 = (void *)(a8 + 8);
  std::__tree<std::string>::destroy(a8, *(char **)(a8 + 8));
  *(void *)a8 = v14;
  uint64_t v59 = (uint64_t **)a8;
  *(void *)(a8 + 16) = 0;
  *long long v14 = 0;
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  while (v16 != v15)
  {
    v16 -= 24;
    *(void *)&long long v71 = v16;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  }
  a3[1] = v15;
  std::vector<std::string>::__clear[abi:ne180100](a4);
  v93[0] = 0;
  v93[1] = 0;
  uint64_t v91 = 0;
  long long v92 = (uint64_t *)v93;
  long long v89 = 0;
  long long v90 = 0;
  quasar::LmeDataFactory::getPrioritizedUserDataKeys(a1, a2, (uint64_t *)&v89);
  long long v17 = v89;
  BOOL v18 = v90;
  if (v89 == v90) {
    goto LABEL_58;
  }
  do
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__erase_unique<std::string>(a7, v17);
    v17 += 3;
  }
  while (v17 != v18);
  uint64_t v19 = (uint64_t)v89;
  long long v65 = v90;
  if (v89 == v90)
  {
LABEL_58:
    char v45 = 1;
LABEL_59:
    uint64_t v46 = v92;
    if (v92 != (uint64_t *)v93)
    {
      do
      {
        std::vector<std::vector<std::string>>::vector<std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,0>((std::string *)&v71, (void *)v46[7], v46 + 8);
        long long v47 = (long long *)(v46 + 4);
        unint64_t v48 = a4[1];
        if (v48 >= a4[2])
        {
          uint64_t v49 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, v47);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v47);
          uint64_t v49 = v48 + 24;
        }
        a4[1] = v49;
        std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100](a3, (uint64_t)&v71);
        v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
        long long v50 = (uint64_t *)v46[1];
        if (v50)
        {
          do
          {
            long long v51 = v50;
            long long v50 = (uint64_t *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            long long v51 = (uint64_t *)v46[2];
            BOOL v52 = *v51 == (void)v46;
            uint64_t v46 = v51;
          }
          while (!v52);
        }
        uint64_t v46 = v51;
      }
      while (v51 != (uint64_t *)v93);
    }
    if (v45)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v71 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
        uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"No supported templates were found in userData. Only the templates specified under ", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"\"supported-lme-template-list\" in the json config file are supported.", 68);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
      }
      uint64_t v54 = 5;
    }
    else
    {
      uint64_t v54 = 0;
    }
  }
  else
  {
    int v57 = 0;
    uint64_t v63 = a1;
    uint64_t v64 = a1 + 192;
    int v58 = (void *)(a1 + 2504);
    size_t v56 = a3;
    while (1)
    {
      quasar::SystemConfig::aceCatToQuasarTemplate(v64, v19, &v88);
      if (quasar::gLogLevel >= 4)
      {
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v71 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
        long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Getting LME data for userDataKey = ", 35);
        int v21 = *(char *)(v19 + 23);
        if (v21 >= 0) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = *(void *)v19;
        }
        if (v21 >= 0) {
          uint64_t v23 = *(unsigned __int8 *)(v19 + 23);
        }
        else {
          uint64_t v23 = *(void *)(v19 + 8);
        }
        long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
        uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" quasarTemplateName = ", 22);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v26 = &v88;
        }
        else {
          BOOL v26 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v88.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, size);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
      }
      quasar::LmeDataFactory::getNameEnumerator(a1, (uint64_t)&v88, 1, &v69);
      uint64_t v28 = v69;
      if (v69)
      {
        long long v71 = 0u;
        long long v72 = 0u;
        LODWORD(v73) = 1065353216;
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        uint64_t v29 = std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, (const void **)&v88.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v66);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 24))(v28))
        {
          uint64_t v30 = (long long ***)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)a2, (const void **)v19);
          uint64_t v31 = v70;
          v68[0] = v28;
          v68[1] = v70;
          if (v70) {
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v32 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v58, (unsigned __int8 *)&v88);
          if (v32) {
            unsigned int v33 = *((_DWORD *)v32 + 10);
          }
          else {
            unsigned int v33 = -1;
          }
          BOOL isContactTemplate = quasar::LmeDataFactory::isContactTemplate(v63, (uint64_t)&v88);
          if (isContactTemplate) {
            int v40 = (*(_DWORD *)(v63 + 1820) - v57) & ~((*(_DWORD *)(v63 + 1820) - v57) >> 31);
          }
          else {
            int v40 = -1;
          }
          a3 = v56;
          int Enumerations = quasar::LmeDataFactory::getEnumerations(isContactTemplate, v30, a6, a5, (uint64_t)&v71, (uint64_t)(v29 + 7), v68, v33, v40, a9);
          v66.__r_.__value_.__r.__words[0] = v19;
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59, (const void **)v19, (uint64_t)&std::piecewise_construct, (long long **)&v66)+ 14) = Enumerations;
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
        }
        else
        {
          long long v35 = (long long ***)std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)a2, (const void **)v19);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v67, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          }
          else {
            std::string v67 = v88;
          }
          long long v36 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v58, (unsigned __int8 *)&v88);
          if (v36) {
            unsigned int v38 = *((_DWORD *)v36 + 10);
          }
          else {
            unsigned int v38 = -1;
          }
          int appended = quasar::LmeDataFactory::appendNames((uint64_t)v36, v35, v37, a6, a5, (uint64_t)&v71, (uint64_t **)v29 + 7, v38, a9);
          v66.__r_.__value_.__r.__words[0] = v19;
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59, (const void **)v19, (uint64_t)&std::piecewise_construct, (long long **)&v66)+ 14) = appended;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
        }
        a1 = v63;
        if (quasar::LmeDataFactory::isContactTemplate(v63, (uint64_t)&v88)) {
          int v57 = *((_DWORD *)v29 + 18);
        }
        if (*(char *)(v28 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(v28 + 8), *(void *)(v28 + 16));
        }
        else
        {
          long long v43 = *(_OWORD *)(v28 + 8);
          v66.__r_.__value_.__r.__words[2] = *(void *)(v28 + 24);
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v43;
        }
        BOOL v44 = quasar::EnumerationTypes::insert(a7, v19, (long long *)&v66);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        int v34 = !v44;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v71);
      }
      else
      {
        int v34 = 1;
      }
      if (v70) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if (v34) {
        break;
      }
      v19 += 24;
      if ((const void **)v19 == v65)
      {
        char v45 = 0;
        goto LABEL_59;
      }
    }
    uint64_t v54 = 1;
  }
  *(void *)&long long v71 = &v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy((uint64_t)&v92, v93[0]);
  return v54;
}

void sub_1B21F566C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a41 = v41 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy(v41 - 120, *(void **)(v41 - 112));
  _Unwind_Resume(a1);
}

float quasar::LmeDataFactory::getClassSizeCost(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  float v6 = *(float *)(a1 + 1812);
  long long v7 = a3 + 5;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3 + 5, a2))
  {
    long long v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v7, a2);
  }
  else
  {
    if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 2264), a2))goto LABEL_6; {
    long long v10 = a2;
    }
    long long v8 = std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2264, a2, (uint64_t)&std::piecewise_construct, (long long **)&v10);
  }
  float v6 = *((double *)v8 + 5);
LABEL_6:
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, a2))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a3, a2);
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 2384), a2))
  {
    long long v10 = a2;
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 2384, a2, (uint64_t)&std::piecewise_construct, (long long **)&v10);
  }
  return v6;
}

void quasar::LmeDataFactory::finishGetLmeDataImpl(uint64_t a1, uint64_t a2, uint64_t a3, const SymbolTable *a4, void *a5)
{
  long long v7 = (unsigned __int8 *)(a5 + 1);
  long long v8 = (unsigned __int8 *)*a5;
  if ((void *)*a5 != a5 + 1)
  {
    long long v10 = (void *)(a1 + 2224);
    do
    {
      float v11 = *(float *)(a1 + 1808);
      if (v11 != 1.0) {
        fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*((void *)v8 + 7), v11);
      }
      long long v12 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v10, v8 + 32);
      if (v12)
      {
        float v13 = *((double *)v12 + 5);
        fst::ApplyProbabilityScale<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*((void *)v8 + 7), v13);
      }
      *(void *)&long long v30 = v8 + 32;
      long long v14 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 200), (const void **)v8 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v30);
      uint64_t v16 = *((void *)v8 + 7);
      uint64_t v15 = *((void *)v8 + 8);
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      long long v17 = (std::__shared_weak_count *)v14[8];
      v14[7] = v16;
      v14[8] = v15;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      BOOL v18 = (unsigned __int8 *)*((void *)v8 + 1);
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          BOOL v18 = *(unsigned __int8 **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (unsigned __int8 *)*((void *)v8 + 2);
          BOOL v20 = *(void *)v19 == (void)v8;
          long long v8 = v19;
        }
        while (!v20);
      }
      long long v8 = v19;
    }
    while (v19 != v7);
  }
  if (*(uint64_t *)(a2 + 168) > 0) {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  LODWORD(v47) = 3;
  std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,fst::SymbolTable const&,quasar::TextEncoding,void>(a4, (int *)&v47, &v30);
  long long v22 = v30;
  long long v30 = 0uLL;
  uint64_t v23 = *(std::__shared_weak_count **)(a2 + 232);
  *(_OWORD *)(a2 + 224) = v22;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (*((void *)&v30 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
    }
  }
  if (quasar::gLogLevel >= 6)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Created lmeData.symTable", 24);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v30);
  }
  quasar::printSymTableToTraceLog(*(quasar **)(a2 + 224), v21);
  if (*(uint64_t *)(a2 + 168) >= 1 && quasar::gLogLevel >= 4)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"Original lmeData.symTableFirstKey = ", 36);
    long long v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", Original lmeData.symTableLastKey = ", 37);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v30);
  }
  if (quasar::QsrTextSymbolTable::NumSymbols(*(quasar::QsrTextSymbolTable **)(a2 + 224)))
  {
    *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = a3;
    uint64_t v25 = *(void *)(a2 + 224);
    uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(v25 + 96) + 112))(*(void *)(v25 + 96));
    if ((v26 & 0x8000000000000000) == 0) {
      v26 += *(void *)(v25 + 120);
    }
    uint64_t v27 = v26 - 1;
  }
  else
  {
    uint64_t v27 = -1;
    *(void *)(a2 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = -1;
  }
  *(void *)(a2 + 168) = v27;
  if (quasar::gLogLevel >= 4)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"New lmeData.symTableFirstKey = ", 31);
    uint64_t v28 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", New lmeData.symTableLastKey = ", 32);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v30);
  }
}

void sub_1B21F5C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::LmeDataFactory::encodeAndFilterEntity(std::string **a1@<X0>, const quasar::LmeDataFactoryBase::Word *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v3 = *a1;
  long long v4 = (long long *)a1[1];
  if (*a1 != (std::string *)v4)
  {
    do
    {
      if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v24, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v7 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
        v24.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v7;
      }
      if (SHIBYTE(v3[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, v3[1].__r_.__value_.__l.__data_, v3[1].__r_.__value_.__l.__size_);
      }
      else
      {
        long long v8 = *(_OWORD *)&v3[1].__r_.__value_.__l.__data_;
        v25.__r_.__value_.__r.__words[2] = v3[1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v8;
      }
      int data = (int)v3[2].__r_.__value_.__l.__data_;
      long long v9 = std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&v27, (uint64_t)&v3[2].__r_.__value_.__l.__size_);
      uint64_t v10 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v9);
      if (quasar::QsrText::encodeTokenQsrTextWithMetadata(v10, v3, &v24))
      {
        if (quasar::LmeDataFactory::wordIsLegal((quasar::LmeDataFactory *)&v24, a2))
        {
          unint64_t v11 = a3[1];
          if (v11 >= a3[2])
          {
            uint64_t v22 = std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word>(a3, (uint64_t)&v24);
          }
          else
          {
            long long v12 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
            *(void *)(v11 + 16) = *((void *)&v24.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v11 = v12;
            memset(&v24, 0, sizeof(v24));
            std::string::size_type v13 = v25.__r_.__value_.__r.__words[2];
            *(_OWORD *)(v11 + 24) = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
            *(void *)(v11 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v13;
            memset(&v25, 0, sizeof(v25));
            *(_DWORD *)(v11 + 48) = data;
            *(void *)(v11 + 56) = v27;
            long long v14 = v28;
            *(void *)(v11 + 64) = v28;
            unint64_t v15 = v11 + 64;
            uint64_t v16 = v29;
            *(void *)(v11 + 72) = v29;
            if (v16)
            {
              *((void *)v14 + 2) = v15;
              uint64_t v27 = &v28;
              uint64_t v28 = 0;
              uint64_t v29 = 0;
            }
            else
            {
              *(void *)(v11 + 56) = v15;
            }
            uint64_t v22 = v11 + 80;
            a3[1] = v11 + 80;
          }
          a3[1] = v22;
        }
      }
      else if (quasar::gLogLevel >= 5)
      {
        memset(v23, 0, sizeof(v23));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Skipping illegal word: \"", 24);
        int v18 = SHIBYTE(v3->__r_.__value_.__r.__words[2]);
        if (v18 >= 0) {
          uint64_t v19 = (const std::string::value_type *)v3;
        }
        else {
          uint64_t v19 = (const std::string::value_type *)v3->__r_.__value_.__r.__words[0];
        }
        if (v18 >= 0) {
          uint64_t size = HIBYTE(v3->__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t size = v3->__r_.__value_.__l.__size_;
        }
        int v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v23);
      }
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v27, v28);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      long long v3 = (std::string *)((char *)v3 + 80);
    }
    while (v3 != (std::string *)v4);
  }
}

void sub_1B21F5EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)(v9 - 176));
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::wordIsLegal(quasar::LmeDataFactory *this, const quasar::LmeDataFactoryBase::Word *a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)this + 1);
  }
  if (v2)
  {
    int v3 = (int)a2;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v43);
    int v5 = *((char *)this + 23);
    if (v5 >= 0) {
      float v6 = this;
    }
    else {
      float v6 = *(quasar::LmeDataFactory **)this;
    }
    if (v5 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)this + 23);
    }
    else {
      uint64_t v7 = *((void *)this + 1);
    }
    for (; v7; --v7)
    {
      LOBYTE(v26[0]) = 48;
      long long v8 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, (char *)v26);
      uint64_t v9 = *v8;
      *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
      *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(v9 - 24) + 8) & 0xFFFFFFB5 | 8;
      uint64_t v10 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
      float v6 = (quasar::LmeDataFactory *)((char *)v6 + 1);
    }
    if ((*((_DWORD *)this + 12) & 0x80000000) != 0)
    {
      if (quasar::gLogLevel >= 2)
      {
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        *(_OWORD *)uint64_t v26 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
        uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Word with hex sequence ", 23);
        std::stringbuf::str();
        if ((v25 & 0x80u) == 0) {
          long long v17 = __p;
        }
        else {
          long long v17 = (void **)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          uint64_t v18 = v25;
        }
        else {
          uint64_t v18 = (uint64_t)__p[1];
        }
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"has frequency ", 14);
        std::ostream::operator<<();
        if ((char)v25 < 0) {
          operator delete(__p[0]);
        }
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v26);
      }
    }
    else
    {
      if (!quasar::LmeDataFactoryBase::PronSet::empty((quasar::LmeDataFactory *)((char *)this + 56)))
      {
        if ((v3 & 0x80000000) == 0)
        {
          quasar::Bitmap::~Bitmap((quasar::LmeDataFactory *)((char *)this + 56));
          int v21 = (void *)*v20;
          if ((void *)*v20 != v20 + 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v26, ".");
            quasar::splitStringSimple((uint64_t)(v21 + 5), (uint64_t *)v26, (unint64_t)__p);
          }
        }
        uint64_t v15 = 1;
        goto LABEL_40;
      }
      if (quasar::gLogLevel >= 5)
      {
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        *(_OWORD *)uint64_t v26 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
        unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Word has no prons, orthography=", 31);
        int v12 = *((char *)this + 23);
        if (v12 >= 0) {
          std::string::size_type v13 = this;
        }
        else {
          std::string::size_type v13 = *(quasar::LmeDataFactory **)this;
        }
        if (v12 >= 0) {
          uint64_t v14 = *((unsigned __int8 *)this + 23);
        }
        else {
          uint64_t v14 = *((void *)this + 1);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v26);
      }
    }
    uint64_t v15 = 0;
LABEL_40:
    *(void *)&long long v43 = *MEMORY[0x1E4FBA408];
    uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(void *)((char *)&v44[-2] + *(void *)(v43 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
    v44[0] = v22;
    v44[1] = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v46) < 0) {
      operator delete(*((void **)&v45 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1B3EA8520](v48);
    return v15;
  }
  if (quasar::gLogLevel >= 2)
  {
    long long v47 = 0u;
    memset(v48, 0, 144);
    long long v45 = 0u;
    long long v46 = 0u;
    memset(v44, 0, sizeof(v44));
    long long v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Word has empty orthography", 26);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v43);
  }
  return 0;
}

void sub_1B21F64BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **p_p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a53);
  _Unwind_Resume(a1);
}

double quasar::LmeDataFactory::getLengthPenalty(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = (void *)(a1 + 2304);
  int v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 2304), a2);
  if (v3) {
    return *((double *)v3 + 5);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  int v3 = v4;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
      return *((double *)v3 + 5);
    }
    return 0.0;
  }
  if (!v4) {
    return 0.0;
  }
  return *((double *)v3 + 5);
}

void sub_1B21F65F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double quasar::LmeDataFactory::getLengthPenaltyCutoff(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = (void *)(a1 + 2344);
  int v3 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 2344), a2);
  if (v3) {
    return *((double *)v3 + 5);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  int v3 = v4;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v3) {
      return *((double *)v3 + 5);
    }
    return 0.0;
  }
  if (!v4) {
    return 0.0;
  }
  return *((double *)v3 + 5);
}

void sub_1B21F668C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmeDataFactory::getMaxPronLen(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 2504), a2);
  if (v2) {
    return *((unsigned int *)v2 + 10);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

void *std::shared_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::operator=[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::default_delete<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::shared_ptr[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::default_delete<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void>((uint64_t *)&v6, a2);
  int v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void quasar::LmeDataFactory::getPrioritizedUserDataKeys(uint64_t a1, const void ***a2, uint64_t *a3)
{
  long long v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = &v27;
  int v5 = a2 + 1;
  long long v6 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v26, v6 + 4, (uint64_t)(v6 + 4));
      char v7 = (const void **)v6[1];
      if (v7)
      {
        do
        {
          long long v8 = (const void ***)v7;
          char v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (const void ***)v6[2];
          BOOL v9 = *v8 == v6;
          long long v6 = (const void **)v8;
        }
        while (!v9);
      }
      long long v6 = (const void **)v8;
    }
    while (v8 != v5);
  }
  std::vector<std::string>::__clear[abi:ne180100](a3);
  uint64_t v10 = *(const void ***)(a1 + 2592);
  unint64_t v11 = *(const void ***)(a1 + 2600);
  while (v10 != v11)
  {
    int v12 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v26, v10);
    uint64_t v13 = (uint64_t)v12;
    if (&v27 != v12)
    {
      uint64_t v14 = (long long *)(v12 + 4);
      unint64_t v15 = a3[1];
      if (v15 >= a3[2])
      {
        uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v14);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v14);
        uint64_t v16 = v15 + 24;
      }
      a3[1] = v16;
      std::__tree<std::string>::erase((uint64_t **)&v26, v13);
    }
    v10 += 3;
  }
  if (v28)
  {
    long long v17 = (uint64_t *)v26;
    if (v26 != &v27)
    {
      int v18 = quasar::gLogLevel;
      do
      {
        if (v18 >= 5)
        {
          memset(v25, 0, sizeof(v25));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Ignoring user data key ", 23);
          int v20 = *((char *)v17 + 55);
          if (v20 >= 0) {
            uint64_t v21 = (uint64_t)(v17 + 4);
          }
          else {
            uint64_t v21 = v17[4];
          }
          if (v20 >= 0) {
            uint64_t v22 = *((unsigned __int8 *)v17 + 55);
          }
          else {
            uint64_t v22 = v17[5];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v25);
          int v18 = quasar::gLogLevel;
        }
        uint64_t v23 = (char *)v17[1];
        if (v23)
        {
          do
          {
            std::string v24 = (char **)v23;
            uint64_t v23 = *(char **)v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            std::string v24 = (char **)v17[2];
            BOOL v9 = *v24 == (char *)v17;
            long long v17 = (uint64_t *)v24;
          }
          while (!v9);
        }
        long long v17 = (uint64_t *)v24;
      }
      while (v24 != &v27);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v26, v27);
}

void sub_1B21F691C(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1 - 88, *(char **)(v1 - 80));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::getEnumerations(uint64_t a1, long long ***a2, quasar::WordPronCache *a3, const quasar::LmeDataFactoryBase::Word *a4, uint64_t a5, uint64_t a6, void *a7, unsigned int a8, int a9, unint64_t *a10)
{
  int v23[4] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a6 + 16);
  v23[0] = &unk_1F0A5A548;
  v23[1] = quasar::LmeDataFactory::wordIsNotLegal;
  std::__fs::filesystem::path v23[2] = a8;
  _DWORD v23[3] = v23;
  unint64_t v11 = *a2;
  int v12 = a2[1];
  if (*a2 == v12)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    if (a9 < 0) {
      LODWORD(v1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
    }
    unint64_t v18 = (v10 + a9);
    while (1)
    {
      memset(&v22, 0, sizeof(v22));
      std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(&v22, *v11, v11[1], 0xCCCCCCCCCCCCCCCDLL * (v11[1] - *v11));
      if (quasar::LmeDataFactory::processName((uint64_t)&v22, a3, a4, a5, (uint64_t)v23, a10))
      {
        (*(void (**)(void, std::string *, uint64_t))(*(void *)*a7 + 16))(*a7, &v22, a6);
        uint64_t v17 = (v17 + 1);
      }
      if ((v18 & 0x80000000) == 0 && *(void *)(a6 + 16) > v18) {
        break;
      }
      *(void *)&v21[0] = &v22;
      std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
      v11 += 3;
      if (v11 == v12) {
        goto LABEL_15;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      memset(v21, 0, sizeof(v21));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Exceeded enumeration limit. Stopped enumerating.", 48);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v21);
    }
    *(void *)&v21[0] = &v22;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  }
LABEL_15:
  std::__function::__value_func<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::~__value_func[abi:ne180100](v23);
  return v17;
}

void sub_1B21F6B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a11);
  a11 = (void **)(v11 - 152);
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__function::__value_func<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::~__value_func[abi:ne180100]((void *)(v11 - 128));
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::appendNames(uint64_t a1, long long ***a2, uint64_t a3, quasar::WordPronCache *a4, const quasar::LmeDataFactoryBase::Word *a5, uint64_t a6, uint64_t **a7, unsigned int a8, unint64_t *a9)
{
  void v34[4] = *MEMORY[0x1E4F143B8];
  v34[0] = &unk_1F0A5A548;
  v34[1] = quasar::LmeDataFactory::wordIsNotLegal;
  v34[2] = a8;
  v34[3] = v34;
  BOOL v9 = *a2;
  uint64_t v26 = a2[1];
  if (*a2 == v26)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      memset(&v32, 0, sizeof(v32));
      std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(&v32, *v9, v9[1], 0xCCCCCCCCCCCCCCCDLL * (v9[1] - *v9));
      if (quasar::LmeDataFactory::processName((uint64_t)&v32, a4, a5, a6, (uint64_t)v34, a9))
      {
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
        for (std::string::size_type i = v32.__r_.__value_.__r.__words[0]; i != size; i += 80)
        {
          memset(&v31, 0, sizeof(v31));
          std::to_string(&v30, *(_DWORD *)(i + 48));
          std::vector<std::string>::pointer end = v31.__end_;
          if (v31.__end_ >= v31.__end_cap_.__value_)
          {
            unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_ - (char *)v31.__begin_) >> 3);
            unint64_t v18 = v17 + 1;
            if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) > v18) {
              unint64_t v18 = 0x5555555555555556 * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v31.__end_cap_.__value_ - (char *)v31.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v19 = v18;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v31.__end_cap_;
            if (v19) {
              int v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v31.__end_cap_, v19);
            }
            else {
              int v20 = 0;
            }
            uint64_t v21 = v20 + v17;
            __v.__first_ = v20;
            __v.__begin_ = v21;
            __v.__end_cap_.__value_ = &v20[v19];
            long long v22 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
            v21->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
            memset(&v30, 0, sizeof(v30));
            __v.__end_ = v21 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v31, &__v);
            std::vector<std::string>::pointer v16 = v31.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            v31.__end_ = v16;
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v30.__r_.__value_.__l.__data_);
              std::vector<std::string>::pointer v16 = v31.__end_;
            }
          }
          else
          {
            long long v15 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
            v31.__end_->__r_.__value_.__r.__words[2] = v30.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
            std::vector<std::string>::pointer v16 = end + 1;
            v31.__end_ = end + 1;
          }
          if (v16 >= v31.__end_cap_.__value_)
          {
            std::string v24 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v31, (long long *)i);
          }
          else
          {
            if (*(char *)(i + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)i, *(void *)(i + 8));
            }
            else
            {
              long long v23 = *(_OWORD *)i;
              v16->__r_.__value_.__r.__words[2] = *(void *)(i + 16);
              *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v23;
            }
            std::string v24 = v16 + 1;
          }
          v31.__end_ = v24;
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(a7, &v31, (long long **)&v31);
          uint64_t v11 = (v11 + 1);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&v31;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        }
      }
      __v.__first_ = &v32;
      std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      v9 += 3;
    }
    while (v9 != v26);
  }
  std::__function::__value_func<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::~__value_func[abi:ne180100](v34);
  return v11;
}

void sub_1B21F6E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__pa, std::__split_buffer<std::wstring> *a19)
{
  std::__function::__value_func<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::~__value_func[abi:ne180100]((void *)(v19 - 128));
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<std::string>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<std::string>>>::__swap_out_circular_buffer(a1, v16);
    long long v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer(v16);
  }
  else
  {
    *char v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)char v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    long long v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B21F7034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::LmeDataFactory::processName(uint64_t a1, quasar::WordPronCache *a2, const quasar::LmeDataFactoryBase::Word *a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  v47[4] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = *(std::string **)a1;
  unint64_t v12 = *(void **)(a1 + 8);
  std::__function::__value_func<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::__value_func[abi:ne180100]((uint64_t)v47, a5);
  uint64_t v13 = std::remove_if[abi:ne180100]<std::__wrap_iter<quasar::LmeDataFactoryBase::Word *>,std::function<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>>(v11, v12, (uint64_t)v47);
  std::vector<quasar::LmeDataFactoryBase::Word>::erase(a1, (uint64_t)v13, *(long long **)(a1 + 8));
  uint64_t v14 = (quasar::QsrText *)std::__function::__value_func<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::~__value_func[abi:ne180100](v47);
  uint64_t v15 = *(std::string **)a1;
  std::vector<std::string>::pointer v16 = *(std::string **)(a1 + 8);
  if (*(std::string **)a1 != v16)
  {
    while (1)
    {
      memset(&__str, 0, sizeof(__str));
      uint64_t v17 = quasar::QsrText::SingletonInstance(v14);
      if (!quasar::QsrText::encodeTokenQsrTextWithMetadata(v17, v15, &__str)) {
        break;
      }
      std::string::operator=(v15, &__str);
      unint64_t v18 = quasar::LmeDataFactoryBase::PronSet::size((quasar::LmeDataFactoryBase::PronSet *)&v15[2].__r_.__value_.__r.__words[1]);
      unint64_t v19 = *a6;
      if (*a6 <= v18) {
        unint64_t v19 = v18;
      }
      *a6 = v19;
      if (a2) {
        quasar::WordPronCache::addWord(a2, v15, 3);
      }
      int v20 = SHIBYTE(v15[1].__r_.__value_.__r.__words[2]);
      if (v20 >= 0) {
        int data = (const std::string::value_type *)&v15[1];
      }
      else {
        int data = v15[1].__r_.__value_.__l.__data_;
      }
      if (v20 >= 0) {
        std::string::size_type size = HIBYTE(v15[1].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v15[1].__r_.__value_.__l.__size_;
      }
      std::string::append(v15, data, size);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)&v15[1], (uint64_t)&v15[1]);
      uint64_t v14 = (quasar::QsrText *)quasar::LmeDataFactory::addWordToPronLexicon((quasar::LmeDataFactory *)v15, a3, v23);
      if ((v14 & 1) == 0)
      {
        if (quasar::gLogLevel >= 2)
        {
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v29 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Skipping name containing bad word", 33);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v29);
        }
        goto LABEL_28;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = (std::string *)((char *)v15 + 80);
      if (v15 == v16) {
        return 1;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v29 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
      unsigned __int8 v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Skipping name containing bad word:", 34);
      int v26 = SHIBYTE(v15->__r_.__value_.__r.__words[2]);
      if (v26 >= 0) {
        uint64_t v27 = (uint64_t)v15;
      }
      else {
        uint64_t v27 = v15->__r_.__value_.__r.__words[0];
      }
      if (v26 >= 0) {
        uint64_t v28 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t v28 = v15->__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v29);
    }
LABEL_28:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void sub_1B21F72BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  if (*(char *)(v9 - 105) < 0) {
    operator delete(*(void **)(v9 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::LmeDataFactoryBase::Word *,quasar::LmeDataFactoryBase::Word *,quasar::LmeDataFactoryBase::Word *>((uint64_t)&v9, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 80;
        std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

void *std::remove_if[abi:ne180100]<std::__wrap_iter<quasar::LmeDataFactoryBase::Word *>,std::function<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>>(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v5 = a1;
  while (1)
  {
    uint64_t v6 = *(void *)(a3 + 24);
    if (!v6) {
      goto LABEL_21;
    }
    if ((*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 48))(v6, v5)) {
      break;
    }
    v5 += 10;
    if (v5 == a2) {
      return a2;
    }
  }
  if (v5 == a2) {
    return a2;
  }
  if (v5 + 10 != a2)
  {
    for (std::string::size_type i = v5 + 17; ; i += 10)
    {
      uint64_t v8 = *(void *)(a3 + 24);
      if (!v8) {
        break;
      }
      if (((*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, i - 7) & 1) == 0)
      {
        if (*((char *)v5 + 23) < 0) {
          operator delete((void *)*v5);
        }
        long long v9 = *(_OWORD *)(i - 7);
        std::regex_traits<char> v5[2] = *(i - 5);
        *(_OWORD *)uint64_t v5 = v9;
        *((unsigned char *)i - 33) = 0;
        *((unsigned char *)i - 56) = 0;
        unint64_t v10 = (void **)(v5 + 3);
        if (*((char *)v5 + 47) < 0) {
          operator delete(*v10);
        }
        long long v11 = *((_OWORD *)i - 2);
        v5[5] = *(i - 2);
        *(_OWORD *)unint64_t v10 = v11;
        *((unsigned char *)i - 9) = 0;
        *((unsigned char *)i - 32) = 0;
        *((_DWORD *)v5 + 12) = *((_DWORD *)i - 2);
        std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__move_assign((uint64_t)(v5 + 7), i);
        v5 += 10;
      }
      unint64_t v12 = i + 3;
      if (v12 == a2) {
        return v5;
      }
    }
LABEL_21:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return v5;
}

uint64_t quasar::LmeDataFactory::addWordToPronLexicon(quasar::LmeDataFactory *this, const quasar::LmeDataFactoryBase::Word *a2, kaldi::quasar::Lexicon *a3)
{
  quasar::Bitmap::~Bitmap((quasar::LmeDataFactory *)((char *)this + 56));
  long long v4 = (void *)*v3;
  if ((void *)*v3 != v3 + 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".");
    quasar::splitStringSimple((uint64_t)(v4 + 5), (uint64_t *)__p, (unint64_t)v7);
  }
  return 1;
}

uint64_t quasar::LmeDataFactory::lookUpProns(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  uint64_t v6 = quasar::Lexicon::lookUpProns(v5, a2, a3, (char *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1B21F7700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::LmeDataFactory::applyG2PRewrite(std::string *a1, uint64_t a2)
{
  uint64_t result = (std::string *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&a1[112].__r_.__value_.__r.__words[2], (const void **)a2);
  if (&a1[113] != result)
  {
    uint64_t v5 = result;
    if (quasar::gLogLevel >= 5)
    {
      memset(v15, 0, sizeof(v15));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Rewriting from=", 15);
      int v7 = *(char *)(a2 + 23);
      if (v7 >= 0) {
        uint64_t v8 = (const void *)a2;
      }
      else {
        uint64_t v8 = *(const void **)a2;
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
      long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" to=", 4);
      int v12 = v5[3].__r_.__value_.__s.__data_[7];
      if (v12 >= 0) {
        p_std::string::size_type size = (uint64_t)&v5[2].__r_.__value_.__l.__size_;
      }
      else {
        p_std::string::size_type size = v5[2].__r_.__value_.__l.__size_;
      }
      if (v12 >= 0) {
        uint64_t v14 = v5[3].__r_.__value_.__s.__data_[7];
      }
      else {
        uint64_t v14 = v5[2].__r_.__value_.__r.__words[2];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, p_size, v14);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v15);
    }
    return std::string::operator=((std::string *)a2, (std::string *)((char *)v5 + 56));
  }
  return result;
}

void sub_1B21F7824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::LmeDataFactory::wordIsNotLegal(quasar::LmeDataFactory *this, const quasar::LmeDataFactoryBase::Word *a2)
{
  return quasar::LmeDataFactory::wordIsLegal(this, a2) ^ 1;
}

uint64_t **quasar::LmeDataFactory::setPronCache(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t **)(a1 + 2728);
  if (result != (uint64_t **)a2) {
    return std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__assign_multi<std::__tree_const_iterator<quasar::LmeDataFactoryBase::Word,std::__tree_node<quasar::LmeDataFactoryBase::Word,void *> *,long>>(result, *(long long **)a2, (long long *)(a2 + 8));
  }
  return result;
}

uint64_t **quasar::LmeDataFactory::setEmbeddingCache(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t **)(a1 + 2752);
  if (result != (uint64_t **)a2) {
    return std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__assign_multi<std::__tree_const_iterator<quasar::LmeDataFactoryBase::Word,std::__tree_node<quasar::LmeDataFactoryBase::Word,void *> *,long>>(result, *(long long **)a2, (long long *)(a2 + 8));
  }
  return result;
}

void kaldi::quasar::WordpieceV2LmeSymbolFormat::~WordpieceV2LmeSymbolFormat(kaldi::quasar::WordpieceV2LmeSymbolFormat *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

BOOL kaldi::quasar::WordpieceV2LmeSymbolFormat::IsWordPhoneOrDisambigSym(uint64_t a1, const void **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "/bpe-");
  size_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0) {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v4 = (unint64_t)a2[1];
  }
  unsigned __int8 v5 = v30;
  if ((char)v30 < 0)
  {
    size_t v6 = v29;
    if (v4 < v29)
    {
      BOOL v7 = 0;
      goto LABEL_28;
    }
LABEL_9:
    if ((v3 & 0x80) != 0)
    {
      if (v6 != -1)
      {
        if ((unint64_t)a2[1] >= v6) {
          size_t v8 = v6;
        }
        else {
          size_t v8 = (size_t)a2[1];
        }
        uint64_t v9 = (const void **)*a2;
LABEL_20:
        if ((v30 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        int v11 = memcmp(v9, p_p, v8);
        if (v8 != v6 || v11 != 0)
        {
          BOOL v7 = 0;
          if ((v5 & 0x80) == 0) {
            return v7;
          }
LABEL_28:
          operator delete(__p);
          return v7;
        }
        std::string::basic_string[abi:ne180100]<0>(v26, "_S/");
        unint64_t v14 = *((unsigned __int8 *)a2 + 23);
        unint64_t v15 = (unint64_t)a2[1];
        if ((v14 & 0x80u) == 0) {
          unint64_t v16 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          unint64_t v16 = (unint64_t)a2[1];
        }
        int v17 = (char)v27;
        if ((v27 & 0x80u) == 0) {
          size_t v18 = v27;
        }
        else {
          size_t v18 = (size_t)v26[1];
        }
        BOOL v19 = v16 >= v18;
        unint64_t v20 = v16 - v18;
        if (!v19)
        {
          BOOL v7 = 0;
          if (((char)v27 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        if ((v14 & 0x80) != 0)
        {
          if (v18 == -1 || v15 < v20) {
LABEL_66:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v15 - v20 >= v18) {
            size_t v22 = v18;
          }
          else {
            size_t v22 = v15 - v20;
          }
          a2 = (const void **)*a2;
        }
        else
        {
          if (v18 == -1) {
            goto LABEL_66;
          }
          BOOL v19 = v14 >= v20;
          size_t v21 = v14 - v20;
          if (!v19) {
            goto LABEL_66;
          }
          if (v21 >= v18) {
            size_t v22 = v18;
          }
          else {
            size_t v22 = v21;
          }
        }
        if ((v27 & 0x80u) == 0) {
          long long v23 = v26;
        }
        else {
          long long v23 = (void **)v26[0];
        }
        int v24 = memcmp((char *)a2 + v20, v23, v22);
        BOOL v7 = v22 == v18 && v24 == 0;
        if ((v17 & 0x80000000) == 0)
        {
LABEL_39:
          if ((v30 & 0x80) == 0) {
            return v7;
          }
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v26[0]);
        goto LABEL_39;
      }
    }
    else if (v6 != -1)
    {
      if (v3 >= v6) {
        size_t v8 = v6;
      }
      else {
        size_t v8 = *((unsigned __int8 *)a2 + 23);
      }
      uint64_t v9 = a2;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size_t v6 = v30;
  if (v4 >= v30) {
    goto LABEL_9;
  }
  return 0;
}

void sub_1B21F7A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::WordpieceV2LmeSymbolFormat::IsDisambigSym(uint64_t a1, const void **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "/bpe-disambig-");
  size_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0) {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v4 = (unint64_t)a2[1];
  }
  unsigned __int8 v5 = v30;
  if ((char)v30 < 0)
  {
    size_t v6 = v29;
    if (v4 < v29)
    {
      BOOL v7 = 0;
      goto LABEL_28;
    }
LABEL_9:
    if ((v3 & 0x80) != 0)
    {
      if (v6 != -1)
      {
        if ((unint64_t)a2[1] >= v6) {
          size_t v8 = v6;
        }
        else {
          size_t v8 = (size_t)a2[1];
        }
        uint64_t v9 = (const void **)*a2;
LABEL_20:
        if ((v30 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        int v11 = memcmp(v9, p_p, v8);
        if (v8 != v6 || v11 != 0)
        {
          BOOL v7 = 0;
          if ((v5 & 0x80) == 0) {
            return v7;
          }
LABEL_28:
          operator delete(__p);
          return v7;
        }
        std::string::basic_string[abi:ne180100]<0>(v26, "_S/");
        unint64_t v14 = *((unsigned __int8 *)a2 + 23);
        unint64_t v15 = (unint64_t)a2[1];
        if ((v14 & 0x80u) == 0) {
          unint64_t v16 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          unint64_t v16 = (unint64_t)a2[1];
        }
        int v17 = (char)v27;
        if ((v27 & 0x80u) == 0) {
          size_t v18 = v27;
        }
        else {
          size_t v18 = (size_t)v26[1];
        }
        BOOL v19 = v16 >= v18;
        unint64_t v20 = v16 - v18;
        if (!v19)
        {
          BOOL v7 = 0;
          if (((char)v27 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        if ((v14 & 0x80) != 0)
        {
          if (v18 == -1 || v15 < v20) {
LABEL_66:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v15 - v20 >= v18) {
            size_t v22 = v18;
          }
          else {
            size_t v22 = v15 - v20;
          }
          a2 = (const void **)*a2;
        }
        else
        {
          if (v18 == -1) {
            goto LABEL_66;
          }
          BOOL v19 = v14 >= v20;
          size_t v21 = v14 - v20;
          if (!v19) {
            goto LABEL_66;
          }
          if (v21 >= v18) {
            size_t v22 = v18;
          }
          else {
            size_t v22 = v21;
          }
        }
        if ((v27 & 0x80u) == 0) {
          long long v23 = v26;
        }
        else {
          long long v23 = (void **)v26[0];
        }
        int v24 = memcmp((char *)a2 + v20, v23, v22);
        BOOL v7 = v22 == v18 && v24 == 0;
        if ((v17 & 0x80000000) == 0)
        {
LABEL_39:
          if ((v30 & 0x80) == 0) {
            return v7;
          }
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v26[0]);
        goto LABEL_39;
      }
    }
    else if (v6 != -1)
    {
      if (v3 >= v6) {
        size_t v8 = v6;
      }
      else {
        size_t v8 = *((unsigned __int8 *)a2 + 23);
      }
      uint64_t v9 = a2;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size_t v6 = v30;
  if (v4 >= v30) {
    goto LABEL_9;
  }
  return 0;
}

void sub_1B21F7C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::WordpieceV2LmeSymbolFormat::BasePhonesToPosWordPhones(uint64_t a1, uint64_t *a2)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      std::operator+<char>();
      unint64_t v4 = std::string::append(&__p, "_S/");
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[0];
      v9[0] = v4->__r_.__value_.__l.__size_;
      *(void *)((char *)v9 + 7) = *(std::string::size_type *)((char *)&v4->__r_.__value_.__r.__words[1] + 7);
      char v6 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
      uint64_t v7 = v9[0];
      *(void *)uint64_t v2 = v5;
      *(void *)(v2 + 8) = v7;
      *(void *)(v2 + 15) = *(void *)((char *)v9 + 7);
      *(unsigned char *)(v2 + 23) = v6;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v2 += 24;
    }
    while (v2 != v3);
  }
}

void sub_1B21F7D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::WordpieceV1LmeSymbolFormat::~WordpieceV1LmeSymbolFormat(kaldi::quasar::WordpieceV1LmeSymbolFormat *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

BOOL kaldi::quasar::WordpieceV1LmeSymbolFormat::IsWordPhoneOrDisambigSym(uint64_t a1, uint64_t **a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "\\bpe");
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  unint64_t v4 = (unint64_t)a2[1];
  if ((v3 & 0x80u) == 0) {
    unint64_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v5 = (unint64_t)a2[1];
  }
  int v6 = (char)v19;
  if ((v19 & 0x80u) == 0) {
    size_t v7 = v19;
  }
  else {
    size_t v7 = (size_t)__p[1];
  }
  BOOL v11 = v5 >= v7;
  unint64_t v8 = v5 - v7;
  if (v11)
  {
    if ((v3 & 0x80) != 0)
    {
      if (v7 == -1 || v4 < v8) {
LABEL_40:
      }
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v4 - v8 >= v7) {
        size_t v13 = v7;
      }
      else {
        size_t v13 = v4 - v8;
      }
      a2 = (uint64_t **)*a2;
    }
    else
    {
      BOOL v11 = v7 != -1 && v3 >= v8;
      if (!v11) {
        goto LABEL_40;
      }
      size_t v12 = v3 - v8;
      if (v12 >= v7) {
        size_t v13 = v7;
      }
      else {
        size_t v13 = v12;
      }
    }
    if ((v19 & 0x80u) == 0) {
      unint64_t v15 = __p;
    }
    else {
      unint64_t v15 = (void **)__p[0];
    }
    int v16 = memcmp((char *)a2 + v8, v15, v13);
    BOOL v9 = v13 == v7 && v16 == 0;
    if (v6 < 0) {
      goto LABEL_9;
    }
    return v9;
  }
  BOOL v9 = 0;
  if ((char)v19 < 0) {
LABEL_9:
  }
    operator delete(__p[0]);
  return v9;
}

BOOL kaldi::quasar::WordpieceV1LmeSymbolFormat::IsDisambigSym(uint64_t a1, const void **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "disambig-");
  size_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0) {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v4 = (unint64_t)a2[1];
  }
  unsigned __int8 v5 = v30;
  if ((char)v30 < 0)
  {
    size_t v6 = v29;
    if (v4 < v29)
    {
      BOOL v7 = 0;
      goto LABEL_28;
    }
LABEL_9:
    if ((v3 & 0x80) != 0)
    {
      if (v6 != -1)
      {
        if ((unint64_t)a2[1] >= v6) {
          size_t v8 = v6;
        }
        else {
          size_t v8 = (size_t)a2[1];
        }
        BOOL v9 = (const void **)*a2;
LABEL_20:
        if ((v30 & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        int v11 = memcmp(v9, p_p, v8);
        if (v8 != v6 || v11 != 0)
        {
          BOOL v7 = 0;
          if ((v5 & 0x80) == 0) {
            return v7;
          }
LABEL_28:
          operator delete(__p);
          return v7;
        }
        std::string::basic_string[abi:ne180100]<0>(v26, "\\bpe");
        unint64_t v14 = *((unsigned __int8 *)a2 + 23);
        unint64_t v15 = (unint64_t)a2[1];
        if ((v14 & 0x80u) == 0) {
          unint64_t v16 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          unint64_t v16 = (unint64_t)a2[1];
        }
        int v17 = (char)v27;
        if ((v27 & 0x80u) == 0) {
          size_t v18 = v27;
        }
        else {
          size_t v18 = (size_t)v26[1];
        }
        BOOL v19 = v16 >= v18;
        unint64_t v20 = v16 - v18;
        if (!v19)
        {
          BOOL v7 = 0;
          if (((char)v27 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        if ((v14 & 0x80) != 0)
        {
          if (v18 == -1 || v15 < v20) {
LABEL_66:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          if (v15 - v20 >= v18) {
            size_t v22 = v18;
          }
          else {
            size_t v22 = v15 - v20;
          }
          a2 = (const void **)*a2;
        }
        else
        {
          if (v18 == -1) {
            goto LABEL_66;
          }
          BOOL v19 = v14 >= v20;
          size_t v21 = v14 - v20;
          if (!v19) {
            goto LABEL_66;
          }
          if (v21 >= v18) {
            size_t v22 = v18;
          }
          else {
            size_t v22 = v21;
          }
        }
        if ((v27 & 0x80u) == 0) {
          long long v23 = v26;
        }
        else {
          long long v23 = (void **)v26[0];
        }
        int v24 = memcmp((char *)a2 + v20, v23, v22);
        BOOL v7 = v22 == v18 && v24 == 0;
        if ((v17 & 0x80000000) == 0)
        {
LABEL_39:
          if ((v30 & 0x80) == 0) {
            return v7;
          }
          goto LABEL_28;
        }
LABEL_38:
        operator delete(v26[0]);
        goto LABEL_39;
      }
    }
    else if (v6 != -1)
    {
      if (v3 >= v6) {
        size_t v8 = v6;
      }
      else {
        size_t v8 = *((unsigned __int8 *)a2 + 23);
      }
      BOOL v9 = a2;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size_t v6 = v30;
  if (v4 >= v30) {
    goto LABEL_9;
  }
  return 0;
}

void sub_1B21F80B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *kaldi::quasar::WordpieceV1LmeSymbolFormat::BasePhonesToPosWordPhones(uint64_t a1, std::string **a2)
{
  uint64_t v2 = *a2;
  size_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
      uint64_t result = std::string::append(v2++, "\\bpe");
    while (v2 != v3);
  }
  return result;
}

void kaldi::quasar::BILmeSymbolFormat::~BILmeSymbolFormat(kaldi::quasar::BILmeSymbolFormat *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

BOOL kaldi::quasar::OriginalLmeSymbolFormatBase::IsWordPhoneOrDisambigSym(int a1, std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size < 3 || *std::string::at(this, 0) != 47) {
    return 0;
  }
  std::string::size_type v4 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80u) != 0) {
    std::string::size_type v4 = this->__r_.__value_.__l.__size_;
  }
  return *std::string::at(this, v4 - 1) == 47;
}

BOOL kaldi::quasar::OriginalLmeSymbolFormatBase::IsDisambigSym(uint64_t a1, const void **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "/WORD-DIS-");
  size_t v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0) {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    unint64_t v4 = (unint64_t)a2[1];
  }
  unsigned __int8 v5 = v18;
  if ((char)v18 < 0)
  {
    size_t v6 = v17;
    if (v4 < v17)
    {
      BOOL v7 = 0;
      size_t v8 = __p;
      goto LABEL_33;
    }
  }
  else
  {
    size_t v6 = v18;
    if (v4 < v18) {
      return 0;
    }
  }
  size_t v8 = __p;
  if ((v3 & 0x80) == 0)
  {
    if (v6 != -1)
    {
      if (v3 >= v6) {
        size_t v9 = v6;
      }
      else {
        size_t v9 = *((unsigned __int8 *)a2 + 23);
      }
      unint64_t v10 = a2;
      goto LABEL_20;
    }
LABEL_35:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v6 == -1) {
    goto LABEL_35;
  }
  if ((unint64_t)a2[1] >= v6) {
    size_t v9 = v6;
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  unint64_t v10 = *a2;
LABEL_20:
  if ((v18 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  int v12 = memcmp(v10, p_p, v9);
  if (v9 != v6 || v12 != 0)
  {
    BOOL v7 = 0;
    if ((v5 & 0x80) == 0) {
      return v7;
    }
LABEL_33:
    operator delete(v8);
    return v7;
  }
  if ((v3 & 0x80u) == 0) {
    unint64_t v14 = (char *)a2;
  }
  else {
    unint64_t v14 = (char *)*a2;
  }
  BOOL v7 = v14[v4 - 1] == 47;
  if ((v5 & 0x80) != 0) {
    goto LABEL_33;
  }
  return v7;
}

void kaldi::quasar::BILmeSymbolFormat::BasePhonesToPosWordPhones(uint64_t a1, uint64_t *a2)
{
  v12[2] = *MEMORY[0x1E4F143B8];
  if (a2[1] != *a2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      if (v4)
      {
        std::operator+<char>();
        unsigned __int8 v5 = std::string::append(&__p, "_I/");
        std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
        v12[0] = v5->__r_.__value_.__l.__size_;
        *(void *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
        char v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v4) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v8 = *a2 + v3;
      }
      else
      {
        std::operator+<char>();
        size_t v9 = std::string::append(&__p, "_B/");
        std::string::size_type v6 = v9->__r_.__value_.__r.__words[0];
        v12[0] = v9->__r_.__value_.__l.__size_;
        *(void *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
        char v7 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        uint64_t v8 = *a2;
        if (a2[1] == *a2) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
      }
      if (*(char *)(v8 + 23) < 0) {
        operator delete(*(void **)v8);
      }
      uint64_t v10 = v12[0];
      *(void *)uint64_t v8 = v6;
      *(void *)(v8 + 8) = v10;
      *(void *)(v8 + 15) = *(void *)((char *)v12 + 7);
      *(unsigned char *)(v8 + 23) = v7;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v4;
      v3 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v4);
  }
}

void sub_1B21F84D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15 < 0) {
    operator delete(v14);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BIESLmeSymbolFormat::~BIESLmeSymbolFormat(kaldi::quasar::BIESLmeSymbolFormat *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::BIESLmeSymbolFormat::BasePhonesToPosWordPhones(uint64_t a1, uint64_t *a2)
{
  v27[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4 - v3 == 24)
  {
    std::operator+<char>();
    std::string::size_type v6 = std::string::append(&__p, "_S/");
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
    v27[0] = v6->__r_.__value_.__l.__size_;
    *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = *a2;
    if (a2[1] == *a2) {
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    uint64_t v10 = v27[0];
    *(void *)uint64_t v9 = v7;
    *(void *)(v9 + 8) = v10;
    *(void *)(v9 + 15) = *(void *)((char *)v27 + 7);
    *(unsigned char *)(v9 + 23) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (v4 != v3)
  {
    unint64_t v11 = 0;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3);
    do
    {
      if (v11)
      {
        unint64_t v13 = v11 + 1;
        if (v12 == v11 + 1)
        {
          std::operator+<char>();
          unint64_t v14 = std::string::append(&__p, "_E/");
          std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
          v27[0] = v14->__r_.__value_.__l.__size_;
          *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
          char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          uint64_t v17 = *a2;
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v11) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
        }
        else
        {
          std::operator+<char>();
          long long v23 = std::string::append(&__p, "_I/");
          std::string::size_type v15 = v23->__r_.__value_.__r.__words[0];
          v27[0] = v23->__r_.__value_.__l.__size_;
          *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
          char v16 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          uint64_t v17 = *a2;
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v11) {
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          }
        }
        uint64_t v24 = v17 + 24 * v11;
        if (*(char *)(v24 + 23) < 0) {
          operator delete(*(void **)v24);
        }
        uint64_t v25 = v27[0];
        *(void *)uint64_t v24 = v15;
        *(void *)(v24 + 8) = v25;
        *(void *)(v24 + 15) = *(void *)((char *)v27 + 7);
        *(unsigned char *)(v24 + 23) = v16;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::operator+<char>();
        unsigned __int8 v18 = std::string::append(&__p, "_B/");
        std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
        v27[0] = v18->__r_.__value_.__l.__size_;
        *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
        char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        uint64_t v21 = *a2;
        if (a2[1] == *a2) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        if (*(char *)(v21 + 23) < 0) {
          operator delete(*(void **)v21);
        }
        uint64_t v22 = v27[0];
        *(void *)uint64_t v21 = v19;
        *(void *)(v21 + 8) = v22;
        *(void *)(v21 + 15) = *(void *)((char *)v27 + 7);
        *(unsigned char *)(v21 + 23) = v20;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        unint64_t v13 = 1;
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      unint64_t v11 = v13;
    }
    while (v12 > v13);
  }
}

void sub_1B21F883C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v15 < 0) {
    operator delete(v14);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::vector<std::vector<quasar::LmePackedWord>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::vector<quasar::LmePackedWord>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B21F88D8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::vector<quasar::LmePackedWord>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    unsigned __int8 v5 = (uint64_t **)result;
    std::string::size_type v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      std::string::size_type v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          char v8 = (const void ***)v7;
          std::string::size_type v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  std::string::size_type v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  std::string::size_type v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__construct_node<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    std::string::size_type v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>>>::__construct_node<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::string::size_type v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B21F8A68(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::vector<quasar::LmePackedWord>>::__init_with_size[abi:ne180100]<std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*>(this + 1, *((long long ***)a2 + 3), *((long long ***)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1B21F8AF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::vector<quasar::LmePackedWord>>::__init_with_size[abi:ne180100]<std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*>(std::string *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B21F8B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<quasar::LmePackedWord>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*,std::vector<quasar::LmePackedWord>*>(uint64_t a1, long long **a2, long long **a3, std::string *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<quasar::LmePackedWord>::__init_with_size[abi:ne180100]<quasar::LmePackedWord*,quasar::LmePackedWord*>(v4, *v6, v6[1], 0xCCCCCCCCCCCCCCCDLL * (v6[1] - *v6));
      long long v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B21F8C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::vector<quasar::LmePackedWord>::__init_with_size[abi:ne180100]<quasar::LmePackedWord*,quasar::LmePackedWord*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*,quasar::LmePackedWord*,quasar::LmePackedWord*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B21F8CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*,quasar::LmePackedWord*,quasar::LmePackedWord*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  uint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<quasar::LmePackedWord>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord&>(v7, v4, v6);
      v6 += 5;
      long long v4 = (std::string *)((char *)v12 + 80);
      unint64_t v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1B21F8D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<quasar::LmePackedWord>::construct[abi:ne180100]<quasar::LmePackedWord,quasar::LmePackedWord&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *((_DWORD *)a3 + 12);
  this[2].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = v7;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&this[2].__r_.__value_.__l.__size_, *((const void **)a3 + 7), *((void *)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 1);
}

void sub_1B21F8E38(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmePackedWord>,quasar::LmePackedWord*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmePackedWord>>,std::vector<quasar::LmePackedWord>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmePackedWord>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmePackedWord>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_unique_impl<quasar::LmeDataFactoryBase::Word const&,fst::SymbolTable &>(uint64_t **a1, const quasar::LmeDataFactoryBase::Word *a2, fst::SymbolTable *a3)
{
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmeDataFactoryBase::Word &,fst::SymbolTable &>((uint64_t)a1, a2, a3, (uint64_t)v8);
  long long v4 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)v8[0] + 4);
  long long v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v4, v8[0]);
    long long v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_1B21F9004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::set<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1B21F905C(_Unwind_Exception *a1)
{
  std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::LmePackedWord,std::__tree_node<quasar::LmePackedWord,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_hint_unique_key_args<quasar::LmePackedWord,quasar::LmePackedWord const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          char v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__emplace_hint_unique_key_args<quasar::LmePackedWord,quasar::LmePackedWord const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  long long v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    char v8 = (uint64_t **)v6;
    std::__tree<quasar::LmePackedWord,quasar::LmePackedWordOrthoComparator,std::allocator<quasar::LmePackedWord>>::__construct_node<quasar::LmePackedWord const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<quasar::LmePackedWord,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmePackedWord,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void **std::vector<std::vector<std::string>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<std::string>>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B21F9238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<quasar::Lexicon>::shared_ptr[abi:ne180100]<quasar::Lexicon,std::default_delete<quasar::Lexicon>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<quasar::Lexicon  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_pointer<quasar::Lexicon  *>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<quasar::Lexicon  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6quasar7LexiconENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x180uLL);
  _ZNSt3__120__shared_ptr_emplaceIN5kaldi6quasar7LexiconENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v0);
}

void sub_1B21F938C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__120__shared_ptr_emplaceIN5kaldi6quasar7LexiconENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F5A0;
  kaldi::quasar::Lexicon::Lexicon((kaldi::quasar::Lexicon *)(a1 + 3));
}

void sub_1B21F93E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Lexicon::Lexicon(kaldi::quasar::Lexicon *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F0A516C0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 1065353216;
  *((_DWORD *)this + 12) = 0;
  *(_DWORD *)((char *)this + 51) = 0;
  operator new();
}

void sub_1B21F951C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v3, 0x20C4093837F09);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,BOOL>>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::LmeType,std::piecewise_construct_t const&,std::tuple<quasar::LmeDataFactoryBase::LmeType&&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((unsigned char *)v11 + 32) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::allocate_shared[abi:ne180100]<kaldi::quasar::LmeFst,std::allocator<kaldi::quasar::LmeFst>,kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &,void>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v11 = operator new(0x120uLL);
  std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &,std::allocator<kaldi::quasar::LmeFst>,0>(v11, a2, a3, a4, a5, a6);
}

void sub_1B21F9694(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &,std::allocator<kaldi::quasar::LmeFst>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F568;
  std::allocator<kaldi::quasar::LmeFst>::construct[abi:ne180100]<kaldi::quasar::LmeFst,kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
}

void sub_1B21F9714(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__on_zero_shared(uint64_t a1)
{
  std::allocator<kaldi::quasar::LmeFst>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<kaldi::quasar::LmeFst>::construct[abi:ne180100]<kaldi::quasar::LmeFst,kaldi::quasar::LexiconItf const*,fst::SymbolTable *,long long const&,BOOL,BOOL &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  int v11 = *a6;
  int v12 = *a7;
  std::string::basic_string[abi:ne180100]<0>(&v14, "sil");
  std::string::basic_string[abi:ne180100]<0>(&__p, "^20");
  kaldi::quasar::LmeFst::LmeFst(a2, v8, v9, v10, v11 != 0, v12 != 0, &v14, 32);
}

void sub_1B21F9890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LmeFst::LmeFst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, long long *a7, uint64_t a8)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &unk_1F0A382C8;
  uint64_t v12 = *(void *)(a3 + 8);
  *(void *)(a1 + 48) = v12;
  ++*(_DWORD *)(v12 + 168);
  *(unsigned char *)(a1 + 56) = a6;
  if (*((char *)a7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)a7, *((void *)a7 + 1));
  }
  else
  {
    long long v13 = *a7;
    *(void *)(a1 + 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)a7 + 2);
    *(_OWORD *)(a1 + 64) = v13;
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 88) = a8;
  *(void *)(a1 + 104) = 0x100000000;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = a5;
  *(void *)(a1 + 184) = a4;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 192));
}

void sub_1B21F9B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  fst::SymbolTable::~SymbolTable(v21);
  std::__tree<std::string>::destroy(v20, *(char **)(v16 + 160));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v19);
  if (*(char *)(v16 + 87) < 0) {
    operator delete(*v18);
  }
  fst::SymbolTable::~SymbolTable(v17);
  a16 = v16;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::LmeFst>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::string>::destroy(a2 + 232, *(char **)(a2 + 240));
  if (*(char *)(a2 + 231) < 0) {
    operator delete(*(void **)(a2 + 208));
  }
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)(a2 + 192));
  std::__tree<std::string>::destroy(a2 + 152, *(char **)(a2 + 160));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 112);
  if (*(char *)(a2 + 87) < 0) {
    operator delete(*(void **)(a2 + 64));
  }
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)(a2 + 40));
  uint64_t v3 = (void **)a2;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_impl<std::pair<char const*,int>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node<std::pair<char const*,int>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::string __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_1B21F9D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node<std::pair<char const*,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x30uLL);
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  *((_DWORD *)v7 + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_1B21F9DE4(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,fst::SymbolTable const&,quasar::TextEncoding,void>@<X0>(const SymbolTable *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xA8uLL);
  unint64_t result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<fst::SymbolTable const&,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B21F9E50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<fst::SymbolTable const&,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(void *a1, const SymbolTable *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60678;
  quasar::QsrTextSymbolTable::QsrTextSymbolTable((quasar::QsrTextSymbolTable *)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1B21F9EB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<quasar::LmeDataFactoryBase::Word>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  v21[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>(v7, v9);
  int v11 = &v10[80 * v4];
  v21[0] = v10;
  v21[1] = v11;
  v21[3] = &v10[80 * v12];
  uint64_t v13 = *(void *)(a2 + 16);
  *(_OWORD *)int v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = v13;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = *(void *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = v14;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a2 + 24) = 0;
  *((_DWORD *)v11 + 12) = *(_DWORD *)(a2 + 48);
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  int v15 = (void *)(a2 + 64);
  uint64_t v16 = *(void *)(a2 + 64);
  *((void *)v11 + 8) = v16;
  uint64_t v17 = v11 + 64;
  uint64_t v18 = *(void *)(a2 + 72);
  *((void *)v11 + 9) = v18;
  if (v18)
  {
    *(void *)(v16 + 16) = v17;
    *(void *)(a2 + 56) = v15;
    *int v15 = 0;
    *(void *)(a2 + 72) = 0;
  }
  else
  {
    *((void *)v11 + 7) = v17;
  }
  v21[2] = v11 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, v21);
  uint64_t v19 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(v21);
  return v19;
}

void sub_1B21FA010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::CompoundLmeEnumerationsProcessor::CompoundLmeEnumerationsProcessor(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A58460;
  long long v2 = *a2;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = a2[2];
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 56) = *((void *)a2 + 6);
  uint64_t v4 = *((void *)a2 + 7);
  *(void *)(a1 + 64) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_DWORD *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(void *)(a1 + 128) = 0;
  std::vector<std::vector<std::vector<std::string>>>::vector((void *)(a1 + 136), 1uLL);
  long long v8 = 0u;
  long long v9 = 0u;
  int v10 = 1065353216;
  operator new();
}

void sub_1B21FA198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  MEMORY[0x1B3EA8670](v10, 0x10A1C40C81CB56BLL);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v12 = *((void *)v9 + 16);
  *((void *)v9 + 16) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 48))(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v9 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  quasar::Bitmap::~Bitmap(v9);
  _Unwind_Resume(a1);
}

void quasar::CompoundLmeEnumerationsProcessor::~CompoundLmeEnumerationsProcessor(quasar::CompoundLmeEnumerationsProcessor *this)
{
  *(void *)this = &unk_1F0A58460;
  uint64_t v4 = (void **)((char *)this + 136);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(void *)this = &unk_1F0A58460;
  uint64_t v4 = (void **)((char *)this + 136);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::Bitmap::~Bitmap(this);
  MEMORY[0x1B3EA8670]();
}

std::vector<std::wstring> *quasar::CompoundLmeEnumerationsProcessor::add(uint64_t a1, quasar::LmeDataFactory **a2, kaldi::quasar::Lexicon *a3)
{
  long long v5 = *a2;
  long long v6 = a2[1];
  while (v5 != v6)
  {
    quasar::LmeDataFactory::addWordToPronLexicon(v5, *(const quasar::LmeDataFactoryBase::Word **)(a1 + 128), a3);
    long long v5 = (quasar::LmeDataFactory *)((char *)v5 + 80);
  }
  long long v7 = *(uint64_t **)(a1 + 136);
  long long v8 = (std::vector<std::wstring> *)v7[1];
  long long v9 = *(long long ***)a3;
  uint64_t v10 = (long long **)*((void *)a3 + 1);
  uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *(void *)a3) >> 3);
  return std::vector<std::vector<std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<std::string> const*>,std::__wrap_iter<std::vector<std::string> const*>>(v7, v8, v9, v10, v11);
}

void quasar::CompoundLmeEnumerationsProcessor::buildFst(quasar::CompoundLmeEnumerationsProcessor *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = -1;
  unsigned __int8 v6 = 1;
  uint64_t v2 = (void *)*((void *)this + 2);
  __p[0] = *((void **)this + 1);
  uint64_t v4 = v2;
  unsigned __int8 v5 = 0;
  std::allocate_shared[abi:ne180100]<kaldi::quasar::LmeFst,std::allocator<kaldi::quasar::LmeFst>,kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &,void>((uint64_t)&v7, (uint64_t *)__p, (uint64_t *)&v4, (uint64_t *)this + 10, &v5, &v6);
}

void sub_1B21FA64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  void *v23 = 0;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<std::vector<std::string>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B21FA784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

std::vector<std::wstring> *std::vector<std::vector<std::string>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<std::string> const*>,std::__wrap_iter<std::vector<std::string> const*>>(uint64_t *a1, std::vector<std::wstring> *a2, long long **a3, long long **a4, uint64_t a5)
{
  size_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = &a3[3 * a5];
      }
      else
      {
        uint64_t v21 = &a3[(uint64_t)(v12 - (void)a2) >> 3];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string> const*,std::vector<std::string> const*,std::vector<std::string>*>(v9, v21, a4, *(std::string **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<std::vector<std::string>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v23, (uint64_t)a3, (uint64_t)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v25 = v9;
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      v23.__r_.__value_.__l.__size_ = (std::string::size_type)&v19[24 * v15];
      v23.__r_.__value_.__r.__words[2] = v23.__r_.__value_.__l.__size_;
      uint64_t v24 = &v19[24 * v18];
      std::__split_buffer<std::vector<std::string>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<std::string> const*>>(&v23, a3, a5);
      size_t v5 = (std::vector<std::wstring> *)std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)&v23.__r_.__value_.__l.__data_);
    }
  }
  return v5;
}

void sub_1B21FA940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<std::string>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (void *)((char *)a2 + v6 - a4);
  long long v8 = (void *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    long long v8 = *(void **)(a1 + 8);
    do
    {
      *long long v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)long long v8 = *(_OWORD *)v9;
      v8[2] = v9[2];
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((uint64_t)&v11, a2, v7, v6);
}

std::string *std::__split_buffer<std::vector<std::string>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<std::string> const*>>(std::string *result, long long **a2, uint64_t a3)
{
  long long v3 = result;
  uint64_t v4 = (std::string *)result->__r_.__value_.__r.__words[2];
  if (a3)
  {
    uint64_t v6 = &v4[a3];
    uint64_t v7 = 24 * a3;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      unint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4++, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
      a2 += 3;
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  v3->__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  return result;
}

void sub_1B21FAA6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string> const*,std::vector<std::string> const*,std::vector<std::string>*>(uint64_t a1, long long **a2, long long **a3, std::string *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      uint64_t v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B21FABD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = (std::vector<std::wstring> *)(a4 - 24);
    uint64_t v7 = a3;
    do
    {
      std::vector<std::string>::__vdeallocate(v6);
      long long v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)&v6->__begin_ = v8;
      v6->__end_cap_.__value_ = (std::wstring *)v7[2];
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      --v6;
    }
    while (v7 != a2);
  }
  return a3;
}

void *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  char v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  void v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    char v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void std::allocate_shared[abi:ne180100]<kaldi::quasar::LmeFst,std::allocator<kaldi::quasar::LmeFst>,kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &,void>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v11 = operator new(0x120uLL);
  std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &,std::allocator<kaldi::quasar::LmeFst>,0>(v11, a2, a3, a4, a5, a6);
}

void sub_1B21FAD64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::LmeFst>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &,std::allocator<kaldi::quasar::LmeFst>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5F568;
  std::allocator<kaldi::quasar::LmeFst>::construct[abi:ne180100]<kaldi::quasar::LmeFst,kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
}

void sub_1B21FADE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::LmeFst>::construct[abi:ne180100]<kaldi::quasar::LmeFst,kaldi::quasar::LexiconItf const*,fst::SymbolTable const*,long long const&,BOOL,BOOL &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  int v11 = *a6;
  int v12 = *a7;
  std::string::basic_string[abi:ne180100]<0>(&v14, "sil");
  std::string::basic_string[abi:ne180100]<0>(&__p, "^20");
  kaldi::quasar::LmeFst::LmeFst(a2, v8, v9, v10, v11 != 0, v12 != 0, &v14, 32);
}

void sub_1B21FAEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OriginalSimpleLmeEnumerationsProcessor::OriginalSimpleLmeEnumerationsProcessor(uint64_t a1, long long *a2)
{
  quasar::SimpleLmeEnumerationsProcessorBase::SimpleLmeEnumerationsProcessorBase(a1, a2);
  *long long v3 = &unk_1F0A58C00;
  quasar::CompoundLmeEnumerationsProcessor::CompoundLmeEnumerationsProcessor((uint64_t)(v3 + 22), a2);
}

void sub_1B21FAF44(_Unwind_Exception *a1)
{
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(v1);
  _Unwind_Resume(a1);
}

__n128 quasar::SimpleLmeEnumerationsProcessorBase::SimpleLmeEnumerationsProcessorBase(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A58828;
  long long v2 = *a2;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = a2[2];
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  uint64_t v4 = *((void *)a2 + 7);
  *(void *)(a1 + 56) = *((void *)a2 + 6);
  *(void *)(a1 + 64) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_DWORD *)(a1 + 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(__n128 *)(a1 + 72) = result;
  *(_DWORD *)(a1 + 128) = *((unsigned __int8 *)a2 + 16);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 16);
  *(void *)(a1 + 16std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  *(_DWORD *)(a1 + 168) = 0;
  return result;
}

void quasar::OriginalSimpleLmeEnumerationsProcessor::~OriginalSimpleLmeEnumerationsProcessor(quasar::OriginalSimpleLmeEnumerationsProcessor *this)
{
  *(void *)this = &unk_1F0A58C00;
  long long v2 = (quasar::OriginalSimpleLmeEnumerationsProcessor *)((char *)this + 176);
  *((void *)this + 22) = &unk_1F0A58460;
  size_t v5 = (void **)((char *)this + 312);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  quasar::Bitmap::~Bitmap(v2);
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(this);
}

{
  quasar::Bitmap *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(void *)this = &unk_1F0A58C00;
  long long v2 = (quasar::OriginalSimpleLmeEnumerationsProcessor *)((char *)this + 176);
  *((void *)this + 22) = &unk_1F0A58460;
  size_t v5 = (void **)((char *)this + 312);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  quasar::Bitmap::~Bitmap(v2);
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(this);
  MEMORY[0x1B3EA8670]();
}

void quasar::OriginalSimpleLmeEnumerationsProcessor::buildFst(quasar::OriginalSimpleLmeEnumerationsProcessor *this@<X0>, void *a2@<X8>)
{
}

void quasar::OriginalSimpleLmeEnumerationsProcessor::add(quasar::OriginalSimpleLmeEnumerationsProcessor *this, float a2, const quasar::LmeDataFactoryBase::Word *a3)
{
  *((void *)&v23 + 1) = *MEMORY[0x1E4F143B8];
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v19 = *(std::string *)a3;
  }
  if (*((char *)a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a3 + 1);
  }
  int v21 = *((_DWORD *)a3 + 12);
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](v22, (uint64_t)a3 + 56);
  uint64_t v10 = 0;
  int v11 = 0;
  int v12 = 0;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  v15.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v10 = (std::string *)operator new(0x50uLL);
  int v11 = v10;
  int v12 = &v10[3].__r_.__value_.__s.__data_[8];
  int v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word const*,quasar::LmeDataFactoryBase::Word*>((uint64_t)&v12, (long long *)&v19, &v23, v10);
  std::to_string(&v15, a2);
  if (*((char *)a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v16 = *(std::string *)a3;
  }
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  uint64_t v13 = (void **)&v17;
  char v14 = 0;
  *(void *)&long long v17 = operator new(0x30uLL);
  *((void *)&v17 + 1) = v17;
  uint64_t v18 = v17 + 48;
  *((void *)&v17 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (long long *)&v15, &v17, (std::string *)v17);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  long long v7 = 0;
  uint64_t v13 = (void **)&v7;
  char v14 = 0;
  long long v7 = (std::string *)operator new(0x18uLL);
  uint64_t v8 = v7;
  uint64_t v9 = v7 + 1;
  uint64_t v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string> const*,std::vector<std::string> const*,std::vector<std::string>*>((uint64_t)&v9, (long long **)&v17, (long long **)&v19, v7);
  quasar::CompoundLmeEnumerationsProcessor::add((uint64_t)this + 176, (quasar::LmeDataFactory **)&v10, (kaldi::quasar::Lexicon *)&v7);
  uint64_t v13 = (void **)&v7;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v13);
  uint64_t v13 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[i + 2]) < 0) {
      operator delete(*(void **)((char *)&v15 + i * 8 + 24));
    }
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v22, (char *)v22[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1B21FB410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::string __p = &a13;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&a30);
  _Unwind_Resume(a1);
}

void sub_1B21FB4C8()
{
}

void sub_1B21FB4D0()
{
}

void sub_1B21FB4DC()
{
}

void sub_1B21FB4E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(a29) < 0) {
    operator delete(a27);
  }
  JUMPOUT(0x1B21FB4C0);
}

uint64_t quasar::CompactSimpleLmeEnumerationsProcessor::CompactSimpleLmeEnumerationsProcessor(uint64_t a1, uint64_t a2)
{
  quasar::SimpleLmeEnumerationsProcessorBase::SimpleLmeEnumerationsProcessorBase(a1, (long long *)a2);
  *uint64_t v4 = &unk_1F0A58A38;
  if (*(unsigned char *)(a2 + 16)) {
    size_t v5 = " ";
  }
  else {
    size_t v5 = ".";
  }
  std::string::basic_string[abi:ne180100]<0>(v4 + 22, v5);
  *(_OWORD *)(a1 + 20std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(void *)(a1 + 36std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6 < 1 || (uint64_t v7 = *(void *)(a2 + 40), v7 < 1) || v6 > v7)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(params.disambigSymStart > 0) && (params.disambigSymEnd > 0) && (params.disambigSymStart <= params.disambigSymEnd)", 114);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return a1;
}

void sub_1B21FB618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  int v12 = *(void **)(v9 + 344);
  if (v12)
  {
    *(void *)(v9 + 352) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(v9 + 320);
  if (v13)
  {
    *(void *)(v9 + 328) = v13;
    operator delete(v13);
  }
  char v14 = *(void **)(v9 + 296);
  if (v14)
  {
    *(void *)(v9 + 304) = v14;
    operator delete(v14);
  }
  std::string v15 = *(void **)(v9 + 272);
  if (v15)
  {
    *(void *)(v9 + 28std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v15;
    operator delete(v15);
  }
  std::string v16 = *(void **)(v9 + 248);
  if (v16)
  {
    *(void *)(v9 + 256) = v16;
    operator delete(v16);
  }
  long long v17 = *(void **)(v9 + 224);
  if (v17)
  {
    *(void *)(v9 + 232) = v17;
    operator delete(v17);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 199) < 0) {
    operator delete(*v10);
  }
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase((quasar::SimpleLmeEnumerationsProcessorBase *)v9);
  _Unwind_Resume(a1);
}

void quasar::CompactSimpleLmeEnumerationsProcessor::~CompactSimpleLmeEnumerationsProcessor(quasar::CompactSimpleLmeEnumerationsProcessor *this)
{
  quasar::CompactSimpleLmeEnumerationsProcessor::~CompactSimpleLmeEnumerationsProcessor(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  *(void *)this = &unk_1F0A58A38;
  long long v2 = (void *)*((void *)this + 43);
  if (v2)
  {
    *((void *)this + 44) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 40);
  if (v3)
  {
    *((void *)this + 41) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 37);
  if (v4)
  {
    *((void *)this + 38) = v4;
    operator delete(v4);
  }
  size_t v5 = (void *)*((void *)this + 34);
  if (v5)
  {
    *((void *)this + 35) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 31);
  if (v6)
  {
    *((void *)this + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 28);
  if (v7)
  {
    *((void *)this + 29) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void **)((char *)this + 200);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  quasar::SimpleLmeEnumerationsProcessorBase::~SimpleLmeEnumerationsProcessorBase(this);
}

void quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(quasar::CompactSimpleLmeEnumerationsProcessor *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = -1;
  kaldi::quasar::LmeFstBuilderCompact::LmeFstBuilderCompact((kaldi::quasar::LmeFstBuilderCompact *)&v46, *((_DWORD *)this + 10), *((_DWORD *)this + 12), *((unsigned char *)this + 104));
  uint64_t v3 = *((void *)this + 31);
  uint64_t v4 = (int *)*((void *)this + 32);
  unint64_t v5 = 126 - 2 * __clz(((uint64_t)v4 - v3) >> 2);
  std::string __p = this;
  if (v4 == (int *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,false>(v3, v4, (uint64_t *)&__p, v6, 1);
  float v7 = *((float *)this + 42);
  if (v7 == 0.0)
  {
    *((_DWORD *)this + 42) = 1065353216;
    float v7 = 1.0;
  }
  float v8 = *((float *)this + 22);
  float v9 = *((float *)this + 23);
  float v10 = logf(v7);
  int v11 = (int *)*((void *)this + 31);
  int v12 = (int *)*((void *)this + 32);
  if (v11 != v12)
  {
    float v13 = v8 + (1.0 - v9) * v10;
    do
    {
      unint64_t v14 = *v11;
      int v15 = *(_DWORD *)(*((void *)this + 28) + 4 * v14);
      uint64_t v16 = *((void *)this + 12);
      uint64_t v17 = *((void *)this + 25);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 112))(v16);
      if (*((void *)this + 10) <= v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = *((void *)this + 10);
      }
      int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v17 + 24 * v15, v19);
      uint64_t v21 = *((void *)this + 34);
      if (v14 >= (*((void *)this + 35) - v21) >> 2
        || (uint64_t v22 = *((void *)this + 37), v14 >= (*((void *)this + 38) - v22) >> 2))
      {
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      }
      int v23 = v20;
      float v24 = logf(*(float *)(v21 + 4 * v14));
      uint64_t v25 = 0;
      int v26 = 0;
      float v27 = *(float *)(v22 + 4 * v14);
      unint64_t v28 = *(int *)(*((void *)this + 43) + 4 * v14);
      std::string __p = 0;
      long long v44 = 0;
      long long v45 = 0;
      uint64_t v29 = *((void *)this + 40);
      if (v28 < (*((void *)this + 41) - v29) >> 2)
      {
        unsigned __int8 v30 = 0;
        while (1)
        {
          int v31 = *(_DWORD *)(v29 + 4 * v28);
          if (!v31) {
            break;
          }
          if (v30 >= v45)
          {
            long long v32 = (char *)__p;
            uint64_t v33 = (v30 - (unsigned char *)__p) >> 2;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v35 = v45 - (unsigned char *)__p;
            if ((v45 - (unsigned char *)__p) >> 1 > v34) {
              unint64_t v34 = v35 >> 1;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            if (v36)
            {
              long long v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v45, v36);
              long long v32 = (char *)__p;
              unsigned __int8 v30 = v44;
              int v31 = *(_DWORD *)(v29 + 4 * v28);
            }
            else
            {
              long long v37 = 0;
            }
            long long v38 = &v37[4 * v33];
            *(_DWORD *)long long v38 = v31;
            int v26 = v38 + 4;
            while (v30 != v32)
            {
              int v39 = *((_DWORD *)v30 - 1);
              v30 -= 4;
              *((_DWORD *)v38 - 1) = v39;
              v38 -= 4;
            }
            std::string __p = v38;
            long long v44 = v26;
            long long v45 = &v37[4 * v36];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(_DWORD *)unsigned __int8 v30 = v31;
            int v26 = v30 + 4;
          }
          long long v44 = v26;
          ++v28;
          uint64_t v29 = *((void *)this + 40);
          unsigned __int8 v30 = v26;
          if (v28 >= (*((void *)this + 41) - v29) >> 2) {
            goto LABEL_35;
          }
        }
        int v26 = v30;
LABEL_35:
        uint64_t v25 = __p;
      }
      float v40 = v27 + (float)(v13 - v24);
      float v41 = (float)(unint64_t)((v26 - v25) >> 2);
      float v42 = *((float *)this + 28);
      if (v42 < v41) {
        float v40 = v40 + (float)((float)(v41 - v42) * *((float *)this + 27));
      }
      kaldi::quasar::LmeFstBuilderCompact::AddPath(&v46, (uint64_t)&__p, v23, v40);
      if (__p)
      {
        long long v44 = (char *)__p;
        operator delete(__p);
      }
      ++v11;
    }
    while (v11 != v12);
  }
  *((void *)this + 41) = *((void *)this + 40);
  std::vector<int>::shrink_to_fit((std::vector<int> *)((char *)this + 320));
  operator new();
}

void sub_1B21FBA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::quasar::LmeFstBuilderCompact::~LmeFstBuilderCompact((kaldi::quasar::LmeTrie **)va);
  *float v8 = 0;
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

void quasar::CompactSimpleLmeEnumerationsProcessor::add(quasar::CompactSimpleLmeEnumerationsProcessor *this, float a2, const quasar::LmeDataFactoryBase::Word *a3)
{
  uint64_t v7 = *((void *)this + 25);
  unint64_t v8 = *((void *)this + 26);
  uint64_t v6 = (uint64_t *)((char *)this + 200);
  if (v8 >= v6[2])
  {
    uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v6, (long long *)a3);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v6, (long long *)a3);
    uint64_t v9 = v8 + 24;
  }
  *((void *)this + 26) = v9;
  quasar::Bitmap::~Bitmap((const quasar::LmeDataFactoryBase::Word *)((char *)a3 + 56));
  int v11 = (void *)*v10;
  long long v113 = v10 + 1;
  if ((void *)*v10 != v10 + 1)
  {
    uint64_t v110 = (void **)((char *)this + 224);
    unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v7) >> 3);
    long long v112 = (std::vector<int> *)((char *)this + 320);
    unint64_t v108 = (void **)((char *)this + 272);
    uint64_t v109 = (void **)((char *)this + 344);
    uint64_t v107 = (void **)((char *)this + 296);
    do
    {
      quasar::splitAndTrimNoEmpty((const std::string *)(v11 + 5), (char *)this + 176, &v118);
      long long v115 = 0;
      uint64_t v116 = 0;
      unint64_t v117 = 0;
      (*(void (**)(void, uint64_t *))(**((void **)this + 4) + 32))(*((void *)this + 4), &v118);
      uint64_t v13 = v118;
      uint64_t v12 = v119;
      while (v13 != v12)
      {
        uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 96))(*((void *)this + 2), v13);
        int v15 = v14;
        if (v14 < 1 || *((void *)this + 5) <= v14 && *((void *)this + 6) >= v14)
        {
          if (quasar::gLogLevel >= 5)
          {
            memset(v114, 0, sizeof(v114));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v114);
            int v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"Skipping bad unit ", 18);
            int v27 = *(char *)(v13 + 23);
            if (v27 >= 0) {
              uint64_t v28 = v13;
            }
            else {
              uint64_t v28 = *(void *)v13;
            }
            if (v27 >= 0) {
              uint64_t v29 = *(unsigned __int8 *)(v13 + 23);
            }
            else {
              uint64_t v29 = *(void *)(v13 + 8);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v114);
          }
          break;
        }
        uint64_t v16 = v116;
        if ((unint64_t)v116 >= v117)
        {
          uint64_t v18 = v115;
          int64_t v19 = (v116 - v115) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = v117 - (void)v115;
          if ((uint64_t)(v117 - (void)v115) >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v22);
            uint64_t v18 = v115;
            uint64_t v16 = v116;
          }
          else
          {
            int v23 = 0;
          }
          float v24 = &v23[4 * v19];
          *(_DWORD *)float v24 = v15;
          uint64_t v17 = v24 + 4;
          while (v16 != v18)
          {
            int v25 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *((_DWORD *)v24 - 1) = v25;
            v24 -= 4;
          }
          long long v115 = v24;
          uint64_t v116 = v17;
          unint64_t v117 = (unint64_t)&v23[4 * v22];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v116 = v14;
          uint64_t v17 = v16 + 4;
        }
        uint64_t v116 = v17;
        v13 += 24;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v119 - v118) >> 3) == (v116 - v115) >> 2)
      {
        int v31 = (char *)*((void *)this + 29);
        unint64_t v30 = *((void *)this + 30);
        if ((unint64_t)v31 >= v30)
        {
          uint64_t v33 = (char *)*v110;
          uint64_t v34 = (v31 - (unsigned char *)*v110) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            long long v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 240, v37);
            uint64_t v33 = (char *)*((void *)this + 28);
            int v31 = (char *)*((void *)this + 29);
          }
          else
          {
            long long v38 = 0;
          }
          int v39 = &v38[4 * v34];
          *(_DWORD *)int v39 = v111;
          long long v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *((void *)this + 28) = v39;
          *((void *)this + 29) = v32;
          *((void *)this + 3std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)int v31 = v111;
          long long v32 = v31 + 4;
        }
        *((void *)this + 29) = v32;
        uint64_t v41 = (*((void *)this + 41) - *((void *)this + 40)) >> 2;
        long long v43 = (char *)*((void *)this + 44);
        unint64_t v42 = *((void *)this + 45);
        if ((unint64_t)v43 >= v42)
        {
          long long v45 = (char *)*v109;
          uint64_t v46 = (v43 - (unsigned char *)*v109) >> 2;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v48 = v42 - (void)v45;
          if (v48 >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            long long v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 360, v49);
            long long v45 = (char *)*((void *)this + 43);
            long long v43 = (char *)*((void *)this + 44);
          }
          else
          {
            long long v50 = 0;
          }
          long long v51 = &v50[4 * v46];
          *(_DWORD *)long long v51 = v41;
          long long v44 = v51 + 4;
          while (v43 != v45)
          {
            int v52 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v51 - 1) = v52;
            v51 -= 4;
          }
          *((void *)this + 43) = v51;
          *((void *)this + 44) = v44;
          *((void *)this + 45) = &v50[4 * v49];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *(_DWORD *)long long v43 = v41;
          long long v44 = v43 + 4;
        }
        *((void *)this + 44) = v44;
        uint64_t v54 = (float *)*((void *)this + 35);
        unint64_t v53 = *((void *)this + 36);
        if ((unint64_t)v54 >= v53)
        {
          size_t v56 = (float *)*v108;
          uint64_t v57 = ((char *)v54 - (unsigned char *)*v108) >> 2;
          unint64_t v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v59 = v53 - (void)v56;
          if (v59 >> 1 > v58) {
            unint64_t v58 = v59 >> 1;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v60 = v58;
          }
          if (v60)
          {
            long long v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 288, v60);
            size_t v56 = (float *)*((void *)this + 34);
            uint64_t v54 = (float *)*((void *)this + 35);
          }
          else
          {
            long long v61 = 0;
          }
          long long v62 = (float *)&v61[4 * v57];
          *long long v62 = a2;
          uint64_t v55 = v62 + 1;
          while (v54 != v56)
          {
            int v63 = *((_DWORD *)v54-- - 1);
            *((_DWORD *)v62-- - 1) = v63;
          }
          *((void *)this + 34) = v62;
          *((void *)this + 35) = v55;
          *((void *)this + 36) = &v61[4 * v60];
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          float *v54 = a2;
          uint64_t v55 = v54 + 1;
        }
        *((void *)this + 35) = v55;
        std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(v112, *((void *)this + 41), v115, v116, (v116 - v115) >> 2);
        long long v65 = (_DWORD *)*((void *)this + 41);
        unint64_t v64 = *((void *)this + 42);
        if ((unint64_t)v65 >= v64)
        {
          std::vector<int>::pointer begin = v112->__begin_;
          uint64_t v68 = v65 - v112->__begin_;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v70 = v64 - (void)begin;
          if (v70 >> 1 > v69) {
            unint64_t v69 = v70 >> 1;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            long long v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 336, v71);
            std::vector<int>::pointer begin = (std::vector<int>::pointer)*((void *)this + 40);
            long long v65 = (_DWORD *)*((void *)this + 41);
          }
          else
          {
            long long v72 = 0;
          }
          long long v73 = &v72[4 * v68];
          *(_DWORD *)long long v73 = 0;
          std::string v66 = v73 + 4;
          while (v65 != begin)
          {
            int v74 = *--v65;
            *((_DWORD *)v73 - 1) = v74;
            v73 -= 4;
          }
          *((void *)this + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v73;
          *((void *)this + 41) = v66;
          *((void *)this + 42) = &v72[4 * v71];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          _DWORD *v65 = 0;
          std::string v66 = v65 + 1;
        }
        *((void *)this + 41) = v66;
        long long v75 = (char *)*((void *)this + 31);
        long long v76 = (char *)*((void *)this + 32);
        uint64_t v77 = (v76 - v75) >> 2;
        unint64_t v78 = *((void *)this + 33);
        if ((unint64_t)v76 >= v78)
        {
          unint64_t v80 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v81 = v78 - (void)v75;
          if (v81 >> 1 > v80) {
            unint64_t v80 = v81 >> 1;
          }
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v80;
          }
          if (v82)
          {
            long long v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 264, v82);
            long long v75 = (char *)*((void *)this + 31);
            long long v76 = (char *)*((void *)this + 32);
          }
          else
          {
            long long v83 = 0;
          }
          long long v84 = &v83[4 * v77];
          *(_DWORD *)long long v84 = v77;
          long long v79 = v84 + 4;
          while (v76 != v75)
          {
            int v85 = *((_DWORD *)v76 - 1);
            v76 -= 4;
            *((_DWORD *)v84 - 1) = v85;
            v84 -= 4;
          }
          *((void *)this + 31) = v84;
          *((void *)this + 32) = v79;
          *((void *)this + 33) = &v83[4 * v82];
          if (v75) {
            operator delete(v75);
          }
        }
        else
        {
          *(_DWORD *)long long v76 = v77;
          long long v79 = v76 + 4;
        }
        *((void *)this + 32) = v79;
        int v86 = 0;
        if (*((_DWORD *)v11 + 8) == 2) {
          int v86 = *((_DWORD *)this + 30);
        }
        std::string v88 = (char *)*((void *)this + 38);
        unint64_t v87 = *((void *)this + 39);
        if ((unint64_t)v88 >= v87)
        {
          long long v90 = (char *)*v107;
          uint64_t v91 = (v88 - (unsigned char *)*v107) >> 2;
          unint64_t v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v93 = v87 - (void)v90;
          if (v93 >> 1 > v92) {
            unint64_t v92 = v93 >> 1;
          }
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v94 = v92;
          }
          if (v94)
          {
            long long v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 312, v94);
            long long v90 = (char *)*((void *)this + 37);
            std::string v88 = (char *)*((void *)this + 38);
          }
          else
          {
            long long v95 = 0;
          }
          long long v96 = &v95[4 * v91];
          *(_DWORD *)long long v96 = v86;
          long long v89 = v96 + 4;
          while (v88 != v90)
          {
            int v97 = *((_DWORD *)v88 - 1);
            v88 -= 4;
            *((_DWORD *)v96 - 1) = v97;
            v96 -= 4;
          }
          *((void *)this + 37) = v96;
          *((void *)this + 38) = v89;
          *((void *)this + 39) = &v95[4 * v94];
          if (v90) {
            operator delete(v90);
          }
        }
        else
        {
          *(_DWORD *)std::string v88 = v86;
          long long v89 = v88 + 4;
        }
        *((void *)this + 38) = v89;
        __int16 v98 = (unsigned __int8 *)(*((void *)this + 25) + 24 * *(int *)(*((void *)this + 28) + 4 * v77));
        uint64_t v99 = v98[23];
        if ((v99 & 0x80u) == 0) {
          uint64_t v100 = v98[23];
        }
        else {
          uint64_t v100 = *((void *)v98 + 1);
        }
        uint64_t v101 = *((unsigned __int8 *)a3 + 23);
        int v102 = (char)v101;
        if ((v101 & 0x80u) != 0) {
          uint64_t v101 = *((void *)a3 + 1);
        }
        if (v100 != v101) {
          goto LABEL_159;
        }
        if (v102 >= 0) {
          int v103 = a3;
        }
        else {
          int v103 = *(const quasar::LmeDataFactoryBase::Word **)a3;
        }
        if ((v99 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v98, v103, *((void *)v98 + 1))) {
            goto LABEL_159;
          }
        }
        else if (v98[23])
        {
          while (*v98 == *(unsigned __int8 *)v103)
          {
            ++v98;
            int v103 = (const quasar::LmeDataFactoryBase::Word *)((char *)v103 + 1);
            if (!--v99) {
              goto LABEL_150;
            }
          }
LABEL_159:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)"syms[symsOffsets[order]] == word.orthography", 44);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v114);
        }
      }
LABEL_150:
      if (v115)
      {
        uint64_t v116 = v115;
        operator delete(v115);
      }
      *(void *)&v114[0] = &v118;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v114);
      int v104 = (void *)v11[1];
      if (v104)
      {
        do
        {
          char v105 = v104;
          int v104 = (void *)*v104;
        }
        while (v104);
      }
      else
      {
        do
        {
          char v105 = (void *)v11[2];
          BOOL v106 = *v105 == (void)v11;
          int v11 = v105;
        }
        while (!v106);
      }
      int v11 = v105;
    }
    while (v105 != v113);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  float v10 = (int *)result;
LABEL_2:
  int v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    float v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v35 = *(a2 - 1);
          uint64_t v36 = *v11;
          uint64_t v37 = *(void *)(*a3 + 224);
          uint64_t v38 = *(void *)(*a3 + 200);
          int v39 = (const void **)(v38 + 24 * *(int *)(v37 + 4 * v35));
          int v40 = (const void **)(v38 + 24 * *(int *)(v37 + 4 * v36));
          int v41 = *((char *)v40 + 23);
          int v42 = *((char *)v39 + 23);
          if (v42 >= 0) {
            size_t v43 = *((unsigned __int8 *)v39 + 23);
          }
          else {
            size_t v43 = (size_t)v39[1];
          }
          if (v42 >= 0) {
            long long v44 = v39;
          }
          else {
            long long v44 = *v39;
          }
          if (v41 >= 0) {
            size_t v45 = *((unsigned __int8 *)v40 + 23);
          }
          else {
            size_t v45 = (size_t)v40[1];
          }
          if (v41 >= 0) {
            uint64_t v46 = v40;
          }
          else {
            uint64_t v46 = *v40;
          }
          if (v45 >= v43) {
            size_t v47 = v43;
          }
          else {
            size_t v47 = v45;
          }
          __n128 result = memcmp(v44, v46, v47);
          BOOL v48 = v43 < v45;
          if (result) {
            BOOL v48 = (int)result < 0;
          }
          if (v48)
          {
            int *v11 = v35;
            *(a2 - 1) = v36;
          }
          break;
        case 3uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11, v11 + 1, a2 - 1, (uint64_t)a3);
          break;
        case 4uLL:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11, v11 + 1, v11 + 2, a2 - 1, (uint64_t)a3);
          break;
        case 5uLL:
          __n128 result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, (uint64_t)a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11, &v11[v15 >> 1], a2 - 1, (uint64_t)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11 + 1, v17 - 1, a2 - 2, (uint64_t)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11 + 2, &v11[v16 + 1], a2 - 3, (uint64_t)a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v17 - 1, v17, &v11[v16 + 1], (uint64_t)a3);
      int v18 = *v11;
      int *v11 = *v17;
      int *v17 = v18;
      if (a5) {
        goto LABEL_31;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(&v11[v15 >> 1], v11, a2 - 1, (uint64_t)a3);
      if (a5) {
        goto LABEL_31;
      }
    }
    uint64_t v19 = *(void *)(*a3 + 224);
    uint64_t v20 = *(void *)(*a3 + 200);
    uint64_t v21 = (const void **)(v20 + 24 * *(int *)(v19 + 4 * *(v11 - 1)));
    unint64_t v22 = (const void **)(v20 + 24 * *(int *)(v19 + 4 * *v11));
    int v23 = *((char *)v22 + 23);
    int v24 = *((char *)v21 + 23);
    if (v24 >= 0) {
      size_t v25 = *((unsigned __int8 *)v21 + 23);
    }
    else {
      size_t v25 = (size_t)v21[1];
    }
    if (v24 >= 0) {
      int v26 = v21;
    }
    else {
      int v26 = *v21;
    }
    if (v23 >= 0) {
      size_t v27 = *((unsigned __int8 *)v22 + 23);
    }
    else {
      size_t v27 = (size_t)v22[1];
    }
    if (v23 >= 0) {
      uint64_t v28 = v22;
    }
    else {
      uint64_t v28 = *v22;
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    int v30 = memcmp(v26, v28, v29);
    BOOL v31 = v25 < v27;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    if (!v31)
    {
      __n128 result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &>(v11, a2, (uint64_t)a3);
      int v11 = (int *)result;
      goto LABEL_36;
    }
LABEL_31:
    long long v32 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &>(v11, a2, (uint64_t)a3);
    if ((v33 & 1) == 0) {
      goto LABEL_34;
    }
    BOOL v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11, v32, (uint64_t)a3);
    int v11 = v32 + 1;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v32 + 1, a2, (uint64_t)a3);
    if (result)
    {
      a4 = -v13;
      a2 = v32;
      if (v34) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v34)
    {
LABEL_34:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,false>(v10, v32, a3, -v13, a5 & 1);
      int v11 = v32 + 1;
LABEL_36:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11, a2, (uint64_t)a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(v11, a2, (uint64_t)a3);
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *result, int *a2, uint64_t a3)
{
  BOOL v34 = result;
  if (result != a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v33 = 0;
      uint64_t v5 = *(void *)(*(void *)a3 + 224);
      uint64_t v6 = *(void *)(*(void *)a3 + 200);
      uint64_t v7 = result;
      do
      {
        int v8 = v7[1];
        uint64_t v9 = *v7;
        uint64_t v7 = v4;
        uint64_t v10 = v6 + 24 * *(int *)(v5 + 4 * v8);
        uint64_t v11 = v6 + 24 * *(int *)(v5 + 4 * v9);
        int v12 = *(char *)(v11 + 23);
        int v13 = *(char *)(v10 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(v10 + 23);
        }
        else {
          size_t v14 = *(void *)(v10 + 8);
        }
        if (v13 >= 0) {
          unint64_t v15 = (const void *)(v6 + 24 * *(int *)(v5 + 4 * v8));
        }
        else {
          unint64_t v15 = *(const void **)v10;
        }
        if (v12 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          size_t v16 = *(void *)(v11 + 8);
        }
        if (v12 >= 0) {
          uint64_t v17 = (const void *)(v6 + 24 * *(int *)(v5 + 4 * v9));
        }
        else {
          uint64_t v17 = *(const void **)v11;
        }
        if (v16 >= v14) {
          size_t v18 = v14;
        }
        else {
          size_t v18 = v16;
        }
        __n128 result = (int *)memcmp(v15, v17, v18);
        BOOL v19 = v14 < v16;
        if (result) {
          BOOL v19 = (int)result < 0;
        }
        if (v19)
        {
          uint64_t v20 = v33;
          while (1)
          {
            *(int *)((char *)v34 + v20 + 4) = v9;
            if (!v20) {
              break;
            }
            uint64_t v9 = *(int *)((char *)v34 + v20 - 4);
            uint64_t v21 = v6 + 24 * *(int *)(v5 + 4 * v8);
            uint64_t v22 = v6 + 24 * *(int *)(v5 + 4 * v9);
            int v23 = *(char *)(v22 + 23);
            int v24 = *(char *)(v21 + 23);
            if (v24 >= 0) {
              size_t v25 = *(unsigned __int8 *)(v21 + 23);
            }
            else {
              size_t v25 = *(void *)(v21 + 8);
            }
            if (v24 >= 0) {
              int v26 = (const void *)(v6 + 24 * *(int *)(v5 + 4 * v8));
            }
            else {
              int v26 = *(const void **)v21;
            }
            if (v23 >= 0) {
              size_t v27 = *(unsigned __int8 *)(v22 + 23);
            }
            else {
              size_t v27 = *(void *)(v22 + 8);
            }
            if (v23 >= 0) {
              uint64_t v28 = (const void *)(v6 + 24 * *(int *)(v5 + 4 * v9));
            }
            else {
              uint64_t v28 = *(const void **)v22;
            }
            if (v27 >= v25) {
              size_t v29 = v25;
            }
            else {
              size_t v29 = v27;
            }
            __n128 result = (int *)memcmp(v26, v28, v29);
            BOOL v30 = v25 < v27;
            if (result) {
              BOOL v30 = (int)result < 0;
            }
            v20 -= 4;
            if (!v30)
            {
              BOOL v31 = (int *)((char *)v34 + v20 + 4);
              goto LABEL_44;
            }
          }
          BOOL v31 = v34;
LABEL_44:
          uint64_t v3 = a2;
          *BOOL v31 = v8;
        }
        uint64_t v4 = v7 + 1;
        v33 += 4;
      }
      while (v7 + 1 != v3);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *result, int *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result;
    uint64_t v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = *(void *)(*(void *)a3 + 224);
      uint64_t v7 = *(void *)(*(void *)a3 + 200);
      do
      {
        int v8 = v4[1];
        uint64_t v9 = *v4;
        uint64_t v4 = v5;
        uint64_t v10 = v7 + 24 * *(int *)(v6 + 4 * v8);
        uint64_t v11 = v7 + 24 * *(int *)(v6 + 4 * v9);
        int v12 = *(char *)(v11 + 23);
        int v13 = *(char *)(v10 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(v10 + 23);
        }
        else {
          size_t v14 = *(void *)(v10 + 8);
        }
        if (v13 >= 0) {
          unint64_t v15 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v8));
        }
        else {
          unint64_t v15 = *(const void **)v10;
        }
        if (v12 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          size_t v16 = *(void *)(v11 + 8);
        }
        if (v12 >= 0) {
          uint64_t v17 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v9));
        }
        else {
          uint64_t v17 = *(const void **)v11;
        }
        if (v16 >= v14) {
          size_t v18 = v14;
        }
        else {
          size_t v18 = v16;
        }
        __n128 result = (int *)memcmp(v15, v17, v18);
        BOOL v19 = v14 < v16;
        if (result) {
          BOOL v19 = (int)result < 0;
        }
        if (v19)
        {
          uint64_t v20 = v4;
          do
          {
            *uint64_t v20 = v9;
            uint64_t v9 = *(v20 - 2);
            uint64_t v21 = v7 + 24 * *(int *)(v6 + 4 * v8);
            uint64_t v22 = v7 + 24 * *(int *)(v6 + 4 * v9);
            int v23 = *(char *)(v22 + 23);
            int v24 = *(char *)(v21 + 23);
            if (v24 >= 0) {
              size_t v25 = *(unsigned __int8 *)(v21 + 23);
            }
            else {
              size_t v25 = *(void *)(v21 + 8);
            }
            if (v24 >= 0) {
              int v26 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v8));
            }
            else {
              int v26 = *(const void **)v21;
            }
            if (v23 >= 0) {
              size_t v27 = *(unsigned __int8 *)(v22 + 23);
            }
            else {
              size_t v27 = *(void *)(v22 + 8);
            }
            if (v23 >= 0) {
              uint64_t v28 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v9));
            }
            else {
              uint64_t v28 = *(const void **)v22;
            }
            if (v27 >= v25) {
              size_t v29 = v25;
            }
            else {
              size_t v29 = v27;
            }
            __n128 result = (int *)memcmp(v26, v28, v29);
            BOOL v30 = v25 < v27;
            if (result) {
              BOOL v30 = (int)result < 0;
            }
            --v20;
          }
          while (v30);
          *uint64_t v20 = v8;
          uint64_t v3 = a2;
        }
        uint64_t v5 = v4 + 1;
      }
      while (v4 + 1 != v3);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v5 = *a1;
  uint64_t v6 = *(void *)(*(void *)a4 + 224);
  uint64_t v54 = *a2;
  uint64_t v7 = *(void *)(*(void *)a4 + 200);
  uint64_t v8 = v7 + 24 * *(int *)(v6 + 4 * v54);
  uint64_t v9 = v7 + 24 * *(int *)(v6 + 4 * *a1);
  int v10 = *(char *)(v9 + 23);
  int v11 = *(char *)(v8 + 23);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    size_t v12 = *(void *)(v8 + 8);
  }
  if (v11 >= 0) {
    int v13 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v54));
  }
  else {
    int v13 = *(const void **)v8;
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    size_t v14 = *(void *)(v9 + 8);
  }
  if (v10 >= 0) {
    unint64_t v15 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v5));
  }
  else {
    unint64_t v15 = *(const void **)v9;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  else {
    BOOL v18 = v12 < v14;
  }
  BOOL v19 = a3;
  uint64_t v20 = *a3;
  uint64_t v21 = v7 + 24 * *(int *)(v6 + 4 * v20);
  int v22 = *(char *)(v21 + 23);
  if (v22 >= 0) {
    size_t v23 = *(unsigned __int8 *)(v21 + 23);
  }
  else {
    size_t v23 = *(void *)(v21 + 8);
  }
  if (v22 >= 0) {
    int v24 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v20));
  }
  else {
    int v24 = *(const void **)v21;
  }
  if (v12 >= v23) {
    size_t v25 = v23;
  }
  else {
    size_t v25 = v12;
  }
  int v26 = memcmp(v24, v13, v25);
  BOOL v27 = v23 < v12;
  if (v26) {
    BOOL v27 = v26 < 0;
  }
  if (v18)
  {
    if (v27)
    {
      *a1 = v20;
      *a3 = v5;
      return 1;
    }
    *a1 = v54;
    *a2 = v5;
    uint64_t v41 = *a3;
    uint64_t v42 = v7 + 24 * *(int *)(v6 + 4 * v41);
    uint64_t v43 = v7 + 24 * *(int *)(v6 + 4 * v5);
    int v44 = *(char *)(v43 + 23);
    int v45 = *(char *)(v42 + 23);
    if (v45 >= 0) {
      size_t v46 = *(unsigned __int8 *)(v42 + 23);
    }
    else {
      size_t v46 = *(void *)(v42 + 8);
    }
    if (v45 >= 0) {
      size_t v47 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v41));
    }
    else {
      size_t v47 = *(const void **)v42;
    }
    if (v44 >= 0) {
      size_t v48 = *(unsigned __int8 *)(v43 + 23);
    }
    else {
      size_t v48 = *(void *)(v43 + 8);
    }
    if (v44 >= 0) {
      unint64_t v49 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v5));
    }
    else {
      unint64_t v49 = *(const void **)v43;
    }
    if (v48 >= v46) {
      size_t v50 = v46;
    }
    else {
      size_t v50 = v48;
    }
    int v51 = memcmp(v47, v49, v50);
    BOOL v52 = v46 < v48;
    if (v51) {
      BOOL v52 = v51 < 0;
    }
    if (!v52) {
      return 1;
    }
    *a2 = v41;
    int *v19 = v5;
    return 2;
  }
  if (v27)
  {
    *a2 = v20;
    *a3 = v54;
    uint64_t v28 = *a2;
    uint64_t v29 = *a1;
    uint64_t v30 = v7 + 24 * *(int *)(v6 + 4 * v28);
    uint64_t v31 = v7 + 24 * *(int *)(v6 + 4 * v29);
    int v32 = *(char *)(v31 + 23);
    int v33 = *(char *)(v30 + 23);
    if (v33 >= 0) {
      size_t v34 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      size_t v34 = *(void *)(v30 + 8);
    }
    if (v33 >= 0) {
      uint64_t v35 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v28));
    }
    else {
      uint64_t v35 = *(const void **)v30;
    }
    if (v32 >= 0) {
      size_t v36 = *(unsigned __int8 *)(v31 + 23);
    }
    else {
      size_t v36 = *(void *)(v31 + 8);
    }
    if (v32 >= 0) {
      uint64_t v37 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v29));
    }
    else {
      uint64_t v37 = *(const void **)v31;
    }
    if (v36 >= v34) {
      size_t v38 = v34;
    }
    else {
      size_t v38 = v36;
    }
    int v39 = memcmp(v35, v37, v38);
    BOOL v40 = v34 < v36;
    if (v39) {
      BOOL v40 = v39 < 0;
    }
    if (!v40) {
      return 1;
    }
    *a1 = v28;
    *a2 = v29;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  int v5 = *a1;
  uint64_t v6 = *(void *)(*(void *)a3 + 224);
  uint64_t v7 = *(void *)(*(void *)a3 + 200);
  uint64_t v8 = v7 + 24 * *(int *)(v6 + 4 * *a1);
  uint64_t v9 = v7 + 24 * *(int *)(v6 + 4 * *(a2 - 1));
  int v10 = *(char *)(v9 + 23);
  int v11 = *(char *)(v8 + 23);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    size_t v12 = *(void *)(v8 + 8);
  }
  if (v11 >= 0) {
    int v13 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v5));
  }
  else {
    int v13 = *(const void **)v8;
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    size_t v14 = *(void *)(v9 + 8);
  }
  if (v10 >= 0) {
    unint64_t v15 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * *(a2 - 1)));
  }
  else {
    unint64_t v15 = *(const void **)v9;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  std::string v66 = v4;
  if (v18)
  {
    do
    {
      uint64_t v19 = v4[1];
      ++v4;
      uint64_t v20 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v19));
      int v21 = *((char *)v20 + 23);
      if (v21 >= 0) {
        size_t v22 = *((unsigned __int8 *)v20 + 23);
      }
      else {
        size_t v22 = (size_t)v20[1];
      }
      if (v21 >= 0) {
        size_t v23 = v20;
      }
      else {
        size_t v23 = *v20;
      }
      if (v22 >= v12) {
        size_t v24 = v12;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v13, v23, v24);
      BOOL v26 = v12 < v22;
      if (v25) {
        BOOL v26 = v25 < 0;
      }
    }
    while (!v26);
  }
  else
  {
    BOOL v27 = v4 + 1;
    do
    {
      uint64_t v4 = v27;
      if (v27 >= v3) {
        break;
      }
      ++v27;
      uint64_t v28 = v7 + 24 * *(int *)(v6 + 4 * *v4);
      int v29 = *(char *)(v28 + 23);
      if (v29 >= 0) {
        size_t v30 = *(unsigned __int8 *)(v28 + 23);
      }
      else {
        size_t v30 = *(void *)(v28 + 8);
      }
      if (v29 >= 0) {
        uint64_t v31 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * *v4));
      }
      else {
        uint64_t v31 = *(const void **)v28;
      }
      if (v30 >= v12) {
        size_t v32 = v12;
      }
      else {
        size_t v32 = v30;
      }
      int v33 = memcmp(v13, v31, v32);
      BOOL v34 = v12 < v30;
      if (v33) {
        BOOL v34 = v33 < 0;
      }
    }
    while (!v34);
  }
  if (v4 < v3)
  {
    do
    {
      uint64_t v35 = *--v3;
      size_t v36 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v35));
      int v37 = *((char *)v36 + 23);
      if (v37 >= 0) {
        size_t v38 = *((unsigned __int8 *)v36 + 23);
      }
      else {
        size_t v38 = (size_t)v36[1];
      }
      if (v37 >= 0) {
        int v39 = v36;
      }
      else {
        int v39 = *v36;
      }
      if (v38 >= v12) {
        size_t v40 = v12;
      }
      else {
        size_t v40 = v38;
      }
      int v41 = memcmp(v13, v39, v40);
      BOOL v42 = v12 < v38;
      if (v41) {
        BOOL v42 = v41 < 0;
      }
    }
    while (v42);
  }
  int v67 = v5;
  if (v4 < v3)
  {
    uint64_t v68 = v5;
    int v43 = *v4;
    int v44 = *v3;
    do
    {
      *uint64_t v4 = v44;
      *uint64_t v3 = v43;
      uint64_t v45 = v7 + 24 * *(int *)(v6 + 4 * v68);
      int v46 = *(char *)(v45 + 23);
      if (v46 >= 0) {
        size_t v47 = *(unsigned __int8 *)(v45 + 23);
      }
      else {
        size_t v47 = *(void *)(v45 + 8);
      }
      if (v46 >= 0) {
        size_t v48 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v68));
      }
      else {
        size_t v48 = *(const void **)v45;
      }
      do
      {
        uint64_t v49 = v4[1];
        ++v4;
        int v43 = v49;
        size_t v50 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v49));
        int v51 = *((char *)v50 + 23);
        if (v51 >= 0) {
          size_t v52 = *((unsigned __int8 *)v50 + 23);
        }
        else {
          size_t v52 = (size_t)v50[1];
        }
        if (v51 >= 0) {
          unint64_t v53 = v50;
        }
        else {
          unint64_t v53 = *v50;
        }
        if (v52 >= v47) {
          size_t v54 = v47;
        }
        else {
          size_t v54 = v52;
        }
        int v55 = memcmp(v48, v53, v54);
        BOOL v56 = v47 < v52;
        if (v55) {
          BOOL v56 = v55 < 0;
        }
      }
      while (!v56);
      do
      {
        uint64_t v57 = *--v3;
        int v44 = v57;
        unint64_t v58 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v57));
        int v59 = *((char *)v58 + 23);
        if (v59 >= 0) {
          size_t v60 = *((unsigned __int8 *)v58 + 23);
        }
        else {
          size_t v60 = (size_t)v58[1];
        }
        if (v59 >= 0) {
          long long v61 = v58;
        }
        else {
          long long v61 = *v58;
        }
        if (v60 >= v47) {
          size_t v62 = v47;
        }
        else {
          size_t v62 = v60;
        }
        int v63 = memcmp(v48, v61, v62);
        BOOL v64 = v47 < v60;
        if (v63) {
          BOOL v64 = v63 < 0;
        }
      }
      while (v64);
    }
    while (v4 < v3);
  }
  if (v4 - 1 != v66) {
    *std::string v66 = *(v4 - 1);
  }
  *(v4 - 1) = v67;
  return v4;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int v5 = *a1;
  uint64_t v6 = *(void *)(*(void *)a3 + 224);
  uint64_t v7 = *(void *)(*(void *)a3 + 200);
  uint64_t v68 = *a1;
  unint64_t v69 = a1;
  uint64_t v8 = v7 + 24 * *(int *)(v6 + 4 * v68);
  char v9 = *(unsigned char *)(v8 + 23);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    size_t v10 = *(void *)(v8 + 8);
  }
  if (v9 >= 0) {
    int v11 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v5));
  }
  else {
    int v11 = *(const void **)v8;
  }
  do
  {
    uint64_t v12 = a1[v4 + 1];
    uint64_t v13 = v7 + 24 * *(int *)(v6 + 4 * v12);
    int v14 = *(char *)(v13 + 23);
    if (v14 >= 0) {
      size_t v15 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      size_t v15 = *(void *)(v13 + 8);
    }
    if (v14 >= 0) {
      size_t v16 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v12));
    }
    else {
      size_t v16 = *(const void **)v13;
    }
    if (v10 >= v15) {
      size_t v17 = v15;
    }
    else {
      size_t v17 = v10;
    }
    int v18 = memcmp(v16, v11, v17);
    BOOL v19 = v15 < v10;
    BOOL v20 = v18 == 0;
    BOOL v21 = v18 < 0;
    a1 = v69;
    char v22 = v21;
    if (!v20) {
      BOOL v19 = v22;
    }
    ++v4;
  }
  while (v19);
  int v67 = &v69[v4];
  size_t v23 = &v69[v4 - 1];
  if (v4 == 1)
  {
    do
    {
      if (v67 >= a2) {
        break;
      }
      uint64_t v32 = *--a2;
      int v33 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v32));
      int v34 = *((char *)v33 + 23);
      if (v34 >= 0) {
        size_t v35 = *((unsigned __int8 *)v33 + 23);
      }
      else {
        size_t v35 = (size_t)v33[1];
      }
      if (v34 >= 0) {
        size_t v36 = v33;
      }
      else {
        size_t v36 = *v33;
      }
      if (v10 >= v35) {
        size_t v37 = v35;
      }
      else {
        size_t v37 = v10;
      }
      int v38 = memcmp(v36, v11, v37);
      BOOL v39 = v35 < v10;
      if (v38) {
        BOOL v39 = v38 < 0;
      }
    }
    while (!v39);
  }
  else
  {
    do
    {
      uint64_t v24 = *--a2;
      int v25 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v24));
      int v26 = *((char *)v25 + 23);
      if (v26 >= 0) {
        size_t v27 = *((unsigned __int8 *)v25 + 23);
      }
      else {
        size_t v27 = (size_t)v25[1];
      }
      if (v26 >= 0) {
        uint64_t v28 = v25;
      }
      else {
        uint64_t v28 = *v25;
      }
      if (v10 >= v27) {
        size_t v29 = v27;
      }
      else {
        size_t v29 = v10;
      }
      int v30 = memcmp(v28, v11, v29);
      BOOL v31 = v27 < v10;
      if (v30) {
        BOOL v31 = v30 < 0;
      }
    }
    while (!v31);
  }
  if (v67 < a2)
  {
    int v40 = *a2;
    int v41 = a2;
    int v42 = v12;
    int v43 = v67;
    int v66 = v5;
    int v44 = v41;
    do
    {
      *int v43 = v40;
      *int v44 = v42;
      uint64_t v45 = v7 + 24 * *(int *)(v6 + 4 * v68);
      int v46 = *(char *)(v45 + 23);
      if (v46 >= 0) {
        size_t v47 = *(unsigned __int8 *)(v45 + 23);
      }
      else {
        size_t v47 = *(void *)(v45 + 8);
      }
      if (v46 >= 0) {
        size_t v48 = (const void *)(v7 + 24 * *(int *)(v6 + 4 * v68));
      }
      else {
        size_t v48 = *(const void **)v45;
      }
      do
      {
        uint64_t v49 = v43[1];
        ++v43;
        int v42 = v49;
        size_t v50 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v49));
        int v51 = *((char *)v50 + 23);
        if (v51 >= 0) {
          size_t v52 = *((unsigned __int8 *)v50 + 23);
        }
        else {
          size_t v52 = (size_t)v50[1];
        }
        if (v51 >= 0) {
          unint64_t v53 = v50;
        }
        else {
          unint64_t v53 = *v50;
        }
        if (v47 >= v52) {
          size_t v54 = v52;
        }
        else {
          size_t v54 = v47;
        }
        int v55 = memcmp(v53, v48, v54);
        BOOL v56 = v52 < v47;
        if (v55) {
          BOOL v56 = v55 < 0;
        }
      }
      while (v56);
      do
      {
        uint64_t v57 = *--v44;
        int v40 = v57;
        unint64_t v58 = (const void **)(v7 + 24 * *(int *)(v6 + 4 * v57));
        int v59 = *((char *)v58 + 23);
        if (v59 >= 0) {
          size_t v60 = *((unsigned __int8 *)v58 + 23);
        }
        else {
          size_t v60 = (size_t)v58[1];
        }
        if (v59 >= 0) {
          long long v61 = v58;
        }
        else {
          long long v61 = *v58;
        }
        if (v47 >= v60) {
          size_t v62 = v60;
        }
        else {
          size_t v62 = v47;
        }
        int v63 = memcmp(v61, v48, v62);
        BOOL v64 = v60 < v47;
        if (v63) {
          BOOL v64 = v63 < 0;
        }
      }
      while (!v64);
    }
    while (v43 < v44);
    size_t v23 = v43 - 1;
    int v5 = v66;
  }
  if (v23 != v69) {
    *unint64_t v69 = *v23;
  }
  int *v23 = v5;
  return v23;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      uint64_t v10 = *(void *)(*(void *)a3 + 224);
      uint64_t v11 = *(void *)(*(void *)a3 + 200);
      uint64_t v12 = (const void **)(v11 + 24 * *(int *)(v10 + 4 * v8));
      uint64_t v13 = (const void **)(v11 + 24 * *(int *)(v10 + 4 * v9));
      int v14 = *((char *)v13 + 23);
      int v15 = *((char *)v12 + 23);
      if (v15 >= 0) {
        size_t v16 = *((unsigned __int8 *)v12 + 23);
      }
      else {
        size_t v16 = (size_t)v12[1];
      }
      if (v15 >= 0) {
        size_t v17 = v12;
      }
      else {
        size_t v17 = *v12;
      }
      if (v14 >= 0) {
        size_t v18 = *((unsigned __int8 *)v13 + 23);
      }
      else {
        size_t v18 = (size_t)v13[1];
      }
      if (v14 >= 0) {
        BOOL v19 = v13;
      }
      else {
        BOOL v19 = *v13;
      }
      if (v18 >= v16) {
        size_t v20 = v16;
      }
      else {
        size_t v20 = v18;
      }
      int v21 = memcmp(v17, v19, v20);
      BOOL v22 = v16 < v18;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (v22)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      size_t v23 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v24 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v61 = 0;
      uint64_t v25 = *(void *)a3;
      uint64_t v26 = *(void *)(*(void *)a3 + 224);
      uint64_t v27 = *(void *)(v25 + 200);
      uint64_t v28 = 12;
      size_t v62 = a2;
      break;
  }
  while (1)
  {
    int v29 = *v24;
    uint64_t v30 = *v23;
    uint64_t v31 = v27 + 24 * *(int *)(v26 + 4 * *v24);
    uint64_t v32 = v27 + 24 * *(int *)(v26 + 4 * v30);
    int v33 = *(char *)(v32 + 23);
    int v34 = *(char *)(v31 + 23);
    if (v34 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v31 + 23);
    }
    else {
      size_t v35 = *(void *)(v31 + 8);
    }
    if (v34 >= 0) {
      size_t v36 = (const void *)(v27 + 24 * *(int *)(v26 + 4 * v29));
    }
    else {
      size_t v36 = *(const void **)v31;
    }
    if (v33 >= 0) {
      size_t v37 = *(unsigned __int8 *)(v32 + 23);
    }
    else {
      size_t v37 = *(void *)(v32 + 8);
    }
    if (v33 >= 0) {
      int v38 = (const void *)(v27 + 24 * *(int *)(v26 + 4 * v30));
    }
    else {
      int v38 = *(const void **)v32;
    }
    if (v37 >= v35) {
      size_t v39 = v35;
    }
    else {
      size_t v39 = v37;
    }
    int v40 = memcmp(v36, v38, v39);
    BOOL v41 = v35 < v37;
    if (v40) {
      BOOL v41 = v40 < 0;
    }
    if (v41) {
      break;
    }
    uint64_t v57 = v62;
LABEL_65:
    size_t v23 = v24;
    v28 += 4;
    if (++v24 == v57) {
      return 1;
    }
  }
  int v59 = v29;
  size_t v60 = v24;
  uint64_t v42 = v29;
  uint64_t v43 = v28;
  while (1)
  {
    *(int *)((char *)a1 + v43) = v30;
    uint64_t v44 = v43 - 4;
    if (v43 == 4) {
      break;
    }
    uint64_t v30 = *(int *)((char *)a1 + v43 - 8);
    uint64_t v45 = v27 + 24 * *(int *)(v26 + 4 * v42);
    uint64_t v46 = v27 + 24 * *(int *)(v26 + 4 * v30);
    int v47 = *(char *)(v46 + 23);
    int v48 = *(char *)(v45 + 23);
    if (v48 >= 0) {
      size_t v49 = *(unsigned __int8 *)(v45 + 23);
    }
    else {
      size_t v49 = *(void *)(v45 + 8);
    }
    if (v48 >= 0) {
      size_t v50 = (const void *)(v27 + 24 * *(int *)(v26 + 4 * v42));
    }
    else {
      size_t v50 = *(const void **)v45;
    }
    if (v47 >= 0) {
      size_t v51 = *(unsigned __int8 *)(v46 + 23);
    }
    else {
      size_t v51 = *(void *)(v46 + 8);
    }
    if (v47 >= 0) {
      size_t v52 = (const void *)(v27 + 24 * *(int *)(v26 + 4 * v30));
    }
    else {
      size_t v52 = *(const void **)v46;
    }
    if (v51 >= v49) {
      size_t v53 = v49;
    }
    else {
      size_t v53 = v51;
    }
    int v54 = memcmp(v50, v52, v53);
    BOOL v55 = v54 < 0;
    if (!v54) {
      BOOL v55 = v49 < v51;
    }
    uint64_t v43 = v44;
    if (!v55)
    {
      BOOL v56 = (int *)((char *)a1 + v44);
      goto LABEL_64;
    }
  }
  BOOL v56 = a1;
LABEL_64:
  uint64_t v57 = v62;
  uint64_t v24 = v60;
  int v58 = v61;
  *BOOL v56 = v59;
  ++v61;
  if (v58 != 7) {
    goto LABEL_65;
  }
  return v60 + 1 == v62;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a2, a3, a5);
  uint64_t v10 = *a4;
  uint64_t v11 = *a3;
  uint64_t v12 = *(void *)a5;
  uint64_t v13 = *(void *)(*(void *)a5 + 224);
  uint64_t v14 = *(void *)(v12 + 200);
  uint64_t v15 = v14 + 24 * *(int *)(v13 + 4 * v10);
  uint64_t v16 = v14 + 24 * *(int *)(v13 + 4 * v11);
  int v17 = *(char *)(v16 + 23);
  int v18 = *(char *)(v15 + 23);
  if (v18 >= 0) {
    size_t v19 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    size_t v19 = *(void *)(v15 + 8);
  }
  if (v18 >= 0) {
    size_t v20 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v10));
  }
  else {
    size_t v20 = *(const void **)v15;
  }
  if (v17 >= 0) {
    size_t v21 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    size_t v21 = *(void *)(v16 + 8);
  }
  if (v17 >= 0) {
    BOOL v22 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v11));
  }
  else {
    BOOL v22 = *(const void **)v16;
  }
  if (v21 >= v19) {
    size_t v23 = v19;
  }
  else {
    size_t v23 = v21;
  }
  uint64_t result = memcmp(v20, v22, v23);
  BOOL v25 = v19 < v21;
  if (result) {
    BOOL v25 = (int)result < 0;
  }
  if (v25)
  {
    *a3 = v10;
    *a4 = v11;
    uint64_t v26 = *a3;
    uint64_t v27 = *a2;
    uint64_t v28 = v14 + 24 * *(int *)(v13 + 4 * v26);
    uint64_t v29 = v14 + 24 * *(int *)(v13 + 4 * v27);
    int v30 = *(char *)(v29 + 23);
    int v31 = *(char *)(v28 + 23);
    if (v31 >= 0) {
      size_t v32 = *(unsigned __int8 *)(v28 + 23);
    }
    else {
      size_t v32 = *(void *)(v28 + 8);
    }
    if (v31 >= 0) {
      int v33 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v26));
    }
    else {
      int v33 = *(const void **)v28;
    }
    if (v30 >= 0) {
      size_t v34 = *(unsigned __int8 *)(v29 + 23);
    }
    else {
      size_t v34 = *(void *)(v29 + 8);
    }
    if (v30 >= 0) {
      size_t v35 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v27));
    }
    else {
      size_t v35 = *(const void **)v29;
    }
    if (v34 >= v32) {
      size_t v36 = v32;
    }
    else {
      size_t v36 = v34;
    }
    uint64_t result = memcmp(v33, v35, v36);
    BOOL v37 = v32 < v34;
    if (result) {
      BOOL v37 = (int)result < 0;
    }
    if (v37)
    {
      *a2 = v26;
      *a3 = v27;
      uint64_t v38 = *a2;
      uint64_t v39 = *a1;
      int v40 = (const void **)(v14 + 24 * *(int *)(v13 + 4 * v38));
      BOOL v41 = (const void **)(v14 + 24 * *(int *)(v13 + 4 * v39));
      int v42 = *((char *)v41 + 23);
      int v43 = *((char *)v40 + 23);
      if (v43 >= 0) {
        size_t v44 = *((unsigned __int8 *)v40 + 23);
      }
      else {
        size_t v44 = (size_t)v40[1];
      }
      if (v43 >= 0) {
        uint64_t v45 = v40;
      }
      else {
        uint64_t v45 = *v40;
      }
      if (v42 >= 0) {
        size_t v46 = *((unsigned __int8 *)v41 + 23);
      }
      else {
        size_t v46 = (size_t)v41[1];
      }
      if (v42 >= 0) {
        int v47 = v41;
      }
      else {
        int v47 = *v41;
      }
      if (v46 >= v44) {
        size_t v48 = v44;
      }
      else {
        size_t v48 = v46;
      }
      uint64_t result = memcmp(v45, v47, v48);
      BOOL v49 = v44 < v46;
      if (result) {
        BOOL v49 = (int)result < 0;
      }
      if (v49)
      {
        *a1 = v38;
        *a2 = v39;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a2, a3, a4, a6);
  uint64_t v11 = *a5;
  uint64_t v12 = *a4;
  uint64_t v13 = *(void *)a6;
  uint64_t v14 = *(void *)(*(void *)a6 + 224);
  uint64_t v15 = *(void *)(v13 + 200);
  uint64_t v16 = v15 + 24 * *(int *)(v14 + 4 * v11);
  uint64_t v17 = v15 + 24 * *(int *)(v14 + 4 * v12);
  int v18 = *(char *)(v17 + 23);
  int v19 = *(char *)(v16 + 23);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v16 + 23);
  }
  else {
    size_t v20 = *(void *)(v16 + 8);
  }
  if (v19 >= 0) {
    size_t v21 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v11));
  }
  else {
    size_t v21 = *(const void **)v16;
  }
  if (v18 >= 0) {
    size_t v22 = *(unsigned __int8 *)(v17 + 23);
  }
  else {
    size_t v22 = *(void *)(v17 + 8);
  }
  if (v18 >= 0) {
    size_t v23 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v12));
  }
  else {
    size_t v23 = *(const void **)v17;
  }
  if (v22 >= v20) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v22;
  }
  uint64_t result = memcmp(v21, v23, v24);
  BOOL v26 = v20 < v22;
  if (result) {
    BOOL v26 = (int)result < 0;
  }
  if (v26)
  {
    *a4 = v11;
    *a5 = v12;
    uint64_t v27 = *a4;
    uint64_t v28 = *a3;
    uint64_t v29 = v15 + 24 * *(int *)(v14 + 4 * v27);
    uint64_t v30 = v15 + 24 * *(int *)(v14 + 4 * v28);
    int v31 = *(char *)(v30 + 23);
    int v32 = *(char *)(v29 + 23);
    if (v32 >= 0) {
      size_t v33 = *(unsigned __int8 *)(v29 + 23);
    }
    else {
      size_t v33 = *(void *)(v29 + 8);
    }
    if (v32 >= 0) {
      size_t v34 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v27));
    }
    else {
      size_t v34 = *(const void **)v29;
    }
    if (v31 >= 0) {
      size_t v35 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      size_t v35 = *(void *)(v30 + 8);
    }
    if (v31 >= 0) {
      size_t v36 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v28));
    }
    else {
      size_t v36 = *(const void **)v30;
    }
    if (v35 >= v33) {
      size_t v37 = v33;
    }
    else {
      size_t v37 = v35;
    }
    uint64_t result = memcmp(v34, v36, v37);
    BOOL v38 = v33 < v35;
    if (result) {
      BOOL v38 = (int)result < 0;
    }
    if (v38)
    {
      *a3 = v27;
      *a4 = v28;
      uint64_t v39 = *a3;
      uint64_t v40 = *a2;
      uint64_t v41 = v15 + 24 * *(int *)(v14 + 4 * v39);
      uint64_t v42 = v15 + 24 * *(int *)(v14 + 4 * v40);
      int v43 = *(char *)(v42 + 23);
      int v44 = *(char *)(v41 + 23);
      if (v44 >= 0) {
        size_t v45 = *(unsigned __int8 *)(v41 + 23);
      }
      else {
        size_t v45 = *(void *)(v41 + 8);
      }
      if (v44 >= 0) {
        size_t v46 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v39));
      }
      else {
        size_t v46 = *(const void **)v41;
      }
      if (v43 >= 0) {
        size_t v47 = *(unsigned __int8 *)(v42 + 23);
      }
      else {
        size_t v47 = *(void *)(v42 + 8);
      }
      if (v43 >= 0) {
        size_t v48 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v40));
      }
      else {
        size_t v48 = *(const void **)v42;
      }
      if (v47 >= v45) {
        size_t v49 = v45;
      }
      else {
        size_t v49 = v47;
      }
      uint64_t result = memcmp(v46, v48, v49);
      BOOL v50 = v45 < v47;
      if (result) {
        BOOL v50 = (int)result < 0;
      }
      if (v50)
      {
        *a2 = v39;
        *a3 = v40;
        uint64_t v51 = *a2;
        uint64_t v52 = *a1;
        uint64_t v53 = v15 + 24 * *(int *)(v14 + 4 * v51);
        uint64_t v54 = v15 + 24 * *(int *)(v14 + 4 * v52);
        int v55 = *(char *)(v54 + 23);
        int v56 = *(char *)(v53 + 23);
        if (v56 >= 0) {
          size_t v57 = *(unsigned __int8 *)(v53 + 23);
        }
        else {
          size_t v57 = *(void *)(v53 + 8);
        }
        if (v56 >= 0) {
          int v58 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v51));
        }
        else {
          int v58 = *(const void **)v53;
        }
        if (v55 >= 0) {
          size_t v59 = *(unsigned __int8 *)(v54 + 23);
        }
        else {
          size_t v59 = *(void *)(v54 + 8);
        }
        if (v55 >= 0) {
          size_t v60 = (const void *)(v15 + 24 * *(int *)(v14 + 4 * v52));
        }
        else {
          size_t v60 = *(const void **)v54;
        }
        if (v59 >= v57) {
          size_t v61 = v57;
        }
        else {
          size_t v61 = v59;
        }
        uint64_t result = memcmp(v58, v60, v61);
        BOOL v62 = v57 < v59;
        if (result) {
          BOOL v62 = (int)result < 0;
        }
        if (v62)
        {
          *a1 = v51;
          *a2 = v52;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>((uint64_t)a1, (uint64_t)a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v36 = v8;
      size_t v37 = v6;
      uint64_t v14 = v6;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *a1;
        uint64_t v17 = *(void *)(*a4 + 224);
        uint64_t v18 = *(void *)(*a4 + 200);
        int v19 = (const void **)(v18 + 24 * *(int *)(v17 + 4 * v15));
        size_t v20 = (const void **)(v18 + 24 * *(int *)(v17 + 4 * v16));
        int v21 = *((char *)v20 + 23);
        int v22 = *((char *)v19 + 23);
        if (v22 >= 0) {
          size_t v23 = *((unsigned __int8 *)v19 + 23);
        }
        else {
          size_t v23 = (size_t)v19[1];
        }
        if (v22 >= 0) {
          size_t v24 = v19;
        }
        else {
          size_t v24 = *v19;
        }
        if (v21 >= 0) {
          size_t v25 = *((unsigned __int8 *)v20 + 23);
        }
        else {
          size_t v25 = (size_t)v20[1];
        }
        if (v21 >= 0) {
          BOOL v26 = v20;
        }
        else {
          BOOL v26 = *v20;
        }
        if (v25 >= v23) {
          size_t v27 = v23;
        }
        else {
          size_t v27 = v25;
        }
        int v28 = memcmp(v24, v26, v27);
        BOOL v29 = v23 < v25;
        if (v28) {
          BOOL v29 = v28 < 0;
        }
        if (v29)
        {
          *uint64_t v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>((uint64_t)a1, (uint64_t)a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
      uint64_t v8 = v36;
      uint64_t v6 = v37;
    }
    if (v8 >= 5)
    {
      uint64_t v30 = (unint64_t)v8 >> 2;
      int v31 = v6 - 1;
      do
      {
        int v32 = *a1;
        size_t v33 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(a1, a4, v30);
        if (v31 == v33)
        {
          int *v33 = v32;
        }
        else
        {
          int *v33 = *v31;
          *int v31 = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>((uint64_t)a1, (uint64_t)(v33 + 1), (uint64_t)a4, v33 + 1 - a1);
        }
        --v31;
      }
      while (v30-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    int v5 = a4;
    uint64_t v6 = result;
    uint64_t v79 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v7 = a3;
      uint64_t v8 = ((uint64_t)a4 - result) >> 1;
      uint64_t v9 = v8 + 1;
      unint64_t v10 = (int *)(result + 4 * (v8 + 1));
      uint64_t v11 = v8 + 2;
      int v12 = *v10;
      if (v11 >= a3)
      {
        unint64_t v80 = v10;
        uint64_t v13 = *(void *)(*(void *)a2 + 224);
        uint64_t v26 = *(void *)(*(void *)a2 + 200);
        int v29 = *v10;
      }
      else
      {
        uint64_t v77 = v11;
        uint64_t v75 = v10[1];
        uint64_t v13 = *(void *)(*(void *)a2 + 224);
        uint64_t v14 = *(void *)(*(void *)a2 + 200);
        uint64_t v15 = v14 + 24 * *(int *)(v13 + 4 * v12);
        uint64_t v16 = v14 + 24 * *(int *)(v13 + 4 * v75);
        int v17 = *(char *)(v16 + 23);
        int v18 = *(char *)(v15 + 23);
        if (v18 >= 0) {
          size_t v19 = *(unsigned __int8 *)(v15 + 23);
        }
        else {
          size_t v19 = *(void *)(v15 + 8);
        }
        if (v18 >= 0) {
          size_t v20 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v12));
        }
        else {
          size_t v20 = *(const void **)v15;
        }
        if (v17 >= 0) {
          size_t v21 = *(unsigned __int8 *)(v16 + 23);
        }
        else {
          size_t v21 = *(void *)(v16 + 8);
        }
        if (v17 >= 0) {
          int v22 = (const void *)(v14 + 24 * *(int *)(v13 + 4 * v75));
        }
        else {
          int v22 = *(const void **)v16;
        }
        if (v21 >= v19) {
          size_t v23 = v19;
        }
        else {
          size_t v23 = v21;
        }
        int v24 = memcmp(v20, v22, v23);
        BOOL v25 = v19 >= v21;
        uint64_t v26 = v14;
        BOOL v27 = !v25;
        if (v24) {
          BOOL v27 = v24 < 0;
        }
        BOOL v28 = !v27;
        if (v27) {
          int v29 = v75;
        }
        else {
          int v29 = v12;
        }
        if (!v28) {
          ++v10;
        }
        unint64_t v80 = v10;
        if (!v28) {
          uint64_t v9 = v77;
        }
      }
      int v30 = *v5;
      int v31 = v29;
      int v32 = (const void **)(v26 + 24 * *(int *)(v13 + 4 * v29));
      uint64_t v33 = v26 + 24 * *(int *)(v13 + 4 * *v5);
      int v34 = *(char *)(v33 + 23);
      int v35 = *((char *)v32 + 23);
      if (v35 >= 0) {
        size_t v36 = *((unsigned __int8 *)v32 + 23);
      }
      else {
        size_t v36 = (size_t)v32[1];
      }
      if (v35 >= 0) {
        size_t v37 = v32;
      }
      else {
        size_t v37 = *v32;
      }
      if (v34 >= 0) {
        size_t v38 = *(unsigned __int8 *)(v33 + 23);
      }
      else {
        size_t v38 = *(void *)(v33 + 8);
      }
      if (v34 >= 0) {
        uint64_t v39 = (const void *)(v26 + 24 * *(int *)(v13 + 4 * v30));
      }
      else {
        uint64_t v39 = *(const void **)v33;
      }
      if (v38 >= v36) {
        size_t v40 = v36;
      }
      else {
        size_t v40 = v38;
      }
      uint64_t result = memcmp(v37, v39, v40);
      BOOL v41 = v36 < v38;
      if (result) {
        BOOL v41 = (int)result < 0;
      }
      if (!v41)
      {
        int v72 = v30;
        uint64_t v73 = v13;
        uint64_t v76 = v26;
        uint64_t v78 = v30;
        uint64_t v42 = v80;
        int v43 = v31;
        do
        {
          int v44 = v42;
          *int v5 = v43;
          if (v79 < v9) {
            break;
          }
          uint64_t v45 = (2 * v9) | 1;
          uint64_t v42 = (int *)(v6 + 4 * v45);
          uint64_t v9 = 2 * v9 + 2;
          int v43 = *v42;
          if (v9 >= v7)
          {
            uint64_t v9 = v45;
            uint64_t v47 = v76;
          }
          else
          {
            int v81 = *v42;
            size_t v46 = v42 + 1;
            uint64_t v74 = v42[1];
            uint64_t v47 = v76;
            size_t v48 = (const void **)(v76 + 24 * *(int *)(v13 + 4 * v43));
            size_t v49 = (const void **)(v76 + 24 * *(int *)(v13 + 4 * v74));
            int v50 = *((char *)v49 + 23);
            int v51 = *((char *)v48 + 23);
            uint64_t v52 = (int *)(v6 + 4 * v45);
            if (v51 >= 0) {
              size_t v53 = *((unsigned __int8 *)v48 + 23);
            }
            else {
              size_t v53 = (size_t)v48[1];
            }
            if (v51 >= 0) {
              uint64_t v54 = v48;
            }
            else {
              uint64_t v54 = *v48;
            }
            uint64_t v55 = v6;
            uint64_t v56 = v7;
            if (v50 >= 0) {
              size_t v57 = *((unsigned __int8 *)v49 + 23);
            }
            else {
              size_t v57 = (size_t)v49[1];
            }
            if (v50 >= 0) {
              int v58 = v49;
            }
            else {
              int v58 = *v49;
            }
            if (v57 >= v53) {
              size_t v59 = v53;
            }
            else {
              size_t v59 = v57;
            }
            int v60 = memcmp(v54, v58, v59);
            BOOL v25 = v53 >= v57;
            uint64_t v42 = v52;
            uint64_t v7 = v56;
            uint64_t v6 = v55;
            BOOL v61 = !v25;
            if (v60) {
              BOOL v61 = v60 < 0;
            }
            uint64_t v13 = v73;
            int v43 = v61 ? v74 : v81;
            if (v61) {
              uint64_t v42 = v46;
            }
            else {
              uint64_t v9 = v45;
            }
          }
          uint64_t v62 = v47 + 24 * *(int *)(v13 + 4 * v43);
          uint64_t v63 = v47 + 24 * *(int *)(v13 + 4 * v78);
          int v64 = *(char *)(v63 + 23);
          int v65 = *(char *)(v62 + 23);
          unint64_t v66 = v65 >= 0 ? *(unsigned __int8 *)(v62 + 23) : *(void *)(v62 + 8);
          int v67 = v65 >= 0 ? (const void *)v62 : *(const void **)v62;
          unint64_t v68 = v64 >= 0 ? *(unsigned __int8 *)(v63 + 23) : *(void *)(v63 + 8);
          unint64_t v69 = v64 >= 0 ? (const void *)v63 : *(const void **)v63;
          size_t v70 = v68 >= v66 ? v66 : v68;
          uint64_t result = memcmp(v67, v69, v70);
          BOOL v71 = v66 < v68;
          if (result) {
            BOOL v71 = (int)result < 0;
          }
          int v5 = v44;
        }
        while (!v71);
        *int v44 = v72;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v29 = *a2;
  uint64_t v30 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[v5];
    int v11 = v8[1];
    uint64_t v9 = v8 + 1;
    int v10 = v11;
    uint64_t v12 = (2 * v5) | 1;
    uint64_t v13 = 2 * v5 + 2;
    if (v13 >= a3)
    {
      uint64_t v5 = (2 * v5) | 1;
    }
    else
    {
      uint64_t v14 = (int)v9[1];
      uint64_t v15 = *(void *)(v29 + 224);
      uint64_t v16 = *(void *)(v29 + 200);
      int v17 = (const void **)(v16 + 24 * *(int *)(v15 + 4 * v10));
      int v18 = (const void **)(v16 + 24 * *(int *)(v15 + 4 * v14));
      int v19 = *((char *)v18 + 23);
      int v20 = *((char *)v17 + 23);
      if (v20 >= 0) {
        size_t v21 = *((unsigned __int8 *)v17 + 23);
      }
      else {
        size_t v21 = (size_t)v17[1];
      }
      if (v20 >= 0) {
        int v22 = v17;
      }
      else {
        int v22 = *v17;
      }
      if (v19 >= 0) {
        size_t v23 = *((unsigned __int8 *)v18 + 23);
      }
      else {
        size_t v23 = (size_t)v18[1];
      }
      if (v19 >= 0) {
        int v24 = v18;
      }
      else {
        int v24 = *v18;
      }
      if (v23 >= v21) {
        size_t v25 = v21;
      }
      else {
        size_t v25 = v23;
      }
      int v26 = memcmp(v22, v24, v25);
      uint64_t v7 = v30;
      BOOL v27 = v21 < v23;
      if (v26) {
        BOOL v27 = v26 < 0;
      }
      if (v27)
      {
        int v10 = v14;
        ++v9;
        uint64_t v5 = v13;
      }
      else
      {
        uint64_t v5 = v12;
      }
    }
    *a1 = v10;
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::CompactSimpleLmeEnumerationsProcessor::buildFst(void)::{lambda(int,int)#1} &,int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (int *)(result + 4 * (v4 >> 1));
    uint64_t v8 = *v7;
    uint64_t v9 = (_DWORD *)(a2 - 4);
    int v10 = *(_DWORD *)(a2 - 4);
    uint64_t v11 = *(void *)(*(void *)a3 + 224);
    uint64_t v12 = *(void *)(*(void *)a3 + 200);
    uint64_t v13 = v12 + 24 * *(int *)(v11 + 4 * v8);
    uint64_t v14 = v12 + 24 * *(int *)(v11 + 4 * v10);
    int v15 = *(char *)(v14 + 23);
    int v16 = *(char *)(v13 + 23);
    if (v16 >= 0) {
      size_t v17 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      size_t v17 = *(void *)(v13 + 8);
    }
    if (v16 >= 0) {
      int v18 = (const void *)(v12 + 24 * *(int *)(v11 + 4 * v8));
    }
    else {
      int v18 = *(const void **)v13;
    }
    if (v15 >= 0) {
      size_t v19 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      size_t v19 = *(void *)(v14 + 8);
    }
    if (v15 >= 0) {
      int v20 = (const void *)(v12 + 24 * *(int *)(v11 + 4 * v10));
    }
    else {
      int v20 = *(const void **)v14;
    }
    if (v19 >= v17) {
      size_t v21 = v17;
    }
    else {
      size_t v21 = v19;
    }
    uint64_t result = memcmp(v18, v20, v21);
    BOOL v22 = v17 < v19;
    if (result) {
      BOOL v22 = (int)result < 0;
    }
    if (v22)
    {
      int v37 = v10;
      uint64_t v23 = v10;
      do
      {
        int v24 = v7;
        *uint64_t v9 = v8;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (int *)(v5 + 4 * v6);
        uint64_t v8 = *v7;
        uint64_t v25 = v12 + 24 * *(int *)(v11 + 4 * v8);
        uint64_t v26 = v12 + 24 * *(int *)(v11 + 4 * v23);
        int v27 = *(char *)(v26 + 23);
        int v28 = *(char *)(v25 + 23);
        unint64_t v29 = v28 >= 0 ? *(unsigned __int8 *)(v25 + 23) : *(void *)(v25 + 8);
        uint64_t v30 = v28 >= 0 ? (const void *)(v12 + 24 * *(int *)(v11 + 4 * v8)) : *(const void **)v25;
        uint64_t v31 = v5;
        unint64_t v32 = v27 >= 0 ? *(unsigned __int8 *)(v26 + 23) : *(void *)(v26 + 8);
        uint64_t v33 = v27 >= 0 ? (const void *)(v12 + 24 * *(int *)(v11 + 4 * v23)) : *(const void **)v26;
        size_t v34 = v32 >= v29 ? v29 : v32;
        uint64_t result = memcmp(v30, v33, v34);
        BOOL v35 = v29 >= v32;
        uint64_t v5 = v31;
        BOOL v36 = !v35;
        if (result) {
          BOOL v36 = (int)result < 0;
        }
        uint64_t v9 = v24;
      }
      while (v36);
      _DWORD *v24 = v37;
    }
  }
  return result;
}

uint64_t *std::shared_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::shared_ptr[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::default_delete<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_impl<std::pair<char const*,double>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node<std::pair<char const*,double>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void **)__p;
    std::string __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_1B21FE560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node<std::pair<char const*,double>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x30uLL);
  *(void *)(a3 + 8) = v6;
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  *((_DWORD *)v7 + 1std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = (int)*(double *)(a2 + 8);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_1B21FE614(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,0>(uint64_t a1)
{
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_1B21FE80C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

std::string *std::vector<std::vector<std::string>>::vector<std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,0>(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 == a3)
  {
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      uint64_t v5 = v7;
    }
    while (v7 != a3);
  }
  std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>>(a1, a2, a3, v4);
  return a1;
}

std::string *std::vector<std::vector<std::string>>::__init_with_size[abi:ne180100]<std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>>(std::string *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    unint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::vector<std::string>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B21FE96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::__tree_const_iterator<std::vector<std::string>,std::__tree_node<std::vector<std::string>,void *> *,long>,std::vector<std::string>*>(uint64_t a1, void *a2, void *a3, std::string *a4)
{
  unint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, (long long *)v6[4], (long long *)v6[5], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[5] - v6[4]) >> 3));
      uint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = ++v14;
      uint64_t v6 = v8;
    }
    while (v8 != a3);
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_1B21FEA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__move_assign(uint64_t a1, void *a2)
{
  unint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *unint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t std::__function::__value_func<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::LmeDataFactoryBase::Word *,quasar::LmeDataFactoryBase::Word *,quasar::LmeDataFactoryBase::Word *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      BOOL v8 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0) {
        operator delete(*v8);
      }
      long long v9 = *(long long *)((char *)v5 + 24);
      *(void *)(a4 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((void *)v5 + 5);
      *(_OWORD *)BOOL v8 = v9;
      *((unsigned char *)v5 + 47) = 0;
      *((unsigned char *)v5 + 24) = 0;
      *(_DWORD *)(a4 + 48) = *((_DWORD *)v5 + 12);
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__move_assign(a4 + 56, (void *)v5 + 7);
      a4 += 80;
      v5 += 5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5A548;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5A548;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *(unsigned int *)(a1 + 16));
}

uint64_t std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>,std::allocator<std::__bind<BOOL (&)(quasar::LmeDataFactoryBase::Word const&,int),std::placeholders::__ph<1> const&,int &>>,BOOL ()(quasar::LmeDataFactoryBase::Word const&)>::target_type()
{
}

uint64_t **std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__assign_multi<std::__tree_const_iterator<quasar::LmeDataFactoryBase::Word,std::__tree_node<quasar::LmeDataFactoryBase::Word,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    long long v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      BOOL v8 = (uint64_t *)v6[1];
    }
    else {
      BOOL v8 = v6;
    }
    int v15 = result;
    int v16 = v8;
    size_t v17 = (const void **)v8;
    if (v8)
    {
      int v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          *((_DWORD *)v8 + 2std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *((_DWORD *)v9 + 20);
          if (v8 != (uint64_t *)v9) {
            std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>((uint64_t **)v8 + 11, *((void **)v9 + 11), (void *)v9 + 12);
          }
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          size_t v17 = (const void **)v16;
          if (v16) {
            int v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v12);
          }
          BOOL v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          long long v9 = a2;
        }
        while (!v12);
      }
    }
    __n128 result = (uint64_t **)std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__emplace_multi<quasar::LmeDataFactoryBase::Word const&>(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1B21FEF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__emplace_multi<quasar::LmeDataFactoryBase::Word const&>(uint64_t **a1, long long *a2)
{
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__construct_node<quasar::LmeDataFactoryBase::Word const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  unint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1B21FF024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__construct_node<quasar::LmeDataFactoryBase::Word const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(v5, (std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B21FF094(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
}

void sub_1B21FF144(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SystemSelectionFeatureExtractor::PopulateFeatureList(uint64_t a1, uint64_t a2)
{
  void v41[2] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 8) == *(void *)a2)
  {
    int v4 = *(_DWORD *)a1;
    if (*(int *)a1 >= 1)
    {
      int v5 = 0;
      long long v6 = (void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 16);
      do
      {
        uint64_t v8 = *(void *)(a1 + 8);
        ++v5;
        if (v8 != v7)
        {
          do
          {
            std::to_string(&v37, v5);
            long long v9 = std::string::insert(&v37, 0, "hyp");
            long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
            v38.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
            v9->__r_.__value_.__l.__size_ = 0;
            v9->__r_.__value_.__r.__words[2] = 0;
            v9->__r_.__value_.__r.__words[0] = 0;
            uint64_t v11 = std::string::append(&v38, "_");
            long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
            v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
            v11->__r_.__value_.__l.__size_ = 0;
            v11->__r_.__value_.__r.__words[2] = 0;
            v11->__r_.__value_.__r.__words[0] = 0;
            int v13 = *(char *)(v8 + 23);
            if (v13 >= 0) {
              uint64_t v14 = (const std::string::value_type *)v8;
            }
            else {
              uint64_t v14 = *(const std::string::value_type **)v8;
            }
            if (v13 >= 0) {
              std::string::size_type v15 = *(unsigned __int8 *)(v8 + 23);
            }
            else {
              std::string::size_type v15 = *(void *)(v8 + 8);
            }
            int v16 = std::string::append(&v40, v14, v15);
            std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
            v41[0] = v16->__r_.__value_.__l.__size_;
            *(void *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
            char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            unint64_t v19 = *(void *)(a1 + 40);
            unint64_t v20 = *(void *)(a1 + 48);
            if (v19 >= v20)
            {
              unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *v6) >> 3);
              unint64_t v24 = v23 + 1;
              if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v6) >> 3);
              if (2 * v25 > v24) {
                unint64_t v24 = 2 * v25;
              }
              if (v25 >= 0x555555555555555) {
                unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v26 = v24;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 48);
              if (v26) {
                int v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 48, v26);
              }
              else {
                int v27 = 0;
              }
              int v28 = v27 + v23;
              __v.__first_ = v27;
              __v.__begin_ = v28;
              __v.__end_cap_.__value_ = &v27[v26];
              std::string::size_type v29 = v41[0];
              v28->__r_.__value_.__r.__words[0] = v17;
              v28->__r_.__value_.__l.__size_ = v29;
              *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v41 + 7);
              *((unsigned char *)&v28->__r_.__value_.__s + 23) = v18;
              v41[0] = 0;
              *(void *)((char *)v41 + 7) = 0;
              __v.__end_ = v28 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 32), &__v);
              unint64_t v22 = *(void *)(a1 + 40);
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            }
            else
            {
              uint64_t v21 = v41[0];
              *(void *)unint64_t v19 = v17;
              *(void *)(v19 + 8) = v21;
              *(void *)(v19 + 15) = *(void *)((char *)v41 + 7);
              *(unsigned char *)(v19 + 23) = v18;
              unint64_t v22 = v19 + 24;
              *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v19 + 24;
            }
            *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v22;
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v38.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
            v8 += 24;
          }
          while (v8 != *(void *)(a1 + 16));
          int v4 = *(_DWORD *)a1;
          uint64_t v7 = v8;
        }
      }
      while (v5 < v4);
    }
  }
  else
  {
    kaldi::quasar::SystemSelectionFeatureExtractor::ValidateFeatureList(a1, (const std::string **)a2);
    if (a1 + 32 != a2) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 32), *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    }
  }
  uint64_t v30 = *(void *)(a1 + 32);
  uint64_t v31 = *(void *)(a1 + 40);
  if (v30 == v31)
  {
    BOOL v35 = 0;
  }
  else
  {
    uint64_t v32 = v30 + 24;
    do
    {
      if (*(char *)(v32 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v32 - 24), *(void *)(v32 - 16));
      }
      else
      {
        long long v33 = *(_OWORD *)(v32 - 24);
        v40.__r_.__value_.__r.__words[2] = *(void *)(v32 - 8);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v33;
      }
      size_t v34 = std::string::basic_string[abi:ne180100]<0>(&__v, "pct");
      BOOL v35 = kaldi::quasar::SystemSelectionFeatureExtractor::CheckIfStringEndsWith((uint64_t)v34, (uint64_t **)&v40, (const void **)&__v.__first_);
      if (SHIBYTE(__v.__end_) < 0) {
        operator delete(__v.__first_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      char v36 = v32 == v31 || v35;
      v32 += 24;
    }
    while ((v36 & 1) == 0);
  }
  *(unsigned char *)(a1 + 6std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v35;
}

void sub_1B21FF4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::__split_buffer<std::wstring> *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__pa,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SystemSelectionFeatureExtractor::ValidateFeatureList(uint64_t a1, const std::string **a2)
{
  for (uint64_t i = *a2; i != a2[1]; ++i)
  {
    std::string::basic_string(&v22, i, 0, 3uLL, (std::allocator<char> *)v21);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v22.__r_.__value_.__l.__size_ != 3) {
        goto LABEL_43;
      }
      int v5 = (std::string *)v22.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) != 3) {
        goto LABEL_43;
      }
      int v5 = &v22;
    }
    int data_low = LOWORD(v5->__r_.__value_.__l.__data_);
    int v7 = v5->__r_.__value_.__s.__data_[2];
    if (data_low != 31080 || v7 != 112)
    {
LABEL_43:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"should_be_hyp == \"hyp\"", 22);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0)
    {
      long long v10 = (const std::string *)i->__r_.__value_.__r.__words[0];
      int64_t size = i->__r_.__value_.__l.__size_;
    }
    else
    {
      int64_t size = HIBYTE(i->__r_.__value_.__r.__words[2]);
      long long v10 = i;
    }
    uint64_t v11 = (char *)v10 + size;
    if (size >= 1)
    {
      long long v12 = (std::string *)v10;
      do
      {
        int v13 = (char *)memchr(v12, 95, size);
        if (!v13) {
          break;
        }
        if (*v13 == 95) {
          goto LABEL_21;
        }
        long long v12 = (std::string *)(v13 + 1);
        int64_t size = v11 - (char *)v12;
      }
      while (v11 - (char *)v12 > 0);
    }
    int v13 = v11;
LABEL_21:
    if (v13 == v11) {
      uint64_t v14 = -1;
    }
    else {
      uint64_t v14 = v13 - (char *)v10;
    }
    uint64_t v15 = v14 << 32;
    if (v14 << 32 == 0xFFFFFFFF00000000 || (int)v14 <= 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(first_underscore_index != std::string::npos) && (first_underscore_index > 3)", 77);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    std::string::basic_string(&__str, i, 3uLL, (v15 - 0x300000000) >> 32, (std::allocator<char> *)v21);
    int v17 = std::stoi(&__str, 0, 10);
    if (v17 <= 0 || v17 > *(_DWORD *)a1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"(hyp_id >= 1) && (hyp_id <= num_hyps_)", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    if (SHIBYTE(i->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v18 = i->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type v18 = HIBYTE(i->__r_.__value_.__r.__words[2]);
    }
    std::string::basic_string(&__p, i, (v15 + 0x100000000) >> 32, v18 - (int)v14, (std::allocator<char> *)v21);
    if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 8), *(void *)(a1 + 16), (unsigned __int8 **)&__p) == *(void *)(a1 + 16))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"std::find(feature_list_without_hyp_ids_.begin(), feature_list_without_hyp_ids_.end(), should_be_in_feature_list_without_hyp_ids) != feature_list_without_hyp_ids_.end()", 167);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1B21FF88C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B21FF8B8);
}

void sub_1B21FF8A4()
{
}

BOOL kaldi::quasar::SystemSelectionFeatureExtractor::CheckIfStringEndsWith(uint64_t a1, uint64_t **a2, const void **a3)
{
  size_t v3 = *((unsigned __int8 *)a2 + 23);
  size_t v4 = (size_t)a2[1];
  if ((v3 & 0x80u) == 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  BOOL v12 = v5 >= v7;
  size_t v8 = v5 - v7;
  if (!v12) {
    return 0;
  }
  if ((v3 & 0x80) != 0)
  {
    BOOL v12 = v7 != -1 && v4 >= v8;
    if (v12)
    {
      size_t v13 = v4 - v8;
      if (v13 >= v7) {
        size_t v11 = v7;
      }
      else {
        size_t v11 = v13;
      }
      a2 = (uint64_t **)*a2;
      goto LABEL_26;
    }
LABEL_35:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v3 < v8 || v7 == -1) {
    goto LABEL_35;
  }
  if (v3 - v8 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v3 - v8;
  }
LABEL_26:
  if (v6 >= 0) {
    uint64_t v14 = a3;
  }
  else {
    uint64_t v14 = *a3;
  }
  return !memcmp((char *)a2 + v8, v14, v11) && v11 == v7;
}

void kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(int *a1, uint64_t *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) != *a1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "hyp_confidence_values.size() == num_hyps_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  std::vector<float>::resize((uint64_t)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 5) - *((void *)a1 + 4)) >> 3));
  memset(v10, 0, sizeof(v10));
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  if (*((unsigned char *)a1 + 60) && *a1 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      std::__sort<std::__less<float,float> &,float *>();
      ++v7;
      v6 += 24;
    }
    while (v7 < *a1);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "count");
  size_t v11 = (void **)&unk_1F0A5AF98;
  BOOL v12 = a2;
  uint64_t v14 = &v11;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v11, a3);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](&v11);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mean");
  size_t v11 = (void **)&unk_1F0A5AFF0;
  BOOL v12 = (uint64_t *)a1;
  size_t v13 = a2;
  uint64_t v14 = &v11;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v11, a3);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](&v11);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "std");
  size_t v11 = (void **)&unk_1F0A5B048;
  BOOL v12 = (uint64_t *)a1;
  size_t v13 = a2;
  uint64_t v14 = &v11;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v11, a3);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](&v11);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "min");
  size_t v11 = (void **)&unk_1F0A5B0A0;
  BOOL v12 = (uint64_t *)a1;
  size_t v13 = a2;
  uint64_t v14 = &v11;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v11, a3);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](&v11);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "max");
  size_t v11 = (void **)&unk_1F0A5B0F8;
  BOOL v12 = (uint64_t *)a1;
  size_t v13 = a2;
  uint64_t v14 = &v11;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v11, a3);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](&v11);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "25pct");
  size_t v11 = (void **)&unk_1F0A5B150;
  BOOL v12 = (uint64_t *)a1;
  size_t v13 = v10;
  uint64_t v14 = &v11;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v11, a3);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](&v11);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "50pct");
  size_t v11 = (void **)&unk_1F0A5B1A8;
  BOOL v12 = (uint64_t *)a1;
  size_t v13 = v10;
  uint64_t v14 = &v11;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v11, a3);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](&v11);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "75pct");
  size_t v11 = (void **)&unk_1F0A5B200;
  BOOL v12 = (uint64_t *)a1;
  size_t v13 = v10;
  uint64_t v14 = &v11;
  kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature((uint64_t)a1, (uint64_t)__p, (uint64_t)&v11, a3);
  std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](&v11);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  size_t v11 = (void **)v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1B21FFE68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeature(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(int *)a1 >= 1)
  {
    int v8 = 0;
    do
    {
      int v9 = v8 + 1;
      std::to_string(&v22, v8 + 1);
      long long v10 = std::string::insert(&v22, 0, "hyp");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      BOOL v12 = std::string::append(&v23, "_");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      int v14 = *(char *)(a2 + 23);
      if (v14 >= 0) {
        uint64_t v15 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v15 = *(const std::string::value_type **)a2;
      }
      if (v14 >= 0) {
        std::string::size_type v16 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v16 = *(void *)(a2 + 8);
      }
      int v17 = std::string::append(&v24, v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      std::string::size_type v26 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      uint64_t v19 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 32), *(void *)(a1 + 40), (unsigned __int8 **)__p);
      if (v19 != *(void *)(a1 + 40))
      {
        uint64_t v20 = v19;
        std::function<float ()(int)>::operator()(a3, v8);
        *(_DWORD *)(*a4 - 0x5555555555555554 * ((v20 - *(void *)(a1 + 32)) >> 3)) = v21;
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      ++v8;
    }
    while (v9 < *(_DWORD *)a1);
  }
}

void sub_1B2200028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<float ()(int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void kaldi::quasar::SystemSelectionFeatureExtractor::ExtractStd(uint64_t a1, float **a2, float a3)
{
  int v4 = *a2;
  size_t v3 = a2[1];
  unint64_t v5 = (char *)v3 - (char *)*a2;
  unint64_t v6 = v5 >> 2;
  if ((int)(v5 >> 2) > 1)
  {
    float v7 = a3;
    if (a3 < 0.0)
    {
      if (v6)
      {
        if (v4 == v3)
        {
          float v11 = 0.0;
        }
        else
        {
          double v9 = 0.0;
          do
          {
            float v10 = *v4++;
            double v9 = v9 + v10;
          }
          while (v4 != v3);
          float v11 = v9;
        }
        float v7 = v11 / (float)(int)v6;
      }
      else
      {
        float v7 = *(float *)(a1 + 56);
      }
    }
    std::vector<float>::vector(&__p, (v5 >> 2));
    BOOL v12 = *a2;
    long long v13 = a2[1];
    int v14 = (float *)__p;
    if (*a2 != v13)
    {
      uint64_t v15 = (float *)__p;
      do
      {
        float v16 = *v12++;
        *v15++ = v16 - v7;
      }
      while (v12 != v13);
    }
    if (v14 != v21)
    {
      double v17 = 0.0;
      long long v18 = v14;
      do
      {
        float v19 = *v18++;
        double v17 = v17 + (float)(v19 * v19);
      }
      while (v18 != v21);
    }
    if (v14)
    {
      int v21 = v14;
      operator delete(v14);
    }
  }
}

float kaldi::quasar::SystemSelectionFeatureExtractor::ExtractMin(uint64_t a1, float **a2)
{
  uint64_t v2 = *a2;
  size_t v3 = a2[1];
  if ((((char *)v3 - (char *)*a2) & 0x3FFFFFFFCLL) != 0)
  {
    int v4 = v2 + 1;
    if (v2 != v3 && v4 != v3)
    {
      float v6 = *v2;
      float v7 = v2 + 1;
      do
      {
        float v8 = *v7++;
        float v9 = v8;
        if (v8 < v6)
        {
          float v6 = v9;
          uint64_t v2 = v4;
        }
        int v4 = v7;
      }
      while (v7 != v3);
    }
  }
  else
  {
    uint64_t v2 = (float *)(a1 + 56);
  }
  return *v2;
}

float kaldi::quasar::SystemSelectionFeatureExtractor::ExtractMax(uint64_t a1, float **a2)
{
  uint64_t v2 = *a2;
  size_t v3 = a2[1];
  if ((((char *)v3 - (char *)*a2) & 0x3FFFFFFFCLL) != 0)
  {
    int v4 = v2 + 1;
    if (v2 != v3 && v4 != v3)
    {
      float v6 = *v2;
      float v7 = v2 + 1;
      do
      {
        float v8 = *v7++;
        float v9 = v8;
        if (v6 < v8)
        {
          float v6 = v9;
          uint64_t v2 = v4;
        }
        int v4 = v7;
      }
      while (v7 != v3);
    }
  }
  else
  {
    uint64_t v2 = (float *)(a1 + 56);
  }
  return *v2;
}

float kaldi::quasar::SystemSelectionFeatureExtractor::ExtractPercentile(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = (unint64_t)(a2[1] - *a2) >> 2;
  if (!v4) {
    return *(float *)(a1 + 56);
  }
  float v5 = (float)((int)v4 - 1);
  int v6 = vcvtms_s32_f32(v5 * a3);
  signed int v7 = vcvtps_s32_f32(v5 * a3);
  float v8 = *(float *)(v3 + 4 * v6);
  if (v7 != v6) {
    return v8 + (float)((float)-(float)((float)v6 - (float)(a3 * v5)) * (float)(*(float *)(v3 + 4 * v7) - v8));
  }
  return v8;
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::~__func()
{
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F0A5AF98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5AF98;
  a2[1] = v2;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return (float)(unint64_t)((uint64_t)(*(void *)(**(void **)(a1 + 8) + 24 * *a2 + 8)
                                           - *(void *)(**(void **)(a1 + 8) + 24 * *a2)) >> 2);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_0>,float ()(int)>::target_type()
{
}

void *std::__function::__value_func<float ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5AFF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5AFF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2 = **(void **)(a1 + 16) + 24 * *a2;
  unint64_t v4 = *(float **)v2;
  uint64_t v3 = *(float **)(v2 + 8);
  unint64_t v5 = ((unint64_t)v3 - *(void *)v2) >> 2;
  if (!v5) {
    return *(float *)(*(void *)(a1 + 8) + 56);
  }
  if (v4 == v3)
  {
    float v8 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    do
    {
      float v7 = *v4++;
      double v6 = v6 + v7;
    }
    while (v4 != v3);
    float v8 = v6;
  }
  return v8 / (float)(int)v5;
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_1>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_2>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B0A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B0A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractMin(*(void *)(a1 + 8), (float **)(**(void **)(a1 + 16) + 24 * *a2));
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_3>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B0F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B0F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractMax(*(void *)(a1 + 8), (float **)(**(void **)(a1 + 16) + 24 * *a2));
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_4>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B150;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B150;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractPercentile(*(void *)(a1 + 8), (uint64_t *)(**(void **)(a1 + 16) + 24 * *a2), 0.25);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_5>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B1A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B1A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractPercentile(*(void *)(a1 + 8), (uint64_t *)(**(void **)(a1 + 16) + 24 * *a2), 0.5);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_6>,float ()(int)>::target_type()
{
}

void std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::~__func()
{
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F0A5B200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F0A5B200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::operator()(uint64_t a1, int *a2)
{
  return kaldi::quasar::SystemSelectionFeatureExtractor::ExtractPercentile(*(void *)(a1 + 8), (uint64_t *)(**(void **)(a1 + 16) + 24 * *a2), 0.75);
}

uint64_t std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7,std::allocator<kaldi::quasar::SystemSelectionFeatureExtractor::ExtractFeatures(std::vector<std::vector<float>> const&,std::vector<float>*)::$_7>,float ()(int)>::target_type()
{
}

void *quasar::LinkAlternativesOptions::options@<X0>(quasar::LinkAlternativesOptions *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)this + 160;
  uint64_t v4 = *(void *)(*((void *)this + 20) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  __n128 result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *__n128 result = v3 - 144;
  result[1] = &v3[v4];
  *a2 = result;
  return result;
}

const char *quasar::LinkAlternativesBlock::blockType(quasar::LinkAlternativesBlock *this)
{
  return "LinkAlternativesBlock";
}

const char *virtual thunk to'quasar::LinkAlternativesBlock::blockType(quasar::LinkAlternativesBlock *this)
{
  return "LinkAlternativesBlock";
}

void quasar::LinkAlternativesBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v338 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)quasar::OptionValue<BOOL>::value((void *)((char *)a1 + *(void *)(a1[21] - 24) + 168)))
  {
    uint64_t v231 = (uint64_t)a1 + *(void *)(*a1 - 24);
    quasar::ProcessingBlock::send(v231, (uint64_t)a3, 0);
    return;
  }
  v268 = a1;
  long long v317 = 0uLL;
  unint64_t v318 = 0;
  v297 = 0;
  unint64_t v298 = 0;
  v296 = 0;
  uint64_t v5 = a3[1] - *a3;
  if (v5)
  {
    unint64_t v6 = 0x8F5C28F5C28F5C29 * (v5 >> 3);
    if (v6 > 0x333333333333333) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    *((void *)&v320 + 1) = 0;
    *(void *)&long long v321 = &v298;
    v319[0] = operator new(0xCCCCCCCCCCCCCCD0 * (v5 >> 3));
    v319[1] = v319[0];
    *(void **)&long long v320 = v319[0];
    *((void *)&v320 + 1) = (char *)v319[0] + 80 * v6;
    v274 = (quasar::TranslationPhraseInternal *)a3[1];
    if ((quasar::TranslationPhraseInternal *)*a3 != v274)
    {
      float v7 = (char *)*a3;
      while (1)
      {
        v278 = (quasar::TranslationPhraseInternal *)v7;
        float v8 = (quasar::MetaInfo *)(v7 + 192);
        LOBYTE(v316) = 0;
        BYTE4(v316) = 0;
        v314[0] = 0;
        v314[1] = 0;
        v315[0] = 0;
        uint64_t v9 = quasar::MetaInfo::structuredPrediction((uint64_t *)v7 + 24, (uint64_t)"gender", 6);
        if (v9)
        {
          v276 = v8;
          LODWORD(v316) = *(_DWORD *)(v9 + 24);
          BYTE4(v316) = 1;
          memset(&v293, 0, sizeof(v293));
          uint64_t v10 = *(void *)(v9 + 32);
          uint64_t v11 = *(void *)(v9 + 40);
          while (v10 != v11)
          {
            uint64_t v12 = *(void *)(v10 + 56);
            uint64_t v13 = *(void *)(v10 + 64);
            if (v12 == v13)
            {
              if (quasar::gLogLevel >= 2)
              {
                long long v334 = 0u;
                long long v335 = 0u;
                long long v332 = 0u;
                long long v333 = 0u;
                long long v330 = 0u;
                long long v331 = 0u;
                long long v328 = 0u;
                long long v329 = 0u;
                long long v326 = 0u;
                long long v327 = 0u;
                long long v324 = 0u;
                long long v325 = 0u;
                long long v322 = 0u;
                long long v323 = 0u;
                long long v320 = 0u;
                long long v321 = 0u;
                *(_OWORD *)v319 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v319);
                uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v319, (uint64_t)"[LinkAlternatives validation failure]: Structured prediction information is incomplete for source span ", 103);
                uint64_t v32 = quasar::operator<<(v31);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)": projections are missing. Skipping span.", 41);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v319);
              }
            }
            else
            {
              uint64_t v14 = v13 - v12;
              if ((unint64_t)v14 >= 9 && quasar::gLogLevel >= 2)
              {
                long long v334 = 0u;
                long long v335 = 0u;
                long long v332 = 0u;
                long long v333 = 0u;
                long long v330 = 0u;
                long long v331 = 0u;
                long long v328 = 0u;
                long long v329 = 0u;
                long long v326 = 0u;
                long long v327 = 0u;
                long long v324 = 0u;
                long long v325 = 0u;
                long long v322 = 0u;
                long long v323 = 0u;
                long long v320 = 0u;
                long long v321 = 0u;
                *(_OWORD *)v319 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v319);
                float v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v319, (uint64_t)"[LinkAlternatives validation failure]: Structured prediction generated more than one projection for gender alternative for source span: ", 136);
                quasar::operator<<(v16);
                quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v319);
                uint64_t v14 = *(void *)(v10 + 64) - *(void *)(v10 + 56);
              }
              __p[0] = 0;
              __p[1] = 0;
              *(void *)&long long v300 = 0;
              std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(__p, v14 >> 3);
              long long v18 = *(unsigned int **)(v10 + 56);
              double v17 = *(unsigned int **)(v10 + 64);
              if (v18 != v17)
              {
                float v19 = (unint64_t *)__p[1];
                do
                {
                  unint64_t v20 = *v18 | ((unint64_t)(v18[1] - *v18 + 1) << 32);
                  if ((unint64_t)v19 >= (unint64_t)v300)
                  {
                    uint64_t v21 = ((char *)v19 - (char *)__p[0]) >> 3;
                    if ((unint64_t)(v21 + 1) >> 61) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v22 = (uint64_t)(v300 - (unint64_t)__p[0]) >> 2;
                    if (v22 <= v21 + 1) {
                      unint64_t v22 = v21 + 1;
                    }
                    if ((unint64_t)v300 - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v23 = v22;
                    }
                    if (v23) {
                      std::string v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v300, v23);
                    }
                    else {
                      std::string v24 = 0;
                    }
                    unint64_t v25 = (unint64_t *)&v24[8 * v21];
                    *unint64_t v25 = v20;
                    float v19 = v25 + 1;
                    int v27 = (char *)__p[0];
                    std::string::size_type v26 = (char *)__p[1];
                    if (__p[1] != __p[0])
                    {
                      do
                      {
                        unint64_t v28 = *((void *)v26 - 1);
                        v26 -= 8;
                        *--unint64_t v25 = v28;
                      }
                      while (v26 != v27);
                      std::string::size_type v26 = (char *)__p[0];
                    }
                    __p[0] = v25;
                    __p[1] = v19;
                    *(void *)&long long v300 = &v24[8 * v23];
                    if (v26) {
                      operator delete(v26);
                    }
                  }
                  else
                  {
                    *v19++ = v20;
                  }
                  __p[1] = v19;
                  v18 += 2;
                }
                while (v18 != v17);
              }
              if (*(char *)(v10 + 23) < 0)
              {
                uint64_t v30 = *(_DWORD **)v10;
                uint64_t v29 = *(void *)(v10 + 8);
              }
              else
              {
                uint64_t v29 = *(unsigned __int8 *)(v10 + 23);
                uint64_t v30 = (_DWORD *)v10;
              }
              BOOL v33 = v29 != 4 || *v30 != 1162625357;
              if (*(char *)(v10 + 47) < 0)
              {
                size_t v34 = *(_DWORD **)(v10 + 24);
                uint64_t v35 = *(void *)(v10 + 32);
              }
              else
              {
                size_t v34 = (_DWORD *)(v10 + 24);
                uint64_t v35 = *(unsigned __int8 *)(v10 + 47);
              }
              uint64_t v36 = v35 != 4 || *v34 != 1162625357;
              *(void *)&long long v308 = *(unsigned int *)(v10 + 48) | ((unint64_t)(*(_DWORD *)(v10 + 52)
                                                                                               - *(_DWORD *)(v10 + 48)
                                                                                               + 1) << 32);
              *(void *)&long long v310 = v33 | (v36 << 32);
              unint64_t v38 = *((void *)&v317 + 1);
              unint64_t v37 = v317;
              if ((void)v317 == *((void *)&v317 + 1)) {
                goto LABEL_56;
              }
              while (1)
              {
                uint64_t v39 = *(_DWORD **)v37;
                if (*(void *)v37)
                {
                  if (!v39[6] && quasar::operator==(v39, &v310)) {
                    break;
                  }
                }
                v37 += 16;
                if (v37 == v38)
                {
                  unint64_t v37 = v38;
                  break;
                }
              }
              if (v37 == *((void *)&v317 + 1))
              {
LABEL_56:
                BOOL v41 = operator new(0x38uLL);
                uint64_t v42 = v41;
                v41[1] = 0;
                void v41[2] = 0;
                void *v41 = &unk_1F0A62C88;
                void v41[3] = v310;
                int v43 = (char *)(v41 + 3);
                *((_DWORD *)v41 + 12) = 0;
                if (v37 >= v318)
                {
                  uint64_t v45 = (uint64_t)(v37 - v317) >> 4;
                  if ((unint64_t)(v45 + 1) >> 60) {
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v46 = (uint64_t)(v318 - v317) >> 3;
                  if (v46 <= v45 + 1) {
                    unint64_t v46 = v45 + 1;
                  }
                  if (v318 - (unint64_t)v317 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v47 = v46;
                  }
                  *(void *)&long long v321 = &v318;
                  size_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v318, v47);
                  size_t v49 = &v48[16 * v45];
                  v319[0] = v48;
                  v319[1] = v49;
                  *((void *)&v320 + 1) = &v48[16 * v50];
                  *(void *)size_t v49 = v43;
                  *((void *)v49 + 1) = v42;
                  *(void *)&long long v320 = v49 + 16;
                  std::vector<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__swap_out_circular_buffer((uint64_t *)&v317, v319);
                  unint64_t v44 = *((void *)&v317 + 1);
                  std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v319);
                }
                else
                {
                  *(void *)unint64_t v37 = v43;
                  *(void *)(v37 + 8) = v41;
                  unint64_t v44 = v37 + 16;
                }
                *((void *)&v317 + 1) = v44;
                *(void *)&long long v336 = *(void *)(v44 - 16);
                uint64_t v40 = *(void *)(v44 - 8);
              }
              else
              {
                uint64_t v40 = *(void *)(v37 + 8);
                *(void *)&long long v336 = *(void *)v37;
              }
              *((void *)&v336 + 1) = v40;
              if (v40) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
              }
              std::string::size_type size = v293.__r_.__value_.__l.__size_;
              if (v293.__r_.__value_.__l.__size_ >= v293.__r_.__value_.__r.__words[2])
              {
                uint64_t v53 = 0x6DB6DB6DB6DB6DB7
                    * ((uint64_t)(v293.__r_.__value_.__l.__size_ - v293.__r_.__value_.__r.__words[0]) >> 3);
                unint64_t v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) > 0x492492492492492) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                if (0xDB6DB6DB6DB6DB6ELL
                   * ((uint64_t)(v293.__r_.__value_.__r.__words[2] - v293.__r_.__value_.__r.__words[0]) >> 3) > v54)
                  unint64_t v54 = 0xDB6DB6DB6DB6DB6ELL
                      * ((uint64_t)(v293.__r_.__value_.__r.__words[2] - v293.__r_.__value_.__r.__words[0]) >> 3);
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                      * ((uint64_t)(v293.__r_.__value_.__r.__words[2] - v293.__r_.__value_.__r.__words[0]) >> 3)) >= 0x249249249249249)
                  unint64_t v55 = 0x492492492492492;
                else {
                  unint64_t v55 = v54;
                }
                *(void *)&long long v321 = (char *)&v293.__r_.__value_.__l + 16;
                if (v55) {
                else
                }
                  uint64_t v56 = 0;
                v319[0] = (void *)v55;
                v319[1] = (void *)(v55 + 56 * v53);
                *(void **)&long long v320 = v319[1];
                *((void *)&v320 + 1) = v55 + 56 * v56;
                *(void *)&long long v320 = v320 + 56;
                std::string::size_type v52 = v293.__r_.__value_.__l.__size_;
              }
              else
              {
                std::string::size_type v52 = size + 56;
              }
              v293.__r_.__value_.__l.__size_ = v52;
              if (*((void *)&v336 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v336 + 1));
              }
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            v10 += 80;
          }
          size_t v57 = (char *)v314[0];
          if (v314[0])
          {
            int v58 = (char *)v314[1];
            size_t v59 = v314[0];
            if (v314[1] != v314[0])
            {
              do
              {
                v58 -= 56;
              }
              while (v58 != v57);
              size_t v59 = v314[0];
            }
            v314[1] = v57;
            operator delete(v59);
          }
          *(_OWORD *)v314 = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
          v315[0] = *((void *)&v293.__r_.__value_.__l + 2);
          memset(&v293, 0, sizeof(v293));
          v319[0] = &v293;
          float v8 = v276;
        }
        if (quasar::MetaInfo::hasSenses(v8)) {
          break;
        }
        long long v310 = 0uLL;
        unint64_t v311 = 0;
LABEL_141:
        quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v308, v278);
        *(_OWORD *)&v293.__r_.__value_.__r.__words[1] = 0uLL;
        v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&v293.__r_.__value_.__l.__size_;
        v302 = &v293;
        long long v336 = 0uLL;
        unint64_t v337 = 0;
        int v86 = (std::string::__raw *)v293.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v293.__r_.__value_.__l.__data_ == &v293.__r_.__value_.__r.__words[1]) {
          goto LABEL_179;
        }
        do
        {
          std::string::size_type v87 = v86[1].__words[2];
          __p[0] = *(void **)v87;
          long long v300 = 0uLL;
          __p[1] = 0;
          std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(&__p[1], *(const void **)(v87 + 8), *(void *)(v87 + 16), (uint64_t)(*(void *)(v87 + 16) - *(void *)(v87 + 8)) >> 3);
          std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100]((uint64_t *)&v301, v87 + 32);
          std::string v88 = (void *)v86[1].__words[2];
          long long v89 = v88 + 7;
          if (v88 + 7 == (void *)v86[2].__words[0])
          {
LABEL_158:
          }
          else
          {
            while (1)
            {
              long long v90 = v89;
              unint64_t v92 = __p[1];
              uint64_t v91 = (_DWORD *)v300;
              uint64_t v93 = (_DWORD *)v88[8];
              if ((void)v300 - (unint64_t)__p[1] != v88[9] - (void)v93) {
                break;
              }
              if (__p[1] != (void *)v300)
              {
                do
                {
                  BOOL v94 = quasar::operator==(v92, v93);
                  v92 += 2;
                  v93 += 2;
                }
                while (v92 != v91 && v94);
                if (!v94) {
                  break;
                }
              }
              long long v96 = (void *)v88[11];
              if (v96 != v88 + 12)
              {
                do
                {
                  std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>((uint64_t **)&v301, v96 + 4, v96 + 4);
                  int v97 = (void *)v96[1];
                  if (v97)
                  {
                    do
                    {
                      __int16 v98 = v97;
                      int v97 = (void *)*v97;
                    }
                    while (v97);
                  }
                  else
                  {
                    do
                    {
                      __int16 v98 = (void *)v96[2];
                      BOOL v99 = *v98 == (void)v96;
                      long long v96 = v98;
                    }
                    while (!v99);
                  }
                  long long v96 = v98;
                }
                while (v98 != v88 + 12);
              }
              long long v89 = v90 + 7;
              std::string v88 = v90;
              if (v90 + 7 == (void *)v86[2].__words[0]) {
                goto LABEL_158;
              }
            }
            if (quasar::gLogLevel >= 2)
            {
              long long v334 = 0u;
              long long v335 = 0u;
              long long v332 = 0u;
              long long v333 = 0u;
              long long v330 = 0u;
              long long v331 = 0u;
              long long v328 = 0u;
              long long v329 = 0u;
              long long v326 = 0u;
              long long v327 = 0u;
              long long v324 = 0u;
              long long v325 = 0u;
              long long v322 = 0u;
              long long v323 = 0u;
              long long v320 = 0u;
              long long v321 = 0u;
              *(_OWORD *)v319 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v319);
              uint64_t v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v319, (uint64_t)"[LinkAlternatives validation failure]: Projections mismatch for source span ", 76);
              uint64_t v101 = quasar::operator<<(v100);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)". Exclude this source span from results.", 40);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v319);
            }
          }
          std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)&v301, *((void **)&v301 + 1));
          if (__p[1])
          {
            *(void **)&long long v300 = __p[1];
            operator delete(__p[1]);
          }
          int v102 = (std::string *)v86->__words[1];
          if (v102)
          {
            do
            {
              int v103 = v102;
              int v102 = (std::string *)v102->__r_.__value_.__r.__words[0];
            }
            while (v102);
          }
          else
          {
            do
            {
              int v103 = (std::string *)v86->__words[2];
              BOOL v99 = v103->__r_.__value_.__r.__words[0] == (void)v86;
              int v86 = (std::string::__raw *)v103;
            }
            while (!v99);
          }
          int v86 = (std::string::__raw *)v103;
        }
        while (v103 != (std::string *)&v293.__r_.__value_.__r.__words[1]);
        int v104 = (char *)*((void *)&v336 + 1);
        char v105 = (_DWORD *)v336;
        if ((void)v336 == *((void *)&v336 + 1))
        {
LABEL_179:
          v305 = 0;
          uint64_t v306 = 0;
          uint64_t v307 = 0;
        }
        else
        {
          v305 = 0;
          uint64_t v306 = 0;
          uint64_t v307 = 0;
          if ((void)v336 + 56 == *((void *)&v336 + 1))
          {
            unint64_t v108 = (_DWORD *)v336;
          }
          else
          {
            do
            {
              if (quasar::operator==(v105, v105 + 14)
                || ((int v106 = v105[14], *v105 < v105[15] + v106) ? (v107 = v106 < v105[1] + *v105) : (v107 = 0), !v107))
              {
              }
              unint64_t v108 = v105 + 14;
              uint64_t v109 = v105 + 28;
              v105 += 14;
            }
            while (v109 != *((_DWORD **)&v336 + 1));
            char v105 = (_DWORD *)v336;
            int v104 = (char *)(v108 + 14);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v104 - (char *)v105) >> 3)) < 2
            || quasar::operator==(v108 - 14, v108)
            || ((int v110 = *(v108 - 14), v110 < v108[1] + *v108) ? (v111 = *v108 < *(v108 - 13) + v110) : (v111 = 0), !v111))
          {
          }
        }
        v319[0] = &v336;
        long long v112 = v297;
        if ((unint64_t)v297 >= v298)
        {
          uint64_t v114 = 0xCCCCCCCCCCCCCCCDLL * ((v297 - v296) >> 4);
          unint64_t v115 = v114 + 1;
          if ((unint64_t)(v114 + 1) > 0x333333333333333) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((uint64_t)(v298 - (void)v296) >> 4) > v115) {
            unint64_t v115 = 0x999999999999999ALL * ((uint64_t)(v298 - (void)v296) >> 4);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v298 - (void)v296) >> 4) >= 0x199999999999999) {
            unint64_t v116 = 0x333333333333333;
          }
          else {
            unint64_t v116 = v115;
          }
          *(void *)&long long v320 = v320 + 80;
          long long v113 = v297;
        }
        else
        {
          long long v113 = v112 + 80;
        }
        v297 = v113;
        v319[0] = &v305;
        if (SHIBYTE(v309) < 0) {
          operator delete((void *)v308);
        }
        v319[0] = &v310;
        v319[0] = v314;
        float v7 = (char *)v278 + 200;
        if ((quasar::TranslationPhraseInternal *)((char *)v278 + 200) == v274) {
          goto LABEL_200;
        }
      }
      Senses = (uint64_t *)quasar::MetaInfo::getSenses(v8);
      unint64_t v311 = 0;
      long long v310 = 0uLL;
      uint64_t v61 = *Senses;
      uint64_t v62 = Senses[1];
      while (1)
      {
        if (v61 == v62) {
          goto LABEL_141;
        }
        if (*(char *)(v61 + 47) < 0)
        {
          std::string::size_type v64 = *(void *)(v61 + 32);
          if (!v64) {
            goto LABEL_139;
          }
          v305 = *(uint64_t **)(v61 + 96);
          uint64_t v63 = *(void *)(v61 + 128);
          std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(v61 + 24), v64);
        }
        else
        {
          if (!*(unsigned char *)(v61 + 47)) {
            goto LABEL_139;
          }
          v305 = *(uint64_t **)(v61 + 96);
          uint64_t v63 = *(void *)(v61 + 128);
          std::string v293 = *(std::string *)(v61 + 24);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
        *(void *)&long long v300 = *((void *)&v293.__r_.__value_.__l + 2);
        memset(&v293, 0, sizeof(v293));
        unint64_t v66 = (uint64_t *)*((void *)&v317 + 1);
        int v65 = (uint64_t *)v317;
        if ((void)v317 == *((void *)&v317 + 1)) {
          goto LABEL_107;
        }
        while (1)
        {
          uint64_t v67 = *v65;
          if (*v65)
          {
            if (*(_DWORD *)(v67 + 24) == 1
              && quasar::VoiceCommandActiveSetCompilation::Suite::operator==((unsigned __int8 *)v67, (unsigned __int8 *)__p))
            {
              break;
            }
          }
          v65 += 2;
          if (v65 == v66)
          {
            int v65 = v66;
            break;
          }
        }
        if (v65 == *((uint64_t **)&v317 + 1))
        {
LABEL_107:
          unint64_t v69 = (char *)operator new(0x38uLL);
          size_t v70 = v69;
          *((void *)v69 + 1) = 0;
          *((void *)v69 + 2) = 0;
          *(void *)unint64_t v69 = &unk_1F0A62C88;
          BOOL v71 = v69 + 24;
          *(_OWORD *)(v69 + 24) = *(_OWORD *)__p;
          *((void *)v69 + 5) = v300;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v300 = 0;
          *((_DWORD *)v69 + 12) = 1;
          if ((unint64_t)v65 >= v318)
          {
            uint64_t v73 = (uint64_t)((uint64_t)v65 - v317) >> 4;
            if ((unint64_t)(v73 + 1) >> 60) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v74 = (uint64_t)(v318 - v317) >> 3;
            if (v74 <= v73 + 1) {
              unint64_t v74 = v73 + 1;
            }
            if (v318 - (unint64_t)v317 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v74;
            }
            *(void *)&long long v321 = &v318;
            uint64_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v318, v75);
            uint64_t v77 = &v76[16 * v73];
            v319[0] = v76;
            v319[1] = v77;
            *((void *)&v320 + 1) = &v76[16 * v78];
            *(void *)uint64_t v77 = v71;
            *((void *)v77 + 1) = v70;
            *(void *)&long long v320 = v77 + 16;
            std::vector<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__swap_out_circular_buffer((uint64_t *)&v317, v319);
            int v72 = (void *)*((void *)&v317 + 1);
            std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(v319);
          }
          else
          {
            uint64_t *v65 = (uint64_t)v71;
            v65[1] = (uint64_t)v69;
            int v72 = v65 + 2;
          }
          *((void *)&v317 + 1) = v72;
          *(void *)&long long v308 = *(v72 - 2);
          uint64_t v68 = *(v72 - 1);
        }
        else
        {
          uint64_t v68 = v65[1];
          *(void *)&long long v308 = *v65;
        }
        *((void *)&v308 + 1) = v68;
        if (v68) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
        }
        if (SBYTE7(v300) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v293.__r_.__value_.__l.__data_);
        }
        uint64_t v79 = operator new(8uLL);
        *(void *)&long long v336 = v79;
        void *v79 = v63;
        *((void *)&v336 + 1) = v79 + 1;
        unint64_t v337 = (unint64_t)(v79 + 1);
        uint64_t v80 = *((void *)&v310 + 1);
        if (*((void *)&v310 + 1) >= v311)
        {
          uint64_t v82 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v310 + 1) - v310) >> 3);
          unint64_t v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) > 0x492492492492492) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v311 - v310) >> 3) > v83) {
            unint64_t v83 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v311 - v310) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v311 - v310) >> 3)) >= 0x249249249249249) {
            unint64_t v84 = 0x492492492492492;
          }
          else {
            unint64_t v84 = v83;
          }
          *(void *)&long long v321 = &v311;
          if (v84) {
          else
          }
            uint64_t v85 = 0;
          v319[0] = (void *)v84;
          v319[1] = (void *)(v84 + 56 * v82);
          *(void **)&long long v320 = v319[1];
          *((void *)&v320 + 1) = v84 + 56 * v85;
          *(void *)&long long v320 = v320 + 56;
          uint64_t v81 = *((void *)&v310 + 1);
        }
        else
        {
          uint64_t v81 = v80 + 56;
        }
        *((void *)&v310 + 1) = v81;
        if ((void)v336) {
          operator delete((void *)v336);
        }
        if (*((void *)&v308 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v308 + 1));
        }
LABEL_139:
        v61 += 296;
      }
    }
  }
LABEL_200:
  v319[0] = &v317;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
  long long v308 = 0uLL;
  uint64_t v309 = 0;
  std::vector<std::unordered_set<int>>::reserve((uint64_t *)&v308, 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
  v305 = 0;
  uint64_t v306 = 0;
  uint64_t v307 = 0;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::reserve((uint64_t *)&v305, 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
  if (a3[1] == *a3) {
    goto LABEL_370;
  }
  unint64_t v117 = 0;
  do
  {
    v303 = 0;
    unint64_t v304 = 0;
    v302 = 0;
    uint64_t v118 = &v296[80 * v117];
    uint64_t v119 = *((void *)v118 + 6);
    unsigned int v313 = v117;
    v273 = (uint64_t *)(v118 + 48);
    long long v121 = v118 + 56;
    uint64_t v120 = *((void *)v118 + 7);
    v272 = v121;
    int v312 = 0;
    if (v120 == v119)
    {
      *(_OWORD *)v319 = 0u;
      long long v320 = 0u;
      LODWORD(v321) = 1065353216;
      goto LABEL_369;
    }
    unint64_t v122 = 0;
    unint64_t v271 = v117;
    do
    {
      unint64_t v275 = v122;
      uint64_t v277 = v119;
      v284 = (uint64_t *)(v119 + 56 * v122);
      v314[0] = 0;
      v314[1] = 0;
      v315[0] = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v300 = 0u;
      LODWORD(v301) = 1065353216;
      long long v123 = v296;
      if (v297 != v296)
      {
        unint64_t v124 = 0;
        char v270 = 0;
        int v282 = v313;
        uint64_t v283 = v313;
        while (1)
        {
          if (v124 == v283) {
            goto LABEL_322;
          }
          uint64_t v125 = (uint64_t)&v123[80 * v282];
          if (!SpanForSourceRange) {
            goto LABEL_322;
          }
          if (!v127
            || *((void *)SpanForSourceRange + 2) - *((void *)SpanForSourceRange + 1) > 8uLL
            || *((void *)v127 + 2) - *((void *)v127 + 1) > 8uLL)
          {
            goto LABEL_322;
          }
          uint64_t v128 = (uint64_t **)v319[0];
          unint64_t v129 = ((char *)v319[1] - (char *)v319[0]) >> 3;
          v280 = (uint64_t **)v336;
          BOOL v130 = v129 == (uint64_t)(*((void *)&v336 + 1) - v336) >> 3;
          if (v319[1] == v319[0] || v129 != (uint64_t)(*((void *)&v336 + 1) - v336) >> 3)
          {
            if (!(void)v336) {
              goto LABEL_223;
            }
          }
          else
          {
            uint64_t v131 = 0;
            BOOL v130 = 0;
            if (v129 <= 1) {
              int64_t v132 = 1;
            }
            else {
              int64_t v132 = ((char *)v319[1] - (char *)v319[0]) >> 3;
            }
            v279 = (quasar::TranslationPhraseInternal *)v132;
            do
            {
              int v133 = v128;
              uint64_t v135 = *((void *)&v317 + 1);
              uint64_t v134 = v317;
              v316 = (void **)&v317;
              std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v316);
              BOOL v99 = v134 == v135;
              uint64_t v128 = v133;
              if (!v99) {
                break;
              }
              uint64_t v131 = (quasar::TranslationPhraseInternal *)((char *)v131 + 1);
              BOOL v130 = v129 <= (unint64_t)v131;
            }
            while (v279 != v131);
          }
          operator delete(v280);
LABEL_223:
          if (v128) {
            operator delete(v128);
          }
          unint64_t v117 = v271;
          if (v130)
          {
            if (v136)
            {
              if (v137)
              {
                if ((void *)((char *)v319[1] - (char *)v319[0]) == (void *)16)
                {
                  uint64_t v138 = *(void *)v319[0];
                  if (*(_DWORD *)(*(void *)v319[0] + 24)) {
                    goto LABEL_230;
                  }
                  if (v123[80 * v282 + 76] && v123[80 * v124 + 76])
                  {
                    if (*(_DWORD *)&v123[80 * v282 + 72] == *(_DWORD *)&v123[80 * v124 + 72]) {
                      goto LABEL_230;
                    }
                  }
                  else if ((v123[80 * v282 + 76] != 0) == (v123[80 * v124 + 76] != 0))
                  {
LABEL_230:
                    long long v139 = (std::__shared_weak_count *)*((void *)v319[0] + 1);
                    if (v139) {
                      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    int64x2_t v140 = &v123[80 * v124];
                    int64_t v143 = (_DWORD *)*((void *)v140 + 6);
                    __int16 v142 = v140 + 48;
                    long long v141 = v143;
                    uint64_t v144 = (_DWORD *)v142[1];
                    if (v143 == v144) {
                      goto LABEL_238;
                    }
                    while (!quasar::operator==(v141, v284))
                    {
                      v141 += 14;
                      if (v141 == v144)
                      {
                        long long v141 = v144;
                        break;
                      }
                    }
                    if (v141 == (_DWORD *)v142[1]) {
LABEL_238:
                    }
                      unint64_t v145 = 0;
                    else {
                      unint64_t v145 = (unint64_t)(-1227133513 * (((unint64_t)v141 - *v142) >> 3)) << 32;
                    }
                    if (v139)
                    {
                      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
                    }
                    *(void *)&long long v336 = v319;
                    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v336);
                    int v146 = *(_DWORD *)(v138 + 24);
                    if (v146 == 1)
                    {
                      uint64_t v152 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(__p, (unsigned __int8 *)v138);
                      uint64_t v153 = (uint64_t *)v152;
                      if (v152)
                      {
                        v281 = (void *)(v145 | v124);
                        uint64_t v155 = (uint64_t *)*((void *)v152 + 5);
                        uint64_t v154 = (uint64_t *)*((void *)v152 + 6);
                        if (v155 != v154)
                        {
                          for (uint64_t i = *((void *)v152 + 5); (uint64_t *)i != v154; i += 24)
                          {
                            uint64_t v157 = *(void *)&v296[80 * *(int *)(i + 16) + 48] + 56 * *(int *)(i + 20);
                            if (*(void *)(v157 + 48) == *(void *)(*(void *)&v296[80 * v124 + 48]
                                                                     + 56 * SHIDWORD(v145)
                                                                     + 48))
                            {
                              uint64_t v158 = (void *)(v157 + 32);
                              int64_t v161 = (void *)*v158;
                              uint64_t v159 = v158 + 1;
                              uint64_t v160 = v161;
                              if (v161 == v159)
                              {
LABEL_285:
                                if (quasar::gLogLevel >= 5)
                                {
                                  long long v334 = 0u;
                                  long long v335 = 0u;
                                  long long v332 = 0u;
                                  long long v333 = 0u;
                                  long long v330 = 0u;
                                  long long v331 = 0u;
                                  long long v328 = 0u;
                                  long long v329 = 0u;
                                  long long v326 = 0u;
                                  long long v327 = 0u;
                                  long long v324 = 0u;
                                  long long v325 = 0u;
                                  long long v322 = 0u;
                                  long long v323 = 0u;
                                  long long v320 = 0u;
                                  long long v321 = 0u;
                                  *(_OWORD *)v319 = 0u;
                                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v319);
                                  uint64_t v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v319, (uint64_t)"[LinkAlternatives validation]: for source range: ", 49);
                                  unint64_t v173 = quasar::operator<<(v172);
                                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)" in phrase ", 11);
                                  unint64_t v174 = (void *)std::ostream::operator<<();
                                  uint64_t v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)" found the same meaning (", 25);
                                  int v176 = *(char *)(v138 + 23);
                                  if (v176 >= 0) {
                                    uint64_t v177 = v138;
                                  }
                                  else {
                                    uint64_t v177 = *(void *)v138;
                                  }
                                  if (v176 >= 0) {
                                    uint64_t v178 = *(unsigned __int8 *)(v138 + 23);
                                  }
                                  else {
                                    uint64_t v178 = *(void *)(v138 + 8);
                                  }
                                  long long v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, v177, v178);
                                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v179, (uint64_t)") alternatives in phrases ", 26);
                                  long long v180 = (void *)std::ostream::operator<<();
                                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)" and ", 5);
                                  long long v181 = (void *)std::ostream::operator<<();
                                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)" and all other alternative descriptions are the same. Ignoring.", 63);
                                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v319);
                                }
                                goto LABEL_318;
                              }
                              int v162 = *(void **)(*(void *)&v296[80 * v124 + 48] + 56 * SHIDWORD(v145) + 32);
                              while (v160[4] == v162[4])
                              {
                                int v163 = (void *)v160[1];
                                int v164 = v160;
                                if (v163)
                                {
                                  do
                                  {
                                    uint64_t v160 = v163;
                                    int v163 = (void *)*v163;
                                  }
                                  while (v163);
                                }
                                else
                                {
                                  do
                                  {
                                    uint64_t v160 = (void *)v164[2];
                                    BOOL v99 = *v160 == (void)v164;
                                    int v164 = v160;
                                  }
                                  while (!v99);
                                }
                                BOOL v165 = (void *)v162[1];
                                if (v165)
                                {
                                  do
                                  {
                                    long long v166 = v165;
                                    BOOL v165 = (void *)*v165;
                                  }
                                  while (v165);
                                }
                                else
                                {
                                  do
                                  {
                                    long long v166 = (void *)v162[2];
                                    BOOL v99 = *v166 == (void)v162;
                                    int v162 = v166;
                                  }
                                  while (!v99);
                                }
                                int v162 = v166;
                                if (v160 == v159) {
                                  goto LABEL_285;
                                }
                              }
                            }
                          }
                        }
                        uint64_t v167 = (uint64_t)(v152 + 56);
                        unint64_t v168 = v153[7];
                        if ((unint64_t)v154 >= v168)
                        {
                          unint64_t v184 = 0xAAAAAAAAAAAAAAABLL * (v154 - v155);
                          unint64_t v185 = v184 + 1;
                          if (v184 + 1 > 0xAAAAAAAAAAAAAAALL) {
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          }
                          unint64_t v186 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v168 - (void)v155) >> 3);
                          if (2 * v186 > v185) {
                            unint64_t v185 = 2 * v186;
                          }
                          if (v186 >= 0x555555555555555) {
                            unint64_t v187 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v187 = v185;
                          }
                          *(void *)&long long v321 = v153 + 7;
                          if (v187) {
                            char v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v167, v187);
                          }
                          else {
                            char v188 = 0;
                          }
                          unint64_t v193 = (uint64_t *)&v188[24 * v184];
                          v319[0] = v188;
                          v319[1] = v193;
                          *((void *)&v320 + 1) = &v188[24 * v187];
                          uint64_t *v193 = v138;
                          v193[1] = (uint64_t)v139;
                          if (v139) {
                            atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          *(void *)&v188[24 * v184 + 16] = v281;
                          *(void *)&long long v320 = v193 + 3;
                          std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer(v153 + 5, v319);
                          long long v169 = (void *)v153[6];
                          std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(v319);
                        }
                        else
                        {
                          *uint64_t v154 = v138;
                          v154[1] = (uint64_t)v139;
                          if (v139) {
                            atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          v154[2] = (uint64_t)v281;
                          long long v169 = v154 + 3;
                        }
                        v153[6] = (uint64_t)v169;
                      }
                      else
                      {
                        *(void *)&long long v336 = v138;
                        *((void *)&v336 + 1) = v139;
                        if (v139) {
                          atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        unint64_t v337 = v145 | v124;
                        *(void *)&long long v320 = 0;
                        v319[0] = 0;
                        v319[1] = 0;
                        *(void *)&long long v317 = v319;
                        BYTE8(v317) = 0;
                        v319[0] = operator new(0x18uLL);
                        v319[1] = v319[0];
                        *(void *)&long long v320 = (char *)v319[0] + 24;
                        v319[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AlternativeSelectionSpan::Alternative>,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*,quasar::AlternativeSelectionSpan::Alternative*>((uint64_t)&v320, &v336, &v338, (void *)v319[0]);
                        std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>((uint64_t)__p, (unsigned __int8 *)v138, (long long *)v138, (uint64_t)v319);
                        *(void *)&long long v317 = v319;
                        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v317);
                        if (*((void *)&v336 + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v336
                        }
                                                                                   + 1));
                      }
LABEL_318:
                      int v194 = 1;
                    }
                    else
                    {
                      if (v146) {
                        goto LABEL_318;
                      }
                      unint64_t v147 = v145 | v124;
                      long long v148 = &v123[80 * v282];
                      uint64_t v149 = v148 + 72;
                      uint64_t v150 = &v123[80 * v124];
                      int v151 = v148[76];
                      if (v151 && v150[76])
                      {
                        if (*v149 != *((_DWORD *)v150 + 18)) {
                          goto LABEL_318;
                        }
                      }
                      else if ((v151 != 0) != (v150[76] != 0))
                      {
                        goto LABEL_318;
                      }
                      if (v270)
                      {
                        if (quasar::gLogLevel >= 2)
                        {
                          long long v334 = 0u;
                          long long v335 = 0u;
                          long long v332 = 0u;
                          long long v333 = 0u;
                          long long v330 = 0u;
                          long long v331 = 0u;
                          long long v328 = 0u;
                          long long v329 = 0u;
                          long long v326 = 0u;
                          long long v327 = 0u;
                          long long v324 = 0u;
                          long long v325 = 0u;
                          long long v322 = 0u;
                          long long v323 = 0u;
                          long long v320 = 0u;
                          long long v321 = 0u;
                          *(_OWORD *)v319 = 0u;
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v319);
                          long long v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v319, (uint64_t)"[LinkAlternatives validation failure]: More than 1 gender alternative for source span ", 86);
                          long long v171 = quasar::operator<<(v170);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)" and groupId ", 13);
                          long long v196 = (void *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)". No alternatives will be produced.", 35);
                          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v319);
                        }
                        int v194 = 0;
                        long long v310 = 0uLL;
                        char v270 = 1;
                        unint64_t v311 = 0;
                      }
                      else
                      {
                        uint64_t v182 = v314[1];
                        if (v314[1] >= (void *)v315[0])
                        {
                          unint64_t v189 = 0xAAAAAAAAAAAAAAABLL * (((char *)v314[1] - (char *)v314[0]) >> 3);
                          unint64_t v190 = v189 + 1;
                          if (v189 + 1 > 0xAAAAAAAAAAAAAAALL) {
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          }
                          if (0x5555555555555556 * ((uint64_t)(v315[0] - (unint64_t)v314[0]) >> 3) > v190) {
                            unint64_t v190 = 0x5555555555555556 * ((uint64_t)(v315[0] - (unint64_t)v314[0]) >> 3);
                          }
                          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v315[0] - (unint64_t)v314[0]) >> 3) >= 0x555555555555555) {
                            unint64_t v191 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v191 = v190;
                          }
                          *(void *)&long long v321 = v315;
                          if (v191) {
                            int v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v315, v191);
                          }
                          else {
                            int v192 = 0;
                          }
                          v195 = (uint64_t *)&v192[24 * v189];
                          v319[0] = v192;
                          v319[1] = v195;
                          *((void *)&v320 + 1) = &v192[24 * v191];
                          uint64_t *v195 = v138;
                          v195[1] = (uint64_t)v139;
                          if (v139) {
                            atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          *(void *)&v192[24 * v189 + 16] = v147;
                          *(void *)&long long v320 = v195 + 3;
                          std::vector<quasar::AlternativeSelectionSpan::Alternative>::__swap_out_circular_buffer((uint64_t *)v314, v319);
                          unint64_t v183 = v314[1];
                          std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer(v319);
                        }
                        else
                        {
                          *(void *)v314[1] = v138;
                          v182[1] = v139;
                          if (v139) {
                            atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          v182[2] = v147;
                          unint64_t v183 = v182 + 3;
                        }
                        v314[1] = v183;
                        int v194 = 1;
                        char v270 = 1;
                      }
                    }
                    if (v139) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
                    }
                    if (!v194) {
                      goto LABEL_333;
                    }
                    goto LABEL_322;
                  }
                }
                *(void *)&long long v336 = v319;
                std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v336);
              }
            }
          }
LABEL_322:
          ++v124;
          long long v123 = v296;
          if (0xCCCCCCCCCCCCCCCDLL * ((v297 - v296) >> 4) <= v124)
          {
            for (uint64_t j = (uint64_t **)v300; j; uint64_t j = (uint64_t **)*j)
            {
              std::vector<quasar::AlternativeSelectionSpan::Alternative>::reserve((uint64_t *)v314, 0xAAAAAAAAAAAAAAABLL * (((char *)v314[1] - (char *)v314[0]) >> 3) - 0x5555555555555555 * (j[6] - j[5]));
              std::vector<quasar::AlternativeSelectionSpan::Alternative>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>,std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>>((uint64_t *)v314, (void *)v314[1], j[5], j[6], 0xAAAAAAAAAAAAAAABLL * (j[6] - j[5]));
            }
            break;
          }
        }
      }
      long long v310 = *(_OWORD *)v314;
      unint64_t v311 = v315[0];
      v314[1] = 0;
      v315[0] = 0;
      v314[0] = 0;
LABEL_333:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::~__hash_table((uint64_t)__p);
      v319[0] = v314;
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
      long long v198 = (void *)*((void *)&v310 + 1);
      if ((void)v310 != *((void *)&v310 + 1))
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v300 = 0;
        uint64_t v199 = v277;
        uint64_t v200 = v277 + 56 * v275;
        __int16 v201 = *(void **)(v200 + 32);
        uint64_t v202 = (void *)(v200 + 40);
        if (v201 == (void *)(v200 + 40))
        {
          uint64_t v203 = 0;
          unint64_t v211 = 0;
        }
        else
        {
          uint64_t v203 = 0;
          do
          {
            uint64_t v204 = v310;
            if ((void)v310 != *((void *)&v310 + 1))
            {
              int v205 = *(_DWORD *)(v201[4] + 24);
              while (1)
              {
                int v206 = *(_DWORD *)(*(void *)v204 + 24);
                BOOL v207 = v206 == v205;
                BOOL v99 = v206 == -1;
                BOOL v208 = v206 == -1;
                if (v99) {
                  BOOL v207 = 0;
                }
                if (v205 != -1) {
                  BOOL v208 = v207;
                }
                if (v208) {
                  break;
                }
                v204 += 24;
                if (v204 == *((void *)&v310 + 1)) {
                  goto LABEL_349;
                }
              }
              if ((unint64_t)v203 >= (unint64_t)v300)
              {
                uint64_t v203 = (char *)std::vector<quasar::AlternativeSelectionSpan::Alternative>::__emplace_back_slow_path<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>((uint64_t *)__p, v201 + 4, (int *)&v313, &v312);
              }
              else
              {
                std::allocator<quasar::AlternativeSelectionSpan::Alternative>::construct[abi:ne180100]<quasar::AlternativeSelectionSpan::Alternative,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&,int &,int &>((uint64_t)&v300, (uint64_t)v203, v201 + 4, (int *)&v313, &v312);
                v203 += 24;
              }
              __p[1] = v203;
            }
LABEL_349:
            long long v209 = (void *)v201[1];
            if (v209)
            {
              do
              {
                uint64_t v210 = v209;
                long long v209 = (void *)*v209;
              }
              while (v209);
            }
            else
            {
              do
              {
                uint64_t v210 = (void *)v201[2];
                BOOL v99 = *v210 == (void)v201;
                __int16 v201 = v210;
              }
              while (!v99);
            }
            __int16 v201 = v210;
          }
          while (v210 != v202);
          long long v198 = (void *)*((void *)&v310 + 1);
          unint64_t v211 = (uint64_t *)__p[0];
          uint64_t v199 = v277;
        }
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>,std::__wrap_iter<quasar::AlternativeSelectionSpan::Alternative const*>>((uint64_t *)&v310, v198, v211, v203, 0xAAAAAAAAAAAAAAABLL * ((v203 - (char *)v211) >> 3));
        uint64_t v212 = *(uint64_t **)(v199 + 56 * v275 + 8);
        v213 = (std::string::__raw *)v303;
        if ((unint64_t)v303 >= v304)
        {
          uint64_t v218 = std::vector<quasar::AlternativeSelectionSpan>::__emplace_back_slow_path<quasar::AlternativeSelectionSpan::Range const&,quasar::AlternativeSelectionSpan::Range const&,std::vector<quasar::AlternativeSelectionSpan::Alternative>>((uint64_t *)&v302, v284, v212, &v310);
        }
        else
        {
          uint64_t v214 = *v284;
          uint64_t v215 = *v212;
          unint64_t v216 = v311;
          long long v217 = v310;
          long long v310 = 0uLL;
          unint64_t v311 = 0;
          v303->__r_.__value_.__r.__words[0] = v214;
          v213->__words[1] = v215;
          *(_OWORD *)&v213->__words[2] = v217;
          v213[1].__words[1] = v216;
          *(void *)&long long v320 = 0;
          v319[1] = 0;
          v319[0] = 0;
          *(void *)&long long v336 = v319;
          std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v336);
          uint64_t v218 = (uint64_t)&v213[1].__words[2];
        }
        v303 = (std::string *)v218;
        v319[0] = __p;
        std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
      }
      v319[0] = &v310;
      std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
      unint64_t v122 = ++v312;
      uint64_t v119 = *v273;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((*(void *)v272 - *v273) >> 3) > v122);
    v219 = v302;
    long long v220 = v303;
    *(_OWORD *)v319 = 0u;
    long long v320 = 0u;
    LODWORD(v321) = 1065353216;
    while (v219 != v220)
    {
      std::string::size_type v221 = v219->__r_.__value_.__r.__words[2];
      std::string::pointer data = v219[1].__r_.__value_.__l.__data_;
      while ((std::string::pointer)v221 != data)
      {
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)v319, (int *)(v221 + 16), (_DWORD *)(v221 + 16));
        v221 += 24;
      }
      v219 = (std::string *)((char *)v219 + 40);
    }
LABEL_369:
    std::vector<std::unordered_set<int>>::emplace_back<std::unordered_set<int>>((uint64_t *)&v308, (uint64_t *)v319);
    std::vector<std::vector<quasar::AlternativeSelectionSpan>>::emplace_back<std::vector<quasar::AlternativeSelectionSpan>>((uint64_t *)&v305, (uint64_t)&v302);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v319);
    v319[0] = &v302;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
    ++v117;
  }
  while (0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3) > v117);
LABEL_370:
  std::pair<std::vector<std::unordered_set<int>>,std::vector<std::vector<quasar::AlternativeSelectionSpan>>>::pair[abi:ne180100]<std::vector<std::unordered_set<int>>&,std::vector<std::vector<quasar::AlternativeSelectionSpan>>&,0>(&v293, (uint64_t *)&v308, &v305);
  v319[0] = &v305;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
  v319[0] = &v308;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
  v223 = (unsigned char *)quasar::OptionValue<BOOL>::value(v268 + 3);
  int v224 = *v223;
  if (*v223)
  {
    memset(v292, 0, sizeof(v292));
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v292, *a3, a3[1], 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
    long long v290 = v294;
    uint64_t v291 = v295;
    uint64_t v295 = 0;
    long long v294 = 0uLL;
    v314[1] = 0;
    v315[0] = 0;
    v314[0] = 0;
    LODWORD(v31std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
    *((void *)&v336 + 1) = 0;
    unint64_t v337 = 0;
    *(void *)&long long v336 = (char *)&v336 + 8;
    long long v300 = 0u;
    long long v301 = 0u;
    *(_OWORD *)std::string __p = 0u;
    std::deque<int>::push_back(__p, &v310);
    for (uint64_t k = *((void *)&v301 + 1); *((void *)&v301 + 1); uint64_t k = *((void *)&v301 + 1))
    {
      LODWORD(v308) = 0;
      LODWORD(v308) = *(_DWORD *)(*(void *)((char *)__p[1] + (((unint64_t)v301 >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * (v301 & 0x3FF));
      *(void *)&long long v301 = v301 + 1;
      *((void *)&v301 + 1) = k - 1;
      if ((unint64_t)v301 >= 0x800)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(void *)&long long v301 = v301 - 1024;
      }
      std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)&v336, (int *)&v308, &v308);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v293.__r_.__value_.__l.__size_ - v293.__r_.__value_.__r.__words[0]) >> 3) <= (int)v308)
      {
        long long v334 = 0u;
        long long v335 = 0u;
        long long v332 = 0u;
        long long v333 = 0u;
        long long v330 = 0u;
        long long v331 = 0u;
        long long v328 = 0u;
        long long v329 = 0u;
        long long v326 = 0u;
        long long v327 = 0u;
        long long v324 = 0u;
        long long v325 = 0u;
        long long v322 = 0u;
        long long v323 = 0u;
        long long v320 = 0u;
        long long v321 = 0u;
        *(_OWORD *)v319 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v319);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v319, (uint64_t)"Processing translation phrase with index ", 41);
        unint64_t v267 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v267, (uint64_t)" while total number is ", 23);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v319);
      }
      for (m = *(void **)(v293.__r_.__value_.__r.__words[0] + 40 * (int)v308 + 16); m; m = (void *)*m)
      {
        v227 = (int *)(m + 2);
        uint64_t v228 = (uint64_t *)*((void *)&v336 + 1);
        if (*((void *)&v336 + 1))
        {
          int v229 = *v227;
          do
          {
            int v230 = *((_DWORD *)v228 + 7);
            if (v229 >= v230)
            {
              if (v230 >= v229) {
                goto LABEL_383;
              }
              ++v228;
            }
            uint64_t v228 = (uint64_t *)*v228;
          }
          while (v228);
        }
        std::deque<int>::push_back(__p, v227);
LABEL_383:
        ;
      }
    }
    long long v317 = v336;
    unint64_t v318 = v337;
    if (v337)
    {
      *(void *)(*((void *)&v336 + 1) + 16) = (char *)&v317 + 8;
      *(void *)&long long v336 = (char *)&v336 + 8;
      *((void *)&v336 + 1) = 0;
      unint64_t v337 = 0;
    }
    else
    {
      *(void *)&long long v317 = (char *)&v317 + 8;
    }
    std::deque<int>::~deque[abi:ne180100](__p);
    std::__tree<int>::destroy((uint64_t)&v336, *((void **)&v336 + 1));
    if (v318)
    {
      std::vector<quasar::TranslationPhraseInternal>::reserve((uint64_t *)v314, v318);
      *(void *)&long long v320 = 0;
      v319[1] = 0;
      v319[0] = &v319[1];
      uint64_t v238 = (int *)v317;
      if ((long long *)v317 != (long long *)((char *)&v317 + 8))
      {
        long long v239 = v314[1];
        do
        {
          __p[0] = (void *)(0x8F5C28F5C28F5C29 * ((int64_t)((uint64_t)v239 - (unint64_t)v314[0]) >> 3));
          std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,int const&,unsigned long>((uint64_t **)v319, v238 + 7, v238 + 7, (uint64_t *)__p);
          uint64_t v240 = (uint64_t *)(v292[0] + 200 * v238[7]);
          long long v241 = (char *)v314[1];
          if (v314[1] >= (void *)v315[0])
          {
            long long v239 = (void *)std::vector<quasar::TranslationPhraseInternal>::__emplace_back_slow_path<quasar::TranslationPhraseInternal>((uint64_t *)v314, v240);
          }
          else
          {
            quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v314[1], v240);
            long long v239 = v241 + 200;
          }
          v314[1] = v239;
          uint64_t v242 = (int *)*((void *)v238 + 1);
          if (v242)
          {
            do
            {
              uint64_t v243 = v242;
              uint64_t v242 = *(int **)v242;
            }
            while (v242);
          }
          else
          {
            do
            {
              uint64_t v243 = (int *)*((void *)v238 + 2);
              BOOL v99 = *(void *)v243 == (void)v238;
              uint64_t v238 = v243;
            }
            while (!v99);
          }
          uint64_t v238 = v243;
        }
        while (v243 != (int *)((char *)&v317 + 8));
      }
      long long v245 = (uint64_t *)*((void *)&v290 + 1);
      __int16 v244 = (uint64_t *)v290;
      if ((void)v290 != *((void *)&v290 + 1))
      {
        uint64_t v246 = (void **)v319[1];
        do
        {
          uint64_t v247 = *v244;
          uint64_t v248 = v244[1];
          while (v247 != v248)
          {
            uint64_t v249 = *(void *)(v247 + 16);
            uint64_t v250 = *(void *)(v247 + 24);
            while (v249 != v250)
            {
              if (v246)
              {
                int v251 = *(_DWORD *)(v249 + 16);
                v252 = &v319[1];
                v253 = v246;
                do
                {
                  uint64_t v254 = v253;
                  long long v255 = v252;
                  int v256 = *((_DWORD *)v253 + 7);
                  if (v256 >= v251) {
                    v252 = v253;
                  }
                  else {
                    ++v253;
                  }
                  v253 = (void **)*v253;
                }
                while (v253);
                if (v252 != &v319[1])
                {
                  v257 = v256 >= v251 ? v254 : v255;
                  if (v251 >= *((_DWORD *)v257 + 7))
                  {
                    if (v256 >= v251) {
                      uint64_t v258 = v254;
                    }
                    else {
                      uint64_t v258 = v255;
                    }
                    *(_DWORD *)(v249 + 16) = *((_DWORD *)v258 + 8);
                  }
                }
              }
              v249 += 24;
            }
            v247 += 40;
          }
          v244 += 3;
        }
        while (v244 != v245);
      }
      uint64_t v259 = (void **)v319[0];
      if (v319[0] != &v319[1])
      {
        do
        {
          uint64_t v260 = *(uint64_t *)((char *)v259 + 28);
          long long v261 = (uint64_t *)((char *)v314[0] + 200 * SHIDWORD(v260) + 192);
          uint64_t v262 = v290 + 24 * (int)v260;
          __p[1] = 0;
          *(void *)&long long v300 = 0;
          __p[0] = 0;
          *(_OWORD *)std::string __p = *(_OWORD *)v262;
          *(void *)&long long v300 = *(void *)(v262 + 16);
          *(void *)uint64_t v262 = 0;
          *(void *)(v262 + 8) = 0;
          *(void *)(v262 + 16) = 0;
          quasar::MetaInfo::setAlternativeSelectionSpans(v261, (long long *)__p);
          *(void *)&long long v336 = __p;
          std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v336);
          long long v263 = (void **)v259[1];
          if (v263)
          {
            do
            {
              uint64_t v264 = v263;
              long long v263 = (void **)*v263;
            }
            while (v263);
          }
          else
          {
            do
            {
              uint64_t v264 = (void **)v259[2];
              BOOL v99 = *v264 == v259;
              uint64_t v259 = v264;
            }
            while (!v99);
          }
          uint64_t v259 = v264;
        }
        while (v264 != &v319[1]);
      }
      std::__tree<int>::destroy((uint64_t)v319, (void *)v319[1]);
    }
    std::__tree<int>::destroy((uint64_t)&v317, *((void **)&v317 + 1));
    if (v224)
    {
LABEL_442:
      v319[0] = &v290;
      std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
      long long v265 = (void **)v292;
      goto LABEL_446;
    }
  }
  else
  {
    v287 = 0;
    v288 = 0;
    uint64_t v289 = 0;
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v287, *a3, a3[1], 0x8F5C28F5C28F5C29 * ((a3[1] - *a3) >> 3));
    long long v285 = v294;
    uint64_t v286 = v295;
    uint64_t v295 = 0;
    long long v294 = 0uLL;
    uint64_t v233 = v287;
    uint64_t v232 = v288;
    if (v288 == v287)
    {
      uint64_t v233 = v288;
    }
    else
    {
      uint64_t v234 = 0;
      unint64_t v235 = 0;
      uint64_t v236 = 192;
      do
      {
        uint64_t v237 = v285 + v234;
        if (*(void *)(v285 + v234) != *(void *)(v285 + v234 + 8))
        {
          v319[1] = 0;
          v319[0] = 0;
          *(void *)&long long v320 = 0;
          *(_OWORD *)v319 = *(_OWORD *)v237;
          *(void *)&long long v320 = *(void *)(v237 + 16);
          *(void *)uint64_t v237 = 0;
          *(void *)(v237 + 8) = 0;
          *(void *)(v237 + 16) = 0;
          quasar::MetaInfo::setAlternativeSelectionSpans((uint64_t *)&v233[v236], (long long *)v319);
          __p[0] = v319;
          std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          uint64_t v233 = v287;
          uint64_t v232 = v288;
        }
        ++v235;
        v234 += 24;
        v236 += 200;
      }
      while (0x8F5C28F5C28F5C29 * ((v232 - v233) >> 3) > v235);
    }
    v314[0] = v233;
    v314[1] = v232;
    v315[0] = v289;
    v288 = 0;
    uint64_t v289 = 0;
    v287 = 0;
    if (v224) {
      goto LABEL_442;
    }
  }
  v319[0] = &v285;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
  long long v265 = (void **)&v287;
LABEL_446:
  v319[0] = v265;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
  uint64_t v266 = *(void *)(*v268 - 24);
  v319[1] = 0;
  v319[0] = 0;
  *(void *)&long long v320 = 0;
  std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(v319, (uint64_t)v314[0], (uint64_t)v314[1], 0x8F5C28F5C28F5C29 * (((char *)v314[1] - (char *)v314[0]) >> 3));
  quasar::ProcessingBlock::send((uint64_t)v268 + v266, (uint64_t)v319, 0);
  __p[0] = v319;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v319[0] = v314;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
  v319[0] = &v294;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
  v319[0] = &v293;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v319);
}

void sub_1B2203144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  *(void *)(v49 - 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &a49;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)(v49 - 120));
  JUMPOUT(0x1B2203160);
}

void sub_1B2203180()
{
}

void sub_1B2203188()
{
}

void sub_1B2203198()
{
}

void sub_1B22031B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  *(void *)(v72 - 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &a71;
  JUMPOUT(0x1B2203518);
}

void sub_1B22031D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  std::string::size_type v64 = *(void **)(v63 - 120);
  if (v64) {
    operator delete(v64);
  }
  if (a63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a63);
  }
  JUMPOUT(0x1B22033BCLL);
}

void sub_1B2203294()
{
}

void sub_1B22032A8()
{
}

void sub_1B22032CC()
{
}

void sub_1B22032DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2203308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::deque<int>::~deque[abi:ne180100](&a49);
  std::__tree<int>::destroy(v69 - 120, *(void **)(v69 - 112));
  STACK[0x220] = (unint64_t)&a69;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a33;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a36;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  std::pair<std::vector<std::unordered_set<int>>,std::vector<std::vector<quasar::AlternativeSelectionSpan>>>::~pair(&a39);
  JUMPOUT(0x1B22034B4);
}

void sub_1B220335C()
{
}

void sub_1B2203364()
{
  uint64_t v7 = v0 - 120;
  if (v3 < 0) {
    operator delete((void *)v2[13]);
  }
  v2[0] = &v4;
  *(void *)(v0 - 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &v5;
  *(void *)(v0 - 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &v6;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v0 - 120);
  JUMPOUT(0x1B2203544);
}

void sub_1B2203370()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  *(void *)(v1 - 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &STACK[0x220];
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 120));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::~__hash_table(v3);
  v3[0] = (void **)&v7;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = (void **)&v4;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = (void **)&v5;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = (void **)&v6;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](v3);
  JUMPOUT(0x1B2203544);
}

void sub_1B22033CC()
{
  if (STACK[0x220]) {
    operator delete((void *)STACK[0x220]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<quasar::AlternativeSelectionSpan::Alternative>>>>::~__hash_table(v1);
  v1[0] = (void **)&v5;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100](v1);
  v1[0] = (void **)&v2;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](v1);
  v1[0] = (void **)&v3;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](v1);
  v1[0] = (void **)&v4;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](v1);
  JUMPOUT(0x1B2203544);
}

void sub_1B22033E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x220] = (unint64_t)&a49;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a65;
  JUMPOUT(0x1B2203480);
}

void sub_1B2203410(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B2203510);
}

void sub_1B220342C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
}

void sub_1B22034C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v54, a54);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v62 = v55 - 120;
  if (v58 < 0) {
    operator delete((void *)v57[13]);
  }
  v57[0] = &v59;
  *(void *)(v55 - 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &v60;
  *(void *)(v55 - 12std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &v61;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 120));
  JUMPOUT(0x1B2203544);
}

void **std::pair<std::vector<std::unordered_set<int>>,std::vector<std::vector<quasar::AlternativeSelectionSpan>>>::~pair(void **a1)
{
  uint64_t v3 = a1 + 3;
  std::vector<std::vector<quasar::AlternativeSelectionSpan>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1;
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void **std::vector<quasar::anonymous namespace'::ProcessedTranslation>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 80;
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void virtual thunk to'quasar::LinkAlternativesBlock::process(void *a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t quasar::LinkAlternativesBlock::minConfigVersion(quasar::LinkAlternativesBlock *this)
{
  return 254;
}

uint64_t virtual thunk to'quasar::LinkAlternativesBlock::minConfigVersion(quasar::LinkAlternativesBlock *this)
{
  return 254;
}

void quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;

  uint64_t v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
  (**v3)(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 != v11)
  {
    do
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)a2[1];
      float v8 = *a2;
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      quasar::OptionValueBase::setContextProvider(v6, &v8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = v10;
  }
  if (v4)
  {
    uint64_t v11 = v4;
    operator delete(v4);
  }
}

void sub_1B22036FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::setContextProvider(void *a1, uint64_t *a2)
{
}

uint64_t virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::LinkAlternativesOptions>::getOptions(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 104) + 8;
}

void quasar::LinkAlternativesBlock::~LinkAlternativesBlock(quasar::LinkAlternativesBlock *this)
{
  *(void *)this = &unk_1F0A223B8;
  uint64_t v1 = (char **)((char *)this + 320);
  *((void *)this + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &unk_1F0A22440;
  quasar::LinkAlternativesOptions::~LinkAlternativesOptions((quasar::LinkAlternativesBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
}

{
  char **v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0A223B8;
  uint64_t v1 = (char **)((char *)this + 320);
  *((void *)this + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &unk_1F0A22440;
  quasar::LinkAlternativesOptions::~LinkAlternativesOptions((quasar::LinkAlternativesBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v1);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::LinkAlternativesBlock::~LinkAlternativesBlock(quasar::LinkAlternativesBlock *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  void *v1 = &unk_1F0A223B8;
  uint64_t v2 = (char **)(v1 + 40);
  v1[40] = &unk_1F0A22440;
  quasar::LinkAlternativesOptions::~LinkAlternativesOptions((quasar::LinkAlternativesOptions *)(v1 + 1));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)this + *(void *)(*(void *)this - 24);
  *(void *)uint64_t v1 = &unk_1F0A223B8;
  *((void *)v1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = &unk_1F0A22440;
  quasar::LinkAlternativesOptions::~LinkAlternativesOptions((quasar::LinkAlternativesOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 40);
  JUMPOUT(0x1B3EA8670);
}

void *std::__split_buffer<quasar::anonymous namespace'::ProcessedTranslation>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x333333333333334) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(80 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  float v8 = &v7[80 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[80 * a2];
  return a1;
}

uint64_t *std::vector<quasar::anonymous namespace'::ProcessedTranslation>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 80);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v8;
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      *(void *)(v7 - 8std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v6 - 56) = 0;
      *(void *)(v6 - 48) = 0;
      *(void *)(v6 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v6 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  *__n128 result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<quasar::anonymous namespace'::ProcessedTranslation>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator_traits<std::allocator<quasar::anonymous namespace'::ProcessedTranslation>>::destroy[abi:ne180100]<quasar::anonymous namespace'::ProcessedTranslation,void>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  uint64_t v3 = (void **)(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::allocator_traits<std::allocator<quasar::anonymous namespace'::TranslationPhraseSpan>>::construct[abi:ne180100]<quasar::anonymous namespace'::TranslationPhraseSpan,quasar::AlternativeSelectionSpan::Range,std::vector<quasar::AlternativeSelectionSpan::Range>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,void>(uint64_t a1, uint64_t *a2, long long *a3, long long *a4)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v6 = *a4;
  *(_OWORD *)std::string __p = v5;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1B2203C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::anonymous namespace'::TranslationPhraseSpan::TranslationPhraseSpan(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)(a1 + 24) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>((uint64_t **)(a1 + 32), a4, (uint64_t)a4);
  return a1;
}

void sub_1B2203CAC(_Unwind_Exception *a1)
{
  uint64_t v5 = v2;
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v5, *v4);
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 56) = *(void *)(v2 + v5 - 56);
      *(void *)(v6 - 48) = 0;
      *(void *)(v6 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      uint64_t v8 = (uint64_t *)(v2 + v5 - 16);
      uint64_t v9 = *v8;
      *(void *)(v4 + v5 - 16) = *v8;
      uint64_t v10 = v4 + v5 - 16;
      uint64_t v11 = *(void *)(v2 + v5 - 8);
      *(void *)(v6 - 8) = v11;
      if (v11)
      {
        *(void *)(v9 + 16) = v10;
        *(void *)(v7 - 24) = v8;
        *uint64_t v8 = 0;
        *(void *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(void *)(v6 - 24) = v10;
      }
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v12 = *result;
  *__n128 result = v4;
  a2[1] = v12;
  uint64_t v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<quasar::anonymous namespace'::TranslationPhraseSpan>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::anonymous namespace'::TranslationPhraseSpan>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

void std::allocator_traits<std::allocator<quasar::anonymous namespace'::TranslationPhraseSpan>>::destroy[abi:ne180100]<quasar::anonymous namespace'::TranslationPhraseSpan,void>(uint64_t a1)
{
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(a1 + 32, *(void **)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void quasar::anonymous namespace'::TranslationPhraseSpan::~TranslationPhraseSpan(quasar::_anonymous_namespace_::TranslationPhraseSpan *this)
{
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

uint64_t std::vector<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,std::reverse_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>*>,std::reverse_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>*>,std::reverse_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,std::reverse_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>*>,std::reverse_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>*>,std::reverse_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,std::reverse_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>,std::reverse_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<quasar::FeatureExtractor>>,std::reverse_iterator<std::shared_ptr<quasar::FeatureExtractor>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62C88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62C88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>::__on_zero_shared(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F0A64360[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6quasar24AlternativeSelectionSpan11Alternative17GenderDescriptionENSA_18MeaningDescriptionEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator_traits<std::allocator<quasar::anonymous namespace'::TranslationPhraseSpan>>::construct[abi:ne180100]<quasar::anonymous namespace'::TranslationPhraseSpan,quasar::AlternativeSelectionSpan::Range &,std::vector<quasar::AlternativeSelectionSpan::Range>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,void>(uint64_t a1, uint64_t *a2, long long *a3, long long *a4)
{
  uint64_t v4 = *a2;
  long long v5 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v6 = *a4;
  *(_OWORD *)std::string __p = v5;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_1B22042B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator_traits<std::allocator<quasar::anonymous namespace'::ProcessedTranslation>>::construct[abi:ne180100]<quasar::anonymous namespace'::ProcessedTranslation,std::string,std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>,std::optional<int> &,void>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  v14[0] = a2[1];
  *(void *)((char *)v14 + 7) = *(uint64_t *)((char *)a2 + 15);
  char v5 = *((unsigned char *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v6 = *(void *)a3;
  long long v7 = *(_OWORD *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v8 = *a4;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 15) = *(void *)((char *)v14 + 7);
  uint64_t v9 = v14[0];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 23) = v5;
  *(_OWORD *)(a1 + 32) = v7;
  v12[0] = 0;
  v12[1] = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v10 = (uint64_t *)(a1 + 48);
  v12[2] = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v11 = v7;
  for (*(void *)(a1 + 72) = v8; v6 != v11; v6 += 56)
  {
    if (*(void *)(v6 + 16) - *(void *)(v6 + 8) == 8) {
  }
    }
  char v13 = (void **)v12;
}

void sub_1B22043EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  a13 = (void **)&a10;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>::emplace_back<quasar::anonymous namespace'::TranslationPhraseSpan const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - *a1) >> 3);
    if ((unint64_t)(v9 + 1) > 0x492492492492492) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    long long v18 = v4;
    if (v12) {
    else
    }
      uint64_t v13 = 0;
    unint64_t v14 = v12;
    long long v15 = (void *)(v12 + 56 * v9);
    unint64_t v17 = v12 + 56 * v13;
    float v16 = v15 + 7;
    uint64_t v8 = a1[1];
  }
  else
  {
    uint64_t v8 = v6 + 56;
    a1[1] = v6 + 56;
  }
  a1[1] = v8;
  return result;
}

void sub_1B220455C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator_traits<std::allocator<quasar::anonymous namespace'::TranslationPhraseSpan>>::construct[abi:ne180100]<quasar::anonymous namespace'::TranslationPhraseSpan,quasar::anonymous namespace'::TranslationPhraseSpan const&,void>(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(a1 + 1, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  return std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100](a1 + 4, a2 + 32);
}

void sub_1B22045E0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B220465C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__tree_node<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1B22046B8(_Unwind_Exception *a1)
{
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::__tree_node<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_hint_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__emplace_hint_unique_key_args<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>,std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>> const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__find_equal<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    size_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v9 = a4[1];
    v7[4] = *a4;
    void v7[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, v7);
  }
  return v7;
}

void *std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__find_equal<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        unint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    float v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          float v16 = (void *)*v17;
          unint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unint64_t v5 = v17 + 1;
        float v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    float v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      float v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    unint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          unint64_t v20 = (void *)*v21;
          unint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unint64_t v5 = v21 + 1;
        unint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void quasar::anonymous namespace'::merge(std::vector<quasar::anonymous namespace'::TranslationPhraseSpan> const&,std::vector<quasar::anonymous namespace'::TranslationPhraseSpan> const&)::$_0::operator()<std::vector<quasar::anonymous namespace'::TranslationPhraseSpan>>(uint64_t *a1, uint64_t *a2)
{
  v29[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    while (1)
    {
      unint64_t v5 = (uint64_t *)(*a1 + 8);
      uint64_t v6 = *v5;
      if (!*v5) {
        goto LABEL_9;
      }
      uint64_t v7 = *a1 + 8;
      do
      {
        BOOL v8 = quasar::operator<((_DWORD *)(v6 + 32), (_DWORD *)v2);
        uint64_t v9 = (uint64_t *)(v6 + 8);
        if (!v8)
        {
          uint64_t v9 = (uint64_t *)v6;
          uint64_t v7 = v6;
        }
        uint64_t v6 = *v9;
      }
      while (*v9);
      if ((uint64_t *)v7 == v5 || quasar::operator<((_DWORD *)v2, (_DWORD *)(v7 + 32))) {
LABEL_9:
      }
        uint64_t v7 = (uint64_t)v5;
      uint64_t v10 = *a1;
      if (v7 == *a1 + 8) {
        break;
      }
LABEL_30:
      v2 += 56;
      if (v2 == v3) {
        return;
      }
    }
    uint64_t v25 = *(void *)v2;
    int v27 = 0;
    uint64_t v28 = 0;
    std::string __p = 0;
    std::vector<quasar::AlternativeSelectionSpan::Range>::__init_with_size[abi:ne180100]<quasar::AlternativeSelectionSpan::Range*,quasar::AlternativeSelectionSpan::Range*>(&__p, *(const void **)(v2 + 8), *(void *)(v2 + 16), (uint64_t)(*(void *)(v2 + 16) - *(void *)(v2 + 8)) >> 3);
    std::set<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::set[abi:ne180100](v29, v2 + 32);
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    unint64_t v22 = (void **)&v20;
    char v23 = 0;
    *(void *)&long long v20 = operator new(0x38uLL);
    *((void *)&v20 + 1) = v20;
    uint64_t v11 = v20 + 56;
    uint64_t v21 = v20 + 56;
    *((void *)&v20 + 1) = v11;
    uint64_t v12 = *(uint64_t **)v7;
    if (*(void *)v10 == v7)
    {
      uint64_t v14 = v7;
      if (!v12) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v13 = v7;
      if (v12)
      {
        do
        {
          uint64_t v14 = (uint64_t)v12;
          uint64_t v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v14 = *(void *)(v13 + 16);
          BOOL v15 = *(void *)v14 == v13;
          uint64_t v13 = v14;
        }
        while (v15);
      }
      if (!quasar::operator<((_DWORD *)(v14 + 32), (_DWORD *)v2))
      {
        goto LABEL_23;
      }
      if (!*(void *)v7)
      {
LABEL_19:
        uint64_t v24 = v7;
        uint64_t v16 = v7;
        unint64_t v17 = (char **)v7;
        goto LABEL_25;
      }
    }
    uint64_t v24 = v14;
    unint64_t v17 = (char **)(v14 + 8);
LABEL_23:
    if (*v17)
    {
LABEL_28:
      unint64_t v22 = (void **)&v20;
      std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)v29, (void *)v29[1]);
      if (__p)
      {
        int v27 = __p;
        operator delete(__p);
      }
      goto LABEL_30;
    }
    uint64_t v16 = v24;
LABEL_25:
    unint64_t v18 = (char *)operator new(0x40uLL);
    *((void *)v18 + 4) = *(void *)v2;
    *(_OWORD *)(v18 + 4std::unique_ptr<quasar::result_handler::Package>::reset[abi:ne180100](&a9, 0) = v20;
    *((void *)v18 + 7) = v21;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    *(void *)unint64_t v18 = 0;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = v16;
    void *v17 = v18;
    uint64_t v19 = **(void **)v10;
    if (v19)
    {
      *(void *)uint64_t v10 = v19;
      unint64_t v18 = *v17;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)v7, (uint64_t *)v18);
    ++*(void *)(v10 + 16);
    goto LABEL_28;
  }
}