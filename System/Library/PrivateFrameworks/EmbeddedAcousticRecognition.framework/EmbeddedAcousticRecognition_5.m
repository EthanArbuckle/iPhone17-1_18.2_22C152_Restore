uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>((int *)a1, (int *)a2, (int *)a3);
  v9 = *(_DWORD *)a4;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || v9 <= v10 && *(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    *(_DWORD *)a3 = v9;
    *(_DWORD *)a4 = v10;
    v11 = (void *)(a3 + 4);
    v12 = *(void *)(a3 + 4);
    v13 = *(_DWORD *)(a3 + 12);
    v14 = *(_DWORD *)(a4 + 12);
    *(void *)(a3 + 4) = *(void *)(a4 + 4);
    *(_DWORD *)(a3 + 12) = v14;
    *(void *)(a4 + 4) = v12;
    *(_DWORD *)(a4 + 12) = v13;
    v15 = *(_DWORD *)a3;
    v16 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || v15 <= v16 && *(_DWORD *)v11 < *(_DWORD *)(a2 + 4))
    {
      *(_DWORD *)a2 = v15;
      *(_DWORD *)a3 = v16;
      v17 = (void *)(a2 + 4);
      v18 = *(void *)(a2 + 4);
      v19 = *(_DWORD *)(a2 + 12);
      v20 = *(_DWORD *)(a3 + 12);
      *(void *)(a2 + 4) = *v11;
      *(_DWORD *)(a2 + 12) = v20;
      *v11 = v18;
      *(_DWORD *)(a3 + 12) = v19;
      v21 = *(_DWORD *)a2;
      v22 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1 || v21 <= v22 && *(_DWORD *)v17 < *(_DWORD *)(a1 + 4))
      {
        *(_DWORD *)a1 = v21;
        *(_DWORD *)a2 = v22;
        v23 = *(_DWORD *)(a1 + 12);
        v24 = *(void *)(a1 + 4);
        v25 = *(_DWORD *)(a2 + 12);
        *(void *)(a1 + 4) = *v17;
        *(_DWORD *)(a1 + 12) = v25;
        *v17 = v24;
        *(_DWORD *)(a2 + 12) = v23;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a2, a3, a4);
  int v11 = *a5;
  int v12 = *(_DWORD *)a4;
  if (*a5 < *(_DWORD *)a4 || v11 <= v12 && a5[1] < *(_DWORD *)(a4 + 4))
  {
    *(_DWORD *)a4 = v11;
    *a5 = v12;
    v13 = (void *)(a4 + 4);
    uint64_t v14 = *(void *)(a4 + 4);
    int v15 = *(_DWORD *)(a4 + 12);
    int v16 = a5[3];
    *(void *)(a4 + 4) = *(void *)(a5 + 1);
    *(_DWORD *)(a4 + 12) = v16;
    *(void *)(a5 + 1) = v14;
    a5[3] = v15;
    int v17 = *(_DWORD *)a4;
    int v18 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || v17 <= v18 && *(_DWORD *)v13 < *(_DWORD *)(a3 + 4))
    {
      *(_DWORD *)a3 = v17;
      *(_DWORD *)a4 = v18;
      v19 = (void *)(a3 + 4);
      uint64_t v20 = *(void *)(a3 + 4);
      int v21 = *(_DWORD *)(a3 + 12);
      int v22 = *(_DWORD *)(a4 + 12);
      *(void *)(a3 + 4) = *v13;
      *(_DWORD *)(a3 + 12) = v22;
      void *v13 = v20;
      *(_DWORD *)(a4 + 12) = v21;
      int v23 = *(_DWORD *)a3;
      int v24 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2 || v23 <= v24 && *(_DWORD *)v19 < *(_DWORD *)(a2 + 4))
      {
        *(_DWORD *)a2 = v23;
        *(_DWORD *)a3 = v24;
        v25 = (void *)(a2 + 4);
        uint64_t v26 = *(void *)(a2 + 4);
        int v27 = *(_DWORD *)(a2 + 12);
        int v28 = *(_DWORD *)(a3 + 12);
        *(void *)(a2 + 4) = *v19;
        *(_DWORD *)(a2 + 12) = v28;
        void *v19 = v26;
        *(_DWORD *)(a3 + 12) = v27;
        int v29 = *(_DWORD *)a2;
        int v30 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1 || v29 <= v30 && *(_DWORD *)v25 < *(_DWORD *)(a1 + 4))
        {
          *(_DWORD *)a1 = v29;
          *(_DWORD *)a2 = v30;
          int v31 = *(_DWORD *)(a1 + 12);
          uint64_t v32 = *(void *)(a1 + 4);
          int v33 = *(_DWORD *)(a2 + 12);
          *(void *)(a1 + 4) = *v25;
          *(_DWORD *)(a1 + 12) = v33;
          void *v25 = v32;
          *(_DWORD *)(a2 + 12) = v31;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (int *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = (void *)(a1 + 4);
      uint64_t v15 = a2;
      do
      {
        int v16 = *(_DWORD *)v15;
        int v17 = *(_DWORD *)a1;
        if (*(_DWORD *)v15 < *(_DWORD *)a1 || v16 <= v17 && *(_DWORD *)(v15 + 4) < *(_DWORD *)v14)
        {
          *(_DWORD *)uint64_t v15 = v17;
          *(_DWORD *)a1 = v16;
          int v18 = *(_DWORD *)(v15 + 12);
          uint64_t v19 = *(void *)(v15 + 4);
          int v20 = *(_DWORD *)(a1 + 12);
          *(void *)(v15 + 4) = *v14;
          *(_DWORD *)(v15 + 12) = v20;
          *uint64_t v14 = v19;
          *(_DWORD *)(a1 + 12) = v18;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a4, v9, (int *)a1);
        }
        v15 += 16;
      }
      while (v15 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v21 = (unint64_t)v8 >> 4;
      uint64_t v22 = a2 - 16;
      do
      {
        int v23 = *(_DWORD *)a1;
        uint64_t v28 = *(void *)(a1 + 4);
        int v29 = *(_DWORD *)(a1 + 12);
        uint64_t v24 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, a4, v21);
        if (v22 == v24)
        {
          *(_DWORD *)uint64_t v24 = v23;
          *(void *)(v24 + 4) = v28;
          *(_DWORD *)(v24 + 12) = v29;
        }
        else
        {
          *(_DWORD *)uint64_t v24 = *(_DWORD *)v22;
          uint64_t v25 = *(void *)(v22 + 4);
          *(_DWORD *)(v24 + 12) = *(_DWORD *)(v22 + 12);
          *(void *)(v24 + 4) = v25;
          *(_DWORD *)uint64_t v22 = v23;
          *(void *)(v22 + 4) = v28;
          *(_DWORD *)(v22 + 12) = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(a1, v24 + 16, a4, (v24 + 16 - a1) >> 4);
        }
        v22 -= 16;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (_DWORD *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[4];
        if (*v8 < v10 || *v8 <= v10 && *(_DWORD *)(result + 16 * v7 + 4) < v8[5])
        {
          v8 += 4;
          uint64_t v7 = v9;
        }
      }
      int v11 = *v8;
      int v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v11 <= v12)
        {
          int v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }
        else
        {
          int v13 = a4[1];
        }
        uint64_t v14 = *((void *)a4 + 1);
        *a4 = v11;
        uint64_t v15 = *(void *)(v8 + 1);
        a4[3] = v8[3];
        *(void *)(a4 + 1) = v15;
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v17 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            int v16 = (_DWORD *)(result + 16 * v7);
            uint64_t v18 = v17 + 2;
            if (v18 < a3)
            {
              int v19 = v16[4];
              if (*v16 < v19 || *v16 <= v19 && *(_DWORD *)(result + 16 * v7 + 4) < v16[5])
              {
                v16 += 4;
                uint64_t v7 = v18;
              }
            }
            int v20 = *v16;
            if (*v16 < v12 || v20 <= v12 && v16[1] < v13) {
              break;
            }
            *uint64_t v8 = v20;
            uint64_t v21 = *(void *)(v16 + 1);
            v8[3] = v16[3];
            *(void *)(v8 + 1) = v21;
            uint64_t v8 = v16;
            if (v5 < v7) {
              goto LABEL_23;
            }
          }
        }
        int v16 = v8;
LABEL_23:
        *int v16 = v12;
        v16[1] = v13;
        *((void *)v16 + 1) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 16 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      int v10 = *(_DWORD *)(result + 16);
      if (*(_DWORD *)result < v10
        || *(_DWORD *)result <= v10 && *(_DWORD *)(v6 + 16 * v7 + 4) < *(_DWORD *)(result + 20))
      {
        result += 16;
        uint64_t v3 = v9;
      }
    }
    *(_DWORD *)uint64_t v6 = *(_DWORD *)result;
    uint64_t v11 = *(void *)(result + 4);
    *(_DWORD *)(v6 + 12) = *(_DWORD *)(result + 12);
    *(void *)(v6 + 4) = v11;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::PairComparator &,std::pair<int,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (int *)(result + 16 * (v4 >> 1));
    int v7 = *v6;
    int v8 = *(_DWORD *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v7 > v8) {
        return result;
      }
      int v9 = *(_DWORD *)(a2 - 12);
      if (*(_DWORD *)(result + 16 * v5 + 4) >= v9) {
        return result;
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a2 - 12);
    }
    uint64_t v10 = *(void *)(a2 - 8);
    *(_DWORD *)(a2 - 16) = v7;
    uint64_t v11 = result + 16 * v5;
    uint64_t v13 = *(void *)(v11 + 4);
    int v12 = (_DWORD *)(v11 + 4);
    *(_DWORD *)(a2 - 4) = v12[2];
    *(void *)(a2 - 12) = v13;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v15 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v14 = (int *)(result + 16 * v5);
        int v16 = *v14;
        if (*v14 >= v8 && (v16 > v8 || *(_DWORD *)(result + 16 * v5 + 4) >= v9)) {
          break;
        }
        int v12 = v14 + 1;
        uint64_t v17 = *(void *)(v14 + 1);
        *uint64_t v6 = v16;
        int v18 = v14[3];
        *(void *)(v6 + 1) = v17;
        v6[3] = v18;
        uint64_t v6 = (int *)(result + 16 * v5);
        if (v15 <= 1) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v14 = v6;
LABEL_12:
    *uint64_t v14 = v8;
    *int v12 = v9;
    *((void *)v14 + 1) = v10;
  }
  return result;
}

void std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 12 * a2;
  }
}

uint64_t fst::StringRepository<int,int>::RemovePrefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a3)
  {
    memset(&v13, 0, sizeof(v13));
    fst::StringRepository<int,int>::SeqOfId(a1, a2, &v13);
    int64_t v6 = v13.__end_ - v13.__begin_;
    uint64_t v7 = v6 - a3;
    std::vector<int>::vector(&__p, v6 - a3);
    if (v6 != a3)
    {
      std::vector<int>::pointer begin = __p.__begin_;
      int v9 = &v13.__begin_[a3];
      do
      {
        int v10 = *v9++;
        *begin++ = v10;
        --v7;
      }
      while (v7);
    }
    uint64_t v3 = fst::StringRepository<int,int>::IdOfSeq(a1, (uint64_t)&__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v13.__begin_)
    {
      v13.__end_ = v13.__begin_;
      operator delete(v13.__begin_);
    }
  }
  return v3;
}

void sub_1B1D79240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::__append(char **a1, unint64_t a2)
{
  int64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    uint64_t v14 = &v12[12 * v8];
    unint64_t v15 = &v12[12 * v11];
    size_t v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    int v19 = *a1;
    int v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 12);
        v18 -= 12;
        int v21 = *((_DWORD *)v18 + 2);
        *(void *)(v14 - 12) = v20;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v21;
      }
      while (v18 != v19);
      int v18 = *a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  unint64_t v5 = *(void **)a2;
  *(void *)a2 = 0;
  int64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a2;
  *(void *)a2 = v4;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v12;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v11;
  int v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  int v14 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v14;
  if (*(void *)(a1 + 24))
  {
    unint64_t v15 = *(void *)(a1 + 8);
    unint64_t v16 = *(void *)(*(void *)(a1 + 16) + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v16 >= v15) {
        v16 %= v15;
      }
    }
    else
    {
      v16 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
  }
  if (v11)
  {
    unint64_t v17 = *(void *)(a2 + 8);
    unint64_t v18 = *(void *)(*(void *)(a2 + 16) + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v18 >= v17) {
        v18 %= v17;
      }
    }
    else
    {
      v18 &= v17 - 1;
    }
    *(void *)(*(void *)a2 + 8 * v18) = a2 + 16;
  }
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::FreeMostMemory(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 72) = 0;
  }
  for (i = *(void **)(a1 + 112); i; i = (void *)*i)
  {
    uint64_t v4 = i[2];
    if (v4)
    {
      unint64_t v5 = *(void **)v4;
      if (*(void *)v4)
      {
        *(void *)(v4 + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x1B3EA8670](v4, 0x20C40960023A9);
    }
  }
  memset(v7, 0, sizeof(v7));
  uint64_t v8 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)v7, a1 + 96);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v7);
}

void fst::StringRepository<int,int>::Destroy(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)a1;
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        unint64_t v5 = *(void **)v4;
        if (*(void *)v4)
        {
          *(void *)(v4 + 8) = v5;
          operator delete(v5);
        }
        MEMORY[0x1B3EA8670](v4, 0x10C402FEFCB83);
        uint64_t v2 = *(uint64_t **)(a1 + 8);
      }
      ++v3;
    }
    while (v3 != v2);
    uint64_t v3 = *(uint64_t **)a1;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap((uint64_t)v6, a1 + 24);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v6);
  if (v3) {
    operator delete(v3);
  }
}

uint64_t fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::~DeterminizerStar(uint64_t a1)
{
  fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::FreeMostMemory(a1);
  fst::StringRepository<int,int>::~StringRepository((void **)(a1 + 136));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 96);
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::~deque[abi:ne180100]((void *)a1);
}

void **fst::StringRepository<int,int>::~StringRepository(void **a1)
{
  fst::StringRepository<int,int>::Destroy((uint64_t)a1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 3));
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFst(void *a1)
{
  *a1 = &unk_1F0A36930;
  operator new();
}

void sub_1B1D797DC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4065B34434);
  _Unwind_Resume(a1);
}

void *fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFst(void *a1)
{
  *a1 = &unk_1F0A36930;
  uint64_t v2 = (_DWORD *)a1[1];
  int v3 = v2[14] - 1;
  v2[14] = v3;
  if (!v3) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFst(void *a1)
{
  *a1 = &unk_1F0A36930;
  uint64_t v1 = (_DWORD *)a1[1];
  int v2 = v1[14] - 1;
  v1[14] = v2;
  if (!v2) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Start(uint64_t a1)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Start(*(void *)(a1 + 8));
}

float fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Final(uint64_t a1, int a2)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Final(*(void *)(a1 + 8), a2);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumArcs(uint64_t a1, unsigned int a2)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumArcs(*(void *)(a1 + 8), a2);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumInputEpsilons(*(void *)(a1 + 8), a2);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumOutputEpsilons()
{
  return 0;
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 32);
    return v7();
  }
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Type(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

void fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Copy()
{
}

void sub_1B1D79A78(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::OutputSymbols(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitStateIterator()
{
}

void sub_1B1D79B6C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  return fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitArcIterator(*(void *)(a1 + 8), a2, a3);
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFstImpl(uint64_t a1)
{
}

{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1);
}

void sub_1B1D79DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  if (*(char *)(v19 + 431) < 0) {
    operator delete(*(void **)(v19 + 408));
  }
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(v21);
  kaldi::ConstIntegerSet<int>::~ConstIntegerSet(a10);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v19 + 200);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)v19);
  _Unwind_Resume(a1);
}

void sub_1B1D79E70()
{
}

void sub_1B1D79E78()
{
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindLabel(void *a1, int **a2)
{
  uint64_t v4 = (uint64_t)(a1 + 25);
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(a1 + 25, a2);
  if (v5) {
    return *((unsigned int *)v5 + 10);
  }
  unint64_t v8 = a1[31];
  int v7 = a1 + 30;
  uint64_t v6 = -1431655765 * ((v8 - a1[30]) >> 3);
  if (v8 >= a1[32])
  {
    uint64_t v9 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v7, (uint64_t)a2);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v7, (uint64_t)a2);
    uint64_t v9 = v8 + 24;
  }
  a1[31] = v9;
  uint64_t v11 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v4, a2, (uint64_t)&std::piecewise_construct, (uint64_t *)&v11)+ 10) = v6;
  return v6;
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFstImpl(uint64_t a1)
{
  fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3FD50;
  *(void *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 16), "null");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1F0A38C80;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = FLAGS_fst_default_cache_gc;
  *(void *)(a1 + 112) = FLAGS_fst_default_cache_gc_limit;
  operator new();
}

void sub_1B1D7A0B4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10A0C407A9BBF1FLL);
  uint64_t v4 = *(void **)(v1 + 72);
  if (v4) {
    operator delete(v4);
  }
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextFstImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A3AF60;
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  uint64_t v2 = *(void **)(a1 + 368);
  if (v2)
  {
    *(void *)(a1 + 376) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 344);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 304);
  if (v4)
  {
    *(void *)(a1 + 312) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 280);
  if (v5) {
    operator delete(v5);
  }
  int v7 = (void **)(a1 + 240);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a1 + 200);
  int v7 = (void **)(a1 + 176);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(a1 + 136);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)a1);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Start(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 4))
    {
      *(unsigned char *)(a1 + 60) = 1;
    }
    else if (!*(unsigned char *)(a1 + 60))
    {
      std::vector<int>::size_type v2 = *(int *)(a1 + 396) - 1;
      std::vector<int>::value_type __x = 0;
      std::vector<int>::vector(&v6, v2, &__x);
      int State = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindState((void *)a1, &v6.__begin_);
      *(_DWORD *)(a1 + 64) = State;
      *(unsigned char *)(a1 + 60) = 1;
      if (*(_DWORD *)(a1 + 68) <= State) {
        *(_DWORD *)(a1 + 68) = State + 1;
      }
      if (v6.__begin_)
      {
        v6.__end_ = v6.__begin_;
        operator delete(v6.__begin_);
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

void sub_1B1D7A284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindState(void *a1, int **a2)
{
  uint64_t v4 = (uint64_t)(a1 + 17);
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(a1 + 17, a2);
  if (v5) {
    return *((unsigned int *)v5 + 10);
  }
  unint64_t v8 = a1[23];
  int v7 = a1 + 22;
  uint64_t v6 = -1431655765 * ((v8 - a1[22]) >> 3);
  if (v8 >= a1[24])
  {
    uint64_t v9 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v7, (uint64_t)a2);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v7, (uint64_t)a2);
    uint64_t v9 = v8 + 24;
  }
  a1[23] = v9;
  uint64_t v11 = a2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v4, a2, (uint64_t)&std::piecewise_construct, (uint64_t *)&v11)+ 10) = v6;
  return v6;
}

float fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Final(uint64_t a1, int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal(a1, a2))
  {
    uint64_t v4 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2) {
      unint64_t v5 = (_DWORD **)(v4 + 80);
    }
    else {
      unint64_t v5 = (_DWORD **)(*(void *)(v4 + 8) + 8 * a2 + 8);
    }
    return *(float *)*v5;
  }
  else
  {
    uint64_t v6 = *(int *)(a1 + 400);
    float v7 = 0.0;
    if ((int)v6 < *(_DWORD *)(a1 + 396) - 1)
    {
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 176) + 24 * a2) + 4 * v6) == *(_DWORD *)(a1 + 392)) {
        float v7 = 0.0;
      }
      else {
        float v7 = INFINITY;
      }
    }
    Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    *(float *)Mutableint State = v7;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  return v7;
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumArcs(uint64_t a1, unsigned int a2)
{
  if (fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2))
  {
    uint64_t v4 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v4 + 76) == a2) {
      uint64_t v5 = v4 + 80;
    }
    else {
      uint64_t v5 = *(void *)(v4 + 8) + 8 * (int)(a2 + 1);
    }
    return (uint64_t)(*(void *)(*(void *)v5 + 32) - *(void *)(*(void *)v5 + 24)) >> 4;
  }
  else
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 24 * a2);
    uint64_t v7 = *(void *)(*(void *)(a1 + 176) + 24 * a2 + 8);
    if (v6 == v7 || (int v8 = *(_DWORD *)(v7 - 4), v8 != *(_DWORD *)(a1 + 392)))
    {
      uint64_t v11 = ((uint64_t)(*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 2)
          + ((uint64_t)(*(void *)(a1 + 376) - *(void *)(a1 + 368)) >> 2);
    }
    else
    {
      uint64_t v9 = *(int *)(a1 + 400);
      if (v9 == *(_DWORD *)(a1 + 396) - 1 || *(_DWORD *)(v6 + 4 * v9) == v8) {
        return (uint64_t)(*(void *)(a1 + 376) - *(void *)(a1 + 368)) >> 2;
      }
      uint64_t v11 = (uint64_t)(*(void *)(a1 + 376) - *(void *)(a1 + 368)) >> 2;
    }
    return v11 + 1;
  }
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::NumInputEpsilons(uint64_t a1, int a2)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Expand(a1, a2); {
  uint64_t v4 = *(void *)(a1 + 120);
  }
  if (*(_DWORD *)(v4 + 76) == a2) {
    uint64_t v5 = v4 + 80;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 8) + 8 * (a2 + 1);
  }
  return *(void *)(*(void *)v5 + 8);
}

void fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Expand(uint64_t a1, int a2)
{
  if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(a1, a2, *(_DWORD *)(a1 + 392), &v9))
  {
    Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
    fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v9);
  }
  for (i = *(int **)(a1 + 304); i != *(int **)(a1 + 312); ++i)
  {
    if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(a1, a2, *i, &v9))
    {
      uint64_t v6 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v6, &v9);
    }
  }
  for (j = *(int **)(a1 + 368); j != *(int **)(a1 + 376); ++j)
  {
    if (fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(a1, a2, *j, &v9))
    {
      int v8 = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(a1 + 120), a2);
      fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(v8, &v9);
    }
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 176);
  if (kaldi::ConstIntegerSet<int>::count(a1 + 328, a3))
  {
    long long v9 = (int *)operator new(4uLL);
    *long long v9 = -a3;
    __p[0].__end_ = v9 + 1;
    __p[0].__end_cap_.__value_ = v9 + 1;
    __p[0].__begin_ = v9;
    *a4 = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindLabel((void *)a1, &__p[0].__begin_);
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = a2;
    goto LABEL_4;
  }
  int v11 = a2;
  uint64_t v12 = (const void **)(v8 + 24 * a2);
  BOOL v13 = kaldi::ConstIntegerSet<int>::count(a1 + 264, a3);
  int v14 = *(_DWORD *)(a1 + 392);
  if (!v13)
  {
    if (v14 != a3)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ContextFst: CreateArc, invalid olabel supplied [confusion about phone list or disambig symbols?]: ", 98);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      }
      exit(1);
    }
LABEL_13:
    uint64_t v16 = *(int *)(a1 + 400);
    if (v16 != *(_DWORD *)(a1 + 396) - 1 && *((_DWORD *)*v12 + v16) != a3) {
      goto LABEL_16;
    }
    return 0;
  }
  if (v14 == a3) {
    goto LABEL_13;
  }
  unint64_t v15 = *(_DWORD **)(v8 + 24 * v11 + 8);
  if (*v12 != v15 && *(v15 - 1) == v14) {
    return 0;
  }
LABEL_16:
  std::vector<int>::vector(__p, *(int *)(a1 + 396) - 1);
  LODWORD(v17) = *(_DWORD *)(a1 + 396);
  int v18 = v17 - 2;
  if ((int)v17 > 2)
  {
    uint64_t v19 = 0;
    std::vector<int>::pointer begin = __p[0].__begin_;
    uint64_t v21 = (uint64_t)*v12 + 4;
    do
    {
      begin[v19] = *(_DWORD *)(v21 + 4 * v19);
      uint64_t v17 = *(int *)(a1 + 396);
      int v18 = v17 - 2;
      ++v19;
    }
    while (v19 < v17 - 2);
  }
  if ((int)v17 >= 2) {
    __p[0].__begin_[v18] = a3;
  }
  v40 = 0;
  v41 = 0;
  unint64_t v42 = 0;
  uint64_t v22 = *(void *)(v8 + 24 * v11 + 8);
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v40, *v12, v22, (v22 - (uint64_t)*v12) >> 2);
  int State = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindState((void *)a1, &__p[0].__begin_);
  uint64_t v24 = v41;
  if ((unint64_t)v41 >= v42)
  {
    uint64_t v26 = v40;
    uint64_t v27 = v41 - v40;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = v42 - (void)v40;
    if ((uint64_t)(v42 - (void)v40) >> 1 > v28) {
      unint64_t v28 = v29 >> 1;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      int v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v42, v30);
      uint64_t v26 = v40;
      uint64_t v24 = v41;
    }
    else
    {
      int v31 = 0;
    }
    uint64_t v32 = (int *)&v31[4 * v27];
    int v33 = &v31[4 * v30];
    *uint64_t v32 = a3;
    uint64_t v25 = v32 + 1;
    while (v24 != v26)
    {
      int v34 = *--v24;
      *--uint64_t v32 = v34;
    }
    v40 = v32;
    v41 = v25;
    unint64_t v42 = (unint64_t)v33;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    int *v41 = a3;
    uint64_t v25 = v24 + 1;
  }
  v41 = v25;
  int v35 = *(_DWORD *)(a1 + 396);
  v36 = v40;
  if (v35 >= 2)
  {
    for (uint64_t i = 1; i < v35; ++i)
    {
      if (v36[i] == *(_DWORD *)(a1 + 392))
      {
        v36[i] = 0;
        int v35 = *(_DWORD *)(a1 + 396);
      }
    }
    v36 = v40;
  }
  if (v36[*(int *)(a1 + 400)])
  {
    int Label = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::FindLabel((void *)a1, &v40);
    v36 = v40;
    *a4 = Label;
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = State;
    if (!v36) {
      goto LABEL_4;
    }
  }
  else
  {
    *a4 = *(_DWORD *)(a1 + 404);
    a4[1] = a3;
    a4[2] = 0;
    a4[3] = State;
  }
  v41 = v36;
  operator delete(v36);
LABEL_4:
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
  return 1;
}

void sub_1B1D7A9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void *fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextFst(void *result, uint64_t a2, int a3)
{
  *uint64_t result = &unk_1F0A36930;
  if (a3) {
    operator new();
  }
  uint64_t v3 = *(void *)(a2 + 8);
  result[1] = v3;
  ++*(_DWORD *)(v3 + 56);
  return result;
}

void sub_1B1D7AA84(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B3C4065B34434);
  _Unwind_Resume(a1);
}

void sub_1B1D7AB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  if (*(char *)(v9 + 431) < 0) {
    operator delete(*(void **)(v9 + 408));
  }
  uint64_t v12 = *(void **)(v9 + 368);
  if (v12)
  {
    *(void *)(v9 + 376) = v12;
    operator delete(v12);
  }
  BOOL v13 = *(void **)(v9 + 344);
  if (v13) {
    operator delete(v13);
  }
  int v14 = *(void **)(v9 + 304);
  if (v14)
  {
    *(void *)(v9 + 312) = v14;
    operator delete(v14);
  }
  unint64_t v15 = *(void **)(v9 + 280);
  if (v15) {
    operator delete(v15);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v9 + 200);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(v10);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl((void *)v9);
  _Unwind_Resume(a1);
}

void fst::StateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~StateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::Next_(uint64_t result)
{
  return result;
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~CacheStateIterator()
{
}

uint64_t fst::CacheStateIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::Done(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68)) {
    return 0;
  }
  int v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if (v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
    return 1;
  }
  int v6 = v5;
  do
  {
    fst::ArcIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::ArcIterator(&v20, *(void *)(a1 + 8), v6);
    unint64_t v7 = v21;
    uint64_t v8 = *((void *)v20 + 3);
    uint64_t v9 = *((void *)v20 + 4) - v8;
    uint64_t v10 = *(void *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      uint64_t v11 = v9 >> 4;
      int v12 = *(_DWORD *)(v10 + 68);
      BOOL v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        int v15 = *v13;
        v13 += 4;
        int v14 = v15;
        if (v12 <= v15)
        {
          int v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      unint64_t v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    int v16 = *(_DWORD *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    BOOL v4 = v16 >= v18;
    if (v16 < v18) {
      break;
    }
    int v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while (v6 < *(_DWORD *)(*(void *)(a1 + 16) + 68));
  return v4;
}

void sub_1B1D7ADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char **fst::ArcIterator<fst::ContextFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::ArcIterator(char **a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  a1[1] = 0;
  Mutableint State = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(void *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(void *)(a2 + 8), a3) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Expand(*(void *)(a2 + 8), a3); {
  return a1;
  }
}

void sub_1B1D7AE30(_Unwind_Exception *a1)
{
  --*(_DWORD *)(*(void *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::InitArcIterator(uint64_t a1, int a2, void *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Expand(a1, a2); {
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
  }
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1D7AF04(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AD20;
  uint64_t v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1D7B178(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 144) + 48))(*(void *)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    unint64_t v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v14 = (void *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(void))(**(void **)(a1 + 152) + 48))(*(void *)(a1 + 152)) & 1) != 0 {
         && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1))
  }
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v3 = (void *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    int v4 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0);
    int v5 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0);
    if (v5) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v4 == 1;
    }
    if (v6) {
      int v7 = 2;
    }
    else {
      int v7 = 1;
    }
    BOOL v8 = v4 == 1;
    if (v4 == 1) {
      int v9 = v7;
    }
    else {
      int v9 = 0;
    }
    if (v8 || v5 == 0) {
      goto LABEL_36;
    }
    int v9 = 1;
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 1) == 1) {
      goto LABEL_36;
    }
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 1))
    {
      int v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  int v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1B1D7B510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1D7B724(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  int v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v16 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    uint64_t v9 = a1[20];
    uint64_t v8 = a1[21];
    uint64_t v10 = a1[19];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    int v13 = v6;
    uint64_t v14 = v5;
    int v15 = 1;
  }
  else
  {
    uint64_t v8 = a1[20];
    uint64_t v9 = a1[21];
    uint64_t v10 = a1[18];
    uint64_t v11 = (uint64_t)a1;
    int v12 = a2;
    int v13 = v5;
    uint64_t v14 = v6;
    int v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1D7B8D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 144) + 96))(*(void *)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 152) + 96))(*(void *)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1D7BC40(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C407AB34C30);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::ContextMatcher(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = &unk_1F0A3AF98;
  *(void *)(a1 + 8) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(void *)(a1 + 20) = -1;
  *(unsigned char *)(a1 + 44) = 0;
  if (a3 != 1) {
    goto LABEL_28;
  }
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "context");
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    float v8 = (void *)v6[23];
  }
  else {
    float v8 = (void *)*((void *)v6 + 1);
  }
  unint64_t v9 = v23;
  int v10 = (char)v23;
  if ((v23 & 0x80u) != 0) {
    unint64_t v9 = (unint64_t)__p[1];
  }
  if (v8 != (void *)v9)
  {
    BOOL v19 = 0;
    if (((char)v23 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v7 & 0x80) != 0)
  {
    BOOL v19 = memcmp(*(const void **)v6, v11, *((void *)v6 + 1)) == 0;
    goto LABEL_23;
  }
  if (v6[23])
  {
    uint64_t v12 = v7 - 1;
    do
    {
      int v14 = *v6++;
      int v13 = v14;
      int v16 = *(unsigned __int8 *)v11;
      uint64_t v11 = (void **)((char *)v11 + 1);
      int v15 = v16;
      BOOL v18 = v12-- != 0;
      BOOL v19 = v13 == v15;
    }
    while (v13 == v15 && v18);
LABEL_23:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    operator delete(__p[0]);
    if (v19) {
      goto LABEL_25;
    }
LABEL_28:
    int v20 = 3;
    goto LABEL_29;
  }
  BOOL v19 = 1;
  if ((char)v23 < 0) {
    goto LABEL_27;
  }
LABEL_24:
  if (!v19) {
    goto LABEL_28;
  }
LABEL_25:
  int v20 = 1;
LABEL_29:
  *(_DWORD *)(a1 + 16) = v20;
  return a1;
}

void *fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextMatcher(void *a1)
{
  *a1 = &unk_1F0A3AF98;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::~ContextMatcher(void *a1)
{
  *a1 = &unk_1F0A3AF98;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Copy()
{
}

void sub_1B1D7BFA4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C407AB34C30);
  _Unwind_Resume(a1);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Done_(uint64_t a1)
{
  return *(unsigned char *)(a1 + 44) == 0;
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Value_(uint64_t a1)
{
  return a1 + 28;
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Next_(uint64_t result)
{
  *(unsigned char *)(result + 44) = 0;
  return result;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Priority_(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 40);
  return v1();
}

void fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::SetState(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    uint64_t v4 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    char v5 = (void *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"ContextMatcher: bad match type", 30);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2;
}

void sub_1B1D7C104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Find(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == -1)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 44) = 0;
      return result;
    }
    uint64_t result = fst::ContextFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::CreateArc(*(void *)(*(void *)(a1 + 8) + 8), *(_DWORD *)(a1 + 24), a2, (_DWORD *)(a1 + 28));
  }
  else
  {
    *(void *)(a1 + 28) = 0xFFFFFFFF00000000;
    int v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 40) = v4;
    uint64_t result = 1;
  }
  *(unsigned char *)(a1 + 44) = result;
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AD20;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    unsigned int v3 = fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t *fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~SequenceComposeFilter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D7C3CC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::SequenceComposeFilter(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, a3);
  *(void *)(a1 + 8) = (*(uint64_t (**)(void, uint64_t))(*(void *)a2[1] + 16))(a2[1], a3);
  *(void *)(a1 + 16) = (*(uint64_t (**)(void))(**(void **)a1 + 32))();
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 104))(*(void *)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 104))(*(void *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1D7C638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1D7C848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  int v10 = a4 + 1;
  if (!a5) {
    int v10 = a4;
  }
  if (fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Find(a3, *v10)
    && *(unsigned char *)(a3 + 44))
  {
    long long v11 = *(_OWORD *)(a3 + 28);
    long long v23 = *(_OWORD *)a4;
    long long v24 = v11;
    if (a5)
    {
      uint64_t v12 = *(unsigned __int8 **)(a1 + 136);
      if (DWORD1(v23) != -1)
      {
        if (v24 == -1)
        {
          int v16 = v12[32];
          if (v16) {
            char v17 = -1;
          }
          else {
            char v17 = 0;
          }
          char v22 = v17;
          if (v16) {
            goto LABEL_35;
          }
        }
        else
        {
          if (DWORD1(v23)) {
            char v13 = 0;
          }
          else {
            char v13 = -1;
          }
          char v22 = v13;
          if (!DWORD1(v23)) {
            goto LABEL_35;
          }
        }
        goto LABEL_28;
      }
      if (!v12[33])
      {
        char v22 = v12[34] ^ 1;
LABEL_28:
        BOOL v18 = (unsigned int *)&v23;
        BOOL v19 = &v24;
LABEL_34:
        fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v18, (uint64_t)v19, &v22);
      }
LABEL_35:
      *(unsigned char *)(a3 + 44) = 0;
      return;
    }
    char v14 = *(unsigned __int8 **)(a1 + 136);
    if (DWORD1(v24) == -1)
    {
      if (v14[33]) {
        goto LABEL_35;
      }
      char v22 = v14[34] ^ 1;
    }
    else if (v23 == -1)
    {
      int v20 = v14[32];
      if (v20) {
        char v21 = -1;
      }
      else {
        char v21 = 0;
      }
      char v22 = v21;
      if (v20) {
        goto LABEL_35;
      }
    }
    else
    {
      if (DWORD1(v24)) {
        char v15 = 0;
      }
      else {
        char v15 = -1;
      }
      char v22 = v15;
      if (!DWORD1(v24)) {
        goto LABEL_35;
      }
    }
    BOOL v18 = (unsigned int *)&v24;
    BOOL v19 = &v23;
    goto LABEL_34;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CCE0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 84) = 0;
  if (a4 == 1) {
    *(void *)(a1 + --*(_DWORD *)(a9 + 52) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1D7CB3C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != 4
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 24) != a2)
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (int *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 176) + 80) + 12 * a2);
    int v4 = v3[1];
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::SetState(*(void *)(a1 + 32), *v3);
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::SetState(*(void *)(a1 + 40), v4);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 24);
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      uint64_t v2 = (uint64_t *)(a1 + 40);
      int v3 = (uint64_t *)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a2, *v2, *v3);
    }
  }
  else if (a2)
  {
    uint64_t v2 = (uint64_t *)(a1 + 32);
    int v3 = (uint64_t *)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a2, *v2, *v3);
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 48)
      && !*(unsigned char *)(*(void *)(a1 + 32) + 44)
      && *(unsigned char *)(*(void *)(a1 + 40) + 44) == 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void *)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void *)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CCE0;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A3CCE0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    uint64_t v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + --*(_DWORD *)(a9 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  }
  return a1;
}

void sub_1B1D7D128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Find(a3, a2);
  if (result)
  {
    uint64_t v8 = 28;
    if (!*(_DWORD *)(a1 + 28)) {
      uint64_t v8 = 32;
    }
    fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::Find(a4, *(_DWORD *)(a3 + v8));
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a2 + 28);
  uint64_t v7 = (uint64_t *)(a3 + 28);
  BOOL v8 = *(unsigned char *)(a3 + 44) == 0;
  while (*(unsigned char *)(a2 + 44))
  {
    if (v8) {
      *(unsigned char *)(a2 + 44) = 0;
    }
LABEL_6:
    while (*(unsigned char *)(a3 + 44))
    {
      *(unsigned char *)(a3 + 44) = 0;
      int v9 = *(_DWORD *)(a1 + 28);
      BOOL v10 = v9 == 0;
      if (v9) {
        char v11 = v7;
      }
      else {
        char v11 = v6;
      }
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      if (v10) {
        char v14 = v7;
      }
      else {
        char v14 = v6;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v12, v13, *v14, v14[1]))return 1; {
    }
      }
    BOOL v8 = 1;
  }
  if (!v8) {
    goto LABEL_6;
  }
  return 0;
}

uint64_t fst::StateMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void **a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = (unint64_t)a2[5]; ; a2[5] = (void *)i)
        {
          int v9 = a2[2];
          if (i >= ((unsigned char *)a2[3] - v9) >> 4) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 208))(a1, v7, &v9[16 * i]);
          unint64_t i = (unint64_t)a2[5] + 1;
        }
        (*(void (**)(void *, uint64_t))(*(void *)*a2 + 32))(*a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v7);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    BOOL v10 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192);
    return v10(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 28) | 0x40000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(void **a1, uint64_t a2)
{
  a1[5] = 0;
  int v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(void *))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v26 = 0;
  (*(void (**)(void *, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v24);
  while (1)
  {
    if (!v24[0])
    {
      if (v26 >= v24[2]) {
        goto LABEL_29;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v24[0] + 24))(v24[0])) {
      break;
    }
    if (v24[0])
    {
      uint64_t v7 = (_OWORD *)(*(uint64_t (**)(void))(*(void *)v24[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = (_OWORD *)(v24[1] + 16 * v26);
LABEL_8:
    int v9 = (char *)a1[3];
    unint64_t v8 = (unint64_t)a1[4];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = (v9 - (unsigned char *)*v4) >> 4;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)*v4;
      if (v13 >> 3 > v12) {
        unint64_t v12 = v13 >> 3;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        char v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 4), v14);
      }
      else {
        char v15 = 0;
      }
      int v16 = &v15[16 * v11];
      *(_OWORD *)int v16 = *v7;
      BOOL v18 = (char *)a1[2];
      char v17 = (char *)a1[3];
      BOOL v19 = v16;
      if (v17 != v18)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
          v19 -= 16;
          v17 -= 16;
        }
        while (v17 != v18);
        char v17 = (char *)*v4;
      }
      BOOL v10 = v16 + 16;
      a1[2] = v19;
      a1[3] = v16 + 16;
      a1[4] = &v15[16 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(_OWORD *)int v9 = *v7;
      BOOL v10 = v9 + 16;
    }
    a1[3] = v10;
    if (v24[0]) {
      (*(void (**)(void))(*(void *)v24[0] + 40))(v24[0]);
    }
    else {
      ++v26;
    }
  }
  if (v24[0])
  {
    (*(void (**)(void))(*(void *)v24[0] + 8))();
    goto LABEL_31;
  }
LABEL_29:
  if (v25) {
    --*v25;
  }
LABEL_31:
  unint64_t v20 = (unint64_t)a1[2];
  char v21 = (int *)a1[3];
  unint64_t v22 = 126 - 2 * __clz((uint64_t)((uint64_t)v21 - v20) >> 4);
  if (v21 == (int *)v20) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v22;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v20, v21, (uint64_t)v24, v23, 1);
}

void sub_1B1D7D7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ArcSortMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(unint64_t a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, _DWORD *a2)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v2 = (_DWORD *)(result + 16);
    if ((_DWORD *)(result + 16) != a2)
    {
      uint64_t v3 = 0;
      int v4 = (_DWORD *)result;
      do
      {
        char v5 = v2;
        int v6 = v4[5];
        if (v6 < v4[1])
        {
          int v7 = *v5;
          uint64_t v8 = *((void *)v4 + 3);
          uint64_t v9 = v3;
          while (1)
          {
            *(_OWORD *)(result + v9 + 16) = *(_OWORD *)(result + v9);
            if (!v9) {
              break;
            }
            int v10 = *(_DWORD *)(result + v9 - 12);
            v9 -= 16;
            if (v6 >= v10)
            {
              uint64_t v11 = result + v9 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          *(_DWORD *)uint64_t v11 = v7;
          *(_DWORD *)(v11 + 4) = v6;
          *(void *)(v11 + 8) = v8;
        }
        uint64_t v2 = v5 + 4;
        v3 += 16;
        int v4 = v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 4;
    while (v2 != a2)
    {
      uint64_t v3 = v2;
      int v4 = result[5];
      if (v4 < result[1])
      {
        int v5 = *v3;
        uint64_t v6 = *((void *)result + 3);
        int v7 = v3;
        do
        {
          *(_OWORD *)int v7 = *((_OWORD *)v7 - 1);
          int v8 = *(v7 - 7);
          v7 -= 4;
        }
        while (v4 < v8);
        *int v7 = v5;
        v7[1] = v4;
        *((void *)v7 + 1) = v6;
      }
      uint64_t v2 = v3 + 4;
      uint64_t result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(long long *a1, long long *a2, long long *a3)
{
  int v3 = *((_DWORD *)a2 + 1);
  int v4 = *((_DWORD *)a3 + 1);
  if (v3 < *((_DWORD *)a1 + 1))
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *a3;
      *a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *a2;
    *a2 = v8;
    if (*((_DWORD *)a3 + 1) >= *((_DWORD *)a2 + 1)) {
      return 1;
    }
    long long v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (*((_DWORD *)a2 + 1) >= *((_DWORD *)a1 + 1)) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(int *a1, _OWORD *a2)
{
  int v2 = a1[1];
  if (v2 >= *((_DWORD *)a2 - 3))
  {
    unint64_t v6 = (unint64_t)(a1 + 4);
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      int v7 = *(_DWORD *)(v6 + 4);
      v6 += 16;
    }
    while (v2 >= v7);
  }
  else
  {
    int v3 = a1;
    do
    {
      unint64_t v4 = (unint64_t)(v3 + 4);
      int v5 = v3[5];
      v3 += 4;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    long long v8 = a2;
  }
  else
  {
    do
    {
      long long v8 = a2 - 1;
      int v9 = *((_DWORD *)a2-- - 3);
    }
    while (v2 < v9);
  }
  int v10 = *a1;
  uint64_t v11 = *((void *)a1 + 1);
  while (v4 < (unint64_t)v8)
  {
    long long v15 = *(_OWORD *)v4;
    *(_OWORD *)unint64_t v4 = *v8;
    *long long v8 = v15;
    do
    {
      int v12 = *(_DWORD *)(v4 + 20);
      v4 += 16;
    }
    while (v2 >= v12);
    do
      int v13 = *((_DWORD *)v8-- - 3);
    while (v2 < v13);
  }
  if ((int *)(v4 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v4 - 16);
  }
  *(_DWORD *)(v4 - 16) = v10;
  *(_DWORD *)(v4 - 12) = v2;
  *(void *)(v4 - 8) = v11;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(int *a1, _OWORD *a2)
{
  uint64_t v2 = 0;
  int v3 = *a1;
  int v4 = a1[1];
  uint64_t v5 = *((void *)a1 + 1);
  do
  {
    int v6 = a1[v2 + 5];
    v2 += 4;
  }
  while (v6 < v4);
  unint64_t v7 = (unint64_t)&a1[v2];
  if (v2 == 4)
  {
    while (v7 < (unint64_t)a2)
    {
      long long v8 = a2 - 1;
      int v10 = *((_DWORD *)a2-- - 3);
      if (v10 < v4) {
        goto LABEL_9;
      }
    }
    long long v8 = a2;
  }
  else
  {
    do
    {
      long long v8 = a2 - 1;
      int v9 = *((_DWORD *)a2-- - 3);
    }
    while (v9 >= v4);
  }
LABEL_9:
  unint64_t v11 = v7;
  if (v7 < (unint64_t)v8)
  {
    int v12 = v8;
    do
    {
      long long v13 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *v12;
      *int v12 = v13;
      do
      {
        int v14 = *(_DWORD *)(v11 + 20);
        v11 += 16;
      }
      while (v14 < v4);
      do
        int v15 = *((_DWORD *)v12-- - 3);
      while (v15 >= v4);
    }
    while (v11 < (unint64_t)v12);
  }
  if ((int *)(v11 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v11 - 16);
  }
  *(_DWORD *)(v11 - 16) = v3;
  *(_DWORD *)(v11 - 12) = v4;
  *(void *)(v11 - 8) = v5;
  return v11 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        long long v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (long long *)(a1 + 16), (long long *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      uint64_t v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (long long *)(a1 + 16), (long long *)(a1 + 32));
      uint64_t v8 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    int v11 = *(_DWORD *)(v8 + 4);
    if (v11 < *(_DWORD *)(v7 + 4))
    {
      int v12 = *(_DWORD *)v8;
      uint64_t v13 = *(void *)(v8 + 8);
      uint64_t v14 = v9;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        int v15 = *(_DWORD *)(a1 + v14 + 20);
        v14 -= 16;
        if (v11 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v16 = v12;
      *(_DWORD *)(v16 + 4) = v11;
      *(void *)(v16 + 8) = v13;
      if (++v10 == 8) {
        return v8 + 16 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if ((signed __int32)a5->n128_u32[1] < (signed __int32)a4->n128_u32[1])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if ((signed __int32)a4->n128_u32[1] < (signed __int32)a3->n128_u32[1])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      if ((signed __int32)a3->n128_u32[1] < (signed __int32)a2->n128_u32[1])
      {
        __n128 result = *a2;
        *a2 = *a3;
        *a3 = result;
        if ((signed __int32)a2->n128_u32[1] < (signed __int32)a1->n128_u32[1])
        {
          __n128 result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (v14[1] < a1[1])
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v26 = *(_OWORD *)a1;
        unint64_t v18 = a1;
        do
        {
          char v19 = &v18[4 * v17 + 4];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16)
          {
            int v22 = v19[1];
            int v23 = v19[5];
            v19 += 4 * (v22 < v23);
            if (v22 < v23) {
              uint64_t v20 = v21;
            }
          }
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
          unint64_t v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 4;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v26;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)long long v6 = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)a1, (uint64_t)(v19 + 4), a4, ((char *)(v19 + 4) - (char *)a1) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (int *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        int v10 = v8[1];
        int v11 = v8[5];
        v8 += 4 * (v10 < v11);
        if (v10 < v11) {
          uint64_t v7 = v9;
        }
      }
      int v12 = a4[1];
      if (v8[1] >= v12)
      {
        int v13 = *a4;
        uint64_t v14 = *((void *)a4 + 1);
        do
        {
          long long v15 = a4;
          a4 = v8;
          *long long v15 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v16 = (2 * v7) | 1;
          uint64_t v8 = (int *)(result + 16 * v16);
          uint64_t v17 = 2 * v7 + 2;
          if (v17 < a3)
          {
            int v18 = v8[1];
            int v19 = v8[5];
            v8 += 4 * (v18 < v19);
            if (v18 < v19) {
              uint64_t v16 = v17;
            }
          }
          uint64_t v7 = v16;
        }
        while (v8[1] >= v12);
        *a4 = v13;
        a4[1] = v12;
        *((void *)a4 + 1) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    int v6 = *(_DWORD *)(result + 16 * (v4 >> 1) + 4);
    int v7 = *(_DWORD *)(a2 - 12);
    if (v6 < v7)
    {
      int v10 = *(_DWORD *)(a2 - 16);
      uint64_t v8 = a2 - 16;
      int v9 = v10;
      uint64_t v11 = *(void *)(v8 + 8);
      do
      {
        int v12 = (_OWORD *)v8;
        uint64_t v8 = result + 16 * v5;
        *int v12 = *(_OWORD *)v8;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v5 + 4) < v7);
      *(_DWORD *)uint64_t v8 = v9;
      *(_DWORD *)(v8 + 4) = v7;
      *(void *)(v8 + 8) = v11;
    }
  }
  return result;
}

void fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcher(void *a1)
{
  *a1 = &unk_1F0A38688;
  operator new();
}

void sub_1B1D7E5E4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40D5DCF2CELL);
  _Unwind_Resume(a1);
}

void *fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcher(void *a1)
{
  *a1 = &unk_1F0A38688;
  uint64_t v2 = (_DWORD *)a1[1];
  int v3 = v2[2] - 1;
  v2[2] = v3;
  if (!v3) {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcher(void *a1)
{
  *a1 = &unk_1F0A38688;
  uint64_t v1 = (_DWORD *)a1[1];
  int v2 = v1[2] - 1;
  v1[2] = v2;
  if (!v2) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1B3EA8670);
}

void fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy()
{
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState_(uint64_t a1, uint64_t a2)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(a1 + 8), a2);
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find_(uint64_t a1, int a2)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a1 + 8), a2);
}

BOOL fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(a1 + 8));
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a1 + 8));
}

uint64_t fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t a1)
{
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(void *)(a1 + 8));
}

void fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::TableMatcherImpl(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  *(void *)a1 = &unk_1F0A3C460;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a3;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 16) = v8;
  if (a3) {
    int v9 = 0;
  }
  else {
    int v9 = -1;
  }
  if (a3) {
    int v10 = -1;
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v10;
  *(void *)(a1 + 40) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = *a4;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(a1 + 96, a2, a3, 1);
}

void sub_1B1D7E8FC(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcherImpl(void *a1)
{
  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcherImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Copy()
{
  return 0;
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~TableMatcherImpl(void *a1)
{
  *a1 = &unk_1F0A3C460;
  uint64_t v3 = a1[8];
  uint64_t v2 = a1[9];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5) {
        BOOL v6 = v5 == 24;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6)
      {
        int v7 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v7;
          operator delete(v7);
        }
        MEMORY[0x1B3EA8670](v5, 0x10C402FEFCB83);
        uint64_t v3 = a1[8];
        uint64_t v2 = a1[9];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v8 = (void *)a1[6];
  if (v8)
  {
    if (*v8)
    {
      (*(void (**)(void))(*(void *)*v8 + 8))(*v8);
    }
    else
    {
      int v9 = (_DWORD *)v8[3];
      if (v9) {
        --*v9;
      }
    }
    MEMORY[0x1B3EA8670](v8, 0x1070C401ACC3EEFLL);
  }
  uint64_t v10 = a1[2];
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(a1 + 12);
  uint64_t v11 = (void *)a1[8];
  if (v11)
  {
    a1[9] = v11;
    operator delete(v11);
  }
  return a1;
}

void *fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    if (*v4)
    {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    else
    {
      uint64_t v5 = (_DWORD *)v4[3];
      if (v5) {
        --*v5;
      }
    }
    MEMORY[0x1B3EA8670](v4, 0x1070C401ACC3EEFLL);
    *(void *)(a1 + 48) = 0;
  }
  if (*(_DWORD *)(a1 + 12) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    BOOL v6 = fst::LogMessage::LogMessage((fst *)&v23, (uint64_t)&__p);
    int v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"TableMatcher: bad match type", 28);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v23);
    if (v20 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = *(void *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = a2;
  if ((int)a2 >= (unint64_t)((*(void *)(a1 + 72) - v8) >> 3))
  {
    std::vector<int> __p = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a1 + 64, (int)a2 + 1, &__p);
    uint64_t v8 = *(void *)(a1 + 64);
  }
  uint64_t v9 = *(void *)(v8 + 8 * (int)a2);
  if (v9)
  {
    if (v9 != 24) {
      goto LABEL_14;
    }
    return (void *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a1 + 96, a2);
  }
  int v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a2);
  int v11 = v10;
  if (!v10 || *(_DWORD *)(a1 + 92) > v10)
  {
    *(void *)(v8 + 8 * (int)a2) = 24;
    return (void *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a1 + 96, a2);
  }
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v22 = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v13 + 136))(v13, a2, &__p);
  if (__p)
  {
    (*(void (**)(void))(*(void *)__p + 80))();
    uint64_t v14 = v11 - 1;
    if (__p)
    {
      (*(void (**)(void *, uint64_t))(*(void *)__p + 64))(__p, v14);
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v14 = v11 - 1;
  }
  uint64_t v22 = v14;
LABEL_24:
  if (*(_DWORD *)(a1 + 12) == 1)
  {
    if (__p) {
      uint64_t v15 = (*(uint64_t (**)(void))(*(void *)__p + 32))();
    }
    else {
      uint64_t v15 = v19 + 16 * v22;
    }
    uint64_t v16 = (_DWORD *)(v15 + 4);
  }
  else if (__p)
  {
    uint64_t v16 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
  }
  else
  {
    uint64_t v16 = (_DWORD *)(v19 + 16 * v22);
  }
  float v17 = *(float *)(a1 + 88) * (float)(*v16 + 1);
  if (v17 <= (float)v11) {
    operator new();
  }
  *(void *)(v8 + 8 * (int)a2) = 24;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a1 + 96, a2);
  __n128 result = __p;
  if (__p)
  {
    __n128 result = (void *)(*(uint64_t (**)(void *))(*(void *)__p + 8))(__p);
  }
  else if (v21)
  {
    --*v21;
  }
  if (v17 <= (float)v11) {
LABEL_14:
  }
    operator new();
  return result;
}

void sub_1B1D7F060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, _DWORD *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
  {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    uint64_t result = a2 == 0;
    *(unsigned char *)(a1 + ++*(_DWORD *)(result + 24) = result;
    if (a2 == -1) {
      int v5 = 0;
    }
    else {
      int v5 = a2;
    }
    *(_DWORD *)(a1 + 28) = v5;
    int v7 = *(uint64_t **)(*(void *)(a1 + 64) + 8 * *(int *)(a1 + 56));
    uint64_t v6 = *v7;
    if (v5 < (unint64_t)((v7[1] - *v7) >> 2))
    {
      uint64_t v8 = *(int *)(v6 + 4 * v5);
      if (v8 != -1)
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 64))(*v3);
        }
        else {
          v3[4] = v8;
        }
        return 1;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 96;
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v9, a2);
  }
  return result;
}

BOOL fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 24)) {
      return 0;
    }
    if (*v2)
    {
      if ((*(uint64_t (**)(void))(*(void *)*v2 + 24))(*v2)) {
        return 1;
      }
    }
    else if (v2[4] >= v2[2])
    {
      return 1;
    }
    int v5 = *(uint64_t **)(a1 + 48);
    uint64_t v6 = *v5;
    if (*(_DWORD *)(a1 + 12) == 1)
    {
      if (v6) {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
      }
      else {
        uint64_t v7 = v5[1] + 16 * v5[4];
      }
      uint64_t v8 = (_DWORD *)(v7 + 4);
    }
    else if (v6)
    {
      uint64_t v8 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    }
    else
    {
      uint64_t v8 = (_DWORD *)(v5[1] + 16 * v5[4]);
    }
    return *v8 != *(_DWORD *)(a1 + 28);
  }
  else
  {
    uint64_t v4 = a1 + 96;
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(v4);
  }
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (!v1) {
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a1 + 96);
  }
  if (*(unsigned char *)(a1 + 24)) {
    return a1 + 32;
  }
  if (*v1) {
    return (*(uint64_t (**)(void))(*(void *)*v1 + 32))();
  }
  return v1[1] + 16 * v1[4];
}

uint64_t fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 48);
  if (!v1) {
    return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next(result + 96);
  }
  if (*(unsigned char *)(result + 24))
  {
    *(unsigned char *)(result + ++*(_DWORD *)(result + 24) = 0;
  }
  else
  {
    uint64_t result = *v1;
    if (*v1) {
      return (*(uint64_t (**)(void))(*(void *)result + 40))();
    }
    else {
      ++v1[4];
    }
  }
  return result;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1D7F434(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3AC60;
  uint64_t v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1D7F6A8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1D7F8C0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v8 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v8);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, a2, a1[21], v6, a1[20], v5, a1[19], 1);
  }
  else
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>((uint64_t)a1, a2, a1[20], v5, a1[21], v6, a1[18], 0);
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1D7FA70(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 144) + 96))(*(void *)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 152) + 8) + 32))(*(void *)(*(void *)(a1 + 152) + 8), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1D7FDA8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3AC60;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    unsigned int v3 = fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D7FF9C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 104))(*(void *)(a1 + 144));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 152) + 8) + 40))(*(void *)(*(void *)(a1 + 152) + 8), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1D80144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1D80354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(a7 + 8), a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1D80550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  float v10 = a4 + 1;
  if (!a5) {
    float v10 = a4;
  }
  BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a3, *v10);
  if (result)
  {
    for (BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3);
          !result;
          BOOL result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3))
    {
      long long v12 = *(_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a3);
      long long v24 = *(_OWORD *)a4;
      long long v25 = v12;
      if (a5)
      {
        unint64_t v13 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v24) != -1)
        {
          if (v25 == -1)
          {
            int v17 = v13[32];
            if (v17) {
              char v18 = -1;
            }
            else {
              char v18 = 0;
            }
            char v23 = v18;
            if (v17) {
              goto LABEL_35;
            }
          }
          else
          {
            if (DWORD1(v24)) {
              char v14 = 0;
            }
            else {
              char v14 = -1;
            }
            char v23 = v14;
            if (!DWORD1(v24)) {
              goto LABEL_35;
            }
          }
LABEL_28:
          uint64_t v19 = (unsigned int *)&v24;
          char v20 = &v25;
LABEL_34:
          fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
          goto LABEL_35;
        }
        if (!v13[33])
        {
          char v23 = v13[34] ^ 1;
          goto LABEL_28;
        }
      }
      else
      {
        char v15 = *(unsigned __int8 **)(a1 + 136);
        if (DWORD1(v25) != -1)
        {
          if (v24 == -1)
          {
            int v21 = v15[32];
            if (v21) {
              char v22 = -1;
            }
            else {
              char v22 = 0;
            }
            char v23 = v22;
            if (v21) {
              goto LABEL_35;
            }
          }
          else
          {
            if (DWORD1(v25)) {
              char v16 = 0;
            }
            else {
              char v16 = -1;
            }
            char v23 = v16;
            if (!DWORD1(v25)) {
              goto LABEL_35;
            }
          }
LABEL_33:
          uint64_t v19 = (unsigned int *)&v25;
          char v20 = &v24;
          goto LABEL_34;
        }
        if (!v15[33])
        {
          char v23 = v15[34] ^ 1;
          goto LABEL_33;
        }
      }
LABEL_35:
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next(a3);
    }
  }
  return result;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, int *a4, int a5)
{
  float v10 = a4 + 1;
  if (!a5) {
    float v10 = a4;
  }
  uint64_t result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a3 + 8), *v10);
  if (result)
  {
    uint64_t result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(a3 + 8));
    if ((result & 1) == 0)
    {
      do
      {
        long long v12 = *(_OWORD *)fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a3 + 8));
        long long v24 = *(_OWORD *)a4;
        long long v25 = v12;
        if (a5)
        {
          unint64_t v13 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v24) != -1)
          {
            if (v25 == -1)
            {
              int v17 = v13[32];
              if (v17) {
                char v18 = -1;
              }
              else {
                char v18 = 0;
              }
              char v23 = v18;
              if (v17) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v24)) {
                char v14 = 0;
              }
              else {
                char v14 = -1;
              }
              char v23 = v14;
              if (!DWORD1(v24)) {
                goto LABEL_35;
              }
            }
LABEL_28:
            uint64_t v19 = (unsigned int *)&v24;
            char v20 = &v25;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
            goto LABEL_35;
          }
          if (!v13[33])
          {
            char v23 = v13[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          char v15 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v25) != -1)
          {
            if (v24 == -1)
            {
              int v21 = v15[32];
              if (v21) {
                char v22 = -1;
              }
              else {
                char v22 = 0;
              }
              char v23 = v22;
              if (v21) {
                goto LABEL_35;
              }
            }
            else
            {
              if (DWORD1(v25)) {
                char v16 = 0;
              }
              else {
                char v16 = -1;
              }
              char v23 = v16;
              if (!DWORD1(v25)) {
                goto LABEL_35;
              }
            }
LABEL_33:
            uint64_t v19 = (unsigned int *)&v25;
            char v20 = &v24;
            goto LABEL_34;
          }
          if (!v15[33])
          {
            char v23 = v15[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(void *)(a3 + 8));
        uint64_t result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(a3 + 8));
      }
      while (!result);
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CBE0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 84) = 0;
  if (a4 == 1) {
    *(void *)(a1 + --*(_DWORD *)(a9 + 52) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1D809D8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != 4
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(*(void *)(result + 32) + 8), *v3);
    uint64_t result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(*(void *)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2) {
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, *(void *)(a1 + 40), *(void *)(a1 + 32));
    }
  }
  else if (a2)
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(*(void *)(a1 + 32) + 8)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40);
  return fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(v2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else if (*(_DWORD *)(result + 28))
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(result, *(void *)(result + 40), *(void *)(result + 32));
  }
  else
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, *(void *)(result + 32), *(void *)(result + 40));
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CBE0;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A3CBE0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    uint64_t v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + --*(_DWORD *)(a9 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  }
  return a1;
}

void sub_1B1D80FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a3 + 8), a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a3 + 8));
    char v10 = (int *)(v9 + 4);
    if (v8) {
      char v10 = (int *)v9;
    }
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a3, a2);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 28);
    uint64_t v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a3);
    char v10 = (int *)(v9 + 4);
    if (v8) {
      char v10 = (int *)v9;
    }
    fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a4 + 8), *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(a2 + 8))
       || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3))
  {
    if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3))
    {
      fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(void *)(a2 + 8));
      while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(a2 + 8)))
      {
        int v6 = *(_DWORD *)(a1 + 28);
        uint64_t v7 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a2 + 8));
        int v8 = (int *)(v7 + 4);
        if (v6) {
          int v8 = (int *)v7;
        }
        if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(a3, *v8)) {
          break;
        }
        fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(void *)(a2 + 8));
      }
    }
    while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a3))
    {
      uint64_t v9 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a2 + 8));
      uint64_t v10 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a3);
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next(a3);
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        unint64_t v13 = (uint64_t *)v10;
      }
      else {
        unint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a2)
       || !fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(a3 + 8)))
  {
    if (fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(a3 + 8)))
    {
      fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next(a2);
      while (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(a2))
      {
        int v6 = *(_DWORD *)(a1 + 28);
        uint64_t v7 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a2);
        int v8 = (int *)(v7 + 4);
        if (v6) {
          int v8 = (int *)v7;
        }
        if (fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(*(void *)(a3 + 8), *v8))break; {
        fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next(a2);
        }
      }
    }
    while (!fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(*(void *)(a3 + 8)))
    {
      uint64_t v9 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(a2);
      uint64_t v10 = fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value(*(void *)(a3 + 8));
      fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(*(void *)(a3 + 8));
      int v11 = *(_DWORD *)(a1 + 28);
      BOOL v12 = v11 == 0;
      if (v11) {
        unint64_t v13 = (uint64_t *)v10;
      }
      else {
        unint64_t v13 = (uint64_t *)v9;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v12) {
        char v16 = (uint64_t *)v10;
      }
      else {
        char v16 = (uint64_t *)v9;
      }
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1; {
    }
      }
  }
  return 0;
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>()
{
}

void sub_1B1D813AC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1F0A3ACC0;
  int v8 = *(__n128 **)(a4 + 40);
  if (!v8) {
    operator new();
  }
  *(void *)(a1 + 136) = v8;
  __n128 v9 = *v8;
  *(__n128 *)(a1 + 144) = *v8;
  *(void *)(a1 + 160) = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 32))(v9.n128_u64[0], v9);
  *(void *)(a1 + 168) = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152));
  uint64_t v10 = *(void *)(a4 + 48);
  if (!v10) {
    operator new();
  }
  *(void *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3) {
    *(void *)(a1 + 8) |= 4uLL;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  unint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), v11);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), v12);
  *(void *)(a1 + 8) = *(void *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1B1D81620(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 40))(*(void *)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(**(void **)(a1 + 152) + 40))(*(void *)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1D81838(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(void *a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(a1[22] + 80) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = a1[17];
  char v8 = *((unsigned char *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v8);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>((uint64_t)a1, a2, a1[21], v6, a1[20], v5, a1[19], 1);
  }
  else
  {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, a2, a1[20], v5, a1[21], v6, a1[18], 0);
  }
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(**(void **)(a1 + 152) + 24))(*(void *)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_1B1D819E8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 24))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 24))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 80);
  char v5 = (unsigned int *)(v4 + 12 * a2);
  uint64_t v6 = *v5;
  float v10 = (*(float (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 144) + 8) + 32))(*(void *)(*(void *)(a1 + 144) + 8), v6);
  if (v10 != INFINITY)
  {
    uint64_t v7 = v5[1];
    float v8 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 152) + 96))(*(void *)(a1 + 152), v7);
    float v10 = v8;
    if (v8 != INFINITY)
    {
      uint64_t v9 = *(void *)(a1 + 136);
      LOBYTE(v10) = *(unsigned char *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    operator new();
  }
  *(void *)a1 = a4;
  if (!a5) {
    operator new();
  }
  *(void *)(a1 + 8) = a5;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 32) = -1;
  return a1;
}

void sub_1B1D81D20(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(void *a1)
{
  *a1 = &unk_1F0A3ACC0;
  uint64_t v2 = (uint64_t *)a1[17];
  if (v2)
  {
    unsigned int v3 = fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>::~SequenceComposeFilter(v2);
    MEMORY[0x1B3EA8670](v3, 0x1060C40AD892F49);
  }
  uint64_t v4 = a1[22];
  if (v4)
  {
    char v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(void *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1B3EA8670](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
}

void sub_1B1D81F14(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 184);
  if (!v3) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 144) + 8) + 40))(*(void *)(*(void *)(a1 + 144) + 8));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 104))(*(void *)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    uint64_t v12 = (void *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1) {
    return 0;
  }
  return v8 == -1 || v7 <= v8;
}

void sub_1B1D820BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(a7 + 8), a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1D822CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_13;
      }
LABEL_7:
      char v14 = (int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (!v15[0]) {
      goto LABEL_7;
    }
    char v14 = (int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16) {
    --*v16;
  }
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1B1D824C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1F0A3CC60;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 144) + 16))(*(void *)(a3 + 144), 0);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, void))(**(void **)(a3 + 152) + 16))(*(void *)(a3 + 152), 0);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 84) = 0;
  if (a4 == 1) {
    *(void *)(a1 + --*(_DWORD *)(a9 + 52) = 0xFFFFFFFF00000000;
  }
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1B3EA8670);
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy()
{
}

void sub_1B1D82660(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != 4
        || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) == 4
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t *result, int a2)
{
  if (*((_DWORD *)result + 6) != a2)
  {
    uint64_t v2 = result;
    *((_DWORD *)result + 6) = a2;
    int v3 = (unsigned int *)(*(void *)(*(void *)(result[2] + 176) + 80) + 12 * a2);
    uint64_t v4 = v3[1];
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(result[4], *v3);
    uint64_t result = (uint64_t *)fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(*(void *)(v2[5] + 8), v4);
    *((_DWORD *)v2 + 16) = *((_DWORD *)v2 + 6);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2) {
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(void *)(a1 + 40), *(void *)(a1 + 32));
    }
  }
  else if (a2)
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
  }
  return 1;
}

BOOL fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(*(void *)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  return fst::TableMatcherImpl<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(v2);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else if (*(_DWORD *)(result + 28))
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, *(void *)(result + 40), *(void *)(result + 32));
  }
  else
  {
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(result, *(void *)(result + 32), *(void *)(result + 40));
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

void *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(void *a1)
{
  *a1 = &unk_1F0A3CC60;
  uint64_t v2 = a1[4];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::TableMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0A3CC60;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), a3);
  *(void *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 40) + 16))(*(void *)(a2 + 40), a3);
  *(unsigned char *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + --*(_DWORD *)(a9 + 52) = xmmword_1B25616E0;
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  if (a3)
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    uint64_t v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    uint64_t v7 = (void *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1) {
    *(int32x2_t *)(a1 + --*(_DWORD *)(a9 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  }
  return a1;
}

void sub_1B1D82C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::Map<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2)
{
  kaldi::ConstIntegerSet<int>::ConstIntegerSet((uint64_t)v3, a2);
  fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(a1, (uint64_t)v3);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  if (v4) {
    operator delete(v4);
  }
}

void sub_1B1D82D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::RemoveSomeInputSymbolsMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v6 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v6, &v14);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 24))(v14))
        {
          uint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          uint64_t v8 = *v7;
          uint64_t v9 = v7[1];
          BOOL v10 = kaldi::ConstIntegerSet<int>::count(a2, *v7);
          uint64_t v11 = v8;
          if (v10) {
            uint64_t v11 = 0;
          }
          v13[0] = v11 | v8 & 0xFFFFFFFF00000000;
          v13[1] = v9;
          (*(void (**)(uint64_t, void *))(*(void *)v14 + 88))(v14, v13);
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
        if (v14) {
          (*(void (**)(void))(*(void *)v14 + 8))();
        }
        float v12 = (*(float (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v6);
        kaldi::ConstIntegerSet<int>::count(a2, 0);
        (*(void (**)(uint64_t, uint64_t, float))(*(void *)a1 + 184))(a1, v6, v12);
        uint64_t v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0xFFFFFFFFCD70FFFFLL, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1D83038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FstLmHandle::FstLmHandle(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  *(unsigned char *)(a1 + 664) = 0;
  *(float *)(a1 + 668) = a4;
  *(float *)(a1 + 672) = a5;
  *(void *)a1 = &unk_1F0A51B08;
  *(void *)(a1 + 656) = &unk_1F0A51B40;
  uint64_t v8 = quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 8));
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = a3;
  quasar::ModelLoader::readFstNetwork(v8, a2, &v12);
  long long v9 = v12;
  long long v12 = 0uLL;
  BOOL v10 = *(std::__shared_weak_count **)(a1 + 640);
  *(_OWORD *)(a1 + 632) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*((void *)&v12 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  return a1;
}

void sub_1B1D83150(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 640);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  quasar::ModelLoader::~ModelLoader(v2);
  _Unwind_Resume(a1);
}

uint64_t quasar::FstLmHandle::FstLmHandle(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v7 - 24)) = a2[1];
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 8));
  uint64_t v8 = a3[1];
  *(void *)(a1 + 632) = *a3;
  *(void *)(a1 + 640) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 648) = a4;
  return a1;
}

uint64_t quasar::FstLmHandle::FstLmHandle(uint64_t a1, void *a2, int a3, float a4, float a5)
{
  *(unsigned char *)(a1 + 664) = 0;
  *(float *)(a1 + 668) = a4;
  *(float *)(a1 + 672) = a5;
  *(void *)a1 = &unk_1F0A51B08;
  *(void *)(a1 + 656) = &unk_1F0A51B40;
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 8));
  uint64_t v8 = a2[1];
  *(void *)(a1 + 632) = *a2;
  *(void *)(a1 + 640) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 648) = a3;
  return a1;
}

uint64_t quasar::FstLmHandle::FstLmHandle(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v5 - 24)) = a2[1];
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)(a1 + 8));
  uint64_t v6 = *a3;
  *(void *)(a1 + 632) = *(void *)(*a3 + 632);
  uint64_t v7 = *(void *)(v6 + 640);
  *(void *)(a1 + 640) = v7;
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t v6 = *a3;
  }
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(v6 + 648);
  return a1;
}

void quasar::FstLmHandle::AddTo(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 632);
  long long v9 = *(std::__shared_weak_count **)(a1 + 640);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = v8;
    long long v12 = v9;
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 632);
    long long v12 = 0;
  }
  unsigned int v10 = a4;
  int v13 = -1;
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(a2, &v10, a3, a5, a6, a7, 0x20000, a8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B1D83468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void virtual thunk to'quasar::FstLmHandle::AddTo(void *a1, uint64_t a2, uint64_t *a3, unsigned int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
}

uint64_t quasar::FstLmHandle::GetOrder(quasar::FstLmHandle *this)
{
  return *((unsigned int *)this + 162);
}

uint64_t quasar::FstLmHandle::GetSize(quasar::FstLmHandle *this)
{
  uint64_t v2 = *((void *)this + 79);
  if (!v2) {
    return 0;
  }
  unsigned int v11 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 128))(v2, &v9);
  uint64_t v3 = 0;
  for (uint64_t i = 0; ; ++i)
  {
    if (!v9)
    {
      if ((int)v11 >= v10) {
        return i;
      }
      uint64_t v5 = *((void *)this + 79);
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 16))(v9)) {
      break;
    }
    uint64_t v5 = *((void *)this + 79);
    if (v9)
    {
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v9 + 24))();
      goto LABEL_10;
    }
LABEL_9:
    uint64_t v6 = v11;
LABEL_10:
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 40))(v5, v6);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 32))(v9);
    }
    else {
      ++v11;
    }
    v3 += v7;
  }
  if (v9) {
    (*(void (**)(void))(*(void *)v9 + 8))();
  }
  return i;
}

void sub_1B1D83650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    quasar::FstLmHandle::GetSize();
  }
  _Unwind_Resume(exception_object);
}

std::string *quasar::GeoMemories::rememberLastRegionId(std::string *this, const std::string *__str, unsigned char *a3)
{
  if (*a3)
  {
    if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (*((unsigned char *)&this->__r_.__value_.__s + 23)) {
        return this;
      }
      return std::string::operator=(this, __str);
    }
    if (!this->__r_.__value_.__l.__size_) {
      return std::string::operator=(this, __str);
    }
  }
  return this;
}

void quasar::GeoMemories::recallLastRegionId(uint64_t a1@<X0>, unsigned char *a2@<X1>, std::string *a3@<X8>)
{
  if (*a2)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
}

uint64_t Base64decode(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t v2 = 0;
  do
    unsigned int v3 = pr2six[a2[v2++]];
  while (v3 < 0x40);
  if ((int)v2 <= 5)
  {
    int v6 = v2 - 1;
  }
  else
  {
    unsigned int v4 = v2 + 3;
    do
    {
      *a1 = (pr2six[a2[1]] >> 4) | (4 * pr2six[*a2]);
      a1[1] = (pr2six[a2[2]] >> 2) | (16 * pr2six[a2[1]]);
      uint64_t v5 = a1 + 3;
      a1[2] = pr2six[a2[3]] | (pr2six[a2[2]] << 6);
      a2 += 4;
      v4 -= 4;
      a1 += 3;
    }
    while (v4 > 8);
    int v6 = v4 - 4;
    a1 = v5;
  }
  if (v6 >= 2)
  {
    *a1 = (pr2six[a2[1]] >> 4) | (4 * pr2six[*a2]);
    if (v6 == 2)
    {
      ++a1;
    }
    else
    {
      a1[1] = (pr2six[a2[2]] >> 2) | (16 * pr2six[a2[1]]);
      if (v6 < 4)
      {
        a1 += 2;
      }
      else
      {
        a1[2] = pr2six[a2[3]] | (pr2six[a2[2]] << 6);
        a1 += 3;
      }
    }
  }
  int v7 = v2 + 2;
  int v8 = v2 + 5;
  if (v7 >= 0) {
    int v8 = v7;
  }
  *a1 = 0;
  return 3 * (v8 >> 2) - (-v6 & 3u);
}

uint64_t Base64encode_len(int a1)
{
  return (4 * ((a1 + 2) / 3)) | 1u;
}

uint64_t Base64encode(unsigned char *a1, uint64_t a2, int a3)
{
  if (a3 < 3)
  {
    LODWORD(v3) = 0;
    unsigned int v4 = a1;
  }
  else
  {
    unint64_t v3 = 0;
    unsigned int v4 = a1;
    do
    {
      *unsigned int v4 = basis_64[(unint64_t)*(unsigned __int8 *)(a2 + v3) >> 2];
      v4[1] = basis_64[((unint64_t)*(unsigned __int8 *)(a2 + v3 + 1) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(unsigned char *)(a2 + v3) & 3))];
      v4[2] = basis_64[((unint64_t)*(unsigned __int8 *)(a2 + v3 + 2) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*(unsigned char *)(a2 + v3 + 1) & 0xF))];
      v4[3] = basis_64[*(unsigned char *)(a2 + v3 + 2) & 0x3F];
      v4 += 4;
      v3 += 3;
    }
    while (v3 < (a3 - 2));
  }
  if ((int)v3 < a3)
  {
    *unsigned int v4 = basis_64[(unint64_t)*(unsigned __int8 *)(a2 + v3) >> 2];
    unsigned int v5 = 16 * (*(unsigned char *)(a2 + v3) & 3);
    if (v3 == a3 - 1)
    {
      v4[1] = basis_64[16 * (*(unsigned char *)(a2 + v3) & 3)];
      char v6 = 61;
    }
    else
    {
      uint64_t v7 = a2 + v3;
      v4[1] = basis_64[v5 | ((unint64_t)*(unsigned __int8 *)(v7 + 1) >> 4)];
      char v6 = basis_64[4 * (*(unsigned char *)(v7 + 1) & 0xF)];
    }
    v4[2] = v6;
    v4[3] = 61;
    v4 += 4;
  }
  *unsigned int v4 = 0;
  return (v4 - a1 + 1);
}

BOOL kaldi::WordHypLattice::Node::IsSucceededBy(kaldi::WordHypLattice::Node *this, kaldi::WordHypLattice::Node *const *a2)
{
  long long v24 = 0u;
  memset(v23, 0, sizeof(v23));
  v22[0] = 0;
  v22[1] = 0;
  int v21 = (uint64_t *)v22;
  uint64_t v2 = (char *)this + 64;
  unint64_t v3 = (char *)*((void *)this + 9);
  if (v3 == (char *)this + 64) {
    goto LABEL_26;
  }
  do
  {
    uint64_t v5 = *((void *)v3 + 2);
    if (*(float *)(*(void *)(v5 + 8) + 132) <= *((float *)*a2 + 33))
    {
      std::deque<kaldi::WordHypLattice::Node *>::push_back(v23, (void *)(v5 + 8));
      uint64_t v5 = *((void *)v3 + 2);
    }
    std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v21, (unint64_t *)(v5 + 8), (uint64_t *)(v5 + 8));
    unint64_t v3 = (char *)*((void *)v3 + 1);
  }
  while (v3 != v2);
  uint64_t v6 = *((void *)&v24 + 1);
  if (!*((void *)&v24 + 1))
  {
LABEL_26:
    BOOL v9 = 0;
  }
  else
  {
    do
    {
      uint64_t v7 = v24;
      int v8 = *(void **)(*(void *)(*((void *)&v23[0] + 1) + (((unint64_t)v24 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v24 & 0x1FF));
      BOOL v9 = v8 == *(void **)a2;
      if (v8 == *(void **)a2) {
        break;
      }
      *(void *)&long long v24 = v24 + 1;
      *((void *)&v24 + 1) = v6 - 1;
      if ((unint64_t)(v7 + 1) >= 0x400)
      {
        operator delete(**((void ***)&v23[0] + 1));
        *((void *)&v23[0] + 1) += 8;
        *(void *)&long long v24 = v24 - 512;
      }
      int v10 = v8 + 8;
      for (uint64_t i = (void *)v8[9]; i != v10; uint64_t i = (void *)i[1])
      {
        uint64_t v12 = i[2];
        unint64_t v13 = *(void *)(v12 + 8);
        uint64_t v14 = v22[0];
        if (!v22[0]) {
          goto LABEL_20;
        }
        char v15 = v22;
        do
        {
          char v16 = v14;
          unint64_t v17 = v15;
          unint64_t v18 = v14[4];
          uint64_t v19 = v14 + 1;
          if (v18 >= v13)
          {
            uint64_t v19 = v16;
            char v15 = (void **)v16;
          }
          uint64_t v14 = (void *)*v19;
        }
        while (v14);
        if (v15 == v22) {
          goto LABEL_20;
        }
        if (v18 < v13) {
          char v16 = v17;
        }
        if (v13 < v16[4])
        {
LABEL_20:
          if (*(float *)(v13 + 132) <= *((float *)*a2 + 33))
          {
            std::deque<kaldi::WordHypLattice::Node *>::push_back(v23, (void *)(v12 + 8));
            uint64_t v12 = i[2];
          }
          std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v21, (unint64_t *)(v12 + 8), (uint64_t *)(v12 + 8));
        }
      }
      uint64_t v6 = *((void *)&v24 + 1);
    }
    while (*((void *)&v24 + 1));
  }
  std::__tree<int>::destroy((uint64_t)&v21, v22[0]);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v23);
  return v9;
}

void sub_1B1D83B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  std::__tree<int>::destroy((uint64_t)va, v5);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::operator<<(uint64_t *a1, uint64_t a2)
{
  v32[0] = 0;
  v32[1] = 0;
  int v31 = (uint64_t *)v32;
  uint64_t v3 = *(void *)(a2 + 16);
  if (*(void *)(a2 + 24) != v3)
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    do
    {
      v33.__locale_ = (std::locale::__imp *)(v3 + v4);
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v31, (unint64_t *)(v3 + v4), (uint64_t)&std::piecewise_construct, (uint64_t **)&v33)[5] = v5++;
      uint64_t v3 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      v4 += 8;
    }
    while (v5 < (v6 - v3) >> 3);
    if (v6 != v3)
    {
      unint64_t v7 = 0;
      int v8 = a1 + 3;
      BOOL v9 = a1 + 1;
      do
      {
        uint64_t v10 = *(void *)(v3 + 8 * v7);
        uint64_t v11 = v10 + 64;
        uint64_t v12 = *(void *)(v10 + 72);
        if (v12 != v10 + 64)
        {
          do
          {
            uint64_t v13 = *a1;
            *(_DWORD *)((char *)v9 + *(void *)(*a1 - 24)) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*a1 - 24)) & 0xFFFFFF4F | 0x20;
            *(void *)((char *)v8 + *(void *)(v13 - 24)) = 5;
            uint64_t v14 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
            uint64_t v15 = *a1;
            *(_DWORD *)((char *)v9 + *(void *)(*a1 - 24)) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*a1 - 24)) & 0xFFFFFF4F | 0x20;
            *(void *)((char *)v8 + *(void *)(v15 - 24)) = 5;
            v33.__locale_ = (std::locale::__imp *)(*(void *)(v12 + 16) + 8);
            std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v31, (unint64_t *)v33.__locale_, (uint64_t)&std::piecewise_construct, (uint64_t **)&v33);
            char v16 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
            uint64_t v17 = *(void *)(v12 + 16);
            uint64_t v18 = v17 + 264;
            uint64_t v19 = *(unsigned __int8 *)(v17 + 287);
            uint64_t v21 = *(void *)(v17 + 264);
            uint64_t v20 = *(void *)(v17 + 272);
            if ((v19 & 0x80u) == 0) {
              uint64_t v22 = v18;
            }
            else {
              uint64_t v22 = v21;
            }
            if ((v19 & 0x80u) == 0) {
              uint64_t v23 = v19;
            }
            else {
              uint64_t v23 = v20;
            }
            long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
            long long v25 = (void *)std::ostream::operator<<();
            long long v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)")", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
            uint64_t v27 = *a1;
            *(_DWORD *)((char *)v9 + *(void *)(*a1 - 24)) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*a1 - 24)) & 0xFFFFFF4F | 0x20;
            *(void *)((char *)v8 + *(void *)(v27 - 24)) = 4;
            std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
            unint64_t v28 = std::locale::use_facet(&v33, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
            std::locale::~locale(&v33);
            std::ostream::put();
            std::ostream::flush();
            uint64_t v12 = *(void *)(v12 + 8);
          }
          while (v12 != v11);
          uint64_t v3 = *(void *)(a2 + 16);
          uint64_t v6 = *(void *)(a2 + 24);
        }
        ++v7;
      }
      while (v7 < (v6 - v3) >> 3);
    }
  }
  std::__tree<int>::destroy((uint64_t)&v31, v32[0]);
  return a1;
}

void sub_1B1D83EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

uint64_t kaldi::JoinVectorToString<int>(void *a1, const char *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  if (a1[1] != *a1)
  {
    unint64_t v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      uint64_t v5 = a1[1] - *a1;
      if (v4 < v5 >> 2)
      {
        size_t v6 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a2, v6);
        uint64_t v5 = a1[1] - *a1;
      }
    }
    while (v4 < v5 >> 2);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA408];
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v12);
}

void sub_1B1D840C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::WordHypLattice::Arc::SetPhones(uint64_t a1, int **a2, kaldi::TransitionModel *this)
{
  unint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  BOOL v5 = v3 == *a2;
  uint64_t v6 = v3 - *a2;
  *(float *)(a1 + 72) = (float)(unint64_t)v6;
  *(_DWORD *)(a1 + 560) = v6;
  if (!v5)
  {
    BOOL v9 = (void **)(a1 + 104);
    uint64_t v10 = a1 + 120;
    do
    {
      int v11 = *v4;
      if (kaldi::TransitionModel::IsFinal(this, *v4))
      {
        int v12 = kaldi::TransitionModel::TransitionIdToPhone(this, v11);
        int v13 = v12;
        uint64_t v15 = *(char **)(a1 + 112);
        unint64_t v14 = *(void *)(a1 + 120);
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v17 = (char *)*v9;
          uint64_t v18 = (v15 - (unsigned char *)*v9) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v20 = v14 - (void)v17;
          if (v20 >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10, v21);
            uint64_t v17 = *(char **)(a1 + 104);
            uint64_t v15 = *(char **)(a1 + 112);
          }
          else
          {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[4 * v18];
          *(_DWORD *)uint64_t v23 = v13;
          char v16 = v23 + 4;
          while (v15 != v17)
          {
            int v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          *(void *)(a1 + 104) = v23;
          *(void *)(a1 + 112) = v16;
          *(void *)(a1 + 120) = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v15 = v12;
          char v16 = v15 + 4;
        }
        *(void *)(a1 + 112) = v16;
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

uint64_t kaldi::WordHypLattice::Node::setTimestamps(uint64_t this)
{
  unint64_t v1 = *(void *)(this + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(this + 8);
    float v3 = 0.0;
    if (v2 != this)
    {
      char v4 = 1;
      do
      {
        float v5 = *(float *)(*(void *)(v2 + 16) + 248);
        if (v4)
        {
          *(float *)(this + 132) = v5;
        }
        else
        {
          if (v5 < *(float *)(this + 132)) {
            *(float *)(this + 132) = v5;
          }
          if (v5 <= *(float *)(this + 136)) {
            goto LABEL_10;
          }
        }
        *(float *)(this + 136) = v5;
LABEL_10:
        char v4 = 0;
        float v3 = v3 + v5;
        uint64_t v2 = *(void *)(v2 + 8);
      }
      while (v2 != this);
    }
    float v6 = v3 / (float)v1;
  }
  else
  {
    *(_DWORD *)(this + 132) = 0;
    *(_DWORD *)(this + 136) = 0;
    float v6 = 0.0;
  }
  *(float *)(this + 140) = v6;
  return this;
}

uint64_t kaldi::WordHypLattice::Node::FindBestPathArc(kaldi::WordHypLattice::Node *this, int a2, int a3)
{
  float v3 = (char *)this + 64;
  char v4 = (char *)*((void *)this + 9);
  if (v4 == (char *)this + 64)
  {
    uint64_t result = 0;
    int v5 = 0;
    if (!a3) {
      goto LABEL_13;
    }
  }
  else
  {
    int v5 = 0;
    uint64_t result = 0;
    do
    {
      uint64_t v7 = *((void *)v4 + 2);
      int v8 = *(unsigned __int8 *)(v7 + 49);
      if (*(unsigned char *)(v7 + 49))
      {
        uint64_t result = *((void *)v4 + 2);
        int v9 = a2;
      }
      else
      {
        int v9 = 0;
      }
      v5 += v9;
      if (v8 && (a2 & 1) == 0) {
        break;
      }
      char v4 = (char *)*((void *)v4 + 1);
    }
    while (v4 != v3);
    if (!a3) {
      goto LABEL_13;
    }
  }
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "No outgoing best-path arc found");
    goto LABEL_18;
  }
LABEL_13:
  if (a2 && v5 >= 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "More than one outgoing best-path arc found");
LABEL_18:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return result;
}

void kaldi::WordHypLattice::~WordHypLattice(kaldi::WordHypLattice *this)
{
  uint64_t v2 = (void ***)*((void *)this + 5);
  float v3 = (void ***)*((void *)this + 6);
  while (v2 != v3)
  {
    if (*v2)
    {
      kaldi::WordHypLattice::Arc::~Arc(*v2);
      MEMORY[0x1B3EA8670]();
    }
    ++v2;
  }
  char v4 = (void **)*((void *)this + 2);
  int v5 = (void **)*((void *)this + 3);
  while (v4 != v5)
  {
    float v6 = *v4;
    if (*v4)
    {
      kaldi::CuVector<float>::~CuVector(v6 + 19);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v6 + 11));
      std::__list_imp<char *>::clear(v6 + 8);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v6 + 3));
      std::__list_imp<char *>::clear(v6);
      MEMORY[0x1B3EA8670](v6, 0x10A0C4094E47B5DLL);
    }
    ++v4;
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  uint64_t v7 = (void *)*((void *)this + 5);
  if (v7)
  {
    *((void *)this + 6) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 2);
  if (v8)
  {
    *((void *)this + 3) = v8;
    operator delete(v8);
  }
}

uint64_t kaldi::WordHypLattice::StringToCriteria(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *((unsigned __int8 *)a1 + 23);
    if (v1 != 4)
    {
      if (v1 != 12)
      {
        if (v1 != 13) {
          goto LABEL_31;
        }
        goto LABEL_16;
      }
      if (*a1 != 0x666E6F436E61654DLL || *((_DWORD *)a1 + 2) != 1752457552)
      {
LABEL_31:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "StringToCriteria unexpected string");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
      return 1;
    }
    if (*(_DWORD *)a1 != 1701736270) {
      goto LABEL_31;
    }
    return 0;
  }
  uint64_t v2 = a1[1];
  if (v2 == 4 && *(_DWORD *)*a1 == 1701736270) {
    return 0;
  }
  if (v2 == 12)
  {
    if (*(void *)*a1 == 0x666E6F436E61654DLL && *(_DWORD *)(*a1 + 8) == 1752457552) {
      return 1;
    }
    uint64_t v2 = a1[1];
  }
  if (v2 != 13) {
    goto LABEL_31;
  }
  a1 = (uint64_t *)*a1;
LABEL_16:
  if (*a1 != 0x736F436C61746F54 || *(uint64_t *)((char *)a1 + 5) != 0x6874615074736F43) {
    goto LABEL_31;
  }
  return 2;
}

void *kaldi::WordHypLattice::CriteriaToString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 >= 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "CriteriaToString unexpected string");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  uint64_t v2 = off_1E5FFEB60[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void kaldi::WordHypLattice::getWordHypLattice(uint64_t a1@<X2>, void *a2@<X8>)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  kaldi::TopSortCompactLatticeIfNeeded(a1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (v4)
  {
    int v5 = v4;
    std::vector<kaldi::WordHypLattice::Node *>::vector(v22, v4);
    if (v5 >= 1) {
      operator new();
    }
    float v6 = v22[0];
    uint64_t v7 = (char *)operator new(0x70uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)uint64_t v7 = &unk_1F0A5E928;
    v7[24] = 1;
    int v8 = (kaldi::WordHypLattice *)(v7 + 24);
    *((void *)v7 + 4) = *v6;
    *((void *)v7 + 13) = 0;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *a2 = v7 + 24;
    a2[1] = v7;
    kaldi::WordHypLattice::RecomputeTopSortedNodes((kaldi::WordHypLattice *)(v7 + 24));
    v28[0] = &unk_1F0A5A9C0;
    v28[3] = v28;
    v27[0] = &unk_1F0A5AA18;
    v27[3] = v27;
    std::string::basic_string[abi:ne180100]<0>(__p, "log_posterior");
    kaldi::WordHypLattice::RecomputeArcPosteriors((void *)v7 + 3, (uint64_t)v28, (uint64_t)v27, (uint64_t)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    std::__function::__value_func<double & ()(kaldi::WordHypLattice::Arc &)>::~__value_func[abi:ne180100](v27);
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v28);
    v26[0] = &unk_1F0A5AA70;
    v26[3] = v26;
    v25[0] = &unk_1F0A5AAC8;
    v25[3] = v25;
    std::string::basic_string[abi:ne180100]<0>(__p, "log_acoustic_posterior");
    kaldi::WordHypLattice::RecomputeArcPosteriors(v8, (uint64_t)v26, (uint64_t)v25, (uint64_t)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    std::__function::__value_func<double & ()(kaldi::WordHypLattice::Arc &)>::~__value_func[abi:ne180100](v25);
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v26);
    v24[0] = &unk_1F0A5AB20;
    void v24[3] = v24;
    v23[0] = &unk_1F0A5AB78;
    v23[3] = v23;
    std::string::basic_string[abi:ne180100]<0>(__p, "log_acoustic_posterior_2");
    kaldi::WordHypLattice::RecomputeArcPosteriors(v8, (uint64_t)v24, (uint64_t)v23, (uint64_t)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    std::__function::__value_func<double & ()(kaldi::WordHypLattice::Arc &)>::~__value_func[abi:ne180100](v23);
    std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v24);
    kaldi::WordHypLattice::RecomputeNodeGraphLogProbs(v8);
    kaldi::WordHypLattice::RecomputeBestPath(v8);
    kaldi::WordHypLattice::InitNodeAndArcTimestamps((uint64_t)v8);
    uint64_t v9 = *((void *)v7 + 5);
    uint64_t v10 = *((void *)v7 + 6);
    uint64_t v11 = v10 - v9;
    if (v10 != v9)
    {
      uint64_t v12 = 0;
      unint64_t v13 = v11 >> 3;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      do
      {
        *(_DWORD *)(*(void *)(v9 + 8 * v12) + 184) = v12;
        ++v12;
      }
      while (v13 != v12);
    }
    uint64_t v14 = *((void *)v7 + 8);
    uint64_t v15 = *((void *)v7 + 9);
    uint64_t v16 = v15 - v14;
    if (v15 != v14)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 >> 3;
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      do
      {
        *(_DWORD *)(*(void *)(v14 + 8 * v17) + 456) = v17;
        ++v17;
      }
      while (v18 != v17);
    }
    if (v22[0])
    {
      v22[1] = v22[0];
      operator delete(v22[0]);
    }
  }
  else
  {
    unint64_t v19 = operator new(0x70uLL);
    v19[1] = 0;
    v19[2] = 0;
    void *v19 = &unk_1F0A5E928;
    *((_OWORD *)v19 + 2) = 0u;
    *((_OWORD *)v19 + 3) = 0u;
    *((_OWORD *)v19 + 4) = 0u;
    *((_OWORD *)v19 + 5) = 0u;
    *((_OWORD *)v19 + 6) = 0u;
    a2[1] = v19;
    *((unsigned char *)v19 + ++*(_DWORD *)(result + 24) = 1;
    *a2 = v19 + 3;
  }
}

void sub_1B1D85058(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1D85090);
}

void sub_1B1D85088(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void *kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert(uint64_t *a1, void *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(a1 + 3, a2);
  if (!result)
  {
    float v6 = operator new(0x18uLL);
    _OWORD v6[2] = *a2;
    uint64_t v7 = *a1;
    *(void *)(v7 + 8) = v6;
    *a1 = (uint64_t)v6;
    *float v6 = v7;
    v6[1] = a1;
    ++a1[2];
    int v8 = v6;
    return std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,kaldi::WordHypLattice::Arc * const&,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>(v4, a2, a2, (uint64_t *)&v8);
  }
  return result;
}

void kaldi::WordHypLattice::RecomputeTopSortedNodes(kaldi::WordHypLattice *this)
{
  unint64_t v42 = (char **)((char *)this + 16);
  *((void *)this + 3) = *((void *)this + 2);
  int v1 = (char **)((char *)this + 40);
  *((void *)this + 6) = *((void *)this + 5);
  *(unsigned char *)this = 1;
  if (*((void *)this + 1))
  {
    v46[0] = 0;
    v46[1] = 0;
    v45 = (uint64_t *)v46;
    long long v44 = 0u;
    memset(v43, 0, sizeof(v43));
    std::deque<kaldi::WordHypLattice::Node *>::push_back(v43, (void *)this + 1);
    for (uint64_t i = *((void *)&v44 + 1); *((void *)&v44 + 1); uint64_t i = *((void *)&v44 + 1))
    {
      uint64_t v4 = *(void *)(*(void *)(*((void *)&v43[0] + 1) + (((unint64_t)v44 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v44 & 0x1FF));
      *(void *)&long long v44 = v44 + 1;
      *((void *)&v44 + 1) = i - 1;
      if ((unint64_t)v44 >= 0x400)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((void *)&v43[0] + 1) += 8;
        *(void *)&long long v44 = v44 - 512;
      }
      float v6 = (void *)*((void *)this + 3);
      unint64_t v5 = *((void *)this + 4);
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v8 = ((char *)v6 - *v42) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = v5 - (void)*v42;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 32, v11);
        }
        else {
          uint64_t v12 = 0;
        }
        unint64_t v13 = &v12[8 * v8];
        *(void *)unint64_t v13 = v4;
        uint64_t v7 = v13 + 8;
        uint64_t v15 = (char *)*((void *)this + 2);
        uint64_t v14 = (char *)*((void *)this + 3);
        if (v14 != v15)
        {
          do
          {
            uint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *((void *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          uint64_t v14 = *v42;
        }
        *((void *)this + 2) = v13;
        *((void *)this + 3) = v7;
        *((void *)this + 4) = &v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *float v6 = v4;
        uint64_t v7 = v6 + 1;
      }
      *((void *)this + 3) = v7;
      uint64_t v17 = v4 + 64;
      for (uint64_t j = *(void *)(v4 + 72); j != v17; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v20 = (void *)*((void *)this + 6);
        unint64_t v19 = *((void *)this + 7);
        if ((unint64_t)v20 >= v19)
        {
          uint64_t v22 = ((char *)v20 - *v1) >> 3;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v19 - (void)*v1;
          uint64_t v24 = v23 >> 2;
          if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
            uint64_t v24 = v22 + 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25) {
            long long v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 56, v25);
          }
          else {
            long long v26 = 0;
          }
          uint64_t v27 = &v26[8 * v22];
          *(void *)uint64_t v27 = *(void *)(j + 16);
          char v21 = v27 + 8;
          uint64_t v29 = (char *)*((void *)this + 5);
          unint64_t v28 = (char *)*((void *)this + 6);
          if (v28 != v29)
          {
            do
            {
              uint64_t v30 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v27 - 1) = v30;
              v27 -= 8;
            }
            while (v28 != v29);
            unint64_t v28 = *v1;
          }
          *((void *)this + 5) = v27;
          *((void *)this + 6) = v21;
          *((void *)this + 7) = &v26[8 * v25];
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *uint64_t v20 = *(void *)(j + 16);
          char v21 = v20 + 1;
        }
        *((void *)this + 6) = v21;
        uint64_t v31 = *(void *)(j + 16);
        unint64_t v32 = *(void *)(v31 + 8);
        std::locale v33 = v46[0];
        if (!v46[0]) {
          goto LABEL_48;
        }
        int v34 = v46;
        do
        {
          int v35 = v33;
          v36 = v34;
          unint64_t v37 = v33[4];
          v38 = v33 + 1;
          if (v37 >= v32)
          {
            v38 = v35;
            int v34 = (void **)v35;
          }
          std::locale v33 = (void *)*v38;
        }
        while (v33);
        if (v34 == v46) {
          goto LABEL_48;
        }
        if (v37 < v32) {
          int v35 = v36;
        }
        if (v32 < v35[4])
        {
LABEL_48:
          uint64_t v39 = *(void *)(v32 + 16);
          v47 = (void *)(v31 + 8);
          *((_DWORD *)std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,int>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,int>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,int>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(&v45, (unint64_t *)(v31 + 8), (uint64_t)&std::piecewise_construct, &v47)+ 10) = v39;
          uint64_t v31 = *(void *)(j + 16);
        }
        v47 = (void *)(v31 + 8);
        v40 = std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,int>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,int>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,int>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(&v45, (unint64_t *)(v31 + 8), (uint64_t)&std::piecewise_construct, &v47);
        int v41 = *((_DWORD *)v40 + 10) - 1;
        *((_DWORD *)v40 + 10) = v41;
        if (!v41) {
          std::deque<kaldi::WordHypLattice::Node *>::push_back(v43, (void *)(*(void *)(j + 16) + 8));
        }
      }
    }
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v43);
    std::__tree<int>::destroy((uint64_t)&v45, v46[0]);
  }
}

void sub_1B1D85498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void kaldi::WordHypLattice::RecomputeArcPosteriors(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1 + 1;
  if (a1[1])
  {
    float v6 = (unint64_t *)a1[2];
    uint64_t v7 = (unint64_t *)a1[3];
    if (v6 != v7)
    {
      v63[0] = 0;
      v63[1] = 0;
      v61[1] = 0;
      v62 = (uint64_t *)v63;
      v60 = (uint64_t *)v61;
      v61[0] = 0;
      do
      {
        std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,double>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,double>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,double>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::Node *&,double const&>(&v62, v6, (uint64_t *)v6, &kaldi::kLogZeroDouble);
        std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,double>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,double>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,double>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::Node *&,double const&>(&v60, v6, (uint64_t *)v6, &kaldi::kLogZeroDouble);
        ++v6;
      }
      while (v6 != v7);
      v59[0] = v4;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v4, (uint64_t)&std::piecewise_construct, v59)[5] = 0;
      unint64_t v11 = (uint64_t *)a1[2];
      uint64_t v12 = (uint64_t *)a1[3];
      if (v11 != v12)
      {
        do
        {
          uint64_t v13 = *v11 + 64;
          for (uint64_t i = *(void *)(*v11 + 72); i != v13; uint64_t i = *(void *)(i + 8))
          {
            uint64_t v15 = *(void *)(a2 + 24);
            if (!v15) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            double v16 = (*(double (**)(uint64_t, void))(*(void *)v15 + 48))(v15, *(void *)(i + 16));
            v59[0] = v11;
            double v17 = *((double *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v11, (uint64_t)&std::piecewise_construct, v59)+ 5);
            v59[0] = (uint64_t *)(*(void *)(i + 16) + 8);
            unint64_t v18 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59);
            double v19 = *((double *)v18 + 5);
            double v20 = v19 - (v17 - v16);
            double v21 = v17 - v16 - v19;
            BOOL v22 = v19 < v17 - v16;
            if (v19 >= v17 - v16) {
              double v23 = *((double *)v18 + 5);
            }
            else {
              double v23 = v17 - v16;
            }
            if (v22) {
              long double v24 = v20;
            }
            else {
              long double v24 = v21;
            }
            if (v24 >= -36.0436534)
            {
              long double v25 = exp(v24);
              double v23 = v23 + log1p(v25);
            }
            v59[0] = (uint64_t *)(*(void *)(i + 16) + 8);
            *((double *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59)+ 5) = v23;
          }
          ++v11;
        }
        while (v11 != v12);
        unint64_t v11 = (uint64_t *)a1[3];
      }
      v59[0] = v11 - 1;
      long long v26 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v11 - 1, (uint64_t)&std::piecewise_construct, v59);
      v59[0] = (uint64_t *)(a1[3] - 8);
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59)[5] = 0;
      uint64_t v27 = (uint64_t *)a1[2];
      unint64_t v28 = (uint64_t *)a1[3];
      while (v28 != v27)
      {
        uint64_t v30 = *--v28;
        uint64_t v29 = v30;
        uint64_t v31 = *(void *)(v30 + 8);
        if (v31 != v30)
        {
          do
          {
            uint64_t v32 = *(void *)(a2 + 24);
            if (!v32) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            double v33 = (*(double (**)(uint64_t, void))(*(void *)v32 + 48))(v32, *(void *)(v31 + 16));
            v59[0] = v28;
            double v34 = *((double *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v28, (uint64_t)&std::piecewise_construct, v59)+ 5);
            v59[0] = *(uint64_t **)(v31 + 16);
            int v35 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59);
            double v36 = v34 - v33;
            double v37 = *((double *)v35 + 5);
            if (v37 >= v36) {
              double v38 = *((double *)v35 + 5);
            }
            else {
              double v38 = v36;
            }
            if (v37 >= v36) {
              double v39 = v36 - v37;
            }
            else {
              double v39 = v37 - v36;
            }
            if (v39 >= -36.0436534)
            {
              long double v40 = exp(v39);
              double v38 = v38 + log1p(v40);
            }
            v59[0] = *(uint64_t **)(v31 + 16);
            *((double *)std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59)+ 5) = v38;
            v59[0] = *(uint64_t **)(v31 + 16);
            int v41 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v62, (unint64_t *)v59[0], (uint64_t)&std::piecewise_construct, v59);
            uint64_t v42 = *(void *)(a3 + 24);
            if (!v42) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            double v43 = *((double *)v41 + 5);
            double v44 = *((double *)v26 + 5);
            *(double *)(*(uint64_t (**)(uint64_t, void))(*(void *)v42 + 48))(v42, *(void *)(v31 + 16)) = v36 + v43 - v44;
            uint64_t v31 = *(void *)(v31 + 8);
          }
          while (v31 != v29);
          uint64_t v27 = (uint64_t *)a1[2];
        }
      }
      v59[0] = v28;
      v45 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v60, (unint64_t *)v28, (uint64_t)&std::piecewise_construct, v59);
      double v46 = *((double *)v26 + 5);
      float v47 = v46;
      float v48 = *((double *)v45 + 5);
      if (v47 != v48
        && (COERCE_INT(fabs(v47 - v48)) > 2139095039
         || fabsf(v47 - v48) > (float)((float)(fabsf(v47) + fabsf(v48)) * 0.00000001))
        && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
        int v49 = *(char *)(a4 + 23);
        if (v49 >= 0) {
          uint64_t v50 = a4;
        }
        else {
          uint64_t v50 = *(void *)a4;
        }
        if (v49 >= 0) {
          uint64_t v51 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          uint64_t v51 = *(void *)(a4 + 8);
        }
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v50, v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" Total forward probability over lattice = ", 42);
        v53 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", while total backward probability = ", 37);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
        double v46 = *((double *)v26 + 5);
      }
      if ((*(void *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
        int v54 = *(char *)(a4 + 23);
        if (v54 >= 0) {
          uint64_t v55 = a4;
        }
        else {
          uint64_t v55 = *(void *)a4;
        }
        if (v54 >= 0) {
          uint64_t v56 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          uint64_t v56 = *(void *)(a4 + 8);
        }
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v55, v56);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" Non-finite total probability in lattice (", 42);
        v58 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"). Numeric problems with model?", 31);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v59);
      }
      std::__tree<int>::destroy((uint64_t)&v60, v61[0]);
      std::__tree<int>::destroy((uint64_t)&v62, v63[0]);
    }
  }
}

void sub_1B1D85A38(uint64_t a1, ...)
{
  va_start(va, a1);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  JUMPOUT(0x1B1D85A78);
}

void sub_1B1D85A74(_Unwind_Exception *a1)
{
  std::__tree<int>::destroy(v1 - 168, *(void **)(v1 - 160));
  std::__tree<int>::destroy(v1 - 144, *(void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void kaldi::WordHypLattice::RecomputeNodeGraphLogProbs(kaldi::WordHypLattice *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    float v3 = (uint64_t *)*((void *)this + 2);
    uint64_t v4 = (uint64_t *)*((void *)this + 3);
    if (v3 != v4)
    {
      unint64_t v5 = (uint64_t *)*((void *)this + 2);
      do
      {
        uint64_t v6 = *v5++;
        *(void *)(v6 + 144) = 0xFFF0000000000000;
      }
      while (v5 != v4);
      *(void *)(v1 + 144) = 0;
      do
      {
        uint64_t v7 = *v3;
        uint64_t v8 = *v3 + 64;
        for (uint64_t i = *(void *)(*v3 + 72); i != v8; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v10 = *(void *)(i + 16);
          uint64_t v11 = *(void *)(v10 + 8);
          double v12 = *(double *)(v11 + 144);
          double v13 = *(double *)(v7 + 144) - *(double *)(v10 + 40);
          if (v12 >= v13) {
            double v14 = *(double *)(v11 + 144);
          }
          else {
            double v14 = *(double *)(v7 + 144) - *(double *)(v10 + 40);
          }
          if (v12 >= v13) {
            double v15 = v13 - v12;
          }
          else {
            double v15 = v12 - v13;
          }
          if (v15 >= -36.0436534)
          {
            long double v16 = exp(v15);
            double v14 = v14 + log1p(v16);
          }
          *(double *)(v11 + 144) = v14;
        }
        ++v3;
      }
      while (v3 != v4);
      double v17 = (void **)*((void *)this + 5);
      unint64_t v18 = (void **)*((void *)this + 6);
      while (v17 != v18)
      {
        double v19 = *v17++;
        v19[30] = *(void *)(*v19 + 144);
      }
    }
  }
}

void kaldi::WordHypLattice::RecomputeBestPath(kaldi::WordHypLattice *this)
{
  uint64_t v1 = (uint64_t **)((char *)this + 8);
  if (*((void *)this + 1))
  {
    float v3 = (uint64_t **)*((void *)this + 2);
    uint64_t v4 = (uint64_t **)*((void *)this + 3);
    if (v3 != v4)
    {
      v22[0] = 0;
      v22[1] = 0;
      double v21 = (uint64_t *)v22;
      do
      {
        unint64_t v5 = std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v3);
        *unint64_t v5 = (uint64_t *)0x7FF0000000000000;
        v5[1] = 0;
        ++v3;
      }
      while (v3 != v4);
      *std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v1) = 0;
      uint64_t v6 = (uint64_t **)*((void *)this + 2);
      uint64_t v7 = (uint64_t **)*((void *)this + 3);
      while (v6 != v7)
      {
        uint64_t v8 = (uint64_t)(*v6 + 8);
        for (uint64_t i = (*v6)[9]; i != v8; uint64_t i = *(void *)(i + 8))
        {
          double v10 = *(double *)std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v6);
          uint64_t v11 = *(void *)(i + 16);
          double v12 = *(double *)(v11 + 24);
          double v13 = *(double *)(v11 + 40);
          v20[0] = *(uint64_t **)(v11 + 8);
          double v14 = v10 + v12 + v13;
          if (v14 < *(double *)std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v20))
          {
            *(double *)std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v20) = v14;
            double v15 = *(uint64_t **)(i + 16);
            std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v20)[1] = v15;
          }
        }
        ++v6;
      }
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"best cost = ", 12);
        std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, (uint64_t **)(*((void *)this + 3) - 8));
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v20);
      }
      long double v16 = (uint64_t *)*((void *)this + 5);
      double v17 = (uint64_t *)*((void *)this + 6);
      while (v16 != v17)
      {
        uint64_t v18 = *v16++;
        *(unsigned char *)(v18 + 49) = 0;
      }
      v20[0] = *(uint64_t **)(*((void *)this + 3) - 8);
      if (v20[0] != *((uint64_t **)this + 1))
      {
        do
        {
          double v19 = std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](&v21, v20)[1];
          *((unsigned char *)v19 + 49) = 1;
          v20[0] = (uint64_t *)*v19;
        }
        while (v20[0] != *v1);
      }
      std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(v22[0]);
    }
  }
}

void sub_1B1D85D94(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::WordHypLattice::InitNodeAndArcTimestamps(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 16);
  uint64_t v2 = *(uint64_t **)(this + 24);
  while (v1 != v2)
  {
    this = kaldi::WordHypLattice::Node::setTimestamps(*v1);
    uint64_t v3 = *v1 + 64;
    uint64_t v4 = *(void *)(*v1 + 72);
    if (v4 != v3)
    {
      float v5 = *(float *)(*v1 + 140);
      do
      {
        *(float *)(*(void *)(v4 + 16) + 248) = *(float *)(*(void *)(v4 + 16) + 52) + v5;
        uint64_t v4 = *(void *)(v4 + 8);
      }
      while (v4 != v3);
    }
    ++v1;
  }
  return this;
}

uint64_t kaldi::WordHypLattice::ReassignNodeIds(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  uint64_t v2 = *(void *)(this + 24);
  uint64_t v3 = v2 - v1;
  if (v2 != v1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = v3 >> 3;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      *(_DWORD *)(*(void *)(v1 + 8 * v4) + 184) = v4;
      ++v4;
    }
    while (v5 != v4);
  }
  return this;
}

uint64_t kaldi::WordHypLattice::ReassignArcIds(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 40);
  uint64_t v2 = *(void *)(this + 48);
  uint64_t v3 = v2 - v1;
  if (v2 != v1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = v3 >> 3;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      *(_DWORD *)(*(void *)(v1 + 8 * v4) + 456) = v4;
      ++v4;
    }
    while (v5 != v4);
  }
  return this;
}

void kaldi::WordHypLattice::RetrieveConfidenceByTokens(kaldi::WordHypLattice *this@<X0>, uint64_t a2@<X8>)
{
  if (*((void *)this + 1) && *(unsigned char *)this)
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)a2 = a2 + 8;
    uint64_t v3 = *((void *)this + 5);
    for (uint64_t i = *((void *)this + 6); v3 != i; v3 += 8)
    {
      std::optional<std::string>::value_or[abi:ne180100]<std::string&>(*(void *)v3 + 464, *(void *)v3 + 264, &__p);
      p_p = &__p;
      unint64_t v5 = std::__tree<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<kaldi::TimestampsAndConfidence>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      uint64_t v6 = v5;
      float v7 = *(float *)(*(void *)v3 + 52);
      float v8 = *(float *)(*(void *)v3 + 248) - v7;
      uint64_t v9 = *(void *)(*(void *)v3 + 32);
      double v10 = (float *)v5[8];
      uint64_t v11 = (uint64_t)(v5 + 9);
      unint64_t v12 = v5[9];
      if ((unint64_t)v10 >= v12)
      {
        double v14 = (void **)(v5 + 7);
        double v15 = (float *)v5[7];
        uint64_t v16 = ((char *)v10 - (char *)v15) >> 4;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v12 - (void)v15;
        if (v18 >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          double v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v11, v19);
          double v15 = (float *)v6[7];
          double v10 = (float *)v6[8];
        }
        else
        {
          double v20 = 0;
        }
        double v21 = (float *)&v20[16 * v16];
        *double v21 = v8;
        v21[1] = v7;
        *((void *)v21 + 1) = v9;
        BOOL v22 = v21;
        if (v10 != v15)
        {
          do
          {
            *((_OWORD *)v22 - 1) = *((_OWORD *)v10 - 1);
            v22 -= 4;
            v10 -= 4;
          }
          while (v10 != v15);
          double v15 = (float *)*v14;
        }
        double v13 = v21 + 4;
        v6[7] = v22;
        v6[8] = v21 + 4;
        v6[9] = &v20[16 * v19];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *double v10 = v8;
        v10[1] = v7;
        double v13 = v10 + 4;
        *((void *)v10 + 1) = v9;
      }
      v6[8] = v13;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)a2 = a2 + 8;
  }
}

void sub_1B1D86084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(v15, *(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::map<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken,std::less<kaldi::WordHypLattice::Node *>,std::allocator<std::pair<kaldi::WordHypLattice::Node * const,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::operator[](uint64_t **a1, uint64_t **a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v3 = a1[1];
  unint64_t v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v3;
        unint64_t v7 = v3[4];
        if ((unint64_t)v5 >= v7) {
          break;
        }
        uint64_t v3 = *v6;
        uint64_t v4 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= (unint64_t)v5) {
        break;
      }
      uint64_t v3 = v6[1];
      if (!v3)
      {
        uint64_t v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_9:
    float v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x38uLL);
    v6[4] = v5;
    v6[5] = (uint64_t *)0x7FF0000000000000;
    v6[6] = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    _OWORD v6[2] = v8;
    *uint64_t v4 = (uint64_t *)v6;
    uint64_t v9 = (uint64_t *)**a1;
    double v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      double v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

kaldi::WordHypLattice::Node *kaldi::WordHypLattice::GetBestPath(void *a1, char **a2, uint64_t *a3)
{
  a2[1] = *a2;
  std::vector<std::string>::__clear[abi:ne180100](a3);
  uint64_t result = (kaldi::WordHypLattice::Node *)a1[1];
  if (result)
  {
    uint64_t v7 = a1[3];
    if (a1[2] != v7)
    {
      if (result != *(kaldi::WordHypLattice::Node **)(v7 - 8))
      {
        while (1)
        {
          uint64_t BestPathArc = kaldi::WordHypLattice::Node::FindBestPathArc(result, 1, 1);
          if (!BestPathArc) {
            break;
          }
          uint64_t v9 = BestPathArc;
          uint64_t v11 = a2[1];
          unint64_t v10 = (unint64_t)a2[2];
          if ((unint64_t)v11 >= v10)
          {
            double v13 = *a2;
            uint64_t v14 = (v11 - *a2) >> 2;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v16 = v10 - (void)v13;
            if (v16 >> 1 > v15) {
              unint64_t v15 = v16 >> 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
              double v13 = *a2;
              uint64_t v11 = a2[1];
            }
            else
            {
              uint64_t v18 = 0;
            }
            unint64_t v19 = &v18[4 * v14];
            *(_DWORD *)unint64_t v19 = *(_DWORD *)(v9 + 456);
            unint64_t v12 = v19 + 4;
            while (v11 != v13)
            {
              int v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            *a2 = v19;
            a2[1] = v12;
            a2[2] = &v18[4 * v17];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v11 = *(_DWORD *)(BestPathArc + 456);
            unint64_t v12 = v11 + 4;
          }
          a2[1] = v12;
          double v21 = (long long *)(v9 + 264);
          unint64_t v22 = a3[1];
          if (v22 >= a3[2])
          {
            uint64_t v23 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v21);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v21);
            uint64_t v23 = v22 + 24;
          }
          a3[1] = v23;
          uint64_t result = *(kaldi::WordHypLattice::Node **)(v9 + 8);
          if (result == *(kaldi::WordHypLattice::Node **)(a1[3] - 8)) {
            goto LABEL_25;
          }
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "arc != nullptr");
LABEL_33:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
      }
LABEL_25:
      long double v24 = (uint64_t *)a1[5];
      long double v25 = (uint64_t *)a1[6];
      if (v24 == v25)
      {
        int v26 = 0;
      }
      else
      {
        int v26 = 0;
        do
        {
          uint64_t v27 = *v24++;
          v26 += *(unsigned __int8 *)(v27 + 49);
        }
        while (v24 != v25);
      }
      if (v26 != (a2[1] - *a2) >> 2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Num arcs in best path =", 23);
        unint64_t v28 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" but num arcs marked =", 22);
        std::ostream::operator<<();
        goto LABEL_33;
      }
    }
  }
  return result;
}

void sub_1B1D863C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::WordHypLattice::GetBestMeanConfPath(void *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  v89 = (uint64_t **)(a1 + 1);
  if (a1[1] && a1[2] != a1[3] && a1[5] != a1[6])
  {
    v96[0] = 0;
    v96[1] = 0;
    v95 = (uint64_t *)v96;
    uint64_t v6 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v89);
    uint64_t v91 = a2;
    LODWORD(v94[0]) = 0;
    *std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>::operator[](v6, (int *)v94) = 0;
    uint64_t v7 = (uint64_t **)a1[2];
    float v8 = (uint64_t **)a1[3];
    v86 = a1;
    v88 = v8;
    while (v7 != v8)
    {
      uint64_t v9 = (*v7)[9];
      uint64_t v92 = (uint64_t)(*v7 + 8);
      if (v9 != v92)
      {
        while (1)
        {
          unint64_t v10 = v7;
          uint64_t v11 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v7);
          double v13 = v11 + 1;
          unint64_t v12 = *v11;
          if (*v11 != (uint64_t *)(v11 + 1)) {
            break;
          }
LABEL_41:
          uint64_t v9 = *(void *)(v9 + 8);
          uint64_t v7 = v10;
          if (v9 == v92) {
            goto LABEL_42;
          }
        }
        while (2)
        {
          double v14 = *((double *)v12 + 5);
          uint64_t v15 = *(void *)(v9 + 16);
          double v16 = *(double *)(v15 + 32);
          v94[0] = *(uint64_t **)(v15 + 8);
          int v17 = *((_DWORD *)v12 + 8);
          uint64_t v18 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v94);
          int v19 = v17 + 1;
          unint64_t v22 = v18[1];
          int v20 = v18 + 1;
          uint64_t v21 = (uint64_t)v22;
          if (!v22) {
            goto LABEL_18;
          }
          uint64_t v23 = (uint64_t)v20;
          do
          {
            int v24 = *(_DWORD *)(v21 + 32);
            BOOL v25 = v24 <= v17;
            if (v24 <= v17) {
              int v26 = (uint64_t *)(v21 + 8);
            }
            else {
              int v26 = (uint64_t *)v21;
            }
            if (!v25) {
              uint64_t v23 = v21;
            }
            uint64_t v21 = *v26;
          }
          while (*v26);
          if ((uint64_t **)v23 == v20 || v19 < *(_DWORD *)(v23 + 32)) {
LABEL_18:
          }
            uint64_t v23 = (uint64_t)v20;
          double v27 = v14 + v16;
          if ((uint64_t **)v23 == std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v94)+ 1)
          {
            uint64_t v29 = *(void *)(v9 + 16);
            uint64_t v30 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v94);
            uint64_t v31 = v30;
            double v33 = v30 + 1;
            uint64_t v32 = v30[1];
            if (v32)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v23 = (uint64_t)v32;
                  int v34 = *((_DWORD *)v32 + 8);
                  if (v19 >= v34) {
                    break;
                  }
                  uint64_t v32 = *(uint64_t **)v23;
                  double v33 = (uint64_t **)v23;
                  if (!*(void *)v23) {
                    goto LABEL_33;
                  }
                }
                if (v34 > v17) {
                  break;
                }
                uint64_t v32 = *(uint64_t **)(v23 + 8);
                if (!v32)
                {
                  double v33 = (uint64_t **)(v23 + 8);
                  goto LABEL_33;
                }
              }
            }
            else
            {
              uint64_t v23 = (uint64_t)(v30 + 1);
LABEL_33:
              int v35 = operator new(0x38uLL);
              v35[8] = v19;
              *((void *)v35 + 5) = 0xFFF0000000000000;
              *((void *)v35 + 6) = 0;
              std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v31, v23, v33, (uint64_t *)v35);
              uint64_t v23 = (uint64_t)v35;
            }
          }
          else
          {
            double v28 = *(double *)(v23 + 40);
            if (v27 > v28)
            {
              uint64_t v29 = *(void *)(v9 + 16);
              break;
            }
            if (v27 != v28 || (uint64_t v29 = *(void *)(v9 + 16), !*(unsigned char *)(v29 + 49)))
            {
LABEL_35:
              double v36 = (uint64_t *)v12[1];
              if (v36)
              {
                do
                {
                  double v37 = v36;
                  double v36 = (uint64_t *)*v36;
                }
                while (v36);
              }
              else
              {
                do
                {
                  double v37 = (uint64_t *)v12[2];
                  BOOL v38 = *v37 == (void)v12;
                  unint64_t v12 = v37;
                }
                while (!v38);
              }
              unint64_t v12 = v37;
              if (v37 == (uint64_t *)v13) {
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        *(double *)(v23 + 40) = v27;
        *(void *)(v23 + 48) = v29;
        goto LABEL_35;
      }
LABEL_42:
      ++v7;
      float v8 = v88;
    }
    double v39 = (uint64_t *)v86[5];
    long double v40 = (uint64_t *)v86[6];
    while (v39 != v40)
    {
      uint64_t v41 = *v39++;
      *(unsigned char *)(v41 + 48) = 0;
    }
    uint64_t v42 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, (uint64_t **)(v86[3] - 8));
    double v44 = v42 + 1;
    double v43 = *v42;
    if (*v42 == (uint64_t *)(v42 + 1))
    {
      int v45 = 0;
    }
    else
    {
      int v45 = 0;
      int v46 = kaldi::g_kaldi_verbose_level;
      double v47 = -INFINITY;
      do
      {
        int v48 = *((_DWORD *)v43 + 8);
        double v49 = *((double *)v43 + 5) / (double)v48;
        if (v46 >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"path len=", 9);
          uint64_t v50 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" mean conf=", 11);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94);
          int v46 = kaldi::g_kaldi_verbose_level;
          int v48 = *((_DWORD *)v43 + 8);
        }
        if (v49 > v47)
        {
          double v47 = v49;
          int v45 = v48;
        }
        uint64_t v51 = (uint64_t *)v43[1];
        if (v51)
        {
          do
          {
            v52 = v51;
            uint64_t v51 = (uint64_t *)*v51;
          }
          while (v51);
        }
        else
        {
          do
          {
            v52 = (uint64_t *)v43[2];
            BOOL v38 = *v52 == (void)v43;
            double v43 = v52;
          }
          while (!v38);
        }
        double v43 = v52;
      }
      while (v52 != (uint64_t *)v44);
    }
    *a4 = 0;
    v94[0] = *(uint64_t **)(v86[3] - 8);
    if (v94[0] != (uint64_t *)v86[1])
    {
      do
      {
        v53 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v95, v94);
        int v93 = v45;
        int v54 = std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>::operator[](v53, &v93);
        uint64_t v55 = v54[1];
        *((unsigned char *)v55 + 48) = 1;
        v57 = *(_DWORD **)(v91 + 8);
        unint64_t v56 = *(void *)(v91 + 16);
        if ((unint64_t)v57 >= v56)
        {
          v59 = *(_DWORD **)v91;
          uint64_t v60 = ((uint64_t)v57 - *(void *)v91) >> 2;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v62 = v56 - (void)v59;
          if (v62 >> 1 > v61) {
            unint64_t v61 = v62 >> 1;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v63)
          {
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v91 + 16, v63);
            v59 = *(_DWORD **)v91;
            v57 = *(_DWORD **)(v91 + 8);
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[4 * v60];
          *(_DWORD *)v65 = *((_DWORD *)v55 + 114);
          v58 = v65 + 4;
          while (v57 != v59)
          {
            int v66 = *--v57;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          *(void *)uint64_t v91 = v65;
          *(void *)(v91 + 8) = v58;
          *(void *)(v91 + 16) = &v64[4 * v63];
          if (v59) {
            operator delete(v59);
          }
        }
        else
        {
          _DWORD *v57 = *((_DWORD *)v55 + 114);
          v58 = v57 + 1;
        }
        *(void *)(v91 + 8) = v58;
        v67 = (long long *)(v54[1] + 33);
        unint64_t v68 = a3[1];
        if (v68 >= a3[2])
        {
          uint64_t v69 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v67);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v67);
          uint64_t v69 = v68 + 24;
        }
        a3[1] = v69;
        v70 = v54[1];
        if (*((_DWORD *)v70 + 115) == 1) {
          ++*a4;
        }
        --v45;
        v94[0] = (uint64_t *)*v70;
      }
      while (v94[0] != *v89);
    }
    v71 = *(_DWORD **)v91;
    uint64_t v72 = *(void *)(v91 + 8);
    v73 = (_DWORD *)(v72 - 4);
    if (*(void *)v91 != v72 && v73 > v71)
    {
      unint64_t v75 = (unint64_t)(v71 + 1);
      do
      {
        int v76 = *(_DWORD *)(v75 - 4);
        *(_DWORD *)(v75 - 4) = *v73;
        *v73-- = v76;
        BOOL v77 = v75 >= (unint64_t)v73;
        v75 += 4;
      }
      while (!v77);
    }
    unint64_t v78 = *a3;
    uint64_t v79 = a3[1];
    unint64_t v80 = v79 - 24;
    if (*a3 != v79 && v80 > v78)
    {
      unint64_t v82 = v78 + 24;
      do
      {
        uint64_t v83 = *(void *)(v82 - 8);
        long long v84 = *(_OWORD *)(v82 - 24);
        uint64_t v85 = *(void *)(v80 + 16);
        *(_OWORD *)(v82 - ++*(_DWORD *)(result + 24) = *(_OWORD *)v80;
        *(void *)(v82 - 8) = v85;
        *(_OWORD *)unint64_t v80 = v84;
        *(void *)(v80 + 16) = v83;
        v80 -= 24;
        BOOL v77 = v82 >= v80;
        v82 += 24;
      }
      while (!v77);
    }
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(v96[0]);
  }
}

void sub_1B1D86990(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(*(void **)(v1 - 160));
  _Unwind_Resume(a1);
}

uint64_t **std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](uint64_t **a1, uint64_t **a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v3 = a1[1];
  unint64_t v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v3;
        unint64_t v7 = v3[4];
        if ((unint64_t)v5 >= v7) {
          break;
        }
        uint64_t v3 = *v6;
        uint64_t v4 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= (unint64_t)v5) {
        break;
      }
      uint64_t v3 = v6[1];
      if (!v3)
      {
        uint64_t v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_9:
    float v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x40uLL);
    v6[7] = 0;
    v6[6] = 0;
    v6[4] = v5;
    v6[5] = (uint64_t *)(v6 + 6);
    *uint64_t v6 = 0;
    v6[1] = 0;
    _OWORD v6[2] = v8;
    *uint64_t v4 = (uint64_t *)v6;
    uint64_t v9 = (uint64_t *)**a1;
    unint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      unint64_t v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

uint64_t **std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>::operator[](uint64_t **a1, int *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v3 = a1[1];
  int v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v3;
        int v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7) {
          break;
        }
        uint64_t v3 = *v6;
        uint64_t v4 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= v5) {
        break;
      }
      uint64_t v3 = v6[1];
      if (!v3)
      {
        uint64_t v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_9:
    float v8 = operator new(0x38uLL);
    v8[8] = v5;
    *((void *)v8 + 5) = 0xFFF0000000000000;
    *((void *)v8 + 6) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v4, (uint64_t *)v8);
    uint64_t v6 = (uint64_t **)v8;
  }
  return v6 + 5;
}

void *kaldi::WordHypLattice::GetNBestPath(void *a1, uint64_t *a2, int a3, unsigned int a4)
{
  void v23[4] = *MEMORY[0x1E4F143B8];
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    float v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"GetNBestPath: criteria ", 23);
    kaldi::WordHypLattice::CriteriaToString(a4, __p);
    if ((v20 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      uint64_t v10 = v20;
    }
    else {
      uint64_t v10 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v21);
  }
  if (a4 == 2)
  {
    v22[0] = &unk_1F0A5A968;
    v22[3] = v22;
    kaldi::WordHypLattice::GetNbestPath(a1, a2, a3, (uint64_t)v22, 0);
    return std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v22);
  }
  else
  {
    if (a4 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v21, "GetNBestPath unexpected criteria");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
    }
    uint64_t v11 = (uint64_t *)a1[5];
    unint64_t v12 = (uint64_t *)a1[6];
    while (v11 != v12)
    {
      uint64_t v13 = *v11++;
      *(unsigned char *)(v13 + 48) = 0;
    }
    v23[0] = &unk_1F0A5A910;
    v23[3] = v23;
    kaldi::WordHypLattice::GetNbestPath(a1, a2, a3, (uint64_t)v23, 1);
    uint64_t result = std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](v23);
    uint64_t v15 = *a2;
    if (*a2 != a2[1])
    {
      double v16 = *(uint64_t **)v15;
      for (uint64_t i = *(uint64_t **)(v15 + 8); v16 != i; *(unsigned char *)(v18 + 48) = 1)
        uint64_t v18 = *v16++;
    }
  }
  return result;
}

void sub_1B1D86D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::WordHypLattice::GetNbestPath(void *a1, uint64_t *a2, int a3, uint64_t a4, int a5)
{
  int v5 = (uint64_t **)(a1 + 1);
  if (a1[1])
  {
    uint64_t v6 = a1;
    if (a1[2] != a1[3] && a1[5] != a1[6])
    {
      int64x2_t v140 = 0uLL;
      v141[0] = 0;
      v139[0] = 0;
      v139[1] = 0;
      v138 = (uint64_t *)v139;
      v137[0] = 0;
      v137[1] = 0;
      v136 = (uint64_t *)v137;
      float v8 = (char *)operator new(0x38uLL);
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *(void *)float v8 = &unk_1F0A62CC0;
      *(_OWORD *)(v8 + ++*(_DWORD *)(result + 24) = 0u;
      *(_OWORD *)(v8 + 40) = 0u;
      v144 = v141;
      uint64_t v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(1uLL);
      *uint64_t v9 = v8 + 24;
      v9[1] = v8;
      uint64_t v11 = (void *)v140.i64[1];
      unint64_t v12 = (void *)v140.i64[0];
      if (v140.i64[1] == v140.i64[0])
      {
        int64x2_t v15 = vdupq_n_s64(v140.u64[1]);
        uint64_t v13 = v9;
      }
      else
      {
        uint64_t v13 = v9;
        do
        {
          long long v14 = *((_OWORD *)v11 - 1);
          v11 -= 2;
          *((_OWORD *)v13 - 1) = v14;
          v13 -= 2;
          *uint64_t v11 = 0;
          v11[1] = 0;
        }
        while (v11 != v12);
        int64x2_t v15 = v140;
      }
      v116 = a2;
      double v16 = v9 + 2;
      v140.i64[0] = (uint64_t)v13;
      v140.i64[1] = (uint64_t)(v9 + 2);
      *(int64x2_t *)&v142[8] = v15;
      uint64_t v17 = v141[0];
      v141[0] = &v9[2 * v10];
      uint64_t v143 = v17;
      *(void *)v142 = v15.i64[0];
      std::__split_buffer<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::~__split_buffer((uint64_t)v142);
      v140.i64[1] = (uint64_t)v16;
      uint64_t v18 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v138, v5);
      int v19 = v18[1];
      unsigned __int8 v20 = v18 + 1;
      uint64_t v21 = (uint64_t *)(v18 + 1);
      if (v19)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v21 = v19;
            int v22 = *((_DWORD *)v19 + 8);
            if (v22 < 1) {
              break;
            }
            int v19 = (uint64_t *)*v21;
            unsigned __int8 v20 = (uint64_t **)v21;
            if (!*v21) {
              goto LABEL_16;
            }
          }
          if ((v22 & 0x80000000) == 0) {
            break;
          }
          int v19 = (uint64_t *)v21[1];
          if (!v19)
          {
            unsigned __int8 v20 = (uint64_t **)(v21 + 1);
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        uint64_t v23 = operator new(0x40uLL);
        *(void *)&v142[8] = v18 + 1;
        v23[8] = 0;
        *((void *)v23 + 6) = 0;
        *((void *)v23 + 7) = 0;
        *((void *)v23 + 5) = 0;
        v142[16] = 1;
        std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v18, (uint64_t)v21, v20, (uint64_t *)v23);
        *(void *)v142 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v142);
        uint64_t v21 = (uint64_t *)v23;
      }
      uint64_t v24 = *(void *)(v140.i64[1] - 8);
      *(void *)&long long v135 = *(void *)(v140.i64[1] - 16);
      *((void *)&v135 + 1) = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push(v21 + 5, &v135, a3);
      if (*((void *)&v135 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v135 + 1));
      }
      BOOL v25 = (uint64_t **)v6[2];
      v115 = (uint64_t **)v6[3];
      if (v25 != v115)
      {
        v117 = v6;
        do
        {
          uint64_t v26 = (*v25)[9];
          uint64_t v118 = (uint64_t)(*v25 + 8);
          for (i = v25; v26 != v118; uint64_t v6 = v117)
          {
            v122 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v138, (uint64_t **)(*(void *)(v26 + 16) + 8));
            double v27 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v138, v25);
            double v28 = *v27;
            if (*v27 != (uint64_t *)(v27 + 1))
            {
              uint64_t v29 = v122 + 1;
              uint64_t v124 = v26;
              v121 = v27 + 1;
              do
              {
                int v30 = *((_DWORD *)v28 + 8);
                LODWORD(__p) = v30;
                uint64_t v31 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v136, v25);
                int v34 = v31[1];
                uint64_t v32 = v31 + 1;
                double v33 = v34;
                if (!v34) {
                  goto LABEL_36;
                }
                int v35 = v32;
                do
                {
                  int v36 = *((_DWORD *)v33 + 8);
                  BOOL v37 = v36 < v30;
                  if (v36 >= v30) {
                    BOOL v38 = (uint64_t **)v33;
                  }
                  else {
                    BOOL v38 = (uint64_t **)(v33 + 1);
                  }
                  if (!v37) {
                    int v35 = (uint64_t **)v33;
                  }
                  double v33 = *v38;
                }
                while (*v38);
                if (v35 == v32 || v30 < *((_DWORD *)v35 + 8)) {
LABEL_36:
                }
                  int v35 = v32;
                if (v35 == std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v136, v25)+ 1)
                {
                  kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::get_sorted((uint64_t)(v28 + 5), (unint64_t *)v142);
                  double v39 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v136, v25);
                  long double v40 = (uint64_t *)std::map<int,std::vector<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>::operator[](v39, (int *)&__p);
                  uint64_t v41 = v40;
                  if (*v40)
                  {
                    std::vector<std::shared_ptr<quasar::LmeContainer>>::__clear[abi:ne180100](v40);
                    operator delete((void *)*v41);
                    uint64_t *v41 = 0;
                    v41[1] = 0;
                    v41[2] = 0;
                  }
                  *(_OWORD *)uint64_t v41 = *(_OWORD *)v142;
                  v41[2] = *(void *)&v142[16];
                  memset(v142, 0, sizeof(v142));
                  v132 = (void **)v142;
                  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v132);
                }
                uint64_t v42 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v136, v25);
                double v43 = std::map<int,std::vector<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>::operator[](v42, (int *)&__p);
                double v44 = *v43;
                v126 = v43[1];
                if (*v43 != v126)
                {
                  int v45 = v30 + 1;
                  while (1)
                  {
                    int v46 = (double *)*v44;
                    double v47 = (std::__shared_weak_count *)v44[1];
                    if (v47) {
                      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    uint64_t v48 = *(void *)(a4 + 24);
                    if (!v48) {
                      std::__throw_bad_function_call[abi:ne180100]();
                    }
                    double v49 = *v46;
                    double v50 = (*(double (**)(uint64_t, void))(*(void *)v48 + 48))(v48, *(void *)(v26 + 16));
                    uint64_t v51 = operator new(0x38uLL);
                    v52 = v51;
                    double v53 = v49 + v50;
                    v51[1] = 0;
                    v51[2] = 0;
                    *uint64_t v51 = &unk_1F0A62CC0;
                    uint64_t v54 = *(void *)(v26 + 16);
                    if (v47)
                    {
                      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                      *((double *)v51 + 3) = v53;
                      v51[4] = v54;
                      v51[5] = v46;
                      v51[6] = v47;
                      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                    }
                    else
                    {
                      *((double *)v51 + 3) = v53;
                      v51[4] = v54;
                      v51[5] = v46;
                      v51[6] = 0;
                    }
                    uint64_t v55 = v52 + 3;
                    uint64_t v56 = v140.i64[1];
                    if (v140.i64[1] >= v141[0])
                    {
                      uint64_t v58 = (v140.i64[1] - v140.i64[0]) >> 4;
                      unint64_t v59 = v58 + 1;
                      if ((unint64_t)(v58 + 1) >> 60) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v60 = v141[0] - v140.i64[0];
                      if ((v141[0] - v140.i64[0]) >> 3 > v59) {
                        unint64_t v59 = v60 >> 3;
                      }
                      unint64_t v61 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v59;
                      v144 = v141;
                      uint64_t v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(v61);
                      v64 = &v62[16 * v58];
                      *(void *)v64 = v55;
                      *((void *)v64 + 1) = v52;
                      v65 = (void *)v140.i64[1];
                      int v66 = (void *)v140.i64[0];
                      if (v140.i64[1] == v140.i64[0])
                      {
                        int64x2_t v69 = vdupq_n_s64(v140.u64[1]);
                        v67 = &v62[16 * v58];
                      }
                      else
                      {
                        v67 = &v62[16 * v58];
                        do
                        {
                          long long v68 = *((_OWORD *)v65 - 1);
                          v65 -= 2;
                          *((_OWORD *)v67 - 1) = v68;
                          v67 -= 16;
                          void *v65 = 0;
                          v65[1] = 0;
                        }
                        while (v65 != v66);
                        int64x2_t v69 = v140;
                      }
                      v57 = v64 + 16;
                      v140.i64[0] = (uint64_t)v67;
                      v140.i64[1] = (uint64_t)(v64 + 16);
                      *(int64x2_t *)&v142[8] = v69;
                      uint64_t v70 = v141[0];
                      v141[0] = &v62[16 * v63];
                      uint64_t v143 = v70;
                      *(void *)v142 = v69.i64[0];
                      std::__split_buffer<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::~__split_buffer((uint64_t)v142);
                    }
                    else
                    {
                      *(void *)v140.i64[1] = v55;
                      *(void *)(v56 + 8) = v52;
                      v57 = (void *)(v56 + 16);
                    }
                    v140.i64[1] = (uint64_t)v57;
                    v71 = *v29;
                    uint64_t v72 = v122 + 1;
                    v73 = (uint64_t *)(v122 + 1);
                    if (*v29)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v73 = v71;
                          int v74 = *((_DWORD *)v71 + 8);
                          if (v45 >= v74) {
                            break;
                          }
                          v71 = (uint64_t *)*v73;
                          uint64_t v72 = (uint64_t **)v73;
                          if (!*v73) {
                            goto LABEL_70;
                          }
                        }
                        if (v74 > v30) {
                          break;
                        }
                        v71 = (uint64_t *)v73[1];
                        if (!v71)
                        {
                          uint64_t v72 = (uint64_t **)(v73 + 1);
                          goto LABEL_70;
                        }
                      }
                    }
                    else
                    {
LABEL_70:
                      unint64_t v75 = operator new(0x40uLL);
                      *(void *)&v142[8] = v122 + 1;
                      v75[8] = v45;
                      *((void *)v75 + 6) = 0;
                      *((void *)v75 + 7) = 0;
                      *((void *)v75 + 5) = 0;
                      v142[16] = 1;
                      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v122, (uint64_t)v73, v72, (uint64_t *)v75);
                      *(void *)v142 = 0;
                      std::unique_ptr<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)v142);
                      v57 = (void *)v140.i64[1];
                      v73 = (uint64_t *)v75;
                    }
                    *(void *)&long long v134 = *(v57 - 2);
                    uint64_t v76 = *(v57 - 1);
                    *((void *)&v134 + 1) = v76;
                    if (v76) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
                    }
                    uint64_t v26 = v124;
                    char v77 = kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push(v73 + 5, &v134, a3);
                    if (*((void *)&v134 + 1)) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v134 + 1));
                    }
                    if ((v77 & 1) == 0) {
                      break;
                    }
                    if (v47) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                    }
                    v44 += 2;
                    if (v44 == v126) {
                      goto LABEL_84;
                    }
                  }
                  uint64_t v78 = v140.i64[1];
                  uint64_t v79 = *(std::__shared_weak_count **)(v140.i64[1] - 8);
                  if (v79) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
                  }
                  v140.i64[1] = v78 - 16;
                  if (v47) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
                  }
                }
LABEL_84:
                unint64_t v80 = (uint64_t *)v28[1];
                if (v80)
                {
                  do
                  {
                    v81 = v80;
                    unint64_t v80 = (uint64_t *)*v80;
                  }
                  while (v80);
                }
                else
                {
                  do
                  {
                    v81 = (uint64_t *)v28[2];
                    BOOL v82 = *v81 == (void)v28;
                    double v28 = v81;
                  }
                  while (!v82);
                }
                double v28 = v81;
                BOOL v25 = i;
              }
              while (v81 != (uint64_t *)v121);
            }
            uint64_t v26 = *(void *)(v26 + 8);
          }
          ++v25;
        }
        while (v25 != v115);
        BOOL v25 = (uint64_t **)v6[3];
      }
      memset(v142, 0, sizeof(v142));
      uint64_t v83 = std::map<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>::operator[](&v138, v25 - 1);
      uint64_t v85 = v83 + 1;
      long long v84 = *v83;
      if (*v83 != (uint64_t *)(v83 + 1))
      {
        do
        {
          kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::get_sorted((uint64_t)(v84 + 5), (unint64_t *)&v132);
          v86 = v132;
          v87 = v133;
          while (v86 != v87)
          {
            v88 = (double *)*v86;
            v89 = (std::__shared_weak_count *)v86[1];
            if (v89) {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (a5) {
              double *v88 = *v88 / (double)*((int *)v84 + 8);
            }
            *(void *)&long long v131 = v88;
            *((void *)&v131 + 1) = v89;
            if (v89) {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push((uint64_t *)v142, &v131, a3);
            if (v89)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v89);
              std::__shared_weak_count::__release_shared[abi:ne180100](v89);
            }
            v86 += 2;
          }
          std::string __p = &v132;
          std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          v90 = (uint64_t *)v84[1];
          if (v90)
          {
            do
            {
              uint64_t v91 = v90;
              v90 = (uint64_t *)*v90;
            }
            while (v90);
          }
          else
          {
            do
            {
              uint64_t v91 = (uint64_t *)v84[2];
              BOOL v82 = *v91 == (void)v84;
              long long v84 = v91;
            }
            while (!v82);
          }
          long long v84 = v91;
        }
        while (v91 != (uint64_t *)v85);
      }
      kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::get_sorted((uint64_t)v142, (unint64_t *)&v132);
      uint64_t v92 = v132;
      for (uint64_t j = v133; v92 != j; v92 += 2)
      {
        v94 = *v92;
        int v93 = (std::__shared_weak_count *)v92[1];
        if (v93) {
          atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v129 = 0;
        v130 = 0;
        std::string __p = 0;
        v95 = v94 + 2;
        if (v94[2])
        {
          do
          {
            uint64_t v96 = v94[1];
            v97 = v129;
            if (v129 >= v130)
            {
              uint64_t v99 = (v129 - (unsigned char *)__p) >> 3;
              if ((unint64_t)(v99 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v100 = (v130 - (unsigned char *)__p) >> 2;
              if (v100 <= v99 + 1) {
                unint64_t v100 = v99 + 1;
              }
              if ((unint64_t)(v130 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v101 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v101 = v100;
              }
              if (v101) {
                v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v130, v101);
              }
              else {
                v102 = 0;
              }
              v103 = &v102[8 * v99];
              *(void *)v103 = v96;
              v98 = v103 + 8;
              v105 = (char *)__p;
              v104 = v129;
              if (v129 != __p)
              {
                do
                {
                  uint64_t v106 = *((void *)v104 - 1);
                  v104 -= 8;
                  *((void *)v103 - 1) = v106;
                  v103 -= 8;
                }
                while (v104 != v105);
                v104 = (char *)__p;
              }
              std::string __p = v103;
              v129 = v98;
              v130 = &v102[8 * v101];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              *(void *)v129 = v96;
              v98 = v97 + 8;
            }
            v129 = v98;
            v107 = (void *)*v95;
            v108 = (std::__shared_weak_count *)v94[3];
            if (v108) {
              atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
            v95 = v107 + 2;
            v94 = v107;
            int v93 = v108;
          }
          while (v107[2]);
          if (__p != v129)
          {
            v109 = v129 - 8;
            if (v129 - 8 > __p)
            {
              v110 = (char *)__p + 8;
              do
              {
                uint64_t v111 = *((void *)v110 - 1);
                *((void *)v110 - 1) = *(void *)v109;
                *(void *)v109 = v111;
                v109 -= 8;
                BOOL v112 = v110 >= v109;
                v110 += 8;
              }
              while (!v112);
            }
          }
          int v93 = v108;
        }
        unint64_t v113 = v116[1];
        if (v113 >= v116[2])
        {
          uint64_t v114 = std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__push_back_slow_path<std::vector<kaldi::WordHypLattice::Arc *> const&>(v116, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::WordHypLattice::Arc *> const&>((uint64_t)v116, (uint64_t)&__p);
          uint64_t v114 = v113 + 24;
        }
        v116[1] = v114;
        if (__p)
        {
          v129 = (char *)__p;
          operator delete(__p);
        }
        if (v93) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v93);
        }
      }
      std::string __p = &v132;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v132 = (void **)v142;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v132);
      std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(v137[0]);
      std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(v139[0]);
      *(void *)v142 = &v140;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v142);
    }
  }
}

void sub_1B1D87794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  std::string __p = (void *)(v36 - 160);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(a36);
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(*(void **)(v36 - 208));
  *(void *)(v36 - 216) = v36 - 192;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 216));
  _Unwind_Resume(a1);
}

uint64_t kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::push(uint64_t *a1, long long *a2, int a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)a1[1];
  uint64_t v7 = (uint64_t)v6 - *a1;
  uint64_t v8 = v7 >> 4;
  if (v7 >> 4 >= (unint64_t)a3)
  {
    uint64_t v9 = *(double **)v5;
    double v10 = **(double **)v5;
    double v11 = **(double **)a2;
    if (v10 >= v11 && (v10 != v11 || !*(unsigned char *)(*(void *)(*(void *)a2 + 8) + 49))) {
      return 0;
    }
    if (v7 >= 17)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(v5 + 8);
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      uint64_t v14 = v5;
      do
      {
        uint64_t v15 = v14 + 16 * v12 + 16;
        uint64_t v16 = 2 * v12;
        uint64_t v12 = (2 * v12) | 1;
        uint64_t v17 = v16 + 2;
        if (v17 < v8 && **(double **)v15 > **(double **)(v15 + 16))
        {
          v15 += 16;
          uint64_t v12 = v17;
        }
        long long v18 = *(_OWORD *)v15;
        *(void *)uint64_t v15 = 0;
        *(void *)(v15 + 8) = 0;
        int v19 = *(std::__shared_weak_count **)(v14 + 8);
        *(_OWORD *)uint64_t v14 = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        uint64_t v14 = v15;
      }
      while (v12 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
      if ((void *)v15 == v6 - 2)
      {
        uint64_t v24 = *(std::__shared_weak_count **)(v15 + 8);
        *(void *)uint64_t v15 = v9;
        *(void *)(v15 + 8) = v13;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
      }
      else
      {
        long long v20 = *((_OWORD *)v6 - 1);
        *(v6 - 2) = 0;
        *(v6 - 1) = 0;
        uint64_t v21 = *(std::__shared_weak_count **)(v15 + 8);
        *(_OWORD *)uint64_t v15 = v20;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        int v22 = (std::__shared_weak_count *)*(v6 - 1);
        *(v6 - 2) = v9;
        *(v6 - 1) = v13;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::__wrap_iter<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>>(v5, v15 + 16, (v15 + 16 - v5) >> 4);
      }
    }
    uint64_t v25 = a1[1];
    uint64_t v26 = *(std::__shared_weak_count **)(v25 - 8);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    uint64_t v6 = (void *)(v25 - 16);
    a1[1] = v25 - 16;
  }
  unint64_t v27 = a1[2];
  if ((unint64_t)v6 >= v27)
  {
    uint64_t v30 = ((uint64_t)v6 - *a1) >> 4;
    if ((unint64_t)(v30 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v27 - *a1;
    uint64_t v32 = v31 >> 3;
    if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
      uint64_t v32 = v30 + 1;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v32;
    }
    double v47 = a1 + 2;
    int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(v33);
    uint64_t v36 = &v34[16 * v30];
    long long v37 = *a2;
    *(_OWORD *)uint64_t v36 = *a2;
    if (*((void *)&v37 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    double v39 = (void *)*a1;
    BOOL v38 = (void *)a1[1];
    if (v38 == (void *)*a1)
    {
      int64x2_t v42 = vdupq_n_s64((unint64_t)v38);
      long double v40 = &v34[16 * v30];
    }
    else
    {
      long double v40 = &v34[16 * v30];
      do
      {
        long long v41 = *((_OWORD *)v38 - 1);
        v38 -= 2;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        void *v38 = 0;
        v38[1] = 0;
      }
      while (v38 != v39);
      int64x2_t v42 = *(int64x2_t *)a1;
    }
    uint64_t v29 = (uint64_t)(v36 + 16);
    *a1 = (uint64_t)v40;
    a1[1] = (uint64_t)(v36 + 16);
    int64x2_t v45 = v42;
    uint64_t v43 = a1[2];
    a1[2] = (uint64_t)&v34[16 * v35];
    uint64_t v46 = v43;
    uint64_t v44 = v42.i64[0];
    std::__split_buffer<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::~__split_buffer((uint64_t)&v44);
  }
  else
  {
    *uint64_t v6 = *(void *)a2;
    uint64_t v28 = *((void *)a2 + 1);
    v6[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = (uint64_t)(v6 + 2);
  }
  a1[1] = v29;
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::__wrap_iter<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>>(*a1, v29, (v29 - *a1) >> 4);
  return 1;
}

void kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap::get_sorted(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = (uint64_t)v4 - *(void *)a1;
  if (v4 == *(void **)a1)
  {
    double v11 = 0;
    unint64_t v12 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(v5 >> 4);
    uint64_t v7 = 0;
    *a2 = (unint64_t)v6;
    a2[1] = (unint64_t)v6;
    a2[2] = (unint64_t)&v6[2 * v8];
    uint64_t v9 = v6;
    do
    {
      *uint64_t v9 = *v3;
      uint64_t v10 = v3[1];
      v9[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v7 += 2;
      v3 += 2;
      v9 += 2;
    }
    while (v3 != v4);
    double v11 = (double **)&v6[v7];
    a2[1] = (unint64_t)&v6[v7];
    unint64_t v12 = *a2;
  }
  unint64_t v13 = 126 - 2 * __clz((uint64_t)((uint64_t)v11 - v12) >> 4);
  if (v11 == (double **)v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  std::__introsort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *,false>(v12, v11, v14, 1);
}

void sub_1B1D87C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t **std::map<int,std::vector<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>::operator[](uint64_t **a1, int *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v3 = a1[1];
  int v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v3;
        int v7 = *((_DWORD *)v3 + 8);
        if (v5 >= v7) {
          break;
        }
        uint64_t v3 = *v6;
        uint64_t v4 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= v5) {
        break;
      }
      uint64_t v3 = v6[1];
      if (!v3)
      {
        uint64_t v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_9:
    uint64_t v8 = (uint64_t *)v6;
    uint64_t v6 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v6 + 8) = v5;
    v6[6] = 0;
    v6[7] = 0;
    v6[5] = 0;
    *uint64_t v6 = 0;
    v6[1] = 0;
    _OWORD v6[2] = v8;
    *uint64_t v4 = (uint64_t *)v6;
    uint64_t v9 = (uint64_t *)**a1;
    uint64_t v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

uint64_t kaldi::WordHypLattice::RecomputeNodeTimestamps(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 16);
  uint64_t v2 = *(uint64_t **)(this + 24);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    this = kaldi::WordHypLattice::Node::setTimestamps(v3);
  }
  return this;
}

void kaldi::WordHypLattice::GetTimeSortedNodes(kaldi::WordHypLattice *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<kaldi::WordHypLattice::Node *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Node **,kaldi::WordHypLattice::Node **>(a2, *((const void **)this + 2), *((void *)this + 3), (uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  uint64_t v5 = (uint64_t)&v4[-*a2];
  unint64_t v6 = v5 >> 3;
  if (v5 < 1025)
  {
    int v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    int v7 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<kaldi::WordHypLattice::Node *>(v5 >> 3);
    uint64_t v9 = v8;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v3, v4, v6, v7, v9);
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1B1D87E34(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *kaldi::WordHypLattice::MergeNodes(void *result, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      int v7 = *a3;
      uint64_t v8 = *(void **)v4;
      uint64_t v9 = *(void **)(*(void *)v4 + 8);
      if (v9 != *(void **)v4)
      {
        do
        {
          uint64_t result = kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert(v7, v9 + 2);
          uint64_t v9 = (void *)v9[1];
        }
        while (v9 != v8);
        int v7 = *a3;
        uint64_t v8 = *(void **)v4;
      }
      uint64_t v10 = (void *)v8[9];
      if (v10 != v8 + 8)
      {
        do
        {
          uint64_t result = kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::insert(v7 + 8, v10 + 2);
          uint64_t v10 = (void *)v10[1];
        }
        while (v10 != v8 + 8);
        uint64_t v8 = *(void **)v4;
      }
      double v11 = (void *)v8[1];
      if (v11 != v8)
      {
        do
        {
          *(void *)(v11[2] + 8) = *a3;
          double v11 = (void *)v11[1];
        }
        while (v11 != v8);
        uint64_t v8 = *(void **)v4;
      }
      uint64_t v12 = v8[9];
      if ((void *)v12 == v8 + 8) {
        goto LABEL_14;
      }
      do
      {
        **(void **)(v12 + 16) = *a3;
        uint64_t v12 = *(void *)(v12 + 8);
      }
      while ((void *)v12 != v8 + 8);
      uint64_t v8 = *(void **)v4;
      if (*(void *)v4)
      {
LABEL_14:
        kaldi::CuVector<float>::~CuVector(v8 + 19);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v8 + 11));
        std::__list_imp<char *>::clear(v8 + 8);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(v8 + 3));
        std::__list_imp<char *>::clear(v8);
        uint64_t result = (void *)MEMORY[0x1B3EA8670](v8, 0x10A0C4094E47B5DLL);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  *uint64_t v3 = 0;
  return result;
}

uint64_t kaldi::WordHypLattice::DeleteArc(kaldi::WordHypLattice *this, kaldi::WordHypLattice::Arc **a2)
{
  kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::erase(*(void *)*a2 + 64, (uint64_t)*a2);
  kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::erase(*((void *)*a2 + 1), (uint64_t)*a2);
  uint64_t result = (uint64_t)*a2;
  if (*(void *)(*(void *)*a2 + 80) && *(void *)(*(void *)(result + 8) + 16))
  {
    *(unsigned char *)this = 0;
LABEL_7:
    kaldi::WordHypLattice::Arc::~Arc((void **)result);
    return MEMORY[0x1B3EA8670]();
  }
  std::vector<kaldi::WordHypLattice::Node *>::vector(__p, 1uLL, (void *)(result + 8));
  kaldi::WordHypLattice::MergeNodes(this, (uint64_t *)__p, (uint64_t **)*a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t result = (uint64_t)*a2;
  *(unsigned char *)this = 0;
  if (result) {
    goto LABEL_7;
  }
  return result;
}

void sub_1B1D88074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *kaldi::InsertionOrderedSet<kaldi::WordHypLattice::Arc *>::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = (void *)(a1 + 24);
  uint64_t result = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,int>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>((void *)(a1 + 24), &v8);
  if (result)
  {
    uint64_t v5 = result;
    unint64_t v6 = (uint64_t *)result[3];
    uint64_t v7 = *v6;
    *(void *)(v7 + 8) = v6[1];
    *(void *)v6[1] = v7;
    --*(void *)(a1 + 16);
    operator delete(v6);
    return (uint64_t *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(v3, v5);
  }
  return result;
}

kaldi::WordHypLattice *kaldi::WordHypLattice::WordHypLattice(kaldi::WordHypLattice *this, const kaldi::WordHypLattice *a2)
{
  *(unsigned char *)this = 1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v4 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v4;
  }
  if (*((void *)a2 + 1))
  {
    kaldi::WordHypLattice::doUnion(this, a2);
    kaldi::WordHypLattice::RecomputeTopSortedNodes(this);
    kaldi::WordHypLattice::InitNodeAndArcTimestamps((uint64_t)this);
    uint64_t v5 = *((void *)this + 2);
    uint64_t v6 = *((void *)this + 3);
    uint64_t v7 = v6 - v5;
    if (v6 != v5)
    {
      uint64_t v8 = 0;
      unint64_t v9 = v7 >> 3;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      do
      {
        *(_DWORD *)(*(void *)(v5 + 8 * v8) + 184) = v8;
        ++v8;
      }
      while (v9 != v8);
    }
    uint64_t v10 = *((void *)this + 5);
    uint64_t v11 = *((void *)this + 6);
    uint64_t v12 = v11 - v10;
    if (v11 != v10)
    {
      uint64_t v13 = 0;
      unint64_t v14 = v12 >> 3;
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      do
      {
        *(_DWORD *)(*(void *)(v10 + 8 * v13) + 456) = v13;
        ++v13;
      }
      while (v14 != v13);
    }
  }
  return this;
}

void sub_1B1D8820C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void *)v1[5];
  if (v3)
  {
    v1[6] = v3;
    operator delete(v3);
  }
  long long v4 = (void *)v1[2];
  if (v4)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::WordHypLattice::doUnion(kaldi::WordHypLattice *this, const kaldi::WordHypLattice *a2)
{
  if (*((void *)a2 + 1))
  {
    if (!*((void *)this + 1)) {
      operator new();
    }
    if (*((void *)a2 + 3) - *((void *)a2 + 2) != 8)
    {
      if (*((void *)this + 3) - *((void *)this + 2) == 8) {
        operator new();
      }
      v19[0] = 0;
      v19[1] = 0;
      long long v18 = (uint64_t *)v19;
      uint64_t v4 = *((void *)this + 1);
      long long v20 = (unint64_t *)((char *)a2 + 8);
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v18, (unint64_t *)a2 + 1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v20)[5] = v4;
      uint64_t v5 = *((void *)this + 3);
      if (*((void *)this + 2) == v5) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = *(void *)(v5 - 8);
      }
      uint64_t v7 = *((void *)a2 + 3);
      if (*((void *)a2 + 2) == v7) {
        unint64_t v8 = 0;
      }
      else {
        unint64_t v8 = *(void *)(v7 - 8);
      }
      unint64_t v17 = v8;
      long long v20 = &v17;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v18, &v17, (uint64_t)&std::piecewise_construct, (uint64_t **)&v20)[5] = v6;
      unint64_t v9 = (unint64_t *)*((void *)a2 + 2);
      for (uint64_t i = (unint64_t *)*((void *)a2 + 3); v9 != i; ++v9)
      {
        uint64_t v11 = v19[0];
        if (!v19[0]) {
          goto LABEL_24;
        }
        unint64_t v12 = *v9;
        uint64_t v13 = v19;
        do
        {
          unint64_t v14 = v11;
          uint64_t v15 = v13;
          unint64_t v16 = v11[4];
          if (v16 >= v12) {
            uint64_t v13 = (void **)v11;
          }
          else {
            ++v11;
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
        if (v13 == v19) {
          goto LABEL_24;
        }
        if (v16 < v12) {
          unint64_t v14 = v15;
        }
        if (v12 < v14[4]) {
LABEL_24:
        }
          operator new();
        if (*(void *)(v12 + 72) != v12 + 64)
        {
          unint64_t v17 = 0;
          operator new();
        }
      }
      *(unsigned char *)this = 0;
      std::__tree<int>::destroy((uint64_t)&v18, v19[0]);
    }
  }
}

void sub_1B1D88840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

void kaldi::WordHypLattice::Arc::~Arc(void **this)
{
  if (*((unsigned char *)this + 552) && *((char *)this + 551) < 0) {
    operator delete(this[66]);
  }
  if (*((unsigned char *)this + 520) && *((char *)this + 519) < 0) {
    operator delete(this[62]);
  }
  if (*((unsigned char *)this + 488) && *((char *)this + 487) < 0) {
    operator delete(this[58]);
  }
  kaldi::CuVector<float>::~CuVector(this + 53);
  kaldi::CuVector<float>::~CuVector(this + 49);
  kaldi::CuVector<float>::~CuVector(this + 45);
  kaldi::CuVector<float>::~CuVector(this + 41);
  kaldi::CuVector<float>::~CuVector(this + 37);
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  uint64_t v4 = this + 21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = this[18];
  if (v2)
  {
    this[19] = v2;
    operator delete(v2);
  }
  uint64_t v3 = this[13];
  if (v3)
  {
    this[14] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

kaldi::WordHypLattice::Arc *kaldi::WordHypLattice::Arc::Arc(kaldi::WordHypLattice::Arc *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((int64x2_t *)this + 1) = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_OWORD *)this + 2) = xmmword_1B256D420;
  *((_WORD *)this + ++*(_DWORD *)(result + 24) = 0;
  *((_DWORD *)this + 13) = 2143289344;
  *(_OWORD *)((char *)this + 56) = xmmword_1B256D430;
  *((_DWORD *)this + 18) = 2143289344;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0x3FF0000000000000;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 30) = 0x7FF8000000000000;
  *((int32x2_t *)this + 31) = vdup_n_s32(0x7FC00000u);
  *((void *)this + 32) = -1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 33, "");
  *((_DWORD *)this + 72) = -1;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 37) = &unk_1F0A517C0;
  *((void *)this + 38) = 0;
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 41) = &unk_1F0A517C0;
  *((void *)this + 42) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 45) = &unk_1F0A517C0;
  *((void *)this + 46) = 0;
  *((void *)this + 51) = 0;
  *((void *)this + --*(_DWORD *)(a9 + 52) = 0;
  *((void *)this + 49) = &unk_1F0A517C0;
  *((void *)this + 50) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  *((void *)this + 53) = &unk_1F0A517C0;
  *((void *)this + 54) = 0;
  *((void *)this + 57) = -1;
  *((unsigned char *)this + 464) = 0;
  *((unsigned char *)this + 488) = 0;
  *((unsigned char *)this + 496) = 0;
  *((unsigned char *)this + 520) = 0;
  *((unsigned char *)this + 528) = 0;
  *((unsigned char *)this + 5--*(_DWORD *)(a9 + 52) = 0;
  *((_DWORD *)this + 140) = 0;
  return this;
}

void sub_1B1D88B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 239) < 0) {
    operator delete(*(void **)(v2 + 216));
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 1--*(_DWORD *)(a9 + 52) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v2 + 104);
  if (v6)
  {
    *(void *)(v2 + 112) = v6;
    operator delete(v6);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::__wrap_iter<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = v3 >> 1;
    uint64_t v6 = (double **)(a1 + 16 * (v3 >> 1));
    uint64_t v7 = (double **)(a2 - 16);
    unint64_t v8 = *(double **)(a2 - 16);
    if (**v6 > *v8)
    {
      unint64_t v9 = *(double **)(a2 - 8);
      *uint64_t v7 = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v10 = *v6;
      do
      {
        uint64_t v11 = v6;
        unint64_t v12 = v6[1];
        *uint64_t v11 = 0;
        v11[1] = 0;
        uint64_t v13 = (std::__shared_weak_count *)v7[1];
        *uint64_t v7 = v10;
        v7[1] = v12;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (double **)(a1 + 16 * v5);
        uint64_t v10 = *v6;
        uint64_t v7 = v11;
      }
      while (**v6 > *v8);
      unint64_t v14 = (std::__shared_weak_count *)v11[1];
      *uint64_t v11 = v8;
      v11[1] = v9;
      if (v14)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
  }
}

uint64_t std::__split_buffer<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *,false>(unint64_t a1, double **a2, uint64_t a3, char a4)
{
double **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(double **result, double **a2, double **a3)
{
  uint64_t v3 = *a2;
  double v4 = **a2;
  BOOL v5 = *result;
  uint64_t v6 = *a3;
  double v7 = **a3;
  if (v4 > **result)
  {
    if (v7 <= v4)
    {
      *uint64_t result = v3;
      *a2 = v5;
      uint64_t v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      unint64_t v13 = *a2;
      if (**a3 <= **a2) {
        return result;
      }
      *a2 = *a3;
      *a3 = v13;
      unint64_t v8 = a3 + 1;
      uint64_t result = a2 + 1;
    }
    else
    {
      *result++ = v6;
      *a3 = v5;
      unint64_t v8 = a3 + 1;
    }
    unint64_t v9 = v8;
    goto LABEL_10;
  }
  if (v7 > v4)
  {
    *a2 = v6;
    *a3 = v3;
    unint64_t v9 = a2 + 1;
    uint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    uint64_t v11 = *result;
    if (**a2 > **result)
    {
      *result++ = *a2;
      *a2 = v11;
LABEL_10:
      unint64_t v14 = *result;
      *uint64_t result = *v9;
      *unint64_t v9 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(uint64_t a1, double **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 2);
      double v7 = *(double **)a1;
      if (*v6 > **(double **)a1)
      {
        *(void *)a1 = v6;
        *(a2 - 2) = v7;
        unint64_t v8 = *(double **)(a1 + 8);
        *(void *)(a1 + 8) = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32), a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32), (double **)(a1 + 48));
      int v22 = *(a2 - 2);
      uint64_t v23 = *(double **)(a1 + 48);
      if (*v22 > *v23)
      {
        *(void *)(a1 + 48) = v22;
        *(a2 - 2) = v23;
        uint64_t v24 = *(double **)(a1 + 56);
        *(void *)(a1 + 56) = *(a2 - 1);
        *(a2 - 1) = v24;
        uint64_t v25 = *(double **)(a1 + 48);
        double v26 = *v25;
        unint64_t v27 = *(double **)(a1 + 32);
        if (*v25 > *v27)
        {
          uint64_t v28 = *(void *)(a1 + 40);
          uint64_t v29 = *(void *)(a1 + 56);
          *(void *)(a1 + 32) = v25;
          *(void *)(a1 + 40) = v29;
          *(void *)(a1 + 48) = v27;
          *(void *)(a1 + 56) = v28;
          uint64_t v30 = *(double **)(a1 + 16);
          if (v26 > *v30)
          {
            uint64_t v31 = *(void *)(a1 + 24);
            *(void *)(a1 + 16) = v25;
            *(void *)(a1 + ++*(_DWORD *)(result + 24) = v29;
            *(void *)(a1 + 32) = v30;
            *(void *)(a1 + 40) = v31;
            uint64_t v32 = *(double **)a1;
            if (v26 > **(double **)a1)
            {
              uint64_t v33 = *(void *)(a1 + 8);
              *(void *)a1 = v25;
              *(void *)(a1 + 8) = v29;
              *(void *)(a1 + 16) = v32;
              *(void *)(a1 + ++*(_DWORD *)(result + 24) = v33;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v9 = (double **)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32));
      uint64_t v10 = (double **)(a1 + 48);
      if ((double **)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *v10;
    unint64_t v14 = *v9;
    if (**v10 > **v9)
    {
      long long v15 = v10[1];
      uint64_t v16 = v11;
      *uint64_t v10 = 0;
      v10[1] = 0;
      while (1)
      {
        uint64_t v17 = (void *)(a1 + v16);
        uint64_t v18 = *(void *)(a1 + v16 + 40);
        v17[4] = 0;
        v17[5] = 0;
        double v19 = *(std::__shared_weak_count **)(a1 + v16 + 56);
        v17[6] = v14;
        v17[7] = v18;
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (v16 == -32) {
          break;
        }
        unint64_t v14 = *(double **)(a1 + v16 + 16);
        v16 -= 16;
        if (*v13 <= *v14)
        {
          long long v20 = (double **)(a1 + v16 + 48);
          goto LABEL_15;
        }
      }
      long long v20 = (double **)a1;
LABEL_15:
      unint64_t v21 = (std::__shared_weak_count *)v20[1];
      *long long v20 = v13;
      v20[1] = v15;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

double **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(double **a1, double **a2, double **a3, double **a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(a1, a2, a3);
  unint64_t v9 = *a3;
  if (**a4 > **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = *a2;
    if (**a3 > **a2)
    {
      *a2 = *a3;
      *a3 = v11;
      int v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      unint64_t v13 = *a1;
      if (**a2 > **a1)
      {
        *a1 = *a2;
        *a2 = v13;
        unint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

kaldi::WordHypLattice::Node *kaldi::WordHypLattice::Node::Node(kaldi::WordHypLattice::Node *this, const kaldi::WordHypLattice::Node *a2)
{
  uint64_t v4 = std::list<kaldi::WordHypLattice::Arc *>::list(this, (uint64_t)a2);
  std::unordered_map<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>::unordered_map((uint64_t)(v4 + 3), (uint64_t)a2 + 24);
  std::list<kaldi::WordHypLattice::Arc *>::list((void *)this + 8, (uint64_t)a2 + 64);
  std::unordered_map<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>::unordered_map((uint64_t)this + 88, (uint64_t)a2 + 88);
  long long v5 = *((_OWORD *)a2 + 8);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((_OWORD *)this + 8) = v5;
  kaldi::CuVector<float>::CuVector((void *)this + 19, (uint64_t)a2 + 152);
  *((void *)this + 23) = *((void *)a2 + 23);
  return this;
}

void sub_1B1D89AB8(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__list_imp<char *>::clear(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

void *std::list<kaldi::WordHypLattice::Arc *>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      double v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      _OWORD v7[2] = v8;
      *double v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B1D89B84(_Unwind_Exception *a1)
{
  std::__list_imp<char *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,std::pair<kaldi::WordHypLattice::Arc * const,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1B1D89BF8(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,std::pair<kaldi::WordHypLattice::Arc * const,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>> const&>(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1D89E50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

kaldi::WordHypLattice::Arc *kaldi::WordHypLattice::Arc::Arc(kaldi::WordHypLattice::Arc *this, const kaldi::WordHypLattice::Arc *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  long long v4 = *((_OWORD *)a2 + 1);
  long long v5 = *((_OWORD *)a2 + 2);
  long long v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 60) = *(_OWORD *)((char *)a2 + 60);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 80), *((long long **)a2 + 10), *((long long **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3));
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 13, *((const void **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
  long long v7 = *((_OWORD *)a2 + 8);
  *((void *)this + 18) = 0;
  *((_OWORD *)this + 8) = v7;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)this + 18, *((const void **)a2 + 18), *((void *)a2 + 19), (uint64_t)(*((void *)a2 + 19) - *((void *)a2 + 18)) >> 2);
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 7, *((long long **)a2 + 21), *((long long **)a2 + 22), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 22) - *((void *)a2 + 21)) >> 3));
  long long v8 = *((_OWORD *)a2 + 12);
  *((void *)this + 26) = *((void *)a2 + 26);
  *((_OWORD *)this + 12) = v8;
  if (*((char *)a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 9, *((const std::string::value_type **)a2 + 27), *((void *)a2 + 28));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 216);
    *((void *)this + 29) = *((void *)a2 + 29);
    *(_OWORD *)((char *)this + 216) = v9;
  }
  long long v10 = *((_OWORD *)a2 + 15);
  *((void *)this + 32) = *((void *)a2 + 32);
  *((_OWORD *)this + 15) = v10;
  if (*((char *)a2 + 287) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 11, *((const std::string::value_type **)a2 + 33), *((void *)a2 + 34));
  }
  else
  {
    long long v11 = *(_OWORD *)((char *)a2 + 264);
    *((void *)this + 35) = *((void *)a2 + 35);
    *(_OWORD *)((char *)this + 264) = v11;
  }
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  kaldi::CuVector<float>::CuVector((void *)this + 37, (uint64_t)a2 + 296);
  kaldi::CuVector<float>::CuVector((void *)this + 41, (uint64_t)a2 + 328);
  kaldi::CuVector<float>::CuVector((void *)this + 45, (uint64_t)a2 + 360);
  kaldi::CuVector<float>::CuVector((void *)this + 49, (uint64_t)a2 + 392);
  kaldi::CuVector<float>::CuVector((void *)this + 53, (uint64_t)a2 + 424);
  *((void *)this + 57) = *((void *)a2 + 57);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 464), (long long *)a2 + 29);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 496), (long long *)a2 + 31);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 22, (long long *)a2 + 33);
  *((_DWORD *)this + 140) = *((_DWORD *)a2 + 140);
  return this;
}

void sub_1B1D8A098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14)
{
  if (*(char *)(v14 + 239) < 0) {
    operator delete(*a11);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  unint64_t v18 = *v16;
  if (*v16)
  {
    *(void *)(v14 + 1--*(_DWORD *)(a9 + 52) = v18;
    operator delete(v18);
  }
  size_t v19 = *v15;
  if (*v15)
  {
    *(void *)(v14 + 112) = v19;
    operator delete(v19);
  }
  a14 = a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1B1D8A190()
{
}

void sub_1B1D8A198()
{
}

void sub_1B1D8A1A0()
{
}

void sub_1B1D8A1A8()
{
}

void sub_1B1D8A1B0()
{
}

void sub_1B1D8A1B8()
{
}

void std::deque<kaldi::WordHypLattice::Node *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<kaldi::WordHypLattice::Node *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<kaldi::WordHypLattice::Node *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        long long v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)long long v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    size_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1D8A514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::WordHypLattice::Node *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1D8A5BC(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,kaldi::WordHypLattice::Arc * const&,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v10;
  uint64_t v16 = *a4;
  i[2] = *a3;
  i[3] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    void *i = *v24;
LABEL_38:
    *uint64_t v24 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1D8A828(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A5A9C0;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5A9C0;
}

double std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 24) + *(double *)(a2 + 40);
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void *std::__function::__value_func<double ()(kaldi::WordHypLattice::Arc const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::~__func()
{
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A5AA18;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5AA18;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 56;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_1>,double & ()(kaldi::WordHypLattice::Arc &)>::target_type()
{
}

void *std::__function::__value_func<double & ()(kaldi::WordHypLattice::Arc &)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A5AA70;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5AA70;
}

double std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 24);
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_2>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::~__func()
{
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A5AAC8;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5AAC8;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 64;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_3>,double & ()(kaldi::WordHypLattice::Arc &)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A5AB20;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5AB20;
}

double std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 200);
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_4>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::~__func()
{
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A5AB78;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5AB78;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 208;
}

uint64_t std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5,std::allocator<kaldi::WordHypLattice::getWordHypLattice(kaldi::TransitionModel const&,kaldi::LatticeScoreCache *,fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> &,int,std::vector<kaldi::WordHypLattice::InputArcDetail> const*)::$_5>,double & ()(kaldi::WordHypLattice::Arc &)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,int>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,int>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,int>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,std::piecewise_construct_t const&,std::tuple<kaldi::WordHypLattice::Node * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,double>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,double>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,double>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::Node *&,double const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v7;
        unint64_t v11 = v7[4];
        if (v9 >= v11) {
          break;
        }
        uint64_t v7 = *v10;
        unint64_t v8 = v10;
        if (!*v10) {
          goto LABEL_10;
        }
      }
      if (v11 >= v9) {
        break;
      }
      uint64_t v7 = v10[1];
      if (!v7)
      {
        unint64_t v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
LABEL_10:
    uint8x8_t v12 = (uint64_t *)operator new(0x30uLL);
    v12[4] = *a3;
    v12[5] = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return v12;
  }
  return (uint64_t *)v10;
}

void std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(*a1);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetBestMeanConfPath(std::vector<int> &,std::vector<std::string> &,int &)::BackTraceToken>>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy((void *)a1[6]);
    operator delete(a1);
  }
}

void std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A5A910;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5A910;
}

double std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 32);
}

uint64_t std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_0>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::~__func()
{
}

void *std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F0A5A968;
  return result;
}

void std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5A968;
}

double std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return -(*(double *)(a2 + 24) + *(double *)(a2 + 40));
}

uint64_t std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1,std::allocator<kaldi::WordHypLattice::GetNBestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,kaldi::WordHypLattice::Criteria)::$_1>,double ()(kaldi::WordHypLattice::Arc const&)>::target_type()
{
}

void std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,std::map<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap,std::less<int>,std::allocator<std::pair<int const,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::__map_value_compare<int,std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>::destroy((char *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::__map_value_compare<int,std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::__map_value_compare<int,std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::__map_value_compare<int,std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>>>::destroy(*((void *)a1 + 1));
    unint64_t v2 = (void **)(a1 + 40);
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken,std::allocator<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken,std::allocator<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken,std::allocator<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenMinHeap>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v4 = v2 + 5;
      std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
    }
    operator delete(v2);
  }
  return a1;
}

void *std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::WordHypLattice::Arc *> const&>(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a1 + 8);
  *BOOL v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  BOOL result = std::vector<kaldi::WordHypLattice::Arc *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Arc **,kaldi::WordHypLattice::Arc **>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1D8B3C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__push_back_slow_path<std::vector<kaldi::WordHypLattice::Arc *> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<kaldi::WordHypLattice::Arc *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Arc **,kaldi::WordHypLattice::Arc **>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<kaldi::WordHypLattice::Arc *>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1D8B4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::WordHypLattice::Arc *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Arc **,kaldi::WordHypLattice::Arc **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1D8B548(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<kaldi::WordHypLattice::Node *>::__init_with_size[abi:ne180100]<kaldi::WordHypLattice::Node **,kaldi::WordHypLattice::Node **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    BOOL result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1D8B5C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<kaldi::WordHypLattice::Node *>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0xFFFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    BOOL result = operator new(8 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

char *std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(char *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = result;
    if (a3 == 2)
    {
      uint64_t v7 = *((void *)a2 - 1);
      uint64_t v8 = *(void *)result;
      if (*(float *)(v7 + 132) < *(float *)(*(void *)result + 132))
      {
        *(void *)BOOL result = v7;
        *((void *)a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      BOOL v19 = (char *)a4;
      unint64_t v20 = a3 >> 1;
      unint64_t v21 = &result[8 * (a3 >> 1)];
      unint64_t v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>((uint64_t)result, v21, v22, a4);
        uint64_t v23 = (uint64_t *)&v19[8 * v20];
        BOOL result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>((uint64_t)&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v23);
        uint64_t v24 = &v19[8 * a3];
        unint64_t v25 = v23;
        while (v25 != (uint64_t *)v24)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *v25;
          float v28 = *(float *)(v27 + 132);
          uint64_t v29 = *(void *)v19;
          float v30 = *(float *)(*(void *)v19 + 132);
          if (v28 < v30) {
            uint64_t v29 = v27;
          }
          v19 += 8 * (v28 >= v30);
          unint64_t v25 = &v26[v28 < v30];
          *(void *)uint64_t v6 = v29;
          v6 += 8;
          if (v19 == (char *)v23)
          {
            if (v25 != (uint64_t *)v24)
            {
              uint64_t v31 = 0;
              if (v28 < v30) {
                char v32 = 1;
              }
              else {
                char v32 = 2;
              }
              unint64_t v33 = &v26[v32 & 1];
              do
              {
                *(void *)&v6[v31 * 8] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != (uint64_t *)v24);
            }
            return result;
          }
        }
        if (v19 != (char *)v23)
        {
          uint64_t v34 = 0;
          do
          {
            *(void *)&v6[v34] = *(void *)&v19[v34];
            v34 += 8;
          }
          while (&v19[v34] != (char *)v23);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(result, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(&v6[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v19, a5);
        return std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v6, &v6[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      unint64_t v10 = result + 8;
      if (result + 8 != a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = result;
        do
        {
          uint64_t v13 = *(void *)v12;
          uint64_t v12 = v10;
          uint64_t v14 = *(void *)v10;
          float v15 = *(float *)(v14 + 132);
          if (v15 < *(float *)(v13 + 132))
          {
            uint64_t v16 = v11;
            while (1)
            {
              *(void *)&result[v16 + 8] = v13;
              if (!v16) {
                break;
              }
              uint64_t v13 = *(void *)&result[v16 - 8];
              v16 -= 8;
              if (v15 >= *(float *)(v13 + 132))
              {
                float v17 = &result[v16 + 8];
                goto LABEL_15;
              }
            }
            float v17 = result;
LABEL_15:
            *(void *)float v17 = v14;
          }
          unint64_t v10 = v12 + 8;
          v11 += 8;
        }
        while (v12 + 8 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(uint64_t result, void *a2, unint64_t a3, uint64_t *a4)
{
  if (a3)
  {
    BOOL v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_8:
      *BOOL v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      uint64_t v8 = *(a2 - 1);
      float v9 = *(float *)(v8 + 132);
      float v10 = *(float *)(*(void *)result + 132);
      if (v9 >= v10) {
        uint64_t v8 = *(void *)result;
      }
      *a4 = v8;
      BOOL v4 = a4 + 1;
      if (v9 >= v10) {
        uint64_t v6 = (uint64_t)(a2 - 1);
      }
      goto LABEL_8;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v20 = result + 8 * (a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(result, v20, a3 >> 1, a4, a3 >> 1);
      BOOL result = std::__stable_sort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      unint64_t v21 = (void *)(v6 + 8 * (a3 >> 1));
      while (v21 != a2)
      {
        unint64_t v22 = v21;
        uint64_t v23 = *v21;
        float v24 = *(float *)(v23 + 132);
        uint64_t v25 = *(void *)v6;
        float v26 = *(float *)(*(void *)v6 + 132);
        if (v24 < v26) {
          uint64_t v25 = v23;
        }
        unint64_t v21 = &v22[v24 < v26];
        v6 += 8 * (v24 >= v26);
        *v4++ = v25;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            uint64_t v27 = 0;
            float v28 = &v22[v24 < v26];
            do
            {
              v4[v27] = v28[v27];
              ++v27;
            }
            while (&v28[v27] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        uint64_t v29 = 0;
        do
        {
          v4[v29] = *(void *)(v6 + v29 * 8);
          ++v29;
        }
        while (v6 + v29 * 8 != v20);
      }
    }
    else if ((void *)result != a2)
    {
      uint64_t v11 = result + 8;
      *a4 = *(void *)result;
      if ((void *)(result + 8) != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = a4;
        uint64_t v14 = a4;
        do
        {
          uint64_t v16 = *v14++;
          uint64_t v15 = v16;
          if (*(float *)(*(void *)v11 + 132) >= *(float *)(v16 + 132))
          {
            *uint64_t v14 = *(void *)v11;
          }
          else
          {
            v13[1] = v15;
            float v17 = a4;
            if (v13 != a4)
            {
              uint64_t v18 = v12;
              while (1)
              {
                float v17 = (uint64_t *)((char *)a4 + v18);
                uint64_t v19 = *(uint64_t *)((char *)a4 + v18 - 8);
                if (*(float *)(*(void *)v11 + 132) >= *(float *)(v19 + 132)) {
                  break;
                }
                *float v17 = v19;
                v18 -= 8;
                if (!v18)
                {
                  float v17 = a4;
                  break;
                }
              }
            }
            *float v17 = *(void *)v11;
          }
          v11 += 8;
          v12 += 8;
          uint64_t v13 = v14;
        }
        while ((void *)v11 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    uint64_t v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (1)
      {
        uint64_t v14 = *(void *)&v11[v12];
        if (*(float *)(*(void *)a2 + 132) < *(float *)(v14 + 132)) {
          break;
        }
        v12 += 8;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v51 = a3;
      __src = a6;
      uint64_t v50 = a7;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          *(void *)&v11[v12] = *(void *)a2;
          *(void *)a2 = v14;
          return result;
        }
        if (v13 <= 0) {
          uint64_t v26 = -v13;
        }
        else {
          uint64_t v26 = 1 - v13;
        }
        uint64_t v25 = v26 >> 1;
        uint64_t v19 = &v11[8 * (v26 >> 1) + v12];
        uint64_t v18 = a2;
        if (a2 != a3)
        {
          unint64_t v27 = (a3 - a2) >> 3;
          uint64_t v18 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v18[8 * (v27 >> 1)];
            uint64_t v31 = *(void *)v29;
            float v30 = v29 + 8;
            v27 += ~(v27 >> 1);
            if (*(float *)(v31 + 132) < *(float *)(*(void *)v19 + 132)) {
              uint64_t v18 = v30;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v17 = (v18 - a2) >> 3;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v16 = v9;
        }
        else {
          uint64_t v16 = v9 + 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = &a2[8 * (v16 >> 1)];
        uint64_t v19 = a2;
        if (a2 - v11 != v12)
        {
          unint64_t v20 = (a2 - v11 - v12) >> 3;
          uint64_t v19 = &v11[v12];
          do
          {
            unint64_t v21 = v20 >> 1;
            unint64_t v22 = &v19[8 * (v20 >> 1)];
            uint64_t v24 = *(void *)v22;
            uint64_t v23 = v22 + 8;
            v20 += ~(v20 >> 1);
            if (*(float *)(*(void *)v18 + 132) < *(float *)(v24 + 132)) {
              unint64_t v20 = v21;
            }
            else {
              uint64_t v19 = v23;
            }
          }
          while (v20);
        }
        uint64_t v25 = (v19 - v11 - v12) >> 3;
      }
      a4 = -(v25 + v13);
      uint64_t v32 = v9 - v17;
      uint64_t v33 = v25;
      uint64_t v34 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::WordHypLattice::Node **>,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v19, a2, v18);
      uint64_t v35 = v33;
      uint64_t v36 = v34;
      if (v35 + v17 >= v9 - (v35 + v17) - v13)
      {
        uint64_t v39 = v35;
        BOOL result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(v34, v18, v51, a4, v32, __src, v50);
        a2 = v19;
        a7 = v50;
        uint64_t v32 = v17;
        a6 = __src;
        a4 = v39;
        a3 = v36;
        v11 += v12;
      }
      else
      {
        long long v37 = v19;
        uint64_t v38 = v17;
        a6 = __src;
        a7 = v50;
        BOOL result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetTimeSortedNodes(void)::$_0 &,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(&v11[v12], v37, v34, v35, v38, __src, v50);
        uint64_t v11 = v36;
        a2 = v18;
        a3 = v51;
      }
      uint64_t v9 = v32;
      if (!v32) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v44 = 0;
        do
        {
          *(void *)&a6[v44] = *(void *)&v11[v44];
          v44 += 8;
        }
        while (&v11[v44] != a2);
        if (v44)
        {
          uint64_t v45 = a6;
          while (a2 != a3)
          {
            uint64_t v46 = *(void *)a2;
            float v47 = *(float *)(*(void *)a2 + 132);
            float v48 = *(float *)(*(void *)v45 + 132);
            if (v47 >= v48) {
              uint64_t v46 = *(void *)v45;
            }
            a2 += 8 * (v47 < v48);
            v45 += 8 * (v47 >= v48);
            *(void *)uint64_t v11 = v46;
            v11 += 8;
            if (&a6[v44] == v45) {
              return result;
            }
          }
          return (char *)memmove(v11, v45, a6 - v45 + v44);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v40 = 0;
      do
      {
        *(void *)&a6[v40] = *(void *)&a2[v40];
        v40 += 8;
      }
      while (&a2[v40] != a3);
      if (v40)
      {
        long long v41 = &a6[v40];
        uint64_t v42 = a3 - 8;
        while (a2 != v11)
        {
          uint64_t v43 = *((void *)v41 - 1);
          if (*(float *)(v43 + 132) >= *(float *)(*((void *)a2 - 1) + 132))
          {
            v41 -= 8;
          }
          else
          {
            uint64_t v43 = *((void *)a2 - 1);
            a2 -= 8;
          }
          *(void *)uint64_t v42 = v43;
          v42 -= 8;
          if (v41 == a6) {
            return result;
          }
        }
        uint64_t v49 = 0;
        do
        {
          *(void *)&v42[v49] = *(void *)&v41[v49 - 8];
          v49 -= 8;
        }
        while (&v41[v49] != a6);
      }
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::WordHypLattice::Node **>,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(char *__src, char *a2, char *a3)
{
  BOOL v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      uint64_t v6 = *(void *)__src;
      int64_t v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      BOOL v4 = &__src[v7];
      *(void *)BOOL v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      uint64_t v8 = *((void *)a3 - 1);
      BOOL v4 = __src + 8;
      size_t v9 = a3 - 8 - __src;
      if (a3 - 8 != __src) {
        memmove(__src + 8, __src, v9);
      }
      *(void *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(__src, a2, a3);
    }
  }
  return v4;
}

void *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::WordHypLattice::Node **>>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      BOOL v4 = a1 + 1;
      unint64_t v5 = a2 + 1;
      do
      {
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2) {
          break;
        }
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    uint64_t v9 = a2 - a1;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      uint64_t v11 = &a1[v9];
      do
      {
        uint64_t v13 = *--v11;
        uint64_t v12 = v13;
        uint64_t v14 = &v11[v3];
        uint64_t v15 = v11;
        do
        {
          uint64_t v16 = v14;
          *uint64_t v15 = *v14;
          uint64_t v17 = &v14[v3];
          BOOL v18 = __OFSUB__(v3, a3 - v14);
          uint64_t v20 = v3 - (a3 - v14);
          char v19 = (v20 < 0) ^ v18;
          uint64_t v14 = &a1[v20];
          if (v19) {
            uint64_t v14 = v17;
          }
          uint64_t v15 = v16;
        }
        while (v14 != v11);
        *uint64_t v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

void *std::vector<kaldi::WordHypLattice::Node *>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    int64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B1D8C034(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizerParamManager::TTokenizerParamManager(TTokenizerParamManager *this, TLocaleInfo *a2)
{
  TParamManager::TParamManager(this, 0, a2);
  *uint64_t v3 = &unk_1F0A34468;
  uint64_t v9 = (TParam *)(v3 + 17);
  TBoolParam::TBoolParam((uint64_t)(v3 + 17), (uint64_t)"S", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 384, (uint64_t)"P", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 632, (uint64_t)"T", (uint64_t)"T", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 880, (uint64_t)"A", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 1128, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 1376, (uint64_t)"T", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 1624, (uint64_t)"T", (uint64_t)"A", 0, 1, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 1872, (uint64_t)"S", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 2120, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  ((void (*)(void))TStringParam::TStringParam)();
  ((void (*)(void))TStringParam::TStringParam)();
  TBoolParam::TBoolParam((uint64_t)this + 5120, (uint64_t)"D", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 5368, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 5616, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 5864, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 6112, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  ((void (*)(void))TStringParam::TStringParam)();
  TBoolParam::TBoolParam((uint64_t)this + 7736, (uint64_t)"C", (uint64_t)"R", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  ((void (*)(void))TStringParam::TStringParam)();
  ((void (*)(void))TStringParam::TStringParam)();
  ((void (*)(void))TStringParam::TStringParam)();
  TBoolParam::TBoolParam((uint64_t)this + 12112, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 12360, (uint64_t)"R", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 12608, (uint64_t)"C", (uint64_t)"N", 0, 1, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 12856, (uint64_t)"C", (uint64_t)"T", 0, 0, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 13104, (uint64_t)"D", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 13352, (uint64_t)"H", (uint64_t)"S", 0, 0, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 13600), (uint64_t)"N", (uint64_t)"I", 0, 0, 1000, 30, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 13952), (uint64_t)"M", (uint64_t)"I", 0, 0, 1000, 5, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 14304), (uint64_t)"N", (uint64_t)"W", 0, 0, 4, 0, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 14656), (uint64_t)"P", (uint64_t)"T", 0, 0, 300, 0, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 15008, (uint64_t)"P", (uint64_t)"I", 0, 0, (uint64_t)"9", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 15256, (uint64_t)"A", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 15504, (uint64_t)"M", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 15752), (uint64_t)"P", (uint64_t)"T", 0, -1, 100, 10, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16104), (uint64_t)"C", (uint64_t)"P", 0, 1, 256, 4, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16456), (uint64_t)"A", (uint64_t)"P", 0, 1, 256, 4, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 16808), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 20, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 17160), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 30, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 17512), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 40, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 17864, (uint64_t)"O", (uint64_t)"O", 0, 0, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18112), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, -1, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18464), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 50, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 18816), (uint64_t)"P", (uint64_t)"S", 0, -1, 100, 60, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 19168, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19416, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19664, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 19912, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20160, (uint64_t)"U", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20408, (uint64_t)"U", (uint64_t)"I", 0, 1, (uint64_t)"1", (uint64_t)"1");
  TBoolParam::TBoolParam((uint64_t)this + 20656, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 20904, (uint64_t)"L", (uint64_t)"I", 0, 0, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 21152), (uint64_t)"M", (uint64_t)"M", 0, 1, 100, 10, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 21504, (uint64_t)"L", (uint64_t)"L", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 21752, (uint64_t)"L", (uint64_t)"L", 0, 0, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 22000, (uint64_t)"D", (uint64_t)"D", 32, 1, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TBoolParam::TBoolParam((uint64_t)this + 22248, (uint64_t)"D", (uint64_t)"D", 288, 1, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  ((void (*)(void))TStringParam::TStringParam)();
  TStringParam::TStringParam((char *)this + 23872, "D", "D", 288, &dword_1B256EA48, "1", &dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 25248), (uint64_t)"D", (uint64_t)"D", 32, -1, 10, 5, (uint64_t)"9", (uint64_t)&dword_1B256EA48);
  TIntParam::TIntParam((TTokenizerParamManager *)((char *)this + 25600), (uint64_t)"D", (uint64_t)"D", 288, -1, 10, 5, (uint64_t)"1", (uint64_t)&dword_1B256EA48);
  TStringParam::TStringParam((char *)this + 25952, "D");
  TStringParam::TStringParam((char *)this + 27328, "D");
  TFloatParam::TFloatParam((uint64_t)this + 28704, (uint64_t)"D", (uint64_t)"D", 32, (uint64_t)"9", (uint64_t)&dword_1B256EA48, 0.0);
  TFloatParam::TFloatParam((uint64_t)this + 29240, (uint64_t)"D", (uint64_t)"D", 288, (uint64_t)"1", (uint64_t)&dword_1B256EA48, 0.0);
  TParamManager::add(this, v9);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 384));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 632));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 880));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1128));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1376));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1624));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 1872));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 2120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 2368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 3744));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5120));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5368));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5616));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 5864));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 6112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 6360));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 7736));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 7984));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 9360));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 10736));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12360));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12608));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 12856));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13104));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13352));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13600));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 13952));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 14304));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 14656));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15008));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15256));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15504));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 15752));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16104));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16456));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 16808));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17160));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17512));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 17864));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18112));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18464));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 18816));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19168));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19416));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19664));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 19912));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20160));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20408));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20656));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 20904));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21152));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21504));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 21752));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22000));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22248));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 22496));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 23872));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25248));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25600));
  MEMORY[0x1B3EA7C30]((char *)this + 25992, "D");
  MEMORY[0x1B3EA7C30]((char *)this + 26016, "9");
  MEMORY[0x1B3EA7C30]((char *)this + 26040, &dword_1B256EA48);
  *((void *)this + 3258) |= 0x20uLL;
  std::vector<std::wstring>::vector(&v11, 4uLL);
  std::vector<std::wstring>::vector(&v10, 4uLL);
  uint64_t v4 = 0;
  unint64_t v5 = (const __int32 *)"a";
  do
  {
    MEMORY[0x1B3EA7C30](&v11.__begin_[v4], v5);
    v5 += wcslen(v5) + 1;
    ++v4;
  }
  while (v4 != 4);
  TStringParam::setAllowables((uint64_t)this + 25952, (uint64_t)&v11, 0, 0);
  TStringParam::setOriginal((void *)this + 3244, 0, &dword_1B256EA48);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 25952));
  v12[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  v10.__begin_ = (std::vector<std::wstring>::pointer)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  MEMORY[0x1B3EA7C30]((char *)this + 27368, "D");
  MEMORY[0x1B3EA7C30]((char *)this + 27392, "1");
  MEMORY[0x1B3EA7C30]((char *)this + 27416, &dword_1B256EA48);
  *((void *)this + 3430) |= 0x120uLL;
  std::vector<std::wstring>::vector(&v11, 4uLL);
  std::vector<std::wstring>::vector(&v10, 4uLL);
  uint64_t v6 = 0;
  int64_t v7 = (const __int32 *)"a";
  do
  {
    MEMORY[0x1B3EA7C30](&v11.__begin_[v6], v7);
    v7 += wcslen(v7) + 1;
    ++v6;
  }
  while (v6 != 4);
  TStringParam::setAllowables((uint64_t)this + 27328, (uint64_t)&v11, 0, 0);
  TStringParam::setOriginal((void *)this + 3416, 0, &dword_1B256EA48);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 27328));
  v12[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v12);
  v10.__begin_ = (std::vector<std::wstring>::pointer)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 28704));
  TParamManager::add(this, (TTokenizerParamManager *)((char *)this + 29240));
  *(void *)&long long v8 = -1;
  *((void *)&v8 + 1) = -1;
  *((_OWORD *)this + 1862) = v8;
  *((_OWORD *)this + 1861) = v8;
}

void sub_1B1D8D3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,void **a27,void **a28,void **a29,void **a30,void **a31,void **a32,void **a33,void **a34,void **a35,void **a36,void **a37,void **a38,void **a39,void **a40,void **a41,void **a42,void **a43,void **a44,void **a45,void **a46,void **a47,void **a48,void **a49,void **a50,void **a51,void **a52,void **a53,void **a54)
{
  *(void *)(v62 - 144) = v62 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v62 - 144));
  TParam::~TParam(v60);
  TParam::~TParam(v55);
  TStringParam::~TStringParam(v59);
  TStringParam::~TStringParam(v58);
  TParam::~TParam(v57);
  TParam::~TParam(v56);
  TStringParam::~TStringParam(v61);
  TStringParam::~TStringParam(a11);
  TBoolParam::~TBoolParam(a12);
  TBoolParam::~TBoolParam(a13);
  TBoolParam::~TBoolParam(a14);
  TBoolParam::~TBoolParam(a15);
  TParam::~TParam(a16);
  TBoolParam::~TBoolParam(a17);
  TBoolParam::~TBoolParam(a18);
  TBoolParam::~TBoolParam(a19);
  TBoolParam::~TBoolParam(a20);
  TBoolParam::~TBoolParam(a21);
  TBoolParam::~TBoolParam(a22);
  TBoolParam::~TBoolParam(a23);
  TBoolParam::~TBoolParam(a24);
  TParam::~TParam(a25);
  TParam::~TParam(a26);
  TParam::~TParam(a27);
  TBoolParam::~TBoolParam(a28);
  TParam::~TParam(a29);
  TParam::~TParam(a30);
  TParam::~TParam(a31);
  TParam::~TParam(a32);
  TParam::~TParam(a33);
  TParam::~TParam(a34);
  TBoolParam::~TBoolParam(a35);
  TBoolParam::~TBoolParam(a36);
  TBoolParam::~TBoolParam(a37);
  TParam::~TParam(a38);
  TParam::~TParam(a39);
  TParam::~TParam(a40);
  TParam::~TParam(a41);
  TBoolParam::~TBoolParam(a42);
  TBoolParam::~TBoolParam(a43);
  TBoolParam::~TBoolParam(a44);
  TBoolParam::~TBoolParam(a45);
  TBoolParam::~TBoolParam(a46);
  TBoolParam::~TBoolParam(a47);
  TStringParam::~TStringParam(a48);
  TStringParam::~TStringParam(a49);
  TStringParam::~TStringParam(a50);
  TBoolParam::~TBoolParam(a51);
  TStringParam::~TStringParam(a52);
  TBoolParam::~TBoolParam(a53);
  TBoolParam::~TBoolParam(a54);
  TBoolParam::~TBoolParam(*(void ***)(v62 - 256));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 248));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 240));
  TStringParam::~TStringParam(*(void ***)(v62 - 232));
  TStringParam::~TStringParam(*(void ***)(v62 - 224));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 216));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 208));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 200));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 192));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 184));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 176));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 168));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 160));
  TBoolParam::~TBoolParam(*(void ***)(v62 - 152));
  TParamManager::~TParamManager(v54);
  _Unwind_Resume(a1);
}

void TParamManager::TParamManager(TParamManager *this, char a2, const TLocaleInfo *a3)
{
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F0A33A20;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 5) = (char *)this + 48;
  *((void *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((void *)this + 13) = 0;
  *((void *)this + 15) = a3;
  *((unsigned char *)this + 8) = a2;
  TParamManager::newConfig((uint64_t)this, (__int32 *)"H", (std::exception_vtbl *)0xFFFFFFFFFFFFFFFFLL);
  TParamManager::newConfig((uint64_t)this, (__int32 *)"R", 0);
  *((void *)this + 16) = -1;
}

void sub_1B1D8D8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  long long v8 = v5;
  std::__tree<std::string>::destroy(v4, *v7);
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<int>::destroy(v3, *v6);
  std::vector<std::wstring> v10 = *v8;
  if (*v8)
  {
    *(void *)(v2 + ++*(_DWORD *)(result + 24) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

void TStringParam::~TStringParam(void **this)
{
  *this = &unk_1F0A337B0;
  uint64_t v3 = this + 169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = 144;
  do
  {
    if (SHIBYTE(this[v2 + 18]) < 0) {
      operator delete(this[v2 + 16]);
    }
    v2 -= 3;
  }
  while (v2 * 8);
  TParam::~TParam(this);
}

{
  uint64_t v2;
  void **v3;

  *this = &unk_1F0A337B0;
  uint64_t v3 = this + 169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = this + 163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = 144;
  do
  {
    if (SHIBYTE(this[v2 + 18]) < 0) {
      operator delete(this[v2 + 16]);
    }
    v2 -= 3;
  }
  while (v2 * 8);
  TParam::~TParam(this);
  MEMORY[0x1B3EA8670]();
}

void TBoolParam::~TBoolParam(void **this)
{
  uint64_t v2 = 0;
  *this = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v2 + 30]) < 0) {
      operator delete(this[v2 + 28]);
    }
    v2 -= 3;
  }
  while (v2 != -6);
  TParam::~TParam(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = 0;
  *this = &unk_1F0A32E48;
  while (1)
  {
    if (SHIBYTE(this[v2 + 30]) < 0) {
      operator delete(this[v2 + 28]);
    }
    v2 -= 3;
    if (v2 == -6)
    {
      TParam::~TParam(this);
      JUMPOUT(0x1B3EA8670);
    }
  }
}

void TTokenizerParamManager::notifyChange(TTokenizerParamManager *this, const TParam *a2)
{
  if ((TTokenizerParamManager *)((char *)this + 3744) == a2)
  {
    uint64_t v3 = TStringParam::get(a2);
    if (wcslen((const __int32 *)v3))
    {
      uint64_t v4 = (unsigned int *)TStringParam::get(a2);
      loggableUnicode(v4, __p);
      if (v8 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      tknPrintf("Warning: CharacterMapping contains an odd number of characters: <%s>\n", v5, v6);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1B1D8DAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *TTokenizerParamManager::upgradeParam(void *this, const TParam *a2)
{
  uint64_t v3 = this;
  if (this + 2396 == (void *)a2)
  {
    uint64_t ActiveConfigHandle = TParam::getActiveConfigHandle(a2);
    uint64_t ValidConfig = TParam::getValidConfig(a2, ActiveConfigHandle);
    uint64_t v6 = (TParam *)(v3 + 2101);
    if (!*((unsigned char *)v3 + ValidConfig + 19320)) {
      goto LABEL_23;
    }
    uint64_t v7 = v3[16];
    v3[2115] &= ~(1 << (v7 + 33));
LABEL_20:
    return (void *)TParam::notifyChange((uint64_t)v6, v7);
  }
  if (this + 2427 == (void *)a2)
  {
    uint64_t v8 = TParam::getActiveConfigHandle(a2);
    uint64_t v9 = TParam::getValidConfig(a2, v8);
    uint64_t v6 = (TParam *)(v3 + 2145);
    if (!*((unsigned char *)v3 + v9 + 19568)) {
      goto LABEL_23;
    }
    uint64_t v7 = v3[16];
    v3[2159] &= ~(1 << (v7 + 33));
    goto LABEL_20;
  }
  if (this + 2458 == (void *)a2)
  {
    uint64_t v10 = TParam::getActiveConfigHandle(a2);
    uint64_t v11 = TParam::getValidConfig(a2, v10);
    uint64_t v6 = (TParam *)(v3 + 2189);
    if (!*((unsigned char *)v3 + v11 + 19816)) {
      goto LABEL_23;
    }
    uint64_t v7 = v3[16];
    v3[2203] &= ~(1 << (v7 + 33));
    goto LABEL_20;
  }
  if (this + 2520 != (void *)a2)
  {
    if (this + 2551 != (void *)a2)
    {
      if (this + 2489 != (void *)a2) {
        return this;
      }
      uint64_t v20 = TParam::getActiveConfigHandle(a2);
      uint64_t v21 = TParam::getValidConfig(a2, v20);
      uint64_t v6 = (TParam *)(v3 + 2352);
      if (*((unsigned char *)v3 + v21 + 20064))
      {
        uint64_t v7 = v3[16];
        v3[2366] &= ~(1 << (v7 + 33));
        goto LABEL_20;
      }
      goto LABEL_23;
    }
    uint64_t v18 = TParam::getActiveConfigHandle(a2);
    uint64_t v19 = TParam::getValidConfig(a2, v18);
    uint64_t v6 = (TParam *)(v3 + 2308);
    if (*((unsigned char *)v3 + v19 + 20560))
    {
      uint64_t v7 = v3[16];
      v3[2322] &= ~(1 << (v7 + 33));
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v15 = TParam::getActiveConfigHandle(v6);
    uint64_t v16 = v6;
    goto LABEL_24;
  }
  uint64_t v12 = TParam::getActiveConfigHandle(a2);
  int v13 = *((unsigned __int8 *)v3 + TParam::getValidConfig(a2, v12) + 20312);
  uint64_t v14 = (TParam *)(v3 + 2264);
  uint64_t v15 = TParam::getActiveConfigHandle(v14);
  uint64_t v16 = v14;
  if (!v13)
  {
LABEL_24:
    int v17 = -1;
    goto LABEL_25;
  }
  int v17 = 45;
LABEL_25:
  return (void *)TIntParam::set(v16, v15, v17);
}

uint64_t TTokenizerParamManager::initializeParamConfigs(TTokenizerParamManager *this)
{
  uint64_t Config = TParamManager::getConfig((uint64_t)this, dword_1B257A254);
  *((void *)this + 3723) = Config;
  if (Config == -1) {
    *((void *)this + 3723) = TParamManager::newConfig((uint64_t)this, dword_1B257A254, (std::exception_vtbl *)1);
  }
  uint64_t v3 = TParamManager::getConfig((uint64_t)this, dword_1B257A298);
  *((void *)this + 37++*(_DWORD *)(result + 24) = v3;
  if (v3 == -1)
  {
    unint64_t v4 = TParamManager::newConfig((uint64_t)this, dword_1B257A298, (std::exception_vtbl *)1);
    *((void *)this + 37++*(_DWORD *)(result + 24) = v4;
    *((unsigned char *)this + v4 + 18016) = 1;
    *((void *)this + 2247) |= 1 << (v4 + 9);
    TParam::notifyChange((uint64_t)this + 17864, v4);
  }
  uint64_t v5 = TParamManager::getConfig((uint64_t)this, dword_1B257A2BC);
  *((void *)this + 3725) = v5;
  if (v5 == -1)
  {
    unint64_t v6 = TParamManager::newConfig((uint64_t)this, dword_1B257A2BC, (std::exception_vtbl *)1);
    *((void *)this + 3725) = v6;
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 14304), v6, 0);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 17512), *((void *)this + 3725), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18112), *((void *)this + 3725), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18464), *((void *)this + 3725), -1);
    TIntParam::setOriginal((TTokenizerParamManager *)((char *)this + 18816), *((void *)this + 3725), -1);
  }
  uint64_t result = TParamManager::getConfig((uint64_t)this, dword_1B257A2E0);
  *((void *)this + 3722) = result;
  if (result == -1)
  {
    unint64_t v8 = TParamManager::newConfig((uint64_t)this, dword_1B257A2E0, *((std::exception_vtbl **)this + 3723));
    *((void *)this + 3722) = v8;
    *((unsigned char *)this + v8 + 784) = 1;
    *((void *)this + 93) |= 1 << (v8 + 9);
    return TParam::notifyChange((uint64_t)this + 632, v8);
  }
  return result;
}

uint64_t TParamManager::getConfig(uint64_t a1, __int32 *a2)
{
  uint64_t v3 = a1 + 88;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, a2);
  unint64_t v4 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(v3, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((void *)(a1 + 96) == v4) {
    return -1;
  }
  else {
    return v4[7];
  }
}

void sub_1B1D8DFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void TTokenizerParamManager::~TTokenizerParamManager(void **this)
{
  TTokenizerParamManager::~TTokenizerParamManager(this);
  JUMPOUT(0x1B3EA8670);
}

{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t v31;
  uint64_t kk;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t mm;
  uint64_t nn;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void **v49;

  *this = &unk_1F0A34468;
  TParam::~TParam(this + 3655);
  TParam::~TParam(this + 3588);
  this[3416] = &unk_1F0A337B0;
  uint64_t v49 = this + 3585;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 3582;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 3579;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (uint64_t i = 0; i != -144; i -= 3)
  {
    if (SHIBYTE(this[i + 3578]) < 0) {
      operator delete(this[i + 3576]);
    }
  }
  TParam::~TParam(this + 3416);
  this[3244] = &unk_1F0A337B0;
  uint64_t v49 = this + 3413;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 3410;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 3407;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (uint64_t j = 0; j != -144; j -= 3)
  {
    if (SHIBYTE(this[j + 3406]) < 0) {
      operator delete(this[j + 3404]);
    }
  }
  TParam::~TParam(this + 3244);
  TParam::~TParam(this + 3200);
  TParam::~TParam(this + 3156);
  this[2984] = &unk_1F0A337B0;
  uint64_t v49 = this + 3153;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 3150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 3147;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (k = 0; k != -144; k -= 3)
  {
    if (SHIBYTE(this[k + 3146]) < 0) {
      operator delete(this[k + 3144]);
    }
  }
  TParam::~TParam(this + 2984);
  this[2812] = &unk_1F0A337B0;
  uint64_t v49 = this + 2981;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 2978;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 2975;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (m = 0; m != -144; m -= 3)
  {
    if (SHIBYTE(this[m + 2974]) < 0) {
      operator delete(this[m + 2972]);
    }
  }
  TParam::~TParam(this + 2812);
  unint64_t v6 = 0;
  this[2781] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v6 + 2811]) < 0) {
      operator delete(this[v6 + 2809]);
    }
    v6 -= 3;
  }
  while (v6 != -6);
  TParam::~TParam(this + 2781);
  char v7 = 0;
  this[2750] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v7 + 2780]) < 0) {
      operator delete(this[v7 + 2778]);
    }
    v7 -= 3;
  }
  while (v7 != -6);
  TParam::~TParam(this + 2750);
  unint64_t v8 = 0;
  this[2719] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v8 + 2749]) < 0) {
      operator delete(this[v8 + 2747]);
    }
    v8 -= 3;
  }
  while (v8 != -6);
  TParam::~TParam(this + 2719);
  uint64_t v9 = 0;
  this[2688] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v9 + 2718]) < 0) {
      operator delete(this[v9 + 2716]);
    }
    v9 -= 3;
  }
  while (v9 != -6);
  TParam::~TParam(this + 2688);
  TParam::~TParam(this + 2644);
  uint64_t v10 = 0;
  this[2613] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v10 + 2643]) < 0) {
      operator delete(this[v10 + 2641]);
    }
    v10 -= 3;
  }
  while (v10 != -6);
  TParam::~TParam(this + 2613);
  uint64_t v11 = 0;
  this[2582] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v11 + 2612]) < 0) {
      operator delete(this[v11 + 2610]);
    }
    v11 -= 3;
  }
  while (v11 != -6);
  TParam::~TParam(this + 2582);
  uint64_t v12 = 0;
  this[2551] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v12 + 2581]) < 0) {
      operator delete(this[v12 + 2579]);
    }
    v12 -= 3;
  }
  while (v12 != -6);
  TParam::~TParam(this + 2551);
  int v13 = 0;
  this[2520] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v13 + 2550]) < 0) {
      operator delete(this[v13 + 2548]);
    }
    v13 -= 3;
  }
  while (v13 != -6);
  TParam::~TParam(this + 2520);
  uint64_t v14 = 0;
  this[2489] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v14 + 2519]) < 0) {
      operator delete(this[v14 + 2517]);
    }
    v14 -= 3;
  }
  while (v14 != -6);
  TParam::~TParam(this + 2489);
  uint64_t v15 = 0;
  this[2458] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v15 + 2488]) < 0) {
      operator delete(this[v15 + 2486]);
    }
    v15 -= 3;
  }
  while (v15 != -6);
  TParam::~TParam(this + 2458);
  uint64_t v16 = 0;
  this[2427] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v16 + 2457]) < 0) {
      operator delete(this[v16 + 2455]);
    }
    v16 -= 3;
  }
  while (v16 != -6);
  TParam::~TParam(this + 2427);
  int v17 = 0;
  this[2396] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v17 + 2426]) < 0) {
      operator delete(this[v17 + 2424]);
    }
    v17 -= 3;
  }
  while (v17 != -6);
  TParam::~TParam(this + 2396);
  TParam::~TParam(this + 2352);
  TParam::~TParam(this + 2308);
  TParam::~TParam(this + 2264);
  uint64_t v18 = 0;
  this[2233] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v18 + 2263]) < 0) {
      operator delete(this[v18 + 2261]);
    }
    v18 -= 3;
  }
  while (v18 != -6);
  TParam::~TParam(this + 2233);
  TParam::~TParam(this + 2189);
  TParam::~TParam(this + 2145);
  TParam::~TParam(this + 2101);
  TParam::~TParam(this + 2057);
  TParam::~TParam(this + 2013);
  TParam::~TParam(this + 1969);
  uint64_t v19 = 0;
  this[1938] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v19 + 1968]) < 0) {
      operator delete(this[v19 + 1966]);
    }
    v19 -= 3;
  }
  while (v19 != -6);
  TParam::~TParam(this + 1938);
  uint64_t v20 = 0;
  this[1907] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v20 + 1937]) < 0) {
      operator delete(this[v20 + 1935]);
    }
    v20 -= 3;
  }
  while (v20 != -6);
  TParam::~TParam(this + 1907);
  uint64_t v21 = 0;
  this[1876] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v21 + 1906]) < 0) {
      operator delete(this[v21 + 1904]);
    }
    v21 -= 3;
  }
  while (v21 != -6);
  TParam::~TParam(this + 1876);
  TParam::~TParam(this + 1832);
  TParam::~TParam(this + 1788);
  TParam::~TParam(this + 1744);
  TParam::~TParam(this + 1700);
  unint64_t v22 = 0;
  this[1669] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v22 + 1699]) < 0) {
      operator delete(this[v22 + 1697]);
    }
    v22 -= 3;
  }
  while (v22 != -6);
  TParam::~TParam(this + 1669);
  uint64_t v23 = 0;
  this[1638] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v23 + 1668]) < 0) {
      operator delete(this[v23 + 1666]);
    }
    v23 -= 3;
  }
  while (v23 != -6);
  TParam::~TParam(this + 1638);
  uint64_t v24 = 0;
  this[1607] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v24 + 1637]) < 0) {
      operator delete(this[v24 + 1635]);
    }
    v24 -= 3;
  }
  while (v24 != -6);
  TParam::~TParam(this + 1607);
  uint64_t v25 = 0;
  this[1576] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v25 + 1606]) < 0) {
      operator delete(this[v25 + 1604]);
    }
    v25 -= 3;
  }
  while (v25 != -6);
  TParam::~TParam(this + 1576);
  uint64_t v26 = 0;
  this[1545] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v26 + 1575]) < 0) {
      operator delete(this[v26 + 1573]);
    }
    v26 -= 3;
  }
  while (v26 != -6);
  TParam::~TParam(this + 1545);
  unint64_t v27 = 0;
  this[1514] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v27 + 1544]) < 0) {
      operator delete(this[v27 + 1542]);
    }
    v27 -= 3;
  }
  while (v27 != -6);
  TParam::~TParam(this + 1514);
  this[1342] = &unk_1F0A337B0;
  uint64_t v49 = this + 1511;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 1508;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 1505;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (n = 0; n != -144; n -= 3)
  {
    if (SHIBYTE(this[n + 1504]) < 0) {
      operator delete(this[n + 1502]);
    }
  }
  TParam::~TParam(this + 1342);
  this[1170] = &unk_1F0A337B0;
  uint64_t v49 = this + 1339;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 1336;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 1333;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (iuint64_t i = 0; ii != -144; ii -= 3)
  {
    if (SHIBYTE(this[ii + 1332]) < 0) {
      operator delete(this[ii + 1330]);
    }
  }
  TParam::~TParam(this + 1170);
  this[998] = &unk_1F0A337B0;
  uint64_t v49 = this + 1167;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 1164;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 1161;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (juint64_t j = 0; jj != -144; jj -= 3)
  {
    if (SHIBYTE(this[jj + 1160]) < 0) {
      operator delete(this[jj + 1158]);
    }
  }
  TParam::~TParam(this + 998);
  uint64_t v31 = 0;
  this[967] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v31 + 997]) < 0) {
      operator delete(this[v31 + 995]);
    }
    v31 -= 3;
  }
  while (v31 != -6);
  TParam::~TParam(this + 967);
  this[795] = &unk_1F0A337B0;
  uint64_t v49 = this + 964;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 961;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 958;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (kk = 0; kk != -144; kk -= 3)
  {
    if (SHIBYTE(this[kk + 957]) < 0) {
      operator delete(this[kk + 955]);
    }
  }
  TParam::~TParam(this + 795);
  uint64_t v33 = 0;
  this[764] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v33 + 794]) < 0) {
      operator delete(this[v33 + 792]);
    }
    v33 -= 3;
  }
  while (v33 != -6);
  TParam::~TParam(this + 764);
  uint64_t v34 = 0;
  this[733] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v34 + 763]) < 0) {
      operator delete(this[v34 + 761]);
    }
    v34 -= 3;
  }
  while (v34 != -6);
  TParam::~TParam(this + 733);
  uint64_t v35 = 0;
  this[702] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v35 + 732]) < 0) {
      operator delete(this[v35 + 730]);
    }
    v35 -= 3;
  }
  while (v35 != -6);
  TParam::~TParam(this + 702);
  uint64_t v36 = 0;
  this[671] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v36 + 701]) < 0) {
      operator delete(this[v36 + 699]);
    }
    v36 -= 3;
  }
  while (v36 != -6);
  TParam::~TParam(this + 671);
  long long v37 = 0;
  this[640] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v37 + 670]) < 0) {
      operator delete(this[v37 + 668]);
    }
    v37 -= 3;
  }
  while (v37 != -6);
  TParam::~TParam(this + 640);
  this[468] = &unk_1F0A337B0;
  uint64_t v49 = this + 637;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 634;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 631;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (mm = 0; mm != -144; mm -= 3)
  {
    if (SHIBYTE(this[mm + 630]) < 0) {
      operator delete(this[mm + 628]);
    }
  }
  TParam::~TParam(this + 468);
  this[296] = &unk_1F0A337B0;
  uint64_t v49 = this + 465;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 462;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v49 = this + 459;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v49);
  for (nn = 0; nn != -144; nn -= 3)
  {
    if (SHIBYTE(this[nn + 458]) < 0) {
      operator delete(this[nn + 456]);
    }
  }
  TParam::~TParam(this + 296);
  uint64_t v40 = 0;
  this[265] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v40 + 295]) < 0) {
      operator delete(this[v40 + 293]);
    }
    v40 -= 3;
  }
  while (v40 != -6);
  TParam::~TParam(this + 265);
  long long v41 = 0;
  this[234] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v41 + 264]) < 0) {
      operator delete(this[v41 + 262]);
    }
    v41 -= 3;
  }
  while (v41 != -6);
  TParam::~TParam(this + 234);
  uint64_t v42 = 0;
  this[203] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v42 + 233]) < 0) {
      operator delete(this[v42 + 231]);
    }
    v42 -= 3;
  }
  while (v42 != -6);
  TParam::~TParam(this + 203);
  uint64_t v43 = 0;
  this[172] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v43 + 202]) < 0) {
      operator delete(this[v43 + 200]);
    }
    v43 -= 3;
  }
  while (v43 != -6);
  TParam::~TParam(this + 172);
  uint64_t v44 = 0;
  this[141] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v44 + 171]) < 0) {
      operator delete(this[v44 + 169]);
    }
    v44 -= 3;
  }
  while (v44 != -6);
  TParam::~TParam(this + 141);
  uint64_t v45 = 0;
  this[110] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v45 + 140]) < 0) {
      operator delete(this[v45 + 138]);
    }
    v45 -= 3;
  }
  while (v45 != -6);
  TParam::~TParam(this + 110);
  uint64_t v46 = 0;
  this[79] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v46 + 109]) < 0) {
      operator delete(this[v46 + 107]);
    }
    v46 -= 3;
  }
  while (v46 != -6);
  TParam::~TParam(this + 79);
  float v47 = 0;
  this[48] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v47 + 78]) < 0) {
      operator delete(this[v47 + 76]);
    }
    v47 -= 3;
  }
  while (v47 != -6);
  TParam::~TParam(this + 48);
  float v48 = 0;
  this[17] = &unk_1F0A32E48;
  do
  {
    if (SHIBYTE(this[v48 + 47]) < 0) {
      operator delete(this[v48 + 45]);
    }
    v48 -= 3;
  }
  while (v48 != -6);
  TParam::~TParam(this + 17);
  TParamManager::~TParamManager((TParamManager *)this);
}

void std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned long,std::wstring>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<unsigned long,std::wstring>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t TBoolParam::TBoolParam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = TParam::TParam(a1, 0, a2, a3, a4, a6, a7);
  *(void *)uint64_t v9 = &unk_1F0A32E48;
  *(_OWORD *)(v9 + 200) = 0u;
  *(_OWORD *)(v9 + 216) = 0u;
  *(_OWORD *)(v9 + 232) = 0u;
  *(unsigned char *)(v9 + 1--*(_DWORD *)(a9 + 52) = a5;
  *(void *)(v9 + 112) |= 0x200uLL;
  TParam::notifyChange(v9, 0);
  return a1;
}

void sub_1B1D8E128(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (SHIBYTE(v1[v3 + 30]) < 0) {
      operator delete(v1[v3 + 28]);
    }
    v3 -= 3;
    if (v3 == -6)
    {
      TParam::~TParam(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t TFloatParam::TFloatParam(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9 = TParam::TParam(a1, 3, a2, a3, a4, a5, a6);
  *(void *)uint64_t v9 = &unk_1F0A330C0;
  *(double *)(v9 + 1--*(_DWORD *)(a9 + 52) = a7;
  *(void *)(v9 + 112) |= 0x200uLL;
  TParam::notifyChange(v9, 0);
  return a1;
}

void sub_1B1D8E1E0(_Unwind_Exception *a1)
{
  TParam::~TParam(v1);
  _Unwind_Resume(a1);
}

uint64_t TStringParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (char *)a1 + 24 * TParam::getValidConfig(a1, a2);
  uint64_t v5 = (int *)(v4 + 152);
  if (v4[175] < 0) {
    uint64_t v5 = *(int **)v5;
  }
  return TBuffer<wchar_t>::assign(a3, v5);
}

uint64_t TStringParam::getValueOriginal(TParam *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (char *)a1 + 24 * TParam::getValidOriginalConfig(a1, a2);
  uint64_t v5 = (int *)(v4 + 152);
  if (v4[175] < 0) {
    uint64_t v5 = *(int **)v5;
  }
  return TBuffer<wchar_t>::assign(a3, v5);
}

void *std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = std::less<std::wstring>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    unint64_t v8 = v3 + 1;
    if (!v7)
    {
      unint64_t v8 = v3;
      unint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::wstring>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t std::less<std::wstring>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(char *)(a3 + 23);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v4 = *(void *)(a3 + 8);
  }
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  if (v4 >= v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = v4;
  }
  if (!v7
    || (v5 >= 0 ? (unint64_t v8 = (const __int32 *)a2) : (unint64_t v8 = *(const __int32 **)a2),
        v3 >= 0 ? (uint64_t v9 = (const __int32 *)a3) : (uint64_t v9 = *(const __int32 **)a3),
        (unsigned int v10 = wmemcmp(v8, v9, v7)) == 0))
  {
    if (v6 < v4) {
      unsigned int v10 = -1;
    }
    else {
      unsigned int v10 = v4 < v6;
    }
  }
  return v10 >> 31;
}

std::vector<std::wstring> *__cdecl std::vector<std::wstring>::vector(std::vector<std::wstring> *this, std::vector<std::wstring>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::wstring>::pointer end = this->__end_;
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::wstring>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_1B1D8F820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t kaldi::StandardErrorLogger(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s\n", v1);
}

uint64_t kaldi::StandardErrorVLogger(uint64_t a1)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s\n", v1);
}

void kaldi::KaldiGetStackTrace(std::string *a1@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  memset(v10, 0, sizeof(v10));
  signed int v3 = backtrace((void **)v10, 50);
  size_t v4 = backtrace_symbols((void *const *)v10, v3);
  size_t v5 = v4;
  uint64_t v6 = v3;
  if (v3 >= 0x33)
  {
    for (uint64_t i = 0; i != 25; ++i)
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, v5[i]);
      std::string::append(a1, "\n");
    }
    std::string::append(a1, ".\n.\n.\n");
    unint64_t v9 = v3 - 25;
    do
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, v5[v9]);
      std::string::append(a1, "\n");
      ++v9;
    }
    while (v9 < v3);
  }
  else if (v3)
  {
    size_t v7 = v4;
    do
    {
      kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(a1, *v7);
      std::string::append(a1, "\n");
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v5);
}

void sub_1B1D8FA6C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::KALDI_APPEND_POSSIBLY_DEMANGLED_STRING(std::string *a1, char *__s)
{
  size_t v4 = strchr(__s, 40);
  if (v4 && (size_t v5 = v4, (v6 = strchr(v4, 43)) != 0))
  {
    int status = 0;
    std::string::basic_string[abi:ne180100](__p, v5 + 1, v6 - (v5 + 1));
    if (v10 >= 0) {
      size_t v7 = __p;
    }
    else {
      size_t v7 = (void **)__p[0];
    }
    unint64_t v8 = __cxa_demangle((const char *)v7, 0, 0, &status);
    if (v8)
    {
      std::string::append(a1, v8);
      free(v8);
    }
    else
    {
      std::string::append(a1, __s);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::append(a1, __s);
  }
}

void sub_1B1D8FB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::KaldiWarnMessage::KaldiWarnMessage(kaldi::KaldiWarnMessage *this)
{
  uint64_t result = std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  *(void *)(result + 264) = v1;
  return result;
}

void kaldi::KaldiWarnMessage::~KaldiWarnMessage(kaldi::KaldiWarnMessage *this)
{
  uint64_t v2 = kaldi::KaldiWarnMessage::g_logger;
  std::stringbuf::str();
  ((void (*)(std::string *, void))v2)(&v18, *((void *)this + 33));
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (getenv("QSR_CRASH_ON_WARN"))
  {
    if (std::uncaught_exception()) {
      abort();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    uint64_t v6 = std::string::append(&v15, "\n\n[stack trace: ]\n");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    kaldi::KaldiGetStackTrace(&v14);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v14;
    }
    else {
      unint64_t v8 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v14.__r_.__value_.__l.__size_;
    }
    char v10 = std::string::append(&v16, (const std::string::value_type *)v8, size);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v17, "\n");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v18);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  *(void *)this = *MEMORY[0x1E4FBA418];
  *(void *)((char *)this + *(void *)(v4 - 24)) = *(void *)(v3 + 24);
  *((void *)this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B3EA8520]((char *)this + 112);
}

void sub_1B1D8FE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 41) < 0) {
    operator delete(*(void **)(v36 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      std::ostringstream::~ostringstream(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

uint64_t kaldi::KaldiVlogMessage::KaldiVlogMessage(kaldi::KaldiVlogMessage *this, int a2)
{
  uint64_t result = std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  *(_DWORD *)(result + 264) = a2;
  *(void *)(result + 272) = v2;
  return result;
}

void kaldi::KaldiErrorMessage::~KaldiErrorMessage(kaldi::KaldiErrorMessage *this)
{
  uint64_t v2 = kaldi::KaldiErrorMessage::g_logger;
  std::stringbuf::str();
  ((void (*)(std::string *, void))v2)(&v16, *((void *)this + 33));
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (std::uncaught_exception()) {
    abort();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  uint64_t v4 = std::string::append(&v13, "\n\n[stack trace: ]\n");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  kaldi::KaldiGetStackTrace(&v12);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v12;
  }
  else {
    uint64_t v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  unint64_t v8 = std::string::append(&v14, (const std::string::value_type *)v6, size);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  char v10 = std::string::append(&v15, "\n");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v16);
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage(this);
}

void sub_1B1D9007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      uint64_t v38 = MEMORY[0x1E4FBA418];
      uint64_t v39 = *MEMORY[0x1E4FBA418];
      *(void *)uint64_t v33 = *MEMORY[0x1E4FBA418];
      *(void *)(v33 + *(void *)(v39 - 24)) = *(void *)(v38 + 24);
      *(void *)(v33 + 8) = MEMORY[0x1E4FBA470] + 16;
      if (*(char *)(v33 + 95) < 0) {
        operator delete(*(void **)(v33 + 72));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](v33 + 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

void quasar::NNLmConfig::NNLmConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0x3F80000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)a1 = &unk_1F0A51918;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  quasar::LmBuildConfig::readSysConfig(a1, a2, a3);
}

void sub_1B1D90CD0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1D90EE0);
}

void sub_1B1D90CE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::string __p = (void *)(v42 - 232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1B1D90EB0);
}

void sub_1B1D90DD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1D90EB0);
}

void sub_1B1D90EAC(_Unwind_Exception *a1)
{
  if (*(char *)(v3 - 185) < 0) {
    operator delete(*(void **)(v3 - 208));
  }
  if (*(char *)(v3 - 161) < 0) {
    operator delete(*(void **)(v3 - 184));
  }
  quasar::NNLmConfig::NNLmConfigParameters::~NNLmConfigParameters(v2);
  quasar::LmBuildConfig::~LmBuildConfig(v1);
  _Unwind_Resume(a1);
}

void quasar::NNLmConfig::NNLmConfigParameters::~NNLmConfigParameters(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t quasar::NNLmConfig::getType(quasar::NNLmConfig *this)
{
  return 5;
}

void quasar::NNLmModel::NNLmModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 904) = &unk_1F0A51710;
  *(unsigned char *)(a1 + 912) = 0;
  *(void *)(a1 + 916) = 0x3F8000003F800000;
  uint64_t v7 = quasar::LmModel2::LmModel2((quasar::LmModel2 *)a1, 1.0, 1.0, (uint64_t *)&off_1F0A32A40);
  *(void *)uint64_t v7 = off_1F0A594F8;
  *((void *)v7 + 113) = off_1F0A59548;
  quasar::ModelLoader::ModelLoader((quasar::LmModel2 *)((char *)v7 + 240));
  *(void *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  quasar::LmModel2::setModelSysConfigParams((quasar::LmModel2 *)a1, (const quasar::LmBuildConfig::ModelSysConfigParameters *)(*(void *)a5 + 8));
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 8) = 1;
  std::allocate_shared[abi:ne180100]<quasar::NNLmConfig::NNLmConfigParameters,std::allocator<quasar::NNLmConfig::NNLmConfigParameters>,quasar::NNLmConfig::NNLmConfigParameters const&,void>((const quasar::NNLmConfig::NNLmConfigParameters *)(*(void *)a5 + 120), __p);
  long long v8 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 880);
  *(_OWORD *)(a1 + 872) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
  operator new();
}

void sub_1B1D911E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](&a23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (a18 < 0) {
    operator delete(__p);
  }
  unint64_t v27 = (std::__shared_weak_count *)*((void *)v23 + 112);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  unint64_t v28 = (std::__shared_weak_count *)*((void *)v23 + 110);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v29 = *v25;
  uint64_t *v25 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  quasar::ModelLoader::~ModelLoader(v24);
  quasar::LmModel2::~LmModel2(v23, (uint64_t *)&off_1F0A32A40);
  _Unwind_Resume(a1);
}

void sub_1B1D912AC()
{
}

uint64_t std::function<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::function<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,void>(uint64_t a1, uint64_t *a2)
{
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  uint64_t v4 = (char *)operator new(0x38uLL);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1F0A5C3E0;
  *((void *)v4 + 1) = v5;
  uint64_t v6 = (std::string *)(v4 + 16);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)a2[1], a2[2]);
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 1);
    *((void *)v4 + 4) = a2[3];
  }
  *((void *)v4 + 5) = a2[4];
  *((_DWORD *)v4 + 12) = *((_DWORD *)a2 + 10);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v4;
  return a1;
}

void sub_1B1D91350(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::NNLmModel::NNLmModel(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, float a6, float a7, float a8)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 904) = &unk_1F0A51710;
  *(unsigned char *)(a1 + 912) = 0;
  *(float *)(a1 + 916) = a6;
  *(float *)(a1 + 920) = a7;
  std::string v14 = quasar::LmModel2::LmModel2((quasar::LmModel2 *)a1, a6, a7, (uint64_t *)&off_1F0A32A40);
  *(void *)std::string v14 = off_1F0A594F8;
  *((void *)v14 + 113) = off_1F0A59548;
  quasar::ModelLoader::ModelLoader((quasar::LmModel2 *)((char *)v14 + 240));
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(void *)(a1 + 896) = 0;
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 8) = 1;
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  memset(v23, 0, sizeof(v23));
  uint64_t v18 = a1;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  char v20 = a4;
  float v21 = a8;
  int v22 = a5;
  std::function<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::function<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,void>((uint64_t)v28, &v18);
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::loadMasterLmOrCreatePlaceholder(a2, (uint64_t)v24, v23, (uint64_t)v28, &v26);
  long long v15 = v26;
  long long v26 = 0uLL;
  std::string v16 = *(std::__shared_weak_count **)(a1 + 896);
  *(_OWORD *)(a1 + 888) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  std::__function::__value_func<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__value_func[abi:ne180100](v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v27 = (void **)v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  return a1;
}

void sub_1B1D9156C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char *a29)
{
  a29 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (a26 < 0) {
    operator delete(__p);
  }
  uint64_t v32 = (std::__shared_weak_count *)v29[112];
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v33 = v29 + 108;
  uint64_t v34 = (std::__shared_weak_count *)v29[110];
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v35 = *v33;
  *uint64_t v33 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  quasar::ModelLoader::~ModelLoader(v30);
  quasar::LmModel2::~LmModel2((quasar::LmModel2 *)v29, (uint64_t *)&off_1F0A32A40);
  _Unwind_Resume(a1);
}

void quasar::NNLmModel::trainOnData(uint64_t a1, uint64_t a2, const kaldi::Timer *a3, uint64_t **a4)
{
  if (*(_DWORD *)(a2 + 104))
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Other data type is not supported for NNLM trainer.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  Sentences = (uint64_t *)quasar::LmData::getSentences(a2, 0);
  uint64_t v9 = (uint64_t *)quasar::LmData::getSentences(a2, 1u);
  quasar::GlobalNNLMWrapper::loadData(*(void *)(a1 + 864), Sentences, v9, a3, a4);
  quasar::GlobalNNLMWrapper::setup(*(void *)(a1 + 864), a3, a4);
  quasar::GlobalNNLMWrapper::loadWeight(*(void *)(a1 + 864), a3, a4);
  uint64_t v10 = *(void *)(a1 + 872);
  if (*(unsigned char *)(v10 + 88))
  {
    quasar::GlobalNNLMWrapper::evaluate(*(void *)(a1 + 864), a3, a4);
    uint64_t v10 = *(void *)(a1 + 872);
  }
  if (*(int *)(v10 + 84) >= 1)
  {
    int v11 = 0;
    do
    {
      quasar::GlobalNNLMWrapper::train(*(void *)(a1 + 864), a3, a4);
      uint64_t v12 = *(void *)(a1 + 872);
      if (*(unsigned char *)(v12 + 88))
      {
        quasar::GlobalNNLMWrapper::evaluate(*(void *)(a1 + 864), a3, a4);
        uint64_t v12 = *(void *)(a1 + 872);
      }
      ++v11;
    }
    while (v11 < *(_DWORD *)(v12 + 84));
  }
}

void quasar::NNLmModel::AddTo(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, unsigned int a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = *(void *)(a1 + 888);
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  quasar::RegionalLmPlug<std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase>>::getCachedModel(v14, (uint64_t)v22, &v24);
  std::string __p = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  v18[0] = 0;
  v18[1] = 0;
  std::string v17 = v18;
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(a2, v24, a3, a9, (__int32 **)&__p, (uint64_t)&v17, 0, a5, a6, a10);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v15);
  std::__tree<int>::destroy((uint64_t)&v17, v18[0]);
  if (__p)
  {
    char v20 = __p;
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
}

void sub_1B1D918A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a13);
  std::__tree<int>::destroy((uint64_t)&a18, a19);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 56);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*(char *)(v22 - 65) < 0) {
    operator delete(*(void **)(v22 - 88));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'quasar::NNLmModel::AddTo(void *a1, uint64_t a2, unsigned int **a3, uint64_t a4, unsigned int a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void quasar::trainOrAdaptNNLMModel(void *a1@<X0>, clockid_t a2@<W1>, void *a3@<X8>)
{
  v29[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v29, a2);
  uint64_t v30 = 0;
  v28[0] = 0;
  v28[1] = 0;
  void v27[4] = v28;
  quasar::filesystem::Path::Path(v27, *a1 + 120);
  quasar::filesystem::Path::Path(&v26, *a1 + 144);
  quasar::filesystem::Path::normalize((quasar::filesystem::Path *)v27, &v22);
  quasar::filesystem::Path::parent_path((quasar::filesystem::Path *)&v22, __p);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)__p, &v25);
  __p[0] = &unk_1F0A51998;
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  *(void *)&long long v22 = &unk_1F0A51998;
  if (SHIBYTE(v23) < 0) {
    operator delete(*((void **)&v22 + 1));
  }
  *a3 = 0;
  a3[1] = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  int v24 = 1065353216;
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))(*a1) == 5)
  {
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v27, (std::string *)__p);
    std::allocate_shared[abi:ne180100]<quasar::NNLmModel,std::allocator<quasar::NNLmModel>,std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&,void>((uint64_t)&v31, (uint64_t)__p, (uint64_t)&v25, (kaldi::quasar::Vocab *)&v26, (uint64_t)a1);
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported NNLM training Config", 32);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B1D91BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v18 - 256);
  if (*(char *)(v18 - 185) < 0) {
    operator delete(*(void **)(v18 - 208));
  }
  *(void *)(v18 - 184) = &unk_1F0A51998;
  if (*(char *)(v18 - 153) < 0) {
    operator delete(*(void **)(v18 - 176));
  }
  *(void *)(v18 - 1--*(_DWORD *)(a9 + 52) = &unk_1F0A51998;
  if (*(char *)(v18 - 121) < 0) {
    operator delete(*(void **)(v18 - 144));
  }
  std::__tree<std::string>::destroy(v18 - 120, *(char **)(v18 - 112));
  _Unwind_Resume(a1);
}

void sub_1B1D91CDC()
{
}

void sub_1B1D91CE4()
{
}

void sub_1B1D91CEC()
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 - 256);
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1B1D91BE8);
}

uint64_t quasar::NNLmModel::writeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  v149[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v149, (clockid_t)a2);
  uint64_t v150 = 0;
  quasar::GlobalNNLMWrapper::saveWeight(*(void *)(a1 + 864), (uint64_t *)a2, (const kaldi::Timer *)v149, (uint64_t **)(a1 + 32));
  uint64_t v3 = *(const std::string **)(a1 + 872);
  std::string::basic_string[abi:ne180100]<0>(__p, ":");
  quasar::splitAndTrimNoEmpty(v3 + 1, (char *)__p, __str);
  if (SHIBYTE(__p[0].__end_) < 0) {
    operator delete(__p[0].__first_);
  }
  memset(&v147, 0, sizeof(v147));
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)__str[1] - (char *)__str[0]) >> 3);
  if (v4 == 2)
  {
    long long v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v147, (long long *)__str[0]);
    int v24 = __str[0];
    std::string::size_type v25 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
    v147.__end_ = v23;
    if ((v25 & 0x80u) == 0) {
      std::string::size_type size = v25;
    }
    else {
      std::string::size_type size = __str[0]->__r_.__value_.__l.__size_;
    }
    unint64_t v27 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, size + 1);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v27 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v24->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v28 = v24;
      }
      else {
        unint64_t v28 = (std::string *)v24->__r_.__value_.__r.__words[0];
      }
      memmove(v27, v28, size);
    }
    *(_WORD *)((char *)&v27->__r_.__value_.__l.__data_ + size) = 46;
    uint64_t v29 = *(void *)(a1 + 872);
    uint64_t v32 = *(const std::string::value_type **)(v29 + 48);
    uint64_t v30 = v29 + 48;
    char v31 = v32;
    int v33 = *(char *)(v30 + 23);
    if (v33 >= 0) {
      uint64_t v34 = (const std::string::value_type *)v30;
    }
    else {
      uint64_t v34 = v31;
    }
    if (v33 >= 0) {
      std::string::size_type v35 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      std::string::size_type v35 = *(void *)(v30 + 8);
    }
    uint64_t v36 = std::string::append(&v151, v34, v35);
    long long v37 = (char *)v36->__r_.__value_.__r.__words[0];
    *(void *)&long long v155 = v36->__r_.__value_.__l.__size_;
    *(void *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
    char v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::pointer end = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      unint64_t v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v42) {
        unint64_t v42 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v43 = v42;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v43) {
        uint64_t v44 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v43);
      }
      else {
        uint64_t v44 = 0;
      }
      uint64_t v49 = v44 + v41;
      __p[0].__first_ = v44;
      __p[0].__begin_ = v49;
      __p[0].__end_cap_.__value_ = &v44[v43];
      v49->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v37;
      v49->__r_.__value_.__l.__size_ = v155;
      *(std::wstring::size_type *)((char *)&v49->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v155 + 7);
      *((unsigned char *)&v49->__r_.__value_.__s + 23) = v38;
      __p[0].__end_ = v49 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      uint64_t v40 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
    }
    else
    {
      v147.__end_->__r_.__value_.__l.__data_ = v37;
      end->__r_.__value_.__l.__size_ = v155;
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v155 + 7);
      *((unsigned char *)&end->__r_.__value_.__s + 23) = v38;
      uint64_t v40 = end + 1;
    }
    v147.__end_ = v40;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    uint64_t v50 = __str[0];
    if ((__str[0]->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v51 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v51 = __str[0]->__r_.__value_.__l.__size_;
    }
    uint64_t v52 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v51 + 7);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v52 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if (v51)
    {
      if ((v50->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v53 = v50;
      }
      else {
        double v53 = (std::string *)v50->__r_.__value_.__r.__words[0];
      }
      memmove(v52, v53, v51);
    }
    strcpy((char *)v52 + v51, ".config");
    std::vector<std::string>::pointer v54 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      unint64_t v57 = v56 + 1;
      if (v56 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v57) {
        unint64_t v57 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v58 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v58 = v57;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v58) {
        uint64_t v59 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v58);
      }
      else {
        uint64_t v59 = 0;
      }
      v71 = v59 + v56;
      __p[0].__first_ = v59;
      __p[0].__begin_ = v71;
      __p[0].__end_cap_.__value_ = &v59[v58];
      long long v72 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v71->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
      memset(&v151, 0, sizeof(v151));
      __p[0].__end_ = v71 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      v73 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v147.__end_ = v73;
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v55 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v147.__end_->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
      v147.__end_ = v54 + 1;
    }
    if (SHIBYTE(__str[0]->__r_.__value_.__r.__words[2]) < 0)
    {
      data = (std::string *)__str[0]->__r_.__value_.__l.__data_;
      std::string::size_type v74 = __str[0]->__r_.__value_.__l.__size_;
    }
    else
    {
      std::string::size_type v74 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
      data = __str[0];
    }
    uint64_t v76 = (char *)&data[-1].__r_.__value_.__r.__words[2] + 7;
    while (v74)
    {
      int v77 = v76[v74--];
      if (v77 == 46) {
        goto LABEL_116;
      }
    }
    std::string::size_type v74 = -1;
LABEL_116:
    std::string::basic_string(&v151, __str[0], 0, v74, (std::allocator<char> *)__p);
    uint64_t v78 = std::string::append(&v151, ".shape");
    uint64_t v79 = (char *)v78->__r_.__value_.__r.__words[0];
    *(void *)&long long v155 = v78->__r_.__value_.__l.__size_;
    *(void *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v78->__r_.__value_.__r.__words[1] + 7);
    char v80 = HIBYTE(v78->__r_.__value_.__r.__words[2]);
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::pointer v81 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      unint64_t v84 = v83 + 1;
      if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v84) {
        unint64_t v84 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v85 = v84;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v85) {
        v86 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v85);
      }
      else {
        v86 = 0;
      }
      v90 = v86 + v83;
      __p[0].__first_ = v86;
      __p[0].__begin_ = v90;
      __p[0].__end_cap_.__value_ = &v86[v85];
      v90->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v79;
      v90->__r_.__value_.__l.__size_ = v155;
      *(std::wstring::size_type *)((char *)&v90->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v155 + 7);
      *((unsigned char *)&v90->__r_.__value_.__s + 23) = v80;
      __p[0].__end_ = v90 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      std::vector<std::string>::pointer v82 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
    }
    else
    {
      v147.__end_->__r_.__value_.__l.__data_ = v79;
      v81->__r_.__value_.__l.__size_ = v155;
      *(std::string::size_type *)((char *)&v81->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v155 + 7);
      *((unsigned char *)&v81->__r_.__value_.__s + 23) = v80;
      std::vector<std::string>::pointer v82 = v81 + 1;
    }
    v147.__end_ = v82;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v151.__r_.__value_.__l.__data_);
      std::vector<std::string>::pointer v82 = v147.__end_;
    }
    uint64_t v91 = (long long *)&__str[0][1];
    if (v82 >= v147.__end_cap_.__value_)
    {
      uint64_t v93 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v147, v91);
    }
    else
    {
      if (SHIBYTE(__str[0][1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v82, __str[0][1].__r_.__value_.__l.__data_, __str[0][1].__r_.__value_.__l.__size_);
      }
      else
      {
        long long v92 = *v91;
        v82->__r_.__value_.__r.__words[2] = __str[0][1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82->__r_.__value_.__l.__data_ = v92;
      }
      uint64_t v93 = v82 + 1;
    }
    v147.__end_ = v93;
    v94 = __str[0];
    if ((__str[0][1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v95 = HIBYTE(__str[0][1].__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v95 = __str[0][1].__r_.__value_.__l.__size_;
    }
    uint64_t v96 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v95 + 7);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v96 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if (v95)
    {
      if ((v94[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v97 = v94 + 1;
      }
      else {
        v97 = (std::string *)v94[1].__r_.__value_.__l.__data_;
      }
      memmove(v96, v97, v95);
    }
    strcpy((char *)v96 + v95, ".config");
    std::vector<std::string>::pointer v98 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      unint64_t v101 = v100 + 1;
      if (v100 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v101) {
        unint64_t v101 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v102 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v102 = v101;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v102) {
        uint64_t v103 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v102);
      }
      else {
        uint64_t v103 = 0;
      }
      long long v104 = v103 + v100;
      __p[0].__first_ = v103;
      __p[0].__begin_ = v104;
      __p[0].__end_cap_.__value_ = &v103[v102];
      long long v105 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v104->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v104->__r_.__value_.__l.__data_ = v105;
      memset(&v151, 0, sizeof(v151));
      __p[0].__end_ = v104 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      long long v106 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v147.__end_ = v106;
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v99 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v147.__end_->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98->__r_.__value_.__l.__data_ = v99;
      v147.__end_ = v98 + 1;
    }
    if (SHIBYTE(__str[0][1].__r_.__value_.__r.__words[2]) < 0)
    {
      v108 = (std::string *)__str[0][1].__r_.__value_.__l.__data_;
      std::string::size_type v107 = __str[0][1].__r_.__value_.__l.__size_;
    }
    else
    {
      std::string::size_type v107 = HIBYTE(__str[0][1].__r_.__value_.__r.__words[2]);
      v108 = __str[0] + 1;
    }
    uint64_t v109 = (char *)&v108[-1].__r_.__value_.__r.__words[2] + 7;
    while (v107)
    {
      int v110 = v109[v107--];
      if (v110 == 46) {
        goto LABEL_170;
      }
    }
    std::string::size_type v107 = -1;
LABEL_170:
    std::string::basic_string(&v151, __str[0] + 1, 0, v107, (std::allocator<char> *)__p);
    unint64_t v111 = std::string::append(&v151, ".shape");
    BOOL v112 = (char *)v111->__r_.__value_.__r.__words[0];
    *(void *)&long long v155 = v111->__r_.__value_.__l.__size_;
    *(void *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v111->__r_.__value_.__r.__words[1] + 7);
    char v113 = HIBYTE(v111->__r_.__value_.__r.__words[2]);
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::pointer v114 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      unint64_t v117 = v116 + 1;
      if (v116 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v117) {
        unint64_t v117 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v118 = v117;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v118) {
        v119 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v118);
      }
      else {
        v119 = 0;
      }
      v120 = v119 + v116;
      __p[0].__first_ = v119;
      __p[0].__begin_ = v120;
      __p[0].__end_cap_.__value_ = &v119[v118];
      v120->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v112;
      v120->__r_.__value_.__l.__size_ = v155;
      *(std::wstring::size_type *)((char *)&v120->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v155 + 7);
      *((unsigned char *)&v120->__r_.__value_.__s + 23) = v113;
      __p[0].__end_ = v120 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      v115 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
    }
    else
    {
      v147.__end_->__r_.__value_.__l.__data_ = v112;
      v114->__r_.__value_.__l.__size_ = v155;
      *(std::string::size_type *)((char *)&v114->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v155 + 7);
      *((unsigned char *)&v114->__r_.__value_.__s + 23) = v113;
      v115 = v114 + 1;
    }
    v147.__end_ = v115;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
LABEL_183:
    }
      operator delete(v151.__r_.__value_.__l.__data_);
  }
  else
  {
    if (v4 != 1)
    {
      memset(__p, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      long long v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Malformed LM neural network file name, fileBasename=", 52);
      uint64_t v132 = *(void *)(a1 + 872);
      uint64_t v135 = *(void *)(v132 + 24);
      uint64_t v133 = v132 + 24;
      uint64_t v134 = v135;
      int v136 = *(char *)(v133 + 23);
      if (v136 >= 0) {
        uint64_t v137 = v133;
      }
      else {
        uint64_t v137 = v134;
      }
      if (v136 >= 0) {
        uint64_t v138 = *(unsigned __int8 *)(v133 + 23);
      }
      else {
        uint64_t v138 = *(void *)(v133 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, v137, v138);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    uint64_t v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v147, (long long *)__str[0]);
    long long v6 = __str[0];
    std::string::size_type v7 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
    v147.__end_ = v5;
    if ((v7 & 0x80u) == 0) {
      std::string::size_type v8 = v7;
    }
    else {
      std::string::size_type v8 = __str[0]->__r_.__value_.__l.__size_;
    }
    long long v9 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v8 + 1);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v9 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if ((v6->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v10 = v6;
      }
      else {
        long long v10 = (std::string *)v6->__r_.__value_.__r.__words[0];
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 46;
    uint64_t v11 = *(void *)(a1 + 872);
    long long v14 = *(const std::string::value_type **)(v11 + 48);
    uint64_t v12 = v11 + 48;
    long long v13 = v14;
    int v15 = *(char *)(v12 + 23);
    if (v15 >= 0) {
      long long v16 = (const std::string::value_type *)v12;
    }
    else {
      long long v16 = v13;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v12 + 8);
    }
    uint64_t v18 = std::string::append(&v151, v16, v17);
    long long v19 = (char *)v18->__r_.__value_.__r.__words[0];
    *(void *)&long long v155 = v18->__r_.__value_.__l.__size_;
    *(void *)((char *)&v155 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::pointer v21 = v147.__end_;
    if (v147.__end_ >= v147.__end_cap_.__value_)
    {
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
      unint64_t v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v46) {
        unint64_t v46 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v47 = v46;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
      if (v47) {
        float v48 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v47);
      }
      else {
        float v48 = 0;
      }
      uint64_t v60 = v48 + v45;
      __p[0].__first_ = v48;
      __p[0].__begin_ = v60;
      __p[0].__end_cap_.__value_ = &v48[v47];
      v60->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v19;
      v60->__r_.__value_.__l.__size_ = v155;
      *(std::wstring::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v155 + 7);
      *((unsigned char *)&v60->__r_.__value_.__s + 23) = v20;
      __p[0].__end_ = v60 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
      long long v22 = v147.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
    }
    else
    {
      v147.__end_->__r_.__value_.__l.__data_ = v19;
      v21->__r_.__value_.__l.__size_ = v155;
      *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v155 + 7);
      *((unsigned char *)&v21->__r_.__value_.__s + 23) = v20;
      long long v22 = v21 + 1;
    }
    v147.__end_ = v22;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    unint64_t v61 = __str[0];
    if ((__str[0]->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v62 = HIBYTE(__str[0]->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v62 = __str[0]->__r_.__value_.__l.__size_;
    }
    uint64_t v63 = &v151;
    std::string::basic_string[abi:ne180100]((uint64_t)&v151, v62 + 7);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v63 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if (v62)
    {
      if ((v61->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v64 = v61;
      }
      else {
        uint64_t v64 = (std::string *)v61->__r_.__value_.__r.__words[0];
      }
      memmove(v63, v64, v62);
    }
    strcpy((char *)v63 + v62, ".config");
    std::vector<std::string>::pointer v65 = v147.__end_;
    if (v147.__end_ < v147.__end_cap_.__value_)
    {
      long long v66 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
      v147.__end_->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
      v147.__end_ = v65 + 1;
      goto LABEL_184;
    }
    unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_ - (char *)v147.__begin_) >> 3);
    unint64_t v68 = v67 + 1;
    if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) > v68) {
      unint64_t v68 = 0x5555555555555556 * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v147.__end_cap_.__value_ - (char *)v147.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v69 = v68;
    }
    __p[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)&v147.__end_cap_;
    if (v69) {
      uint64_t v70 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v147.__end_cap_, v69);
    }
    else {
      uint64_t v70 = 0;
    }
    v87 = v70 + v67;
    __p[0].__first_ = v70;
    __p[0].__begin_ = v87;
    __p[0].__end_cap_.__value_ = &v70[v69];
    long long v88 = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
    v87->__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87->__r_.__value_.__l.__data_ = v88;
    memset(&v151, 0, sizeof(v151));
    __p[0].__end_ = v87 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v147, (std::__split_buffer<std::string> *)__p);
    v89 = v147.__end_;
    std::__split_buffer<std::string>::~__split_buffer(__p);
    v147.__end_ = v89;
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_183;
    }
  }
LABEL_184:
  std::vector<std::string>::pointer begin = v147.__begin_;
  std::vector<std::string>::pointer v121 = v147.__end_;
  if (v147.__begin_ != v147.__end_)
  {
    std::string::size_type v140 = *(void *)(MEMORY[0x1E4FBA400] + 24);
    std::string::size_type v141 = *MEMORY[0x1E4FBA400];
    v139 = (std::wstring *)*MEMORY[0x1E4FBA3F8];
    v123 = *(std::wstring **)(MEMORY[0x1E4FBA3F8] + 24);
    do
    {
      quasar::filesystem::Path::Path(&v155, begin);
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v144, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v144 = *(std::string *)a2;
      }
      uint64_t v124 = std::string::append(&v144, "/");
      long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v125;
      v124->__r_.__value_.__l.__size_ = 0;
      v124->__r_.__value_.__r.__words[2] = 0;
      v124->__r_.__value_.__r.__words[0] = 0;
      quasar::filesystem::Path::filename((quasar::filesystem::Path *)&v155, __p);
      kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)__p, &v143);
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v126 = &v143;
      }
      else {
        v126 = (std::string *)v143.__r_.__value_.__r.__words[0];
      }
      if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v127 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v127 = v143.__r_.__value_.__l.__size_;
      }
      v128 = std::string::append(&v151, (const std::string::value_type *)v126, v127);
      long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      std::string::size_type v146 = v128->__r_.__value_.__r.__words[2];
      *(_OWORD *)v145 = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v143.__r_.__value_.__l.__data_);
      }
      __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&unk_1F0A51998;
      if (SHIBYTE(__p[0].__end_cap_.__value_) < 0) {
        operator delete(__p[0].__begin_);
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v144.__r_.__value_.__l.__data_);
      }
      std::ifstream::basic_ifstream((uint64_t *)__p);
      std::ofstream::basic_ofstream((uint64_t *)&v151);
      std::ostream::operator<<();
      if (!std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)((char *)__p + __p[0].__first_[-1].__r_.__value_.__r.__words[0]), *(_DWORD *)((char *)&__p[0].__end_cap_.__value_ + __p[0].__first_[-1].__r_.__value_.__r.__words[0]) | 4);
      }
      if (!std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)((char *)&v151 + *(void *)(v151.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v151 + *(void *)(v151.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
      }
      v151.__r_.__value_.__r.__words[0] = v141;
      *(std::string::size_type *)((char *)v151.__r_.__value_.__r.__words + *(void *)(v141 - 24)) = v140;
      MEMORY[0x1B3EA7CF0](&v151.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1B3EA8520](&v152);
      __p[0].__first_ = v139;
      *(std::__split_buffer<std::wstring>::pointer *)((char *)&__p[0].__first_ + v139[-1].__r_.__value_.__r.__words[0]) = v123;
      MEMORY[0x1B3EA7CF0](&__p[0].__end_);
      std::istream::~istream();
      MEMORY[0x1B3EA8520](&v154);
      if (SHIBYTE(v146) < 0) {
        operator delete(v145[0]);
      }
      *(void *)&long long v155 = &unk_1F0A51998;
      if (v156 < 0) {
        operator delete(*((void **)&v155 + 1));
      }
      ++begin;
    }
    while (begin != v121);
  }
  __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)&v147;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__first_ = (std::__split_buffer<std::wstring>::pointer)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return 1;
}

void sub_1B1D92D80(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1D92F58);
}

void sub_1B1D92D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&STACK[0x310]);
  if (a40 < 0) {
    operator delete(__p);
  }
  v43[0] = (void **)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
  v43[0] = (void **)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
  _Unwind_Resume(a1);
}

void quasar::NNLmModel::getMetadata(quasar::PTree *a1@<X8>)
{
}

void sub_1B1D93360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,void *a38,int a39,__int16 a40,char a41,char a42,int a43,__int16 a44,char a45,char a46)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  a10 = &unk_1F0A51998;
  if (a19 < 0) {
    operator delete(a11);
  }
  a37 = &unk_1F0A51998;
  if (a46 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v47 - 73) < 0) {
    operator delete(*(void **)(v47 - 96));
  }
  a10 = (void *)(v47 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  quasar::PTree::~PTree(v46);
  _Unwind_Resume(a1);
}

void quasar::loadNNLmModel(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-loading-files");
  quasar::PTree::getString(a1, (uint64_t)__p);
}

void sub_1B1D93A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,void *a31,void *a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  a31 = &unk_1F0A51998;
  if (a40 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a22);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v53 - 137) < 0) {
    operator delete(*(void **)(v53 - 160));
  }
  a31 = (void *)(v53 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (*(char *)(v53 - 89) < 0) {
    operator delete(*(void **)(v53 - 112));
  }
  _Unwind_Resume(a1);
}

void quasar::NNLmConfig::~NNLmConfig(void **this)
{
  *this = &unk_1F0A51918;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A51918;
  if (*((char *)this + 239) < 0) {
    operator delete(this[27]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  quasar::LmBuildConfig::~LmBuildConfig(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::NNLmModel::~NNLmModel(quasar::NNLmModel *this)
{
  *(void *)this = off_1F0A594F8;
  *((void *)this + 113) = off_1F0A59548;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 112);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 108);
  *((void *)this + 108) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  quasar::ModelLoader::~ModelLoader((quasar::NNLmModel *)((char *)this + 240));
  quasar::LmModel2::~LmModel2(this, (uint64_t *)&off_1F0A32A40);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = off_1F0A594F8;
  *((void *)this + 113) = off_1F0A59548;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 112);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 110);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 108);
  *((void *)this + 108) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  quasar::ModelLoader::~ModelLoader((quasar::NNLmModel *)((char *)this + 240));
  quasar::LmModel2::~LmModel2(this, (uint64_t *)&off_1F0A32A40);
  JUMPOUT(0x1B3EA8670);
}

void virtual thunk to'quasar::NNLmModel::~NNLmModel(quasar::NNLmModel *this)
{
  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = off_1F0A594F8;
  v1[113] = off_1F0A59548;
  uint64_t v2 = (std::__shared_weak_count *)v1[112];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[110];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = v1[108];
  v1[108] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 30));
  quasar::LmModel2::~LmModel2((quasar::LmModel2 *)v1, (uint64_t *)&off_1F0A32A40);
}

{
  void *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t vars8;

  uint64_t v1 = (void *)((char *)this + *(void *)(*(void *)this - 24));
  *uint64_t v1 = off_1F0A594F8;
  v1[113] = off_1F0A59548;
  uint64_t v2 = (std::__shared_weak_count *)v1[112];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[110];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = v1[108];
  v1[108] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)(v1 + 30));
  quasar::LmModel2::~LmModel2((quasar::LmModel2 *)v1, (uint64_t *)&off_1F0A32A40);
  JUMPOUT(0x1B3EA8670);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::NNLmConfig::NNLmConfigParameters,std::allocator<quasar::NNLmConfig::NNLmConfigParameters>,quasar::NNLmConfig::NNLmConfigParameters const&,void>@<X0>(const quasar::NNLmConfig::NNLmConfigParameters *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (std::string *)operator new(0x90uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::__shared_ptr_emplace[abi:ne180100]<quasar::NNLmConfig::NNLmConfigParameters const&,std::allocator<quasar::NNLmConfig::NNLmConfigParameters>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1B1D941C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::__shared_ptr_emplace[abi:ne180100]<quasar::NNLmConfig::NNLmConfigParameters const&,std::allocator<quasar::NNLmConfig::NNLmConfigParameters>,0>(std::string *a1, const quasar::NNLmConfig::NNLmConfigParameters *a2)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F0A5F728;
  quasar::NNLmConfig::NNLmConfigParameters::NNLmConfigParameters(a1 + 1, a2);
  return a1;
}

void sub_1B1D94224(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5F728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<quasar::NNLmConfig::NNLmConfigParameters>::__on_zero_shared(uint64_t a1)
{
  std::allocator<quasar::NNLmConfig::NNLmConfigParameters>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

std::string *quasar::NNLmConfig::NNLmConfigParameters::NNLmConfigParameters(std::string *this, const quasar::NNLmConfig::NNLmConfigParameters *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(_OWORD *)((char *)a2 + 72);
  this[3].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 88);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  std::string::size_type v8 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_1B1D943CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<quasar::NNLmConfig::NNLmConfigParameters>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 119) < 0) {
    operator delete(*(void **)(a2 + 96));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0A5C388;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0A5C388;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::InferenceNetItf **a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  quasar::ModelLoader::readNeuralNetworkLm((void *)(v3 + 240), a2, *(void *)(v3 + 872) + 48, *(unsigned char *)(*(void *)(v3 + 872) + 72), *(_DWORD *)(*(void *)(v3 + 872) + 80), a3, *(float *)(*(void *)(v3 + 872) + 76));
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,std::string const&,std::string const&,std::shared_ptr<quasar::NNLmConfig const> const&)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A5C3E0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A5C3E0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x1B3EA8670);
}

void *std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_1F0A5C3E0;
  std::__compressed_pair_elem<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1B1D9469C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F0A5C3E0;
  return std::__compressed_pair_elem<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }
  operator delete(__p);
}

void std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, kaldi::InferenceNetItf **a3@<X8>)
{
}

uint64_t std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,std::allocator<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0>,std::shared_ptr<kaldi::quasar::NnlmEvaluatorBase> ()(std::string const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<quasar::NNLmModel::NNLmModel(std::string const&,float,float,std::string const&,BOOL,float,int)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  return a1;
}

void std::allocate_shared[abi:ne180100]<quasar::NNLmModel,std::allocator<quasar::NNLmModel>,std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&,void>(uint64_t a1, uint64_t a2, uint64_t a3, kaldi::quasar::Vocab *a4, uint64_t a5)
{
  long long v9 = operator new(0x3B8uLL);
  std::__shared_ptr_emplace<quasar::NNLmModel>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&,std::allocator<quasar::NNLmModel>,0>(v9, a2, a3, a4, a5);
}

void sub_1B1D94870(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NNLmModel>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&,std::allocator<quasar::NNLmModel>,0>(void *a1, uint64_t a2, uint64_t a3, kaldi::quasar::Vocab *this, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62710;
  std::allocator<quasar::NNLmModel>::construct[abi:ne180100]<quasar::NNLmModel,std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&>((int)&v5, (uint64_t)(a1 + 3), a2, a3, this, a5);
}

void sub_1B1D948EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NNLmModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NNLmModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62710;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::NNLmModel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<quasar::NNLmModel>::construct[abi:ne180100]<quasar::NNLmModel,std::string,std::string&,quasar::filesystem::Path &,std::shared_ptr<quasar::NNLmConfig const> const&>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, kaldi::quasar::Vocab *this, uint64_t a6)
{
  kaldi::quasar::Vocab::OOvWord(this, &__p);
  quasar::NNLmModel::NNLmModel(a2, a3, a4, (uint64_t)&__p, a6);
}

void sub_1B1D94A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::NNLmModel  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<quasar::NNLmModel  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NNLmModel  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

char *quasar::ComputeAheadFeatInput::ComputeAheadFeatInput(char *a1, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  *(void *)a1 = &unk_1F0A55960;
  *((void *)a1 + 1) = v9;
  *((void *)a1 + 2) = v10;
  if (v10)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    uint64_t v9 = *((void *)a1 + 1);
  }
  *((_DWORD *)a1 + 6) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
  *((_DWORD *)a1 + 7) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 24))(*((void *)a1 + 1));
  *((_DWORD *)a1 + 8) = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 32))(*((void *)a1 + 1));
  a1[36] = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 40))(*((void *)a1 + 1));
  a1[37] = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 48))(*((void *)a1 + 1));
  *((_DWORD *)a1 + 10) = a4;
  *((_DWORD *)a1 + 11) = a5;
  *((void *)a1 + 6) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *((void *)a1 + 13) = 0;
  *((void *)a1 + 14) = 1018212795;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *((void *)a1 + 25) = 0;
  *((_DWORD *)a1 + --*(_DWORD *)(a9 + 52) = a4;
  *((_DWORD *)a1 + 53) = 0;
  a1[216] = 0;
  if (a3)
  {
    inactive = dispatch_workloop_create_inactive("ComputeAheadFeatInput");
    dispatch_workloop_set_scheduler_priority();
    dispatch_set_qos_class_fallback();
    dispatch_activate(inactive);
    initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
    long long v13 = dispatch_queue_create("ComputeAheadFeatInput", initially_inactive);
    dispatch_set_target_queue(v13, inactive);
    dispatch_set_qos_class_floor(v13, QOS_CLASS_USER_INTERACTIVE, 0);
    dispatch_activate(v13);
  }
  else
  {
    long long v13 = dispatch_queue_create("ComputeAheadFeatInput", 0);
  }
  *((void *)a1 + 28) = v13;
  dispatch_async_f(v13, a1, (dispatch_function_t)quasar::ComputeAheadFeatInput::CallComputeAheadAndNotify);
  return a1;
}

void sub_1B1D94D14(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

BOOL quasar::ComputeAheadFeatInput::Compute(uint64_t a1, uint64_t *a2)
{
  v16.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 48);
  v16.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 48));
  while (!*(void *)(a1 + 200))
    std::condition_variable::wait((std::condition_variable *)(a1 + 112), &v16);
  int v4 = *(_DWORD *)(a1 + 44);
  BOOL v5 = v4 < 1 || *(_DWORD *)(a1 + 212) < v4;
  uint64_t v6 = (uint64_t *)(*(void *)(*(void *)(a1 + 168) + ((*(void *)(a1 + 192) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * *(void *)(a1 + 192));
  uint64_t v8 = *v6;
  long long v7 = (std::__shared_weak_count *)v6[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::pop_front((void *)(a1 + 160));
  *(_DWORD *)(a1 + 212) -= kaldi::MatrixBase<float>::NumRows(v8);
  if ((int)kaldi::MatrixBase<float>::NumRows(*a2) >= 1) {
    *(_DWORD *)(a1 + 208) = kaldi::MatrixBase<float>::NumRows(*a2);
  }
  kaldi::Matrix<float>::Swap((uint64_t *)*a2, (uint64_t *)v8);
  uint64_t v9 = (uint64_t *)a2[1];
  if (v9) {
    kaldi::Matrix<float>::Swap(v9, (uint64_t *)(v8 + 40));
  }
  uint64_t v10 = (uint64_t *)a2[3];
  if (v10) {
    kaldi::Matrix<float>::Swap(v10, (uint64_t *)(v8 + 120));
  }
  uint64_t v11 = (uint64_t *)a2[4];
  if (v11) {
    kaldi::Matrix<float>::Swap(v11, (uint64_t *)(v8 + 160));
  }
  uint64_t v12 = (uint64_t *)a2[5];
  if (v12) {
    kaldi::Matrix<float>::Swap(v12, (uint64_t *)(v8 + 200));
  }
  if (!v5)
  {
    int v13 = *(_DWORD *)(a1 + 44);
    if (v13 < 1 || *(_DWORD *)(a1 + 212) < v13) {
      std::condition_variable::notify_one((std::condition_variable *)(a1 + 112));
    }
  }
  int v14 = *(unsigned __int8 *)(v8 + 240);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v16.__owns_) {
    std::mutex::unlock(v16.__m_);
  }
  return v14 != 0;
}

void sub_1B1D94EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::pop_front(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * v2
                                    + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    unint64_t v2 = a1[4];
  }
  uint64_t v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return std::deque<std::pair<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> *,int>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t quasar::ComputeAheadFeatInput::Dim(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t quasar::ComputeAheadFeatInput::ChunkSize(quasar::ComputeAheadFeatInput *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

uint64_t quasar::ComputeAheadFeatInput::FrameDurationMs(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t quasar::ComputeAheadFeatInput::FrameDurationMsForAlignment(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t quasar::ComputeAheadFeatInput::HasSilencePosterior(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned __int8 *)this + 36);
}

uint64_t quasar::ComputeAheadFeatInput::HasEndpointerScore(quasar::ComputeAheadFeatInput *this)
{
  return *((unsigned __int8 *)this + 37);
}

void quasar::ComputeAheadFeatInput::~ComputeAheadFeatInput(quasar::ComputeAheadFeatInput *this)
{
  *(void *)this = &unk_1F0A55960;
  unint64_t v2 = (std::mutex *)((char *)this + 48);
  std::mutex::lock((std::mutex *)((char *)this + 48));
  *((unsigned char *)this + 216) = 1;
  std::condition_variable::notify_one((std::condition_variable *)((char *)this + 112));
  std::mutex::unlock(v2);
  dispatch_sync_f(*((dispatch_queue_t *)this + 28), 0, (dispatch_function_t)quasar::ComputeAheadFeatInput::WaitForComputeAheadToFinish);
  dispatch_release(*((dispatch_object_t *)this + 28));
  std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::~deque[abi:ne180100]((void *)this + 20);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::mutex::~mutex(v2);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::ComputeAheadFeatInput::~ComputeAheadFeatInput(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::ComputeAheadFeatInput::ComputeUntilResults(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = kaldi::MatrixBase<float>::NumRows(*(void *)a2);
  uint64_t v5 = kaldi::MatrixBase<float>::NumCols(*(void *)a2);
  do
  {
    if (!kaldi::MatrixBase<float>::NumRows(*(void *)a2)) {
      kaldi::Matrix<float>::Resize(*(int32x2_t **)a2, v4, v5, 0, 0);
    }
    uint64_t v6 = *(uint64_t (****)(void, _OWORD *))(a1 + 8);
    long long v7 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v7;
    v10[2] = *(_OWORD *)(a2 + 32);
    uint64_t v8 = (**v6)(v6, v10);
  }
  while (v8 && !kaldi::MatrixBase<float>::NumRows(*(void *)a2));
  return v8;
}

void quasar::ComputeAheadFeatInput::ComputeAheadAndNotify(quasar::ComputeAheadFeatInput *this)
{
  uint64_t v2 = *((unsigned int *)this + 10);
  uint64_t v3 = (std::mutex *)((char *)this + 48);
  uint64_t v4 = (void *)((char *)this + 160);
  uint64_t v5 = (std::condition_variable *)((char *)this + 112);
  do
  {
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar21ComputeAheadFeatInput5BatchENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v13);
    uint64_t v6 = (int32x2_t *)v13;
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 8))(*((void *)this + 1));
    kaldi::Matrix<float>::Resize(v6, v2, v7, 1, 0);
    kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(v12, v13, v13 + 40, v13 + 80, v13 + 120, v13 + 160, v13 + 200);
    v11[0] = v12[0];
    v11[1] = v12[1];
    v11[2] = v12[2];
    int v8 = quasar::ComputeAheadFeatInput::ComputeUntilResults((uint64_t)this, (uint64_t)v11);
    *(unsigned char *)(v13 + 240) = v8;
    v10.__m_ = v3;
    v10.__owns_ = 1;
    std::mutex::lock(v3);
    std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::push_back(v4, &v13);
    *((_DWORD *)this + 53) += kaldi::MatrixBase<float>::NumRows(v13);
    if (*((void *)this + 25) == 1) {
      std::condition_variable::notify_one(v5);
    }
    if (v8)
    {
      int v9 = *((_DWORD *)this + 11);
      if (v9 >= 1)
      {
        do
        {
          if (*((_DWORD *)this + 53) < v9) {
            break;
          }
          if (*((unsigned char *)this + 216)) {
            goto LABEL_10;
          }
          std::condition_variable::wait(v5, &v10);
          int v9 = *((_DWORD *)this + 11);
        }
        while (v9 > 0);
      }
      if (*((unsigned char *)this + 216))
      {
LABEL_10:
        LOBYTE(v8) = 0;
      }
      else
      {
        uint64_t v2 = *((unsigned int *)this + 52);
        LOBYTE(v8) = 1;
      }
    }
    if (v10.__owns_) {
      std::mutex::unlock(v10.__m_);
    }
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  while ((v8 & 1) != 0);
}

void sub_1B1D95328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v10 - 72);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void kaldi::OnlineFeatInputItf::getSnrTracker(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 256;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    int v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6quasar21ComputeAheadFeatInput5BatchENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x110uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN6quasar21ComputeAheadFeatInput5BatchENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1B1D95580(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN6quasar21ComputeAheadFeatInput5BatchENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0A60D08;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  quasar::ComputeAheadFeatInput::Batch::Batch((quasar::ComputeAheadFeatInput::Batch *)(a1 + 24));
  return a1;
}

void sub_1B1D95620(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput::Batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput::Batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A60D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput::Batch>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<quasar::ComputeAheadFeatInput::Batch>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

quasar::ComputeAheadFeatInput::Batch *quasar::ComputeAheadFeatInput::Batch::Batch(quasar::ComputeAheadFeatInput::Batch *this)
{
  kaldi::Matrix<float>::Matrix((uint64_t)this);
  kaldi::Matrix<float>::Matrix(v2 + 40);
  kaldi::Matrix<float>::Matrix((uint64_t)this + 80);
  kaldi::Matrix<float>::Matrix((uint64_t)this + 120);
  kaldi::Matrix<float>::Matrix((uint64_t)this + 160);
  kaldi::Matrix<float>::Matrix((uint64_t)this + 200);
  return this;
}

void sub_1B1D95744(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  kaldi::Matrix<float>::~Matrix(v6);
  kaldi::Matrix<float>::~Matrix(v5);
  kaldi::Matrix<float>::~Matrix(v3);
  kaldi::Matrix<float>::~Matrix(v2);
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::ComputeAheadFeatInput::Batch>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  kaldi::Matrix<float>::~Matrix(a2 + 200);
  kaldi::Matrix<float>::~Matrix(a2 + 160);
  kaldi::Matrix<float>::~Matrix(a2 + 120);
  kaldi::Matrix<float>::~Matrix(a2 + 80);
  kaldi::Matrix<float>::~Matrix(a2 + 40);
  return kaldi::Matrix<float>::~Matrix(a2);
}

void std::deque<std::shared_ptr<quasar::ComputeAheadFeatInput::Batch>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      std::string::size_type v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      char v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      std::string::size_type v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        std::string::size_type v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)std::string::size_type v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1B1D95AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::readIVectors@<X0>(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v14 = 0;
  kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(&v14, this);
  if (!v14)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ivector file ", 13);
    int v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v9 >= 0) {
      uint64_t v10 = this;
    }
    else {
      uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v9 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" cannot be opened", 17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  while (1)
  {
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14)) {
      break;
    }
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
    unint64_t v5 = a2[1];
    if (v5 >= a2[2])
    {
      uint64_t v6 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(a2, v4);
    }
    else
    {
      std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)a2, v4);
      uint64_t v6 = v5 + 24;
    }
    a2[1] = v6;
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    (*(void (**)(uint64_t))(*(void *)v14 + 48))(v14);
  }
  uint64_t result = v14;
  if (v14) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 72))(v14);
  }
  return result;
}

void sub_1B1D95CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = *(void *)(v9 - 40);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 72))(v11);
  }
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(void *a1, std::string *this)
{
  if (*a1 && (kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Close(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "SequentialTableReader<Holder>::Open(), could not close previously open object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  int v3 = kaldi::ClassifyRspecifier(this, 0, 0);
  if (v3 == 2) {
    operator new();
  }
  if (v3 == 1) {
    operator new();
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Invalid rspecifier ", 19);
    int v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0) {
      uint64_t v6 = this;
    }
    else {
      uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  }
  return 0;
}

void sub_1B1D95F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::readLandmarkHashVectors@<X0>(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v14 = 0;
  kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(&v14, this);
  if (!v14)
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Landmark hash ark file ", 23);
    int v9 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v9 >= 0) {
      uint64_t v10 = this;
    }
    else {
      uint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v9 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" cannot be opened", 17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  while (1)
  {
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14)) {
      break;
    }
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
    unint64_t v5 = a2[1];
    if (v5 >= a2[2])
    {
      uint64_t v6 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(a2, v4);
    }
    else
    {
      std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)a2, v4);
      uint64_t v6 = v5 + 24;
    }
    a2[1] = v6;
    kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(&v14);
    (*(void (**)(uint64_t))(*(void *)v14 + 48))(v14);
  }
  uint64_t result = v14;
  if (v14) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 72))(v14);
  }
  return result;
}

void sub_1B1D9611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = *(void *)(v9 - 40);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 72))(v11);
  }
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::computeDotProducts(uint64_t a1@<X0>, const float ***a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<float>::reserve((void **)a3, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      float v8 = kaldi::VecVec<float>(a1, v6);
      float v9 = v8;
      uint64_t v11 = *(float **)(a3 + 8);
      unint64_t v10 = *(void *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *(float **)a3;
        uint64_t v14 = ((uint64_t)v11 - *(void *)a3) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v17);
          uint64_t v13 = *(float **)a3;
          uint64_t v11 = *(float **)(a3 + 8);
        }
        else
        {
          uint64_t v18 = 0;
        }
        long long v19 = (float *)&v18[4 * v14];
        float *v19 = v9;
        uint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v12;
        *(void *)(a3 + 16) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v11 = v8;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a3 + 8) = v12;
      v6 += 3;
    }
    while (v6 != v7);
  }
}

void sub_1B1D962B4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    float v9 = &v6[4 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void quasar::tNormalize(float **a1@<X0>, float **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  double v8 = 0.0;
  if (*a2 != v7)
  {
    float v9 = *a2;
    do
    {
      float v10 = *v9++;
      double v8 = v8 + v10;
    }
    while (v9 != v7);
  }
  double v11 = v8 / (double)(unint64_t)(v7 - v6);
  if (quasar::gLogLevel >= 6)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"imposterMean=", 13);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
  }
  double v12 = 0.0;
  if (v6 != v7)
  {
    int v13 = v6;
    do
    {
      float v14 = *v13++;
      double v12 = v12 + (v14 - v11) * (v14 - v11);
    }
    while (v13 != v7);
  }
  double v15 = sqrt(v12 / (double)(unint64_t)(v7 - v6));
  if (quasar::gLogLevel >= 6)
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"imposterStd=", 12);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<float>::reserve((void **)a3, a1[1] - *a1);
  uint64_t v16 = *a1;
  unint64_t v17 = a1[1];
  if (*a1 != v17)
  {
    do
    {
      if (v15 == 0.0)
      {
        long long v19 = *(float **)(a3 + 8);
        unint64_t v18 = *(void *)(a3 + 16);
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v26 = *(float **)a3;
          uint64_t v27 = ((uint64_t)v19 - *(void *)a3) >> 2;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v29 = v18 - (void)v26;
          if (v29 >> 1 > v28) {
            unint64_t v28 = v29 >> 1;
          }
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30)
          {
            long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v30);
            uint64_t v26 = *(float **)a3;
            long long v19 = *(float **)(a3 + 8);
          }
          else
          {
            long long v31 = 0;
          }
          std::string::size_type v35 = (float *)&v31[4 * v27];
          *std::string::size_type v35 = 3.4028e38;
          unint64_t v25 = v35 + 1;
          while (v19 != v26)
          {
            int v36 = *((_DWORD *)v19-- - 1);
            *((_DWORD *)v35-- - 1) = v36;
          }
LABEL_42:
          *(void *)a3 = v35;
          *(void *)(a3 + 8) = v25;
          *(void *)(a3 + 16) = &v31[4 * v30];
          if (v26) {
            operator delete(v26);
          }
          goto LABEL_44;
        }
        float *v19 = 3.4028e38;
        int v20 = v19 + 1;
      }
      else
      {
        double v21 = (*v16 - v11) / v15;
        uint64_t v23 = *(float **)(a3 + 8);
        unint64_t v22 = *(void *)(a3 + 16);
        if ((unint64_t)v23 >= v22)
        {
          uint64_t v26 = *(float **)a3;
          uint64_t v32 = ((uint64_t)v23 - *(void *)a3) >> 2;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = v22 - (void)v26;
          if (v34 >> 1 > v33) {
            unint64_t v33 = v34 >> 1;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v33;
          }
          if (v30)
          {
            long long v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v30);
            uint64_t v26 = *(float **)a3;
            uint64_t v23 = *(float **)(a3 + 8);
          }
          else
          {
            long long v31 = 0;
          }
          std::string::size_type v35 = (float *)&v31[4 * v32];
          float v37 = v21;
          *std::string::size_type v35 = v37;
          unint64_t v25 = v35 + 1;
          while (v23 != v26)
          {
            int v38 = *((_DWORD *)v23-- - 1);
            *((_DWORD *)v35-- - 1) = v38;
          }
          goto LABEL_42;
        }
        float v24 = v21;
        *uint64_t v23 = v24;
        int v20 = v23 + 1;
      }
      unint64_t v25 = v20;
LABEL_44:
      *(void *)(a3 + 8) = v25;
      ++v16;
    }
    while (v16 != v17);
  }
}

void sub_1B1D966B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void quasar::FingerprintDetector::registerParams(quasar::FingerprintDetector *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "fingerprint-detector");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 80, 0, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  kaldi::MfccOptions::Register((uint64_t)this + 456, (uint64_t)a2);
  kaldi::SlidingWindowCmnOptions::Register((uint64_t)this + 560, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnet-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Name of nnet file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 704, (uint64_t)v4, 0, 80, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold to apply to ivector score");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1216, (uint64_t)v4, 1, 80, 0, 84, 0);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ivector-fingerprint-ark-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "ark file with ivectors for fingerprints");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 728, (uint64_t)v4, 0, 80, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ivector-imposter-ark-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "ark file with ivectors with imposters");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 752, (uint64_t)v4, 0, 80, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-preceding-max-ms");
  std::string::basic_string[abi:ne180100]<0>(v4, "Maximum amount of audio used before trigger phrase");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 776, (uint64_t)v4, 0, 83, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-trailing-min-ms");
  std::string::basic_string[abi:ne180100]<0>(v4, "Minimum amount of audio used after trigger phrase");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 780, (uint64_t)v4, 0, 83, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-trailing-max-ms");
  std::string::basic_string[abi:ne180100]<0>(v4, "Maximum amount of audio used after trigger phrase");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 784, (uint64_t)v4, 0, 83, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-num-tokens");
  std::string::basic_string[abi:ne180100]<0>(v4, "The number of tokens in the trigger phrase (two for hey siri)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 788, (uint64_t)v4, 0, 83, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ivector-threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold to apply to ivector score");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1216, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ivector-score-bias");
  std::string::basic_string[abi:ne180100]<0>(v4, "Bias to apply to ivector score when combining with lmark");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1220, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-input-origins-list");
  std::string::basic_string[abi:ne180100]<0>(v4, "The input origins that are supported (should be comma separated)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 640, (uint64_t)v4, 0, 84, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-strategy");
  std::string::basic_string[abi:ne180100]<0>(v4, "Hashing strategy (e.g. 3x3)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1224, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-start-idx");
  std::string::basic_string[abi:ne180100]<0>(v4, "Feature start idx for hashing");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1296, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-end-idx");
  std::string::basic_string[abi:ne180100]<0>(v4, "Feature end idx for hashing");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1300, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-fingerprint-ark-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "ark file with landmark hash vectors for fingerprints");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1248, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-hash-imposter-ark-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "ark file with landmark hash vectors for imposters");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1272, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-min-len");
  std::string::basic_string[abi:ne180100]<0>(v4, "Min num frames for computing similarity between landmark hash vectors");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1304, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-max-len");
  std::string::basic_string[abi:ne180100]<0>(v4, "Max num frames for computing similarity between landmark hash vectors");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1308, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lmark-threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold to apply to landmark similarity");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1368, (uint64_t)v4, 0, 85, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D96F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MfccOptions::Register(uint64_t a1, uint64_t a2)
{
  kaldi::FrameExtractionOptions::Register(a1, a2);
  kaldi::MelBanksOptions::Register(a1 + 56, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-ceps");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of cepstra in MFCC computation (including C0)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 80, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "use-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Use energy (not C0) in MFCC computation");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 84, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "energy-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "Floor on energy (absolute, not relative) in MFCC computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 88, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "raw-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute energy before preemphasis and windowing");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 92, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "cepstral-lifter");
  std::string::basic_string[abi:ne180100]<0>(__p, "Constant that controls scaling of MFCCs");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 96, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "htk-compat");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, put energy or C0 last and use a factor of sqrt(2) on C0.  Warning: not sufficient to get HTK compatible features (need to change other parameters).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 100, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1D97338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::SlidingWindowCmnOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "cmn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Window in frames for running average CMN computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "min-cmn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum CMN window used at start of decoding (adds latency only at start). Only applicable if center == false, ignored otherwise.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "norm-vars");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, normalize variance to one.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "center");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, use a window centered on the current frame (to the extent possible, modulo end effects). If false, window is set based on \"cmn-window\" and \"lookahead\".");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 13, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "lookahead");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames to look ahead for online CMN. Ignored if center==true.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1D97604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::FingerprintDetector::finishInit(quasar::FingerprintDetector *this)
{
  unint64_t v2 = (const std::string *)((char *)this + 640);
  std::string::basic_string[abi:ne180100]<0>(v26, ",");
  quasar::splitAndTrimNoEmpty(v2, (char *)v26, &v9);
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  uint64_t v4 = (unsigned __int8 *)*((void *)&v9 + 1);
  for (uint64_t i = (unsigned __int8 *)v9; i != v4; i += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 664, i, (uint64_t)i);
  v26[0] = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v26);
  if (*((char *)this + 727) < 0) {
    uint64_t v5 = *((void *)this + 89);
  }
  else {
    uint64_t v5 = *((unsigned __int8 *)this + 727);
  }
  if (v5)
  {
    *((unsigned char *)this + 448) = 1;
    uint64_t v6 = *((unsigned int *)this + 128);
    kaldi::Matrix<float>::Resize((int32x2_t *)this + 72, v6, v6, 0, 0);
    kaldi::ComputeDctMatrix<float>((uint64_t)this + 576);
    kaldi::Matrix<float>::Resize((int32x2_t *)this + 72, *((unsigned int *)this + 134), v6, 2, 0);
    if (*((float *)this + 138) != 0.0)
    {
      kaldi::Vector<float>::Resize((void **)this + 77, *((unsigned int *)this + 134), 0);
      v7.n128_u32[0] = *((_DWORD *)this + 138);
      kaldi::ComputeLifterCoeffs((uint64_t *)this + 77, v7);
    }
    fst::FstReadOptions::FstReadOptions(v26, (char *)this + 704, 0, 0, 0);
    int v28 = 2;
    kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 792, (uint64_t)v26);
  }
  if (*((char *)this + 1247) < 0)
  {
    if (!*((void *)this + 154)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 1247))
  {
    return;
  }
  *((unsigned char *)this + 449) = 1;
  if ((kaldi::hashstring2enum((uint64_t *)this + 153, (int *)this + 328) & 1) == 0)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    double v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Unrecognized hash strategy string ", 34);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)this + 1224);
LABEL_30:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v9);
  }
  if ((*((_DWORD *)this + 324) & 0x80000000) != 0
    || (*((_DWORD *)this + 325) & 0x80000000) != 0
    || (*((_DWORD *)this + 326) & 0x80000000) != 0
    || (*((_DWORD *)this + 327) & 0x80000000) != 0)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v9, "Landmark params not properly set");
    goto LABEL_30;
  }
  quasar::readLandmarkHashVectors((std::string *)this + 52, (uint64_t *)&v9);
  std::vector<kaldi::Vector<float>>::__vdeallocate((uint64_t *)this + 165);
  *(_OWORD *)((char *)this + 1320) = v9;
  *((void *)this + 167) = v10;
  *(void *)&long long v10 = 0;
  long long v9 = 0uLL;
  v26[0] = (void **)&v9;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](v26);
  if ((*((char *)this + 1295) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 1295)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (*((void *)this + 160))
  {
LABEL_23:
    quasar::readLandmarkHashVectors((std::string *)this + 53, (uint64_t *)&v9);
    std::vector<kaldi::Vector<float>>::__vdeallocate((uint64_t *)this + 168);
    *((_OWORD *)this + 84) = v9;
    *((void *)this + 170) = v10;
    *(void *)&long long v10 = 0;
    long long v9 = 0uLL;
    v26[0] = (void **)&v9;
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](v26);
  }
LABEL_24:
  if (quasar::gLogLevel >= 4)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"fp-landmark=enabled", 19);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v9);
  }
}

void sub_1B1D97B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 - 136) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 136));
  JUMPOUT(0x1B1D97BA8);
}

void quasar::FingerprintDetector::FingerprintDetector(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decoder::Decoder(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A54690;
  *(_WORD *)(v3 + 448) = 0;
  kaldi::MfccOptions::MfccOptions((kaldi::MfccOptions *)(v3 + 456));
  *(void *)(a1 + 560) = 0x6400000258;
  *(_DWORD *)(a1 + 568) = 0;
  *(_WORD *)(a1 + 572) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 576);
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 640), "VoiceTrigger");
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_DWORD *)(a1 + 696) = 1065353216;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 7--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(void *)(a1 + 784) = 0x2FFFFFFFFLL;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 792));
}

void sub_1B1D97CE0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 775) < 0) {
    operator delete(*(void **)(v1 + 752));
  }
  if (*(char *)(v1 + 751) < 0) {
    operator delete(*(void **)(v1 + 728));
  }
  if (*(char *)(v1 + 727) < 0) {
    operator delete(*v6);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
  if (*(char *)(v1 + 663) < 0) {
    operator delete(*v4);
  }
  kaldi::Vector<float>::Destroy(v3);
  kaldi::Matrix<float>::~Matrix(v2);
  if (*(char *)(v1 + 503) < 0) {
    operator delete(*(void **)(v1 + 480));
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::FingerprintDetector::fbank2Mfcc(uint64_t a1, int32x2_t *a2, int32x2_t *a3)
{
  if (kaldi::MatrixBase<float>::NumCols((uint64_t)a2) != *(_DWORD *)(a1 + 512))
  {
    if (kaldi::MatrixBase<float>::NumCols((uint64_t)a2) != *(_DWORD *)(a1 + 512) + 1)
    {
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)__dst = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__dst);
      long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__dst, (uint64_t)"Invalid fbank dims. ", 20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Expected: ", 10);
      long long v21 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" Got: ", 6);
      kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__dst);
    }
    uint64_t v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    int v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    kaldi::Matrix<float>::Resize(a2, v6, (v7 - 1), 2, 0);
  }
  uint64_t v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  kaldi::Matrix<float>::Resize(a3, v8, *(unsigned int *)(a1 + 536), 0, 0);
  uint64_t result = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  if ((int)result >= 1)
  {
    int v10 = 0;
    do
    {
      long long v11 = (void *)(*(void *)a3 + 4 * a3[2].i32[0] * v10);
      unsigned int v12 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
      *(void *)&long long v27 = 0;
      __dst[0] = v11;
      __dst[1] = (void *)v12;
      uint64_t v13 = *(void *)a2 + 4 * a2[2].i32[0] * v10;
      int v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
      int v24 = 0;
      uint64_t v25 = 0;
      uint64_t v22 = v13;
      int v23 = v14;
      kaldi::VectorBase<float>::AddMatVec((uint64_t)__dst, (const float **)(a1 + 576), CblasNoTrans, (uint64_t)&v22, 1.0, 0.0);
      if (*(float *)(a1 + 552) != 0.0) {
        kaldi::VectorBase<float>::MulElements((uint64_t)__dst, (float **)(a1 + 616));
      }
      if (*(unsigned char *)(a1 + 556))
      {
        long long v15 = (float *)__dst[0];
        float v16 = *(float *)__dst[0];
        int v17 = *(_DWORD *)(a1 + 536);
        int v18 = v17 - 1;
        if (v17 >= 2) {
          memmove(__dst[0], (char *)__dst[0] + 4, 4 * (v17 - 1));
        }
        float v19 = v16 * 1.41421356;
        if (*(unsigned char *)(a1 + 540)) {
          float v19 = v16;
        }
        v15[v18] = v19;
      }
      ++v10;
      uint64_t result = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
    }
    while (v10 < (int)result);
  }
  return result;
}

uint64_t quasar::FingerprintDetector::applySlidingCmvn(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v6 = kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t v7 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::Matrix<float>::Resize(a3, v6, v7, 1, 0);
  return kaldi::SlidingWindowCmn(a1 + 560, a2, (uint64_t)a3);
}

uint64_t quasar::FingerprintDetector::getNormalizedIVectorSimilarity@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(result + 1168) == *(void *)(result + 1176))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  uint64_t v5 = result;
  long long v33 = 0u;
  long long v32 = 0u;
  int32x2_t v31 = (int32x2_t)&unk_1F0A51768;
  char v34 = 0;
  uint64_t v6 = (uint64_t *)(result + 792);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(result + 792);
  kaldi::CuMatrix<float>::CuMatrix<float>(v11, a2, 111, 0);
  kaldi::nnet1::Nnet::Feedforward(v6, (uint64_t)v11, &v31, -1, 0);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
  v11[1] = (void *)(v32 + 4 * (int)v33 * (HIDWORD(v32) - 1));
  v11[0] = &unk_1F0A472D0;
  *(void *)&long long v12 = DWORD2(v32);
  *((void *)&v12 + 1) = *((void *)&v33 + 1);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  long long v28 = 0;
  kaldi::Vector<float>::Init(&v28, SDWORD2(v32));
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v11, (uint64_t)&v28);
  float v7 = kaldi::VectorBase<float>::Norm((uint64_t)&v28, 2.0);
  float v8 = v7 / sqrt((double)(int)v29);
  if (v8 != 0.0)
  {
    kaldi::VectorBase<float>::Scale((uint64_t)&v28, 1.0 / v8);
LABEL_7:
    if (quasar::gLogLevel >= 5)
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)long long v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Speaker embedding=", 18);
      kaldi::VectorBase<float>::Write((uint64_t)&v28, v9, 0);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v11);
    }
    goto LABEL_9;
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)long long v11 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Encountered zero iVector", 24);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v11);
    goto LABEL_7;
  }
LABEL_9:
  quasar::computeDotProducts((uint64_t)&v28, (const float ***)(v5 + 1168), (uint64_t)v11);
  quasar::computeDotProducts((uint64_t)&v28, (const float ***)(v5 + 1192), (uint64_t)__p);
  quasar::tNormalize((float **)v11, (float **)__p, (uint64_t)a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v28);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v31);
}

void sub_1B1D98310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  kaldi::Vector<float>::Destroy(v14 - 120);
  kaldi::CuMatrix<float>::~CuMatrix(v14 - 96);
  _Unwind_Resume(a1);
}

uint64_t quasar::FingerprintDetector::checkFingerprint(float a1, uint64_t a2, uint64_t *a3, _DWORD *a4, float *a5)
{
  *a5 = -INFINITY;
  uint64_t v5 = *a3;
  if (a3[1] == *a3)
  {
    char v11 = 0;
LABEL_15:
    if (quasar::gLogLevel >= 4)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Did not match any known fingerprints", 36);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v17);
    }
    return v11 & 1;
  }
  unint64_t v10 = 0;
  char v11 = 0;
  do
  {
    if (quasar::gLogLevel >= 4)
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Index=", 6);
      long long v12 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" similarity=", 12);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v17);
      uint64_t v5 = *a3;
    }
    float v13 = *(float *)(v5 + 4 * v10);
    if (v13 > *a5)
    {
      *a4 = v10;
      *a5 = v13;
      float v13 = *(float *)(v5 + 4 * v10);
    }
    if (v13 > a1)
    {
      if (quasar::gLogLevel >= 4)
      {
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v17 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)"Index=", 6);
        uint64_t v14 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" similarity=", 12);
        long long v15 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" exceeded threshold=", 20);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v17);
        uint64_t v5 = *a3;
      }
      char v11 = 1;
    }
    ++v10;
  }
  while (v10 < (a3[1] - v5) >> 2);
  if ((v11 & 1) == 0) {
    goto LABEL_15;
  }
  return v11 & 1;
}

void sub_1B1D985EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t quasar::FingerprintDetector::getAudioProcessingWindow(_DWORD *a1, uint64_t a2, quasar::DecoderChainOutput **a3)
{
  if (!quasar::DecoderChainOutput::nonEmptyTopChoice(*a3)) {
    goto LABEL_4;
  }
  uint64_t v6 = (uint64_t **)*((void *)*a3 + 44);
  if (v6[1] == *v6) {
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = **v6;
  uint64_t v8 = (*v6)[1];
  unint64_t v9 = (int)a1[197];
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 5) < v9)
  {
LABEL_4:
    if (quasar::gLogLevel < 4) {
      return -1;
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Trigger phrase not detected", 27);
LABEL_6:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v18);
    return -1;
  }
  int v11 = *(_DWORD *)(v7 + 224 * (int)v9 - 188);
  unsigned int v12 = *(_DWORD *)(v8 - 192);
  if (v12 < a1[195] + v11)
  {
    if (quasar::gLogLevel < 4) {
      return -1;
    }
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Not enough audio to make a decision.", 36);
    goto LABEL_6;
  }
  int v13 = (*(_DWORD *)(v7 + 28) - a1[194]) & ~((*(_DWORD *)(v7 + 28) - a1[194]) >> 31);
  int v14 = a1[196];
  signed int v15 = v14 + v11;
  if ((int)v12 < v15) {
    signed int v15 = v12;
  }
  if (v14 <= 0) {
    signed int v16 = v12;
  }
  else {
    signed int v16 = v15;
  }
  uint64_t v17 = (v13
                     / (*(int (**)(void))(**(void **)(*(void *)a2 + 16) + 24))(*(void *)(*(void *)a2 + 16)));
  return v17 | ((unint64_t)(v16
                                               / (*(int (**)(void))(**(void **)(*(void *)a2 + 16)
                                                                               + 24))(*(void *)(*(void *)a2 + 16))) << 32);
}

void sub_1B1D98800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::FingerprintDetector::computeLandmarkHashSimilarity(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  if (a4 == -1) {
    uint64_t v8 = a3[1];
  }
  else {
    uint64_t v8 = *a3 + 24 * a4 + 24;
  }
  if (a4 == -1) {
    uint64_t v9 = *a3;
  }
  else {
    uint64_t v9 = *a3 + 24 * a4;
  }
  std::vector<float>::reserve((void **)a5, 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3));
  for (; v9 != v8; v9 += 24)
  {
    float v10 = kaldi::computeHashSimilarity(a2, v9, *(_DWORD *)(a1 + 1304), *(_DWORD *)(a1 + 1308));
    float v11 = v10;
    int v13 = *(float **)(a5 + 8);
    unint64_t v12 = *(void *)(a5 + 16);
    if ((unint64_t)v13 >= v12)
    {
      signed int v15 = *(float **)a5;
      uint64_t v16 = ((uint64_t)v13 - *(void *)a5) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        long long v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v19);
        signed int v15 = *(float **)a5;
        int v13 = *(float **)(a5 + 8);
      }
      else
      {
        long long v20 = 0;
      }
      long long v21 = (float *)&v20[4 * v16];
      *long long v21 = v11;
      int v14 = v21 + 1;
      while (v13 != v15)
      {
        int v22 = *((_DWORD *)v13-- - 1);
        *((_DWORD *)v21-- - 1) = v22;
      }
      *(void *)a5 = v21;
      *(void *)(a5 + 8) = v14;
      *(void *)(a5 + 16) = &v20[4 * v19];
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      float *v13 = v10;
      int v14 = v13 + 1;
    }
    *(void *)(a5 + 8) = v14;
  }
}

void sub_1B1D98988(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FingerprintDetector::getLandmarkSimilarity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v47);
  quasar::FingerprintDetector::applySlidingCmvn(a1, a2, v47);
  int v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)v47);
  memset(v46, 0, sizeof(v46));
  kaldi::Vector<float>::Resize(v46, (v8 - 1), 0);
  if ((kaldi::computeHash((uint64_t)v47, v46, *(_DWORD *)(a1 + 1296), *(_DWORD *)(a1 + 1300), *(_DWORD *)(a1 + 1312)) & 1) == 0)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Hash strategy ", 14);
    int v22 = *(char *)(a1 + 1247);
    if (v22 >= 0) {
      uint64_t v23 = a1 + 1224;
    }
    else {
      uint64_t v23 = *(void *)(a1 + 1224);
    }
    if (v22 >= 0) {
      uint64_t v24 = *(unsigned __int8 *)(a1 + 1247);
    }
    else {
      uint64_t v24 = *(void *)(a1 + 1232);
    }
    long long v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" is not implemented", 19);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v29);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"Landmark hash=", 14);
    kaldi::VectorBase<float>::Write((uint64_t)v46, v9, 0);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v29);
  }
  quasar::FingerprintDetector::computeLandmarkHashSimilarity(a1, (uint64_t)v46, (uint64_t *)(a1 + 1320), a3, (uint64_t)v27);
  int v10 = quasar::gLogLevel;
  if (quasar::gLogLevel >= 6)
  {
    unint64_t v12 = v27[0];
    float v11 = v27[1];
    if (v27[1] != v27[0])
    {
      unint64_t v13 = 0;
      do
      {
        if (v10 >= 6)
        {
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v29 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"[", 1);
          int v14 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] Unnormalized landmark hash score: ", 36);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v29);
          int v10 = quasar::gLogLevel;
          unint64_t v12 = v27[0];
          float v11 = v27[1];
        }
        ++v13;
      }
      while (v13 < (v11 - v12) >> 2);
    }
  }
  if (*(void *)(a1 + 1344) == *(void *)(a1 + 1352))
  {
    *(_OWORD *)a4 = *(_OWORD *)v27;
    *(void *)(a4 + 16) = v28;
  }
  else
  {
    quasar::FingerprintDetector::computeLandmarkHashSimilarity(a1, (uint64_t)v46, (uint64_t *)(a1 + 1344), -1, (uint64_t)__p);
    quasar::tNormalize((float **)v27, (float **)__p, a4);
    int v15 = quasar::gLogLevel;
    if (quasar::gLogLevel >= 6)
    {
      uint64_t v17 = *(void *)a4;
      uint64_t v16 = *(void *)(a4 + 8);
      if (v16 != *(void *)a4)
      {
        unint64_t v18 = 0;
        do
        {
          if (v15 >= 6)
          {
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            long long v30 = 0u;
            long long v31 = 0u;
            long long v29 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"[", 1);
            unint64_t v19 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"] T-normalized landmark hash score: ", 36);
            std::ostream::operator<<();
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v29);
            int v15 = quasar::gLogLevel;
            uint64_t v17 = *(void *)a4;
            uint64_t v16 = *(void *)(a4 + 8);
          }
          ++v18;
        }
        while (v18 < (v16 - v17) >> 2);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
  }
  kaldi::Vector<float>::Destroy((uint64_t)v46);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v47);
}

void sub_1B1D98D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  kaldi::Vector<float>::Destroy(v17 - 128);
  kaldi::Matrix<float>::~Matrix(v17 - 104);
  _Unwind_Resume(a1);
}

uint64_t quasar::FingerprintDetector::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  int v8 = (void *)(a1 + 664);
  InputOrigin = (unsigned __int8 *)quasar::SpeechRequestData::getInputOrigin(*a4);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, InputOrigin))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v75);
    uint64_t v10 = *(void *)(a2 + 536);
    if (!v10 && quasar::gLogLevel >= 1)
    {
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      *(_OWORD *)int v77 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Error: Utterance features were improperly cached.", 49);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v77);
      uint64_t v10 = *(void *)(a2 + 536);
    }
    float v11 = *(std::__shared_weak_count **)(a2 + 544);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    kaldi::OnlineCacheInput::GetCachedData(v10, v75, 0);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v75)
      && kaldi::MatrixBase<float>::NumCols((uint64_t)v75))
    {
      quasar::Decoder::calculateNBest(a2, a3, *((_DWORD *)*a4 + 4));
      unint64_t AudioProcessingWindow = quasar::FingerprintDetector::getAudioProcessingWindow((_DWORD *)a1, a2, (quasar::DecoderChainOutput **)a3);
      if ((AudioProcessingWindow & 0x80000000) != 0)
      {
        uint64_t v13 = 0;
        *(_DWORD *)(*a3 + 680) = 0;
LABEL_20:
        if (v76) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v76);
        }
        return v13;
      }
      if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v75) > (int)AudioProcessingWindow
        && SHIDWORD(AudioProcessingWindow) >= (int)AudioProcessingWindow
        && (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v75) >= SHIDWORD(AudioProcessingWindow))
      {
        if (quasar::gLogLevel >= 4)
        {
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          *(_OWORD *)int v77 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Processed Frames: ", 18);
          long long v20 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" to ", 4);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
        }
        long long v21 = v75;
        int v22 = kaldi::MatrixBase<float>::NumCols((uint64_t)v75);
        double v23 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v77, (uint64_t)v21, AudioProcessingWindow, HIDWORD(AudioProcessingWindow) - (int)AudioProcessingWindow, 0, v22);
        kaldi::Matrix<float>::Matrix(v74, v77, 111, v23);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v77);
        float v72 = -1.0;
        int v73 = -1;
        memset(&v71, 0, sizeof(v71));
        if (*(unsigned char *)(a1 + 448))
        {
          kaldi::Matrix<float>::Matrix((uint64_t)v77);
          quasar::FingerprintDetector::fbank2Mfcc(a1, v74, (int32x2_t *)v77);
          kaldi::Matrix<float>::Matrix((uint64_t)&v69);
          quasar::FingerprintDetector::applySlidingCmvn(a1, (uint64_t)v77, (int32x2_t *)&v69);
          uint64_t NormalizedIVectorSimilarity = quasar::FingerprintDetector::getNormalizedIVectorSimilarity(a1, (uint64_t)&v69, &__p);
          long long v25 = (float *)__p.__r_.__value_.__r.__words[0];
          int v26 = *(unsigned __int8 *)(a1 + 449);
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          std::string v71 = __p;
          if (v26) {
            int v27 = 0;
          }
          else {
            int v27 = quasar::FingerprintDetector::checkFingerprint(*(float *)(a1 + 1216), NormalizedIVectorSimilarity, (uint64_t *)&v71, &v73, &v72);
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&v69);
          kaldi::Matrix<float>::~Matrix((uint64_t)v77);
          uint64_t v28 = (float *)size;
        }
        else
        {
          uint64_t v28 = 0;
          long long v25 = 0;
          int v27 = 0;
        }
        long long v69 = 0uLL;
        uint64_t v70 = 0;
        if (*(unsigned char *)(a1 + 449))
        {
          if (*(unsigned char *)(a1 + 448))
          {
            if (v25 == v28)
            {
              long long v30 = v25;
            }
            else
            {
              long long v29 = v25 + 1;
              long long v30 = v25;
              if (v25 + 1 != v28)
              {
                float v31 = *v25;
                long long v30 = v25;
                long long v32 = v25 + 1;
                do
                {
                  float v33 = *v32++;
                  float v34 = v33;
                  if (v31 < v33)
                  {
                    float v31 = v34;
                    long long v30 = v29;
                  }
                  long long v29 = v32;
                }
                while (v32 != v28);
              }
            }
            unint64_t v38 = (char *)v30 - (char *)v25;
            if (quasar::gLogLevel >= 6)
            {
              long long v92 = 0u;
              long long v93 = 0u;
              long long v90 = 0u;
              long long v91 = 0u;
              long long v88 = 0u;
              long long v89 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              long long v82 = 0u;
              long long v83 = 0u;
              long long v80 = 0u;
              long long v81 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              *(_OWORD *)int v77 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Best i-vector match score=", 26);
              long long v39 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" index=", 7);
              std::ostream::operator<<();
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v77);
            }
            unint64_t v40 = v38 >> 2;
            quasar::FingerprintDetector::getLandmarkSimilarity(a1, (uint64_t)v74, v38 >> 2, (uint64_t)v77);
            float v41 = *(float *)(a1 + 1216);
            float v42 = *(float *)(a1 + 1368);
            long long v69 = *(_OWORD *)v77;
            uint64_t v70 = v78;
            long long v35 = v77[0];
            if (*(float *)v77[0] <= v42) {
              float v43 = -*(float *)(a1 + 1220);
            }
            else {
              float v43 = *(float *)(a1 + 1220);
            }
            float v44 = *v30 + v43;
            *long long v30 = v44;
            if (quasar::gLogLevel > 5)
            {
              long long v92 = 0u;
              long long v93 = 0u;
              long long v90 = 0u;
              long long v91 = 0u;
              long long v88 = 0u;
              long long v89 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              long long v82 = 0u;
              long long v83 = 0u;
              long long v80 = 0u;
              long long v81 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              *(_OWORD *)int v77 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Adjusted i-vector score=", 24);
              long long v45 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" thres=", 7);
              std::ostream::operator<<();
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v77);
              float v44 = *v30;
            }
            int v73 = v40;
            float v72 = v44;
            if (v44 > v41) {
              int v27 = 1;
            }
          }
          else
          {
            uint64_t LandmarkSimilarity = quasar::FingerprintDetector::getLandmarkSimilarity(a1, (uint64_t)v74, -1, (uint64_t)v77);
            float v37 = *(float *)(a1 + 1368);
            long long v69 = *(_OWORD *)v77;
            uint64_t v70 = v78;
            long long v35 = v77[0];
            int v27 = quasar::FingerprintDetector::checkFingerprint(v37, LandmarkSimilarity, (uint64_t *)&v69, &v73, &v72);
          }
        }
        else
        {
          long long v35 = 0;
        }
        if (v27) {
          int v46 = 2;
        }
        else {
          int v46 = 1;
        }
        uint64_t v47 = *a3;
        *(_DWORD *)(v47 + 680) = v46;
        uint64_t v48 = *(void *)(v47 + 424);
        std::string::basic_string[abi:ne180100]<0>(v77, "FingerprintAlgo");
        if (*(unsigned char *)(a1 + 448)) {
          long long v49 = "i";
        }
        else {
          long long v49 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(&v67, v49);
        if (*(unsigned char *)(a1 + 449)) {
          long long v50 = "l";
        }
        else {
          long long v50 = "";
        }
        std::string::basic_string[abi:ne180100]<0>(v65, v50);
        if ((v66 & 0x80u) == 0) {
          long long v51 = v65;
        }
        else {
          long long v51 = (void **)v65[0];
        }
        if ((v66 & 0x80u) == 0) {
          std::string::size_type v52 = v66;
        }
        else {
          std::string::size_type v52 = (std::string::size_type)v65[1];
        }
        long long v53 = std::string::append(&v67, (const std::string::value_type *)v51, v52);
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        quasar::SpeechRequestResultData::addAA(v48, (long long *)v77, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((char)v66 < 0) {
          operator delete(v65[0]);
        }
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v78) < 0) {
          operator delete(v77[0]);
        }
        uint64_t v55 = *(void *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v77, "FingerprintIndex");
        *(double *)&__p.__r_.__value_.__l.__data_ = (double)v73;
        quasar::SpeechRequestResultData::addAA(v55, (long long *)v77, (double *)&__p, 1);
        if (SBYTE7(v78) < 0) {
          operator delete(v77[0]);
        }
        uint64_t v56 = *(void *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v77, "FingerprintScore");
        *(double *)&__p.__r_.__value_.__l.__data_ = v72;
        quasar::SpeechRequestResultData::addAA(v56, (long long *)v77, (double *)&__p, 1);
        if (SBYTE7(v78) < 0) {
          operator delete(v77[0]);
        }
        uint64_t v57 = *(void *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v77, "FingerprintDetected");
        unint64_t v58 = (char *)quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 680));
        std::string::basic_string[abi:ne180100]<0>(&__p, v58);
        quasar::SpeechRequestResultData::addAA(v57, (long long *)v77, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v78) < 0) {
          operator delete(v77[0]);
        }
        if (quasar::gLogLevel >= 4)
        {
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          *(_OWORD *)int v77 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
          uint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"FingerprintDetected=", 20);
          uint64_t v60 = quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 680));
          size_t v61 = strlen(v60);
          std::string::size_type v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" MatchingIndex=", 15);
          uint64_t v63 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" matchingScore=", 15);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
        }
        if (v35)
        {
          operator delete(v35);
          long long v25 = (float *)v71.__r_.__value_.__r.__words[0];
        }
        if (v25)
        {
          v71.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
          operator delete(v25);
        }
        kaldi::Matrix<float>::~Matrix((uint64_t)v74);
        uint64_t v13 = 0;
        goto LABEL_20;
      }
      if (quasar::gLogLevel >= 1)
      {
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        *(_OWORD *)int v77 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Error: getAudioProcessingWindow failed", 38);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v77);
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      *(_OWORD *)int v77 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Zero-length utterance. Rejecting utterance.", 43);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
    }
    uint64_t v13 = 2;
    goto LABEL_20;
  }
  if (quasar::gLogLevel >= 4)
  {
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    *(_OWORD *)int v77 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
    int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"FingerprintDetector not run on input origin ", 44);
    uint64_t v15 = quasar::SpeechRequestData::getInputOrigin(*a4);
    int v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      uint64_t v17 = v15;
    }
    else {
      uint64_t v17 = *(void *)v15;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      uint64_t v18 = *(void *)(v15 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v77);
  }
  uint64_t v13 = 0;
  *(_DWORD *)(*a3 + 680) = 0;
  return v13;
}

void sub_1B1D99748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  operator delete(v51);
  if (__p) {
    operator delete(__p);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&a39);
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::FingerprintDetector::affectsRecognitionResults(quasar::FingerprintDetector *this)
{
  return 1;
}

uint64_t quasar::FingerprintDetector::requiresCacheFeatInputItf(quasar::FingerprintDetector *this)
{
  return 1;
}

uint64_t quasar::FingerprintDetector::supportsEager(quasar::FingerprintDetector *this)
{
  return 1;
}

void quasar::FingerprintDetector::~FingerprintDetector(void **this)
{
  quasar::FingerprintDetector::~FingerprintDetector(this);
  JUMPOUT(0x1B3EA8670);
}

{
  void **v2;

  *this = &unk_1F0A54690;
  uint64_t v2 = this + 168;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 165;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1295) < 0) {
    operator delete(this[159]);
  }
  if (*((char *)this + 1271) < 0) {
    operator delete(this[156]);
  }
  if (*((char *)this + 1247) < 0) {
    operator delete(this[153]);
  }
  uint64_t v2 = this + 149;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 146;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v2);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(this + 99));
  if (*((char *)this + 775) < 0) {
    operator delete(this[94]);
  }
  if (*((char *)this + 751) < 0) {
    operator delete(this[91]);
  }
  if (*((char *)this + 727) < 0) {
    operator delete(this[88]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 83));
  if (*((char *)this + 663) < 0) {
    operator delete(this[80]);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(this + 77));
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 72));
  if (*((char *)this + 503) < 0) {
    operator delete(this[60]);
  }
  quasar::Decoder::~Decoder((quasar::Decoder *)this);
}

void kaldi::FrameExtractionOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "sample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Waveform data sample frequency (must match the waveform file, if specified there)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame length in milliseconds");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame shift in milliseconds");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "preemphasis-coefficient");
  std::string::basic_string[abi:ne180100]<0>(__p, "Coefficient for use in signal preemphasis");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-dc-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "Subtract mean from waveform on each frame");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "dither");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dithering constant (0.0 means no dither)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "window-type");
  std::string::basic_string[abi:ne180100]<0>(__p, "Type of window (\"hamming\"|\"hanning\"|\"povey\"|\"rectangular\")");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "round-to-power-of-two");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, round window size to power of two.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 48, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "snip-edges");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, end effects will be handled by outputting only frames that completely fit in the file, and the number of frames depends on the frame-length.  If false, the number of frames depends only on the frame-shift, and we reflect the data at the ends.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 49, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1D99DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::MelBanksOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "num-mel-bins");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of triangular mel-frequency bins");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "low-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "Low cutoff frequency for mel bins");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "high-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "High cutoff frequency for mel bins (if < 0, offset from Nyquist)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "vtln-low");
  std::string::basic_string[abi:ne180100]<0>(__p, "Low inflection point in piecewise linear VTLN warping function");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "vtln-high");
  std::string::basic_string[abi:ne180100]<0>(__p, "High inflection point in piecewise linear VTLN warping function (if negative, offset from high-mel-freq");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "debug-mel");
  std::string::basic_string[abi:ne180100]<0>(__p, "Print out debugging information for mel bin computation");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 20, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1D9A144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

kaldi::MfccOptions *kaldi::MfccOptions::MfccOptions(kaldi::MfccOptions *this)
{
  *(_OWORD *)this = xmmword_1B255FC70;
  *((_DWORD *)this + 4) = 1064849900;
  *((unsigned char *)this + 20) = 1;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 3, "povey");
  *((_WORD *)this + ++*(_DWORD *)(result + 24) = 257;
  *(void *)((char *)this + --*(_DWORD *)(a9 + 52) = 0x17BF800000;
  *(_OWORD *)((char *)this + 60) = xmmword_1B257A960;
  *((_WORD *)this + 38) = 0;
  *((_DWORD *)this + 20) = 13;
  *((unsigned char *)this + 84) = 1;
  *((_DWORD *)this + 22) = 0;
  *((unsigned char *)this + 92) = 1;
  *((_DWORD *)this + ++*(_DWORD *)(result + 24) = 1102053376;
  *((unsigned char *)this + 100) = 0;
  return this;
}

uint64_t kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Close(void *a1)
{
  kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(a1);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 56))();
  if (*a1) {
    (*(void (**)(void))(*(void *)*a1 + 72))(*a1);
  }
  *a1 = 0;
  return v2;
}

void *kaldi::SequentialTableReader<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::CheckImpl(void *result)
{
  if (!*result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Trying to use empty SequentialTableReader (perhaps you ", 55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "passed the empty string as an argument to a program?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(uint64_t a1, std::string *this)
{
  if (*(_DWORD *)(a1 + 76) && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 75))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "TableReader::Open, error closing previous input.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"TableReader::Open, error closing previous input (only warning, since permissive mode).", 86);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    }
  }
  uint64_t v4 = (_OWORD *)(a1 + 48);
  kaldi::ClassifyRspecifier(this, a1 + 48, a1 + 72);
  uint64_t v5 = 1;
  if ((kaldi::Input::OpenInternal((void *)(a1 + 8), a1 + 48, 1, 0) & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      char v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"TableReader: failed to open stream ", 35);
      if (*(char *)(a1 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *v4;
        v14.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
      }
      kaldi::PrintableRxfilename((uint64_t)&v14, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    }
    goto LABEL_39;
  }
  *(_DWORD *)(a1 + 76) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
  if (*(_DWORD *)(a1 + 76) == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"TableReader: error beginning to read table (wrong filename?): ", 62);
      if (*(char *)(a1 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else
      {
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *v4;
        v13.__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
      }
      kaldi::PrintableRxfilename((uint64_t)&v13, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v10 = &__p;
      }
      else {
        uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v10, v11);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    }
    kaldi::Input::Close((kaldi::Input *)(a1 + 8));
LABEL_39:
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 76) = 0;
  }
  return v5;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Done(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 76) - 2;
  if (v1 >= 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Done() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (3u >> (v1 & 7)) & 1;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::IsOpen(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 76);
  if (v1 >= 6 || ((0x3Du >> v1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "IsOpen() called on invalid object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (0x3Eu >> v1) & 1;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Key(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) != 4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Key() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return a1 + 24;
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Value(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) != 4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Value() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  unsigned int v1 = (uint64_t *)(a1 + 16);
  return kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Value(v1);
}

void kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::FreeCurrent(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) == 4)
  {
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 16));
    *(_DWORD *)(a1 + 76) = 5;
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"TableReader: FreeCurrent called at the wrong time.", 50);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  }
}

void sub_1B1D9AA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Next(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 76);
  if (v2 != 1 && v2 != 5)
  {
    if (v2 != 4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "TableReader: Next() called wrongly.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
    }
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 16));
  }
  uint64_t v4 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
  std::ios_base::clear((std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)), 0);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, a1 + 24);
  int v5 = *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 32);
  if ((v5 & 2) == 0)
  {
    if ((v5 & 5) != 0)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Error reading archive ", 22);
        if (*(char *)(a1 + 71) < 0) {
          std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
        }
        else {
          std::string v27 = *(std::string *)(a1 + 48);
        }
        kaldi::PrintableRxfilename((uint64_t)&v27, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_57;
        }
        std::string::size_type v11 = (void *)v27.__r_.__value_.__r.__words[0];
LABEL_29:
        operator delete(v11);
LABEL_57:
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        goto LABEL_58;
      }
      goto LABEL_58;
    }
    int v8 = std::istream::peek();
    if (v8 != 9)
    {
      if (v8 == 10) {
        goto LABEL_17;
      }
      if (v8 != 32)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
          unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Invalid archive file format: expected space after key ", 54);
          int v13 = *(char *)(a1 + 47);
          if (v13 >= 0) {
            uint64_t v14 = a1 + 24;
          }
          else {
            uint64_t v14 = *(void *)(a1 + 24);
          }
          if (v13 >= 0) {
            uint64_t v15 = *(unsigned __int8 *)(a1 + 47);
          }
          else {
            uint64_t v15 = *(void *)(a1 + 32);
          }
          int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
          uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", got character ", 16);
          char v26 = std::istream::peek();
          kaldi::CharToString((kaldi *)&v26, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v18 = &__p;
          }
          else {
            uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
          }
          long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
          long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", reading ", 10);
          if (*(char *)(a1 + 71) < 0) {
            std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
          }
          else {
            std::string v24 = *(std::string *)(a1 + 48);
          }
          kaldi::PrintableRxfilename((uint64_t)&v24, &v25);
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v22 = &v25;
          }
          else {
            int v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
          }
          if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v23 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v23 = v25.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_57;
          }
          std::string::size_type v11 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_29;
        }
LABEL_58:
        int v7 = 3;
        goto LABEL_59;
      }
    }
    std::istream::get();
LABEL_17:
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Read((uint64_t *)(a1 + 16));
  }
  int v7 = 2;
LABEL_59:
  *(_DWORD *)(a1 + 76) = v7;
}

void sub_1B1D9AED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

BOOL kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Close(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Close() called on TableReader twice or otherwise wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  if (*(void *)(a1 + 8)) {
    kaldi::Input::Close((kaldi::Input *)(a1 + 8));
  }
  if (*(_DWORD *)(a1 + 76) == 4) {
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 16));
  }
  int v2 = *(_DWORD *)(a1 + 76);
  if (*(unsigned char *)(a1 + 75))
  {
    BOOL result = 1;
    if (v2 == 3 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Error detected closing TableReader for archive ", 47);
      if (*(char *)(a1 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
      }
      else {
        std::string v9 = *(std::string *)(a1 + 48);
      }
      kaldi::PrintableRxfilename((uint64_t)&v9, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
      int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" but ignoring ", 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"it as permissive mode specified.", 32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      BOOL result = 1;
    }
  }
  else
  {
    BOOL result = v2 != 3;
  }
  *(_DWORD *)(a1 + 76) = 0;
  return result;
}

void kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderArchiveImpl(uint64_t a1)
{
  kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderArchiveImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t *kaldi::KaldiObjectHolder<kaldi::Vector<float>>::~KaldiObjectHolder(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    kaldi::Vector<float>::Destroy(*a1);
    MEMORY[0x1B3EA8670](v2, 0x1080C40EEF68E16);
  }
  return a1;
}

uint64_t kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Value(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "KaldiObjectHolder::Value() called wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t *kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    kaldi::Vector<float>::Destroy(*result);
    uint64_t result = (uint64_t *)MEMORY[0x1B3EA8670](v1, 0x1080C40EEF68E16);
    *uint64_t v2 = 0;
  }
  return result;
}

void kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Read(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    kaldi::Vector<float>::Destroy(*a1);
    MEMORY[0x1B3EA8670](v1, 0x1080C40EEF68E16);
  }
  operator new();
}

void sub_1B1D9B314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SequentialTableReaderArchiveImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderArchiveImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A48428;
  int v2 = *(_DWORD *)(a1 + 76);
  if (v2 != 3)
  {
LABEL_18:
    if (v2 == 4) {
      kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 16));
    }
    goto LABEL_20;
  }
  if (!*(unsigned char *)(a1 + 75))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"TableReader: reading archive failed: ", 37);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string v12 = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&v12, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Error detected closing TableReader for archive ", 47);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string v13 = *(std::string *)(a1 + 48);
    }
    kaldi::PrintableRxfilename((uint64_t)&v13, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v4 = &__p;
    }
    else {
      uint64_t v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v5 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but ignoring ", 14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"it as permissive mode specified.", 32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    int v2 = *(_DWORD *)(a1 + 76);
    goto LABEL_18;
  }
LABEL_20:
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  kaldi::KaldiObjectHolder<kaldi::Vector<float>>::~KaldiObjectHolder((uint64_t *)(a1 + 16));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Open(uint64_t a1, std::string *this)
{
  if (*(_DWORD *)(a1 + 120) && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"TableReader::Open, error closing previous input ", 48);
    if (*(char *)(a1 + 87) < 0) {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
    }
    else {
      std::string v11 = *(std::string *)(a1 + 64);
    }
    kaldi::PrintableRxfilename((uint64_t)&v11, &__p);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)&__p);
    std::string::~string(&__p);
    std::string::~string(&v11);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  char v10 = 0;
  kaldi::ClassifyRspecifier(this, a1 + 64, a1 + 88);
  if (kaldi::Input::OpenInternal((void *)(a1 + 8), a1 + 64, 1, &v10))
  {
    if (v10)
    {
      *(_DWORD *)(a1 + 120) = 2;
LABEL_10:
      kaldi::Input::Close((kaldi::Input *)(a1 + 8));
      return 0;
    }
    *(_DWORD *)(a1 + 120) = 6;
    (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
    if (*(_DWORD *)(a1 + 120) == 2) {
      goto LABEL_10;
    }
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Failed to open script file ", 27);
      if (*(char *)(a1 + 87) < 0) {
        std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
      }
      else {
        std::string v9 = *(std::string *)(a1 + 64);
      }
      kaldi::PrintableRxfilename((uint64_t)&v9, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    }
    uint64_t result = 0;
    *(_DWORD *)(a1 + 120) = 0;
  }
  return result;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Done(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 120) - 1;
  if (v1 >= 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Done() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (3u >> v1) & 1;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::IsOpen(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 120);
  if (v1 >= 6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "IsOpen() called on invalid object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (0x3Eu >> v1) & 1;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Key(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 120) - 3) >= 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Key() called on TableReader object at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return a1 + 40;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Value(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 120);
  int v3 = v2;
  if (v2 == 3)
  {
    kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::LoadCurrent(a1);
    int v3 = *(_DWORD *)(a1 + 120);
  }
  if (v3 != 4)
  {
    if (v3 == 5)
    {
      if (v2 == 3)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
        std::string::size_type v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"TableReader: failed to load object from ", 40);
        if (*(char *)(a1 + 119) < 0) {
          std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
        }
        else {
          std::string v10 = *(std::string *)(a1 + 96);
        }
        kaldi::PrintableRxfilename((uint64_t)&v10, &v11);
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v6 = &v11;
        }
        else {
          uint64_t v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
        }
        if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v11.__r_.__value_.__l.__size_;
        }
        int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, size);
        std::string v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" (to suppress this error, add the permissive ", 45);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "(p,) option to the rspecifier.");
        std::string::~string(&v11);
        std::string::~string(&v10);
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "TableReader: you called Value() after FreeCurrent().");
      }
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "TableReader: Value() called at the wrong time.");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  return kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Value((uint64_t *)(a1 + 24));
}

void sub_1B1D9BC4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::FreeCurrent(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 120) == 4)
  {
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 24));
    *(_DWORD *)(a1 + 120) = 5;
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"TableReader: FreeCurrent called at the wrong time.", 50);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
  }
}

void sub_1B1D9BD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Next(unsigned char *a1)
{
  do
  {
    kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::NextScpLine((uint64_t)a1);
    uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 8))(a1);
    if (result) {
      break;
    }
    if (!a1[91]) {
      break;
    }
    uint64_t result = kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::LoadCurrent((uint64_t)a1);
  }
  while (!result);
  return result;
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::Close(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v2 = (kaldi::Input *)(a1 + 8);
  if (v3) {
    kaldi::Input::Close(v2);
  }
  if (*(void *)(a1 + 16)) {
    kaldi::Input::Close((kaldi::Input *)(a1 + 16));
  }
  if (*(_DWORD *)(a1 + 120) == 4) {
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 24));
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Close() called on input that was not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  int v4 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = 0;
  if (v4 == 2)
  {
    if (!*(unsigned char *)(a1 + 91)) {
      return 0;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Close() called on scp file with read error, ignoring the error because permissive mode specified.", 97);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    }
  }
  return 1;
}

void sub_1B1D9BEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderScriptImpl(uint64_t a1)
{
  kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderScriptImpl(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::LoadCurrent(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 120) != 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "TableReader: LoadCurrent() called at the wrong time.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  int v2 = (kaldi::Input *)(a1 + 16);
  uint64_t v3 = (std::string *)(a1 + 96);
  if (kaldi::Input::OpenInternal((void *)(a1 + 16), a1 + 96, 1, 0))
  {
    kaldi::Input::Stream(v2);
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Read((uint64_t *)(a1 + 24));
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"TableReader: failed to open file ", 33);
    if (*(char *)(a1 + 119) < 0) {
      std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
    }
    else {
      std::string v8 = *v3;
    }
    kaldi::PrintableRxfilename((uint64_t)&v8, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 120) = 5;
  return result;
}

void sub_1B1D9C194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::NextScpLine(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 120);
  if ((v2 - 5) >= 2 && v2 != 3)
  {
    if (v2 != 4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "SequentialTableReader, reading script file: Next called wrongly.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 24));
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  int v4 = (void *)kaldi::Input::Stream((kaldi::Input *)(a1 + 8));
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  std::string::size_type v5 = std::locale::use_facet(&v13, MEMORY[0x1E4FBA258]);
  unsigned __int8 v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v13);
  int v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (uint64_t)__p, v6);
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) == 0)
  {
    kaldi::SplitStringOnFirstSpace((uint64_t)__p, a1 + 40, a1 + 96);
    if (*(char *)(a1 + 63) < 0)
    {
      if (!*(void *)(a1 + 48)) {
        goto LABEL_18;
      }
    }
    else if (!*(unsigned char *)(a1 + 63))
    {
      goto LABEL_18;
    }
    if (*(char *)(a1 + 119) < 0)
    {
      if (*(void *)(a1 + 104)) {
        goto LABEL_16;
      }
    }
    else if (*(unsigned char *)(a1 + 119))
    {
LABEL_16:
      int v10 = 3;
LABEL_19:
      *(_DWORD *)(a1 + 120) = v10;
      goto LABEL_20;
    }
LABEL_18:
    int v10 = 2;
    goto LABEL_19;
  }
  *(_DWORD *)(a1 + 120) = 1;
  kaldi::Input::Close((kaldi::Input *)(a1 + 8));
  uint64_t v9 = *(void *)(a1 + 16);
  std::string v8 = (kaldi::Input *)(a1 + 16);
  if (v9) {
    kaldi::Input::Close(v8);
  }
LABEL_20:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1D9C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::locale::~locale((std::locale *)(v15 - 56));
  _Unwind_Resume(a1);
}

uint64_t kaldi::SequentialTableReaderScriptImpl<kaldi::KaldiObjectHolder<kaldi::Vector<float>>>::~SequentialTableReaderScriptImpl(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A483C8;
  int v2 = *(_DWORD *)(a1 + 120);
  if (v2 == 4)
  {
    kaldi::KaldiObjectHolder<kaldi::Vector<float>>::Clear((uint64_t *)(a1 + 24));
  }
  else if (v2 == 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TableReader: reading script file failed: from scp ", 50);
    if (*(char *)(a1 + 87) < 0) {
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a1 + 64), *(void *)(a1 + 72));
    }
    else {
      std::string v7 = *(std::string *)(a1 + 64);
    }
    kaldi::PrintableRxfilename((uint64_t)&v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  kaldi::KaldiObjectHolder<kaldi::Vector<float>>::~KaldiObjectHolder((uint64_t *)(a1 + 24));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 16));
  kaldi::Input::~Input((kaldi::Input *)(a1 + 8));
  return a1;
}

void *std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v4, *(unsigned int *)(a2 + 8), 1);
  uint64_t result = kaldi::VectorBase<float>::CopyFromVec(v4, (const void **)a2);
  *(void *)(a1 + 8) = v4 + 24;
  return result;
}

void sub_1B1D9C554(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = (uint64_t)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  int v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v11, *(unsigned int *)(a2 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v11, (const void **)a2);
  v15 += 24;
  std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1D9C668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::result_handler::operator<<(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::size_type v4 = *(void *)(a2 + 8);
    if (v4)
    {
      std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, v4);
      goto LABEL_7;
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    std::string v50 = *(std::string *)a2;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "null");
LABEL_7:
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &v50;
  }
  else {
    unint64_t v5 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v50.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, size);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
  int v9 = *(char *)(a2 + 47);
  if (v9 >= 0) {
    uint64_t v10 = a2 + 24;
  }
  else {
    uint64_t v10 = *(void *)(a2 + 24);
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 32);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::locale v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  int v14 = *(char *)(a2 + 71);
  if (v14 >= 0) {
    uint64_t v15 = a2 + 48;
  }
  else {
    uint64_t v15 = *(void *)(a2 + 48);
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a2 + 71);
  }
  else {
    uint64_t v16 = *(void *)(a2 + 56);
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", progress=", 11);
  uint64_t v18 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", maybeCompleteCommand=", 23);
  std::string::size_type v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", hasLeadingFillerWord=", 23);
  long long v20 = (void *)std::ostream::operator<<();
  long long v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", verbTokens=<", 14);
  v47[0] = (uint64_t)" ";
  v47[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 88), v47);
  if ((v49 & 0x80u) == 0) {
    int v22 = v48;
  }
  else {
    int v22 = (void **)v48[0];
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v23 = v49;
  }
  else {
    uint64_t v23 = (uint64_t)v48[1];
  }
  std::string v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  std::string v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)">", 1);
  char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", targetTokens=<", 16);
  v44[0] = (uint64_t)" ";
  v44[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 112), v44);
  if ((v46 & 0x80u) == 0) {
    std::string v27 = v45;
  }
  else {
    std::string v27 = (void **)v45[0];
  }
  if ((v46 & 0x80u) == 0) {
    uint64_t v28 = v46;
  }
  else {
    uint64_t v28 = (uint64_t)v45[1];
  }
  long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
  long long v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)">", 1);
  float v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", payloadTokens=<", 17);
  v41[0] = (uint64_t)" ";
  v41[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 136), v41);
  if ((v43 & 0x80u) == 0) {
    long long v32 = __p;
  }
  else {
    long long v32 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v33 = v43;
  }
  else {
    uint64_t v33 = (uint64_t)__p[1];
  }
  float v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
  long long v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)">", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", targetTokensSize=", 19);
  long long v36 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", payloadTokensSize=", 20);
  float v37 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)", finishedTarget=", 17);
  unint64_t v38 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", fillerTokensCount=", 20);
  long long v39 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)")", 1);
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v46 < 0) {
    operator delete(v45[0]);
  }
  if ((char)v49 < 0) {
    operator delete(v48[0]);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  void *v4;
  void **v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v21[2];
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;

  std::string::size_type v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(preceding=<", 12);
  quasar::getTopChoice(a2, 1, v24);
  if ((v25 & 0x80u) == 0) {
    unint64_t v5 = v24;
  }
  else {
    unint64_t v5 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    unsigned __int8 v6 = v25;
  }
  else {
    unsigned __int8 v6 = (uint64_t)v24[1];
  }
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)">", 1);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", command=<", 11);
  uint64_t v10 = *(char *)(a2 + 151);
  if (v10 >= 0) {
    uint64_t v11 = a2 + 128;
  }
  else {
    uint64_t v11 = *(void *)(a2 + 128);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 151);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 136);
  }
  std::locale v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  int v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", interpretations=<", 19);
  v21[0] = (uint64_t)", ";
  v21[1] = 2;
  quasar::join<std::vector<quasar::result_handler::CommandInterpretation>>((uint64_t *)(a2 + 152), v21);
  if ((v23 & 0x80u) == 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v17 = v23;
  }
  else {
    uint64_t v17 = (uint64_t)__p[1];
  }
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  std::string::size_type v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)">", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  return a1;
}

void sub_1B1D9C9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1D9CBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<quasar::result_handler::CommandInterpretation>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::result_handler::CommandInterpretation>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1D9CD64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::result_handler::operator<<(void *a1)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(hasVoiceCommandInExhaustiveParses=", 35);
  uint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", hasVoiceCommandParses=", 24);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", hasVoiceCommandEditIntent=", 28);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", hasVoiceCommandAfterReranking=", 32);
  unint64_t v5 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", hasNoVoiceCommandAfterRespeakCheck=", 37);
  unsigned __int8 v6 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  return a1;
}

uint64_t quasar::join<std::vector<quasar::result_handler::CommandData>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::result_handler::CommandData>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1D9CFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *quasar::joinToStream<std::vector<quasar::result_handler::CommandInterpretation>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unsigned __int8 v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = quasar::result_handler::operator<<(v6, v3);
      char v7 = 0;
      v3 += 168;
    }
    while (v3 != v4);
  }
  return result;
}

void *quasar::joinToStream<std::vector<quasar::result_handler::CommandData>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unsigned __int8 v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = quasar::result_handler::operator<<(v6, v3);
      char v7 = 0;
      v3 += 184;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t quasar::AMKeywordDetection::AMKeywordDetection(uint64_t a1, long long *a2, uint64_t a3, char a4)
{
  *(void *)a1 = &unk_1F0A53ED0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v7;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 40), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(unsigned char *)(a1 + 208) = a4;
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"empty CTC keyword", 17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  return a1;
}

void sub_1B1D9D1C0(_Unwind_Exception *exception_object)
{
  unsigned __int8 v6 = *(void **)(v1 + 184);
  if (v6)
  {
    *(void *)(v1 + 192) = v6;
    operator delete(v6);
  }
  long long v7 = *(void **)(v1 + 160);
  if (v7)
  {
    *(void *)(v1 + 168) = v7;
    operator delete(v7);
  }
  char v8 = *(void **)(v1 + 136);
  if (v8)
  {
    *(void *)(v1 + 144) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(v1 + 112);
  if (v9)
  {
    *(void *)(v1 + 120) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(v1 + 88);
  if (v10)
  {
    *(void *)(v1 + 96) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 72) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v12;
    operator delete(v12);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void quasar::AMKeywordDetection::~AMKeywordDetection(quasar::AMKeywordDetection *this)
{
  *(void *)this = &unk_1F0A53ED0;
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + ++*(_DWORD *)(result + 24) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    *((void *)this + 15) = v5;
    operator delete(v5);
  }
  unsigned __int8 v6 = (void *)*((void *)this + 11);
  if (v6)
  {
    *((void *)this + 12) = v6;
    operator delete(v6);
  }
  long long v7 = (void *)*((void *)this + 8);
  if (v7)
  {
    *((void *)this + 9) = v7;
    operator delete(v7);
  }
  char v8 = (void *)*((void *)this + 5);
  if (v8)
  {
    *((void *)this + 6) = v8;
    operator delete(v8);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  quasar::AMKeywordDetection::~AMKeywordDetection(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::AMKeywordDetection::init(quasar::AMKeywordDetection *this)
{
  uint64_t v2 = (char *)this + 64;
  uint64_t v1 = *((void *)this + 8);
  *((void *)this + 4) = -1;
  *((void *)this + 9) = v1;
  uint64_t v3 = (char *)this + 88;
  unint64_t v5 = (char *)this + 112;
  uint64_t v4 = *((void *)this + 14);
  *((void *)this + 12) = *((void *)this + 11);
  *((void *)this + 15) = v4;
  unsigned __int8 v6 = (char *)this + 136;
  *((void *)this + 18) = *((void *)this + 17);
  long long v7 = (char *)this + 184;
  uint64_t v9 = (char *)this + 160;
  uint64_t v8 = *((void *)this + 20);
  *((void *)this + ++*(_DWORD *)(result + 24) = *((void *)this + 23);
  *((void *)this + 21) = v8;
  std::vector<float>::resize((uint64_t)this + 64, (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3, &quasar::negInf);
  std::vector<float>::resize((uint64_t)v3, (uint64_t)(*((void *)v2 - 2) - *((void *)v2 - 3)) >> 3, &quasar::negInf);
  std::vector<float>::resize((uint64_t)v5, (uint64_t)(*((void *)v2 - 2) - *((void *)v2 - 3)) >> 3, &quasar::negInf);
  unint64_t v10 = (uint64_t)(*((void *)v2 - 2) - *((void *)v2 - 3)) >> 3;
  uint64_t v13 = -1;
  std::vector<unsigned long>::resize((uint64_t)v6, v10, &v13);
  unint64_t v11 = (uint64_t)(*((void *)v2 - 2) - *((void *)v2 - 3)) >> 3;
  uint64_t v13 = -1;
  std::vector<unsigned long>::resize((uint64_t)v7, v11, &v13);
  unint64_t v12 = (uint64_t)(*((void *)v2 - 2) - *((void *)v2 - 3)) >> 3;
  uint64_t v13 = -1;
  std::vector<unsigned long>::resize((uint64_t)v9, v12, &v13);
}

void quasar::AMKeywordDetection::propagate(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = (void *)a1[5];
  ++a1[4];
  unint64_t v5 = a1[6] - (void)v4;
  if ((uint64_t)v5 > 8)
  {
    unsigned __int8 v6 = a1 + 23;
    long long v7 = (void *)a1[23];
    unint64_t v8 = v5 >> 3;
    uint64_t v9 = (float *)a1[14];
    unint64_t v10 = (void **)(a1 + 20);
    uint64_t v11 = *a2;
    unint64_t v12 = (void *)a1[17];
    int v13 = *((unsigned __int8 *)v3 + 208);
    unint64_t v14 = (v5 >> 3) + 1;
    uint64_t v15 = 8 * (v5 >> 3) - 8;
    uint64_t v16 = v5 >> 3;
    long long v53 = (float *)v3[11];
    long long v54 = v3;
    uint64_t v17 = v53 - 1;
    uint64_t v18 = v3[8] - 8;
    std::string::size_type v19 = v9 - 2;
    unint64_t v20 = v5 >> 3;
    size_t v61 = v4;
    uint64_t v62 = a3;
    uint64_t v59 = v7;
    uint64_t v60 = v9;
    uint64_t v57 = v11;
    unint64_t v58 = v12;
    int v56 = v13;
    uint64_t v55 = v3 + 23;
    while (1)
    {
      unint64_t v21 = v20 - 1;
      float v22 = v19[v16 + 1];
      uint64_t v23 = &v17[v8];
      BOOL v24 = v22 < *v23;
      if (v22 <= *v23) {
        std::string v25 = v10;
      }
      else {
        std::string v25 = v6;
      }
      *(void *)((char *)v7 + v15) = *(void *)(*v25 + v15);
      if (v24) {
        char v26 = &v17[v8];
      }
      else {
        char v26 = &v19[v16 + 1];
      }
      v19[v16 + 1] = *v26 + *(float *)(v11 + 4 * a3);
      unint64_t v27 = v20 - 2;
      float v28 = *v23;
      if (*(void *)((char *)v4 + v15) == *(void *)((char *)v4 + v15 - 8))
      {
        long long v29 = &v9[v27];
        float v30 = v19[v8];
        if (v28 <= v30)
        {
          long long v32 = &v7[v27];
LABEL_16:
          float v31 = *v10;
          goto LABEL_17;
        }
        float v31 = *v10;
        long long v32 = &(*v10)[v21];
      }
      else
      {
        long long v29 = (float *)(v18 + v16 * 4);
        float v30 = *(float *)(v18 + 4 * v8);
        if (v28 <= v30)
        {
          long long v32 = &v12[v27];
          goto LABEL_16;
        }
        float v31 = *v10;
        long long v32 = (void *)((char *)*v10 + v15);
      }
LABEL_17:
      *(void *)((char *)v31 + v15) = *v32;
      if (v28 >= v30) {
        long long v29 = &v17[v16];
      }
      float v33 = *v29 + *(float *)(v11 + 4 * *(void *)((char *)v4 + v15));
      v17[v16] = v33;
      float v34 = v19[v16 + 1];
      if (v34 <= v33) {
        long long v35 = (void *)((char *)v31 + v15);
      }
      else {
        long long v35 = (void *)((char *)v7 + v15);
      }
      *(void *)((char *)v12 + v15) = *v35;
      if (v34 >= v33) {
        float v36 = v34;
      }
      else {
        float v36 = v33;
      }
      if (!v13)
      {
        float v37 = v31;
        float v38 = expf(v34 - v36);
        float v39 = expf(v33 - v36);
        float v40 = logf(v38 + v39);
        float v31 = v37;
        unsigned __int8 v6 = v55;
        int v13 = v56;
        uint64_t v11 = v57;
        unint64_t v12 = v58;
        long long v7 = v59;
        uint64_t v9 = v60;
        uint64_t v4 = v61;
        a3 = v62;
        if (v36 <= -3.4028e38) {
          float v40 = -0.0;
        }
        float v36 = v36 + v40;
      }
      *(float *)(v18 + v16 * 4 + 4) = v36;
      --v14;
      v15 -= 8;
      --v17;
      v18 -= 4;
      --v19;
      unint64_t v20 = v21;
      if (v14 <= 2)
      {
        float v41 = v53;
        uint64_t v3 = v54;
        goto LABEL_32;
      }
    }
  }
  uint64_t v9 = (float *)a1[14];
  float v41 = (float *)a1[11];
  long long v7 = (void *)a1[23];
  uint64_t v11 = *a2;
  float v31 = (void *)a1[20];
  unint64_t v12 = (void *)a1[17];
  int v13 = *((unsigned __int8 *)v3 + 208);
LABEL_32:
  BOOL v42 = *v9 < *v41;
  uint64_t v43 = 20;
  if (*v9 > *v41) {
    uint64_t v43 = 23;
  }
  *long long v7 = *(void *)v3[v43];
  if (v42) {
    float v44 = v41;
  }
  else {
    float v44 = v9;
  }
  *uint64_t v9 = *v44 + *(float *)(v11 + 4 * a3);
  *float v31 = v3[4];
  float v45 = *(float *)(v11 + 4 * *v4);
  float *v41 = v45;
  float v46 = *v9;
  BOOL v47 = *v9 < v45;
  if (*v9 <= v45) {
    uint64_t v48 = v31;
  }
  else {
    uint64_t v48 = v7;
  }
  *unint64_t v12 = *v48;
  if (v47) {
    float v49 = v45;
  }
  else {
    float v49 = v46;
  }
  if (!v13)
  {
    float v50 = expf(v46 - v49);
    float v51 = expf(v45 - v49);
    float v52 = logf(v50 + v51);
    if (v49 <= -3.4028e38) {
      float v52 = -0.0;
    }
    float v49 = v49 + v52;
  }
  *(float *)v3[8] = v49;
}

float quasar::AMKeywordDetection::getScore(quasar::AMKeywordDetection *this)
{
  return *(float *)(*((void *)this + 8) + ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 1) - 4);
}

float quasar::AMKeywordDetection::getBestStartFrame(quasar::AMKeywordDetection *this)
{
  return (float)*(uint64_t *)(*((void *)this + 6) - *((void *)this + 5) + *((void *)this + 17) - 8);
}

void kaldi::quasar::CEEncoderDecoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void sub_1B1D9E2A8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  kaldi::Input::~Input((kaldi::Input *)(v1 - 104));
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEEncoderDecoderNet::CEEncoderDecoderNet(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1F0A50D00;
  uint64_t v6 = (uint64_t)(a1 + 1);
  kaldi::quasar::CEEncoderDecoderNetConfig::CEEncoderDecoderNetConfig((kaldi::quasar::CEEncoderDecoderNetConfig *)(a1 + 1));
  a1[34] = 0;
  a1[35] = 0;
  kaldi::quasar::CEEncoderDecoderNetConfig::Read(v6, a2, a3);
}

void sub_1B1D9E56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v14 = *((void *)v10 + 35);
  *((void *)v10 + 35) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *v12;
  *unint64_t v12 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  kaldi::quasar::CEEncoderDecoderNetConfig::~CEEncoderDecoderNetConfig(v11);
  quasar::Bitmap::~Bitmap(v10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEEncoderDecoderNet::CEEncoderDecoderNet(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  unint64_t v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v8 < 0) {
    unint64_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const void *)a2;
    }
    else {
      uint64_t v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEEncoderDecoderNet::CEEncoderDecoderNet(a1, a2, (uint64_t)__p);
}

void sub_1B1D9E6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEEncoderDecoderNet::~CEEncoderDecoderNet(kaldi::quasar::CEEncoderDecoderNet *this)
{
  *(void *)this = &unk_1F0A50D00;
  uint64_t v2 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  kaldi::quasar::CEEncoderDecoderNetConfig::~CEEncoderDecoderNetConfig((kaldi::quasar::CEEncoderDecoderNet *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::CEEncoderDecoderNet::~CEEncoderDecoderNet(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::CEEncoderDecoderNet::Encode(uint64_t a1, uint64_t *a2)
{
  *(void *)&long long v17 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 176))() != *(_DWORD *)(a1 + 232))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "in->GetNumDims() == cfg_.input_shape_template.ndim");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  int v4 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 184))(*a2, *(unsigned int *)(a1 + 228));
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a1 + 80))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "in->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v12 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v11, (long long *)(a1 + 8), *a2);
  memset(v10, 0, sizeof(v10));
  uint64_t v5 = *(void *)(a1 + 272);
  memset(v9, 0, sizeof(v9));
  if (*(char *)(a1 + 199) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a1 + 176), *(void *)(a1 + 184));
  }
  else {
    std::string v16 = *(std::string *)(a1 + 176);
  }
  uint64_t v6 = 0;
  long long v7 = 0;
  p_data = 0;
  uint64_t v14 = (void ***)&v6;
  char v15 = 0;
  uint64_t v6 = (std::string *)operator new(0x18uLL);
  long long v7 = v6;
  p_data = (void **)&v6[1].__r_.__value_.__l.__data_;
  long long v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v16, &v17, v6);
  (*(void (**)(uint64_t, uint64_t *, void ***, std::string **, void ***))(*(void *)v5 + 128))(v5, &v11, v9, &v6, v10);
  uint64_t v14 = (void ***)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = (std::string *)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  v9[0] = (void **)v10;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v9);
  v10[0] = (void **)&v11;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_1B1D9EAE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEEncoderDecoderNet::Encode(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 224), *(int *)(a2 + 20), *(int *)(a2 + 16), __p);
  uint64_t v6 = 0;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 272, a2, (uint64_t)__p, &v6, &v7);
  int v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v4 + 8))(v4);
  }
  kaldi::quasar::CEEncoderDecoderNet::Encode(a1, (uint64_t *)&v7);
  uint64_t v5 = v7;
  long long v7 = 0;
  if (v5) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v5 + 8))(v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1D9EBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 272);
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 224), 1, *(int *)(a2 + 16), __p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v4 + 56))(&v7, v4, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, void, void, void))(*(void *)v7 + 88))(v7, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  kaldi::quasar::CEEncoderDecoderNet::Encode(a1, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B1D9ED20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::FinishEncoding(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return (*(uint64_t (**)(void, void, void))(**((void **)this + 35) + 96))(*((void *)this + 35), 0, 0);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  *((void *)&v43 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  uint64_t v9 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v36, (long long *)(a1 + 32), *a2);
  unint64_t v10 = v9;
  uint64_t v37 = (uint64_t)v9;
  uint64_t v11 = (long long *)(a1 + 56);
  uint64_t v12 = *a3;
  if ((unint64_t)v9 >= v38)
  {
    uint64_t v14 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v36, v11, v12);
  }
  else
  {
    if (*(char *)(a1 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
    }
    else
    {
      long long v13 = *v11;
      v9->__r_.__value_.__r.__words[2] = *(void *)(a1 + 72);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v13;
    }
    v10[1].__r_.__value_.__r.__words[0] = v12;
    uint64_t v14 = (std::string *)((char *)v10 + 32);
  }
  uint64_t v37 = (uint64_t)v14;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 103)) {
      goto LABEL_18;
    }
LABEL_11:
    char v15 = (long long *)(a1 + 80);
    std::string::size_type v16 = *(void *)(a1 + 280);
    if ((unint64_t)v14 >= v38)
    {
      p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v36, v15, *(void *)(a1 + 280));
    }
    else
    {
      if ((*(unsigned char *)(a1 + 103) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(a1 + 80), *(void *)(a1 + 88));
      }
      else
      {
        long long v17 = *v15;
        v14->__r_.__value_.__r.__words[2] = *(void *)(a1 + 96);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v17;
      }
      v14[1].__r_.__value_.__r.__words[0] = v16;
      p_std::string::size_type size = (uint64_t)&v14[1].__r_.__value_.__l.__size_;
    }
    uint64_t v37 = p_size;
    goto LABEL_18;
  }
  if (*(void *)(a1 + 88)) {
    goto LABEL_11;
  }
LABEL_18:
  memset(v35, 0, sizeof(v35));
  if (*(char *)(a1 + 151) < 0) {
    std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 128), *(void *)(a1 + 136));
  }
  else {
    std::string v41 = *(std::string *)(a1 + 128);
  }
  if (*(char *)(a1 + 175) < 0) {
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 152), *(void *)(a1 + 160));
  }
  else {
    std::string v42 = *(std::string *)(a1 + 152);
  }
  long long v32 = 0;
  float v33 = 0;
  float v34 = 0;
  float v39 = (std::string *)&v32;
  char v40 = 0;
  long long v32 = (std::string *)operator new(0x30uLL);
  float v33 = v32;
  float v34 = v32 + 2;
  uint64_t v19 = 0;
  float v33 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v34, (long long *)&v41, &v43, v32);
  do
  {
    if (SHIBYTE(v42.__r_.__value_.__r.__words[v19 + 2]) < 0) {
      operator delete(*(void **)((char *)&v41 + v19 * 8 + 24));
    }
    v19 -= 3;
  }
  while (v19 != -6);
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(void *)(a1 + 112)) {
      goto LABEL_39;
    }
  }
  else if (!*(unsigned char *)(a1 + 127))
  {
    goto LABEL_39;
  }
  unint64_t v20 = (long long *)(a1 + 104);
  unint64_t v21 = v33;
  if (v33 >= v34)
  {
    uint64_t v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v32, v20);
  }
  else
  {
    if ((*(unsigned char *)(a1 + 127) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(a1 + 104), *(void *)(a1 + 112));
    }
    else
    {
      long long v22 = *v20;
      v33->__r_.__value_.__r.__words[2] = *(void *)(a1 + 120);
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
    }
    uint64_t v23 = v21 + 1;
  }
  float v33 = v23;
LABEL_39:
  uint64_t v24 = *(void *)(a1 + 272);
  memset(&v41, 0, sizeof(v41));
  (*(void (**)(uint64_t, uint64_t *, std::string **, std::string *, void *))(*(void *)v24 + 128))(v24, &v36, &v32, &v41, v35);
  float v39 = &v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(void *)(a1 + 112)) {
      goto LABEL_44;
    }
  }
  else if (!*(unsigned char *)(a1 + 127))
  {
    goto LABEL_44;
  }
  memset(&v41, 0, sizeof(v41));
  (*(void (**)(void, std::string *))(**(void **)(v35[0] + 16) + 48))(*(void *)(v35[0] + 16), &v41);
  int v25 = *(_DWORD *)v41.__r_.__value_.__l.__data_;
  v41.__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
  operator delete(v41.__r_.__value_.__l.__data_);
  if (!v25)
  {
    uint64_t v30 = 0;
    goto LABEL_50;
  }
LABEL_44:
  uint64_t v26 = *(void *)v35[0];
  *(void *)v35[0] = 0;
  uint64_t v27 = *a4;
  *a4 = v26;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *(void *)(v35[0] + 8);
  *(void *)(v35[0] + 8) = 0;
  uint64_t v29 = *a5;
  *a5 = v28;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = 1;
LABEL_50:
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  return v30;
}

void sub_1B1D9F18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::string __p = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a13;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 272) + 16))(v16);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 272) + 16))(&v15);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v8 = kaldi::quasar::CEEncoderDecoderNet::Decode(a1, v16, &v15, &v14, &v13);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 56))(v14, a4);
    uint64_t v9 = v13;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 56))(v13, a5);
  }
  else
  {
    uint64_t v9 = v13;
    if (!v13) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
LABEL_5:
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v16[0];
  v16[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v8;
}

void sub_1B1D9F460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(void **a1, uint64_t a2, uint64_t *a3, int32x2_t *a4)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1[34] + 16))(v19);
  (*(void (**)(uint64_t *__return_ptr))(*a1[34] + 16))(&v18);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v7 = kaldi::quasar::CEEncoderDecoderNet::Decode((uint64_t)a1, v19, &v18, &v17, &v16);
  if (v7)
  {
    uint64_t v8 = v17;
    uint64_t v10 = *a3;
    uint64_t v9 = a3[1];
    uint64_t v11 = ((uint64_t (*)(void **))(*a1)[11])(a1);
    kaldi::quasar::CopyBufferToMatrix(v8, (unint64_t)(v9 - v10) >> 2, v11, a4);
    uint64_t v12 = v16;
    kaldi::quasar::CopyBufferToMatrix(v16, (unint64_t)(a3[1] - *a3) >> 2, 0xFFFFFFFFLL, a4);
    if (!v12) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v12 = v16;
  if (v16) {
LABEL_3:
  }
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
LABEL_4:
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v13 = v18;
  uint64_t v18 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v19[0];
  v19[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  return v7;
}

void sub_1B1D9F6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  (*(void (**)(void))(*(void *)*a2 + 176))();
  (*(void (**)(uint64_t, void))(*(void *)*a2 + 184))(*a2, 0);
  uint64_t v6 = *(void *)(a1 + 272);
  uint64_t v7 = operator new(4uLL);
  std::string __p = v7;
  *uint64_t v7 = 0;
  uint64_t v12 = v7 + 1;
  uint64_t v13 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void))(*(void *)v6 + 16))(&v14, v6, &__p, 0);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v8 = kaldi::quasar::CEEncoderDecoderNet::Decode(a1, &v14, a2, a3, (uint64_t *)&__p);
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return v8;
}

void sub_1B1D9F8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Decode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 272);
  uint64_t v7 = operator new(4uLL);
  std::string __p = v7;
  *uint64_t v7 = a2;
  uint64_t v13 = v7 + 1;
  uint64_t v14 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void))(*(void *)v6 + 16))(&v15, v6, &__p, 0);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v8 = kaldi::quasar::CEEncoderDecoderNet::Decode(a1, &v15, (uint64_t *)&__p);
  uint64_t v9 = __p;
  if (v8)
  {
    (*(void (**)(void *, uint64_t))(*(void *)__p + 56))(__p, a3);
  }
  else if (!__p)
  {
    goto LABEL_7;
  }
  (*(void (**)(void *))(*(void *)v9 + 8))(v9);
LABEL_7:
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v8;
}

{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *__p;
  void *v13;
  _DWORD *v14;
  uint64_t v15;

  uint64_t v6 = *(void *)(a1 + 272);
  uint64_t v7 = operator new(4uLL);
  std::string __p = v7;
  *uint64_t v7 = a2;
  uint64_t v13 = v7 + 1;
  uint64_t v14 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void))(*(void *)v6 + 16))(&v15, v6, &__p, 0);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v8 = kaldi::quasar::CEEncoderDecoderNet::Decode(a1, &v15, (uint64_t *)&__p);
  uint64_t v9 = __p;
  if (v8)
  {
    (*(void (**)(void *, uint64_t))(*(void *)__p + 40))(__p, a3);
  }
  else if (!__p)
  {
    goto LABEL_7;
  }
  (*(void (**)(void *))(*(void *)v9 + 8))(v9);
LABEL_7:
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v8;
}

void sub_1B1D9FA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1D9FBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEEncoderDecoderNet::Reset(kaldi::quasar::CEEncoderDecoderNet *this)
{
  *(void *)&long long v11 = *MEMORY[0x1E4F143B8];
  memset(v7, 0, sizeof(v7));
  uint64_t v2 = *((void *)this + 34);
  memset(v6, 0, sizeof(v6));
  if (*((char *)this + 223) < 0) {
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 25), *((void *)this + 26));
  }
  else {
    std::string v10 = *(std::string *)((char *)this + 200);
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  p_data = 0;
  uint64_t v8 = (void ***)&v3;
  char v9 = 0;
  uint64_t v3 = (std::string *)operator new(0x18uLL);
  uint64_t v4 = v3;
  p_data = (void **)&v3[1].__r_.__value_.__l.__data_;
  uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v10, &v11, v3);
  (*(void (**)(uint64_t, void *, void ***, std::string **, void))(*(void *)v2 + 120))(v2, v7, v6, &v3, 0);
  uint64_t v8 = (void ***)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  uint64_t v3 = (std::string *)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  (*(void (**)(void, uint64_t, void))(**((void **)this + 35) + 96))(*((void *)this + 35), 1, 0);
  v6[0] = (void **)v7;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v6);
}

void sub_1B1D9FDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a13 = (void **)&a16;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::InputDim(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 59);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::OutputDim(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 60);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::FrameSubsamplingFactor(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 61);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::BOSIndex(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::EOSIndex(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 63);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::SilIndex(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 64);
}

uint64_t kaldi::quasar::CEEncoderDecoderNet::Beam(kaldi::quasar::CEEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 65);
}

void kaldi::quasar::CEEncoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void sub_1B1DA0714()
{
}

void kaldi::quasar::CEEncoderNet::CEEncoderNet(kaldi::quasar::CEEncoderNetConfig *a1, uint64_t a2)
{
  uint64_t v4 = kaldi::quasar::CEEncoderNetConfig::CEEncoderNetConfig(a1);
  *(_OWORD *)((char *)v4 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)((char *)v4 + 168) = 0u;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v5 = *(void *)(a2 + 8);
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 7);
  if (v9 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (const void *)a2;
    }
    else {
      uint64_t v7 = *(const void **)a2;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ".config");
  kaldi::quasar::CEEncoderNetConfig::Read((uint64_t)a1, a2, (uint64_t)__p);
}

void sub_1B1DA090C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::string __p = v15 + 1;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v17 = *v15;
  *uint64_t v15 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  kaldi::quasar::CEEncoderNetConfig::~CEEncoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEEncoderNet::Reset(kaldi::quasar::CEEncoderNet *this)
{
  memset(v3, 0, sizeof(v3));
  uint64_t v1 = *((void *)this + 19);
  memset(v2, 0, sizeof(v2));
  (*(void (**)(uint64_t, void *, char *, void ***, char *))(*(void *)v1 + 120))(v1, v3, (char *)this + 96, v2, (char *)this + 160);
  uint64_t v4 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
  v2[0] = (void **)v3;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](v2);
}

void sub_1B1DA0A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v14 - 40) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  a10 = (void **)&a13;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEEncoderNetConfig::~CEEncoderNetConfig(kaldi::quasar::CEEncoderNetConfig *this)
{
  uint64_t v2 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::CEEncoderNet::~CEEncoderNet(kaldi::quasar::CEEncoderNet *this)
{
  uint64_t v4 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::CEEncoderNet::Encode(long long *a1, uint64_t *a2, uint64_t *a3)
{
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 176))() != *((_DWORD *)a1 + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "in->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_32;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)*a2 + 184))(*a2, *((unsigned int *)a1 + 31)) != *((_DWORD *)a1 + 33))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v29, "in->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v29);
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  uint64_t v6 = *((void *)a1 + 6);
  if (*((void *)a1 + 7) == v6)
  {
    uint64_t v13 = *a2;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = v6 + v7;
      std::string::size_type v11 = *(void *)(*((void *)a1 + 20) + 8 * v9);
      if ((unint64_t)v8 >= v31)
      {
        uint64_t v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v29, (long long *)v10, *(void *)(*((void *)a1 + 20) + 8 * v9));
      }
      else
      {
        if (*(char *)(v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(v6 + v7), *(void *)(v6 + v7 + 8));
        }
        else
        {
          long long v12 = *(_OWORD *)v10;
          v8->__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v12;
        }
        v8[1].__r_.__value_.__r.__words[0] = v11;
        uint64_t v8 = (std::string *)((char *)v8 + 32);
      }
      uint64_t v30 = (std::string::value_type *)v8;
      ++v9;
      uint64_t v6 = *((void *)a1 + 6);
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 7) - v6) >> 3) > v9);
    uint64_t v13 = *a2;
    if ((unint64_t)v8 < v31)
    {
      if (*((char *)a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a1, *((void *)a1 + 1));
      }
      else
      {
        long long v14 = *a1;
        v8->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v14;
      }
      v8[1].__r_.__value_.__r.__words[0] = v13;
      p_std::string::size_type size = (uint64_t)&v8[1].__r_.__value_.__l.__size_;
      uint64_t v30 = &v8[1].__r_.__value_.__s.__data_[8];
      goto LABEL_19;
    }
  }
  p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v29, a1, v13);
LABEL_19:
  uint64_t v30 = (std::string::value_type *)p_size;
  memset(&v28, 0, sizeof(v28));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, *((long long **)a1 + 9), *((long long **)a1 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 10) - *((void *)a1 + 9)) >> 3));
  uint64_t v16 = (long long *)((char *)a1 + 24);
  std::string::size_type size = (_OWORD *)v28.__r_.__value_.__l.__size_;
  if (v28.__r_.__value_.__l.__size_ >= v28.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v28, v16);
  }
  else
  {
    if (*((char *)a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v28.__r_.__value_.__l.__size_, *((const std::string::value_type **)a1 + 3), *((void *)a1 + 4));
    }
    else
    {
      long long v18 = *v16;
      *(void *)(v28.__r_.__value_.__l.__size_ + 16) = *((void *)a1 + 5);
      *std::string::size_type size = v18;
    }
    std::string::size_type v19 = (std::string::size_type)size + 24;
  }
  v28.__r_.__value_.__l.__size_ = v19;
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  uint64_t v20 = *((void *)a1 + 19);
  memset(v25, 0, sizeof(v25));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, long long *))(*(void *)v20 + 128))(v20, &v29, &v28, v25, &v26);
  long long v32 = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  uint64_t v21 = *(void *)(*((void *)&v26 + 1) - 8);
  *(void *)(*((void *)&v26 + 1) - 8) = 0;
  uint64_t v22 = *a3;
  *a3 = v21;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v24 = *((void *)&v26 + 1) - 8;
  uint64_t v23 = *(void *)(*((void *)&v26 + 1) - 8);
  *(void *)(*((void *)&v26 + 1) - 8) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  *((void *)&v26 + 1) = v24;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)a1 + 20);
  a1[10] = v26;
  *((void *)a1 + 22) = v27;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  v25[0] = (void **)&v26;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v25);
  *(void *)&long long v26 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
}

void sub_1B1DA0FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEDecoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void sub_1B1DA1B1C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  kaldi::Input::~Input((kaldi::Input *)(v1 - 104));
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEDecoderNet::CEDecoderNet(kaldi::quasar::CEDecoderNetConfig *a1, uint64_t a2)
{
  uint64_t v4 = kaldi::quasar::CEDecoderNetConfig::CEDecoderNetConfig(a1);
  *((void *)v4 + 39) = 0;
  *(_OWORD *)((char *)v4 + 280) = 0u;
  *(_OWORD *)((char *)v4 + 296) = 0u;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v5 = *(void *)(a2 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 7);
  if (v9 < 0) {
    p_p = __p;
  }
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (const void *)a2;
    }
    else {
      uint64_t v7 = *(const void **)a2;
    }
    memmove(p_p, v7, v5);
  }
  strcpy((char *)p_p + v5, ".config");
  kaldi::quasar::CEDecoderNetConfig::Read((uint64_t)a1, a2, (uint64_t)&__p);
}

void sub_1B1DA1E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::string __p = v15 + 37;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v18 = v15[36];
  v15[36] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *v16;
  *uint64_t v16 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  kaldi::quasar::CEDecoderNetConfig::~CEDecoderNetConfig((kaldi::quasar::CEDecoderNetConfig *)v15);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEDecoderNet::Reset(kaldi::quasar::CEDecoderNet *this)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v2 = *((void *)this + 35);
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::CEDecoderNet *)((char *)this + 240), 1, *((int *)this + 63), &__p);
  (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(void *)v2 + 56))(&p_p, v2, &__p);
  uint64_t v3 = v19;
  if ((unint64_t)v19 >= v20)
  {
    size_t v5 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v18, (long long *)this, (uint64_t *)&p_p);
    uint64_t v6 = p_p;
    uint64_t v19 = v5;
    p_p = 0;
    if (v6) {
      (*((void (**)(void **))*v6 + 1))(v6);
    }
  }
  else
  {
    if (*((char *)this + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)this, *((void *)this + 1));
    }
    else
    {
      long long v4 = *(_OWORD *)this;
      v19->__r_.__value_.__r.__words[2] = *((void *)this + 2);
      *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
    }
    v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    uint64_t v19 = (std::string *)((char *)v3 + 32);
    p_p = 0;
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  uint64_t v7 = *((void *)this + 35);
  uint64_t v8 = operator new(4uLL);
  std::string __p = v8;
  *uint64_t v8 = 0;
  uint64_t v16 = v8 + 1;
  uint64_t v17 = v8 + 1;
  (*(void (**)(void ***__return_ptr, uint64_t, void **, void))(*(void *)v7 + 16))(&p_p, v7, &__p, 0);
  char v9 = (long long *)((char *)this + 48);
  uint64_t v10 = v19;
  if ((unint64_t)v19 >= v20)
  {
    long long v12 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v18, v9, (uint64_t *)&p_p);
    uint64_t v13 = p_p;
    uint64_t v19 = v12;
    p_p = 0;
    if (v13) {
      (*((void (**)(void **))*v13 + 1))(v13);
    }
  }
  else
  {
    if (*((char *)this + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)this + 6), *((void *)this + 7));
    }
    else
    {
      long long v11 = *v9;
      v19->__r_.__value_.__r.__words[2] = *((void *)this + 8);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    v10[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    uint64_t v19 = (std::string *)((char *)v10 + 32);
    p_p = 0;
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  uint64_t v14 = *((void *)this + 35);
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t *, char *, void **, char *))(*(void *)v14 + 120))(v14, &v18, (char *)this + 216, &__p, (char *)this + 296);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  (*(void (**)(void, uint64_t, void))(**((void **)this + 36) + 96))(*((void *)this + 36), 1, 0);
  std::string __p = &v18;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B1DA2160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v16 = *(void *)(v14 - 24);
  *(void *)(v14 - ++*(_DWORD *)(result + 24) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  std::string __p = &a13;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEDecoderNet::~CEDecoderNet(kaldi::quasar::CEDecoderNet *this)
{
  long long v4 = (void **)((char *)this + 296);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  kaldi::quasar::CEDecoderNetConfig::~CEDecoderNetConfig(this);
}

uint64_t kaldi::quasar::CEDecoderNet::Decode(long long *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  uint64_t v8 = a4;
  uint64_t v68 = 0;
  long long v69 = 0;
  unint64_t v70 = 0;
  uint64_t v12 = *((void *)a1 + 21);
  if (*((void *)a1 + 22) == v12)
  {
    uint64_t v21 = *a2;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = v12 + v15;
      std::string::size_type v19 = *(void *)(*((void *)a1 + 37) + 8 * v17);
      if ((unint64_t)v16 >= v70)
      {
        uint64_t v16 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, (long long *)v18, *(void *)(*((void *)a1 + 37) + 8 * v17));
      }
      else
      {
        if (*(char *)(v18 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(v12 + v15), *(void *)(v12 + v15 + 8));
        }
        else
        {
          long long v20 = *(_OWORD *)v18;
          v16->__r_.__value_.__r.__words[2] = *(void *)(v18 + 16);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v20;
        }
        v16[1].__r_.__value_.__r.__words[0] = v19;
        uint64_t v16 = (std::string *)((char *)v16 + 32);
      }
      long long v69 = (std::string::value_type *)v16;
      ++v17;
      uint64_t v12 = *((void *)a1 + 21);
      v15 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 22) - v12) >> 3) > v17);
    uint64_t v21 = *a2;
    if ((unint64_t)v16 < v70)
    {
      uint64_t v7 = a5;
      if (*((char *)a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a1, *((void *)a1 + 1));
      }
      else
      {
        long long v22 = *a1;
        v16->__r_.__value_.__r.__words[2] = *((void *)a1 + 2);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v22;
      }
      uint64_t v6 = a6;
      v16[1].__r_.__value_.__r.__words[0] = v21;
      uint64_t v23 = (std::string *)((char *)v16 + 32);
      long long v69 = (std::string::value_type *)v23;
      uint64_t v8 = a4;
      goto LABEL_18;
    }
    uint64_t v7 = a5;
    uint64_t v6 = a6;
    uint64_t v8 = a4;
  }
  uint64_t v23 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, a1, v21);
LABEL_18:
  long long v69 = (std::string::value_type *)v23;
  uint64_t v24 = (long long *)((char *)a1 + 24);
  uint64_t v25 = *a3;
  if ((unint64_t)v23 >= v70)
  {
    uint64_t v27 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, v24, v25);
  }
  else
  {
    if (*((char *)a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v23, *((const std::string::value_type **)a1 + 3), *((void *)a1 + 4));
    }
    else
    {
      long long v26 = *v24;
      v23->__r_.__value_.__r.__words[2] = *((void *)a1 + 5);
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v26;
    }
    v23[1].__r_.__value_.__r.__words[0] = v25;
    uint64_t v27 = (std::string *)((char *)v23 + 32);
    long long v69 = &v23[1].__r_.__value_.__s.__data_[8];
  }
  long long v69 = (std::string::value_type *)v27;
  std::string v28 = a1 + 3;
  uint64_t v29 = *v8;
  if ((unint64_t)v27 >= v70)
  {
    unint64_t v31 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, v28, *v8);
  }
  else
  {
    if (*((char *)a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v27, *((const std::string::value_type **)a1 + 6), *((void *)a1 + 7));
    }
    else
    {
      long long v30 = *v28;
      v27->__r_.__value_.__r.__words[2] = *((void *)a1 + 8);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v30;
    }
    v27[1].__r_.__value_.__r.__words[0] = v29;
    unint64_t v31 = (std::string *)((char *)v27 + 32);
    long long v69 = &v27[1].__r_.__value_.__s.__data_[8];
  }
  long long v69 = (std::string::value_type *)v31;
  if (*((char *)a1 + 95) < 0)
  {
    if (!*((void *)a1 + 10)) {
      goto LABEL_41;
    }
  }
  else if (!*((unsigned char *)a1 + 95))
  {
    goto LABEL_41;
  }
  long long v32 = (long long *)((char *)a1 + 72);
  std::string::size_type v33 = *((void *)a1 + 36);
  if ((unint64_t)v31 >= v70)
  {
    p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v68, v32, *((void *)a1 + 36));
  }
  else
  {
    if ((*((unsigned char *)a1 + 95) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v31, *((const std::string::value_type **)a1 + 9), *((void *)a1 + 10));
    }
    else
    {
      long long v34 = *v32;
      v31->__r_.__value_.__r.__words[2] = *((void *)a1 + 11);
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v34;
    }
    v31[1].__r_.__value_.__r.__words[0] = v33;
    p_std::string::size_type size = (uint64_t)&v31[1].__r_.__value_.__l.__size_;
    long long v69 = &v31[1].__r_.__value_.__s.__data_[8];
  }
  long long v69 = (std::string::value_type *)p_size;
LABEL_41:
  memset(&v67, 0, sizeof(v67));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v67, *((long long **)a1 + 24), *((long long **)a1 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 25) - *((void *)a1 + 24)) >> 3));
  uint64_t v36 = a1 + 6;
  std::string::size_type size = (_OWORD *)v67.__r_.__value_.__l.__size_;
  if (v67.__r_.__value_.__l.__size_ >= v67.__r_.__value_.__r.__words[2])
  {
    float v39 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v36);
  }
  else
  {
    if (*((char *)a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v67.__r_.__value_.__l.__size_, *((const std::string::value_type **)a1 + 12), *((void *)a1 + 13));
    }
    else
    {
      long long v38 = *v36;
      *(void *)(v67.__r_.__value_.__l.__size_ + 16) = *((void *)a1 + 14);
      *std::string::size_type size = v38;
    }
    float v39 = (std::string *)((char *)size + 24);
  }
  v67.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
  char v40 = (long long *)((char *)a1 + 120);
  if ((unint64_t)v39 >= v67.__r_.__value_.__r.__words[2])
  {
    std::string v42 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v40);
  }
  else
  {
    if (*((char *)a1 + 143) < 0)
    {
      std::string::__init_copy_ctor_external(v39, *((const std::string::value_type **)a1 + 15), *((void *)a1 + 16));
    }
    else
    {
      long long v41 = *v40;
      v39->__r_.__value_.__r.__words[2] = *((void *)a1 + 17);
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v41;
    }
    std::string v42 = v39 + 1;
  }
  v67.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  if (*((char *)a1 + 167) < 0)
  {
    if (!*((void *)a1 + 19)) {
      goto LABEL_64;
    }
  }
  else if (!*((unsigned char *)a1 + 167))
  {
    goto LABEL_64;
  }
  long long v43 = a1 + 9;
  if ((unint64_t)v42 >= v67.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, v43);
  }
  else
  {
    if ((*((unsigned char *)a1 + 167) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v42, *((const std::string::value_type **)a1 + 18), *((void *)a1 + 19));
    }
    else
    {
      long long v44 = *v43;
      v42->__r_.__value_.__r.__words[2] = *((void *)a1 + 20);
      *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v44;
    }
    std::string::size_type v45 = (std::string::size_type)&v42[1];
  }
  v67.__r_.__value_.__l.__size_ = v45;
LABEL_64:
  long long v65 = 0uLL;
  uint64_t v66 = 0;
  uint64_t v46 = *((void *)a1 + 35);
  std::string __p = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  (*(void (**)(uint64_t, uint64_t *, std::string *, void **, long long *))(*(void *)v46 + 128))(v46, &v68, &v67, &__p, &v65);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (*((char *)a1 + 167) < 0)
  {
    if (!*((void *)a1 + 19)) {
      goto LABEL_71;
    }
  }
  else if (!*((unsigned char *)a1 + 167))
  {
    goto LABEL_71;
  }
  std::string __p = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  (*(void (**)(void, void **))(**(void **)(*((void *)&v65 + 1) - 8) + 48))(*(void *)(*((void *)&v65 + 1) - 8), &__p);
  uint64_t v48 = *((void *)&v65 + 1) - 8;
  uint64_t v47 = *(void *)(*((void *)&v65 + 1) - 8);
  *(void *)(*((void *)&v65 + 1) - 8) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  *((void *)&v65 + 1) = v48;
  int v49 = *(_DWORD *)__p;
  uint64_t v63 = __p;
  operator delete(__p);
  if (!v49)
  {
    uint64_t v59 = 0;
    goto LABEL_81;
  }
LABEL_71:
  uint64_t v50 = *(void *)(*((void *)&v65 + 1) - 8);
  *(void *)(*((void *)&v65 + 1) - 8) = 0;
  uint64_t v51 = *v6;
  *uint64_t v6 = v50;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = *((void *)&v65 + 1);
  uint64_t v54 = *((void *)&v65 + 1) - 8;
  uint64_t v53 = *(void *)(*((void *)&v65 + 1) - 8);
  *(void *)(*((void *)&v65 + 1) - 8) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  *((void *)&v65 + 1) = v54;
  uint64_t v55 = *(void *)(v52 - 16);
  *(void *)(v52 - 16) = 0;
  uint64_t v56 = *v7;
  *uint64_t v7 = v55;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  uint64_t v58 = *((void *)&v65 + 1) - 8;
  uint64_t v57 = *(void *)(*((void *)&v65 + 1) - 8);
  *(void *)(*((void *)&v65 + 1) - 8) = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  *((void *)&v65 + 1) = v58;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)a1 + 37);
  *(long long *)((char *)a1 + 296) = v65;
  *((void *)a1 + 39) = v66;
  uint64_t v66 = 0;
  long long v65 = 0uLL;
  uint64_t v59 = 1;
LABEL_81:
  std::string __p = &v65;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(void *)&long long v65 = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  return v59;
}

void sub_1B1DA28E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char **a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  a13 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a16 = &a19;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CESplitEncoderDecoderNet::CESplitEncoderDecoderNet(void *a1, uint64_t a2)
{
  *a1 = &unk_1F0A51298;
  kaldi::quasar::CEEncoderNet::CEEncoderNet((kaldi::quasar::CEEncoderNetConfig *)(a1 + 1), a2);
}

void sub_1B1DA2A04(_Unwind_Exception *a1)
{
  kaldi::quasar::CEEncoderNet::~CEEncoderNet(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CESplitEncoderDecoderNet::~CESplitEncoderDecoderNet(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  *(void *)this = &unk_1F0A51298;
  uint64_t v2 = *((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  kaldi::quasar::CEDecoderNet::~CEDecoderNet((kaldi::quasar::CESplitEncoderDecoderNet *)((char *)this + 192));
  kaldi::quasar::CEEncoderNet::~CEEncoderNet((kaldi::quasar::CESplitEncoderDecoderNet *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  kaldi::quasar::CESplitEncoderDecoderNet::~CESplitEncoderDecoderNet(this);
  JUMPOUT(0x1B3EA8670);
}

void kaldi::quasar::CESplitEncoderDecoderNet::Encode(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = 0;
  kaldi::quasar::CEEncoderNet::Encode((long long *)(a1 + 8), a2, &v31);
  uint64_t v3 = *(void *)(a1 + 512);
  if (v3)
  {
    std::string __p = 0;
    uint64_t v29 = 0;
    long long v30 = 0;
    size_t v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v30, 1uLL);
    uint64_t v6 = &v5[8 * v4];
    *(void *)size_t v5 = v3;
    uint64_t v7 = v5 + 8;
    char v9 = (char *)__p;
    uint64_t v8 = v29;
    uint64_t v10 = v5;
    if (v29 != __p)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)__p;
    }
    std::string __p = v10;
    uint64_t v29 = v5 + 8;
    long long v30 = &v5[8 * v4];
    if (v8)
    {
      operator delete(v8);
      uint64_t v6 = v30;
    }
    uint64_t v29 = v5 + 8;
    uint64_t v12 = v31;
    if (v7 >= v6)
    {
      uint64_t v14 = (v7 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v6 - (unsigned char *)__p;
      uint64_t v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
        uint64_t v16 = v14 + 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v30, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      std::string::size_type v19 = (uint64_t *)&v18[8 * v14];
      long long v20 = &v18[8 * v17];
      uint64_t *v19 = v12;
      uint64_t v13 = (char *)(v19 + 1);
      long long v22 = (char *)__p;
      uint64_t v21 = v29;
      if (v29 != __p)
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *--std::string::size_type v19 = v23;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)__p;
      }
      std::string __p = v19;
      uint64_t v29 = v13;
      long long v30 = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *((void *)v5 + 1) = v31;
      uint64_t v13 = v5 + 16;
    }
    uint64_t v29 = v13;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 160) + 96))(&v27);
    uint64_t v24 = v27;
    uint64_t v27 = 0;
    uint64_t v25 = *(void *)(a1 + 512);
    *(void *)(a1 + 512) = v24;
    if (v25)
    {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      uint64_t v26 = v27;
      uint64_t v27 = 0;
      if (v26) {
        (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
      }
    }
    if (__p)
    {
      uint64_t v29 = (char *)__p;
      operator delete(__p);
    }
    if (v31) {
      (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    }
  }
  else
  {
    *(void *)(a1 + 512) = v31;
  }
}

void sub_1B1DA2D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CESplitEncoderDecoderNet::Encode(uint64_t a1, uint64_t a2)
{
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 128), *(int *)(a2 + 20), *(int *)(a2 + 16), __p);
  uint64_t v6 = 0;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 160, a2, (uint64_t)__p, &v6, &v7);
  uint64_t v4 = v6;
  uint64_t v6 = 0;
  if (v4) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v4 + 8))(v4);
  }
  kaldi::quasar::CESplitEncoderDecoderNet::Encode(a1, (uint64_t *)&v7);
  size_t v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v5 + 8))(v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1DA2E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 160);
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 128), 1, *(int *)(a2 + 16), __p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v4 + 56))(&v7, v4, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, void, void, void))(*(void *)v7 + 88))(v7, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16), 0);
  kaldi::quasar::CESplitEncoderDecoderNet::Encode(a1, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B1DA2FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::FinishEncoding(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return (*(uint64_t (**)(void, void, void))(**((void **)this + 60) + 96))(*((void *)this + 60), 0, 0);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 472) + 16))(v16);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 472) + 16))(&v15);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (*(void *)(a1 + 512))
  {
    uint64_t v8 = kaldi::quasar::CEDecoderNet::Decode((long long *)(a1 + 192), (uint64_t *)(a1 + 512), v16, &v15, &v14, &v13);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 56))(v14, a4);
      uint64_t v9 = v13;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 56))(v13, a5);
LABEL_5:
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      goto LABEL_7;
    }
    uint64_t v9 = v13;
    if (v13) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = 0;
LABEL_7:
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v16[0];
  v16[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  return v8;
}

void sub_1B1DA3230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Decode(uint64_t a1, uint64_t a2, uint64_t *a3, int32x2_t *a4, int32x2_t *a5)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 472) + 16))(v21);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 472) + 16))(&v20);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (!*(void *)(a1 + 512))
  {
    uint64_t v9 = 0;
    goto LABEL_8;
  }
  uint64_t v9 = kaldi::quasar::CEDecoderNet::Decode((long long *)(a1 + 192), (uint64_t *)(a1 + 512), v21, &v20, &v19, &v18);
  if ((v9 & 1) == 0)
  {
    uint64_t v14 = v18;
    if (!v18) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v10 = v19;
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  kaldi::quasar::CopyBufferToMatrix(v10, (unint64_t)(v11 - v12) >> 2, v13, a4);
  uint64_t v14 = v18;
  kaldi::quasar::CopyBufferToMatrix(v18, (unint64_t)(a3[1] - *a3) >> 2, 0xFFFFFFFFLL, a5);
  if (v14) {
LABEL_7:
  }
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
LABEL_8:
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v15 = v20;
  uint64_t v20 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  return v9;
}

void sub_1B1DA34BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Decode(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  (*(void (**)(void))(*(void *)*a2 + 176))();
  (*(void (**)(uint64_t, void))(*(void *)*a2 + 184))(*a2, 0);
  uint64_t v6 = *(void *)(a1 + 472);
  uint64_t v7 = operator new(4uLL);
  std::string __p = v7;
  *uint64_t v7 = 0;
  uint64_t v12 = v7 + 1;
  uint64_t v13 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void))(*(void *)v6 + 16))(&v14, v6, &__p, 0);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  if (*(void *)(a1 + 512))
  {
    uint64_t v8 = kaldi::quasar::CEDecoderNet::Decode((long long *)(a1 + 192), (uint64_t *)(a1 + 512), &v14, a2, a3, (uint64_t *)&__p);
    if (__p) {
      (*(void (**)(void *))(*(void *)__p + 8))(__p);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v14;
  uint64_t v14 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return v8;
}

void sub_1B1DA36AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    kaldi::quasar::CEInferenceNet::Feedforward();
  }
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Decode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 472);
  uint64_t v7 = operator new(4uLL);
  std::string __p = v7;
  *uint64_t v7 = a2;
  uint64_t v13 = v7 + 1;
  uint64_t v14 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void))(*(void *)v6 + 16))(&v15, v6, &__p, 0);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v8 = kaldi::quasar::CESplitEncoderDecoderNet::Decode(a1, &v15, (uint64_t *)&__p);
  uint64_t v9 = __p;
  if (v8)
  {
    (*(void (**)(void *, uint64_t))(*(void *)__p + 56))(__p, a3);
  }
  else if (!__p)
  {
    goto LABEL_7;
  }
  (*(void (**)(void *))(*(void *)v9 + 8))(v9);
LABEL_7:
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v8;
}

{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *__p;
  void *v13;
  _DWORD *v14;
  uint64_t v15;

  uint64_t v6 = *(void *)(a1 + 472);
  uint64_t v7 = operator new(4uLL);
  std::string __p = v7;
  *uint64_t v7 = a2;
  uint64_t v13 = v7 + 1;
  uint64_t v14 = v7 + 1;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void))(*(void *)v6 + 16))(&v15, v6, &__p, 0);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  std::string __p = 0;
  uint64_t v8 = kaldi::quasar::CESplitEncoderDecoderNet::Decode(a1, &v15, (uint64_t *)&__p);
  uint64_t v9 = __p;
  if (v8)
  {
    (*(void (**)(void *, uint64_t))(*(void *)__p + 40))(__p, a3);
  }
  else if (!__p)
  {
    goto LABEL_7;
  }
  (*(void (**)(void *))(*(void *)v9 + 8))(v9);
LABEL_7:
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v8;
}

void sub_1B1DA3850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1DA39F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::Reset(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  kaldi::quasar::CEEncoderNet::Reset((kaldi::quasar::CESplitEncoderDecoderNet *)((char *)this + 8));
  kaldi::quasar::CEDecoderNet::Reset((kaldi::quasar::CESplitEncoderDecoderNet *)((char *)this + 192));
  uint64_t result = *((void *)this + 64);
  *((void *)this + 64) = 0;
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v3();
  }
  return result;
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::InputDim(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 35);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::OutputDim(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 112);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::FrameSubsamplingFactor(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 37);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::BOSIndex(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 113);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::EOSIndex(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 114);
}

uint64_t kaldi::quasar::CESplitEncoderDecoderNet::SilIndex(kaldi::quasar::CESplitEncoderDecoderNet *this)
{
  return *((unsigned int *)this + 115);
}

void kaldi::quasar::CEStatelessEncoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  uint64_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void kaldi::quasar::CEStatelessEncoderNet::CEStatelessEncoderNet(kaldi::quasar::CEStatelessEncoderNetConfig *a1, uint64_t a2)
{
  *((void *)kaldi::quasar::CEStatelessEncoderNetConfig::CEStatelessEncoderNetConfig(a1) + 22) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  size_t v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v8 < 0) {
    size_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (const void *)a2;
    }
    else {
      uint64_t v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEStatelessEncoderNetConfig::Read((uint64_t)a1, a2, (uint64_t)__p);
}

void sub_1B1DA4724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *((void *)v14 + 22);
  *((void *)v14 + 22) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  kaldi::quasar::CEStatelessEncoderNetConfig::~CEStatelessEncoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEStatelessEncoderNetConfig::~CEStatelessEncoderNetConfig(kaldi::quasar::CEStatelessEncoderNetConfig *this)
{
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::CEStatelessEncoderNet::~CEStatelessEncoderNet(kaldi::quasar::CEStatelessEncoderNet *this)
{
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  size_t v4 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  size_t v4 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  size_t v4 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void kaldi::quasar::CEStatelessEncoderNet::Encode(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3) != (uint64_t)(a2[1] - *a2) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 176))() != *(_DWORD *)(a1 + 152))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "input_feats->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)*a3 + 184))(*a3, *(unsigned int *)(a1 + 148)) != *(_DWORD *)(a1 + 156))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "input_feats->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_45:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v39);
  }
  uint64_t v39 = 0;
  char v40 = 0;
  unint64_t v41 = 0;
  uint64_t v12 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) == v12)
  {
    uint64_t v19 = *a3;
LABEL_17:
    uint64_t v21 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v39, (long long *)a1, v19);
    goto LABEL_20;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  do
  {
    uint64_t v16 = v12 + v13;
    std::string::size_type v17 = *(void *)(*a2 + 8 * v15);
    if ((unint64_t)v14 >= v41)
    {
      uint64_t v14 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v39, (long long *)v16, *(void *)(*a2 + 8 * v15));
    }
    else
    {
      if (*(char *)(v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)(v12 + v13), *(void *)(v12 + v13 + 8));
      }
      else
      {
        long long v18 = *(_OWORD *)v16;
        v14->__r_.__value_.__r.__words[2] = *(void *)(v16 + 16);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v18;
      }
      v14[1].__r_.__value_.__r.__words[0] = v17;
      uint64_t v14 = (std::string *)((char *)v14 + 32);
    }
    char v40 = (std::string::value_type *)v14;
    ++v15;
    uint64_t v12 = *(void *)(a1 + 72);
    v13 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v12) >> 3) > v15);
  uint64_t v19 = *a3;
  if ((unint64_t)v14 >= v41) {
    goto LABEL_17;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    long long v20 = *(_OWORD *)a1;
    v14->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v20;
  }
  v14[1].__r_.__value_.__r.__words[0] = v19;
  uint64_t v21 = (std::string *)((char *)v14 + 32);
  char v40 = &v14[1].__r_.__value_.__s.__data_[8];
LABEL_20:
  char v40 = (std::string::value_type *)v21;
  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(void *)(a1 + 32)) {
      goto LABEL_31;
    }
  }
  else if (!*(unsigned char *)(a1 + 47))
  {
    goto LABEL_31;
  }
  long long v22 = (long long *)(a1 + 24);
  uint64_t v23 = *a4;
  if ((unint64_t)v21 >= v41)
  {
    p_std::string::size_type size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v39, v22, v23);
  }
  else
  {
    if ((*(unsigned char *)(a1 + 47) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v24 = *v22;
      v21->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v24;
    }
    v21[1].__r_.__value_.__r.__words[0] = v23;
    p_std::string::size_type size = (uint64_t)&v21[1].__r_.__value_.__l.__size_;
    char v40 = &v21[1].__r_.__value_.__s.__data_[8];
  }
  char v40 = (std::string::value_type *)p_size;
LABEL_31:
  memset(&v38, 0, sizeof(v38));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v38, *(long long **)(a1 + 96), *(long long **)(a1 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3));
  uint64_t v26 = (long long *)(a1 + 48);
  std::string::size_type size = (_OWORD *)v38.__r_.__value_.__l.__size_;
  if (v38.__r_.__value_.__l.__size_ >= v38.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v29 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v38, v26);
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v38.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      long long v28 = *v26;
      *(void *)(v38.__r_.__value_.__l.__size_ + 16) = *(void *)(a1 + 64);
      *std::string::size_type size = v28;
    }
    std::string::size_type v29 = (std::string::size_type)size + 24;
  }
  v38.__r_.__value_.__l.__size_ = v29;
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  uint64_t v30 = *(void *)(a1 + 176);
  memset(v35, 0, sizeof(v35));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, long long *))(*(void *)v30 + 128))(v30, &v39, &v38, v35, &v36);
  std::string v42 = v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  uint64_t v31 = *(void *)(*((void *)&v36 + 1) - 8);
  *(void *)(*((void *)&v36 + 1) - 8) = 0;
  uint64_t v32 = *a6;
  *a6 = v31;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v34 = *((void *)&v36 + 1) - 8;
  uint64_t v33 = *(void *)(*((void *)&v36 + 1) - 8);
  *(void *)(*((void *)&v36 + 1) - 8) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  *((void *)&v36 + 1) = v34;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)a5);
  *(_OWORD *)a5 = v36;
  *(void *)(a5 + 16) = v37;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  v35[0] = (void **)&v36;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v35);
  *(void *)&long long v36 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_1B1DA4E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::quasar::CEStatelessEncoderNet::Encode(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)(a1 + 144), *(int *)(a3 + 20), *(int *)(a3 + 16), v18);
  uint64_t v16 = 0;
  kaldi::quasar::CreateBufferFromMatrix(a1 + 176, a3, (uint64_t)v18, &v16, &v17);
  uint64_t v12 = v16;
  uint64_t v16 = 0;
  if (v12) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v12 + 8))(v12);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 176) + 48))(&v15);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v15 + 96))(v15, a4, 0);
  kaldi::quasar::CEStatelessEncoderNet::Encode(a1, a2, (uint64_t *)&v17, &v15, a5, a6);
  uint64_t v13 = v15;
  uint64_t v15 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v17;
  std::string::size_type v17 = 0;
  if (v14) {
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(void *)v14 + 8))(v14);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_1B1DA5008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEStatelessEncoderNet::InitialStates(kaldi::quasar::CEStatelessEncoderNet *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (char *)this + 120;
  if (*((void *)this + 16) != *((void *)this + 15))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::CEStatelessEncoderNet *)((char *)this + 144), *((int *)this + 41), *((int *)this + 39), __p);
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 22) + 56))(v10);
    size_t v5 = v13;
    if ((unint64_t)v13 >= v14)
    {
      uint64_t v7 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v12, (long long *)this, v10);
      uint64_t v8 = v10[0];
      uint64_t v13 = v7;
      v10[0] = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
    }
    else
    {
      if (*((char *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)this, *((void *)this + 1));
      }
      else
      {
        long long v6 = *(_OWORD *)this;
        v13->__r_.__value_.__r.__words[2] = *((void *)this + 2);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      }
      v5[1].__r_.__value_.__r.__words[0] = v10[0];
      uint64_t v13 = (std::string *)((char *)v5 + 32);
    }
    uint64_t v9 = *((void *)this + 22);
    memset(v10, 0, sizeof(v10));
    (*(void (**)(uint64_t, uint64_t *, char *, uint64_t *, void *))(*(void *)v9 + 120))(v9, &v12, v3, v10, a2);
    uint64_t v15 = (void **)v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    __p[0] = &v12;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1B1DA5228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *__p, uint64_t *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  std::string __p = &a15;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(kaldi::quasar::CEStatelessEncoderNet *this)
{
  return *((unsigned int *)this + 41);
}

uint64_t kaldi::quasar::CEStatelessEncoderNet::Engine(kaldi::quasar::CEStatelessEncoderNet *this)
{
  return (uint64_t)this + 176;
}

void kaldi::quasar::CEStatelessDecoderNetConfig::Read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  size_t v4 = (kaldi::Input *)kaldi::Input::Input(v5, a3, v6);
  kaldi::Input::Stream(v4);
  kaldi::quasar::CreateComputeEngineConfig(a2);
}

void sub_1B1DA6068()
{
  *(void *)(v0 - 176) = v0 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v0 - 176);
  if (v2 < 0) {
    operator delete(v1);
  }
  JUMPOUT(0x1B1DA6098);
}

void sub_1B1DA6094(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  kaldi::Input::~Input((kaldi::Input *)(v1 - 104));
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEStatelessDecoderNet::CEStatelessDecoderNet(kaldi::quasar::CEStatelessDecoderNetConfig *a1, uint64_t a2)
{
  *((void *)kaldi::quasar::CEStatelessDecoderNetConfig::CEStatelessDecoderNetConfig(a1) + 42) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  size_t v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (v8 < 0) {
    size_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v6 = (const void *)a2;
    }
    else {
      long long v6 = *(const void **)a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::quasar::CEStatelessDecoderNetConfig::Read((uint64_t)a1, a2, (uint64_t)__p);
}

void sub_1B1DA628C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *((void *)v14 + 42);
  *((void *)v14 + 42) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  kaldi::quasar::CEStatelessDecoderNetConfig::~CEStatelessDecoderNetConfig(v14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEStatelessDecoderNet::~CEStatelessDecoderNet(kaldi::quasar::CEStatelessDecoderNet *this)
{
  uint64_t v2 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  kaldi::quasar::CEStatelessDecoderNetConfig::~CEStatelessDecoderNetConfig(this);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::CroppedAttentionState(kaldi::quasar::CEStatelessDecoderNet *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4)
{
  double v8 = kaldi::Matrix<float>::Matrix((uint64_t)v14);
  (*(void (**)(const kaldi::quasar::ComputeEngineBufferItf *, unsigned char *, double))(*(void *)a2 + 24))(a2, v14, v8);
  int v9 = kaldi::MatrixBase<float>::NumCols((uint64_t)v14) - (a4 + a3);
  if (v9 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"num_cols > 0", 12);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  int v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)v14);
  double v11 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v13, (uint64_t)v14, 0, v10, a3, v9);
  (*(void (**)(void, void *, double))(**((void **)this + 42) + 40))(*((void *)this + 42), v13, v11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v14);
}

void kaldi::quasar::CEStatelessDecoderNet::LeftPadLastAxis(uint64_t a1, void *a2, int a3)
{
  LODWORD(v3) = a3;
  int v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 176))();
  std::string __p = 0;
  std::string::size_type v45 = 0;
  uint64_t v46 = 0;
  uint64_t v7 = v6 - 1;
  if (v6 == 1)
  {
    uint64_t v12 = 0;
    uint64_t v21 = 0;
    uint64_t v3 = (int)v3;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 184))(*a2, v8);
      uint64_t v10 = v9;
      double v11 = v45;
      if (v45 >= v46)
      {
        uint64_t v13 = (char *)__p;
        uint64_t v14 = (v45 - (unsigned char *)__p) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v46 - (unsigned char *)__p;
        if ((v46 - (unsigned char *)__p) >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v17);
          uint64_t v13 = (char *)__p;
          double v11 = v45;
        }
        else
        {
          long long v18 = 0;
        }
        uint64_t v19 = &v18[8 * v14];
        *(void *)uint64_t v19 = v10;
        uint64_t v12 = v19 + 8;
        while (v11 != v13)
        {
          uint64_t v20 = *((void *)v11 - 1);
          v11 -= 8;
          *((void *)v19 - 1) = v20;
          v19 -= 8;
        }
        std::string __p = v19;
        std::string::size_type v45 = v12;
        uint64_t v46 = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)std::string::size_type v45 = v9;
        uint64_t v12 = v11 + 8;
      }
      std::string::size_type v45 = v12;
      ++v8;
    }
    while (v8 != v7);
    uint64_t v21 = v46;
    uint64_t v3 = (int)v3;
    if (v12 < v46)
    {
      *(void *)uint64_t v12 = (int)v3;
      long long v22 = v12 + 8;
      goto LABEL_37;
    }
  }
  uint64_t v23 = (char *)__p;
  uint64_t v24 = (v12 - (unsigned char *)__p) >> 3;
  unint64_t v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 61) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v26 = v21 - (unsigned char *)__p;
  if (v26 >> 2 > v25) {
    unint64_t v25 = v26 >> 2;
  }
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v27 = v25;
  }
  if (v27)
  {
    long long v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v27);
    uint64_t v23 = (char *)__p;
    uint64_t v12 = v45;
  }
  else
  {
    long long v28 = 0;
  }
  std::string::size_type v29 = &v28[8 * v24];
  uint64_t v30 = &v28[8 * v27];
  *(void *)std::string::size_type v29 = v3;
  long long v22 = v29 + 8;
  while (v12 != v23)
  {
    uint64_t v31 = *((void *)v12 - 1);
    v12 -= 8;
    *((void *)v29 - 1) = v31;
    v29 -= 8;
  }
  std::string __p = v29;
  std::string::size_type v45 = v22;
  uint64_t v46 = v30;
  if (v23) {
    operator delete(v23);
  }
LABEL_37:
  std::string::size_type v45 = v22;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 336) + 56))(&v43);
  uint64_t v32 = v43;
  uint64_t v33 = *a2;
  uint64_t v34 = operator new(0x10uLL);
  unint64_t v41 = v34 + 2;
  std::string v42 = v34 + 2;
  *uint64_t v34 = v32;
  v34[1] = v33;
  char v40 = v34;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 336) + 96))(&v39);
  uint64_t v35 = v39;
  uint64_t v39 = 0;
  uint64_t v36 = *a2;
  *a2 = v35;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    uint64_t v37 = v39;
    uint64_t v39 = 0;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
  }
  if (v40)
  {
    unint64_t v41 = v40;
    operator delete(v40);
  }
  uint64_t v38 = v43;
  uint64_t v43 = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  if (__p)
  {
    std::string::size_type v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B1DA6840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEStatelessDecoderNet::Decode(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v9 = (uint64_t)(a2[1] - *a2) >> 3;
  if (v9 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v114);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v114, "input_states.size() == cfg_.input_states.size()");
    goto LABEL_139;
  }
  if (v9 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v114);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v114, "input_states.size() == cfg_.output_states.size()");
    goto LABEL_139;
  }
  if (!*a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v114);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v114, "input_feats != nullptr");
    goto LABEL_139;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)*a3 + 176))(*a3) != *(_DWORD *)(a1 + 304))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v114);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v114, "input_feats->GetNumDims() == cfg_.input_shape_template.ndim");
    goto LABEL_139;
  }
  if ((*(int (**)(uint64_t, void))(*(void *)*a3 + 184))(*a3, *(unsigned int *)(a1 + 296)) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v114);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v114, "input_feats->GetDimSize(cfg_.input_shape_template.row_index) > 0");
    goto LABEL_139;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)*a3 + 184))(*a3, *(unsigned int *)(a1 + 300)) != *(_DWORD *)(a1 + 308))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v114);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v114, "input_feats->GetDimSize(cfg_.input_shape_template.col_index) == InputDim()");
LABEL_139:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v114);
  }
  unint64_t v102 = a5;
  long long v99 = a6;
  uint64_t v100 = a7;
  unint64_t v101 = a8;
  if (!*(void *)(a1 + 216)) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) == v18) {
    goto LABEL_16;
  }
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0x7FFFFFFFLL;
  do
  {
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 192), (unsigned __int8 *)(v18 + v19)))
    {
      int FirstNonZeroColumn = kaldi::quasar::ComputeEngineBufferItf::GetFirstNonZeroColumn(*(kaldi::quasar::ComputeEngineBufferItf **)(*a2 + 8 * v20), 0.00097656);
      if ((int)v21 >= FirstNonZeroColumn) {
        uint64_t v21 = FirstNonZeroColumn;
      }
      else {
        uint64_t v21 = v21;
      }
    }
    ++v20;
    uint64_t v18 = *(void *)(a1 + 120);
    v19 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v18) >> 3) > v20);
  if (v21 == 0x7FFFFFFF) {
LABEL_16:
  }
    uint64_t v21 = 0;
  uint64_t v103 = a3;
  int v104 = (*(uint64_t (**)(uint64_t, void))(*(void *)*a3 + 184))(*a3, 0);
  uint64_t v111 = 0;
  BOOL v112 = 0;
  unint64_t v113 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  unint64_t v110 = 0;
  uint64_t v23 = *(void *)(a1 + 120);
  if (*(void *)(a1 + 128) != v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    while (1)
    {
      uint64_t v26 = (long long *)(v23 + v24);
      unint64_t v27 = *(const kaldi::quasar::ComputeEngineBufferItf **)(*a2 + 8 * v25);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((void *)(a1 + 192), (unsigned __int8 *)(v23 + v24))|| ((int v28 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(void *)v27 + 184))(v27, 1)- v104, v28 <= 0)? (v29 = v21 == 0): (v29 = 0), v29))
      {
        uint64_t v33 = v109;
        if ((unint64_t)v109 >= v110)
        {
          uint64_t v35 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf const&>(&v108, (long long *)(v23 + v24), (uint64_t)v27);
LABEL_47:
          long long v44 = (std::string *)v35;
          goto LABEL_48;
        }
        uint64_t v34 = v23 + v24;
        if ((*(char *)(v23 + v24 + 23) & 0x80000000) == 0)
        {
LABEL_44:
          long long v43 = *v26;
          v33->__r_.__value_.__r.__words[2] = *((void *)v26 + 2);
          *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v43;
          goto LABEL_45;
        }
      }
      else
      {
        kaldi::quasar::CEStatelessDecoderNet::CroppedAttentionState((uint64_t *)&v106, (kaldi::quasar::CEStatelessDecoderNet *)a1, v27, v21, v28 & ~(v28 >> 31));
        uint64_t v30 = v112;
        if ((unint64_t)v112 >= v113)
        {
          uint64_t v36 = ((uint64_t)v112 - v111) >> 3;
          if ((unint64_t)(v36 + 1) >> 61) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v37 = (uint64_t)(v113 - v111) >> 2;
          if (v37 <= v36 + 1) {
            unint64_t v37 = v36 + 1;
          }
          if (v113 - v111 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          unint64_t v116 = &v113;
          if (v38) {
            uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v113, v38);
          }
          else {
            uint64_t v39 = 0;
          }
          char v40 = &v39[8 * v36];
          v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          v114.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
          v115 = &v39[8 * v38];
          uint64_t v41 = v106;
          *(void *)&long long v106 = 0;
          *(void *)char v40 = v41;
          v114.__r_.__value_.__r.__words[2] = (std::string::size_type)(v40 + 8);
          std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v111, &v114);
          uint64_t v32 = v112;
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v114.__r_.__value_.__l.__data_);
        }
        else
        {
          uint64_t v31 = v106;
          *(void *)&long long v106 = 0;
          *BOOL v112 = v31;
          uint64_t v32 = v30 + 1;
        }
        BOOL v112 = v32;
        uint64_t v42 = v106;
        *(void *)&long long v106 = 0;
        if (v42)
        {
          (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
          uint64_t v32 = v112;
        }
        unint64_t v27 = (const kaldi::quasar::ComputeEngineBufferItf *)*(v32 - 1);
        uint64_t v33 = v109;
        if ((unint64_t)v109 >= v110)
        {
          uint64_t v35 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v108, (long long *)(v23 + v24), (uint64_t)v27);
          goto LABEL_47;
        }
        uint64_t v34 = v23 + v24;
        if ((*(char *)(v23 + v24 + 23) & 0x80000000) == 0) {
          goto LABEL_44;
        }
      }
      std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)v34, *(void *)(v34 + 8));
LABEL_45:
      v33[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      long long v44 = (std::string *)((char *)v33 + 32);
LABEL_48:
      uint64_t v109 = v44;
      ++v25;
      uint64_t v23 = *(void *)(a1 + 120);
      v24 += 24;
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v23) >> 3) <= v25) {
        goto LABEL_52;
      }
    }
  }
  long long v44 = 0;
LABEL_52:
  if (v21)
  {
    uint64_t v45 = *(void *)(a1 + 336);
    uint64_t v46 = *v103;
    uint64_t v47 = (*(uint64_t (**)(uint64_t, void))(*(void *)*v103 + 184))(*v103, 0);
    uint64_t v48 = (void *)(a1 + 192);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v45 + 112))(&v106, v45, v46, v21, v47);
    int v49 = v112;
    if ((unint64_t)v112 >= v113)
    {
      uint64_t v54 = ((uint64_t)v112 - v111) >> 3;
      if ((unint64_t)(v54 + 1) >> 61) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v55 = (uint64_t)(v113 - v111) >> 2;
      if (v55 <= v54 + 1) {
        unint64_t v55 = v54 + 1;
      }
      if (v113 - v111 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v55;
      }
      unint64_t v116 = &v113;
      if (v56) {
        uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v113, v56);
      }
      else {
        uint64_t v57 = 0;
      }
      uint64_t v59 = &v57[8 * v54];
      v114.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
      v114.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
      v115 = &v57[8 * v56];
      uint64_t v60 = v106;
      *(void *)&long long v106 = 0;
      *(void *)uint64_t v59 = v60;
      v114.__r_.__value_.__r.__words[2] = (std::string::size_type)(v59 + 8);
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__swap_out_circular_buffer(&v111, &v114);
      uint64_t v51 = v112;
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((void **)&v114.__r_.__value_.__l.__data_);
    }
    else
    {
      uint64_t v50 = v106;
      *(void *)&long long v106 = 0;
      *BOOL v112 = v50;
      uint64_t v51 = v49 + 1;
    }
    BOOL v112 = v51;
    uint64_t v61 = v106;
    *(void *)&long long v106 = 0;
    if (v61)
    {
      (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
      uint64_t v51 = v112;
    }
    uint64_t v62 = *(v51 - 1);
    uint64_t v63 = v109;
    if ((unint64_t)v109 < v110)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else
      {
        long long v64 = *(_OWORD *)a1;
        v109->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
        *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
      }
      v63[1].__r_.__value_.__r.__words[0] = v62;
      long long v65 = (std::string *)((char *)v63 + 32);
      goto LABEL_80;
    }
    uint64_t v58 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v108, (long long *)a1, v62);
  }
  else
  {
    uint64_t v52 = *v103;
    uint64_t v48 = (void *)(a1 + 192);
    if ((unint64_t)v44 < v110)
    {
      if (*(char *)(a1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else
      {
        long long v53 = *(_OWORD *)a1;
        v44->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
        *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v53;
      }
      v44[1].__r_.__value_.__r.__words[0] = v52;
      long long v65 = (std::string *)((char *)v44 + 32);
      goto LABEL_80;
    }
    uint64_t v58 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v108, (long long *)a1, *v103);
  }
  long long v65 = (std::string *)v58;
LABEL_80:
  uint64_t v109 = v65;
  uint64_t v66 = (long long *)(a1 + 24);
  uint64_t v67 = *a4;
  if ((unint64_t)v65 >= v110)
  {
    long long v69 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v108, v66, *a4);
  }
  else
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v68 = *v66;
      v65->__r_.__value_.__r.__words[2] = *(void *)(a1 + 40);
      *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v68;
    }
    v65[1].__r_.__value_.__r.__words[0] = v67;
    long long v69 = (std::string *)((char *)v65 + 32);
  }
  uint64_t v109 = v69;
  unint64_t v70 = (long long *)(a1 + 48);
  uint64_t v71 = *v102;
  if ((unint64_t)v69 >= v110)
  {
    int v73 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v108, v70, *v102);
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v69, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      long long v72 = *v70;
      v69->__r_.__value_.__r.__words[2] = *(void *)(a1 + 64);
      *(_OWORD *)&v69->__r_.__value_.__l.__data_ = v72;
    }
    v69[1].__r_.__value_.__r.__words[0] = v71;
    int v73 = (std::string *)((char *)v69 + 32);
  }
  uint64_t v109 = v73;
  if (*(char *)(a1 + 295) < 0)
  {
    if (!*(void *)(a1 + 280)) {
      goto LABEL_103;
    }
  }
  else if (!*(unsigned char *)(a1 + 295))
  {
    goto LABEL_103;
  }
  std::string::size_type v74 = (long long *)(a1 + 272);
  uint64_t v75 = *v99;
  if ((unint64_t)v73 >= v110)
  {
    int v77 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(&v108, v74, *v99);
  }
  else
  {
    if ((*(unsigned char *)(a1 + 295) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v73, *(const std::string::value_type **)(a1 + 272), *(void *)(a1 + 280));
    }
    else
    {
      long long v76 = *v74;
      v73->__r_.__value_.__r.__words[2] = *(void *)(a1 + 288);
      *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v76;
    }
    v73[1].__r_.__value_.__r.__words[0] = v75;
    int v77 = (std::string *)((char *)v73 + 32);
  }
  uint64_t v109 = v77;
LABEL_103:
  memset(&v114, 0, sizeof(v114));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v114, *(long long **)(a1 + 144), *(long long **)(a1 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3));
  long long v78 = (long long *)(a1 + 72);
  std::string::size_type size = (_OWORD *)v114.__r_.__value_.__l.__size_;
  if (v114.__r_.__value_.__l.__size_ >= v114.__r_.__value_.__r.__words[2])
  {
    long long v81 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v114, v78);
  }
  else
  {
    if (*(char *)(a1 + 95) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v114.__r_.__value_.__l.__size_, *(const std::string::value_type **)(a1 + 72), *(void *)(a1 + 80));
    }
    else
    {
      long long v80 = *v78;
      *(void *)(v114.__r_.__value_.__l.__size_ + 16) = *(void *)(a1 + 88);
      *std::string::size_type size = v80;
    }
    long long v81 = (std::string *)((char *)size + 24);
  }
  v114.__r_.__value_.__l.__size_ = (std::string::size_type)v81;
  long long v82 = (long long *)(a1 + 96);
  if ((unint64_t)v81 >= v114.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v84 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v114, v82);
  }
  else
  {
    if (*(char *)(a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(v81, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
    }
    else
    {
      long long v83 = *v82;
      v81->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
      *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v83;
    }
    std::string::size_type v84 = (std::string::size_type)&v81[1];
  }
  v114.__r_.__value_.__l.__size_ = v84;
  long long v106 = 0uLL;
  uint64_t v107 = 0;
  uint64_t v85 = *(void *)(a1 + 336);
  memset(v105, 0, sizeof(v105));
  (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, long long *))(*(void *)v85 + 128))(v85, &v108, &v114, v105, &v106);
  unint64_t v117 = v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  uint64_t v86 = *(void *)(*((void *)&v106 + 1) - 8);
  *(void *)(*((void *)&v106 + 1) - 8) = 0;
  uint64_t v87 = *a9;
  *a9 = v86;
  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
  }
  if (v21) {
    kaldi::quasar::CEStatelessDecoderNet::LeftPadLastAxis(a1, a9, v21);
  }
  uint64_t v88 = *((void *)&v106 + 1);
  uint64_t v90 = *((void *)&v106 + 1) - 8;
  uint64_t v89 = *(void *)(*((void *)&v106 + 1) - 8);
  *(void *)(*((void *)&v106 + 1) - 8) = 0;
  if (v89) {
    (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
  }
  *((void *)&v106 + 1) = v90;
  uint64_t v91 = *(void *)(v88 - 16);
  *(void *)(v88 - 16) = 0;
  uint64_t v92 = *v101;
  *unint64_t v101 = v91;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
  }
  uint64_t v94 = *((void *)&v106 + 1) - 8;
  uint64_t v93 = *(void *)(*((void *)&v106 + 1) - 8);
  *(void *)(*((void *)&v106 + 1) - 8) = 0;
  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
  }
  *((void *)&v106 + 1) = v94;
  if (v21)
  {
    if (*(void *)(a1 + 216))
    {
      uint64_t v95 = *(void *)(a1 + 120);
      if (*(void *)(a1 + 128) != v95)
      {
        uint64_t v96 = 0;
        uint64_t v97 = 0;
        unint64_t v98 = 0;
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v48, (unsigned __int8 *)(v95 + v96)))
          {
            kaldi::quasar::CEStatelessDecoderNet::LeftPadLastAxis(a1, (void *)(v106 + v97), v21);
          }
          ++v98;
          uint64_t v95 = *(void *)(a1 + 120);
          v97 += 8;
          v96 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 128) - v95) >> 3) > v98);
      }
    }
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)v100);
  *(_OWORD *)uint64_t v100 = v106;
  *(void *)(v100 + 16) = v107;
  uint64_t v107 = 0;
  long long v106 = 0uLL;
  v105[0] = (void **)&v106;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](v105);
  *(void *)&long long v106 = &v114;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
  v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
}

void sub_1B1DA7424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void ***a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28)
{
  a21 = &a25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a25 = (void **)&a28;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void sub_1B1DA753C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::Decode(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 336) + 16))(&v25);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 336) + 16))(&v24);
  uint64_t v15 = *(void *)(a1 + 336);
  memset(__p, 0, sizeof(__p));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v15 + 48))(&v23);
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v23 + 96))(v23, a6, 0);
  uint64_t v21 = 0;
  __p[0] = 0;
  kaldi::quasar::CEStatelessDecoderNet::Decode(a1, a2, a3, &v25, &v24, &v23, a7, (uint64_t *)__p, &v21);
  uint64_t v16 = __p[0];
  (*(void (**)(void *, uint64_t))(*(void *)__p[0] + 56))(__p[0], a8);
  uint64_t v17 = v21;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 56))(v21, a9);
  (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  (*(void (**)(void *))(*(void *)v16 + 8))(v16);
  uint64_t v18 = v23;
  uint64_t v23 = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v24;
  uint64_t v24 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t result = v25;
  uint64_t v25 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1B1DA7808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEStatelessDecoderNet::InitialStates(kaldi::quasar::CEStatelessDecoderNet *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (char *)this + 168;
  if (*((void *)this + 22) != *((void *)this + 21))
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    unint64_t v39 = 0;
    kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::CEStatelessDecoderNet *)((char *)this + 296), 1, *((int *)this + 77), v36);
    (*(void (**)(void **__return_ptr))(**((void **)this + 42) + 56))(&__p);
    size_t v5 = v38;
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v7 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v37, (long long *)this, (uint64_t *)&__p);
      uint64_t v8 = __p;
      unint64_t v38 = v7;
      std::string __p = 0;
      if (v8) {
        (*(void (**)(void *))(*(void *)v8 + 8))(v8);
      }
    }
    else
    {
      if (*((char *)this + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)this, *((void *)this + 1));
      }
      else
      {
        long long v6 = *(_OWORD *)this;
        v38->__r_.__value_.__r.__words[2] = *((void *)this + 2);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      }
      v5[1].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      unint64_t v38 = (std::string *)((char *)v5 + 32);
    }
    uint64_t v9 = *((void *)this + 42);
    uint64_t v10 = operator new(4uLL);
    std::string __p = v10;
    *uint64_t v10 = 0;
    uint64_t v34 = v10 + 1;
    uint64_t v35 = v10 + 1;
    (*(void (**)(void ***__return_ptr, uint64_t, void **, void))(*(void *)v9 + 16))(&p_p, v9, &__p, 0);
    double v11 = (long long *)((char *)this + 48);
    uint64_t v12 = v38;
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v14 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v37, v11, (uint64_t *)&p_p);
      uint64_t v15 = p_p;
      unint64_t v38 = v14;
      p_p = 0;
      if (v15) {
        (*((void (**)(void **))*v15 + 1))(v15);
      }
    }
    else
    {
      if (*((char *)this + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v38, *((const std::string::value_type **)this + 6), *((void *)this + 7));
      }
      else
      {
        long long v13 = *v11;
        v38->__r_.__value_.__r.__words[2] = *((void *)this + 8);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v12[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      unint64_t v38 = (std::string *)((char *)v12 + 32);
      p_p = 0;
    }
    if (__p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
    uint64_t v16 = *((void *)this + 42);
    uint64_t v17 = operator new(4uLL);
    std::string __p = v17;
    *uint64_t v17 = 0;
    uint64_t v34 = v17 + 1;
    uint64_t v35 = v17 + 1;
    (*(void (**)(void ***__return_ptr, uint64_t, void **, void))(*(void *)v16 + 16))(&p_p, v16, &__p, 0);
    uint64_t v18 = (long long *)((char *)this + 24);
    uint64_t v19 = v38;
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v21 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v37, v18, (uint64_t *)&p_p);
      long long v22 = p_p;
      unint64_t v38 = v21;
      p_p = 0;
      if (v22) {
        (*((void (**)(void **))*v22 + 1))(v22);
      }
    }
    else
    {
      if (*((char *)this + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v38, *((const std::string::value_type **)this + 3), *((void *)this + 4));
      }
      else
      {
        long long v20 = *v18;
        v38->__r_.__value_.__r.__words[2] = *((void *)this + 5);
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      }
      v19[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      unint64_t v38 = (std::string *)((char *)v19 + 32);
      p_p = 0;
    }
    if (__p)
    {
      uint64_t v34 = __p;
      operator delete(__p);
    }
    uint64_t v23 = (uint64_t *)*((void *)this + 26);
    if (v23)
    {
      int64x2_t v32 = vdupq_n_s64(1uLL);
      do
      {
        uint64_t v24 = *((void *)this + 42);
        uint64_t v25 = operator new(0x10uLL);
        std::string __p = v25;
        _OWORD *v25 = v32;
        uint64_t v34 = v25 + 1;
        uint64_t v35 = v25 + 1;
        (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(void *)v24 + 56))(&p_p, v24, &__p);
        uint64_t v26 = (long long *)(v23 + 2);
        unint64_t v27 = v38;
        if ((unint64_t)v38 >= v39)
        {
          BOOL v29 = (std::string *)std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(&v37, v26, (uint64_t *)&p_p);
          uint64_t v30 = p_p;
          unint64_t v38 = v29;
          p_p = 0;
          if (v30) {
            (*((void (**)(void **))*v30 + 1))(v30);
          }
        }
        else
        {
          if (*((char *)v23 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v38, (const std::string::value_type *)v23[2], v23[3]);
          }
          else
          {
            long long v28 = *v26;
            v38->__r_.__value_.__r.__words[2] = v23[4];
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
          }
          v27[1].__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
          unint64_t v38 = (std::string *)((char *)v27 + 32);
          p_p = 0;
        }
        if (__p)
        {
          uint64_t v34 = __p;
          operator delete(__p);
        }
        uint64_t v23 = (uint64_t *)*v23;
      }
      while (v23);
    }
    uint64_t v31 = *((void *)this + 42);
    std::string __p = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    (*(void (**)(uint64_t, uint64_t *, char *, void **, void *))(*(void *)v31 + 120))(v31, &v37, v3, &__p, a2);
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    if (v36[0])
    {
      v36[1] = v36[0];
      operator delete(v36[0]);
    }
    v36[0] = &v37;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  }
}

void sub_1B1DA7D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(void *)(v18 - 56);
  *(void *)(v18 - 56) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a14)
  {
    a15 = a14;
    operator delete(a14);
  }
  a14 = &a17;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::CopyCellOutputs(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = (uint64_t)(a2[1] - *a2) >> 3;
  uint64_t v4 = a1[15];
  uint64_t v5 = a1[16];
  if (v3 != 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src_states.size() == cfg_.input_states.size()");
    goto LABEL_18;
  }
  if (v3 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[19] - a1[18]) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src_states.size() == cfg_.output_states.size()");
    goto LABEL_18;
  }
  if (v3 != (a3[1] - *a3) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "src_states.size() == dst_states.size()");
LABEL_18:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  char v8 = 0;
  if (a1[32] && v5 != v4)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    char v8 = 0;
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 29, (unsigned __int8 *)(v4 + v10)))
      {
        (*(void (**)(void *__return_ptr))(**(void **)(*a2 + 8 * v11) + 16))(v17);
        uint64_t v12 = *a3;
        uint64_t v13 = v17[0];
        v17[0] = 0;
        uint64_t v14 = *(void *)(v12 + 8 * v11);
        *(void *)(v12 + 8 * v11) = v13;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
        uint64_t v15 = v17[0];
        v17[0] = 0;
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
        }
        char v8 = 1;
      }
      ++v11;
      uint64_t v4 = a1[15];
      v10 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[16] - v4) >> 3) > v11);
  }
  return v8 & 1;
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::BOSIndex(kaldi::quasar::CEStatelessDecoderNet *this)
{
  return *((unsigned int *)this + 79);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::EOSIndex(kaldi::quasar::CEStatelessDecoderNet *this)
{
  return *((unsigned int *)this + 80);
}

uint64_t kaldi::quasar::CEStatelessDecoderNet::SilIndex(kaldi::quasar::CEStatelessDecoderNet *this)
{
  return *((unsigned int *)this + 81);
}

kaldi::quasar::CEEncoderDecoderNetConfig *kaldi::quasar::CEEncoderDecoderNetConfig::CEEncoderDecoderNetConfig(kaldi::quasar::CEEncoderDecoderNetConfig *this)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, "encoder_input");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "decoder_parent_ids");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 6, "decoder_input");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 9, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 12, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 15, "decoder_output");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 18, "decoder_attention");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 21, "encode");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 24, "reset");
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEEncoderDecoderNetConfig *)((char *)this + 216));
  *(_OWORD *)((char *)this + 228) = xmmword_1B255FD00;
  *(void *)((char *)this + 244) = 0xFFFFFFFF00000001;
  *((_DWORD *)this + 63) = 8;
  *((void *)this + 32) = 0;
  return this;
}

void sub_1B1DA81D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 215) < 0) {
    operator delete(*v9);
  }
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEEncoderDecoderNetConfig::~CEEncoderDecoderNetConfig(kaldi::quasar::CEEncoderDecoderNetConfig *this)
{
  uint64_t v2 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  if (*((char *)this + 191) < 0) {
    operator delete(*((void **)this + 21));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

kaldi::quasar::CEEncoderNetConfig *kaldi::quasar::CEEncoderNetConfig::CEEncoderNetConfig(kaldi::quasar::CEEncoderNetConfig *this)
{
  *(void *)&long long v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, "inputs");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "outputs");
  std::string::basic_string[abi:ne180100]<0>(__p, "input_states");
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  uint64_t v3 = (std::string *)operator new(0x18uLL);
  *((void *)this + 8) = v3 + 1;
  *((void *)this + 6) = v3;
  *((void *)this + 7) = v3;
  *((void *)this + 7) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 64, (long long *)__p, &v9, v3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_states");
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  uint64_t v4 = (std::string *)operator new(0x18uLL);
  *((void *)this + 11) = v4 + 1;
  *((void *)this + 9) = v4;
  *((void *)this + 10) = v4;
  *((void *)this + 10) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 88, (long long *)__p, &v9, v4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "initial_states");
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  uint64_t v5 = (std::string *)operator new(0x18uLL);
  *((void *)this + 14) = v5 + 1;
  *((void *)this + 12) = v5;
  *((void *)this + 13) = v5;
  *((void *)this + 13) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 112, (long long *)__p, &v9, v5);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEEncoderNetConfig *)((char *)this + 120));
  *(void *)((char *)this + 132) = -1;
  *((_DWORD *)this + 35) = 1;
  *((void *)this + 18) = 0;
  return this;
}

void sub_1B1DA856C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v16 + 47) < 0) {
    operator delete(*v17);
  }
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(a1);
}

void sub_1B1DA862C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 56) = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1DA8604);
}

void sub_1B1DA865C()
{
}

void sub_1B1DA8664()
{
}

kaldi::quasar::CEDecoderNetConfig *kaldi::quasar::CEDecoderNetConfig::CEDecoderNetConfig(kaldi::quasar::CEDecoderNetConfig *this)
{
  *(void *)&long long v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, "feats") + 3;
  std::string::basic_string[abi:ne180100]<0>(v2, "parents");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 6, "inputs");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 9, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 12, "outputs");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 15, "attentions");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 18, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "input_states");
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  uint64_t v3 = (std::string *)operator new(0x18uLL);
  *((void *)this + 23) = v3 + 1;
  *((void *)this + 21) = v3;
  *((void *)this + 22) = v3;
  *((void *)this + 22) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 184, (long long *)__p, &v9, v3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_states");
  *((void *)this + ++*(_DWORD *)(result + 24) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  uint64_t v4 = (std::string *)operator new(0x18uLL);
  *((void *)this + 26) = v4 + 1;
  *((void *)this + ++*(_DWORD *)(result + 24) = v4;
  *((void *)this + 25) = v4;
  *((void *)this + 25) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 208, (long long *)__p, &v9, v4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "initial_states");
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  uint64_t v5 = (std::string *)operator new(0x18uLL);
  *((void *)this + 29) = v5 + 1;
  *((void *)this + 27) = v5;
  *((void *)this + 28) = v5;
  *((void *)this + 28) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 232, (long long *)__p, &v9, v5);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEDecoderNetConfig *)((char *)this + 240));
  *(_OWORD *)((char *)this + 2--*(_DWORD *)(a9 + 52) = xmmword_1B257AB10;
  *((_DWORD *)this + 67) = -1;
  *((void *)this + 34) = 0;
  return this;
}

void sub_1B1DA88C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v18 + 167) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v18 + 143) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v18 + 119) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v18 + 95) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v18 + 71) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v18 + 47) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  _Unwind_Resume(a1);
}

void sub_1B1DA89D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  *(void *)(v18 + 176) = v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1B1DA895CLL);
}

void sub_1B1DA8A08()
{
}

void sub_1B1DA8A10()
{
}

void sub_1B1DA8A18()
{
}

void sub_1B1DA8A20()
{
}

void sub_1B1DA8A28()
{
}

void sub_1B1DA8A30()
{
}

void sub_1B1DA8A38()
{
}

void kaldi::quasar::CEDecoderNetConfig::~CEDecoderNetConfig(kaldi::quasar::CEDecoderNetConfig *this)
{
  uint64_t v2 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

kaldi::quasar::CEStatelessEncoderNetConfig *kaldi::quasar::CEStatelessEncoderNetConfig::CEStatelessEncoderNetConfig(kaldi::quasar::CEStatelessEncoderNetConfig *this)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, "input_feats");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 6, "output_feats");
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 17) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEStatelessEncoderNetConfig *)((char *)this + 144));
  *(void *)((char *)this + 156) = -1;
  *((_DWORD *)this + 41) = 1;
  *((void *)this + 21) = 0;
  return this;
}

void sub_1B1DA8BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v14 = v12;
  a10 = (void **)(v10 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

kaldi::quasar::CEStatelessDecoderNetConfig *kaldi::quasar::CEStatelessDecoderNetConfig::CEStatelessDecoderNetConfig(kaldi::quasar::CEStatelessDecoderNetConfig *this)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(this, "input_feats");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "input_parents");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 6, "input_labels");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 9, "output_loglikes");
  std::string::basic_string[abi:ne180100]<0>((void *)this + 12, "output_alignments");
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 27) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 1--*(_DWORD *)(a9 + 52) = 0u;
  *((_DWORD *)this + 56) = 1065353216;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 66) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 34, "");
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::CEStatelessDecoderNetConfig *)((char *)this + 296));
  *(_OWORD *)((char *)this + 308) = xmmword_1B257AB10;
  *((_DWORD *)this + 81) = -1;
  *((void *)this + 41) = 0;
  return this;
}

void sub_1B1DA8D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  if (*(char *)(v10 + 295) < 0) {
    operator delete(*v16);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v17 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v17 + 24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 95) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEStatelessDecoderNetConfig::~CEStatelessDecoderNetConfig(kaldi::quasar::CEStatelessDecoderNetConfig *this)
{
  uint64_t v2 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 192);
  uint64_t v3 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v20 = a1 + 2;
  if (v11) {
    uint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v18;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = a3;
  uint64_t v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B1DA9044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t *a1, long long *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v21 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  uint64_t v19 = v13;
  uint64_t v20 = &v12[32 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v19;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  uint64_t v15 = *a3;
  *a3 = 0;
  *(void *)&v12[32 * v5 + 24] = v15;
  uint64_t v19 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v18);
  return v16;
}

void sub_1B1DA9164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 32;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 + 16) = *(void *)(a3 - 16);
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      uint64_t v10 = *(void *)(a3 - 8);
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(v8 + ++*(_DWORD *)(result + 24) = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 32;
      v8 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](v4, i - 32);
  }
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf&>(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v20 = a1 + 2;
  if (v11) {
    uint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v18;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = a3;
  uint64_t v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B1DA94AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__emplace_back_slow_path<std::string const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>(uint64_t *a1, long long *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v21 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  uint64_t v19 = v13;
  uint64_t v20 = &v12[32 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v19;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  uint64_t v15 = *a3;
  *a3 = 0;
  *(void *)&v12[32 * v5 + 24] = v15;
  uint64_t v19 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, v18);
  uint64_t v16 = a1[1];
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(v18);
  return v16;
}

void sub_1B1DA95CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string const&,kaldi::quasar::ComputeEngineBufferItf const&>(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v20 = a1 + 2;
  if (v11) {
    uint64_t v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (std::string *)&v12[4 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = (char *)&v12[4 * v11];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v13 = v18;
  }
  else
  {
    long long v14 = *a2;
    v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  v12[4 * v5 + 3] = a3;
  uint64_t v18 = (std::string *)((char *)v13 + 32);
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(a1, v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1B1DA96E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrixBase<short>::NumCols(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, int a2, int a3)
{
  kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(a1, a2, a3);
  memptr = 0;
  int v6 = malloc_type_posix_memalign(&memptr, 0x20uLL, a3 * a2, 0x100004077774924uLL);
  uint64_t v7 = memptr;
  if (v6) {
    uint64_t v7 = 0;
  }
  memptr = v7;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  if (v8) {
    (*(void (**)(void))(a1 + 24))();
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1B1DA9798(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::MatrixBase<float>::NumCols(a2);
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  unsigned int v5 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v4)
  {
    uint64_t v6 = 0;
    if (v5 <= 1) {
      int v7 = 1;
    }
    else {
      int v7 = v5;
    }
    float v8 = -INFINITY;
    float v9 = INFINITY;
    do
    {
      if (v5)
      {
        uint64_t v10 = 0;
        for (uint64_t i = 0; i != v7; ++i)
        {
          uint64_t v12 = *(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v6;
          float v13 = *(float *)(v12 + (v10 >> 30));
          if (v13 < v9) {
            float v9 = *(float *)(v12 + (v10 >> 30));
          }
          if (v8 < v13) {
            float v8 = *(float *)(v12 + (v10 >> 30));
          }
          v10 += 0x100000000;
        }
      }
      ++v6;
    }
    while (v6 != v4);
  }
  else
  {
    float v9 = INFINITY;
    float v8 = -INFINITY;
  }
  if ((float)((float)*(int *)(a1 + 4) * 16129.0) > 2147500000.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Too many rows*cols for 8-bit Matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  float v14 = fabsf(v8);
  float v15 = fabsf(v9);
  if (v14 >= v15) {
    float v15 = v14;
  }
  *(_DWORD *)(a1 + 8) = 1123942400;
  *(float *)(a1 + 12) = 127.0 / v15;
  uint64_t v16 = kaldi::QuantizedMatrixBase<signed char>::MutableData(a1);
  kaldi::ComputeQuantizedData<signed char>(v16, a2, *(float *)(a1 + 12));
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(uint64_t a1, int *a2)
{
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::Matrix<float>::Matrix<short>((uint64_t)v5, (kaldi::quasar::Vocab *)a2);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(a1, (uint64_t)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_1B1DA998C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, int a2, int a3)
{
  kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(a1, a2, a3);
  memptr = 0;
  int v6 = malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * a3 * a2, 0x1000040BDFB0063uLL);
  int v7 = memptr;
  if (v6) {
    int v7 = 0;
  }
  memptr = v7;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  if (v8) {
    (*(void (**)(void))(a1 + 24))();
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1B1DA9A4C(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<short>::CopyFromMat(uint64_t a1, uint64_t a2)
{
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::MatrixBase<float>::NumCols(a2);
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  unsigned int v5 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v4)
  {
    uint64_t v6 = 0;
    if (v5 <= 1) {
      int v7 = 1;
    }
    else {
      int v7 = v5;
    }
    float v8 = -INFINITY;
    float v9 = INFINITY;
    do
    {
      if (v5)
      {
        uint64_t v10 = 0;
        for (uint64_t i = 0; i != v7; ++i)
        {
          uint64_t v12 = *(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v6;
          float v13 = *(float *)(v12 + (v10 >> 30));
          if (v13 < v9) {
            float v9 = *(float *)(v12 + (v10 >> 30));
          }
          if (v8 < v13) {
            float v8 = *(float *)(v12 + (v10 >> 30));
          }
          v10 += 0x100000000;
        }
      }
      ++v6;
    }
    while (v6 != v4);
  }
  else
  {
    float v9 = INFINITY;
    float v8 = -INFINITY;
  }
  float v14 = fabsf(v8);
  float v15 = fabsf(v9);
  if (v14 >= v15) {
    float v15 = v14;
  }
  float v16 = 2147500000.0 / (float)(int)(v5 * v4);
  if (v16 > 32767.0) {
    float v16 = 32767.0;
  }
  *(float *)(a1 + 8) = v16;
  *(float *)(a1 + 12) = v16 / v15;
  uint64_t v17 = kaldi::QuantizedMatrixBase<short>::MutableData(a1);
  kaldi::ComputeQuantizedData<short>(v17, a2, *(float *)(a1 + 12));
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(uint64_t a1, int *a2)
{
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::Matrix<float>::Matrix<signed char>((uint64_t)v5, (kaldi::quasar::Vocab *)a2);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(a1, (uint64_t)v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_1B1DA9BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2) {
    BNNSFilterDestroy(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 24))();
  }
  return a1;
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::AddMatMat(uint64_t a1, uint64_t a2, void **a3, float a4)
{
  uint64_t v23 = 0;
  uint64_t v24 = (uint64_t (*)(void))kaldi::kaldi_memalign_free;
  int v26 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  kaldi::QuantizedMatrixBase<signed char>::PrepareMatMat((float *)a1, a2, (uint64_t)&v23);
  uint64_t v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  uint64_t v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  float v9 = 1.0 / (float)(*(float *)(a1 + 12) * *(float *)&v25);
  if (a4 == 0.0)
  {
    uint64_t v10 = *(void **)(a1 + 40);
    unint64_t v11 = v23;
    size_t v12 = *(int *)(a1 + 4);
    float v13 = *a3;
    int v14 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a3);
    BNNSFilterApplyBatch(v10, (int)v7, v11, v12, v13, v14);
    kaldi::MatrixBase<float>::Scale((uint64_t)a3, v9);
  }
  else
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v22, v7, v8, 0, 0);
    float v15 = *(void **)(a1 + 40);
    int v16 = kaldi::MatrixBase<float>::NumRows((uint64_t)v22);
    uint64_t v17 = v23;
    size_t v18 = *(int *)(a1 + 4);
    uint64_t v19 = (void *)v22[0];
    int v20 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v22);
    BNNSFilterApplyBatch(v15, v16, v17, v18, v19, v20);
    kaldi::MatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v22, 111, v9, a4);
    kaldi::Matrix<float>::~Matrix((uint64_t)v22);
  }
  uint64_t result = (uint64_t)v23;
  uint64_t v23 = 0;
  if (result) {
    return v24();
  }
  return result;
}

void sub_1B1DA9DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void))
{
  if (a14) {
    a15();
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::PrepareMatMat(float *a1, uint64_t a2, uint64_t a3)
{
  float v6 = kaldi::MatrixBase<float>::AbsMax(a2);
  if (v6 == 0.0) {
    float v7 = 1.0;
  }
  else {
    float v7 = v6;
  }
  int v8 = kaldi::MatrixBase<float>::NumRows(a2);
  int v9 = kaldi::MatrixBase<float>::NumCols(a2);
  float v10 = a1[2];
  float v11 = 2147500000.0 / (float)(v10 * (float)v9);
  float v12 = v10 / v7;
  if (v12 >= v11) {
    float v13 = v11;
  }
  else {
    float v13 = v12;
  }
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, v9 * v8, 0x100004077774924uLL)) {
    int v14 = 0;
  }
  else {
    int v14 = memptr;
  }
  memptr = v14;
  float v15 = *(void **)a3;
  *(void *)a3 = v14;
  if (v15)
  {
    (*(void (**)(void *))(a3 + 8))(v15);
    int v14 = *(void **)a3;
  }
  uint64_t result = kaldi::ComputeQuantizedData<signed char>((uint64_t)v14, a2, v13);
  *(float *)(a3 + 16) = v13;
  float v17 = *a1;
  uint64_t v18 = *((void *)a1 + 4);
  if (!v18) {
    uint64_t v18 = *((void *)a1 + 2);
  }
  int v19 = *((_DWORD *)a1 + 1);
  if (*(_DWORD *)(a3 + 20) != LODWORD(v17) || *(_DWORD *)(a3 + 24) != v19 || *(void *)(a3 + 32) != v18)
  {
    *(float *)(a3 + 20) = v17;
    *(_DWORD *)(a3 + ++*(_DWORD *)(result + 24) = v19;
    *(void *)(a3 + 32) = v18;
  }
  return result;
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(unsigned int *a1, char **a2)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v5, *a1, a1[1], 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v5, a2);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)a1, (uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_1B1DA9FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(int *a1, void *a2, int a3)
{
  *((void *)a1 + 1) = a2[1];
  if (a3 == 111)
  {
    unsigned int v5 = (void *)kaldi::QuantizedMatrixBase<signed char>::MutableData((uint64_t)a1);
    if (a2[4]) {
      float v6 = (const void *)a2[4];
    }
    else {
      float v6 = (const void *)a2[2];
    }
    memmove(v5, v6, *a1 * (uint64_t)a1[1]);
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    uint64_t v9 = kaldi::QuantizedMatrixBase<signed char>::MutableData((uint64_t)a1);
    float v10 = (unsigned char *)a2[4];
    if (!v10) {
      float v10 = (unsigned char *)a2[2];
    }
    int v11 = *a1;
    if (*a1 >= 1)
    {
      uint64_t v12 = 0;
      LODWORD(v13) = a1[1];
      do
      {
        if ((int)v13 >= 1)
        {
          uint64_t v14 = 0;
          float v15 = v10;
          do
          {
            *(unsigned char *)(v9 + v14++) = *v15;
            uint64_t v13 = a1[1];
            v15 += v8;
          }
          while (v14 < v13);
          int v11 = *a1;
        }
        ++v12;
        v9 += v7;
        ++v10;
      }
      while (v12 < v11);
    }
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::MutableData(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Attempt to write into immutable matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *(void *)(a1 + 16);
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::Data(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (!result) {
    return *(void *)(a1 + 16);
  }
  return result;
}

void kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(int *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 5);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *((void *)a1 + 5) = 0;
  }
  uint64_t v3 = *((void *)a1 + 4);
  if (v3 || *((void *)a1 + 2))
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    v18[2] = 0;
    v19[0] = v4;
    v19[1] = 0x3F80000000020008;
    v19[2] = 0;
    v18[0] = v5;
    v18[1] = 65568;
    if (!v3) {
      uint64_t v3 = *((void *)a1 + 2);
    }
    v16[0] = 1;
    long long v17 = 0u;
    v16[1] = 1;
    v6[0] = v4;
    v6[1] = v5;
    void v6[2] = v3;
    int v7 = 131080;
    int v8 = 1065353216;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    long long v11 = xmmword_1B257AB80;
    long long v12 = *(_OWORD *)algn_1B257AB90;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *((void *)a1 + 5) = MEMORY[0x1B3EA7200](v19, v18, v6, v16);
  }
}

double kaldi::QuantizedMatrixBase<signed char>::Sum(int *a1)
{
  uint64_t v1 = *a1;
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = 0;
  unsigned int v3 = a1[1];
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = a1[1];
  }
  double result = 0.0;
  do
  {
    if (v3)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *((void *)a1 + 4);
        if (!v8) {
          uint64_t v8 = *((void *)a1 + 2);
        }
        *(float *)&double result = *(float *)&result
                          + (float)((float)*(char *)(v8 + (int)(v3 * v2) + (v6 >> 32)) / *((float *)a1 + 3));
        ++v7;
        v6 += 0x100000000;
      }
      while (v4 != v7);
    }
    ++v2;
  }
  while (v2 != v1);
  return result;
}

float kaldi::QuantizedMatrixBase<signed char>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::Range@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  LODWORD(v8) = a3;
  LODWORD(v9) = a2;
  uint64_t result = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a6, a3, a5);
  *(void *)(a6 + 8) = *(void *)(a1 + 8);
  if (v8)
  {
    uint64_t v13 = 0;
    uint64_t v8 = (int)v8;
    uint64_t v9 = (int)v9;
    do
    {
      uint64_t v14 = kaldi::QuantizedMatrixBase<signed char>::MutableData(a6);
      uint64_t v15 = *(void *)(a1 + 32);
      if (!v15) {
        uint64_t v15 = *(void *)(a1 + 16);
      }
      uint64_t result = (uint64_t)memcpy((void *)(v14 + v13), (const void *)(v15 + v9 * *(int *)(a1 + 4) + a4), a5);
      ++v9;
      v13 += a5;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1B1DAA36C(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ComputeQuantizedData<signed char>(uint64_t a1, uint64_t a2, float a3)
{
  int v6 = kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t result = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6)
  {
    uint64_t v8 = 0;
    if ((unint64_t)(int)result <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = (int)result;
    }
    do
    {
      if (result)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        do
        {
          *(unsigned char *)(a1 + v11++) = llroundf(*(float *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v8 + (v10 >> 30)) * a3);
          v10 += 0x100000000;
        }
        while (v9 != v11);
      }
      ++v8;
      a1 += (int)result;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = kaldi::kaldi_memalign_free;
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1B1DAA47C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 24))();
  }
  _Unwind_Resume(exception_object);
}

int *kaldi::QuantizedMatrixBase<signed char>::QuantizedMatrixBase(int *a1, int *a2)
{
  int v3 = *a2;
  int v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a1 + 2) = 0;
  uint64_t v5 = *((void *)a2 + 4);
  *((void *)a1 + 3) = kaldi::kaldi_memalign_free;
  *((void *)a1 + 4) = v5;
  *((void *)a1 + 5) = 0;
  if (*((void *)a2 + 2))
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, v4 * v3, 0x100004077774924uLL)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = memptr;
    }
    memptr = v7;
    uint64_t v8 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v7;
    if (v8)
    {
      (*((void (**)(uint64_t))a1 + 3))(v8);
      uint64_t v7 = (void *)*((void *)a1 + 2);
    }
    memcpy(v7, *((const void **)a2 + 2), a1[1] * (uint64_t)*a1);
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter(a1);
  return a1;
}

void sub_1B1DAA574(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 24))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2) {
    BNNSFilterDestroy(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(a1 + 24))();
  }
  return a1;
}

uint64_t kaldi::QuantizedMatrixBase<short>::AddMatMat(uint64_t a1, uint64_t a2, void **a3, float a4)
{
  uint64_t v23 = 0;
  uint64_t v24 = (uint64_t (*)(void))kaldi::kaldi_memalign_free;
  int v26 = 0;
  uint64_t v25 = 0;
  uint64_t v27 = 0;
  kaldi::QuantizedMatrixBase<short>::PrepareMatMat((float *)a1, a2, (uint64_t)&v23);
  uint64_t v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  uint64_t v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  float v9 = 1.0 / (float)(*(float *)(a1 + 12) * *(float *)&v25);
  if (a4 == 0.0)
  {
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v11 = v23;
    size_t v12 = *(int *)(a1 + 4);
    uint64_t v13 = *a3;
    int v14 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a3);
    BNNSFilterApplyBatch(v10, (int)v7, v11, v12, v13, v14);
    kaldi::MatrixBase<float>::Scale((uint64_t)a3, v9);
  }
  else
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v22, v7, v8, 0, 0);
    uint64_t v15 = *(void **)(a1 + 40);
    int v16 = kaldi::MatrixBase<float>::NumRows((uint64_t)v22);
    long long v17 = v23;
    size_t v18 = *(int *)(a1 + 4);
    int v19 = (void *)v22[0];
    int v20 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v22);
    BNNSFilterApplyBatch(v15, v16, v17, v18, v19, v20);
    kaldi::MatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)v22, 111, v9, a4);
    kaldi::Matrix<float>::~Matrix((uint64_t)v22);
  }
  uint64_t result = (uint64_t)v23;
  uint64_t v23 = 0;
  if (result) {
    return v24();
  }
  return result;
}

void sub_1B1DAA754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void))
{
  if (a14) {
    a15();
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::PrepareMatMat(float *a1, uint64_t a2, uint64_t a3)
{
  float v6 = kaldi::MatrixBase<float>::AbsMax(a2);
  if (v6 == 0.0) {
    float v7 = 1.0;
  }
  else {
    float v7 = v6;
  }
  int v8 = kaldi::MatrixBase<float>::NumRows(a2);
  int v9 = kaldi::MatrixBase<float>::NumCols(a2);
  float v10 = a1[2];
  float v11 = 2147500000.0 / (float)(v10 * (float)v9);
  float v12 = v10 / v7;
  if (v12 >= v11) {
    float v13 = v11;
  }
  else {
    float v13 = v12;
  }
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * v9 * v8, 0x1000040BDFB0063uLL)) {
    int v14 = 0;
  }
  else {
    int v14 = memptr;
  }
  memptr = v14;
  uint64_t v15 = *(void **)a3;
  *(void *)a3 = v14;
  if (v15)
  {
    (*(void (**)(void *))(a3 + 8))(v15);
    int v14 = *(void **)a3;
  }
  uint64_t result = kaldi::ComputeQuantizedData<short>((uint64_t)v14, a2, v13);
  *(float *)(a3 + 16) = v13;
  float v17 = *a1;
  uint64_t v18 = *((void *)a1 + 4);
  if (!v18) {
    uint64_t v18 = *((void *)a1 + 2);
  }
  int v19 = *((_DWORD *)a1 + 1);
  if (*(_DWORD *)(a3 + 20) != LODWORD(v17) || *(_DWORD *)(a3 + 24) != v19 || *(void *)(a3 + 32) != v18)
  {
    *(float *)(a3 + 20) = v17;
    *(_DWORD *)(a3 + ++*(_DWORD *)(result + 24) = v19;
    *(void *)(a3 + 32) = v18;
  }
  return result;
}

uint64_t kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(unsigned int *a1, char **a2)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v5, *a1, a1[1], 0, 0);
  kaldi::MatrixBase<float>::CopyRowsFromVec(v5, a2);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)a1, (uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v5);
}

void sub_1B1DAA92C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrixBase<short>::CopyFromMat(int *a1, void *a2, int a3)
{
  *((void *)a1 + 1) = a2[1];
  if (a3 == 111)
  {
    uint64_t v5 = (void *)kaldi::QuantizedMatrixBase<short>::MutableData((uint64_t)a1);
    if (a2[4]) {
      float v6 = (const void *)a2[4];
    }
    else {
      float v6 = (const void *)a2[2];
    }
    memmove(v5, v6, 2 * *a1 * a1[1]);
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    uint64_t v9 = kaldi::QuantizedMatrixBase<short>::MutableData((uint64_t)a1);
    float v10 = (_WORD *)a2[4];
    if (!v10) {
      float v10 = (_WORD *)a2[2];
    }
    uint64_t v11 = *a1;
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = a1[1];
      do
      {
        uint64_t v14 = v13;
        uint64_t v15 = v10;
        int v16 = (_WORD *)v9;
        if ((int)v13 >= 1)
        {
          do
          {
            *v16++ = *v15;
            v15 += v8;
            --v14;
          }
          while (v14);
        }
        ++v12;
        v9 += 2 * v7;
        ++v10;
      }
      while (v12 != v11);
    }
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter(a1);
}

uint64_t kaldi::QuantizedMatrixBase<short>::MutableData(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Attempt to write into immutable matrix");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *(void *)(a1 + 16);
}

void kaldi::QuantizedMatrixBase<short>::UpdateFilter(int *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 5);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *((void *)a1 + 5) = 0;
  }
  uint64_t v3 = *((void *)a1 + 4);
  if (v3 || *((void *)a1 + 2))
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    v18[2] = 0;
    v19[0] = v4;
    v19[1] = 0x3F80000000020010;
    v19[2] = 0;
    v18[0] = v5;
    v18[1] = 65568;
    if (!v3) {
      uint64_t v3 = *((void *)a1 + 2);
    }
    v16[0] = 1;
    long long v17 = 0u;
    v16[1] = 1;
    v6[0] = v4;
    v6[1] = v5;
    void v6[2] = v3;
    int v7 = 131088;
    int v8 = 1065353216;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    long long v11 = xmmword_1B257AB80;
    long long v12 = *(_OWORD *)algn_1B257AB90;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *((void *)a1 + 5) = MEMORY[0x1B3EA7200](v19, v18, v6, v16);
  }
}

double kaldi::QuantizedMatrixBase<short>::Sum(int *a1)
{
  uint64_t v1 = *a1;
  if (!v1) {
    return 0.0;
  }
  uint64_t v2 = 0;
  unsigned int v3 = a1[1];
  if (v3 <= 1) {
    int v4 = 1;
  }
  else {
    int v4 = a1[1];
  }
  double result = 0.0;
  do
  {
    if (v3)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = *((void *)a1 + 4);
        if (!v8) {
          uint64_t v8 = *((void *)a1 + 2);
        }
        *(float *)&double result = *(float *)&result
                          + (float)((float)*(__int16 *)(v8 + 2 * (int)(v3 * v2) + (v6 >> 31)) / *((float *)a1 + 3));
        ++v7;
        v6 += 0x100000000;
      }
      while (v4 != v7);
    }
    ++v2;
  }
  while (v2 != v1);
  return result;
}

float kaldi::QuantizedMatrixBase<short>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + 2 * *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(a1 + 12));
}

uint64_t kaldi::QuantizedMatrixBase<short>::Range@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  LODWORD(v8) = a3;
  LODWORD(v9) = a2;
  uint64_t result = kaldi::QuantizedMatrix<short>::QuantizedMatrix(a6, a3, a5);
  *(void *)(a6 + 8) = *(void *)(a1 + 8);
  if (v8)
  {
    uint64_t v13 = 0;
    uint64_t v8 = (int)v8;
    uint64_t v9 = (int)v9;
    size_t v14 = 2 * a5;
    do
    {
      uint64_t v15 = kaldi::QuantizedMatrixBase<short>::MutableData(a6);
      uint64_t v16 = *(void *)(a1 + 32);
      if (!v16) {
        uint64_t v16 = *(void *)(a1 + 16);
      }
      uint64_t result = (uint64_t)memcpy((void *)(v15 + v13), (const void *)(v16 + 2 * v9 * *(int *)(a1 + 4) + 2 * a4), v14);
      ++v9;
      v13 += v14;
      --v8;
    }
    while (v8);
  }
  return result;
}

void sub_1B1DAACD4(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::ComputeQuantizedData<short>(uint64_t a1, uint64_t a2, float a3)
{
  int v6 = kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t result = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (int)result;
    uint64_t v10 = *(void *)a2;
    int v11 = *(_DWORD *)(a2 + 16);
    if ((unint64_t)(int)result <= 1) {
      uint64_t v9 = 1;
    }
    do
    {
      if (result)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        do
        {
          *(_WORD *)(a1 + 2 * v13++) = llroundf(*(float *)(v10 + 4 * v11 * (int)v8 + (v12 >> 30)) * a3);
          v12 += 0x100000000;
        }
        while (v9 != v13);
      }
      ++v8;
      a1 += 2 * (int)result;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = kaldi::kaldi_memalign_free;
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1B1DAADE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 24))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrixBase<short>::QuantizedMatrixBase(uint64_t a1, int *a2)
{
  int v3 = *a2;
  int v4 = a2[1];
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = v4;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *((void *)a2 + 4);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = kaldi::kaldi_memalign_free;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = 0;
  if (*((void *)a2 + 2))
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, 2 * v4 * v3, 0x1000040BDFB0063uLL)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = memptr;
    }
    memptr = v7;
    uint64_t v8 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v7;
    if (v8)
    {
      (*(void (**)(uint64_t))(a1 + 24))(v8);
      uint64_t v7 = *(void **)(a1 + 16);
    }
    memcpy(v7, *((const void **)a2 + 2), 2 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  return a1;
}

void sub_1B1DAAEE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    (*(void (**)(void))(v1 + 24))();
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, int *a2)
{
  int v4 = (int *)kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, a2, 111);
  return a1;
}

void sub_1B1DAAF4C(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(uint64_t a1, uint64_t a2)
{
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  int v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, v4, v5);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(a1, a2);
  return a1;
}

{
  uint64_t v4;

  int v4 = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16));
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(v4, a2 + 8);
  return a1;
}

void sub_1B1DAAFC0(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrix<signed char>::Read(float *a1, void *a2, int a3, uint64_t a4)
{
  kaldi::ReadBasicType<float>(a2, a3, a1 + 3);
  a1[2] = 127.0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  kaldi::ReadIntegerVector<signed char>(a2, a3, (unint64_t *)&v12, a4, (void *)a1 + 4, 0, 0);
  if (*((void *)a1 + 4))
  {
    uint64_t v8 = *((void *)a1 + 2);
    *((void *)a1 + 2) = 0;
    if (v8) {
      (*((void (**)(void))a1 + 3))();
    }
  }
  else
  {
    if (v13 - v12 != *((int *)a1 + 1) * (uint64_t)*(int *)a1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)memptr);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(memptr, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr);
    }
    memptr[0] = 0;
    if (malloc_type_posix_memalign(memptr, 0x20uLL, v13 - v12, 0x100004077774924uLL)) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = memptr[0];
    }
    memptr[0] = v9;
    uint64_t v10 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v9;
    if (v10)
    {
      (*((void (**)(uint64_t))a1 + 3))(v10);
      uint64_t v9 = (void *)*((void *)a1 + 2);
    }
    memcpy(v9, v12, v13 - v12);
  }
  kaldi::QuantizedMatrixBase<signed char>::UpdateFilter((int *)a1);
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
}

void sub_1B1DAB140(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<signed char>(void *a1, int a2, unint64_t *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a5) {
    *a5 = 0;
  }
  if (a2)
  {
    if (std::istream::peek() != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      uint64_t v33 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", saw instead ", 14);
      uint64_t v34 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
    }
    std::istream::get();
    signed int v40 = 0;
    std::istream::read();
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) == 0)
    {
      int v13 = v40;
      unsigned int v14 = v40;
      if (a7) {
        *a7 = v40;
      }
      if (a4 && (a5 ? (BOOL v15 = v13 < 0) : (BOOL v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *a5 = a4 + v42;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v42;
        }
        std::istream::seekg();
        a3[1] = *a3;
        std::vector<signed char>::shrink_to_fit(a3);
      }
      else
      {
        unint64_t v17 = a3[1] - *a3;
        if (v14 <= v17)
        {
          if (v14 < v17) {
            a3[1] = *a3 + v14;
          }
        }
        else
        {
          std::vector<signed char>::__append((std::vector<char> *)a3, v14 - v17);
          unsigned int v14 = v40;
        }
        if ((int)v14 >= 1) {
          std::istream::read();
        }
      }
      goto LABEL_58;
    }
LABEL_61:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
  }
  std::string __p = 0;
  unint64_t v38 = 0;
  unint64_t v39 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    uint64_t v35 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  uint64_t v36 = a3;
  while (1)
  {
    int v18 = std::istream::peek();
    if (v18 == 93) {
      break;
    }
    LOWORD(v41[0]) = 0;
    int v19 = (void *)MEMORY[0x1B3EA7DF0](a1, v41);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v19);
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
      goto LABEL_45;
    }
    char v20 = v41[0];
    uint64_t v21 = v38;
    if ((unint64_t)v38 >= v39)
    {
      uint64_t v23 = (char *)__p;
      uint64_t v24 = v38 - (unsigned char *)__p;
      int64_t v25 = v38 - (unsigned char *)__p + 1;
      if (v25 < 0) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = v39 - (void)__p;
      if (2 * (v39 - (unint64_t)__p) > v25) {
        int64_t v25 = 2 * v26;
      }
      if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v27 = v25;
      }
      if (v27) {
        long long v28 = (char *)operator new(v27);
      }
      else {
        long long v28 = 0;
      }
      BOOL v29 = &v28[v24];
      uint64_t v30 = &v28[v24];
      *uint64_t v30 = v20;
      long long v22 = v30 + 1;
      if (v21 != v23)
      {
        uint64_t v31 = &v21[~(unint64_t)v23];
        do
        {
          char v32 = *--v21;
          (v31--)[(void)v28] = v32;
        }
        while (v21 != v23);
        uint64_t v21 = (char *)__p;
        BOOL v29 = v28;
      }
      std::string __p = v29;
      unint64_t v38 = v22;
      unint64_t v39 = (unint64_t)&v28[v27];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      char *v38 = v41[0];
      long long v22 = v21 + 1;
    }
    unint64_t v38 = v22;
  }
  std::istream::get();
  if (&__p != (void **)v36) {
    std::vector<signed char>::__assign_with_size[abi:ne180100]<signed char *,signed char *>(v36, (char *)__p, v38, v38 - (unsigned char *)__p);
  }
  if (a7) {
    *a7 = v36[1] - *v36;
  }
LABEL_45:
  if (__p)
  {
    unint64_t v38 = (char *)__p;
    operator delete(__p);
  }
  if (v18 != 93) {
    goto LABEL_61;
  }
LABEL_58:
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
    goto LABEL_61;
  }
}

void sub_1B1DAB650(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1DAB68CLL);
}

void sub_1B1DAB668()
{
}

void sub_1B1DAB678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<signed char>::Write(int *a1, void *a2, int a3, int a4)
{
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  int v8 = *a1;
  int v9 = a1[1];
  uint64_t v10 = *((void *)a1 + 4);
  if (!v10) {
    uint64_t v10 = *((void *)a1 + 2);
  }
  return kaldi::WriteIntegerByteArray<signed char>(a2, a3, a4, v9 * (uint64_t)v8, v10);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, int *a2)
{
  int v4 = (int *)kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *a2, a2[1]);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, a2, 111);
  return a1;
}

void sub_1B1DAB748(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::QuantizedMatrix<short>::QuantizedMatrix(uint64_t a1, uint64_t a2)
{
  int v4 = kaldi::MatrixBase<float>::NumRows(a2);
  int v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, v4, v5);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(a1, a2);
  return a1;
}

{
  uint64_t v4;

  int v4 = kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16));
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(v4, a2 + 8);
  return a1;
}

void sub_1B1DAB7BC(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::QuantizedMatrix<short>::Read(float *a1, void *a2, int a3, uint64_t a4)
{
  kaldi::ReadBasicType<float>(a2, a3, a1 + 3);
  kaldi::ReadBasicType<float>(a2, a3, a1 + 2);
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  kaldi::ReadIntegerVector<short>(a2, a3, (uint64_t)&v12, a4, (void *)a1 + 4, 0, 0);
  if (*((void *)a1 + 4))
  {
    uint64_t v8 = *((void *)a1 + 2);
    *((void *)a1 + 2) = 0;
    if (v8) {
      (*((void (**)(void))a1 + 3))();
    }
  }
  else
  {
    if (*((int *)a1 + 1) * (uint64_t)*(int *)a1 != (v13 - v12) >> 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)memptr);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(memptr, (uint64_t)"Quantized matrix improperly serialized", 38);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)memptr);
    }
    memptr[0] = 0;
    if (malloc_type_posix_memalign(memptr, 0x20uLL, v13 - v12, 0x1000040BDFB0063uLL)) {
      int v9 = 0;
    }
    else {
      int v9 = memptr[0];
    }
    memptr[0] = v9;
    uint64_t v10 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v9;
    if (v10)
    {
      (*((void (**)(uint64_t))a1 + 3))(v10);
      int v9 = (void *)*((void *)a1 + 2);
    }
    memcpy(v9, v12, v13 - v12);
  }
  kaldi::QuantizedMatrixBase<short>::UpdateFilter((int *)a1);
  if (v12)
  {
    int v13 = v12;
    operator delete(v12);
  }
}

void sub_1B1DAB944(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::ReadIntegerVector<short>(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a5) {
    *a5 = 0;
  }
  if (a2)
  {
    if (std::istream::peek() != 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see type of size ", 48);
      BOOL v29 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", saw instead ", 14);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", at file position ", 19);
      std::istream::tellg();
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
    }
    std::istream::get();
    int v35 = 0;
    std::istream::read();
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) == 0)
    {
      int v13 = v35;
      unsigned int v14 = v35;
      if (a7) {
        *a7 = v35;
      }
      if (a4 && (a5 ? (BOOL v15 = v13 < 0) : (BOOL v15 = 0), !v15 ? (v16 = 0) : (v16 = 1), a6 || v16))
      {
        if (v16)
        {
          std::istream::tellg();
          *a5 = a4 + v37;
        }
        else if (a6)
        {
          std::istream::tellg();
          *a6 = a4 + v37;
        }
        std::istream::seekg();
        *(void *)(a3 + 8) = *(void *)a3;
        std::vector<short>::shrink_to_fit(a3);
      }
      else
      {
        std::vector<unsigned short>::resize(a3, v14);
        if (v35 >= 1) {
          std::istream::read();
        }
      }
      goto LABEL_54;
    }
LABEL_57:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: read failure at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::string __p = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 91)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"ReadIntegerVector: expected to see [, saw ", 42);
    std::istream::peek();
    uint64_t v31 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  std::istream::get();
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  while (1)
  {
    int v17 = std::istream::peek();
    if (v17 == 93) {
      break;
    }
    LOWORD(v36[0]) = 0;
    int v18 = (void *)MEMORY[0x1B3EA7DF0](a1, v36);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(v18);
    if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
      goto LABEL_45;
    }
    int v19 = v33;
    if ((unint64_t)v33 >= v34)
    {
      uint64_t v21 = __p;
      uint64_t v22 = (char *)v33 - (unsigned char *)__p;
      if ((char *)v33 - (unsigned char *)__p <= -3) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v22 >> 1;
      if (v34 - (unint64_t)__p <= (v22 >> 1) + 1) {
        uint64_t v24 = v23 + 1;
      }
      else {
        uint64_t v24 = v34 - (void)__p;
      }
      if (v34 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v25 = v24;
      }
      if (v25)
      {
        unint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v34, v25);
        uint64_t v21 = __p;
        int v19 = v33;
      }
      else
      {
        unint64_t v26 = 0;
      }
      size_t v27 = &v26[2 * v23];
      *(_WORD *)size_t v27 = v36[0];
      char v20 = v27 + 2;
      while (v19 != v21)
      {
        __int16 v28 = *--v19;
        *((_WORD *)v27 - 1) = v28;
        v27 -= 2;
      }
      std::string __p = v27;
      uint64_t v33 = v20;
      unint64_t v34 = (unint64_t)&v26[2 * v25];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *uint64_t v33 = v36[0];
      char v20 = v19 + 1;
    }
    uint64_t v33 = v20;
  }
  std::istream::get();
  if (&__p != (void **)a3) {
    std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>((char *)a3, (char *)__p, (uint64_t)v33, ((char *)v33 - (unsigned char *)__p) >> 1);
  }
  if (a7) {
    *a7 = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1;
  }
LABEL_45:
  if (__p)
  {
    uint64_t v33 = __p;
    operator delete(__p);
  }
  if (v17 != 93) {
    goto LABEL_57;
  }
LABEL_54:
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0) {
    goto LABEL_57;
  }
}

void sub_1B1DABE34(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1DABE6CLL);
}

void sub_1B1DABE48()
{
}

void sub_1B1DABE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::QuantizedMatrix<short>::Write(int *a1, void *a2, int a3, int a4)
{
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  int v8 = *a1;
  int v9 = a1[1];
  uint64_t v10 = *((void *)a1 + 4);
  if (!v10) {
    uint64_t v10 = *((void *)a1 + 2);
  }
  return kaldi::WriteIntegerByteArray<short>(a2, a3, a4, v9 * (uint64_t)v8, v10);
}

double kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  return result;
}

void kaldi::VectorwiseQuantizedMatrix<signed char>::CopyFromMat()
{
}

void sub_1B1DAC048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t result, void *a2)
{
  *(void *)double result = *a2;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v2 = a2[2];
  if (!v2) {
    operator new[]();
  }
  *(void *)(result + 16) = v2;
  uint64_t v3 = a2[4];
  if (!v3) {
    operator new[]();
  }
  *(void *)(result + 32) = v3;
  return result;
}

void sub_1B1DAC170(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)(v1 + ++*(_DWORD *)(result + 24) = 0;
  if (v4) {
    MEMORY[0x1B3EA8670](v4, 0x1000C4077774924);
  }
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::Read(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v8 = (int32x2_t *)kaldi::Matrix<float>::Matrix((uint64_t)v17, 1, *a1, 0, 0);
  kaldi::Matrix<float>::Read(v8, a2, a3, 0, a4);
  if (!v18)
  {
    *((void *)a1 + 2) = 0;
    operator new[]();
  }
  uint64_t v9 = v17[0];
  uint64_t v10 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = v9;
  if (v10) {
    MEMORY[0x1B3EA8670](v10, 0x1000C4052888210);
  }
  unsigned int v14 = 0;
  BOOL v15 = 0;
  uint64_t v16 = 0;
  kaldi::ReadIntegerVector<signed char>(a2, a3, (unint64_t *)&v14, a4, (void *)a1 + 4, 0, 0);
  if (!*((void *)a1 + 4))
  {
    if (v15 - v14 == (int)a1[1] * (uint64_t)(int)*a1) {
      operator new[]();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Quantized matrix improperly serialized", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  uint64_t v11 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v11) {
    MEMORY[0x1B3EA8670](v11, 0x1000C4077774924);
  }
  if (v14)
  {
    BOOL v15 = v14;
    operator delete(v14);
  }
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_1B1DAC3B0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  kaldi::Matrix<float>::~Matrix(v1 - 88);
  _Unwind_Resume(a1);
}

void kaldi::VectorwiseQuantizedMatrix<signed char>::Write(int *a1, void *a2, int a3)
{
  uint64_t v6 = *((void *)a1 + 2);
  if (!v6) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v8, v6, 1, *a1, *a1);
  kaldi::MatrixBase<float>::Write(v8, a2, a3, a3);
  uint64_t v7 = *((void *)a1 + 4);
  if (!v7) {
    uint64_t v7 = *((void *)a1 + 3);
  }
  kaldi::WriteIntegerByteArray<signed char>(a2, a3, a3, a1[1] * (uint64_t)*a1, v7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v8);
}

void sub_1B1DAC478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::VectorwiseQuantizedMatrix<signed char>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + *(int *)(a1 + 4) * (uint64_t)a2, *(_DWORD *)(a1 + 4), *(float *)(v6 + 4 * a2));
}

uint64_t kaldi::VectorwiseQuantizedMatrix<signed char>::AddMatMat(uint64_t a1, uint64_t a2, int *a3, float a4)
{
  int v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  kaldi::Matrix<float>::Matrix(v20, a3, 112, v9);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      uint64_t v11 = *(void *)v20;
      int v12 = v21;
      int v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)v20);
      int v18 = 0;
      uint64_t v19 = 0;
      uint64_t v16 = v11 + 4 * v12 * (int)i;
      int v17 = v13;
      kaldi::VectorwiseQuantizedMatrix<signed char>::Row(a1, i, (uint64_t)v15);
      kaldi::QuantizedVectorBase<signed char>::AddMatVec((uint64_t)v15, a2, (uint64_t)&v16, a4);
    }
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>(a3, v20, 112);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v20);
}

void sub_1B1DAC5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::VectorwiseQuantizedMatrix(uint64_t result, void *a2)
{
  *(void *)double result = *a2;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v2 = a2[2];
  if (!v2) {
    operator new[]();
  }
  *(void *)(result + 16) = v2;
  uint64_t v3 = a2[4];
  if (!v3) {
    operator new[]();
  }
  *(void *)(result + 32) = v3;
  return result;
}

void sub_1B1DAC6F8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)(v1 + ++*(_DWORD *)(result + 24) = 0;
  if (v4) {
    MEMORY[0x1B3EA8670](v4, 0x1000C40BDFB0063);
  }
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::Read(unsigned int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v8 = (int32x2_t *)kaldi::Matrix<float>::Matrix((uint64_t)v17, 1, *a1, 0, 0);
  kaldi::Matrix<float>::Read(v8, a2, a3, 0, a4);
  if (!v18)
  {
    *((void *)a1 + 2) = 0;
    operator new[]();
  }
  uint64_t v9 = v17[0];
  uint64_t v10 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = v9;
  if (v10) {
    MEMORY[0x1B3EA8670](v10, 0x1000C4052888210);
  }
  unsigned int v14 = 0;
  BOOL v15 = 0;
  uint64_t v16 = 0;
  kaldi::ReadIntegerVector<short>(a2, a3, (uint64_t)&v14, a4, (void *)a1 + 4, 0, 0);
  if (!*((void *)a1 + 4))
  {
    if ((int)a1[1] * (uint64_t)(int)*a1 == (v15 - v14) >> 1) {
      operator new[]();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Quantized matrix improperly serialized", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  uint64_t v11 = *((void *)a1 + 3);
  *((void *)a1 + 3) = 0;
  if (v11) {
    MEMORY[0x1B3EA8670](v11, 0x1000C40BDFB0063);
  }
  if (v14)
  {
    BOOL v15 = v14;
    operator delete(v14);
  }
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_1B1DAC940(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(void *)(v1 - 104) = v3;
    operator delete(v3);
  }
  kaldi::Matrix<float>::~Matrix(v1 - 88);
  _Unwind_Resume(a1);
}

void kaldi::VectorwiseQuantizedMatrix<short>::Write(int *a1, void *a2, int a3)
{
  uint64_t v6 = *((void *)a1 + 2);
  if (!v6) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v8, v6, 1, *a1, *a1);
  kaldi::MatrixBase<float>::Write(v8, a2, a3, a3);
  uint64_t v7 = *((void *)a1 + 4);
  if (!v7) {
    uint64_t v7 = *((void *)a1 + 3);
  }
  kaldi::WriteIntegerByteArray<short>(a2, a3, a3, a1[1] * (uint64_t)*a1, v7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v8);
}

void sub_1B1DACA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float kaldi::VectorwiseQuantizedMatrix<short>::Row@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  return kaldi::QuantizedSubVector<signed char>::QuantizedSubVector(a3, v5 + 2 * *(_DWORD *)(a1 + 4) * a2, *(_DWORD *)(a1 + 4), *(float *)(v6 + 4 * a2));
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::AddMatMat(uint64_t a1, uint64_t a2, int *a3, float a4)
{
  int v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  kaldi::Matrix<float>::Matrix(v20, a3, 112, v9);
  if (v8)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      uint64_t v11 = *(void *)v20;
      int v12 = v21;
      int v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)v20);
      int v18 = 0;
      uint64_t v19 = 0;
      uint64_t v16 = v11 + 4 * v12 * (int)i;
      int v17 = v13;
      kaldi::VectorwiseQuantizedMatrix<short>::Row(a1, i, (uint64_t)v15);
      kaldi::QuantizedVectorBase<short>::AddMatVec((uint64_t)v15, a2, (uint64_t)&v16, a4);
    }
  }
  kaldi::MatrixBase<float>::CopyFromMat<float>(a3, v20, 112);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v20);
}

void sub_1B1DACB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<signed char>::shrink_to_fit(unint64_t *a1)
{
  uint64_t v1 = (char *)a1[1];
  unint64_t v2 = *a1;
  uint64_t v3 = &v1[-*a1];
  if (a1[2] - *a1 > (unint64_t)v3)
  {
    if (v1 == (char *)v2)
    {
      unint64_t v5 = (unint64_t)&v1[-*a1];
    }
    else
    {
      unint64_t v5 = (unint64_t)operator new((size_t)&v1[-*a1]);
      v3 += v5;
      uint64_t v6 = &v1[~v2];
      do
      {
        char v7 = *--v1;
        (v6--)[v5] = v7;
      }
      while (v1 != (char *)v2);
      unint64_t v2 = *a1;
    }
    *a1 = v5;
    a1[1] = (unint64_t)v3;
    a1[2] = (unint64_t)v3;
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void std::vector<signed char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<std::string>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<char>::pointer begin = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = (char *)operator new(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    int v12 = &v11[v7];
    int v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      uint64_t v11 = v12;
    }
    else
    {
      unsigned int v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      std::vector<std::string>::pointer end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

void *std::vector<signed char>::__assign_with_size[abi:ne180100]<signed char *,signed char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  int64_t v7 = result;
  unint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *int64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    double result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }
  int v12 = (unsigned char *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      double result = memmove(v9, __src, v16);
    }
    char v15 = &v9[v16];
    goto LABEL_20;
  }
  unsigned int v14 = &__src[v13];
  if (v12 != v9)
  {
    double result = memmove((void *)*result, __src, v13);
    unint64_t v9 = (char *)v7[1];
  }
  if (a3 != v14) {
    double result = memmove(v9, v14, a3 - v14);
  }
  char v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

uint64_t kaldi::WriteIntegerByteArray<signed char>(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    char v15 = 1;
    std::ostream::write();
    if (a3) {
      int v9 = -(int)a4;
    }
    else {
      int v9 = a4;
    }
    int v14 = v9;
    uint64_t result = std::ostream::write();
    if (a4)
    {
      if (a3 && !fst::AlignOutput(a1))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
      }
      uint64_t result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      ++a5;
      size_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    }
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B1DACFF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<short>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  unint64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 1;
  if (v6 >= (v3 - (uint64_t)v4) >> 1) {
    return;
  }
  if (v5 == v4)
  {
    size_t v11 = 0;
    uint64_t v9 = 2 * v6;
    goto LABEL_8;
  }
  int64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v2, v6);
  uint64_t v4 = *(char **)a1;
  unint64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[2 * v6];
  size_t v11 = &v7[2 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    __int16 v13 = *((_WORD *)v8 - 1);
    v8 -= 2;
    *(_WORD *)(v12 - 2) = v13;
    v12 -= 2;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

char *std::vector<short>::__assign_with_size[abi:ne180100]<short *,short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *int64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = std::vector<short>::__vallocate[abi:ne180100](v7, v11);
    __int16 v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  size_t v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    uint64_t v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t kaldi::WriteIntegerByteArray<short>(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    char v15 = 2;
    std::ostream::write();
    if (a3) {
      int v9 = -(int)a4;
    }
    else {
      int v9 = a4;
    }
    int v14 = v9;
    uint64_t result = std::ostream::write();
    if (a4)
    {
      if (a3 && !fst::AlignOutput(a1))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Could not align output");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
      }
      uint64_t result = std::ostream::write();
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
    for (; a4; --a4)
    {
      a5 += 2;
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    }
    uint64_t result = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]\n", 2);
  }
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteIntegerType.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1B1DAD35C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *kaldi::CuMatrixBase<float>::CopyFromMat<float>(int *result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(a2 + 20)) {
    return kaldi::MatrixBase<float>::CopyFromMat<float>(result + 2, (int *)(a2 + 8), a3);
  }
  return result;
}

uint64_t kaldi::CuMatrixBase<float>::CopyFromMat<double>(uint64_t a1, int *a2, int a3)
{
  kaldi::CuMatrix<double>::CuMatrix<double>(&v6, a2, 111, 0);
  if (v7[3]) {
    kaldi::MatrixBase<float>::CopyFromMat<double>(a1 + 8, (uint64_t)v7, a3);
  }
  return kaldi::CuMatrix<double>::~CuMatrix((uint64_t)&v6);
}

void sub_1B1DAD3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int32x2_t *kaldi::CuMatrix<float>::CuMatrix<float>(int32x2_t *a1, int *a2, int a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = (int32x2_t)a4;
  *a1 = (int32x2_t)&unk_1F0A51768;
  a1[5].i8[0] = 0;
  if (a3 == 111)
  {
    uint64_t v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    uint64_t v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  }
  else
  {
    uint64_t v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    uint64_t v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  }
  kaldi::CuMatrix<float>::Resize(a1, v7, v8, 1, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[1], a2, a3);
  return a1;
}

void kaldi::CuMatrix<float>::Resize(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!(a3 * a2))
  {
    a1[2] = 0;
    return;
  }
  int v7 = a4;
  if (a5) {
    int v10 = a1[3].i32[0] != a3;
  }
  else {
    int v10 = 0;
  }
  if (a4 == 3)
  {
    if (a1[2].i32[1] == a2 && ((a1[2].i32[0] == a3) & ~v10) != 0) {
      return;
    }
    int v7 = 0;
  }
  int v11 = a1[3].i32[0];
  if (v11 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = a1[3].i32[1] / v11;
  }
  if (v11 < (int)a3) {
    goto LABEL_17;
  }
  if (v12 < (int)a2) {
    LOBYTE(v10) = 1;
  }
  if (v10)
  {
LABEL_17:
    if (v7 == 2)
    {
      int32x2_t v21 = vmin_s32(a1[2], (int32x2_t)__PAIR64__(a2, a3));
      kaldi::Matrix<float>::Matrix((uint64_t)&v24, a2, a3, 0, a5);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v23, (uint64_t)&v24, 0, v21.i32[1], 0, v21.i32[0]);
      int32x2_t v13 = a1[1];
      int32x2_t v14 = a1[4];
      int32x2_t v15 = a1[3];
      v22[1] = v21;
      v22[2] = v15;
      v22[3] = v14;
      v22[0] = v13;
      kaldi::MatrixBase<float>::CopyFromMat<float>(v23, (int *)v22, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
    }
    else
    {
      size_t v17 = a1 + 1;
      size_t v16 = (void *)a1[1];
      if (v16)
      {
        if (!a1[5].i8[0]) {
          free(v16);
        }
      }
      *size_t v17 = 0;
      a1[2] = 0;
      a1[3] = 0;
      kaldi::Matrix<float>::Matrix((uint64_t)&v24, a2, a3, v7, a5);
    }
    int32x2_t v18 = v24;
    int32x2_t v24 = a1[1];
    a1[1] = v18;
    long long v19 = v25;
    long long v25 = *(_OWORD *)a1[2].i8;
    *(_OWORD *)a1[2].i8 = v19;
    v18.i8[0] = v26;
    __int8 v26 = a1[5].i8[0];
    a1[5].i8[0] = v18.i8[0];
    kaldi::Matrix<float>::~Matrix((uint64_t)&v24);
  }
  else
  {
    a1[2].i32[0] = a3;
    a1[2].i32[1] = a2;
    if (!v7)
    {
      uint64_t v20 = (uint64_t)&a1[1];
      kaldi::MatrixBase<float>::SetZero(v20);
    }
  }
}

void sub_1B1DAD6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

int *kaldi::CuMatrixBase<float>::CopyFromMat(uint64_t a1, int *a2, int a3)
{
  return kaldi::MatrixBase<float>::CopyFromMat<float>((int *)(a1 + 8), a2, a3);
}

void kaldi::CuMatrix<double>::Resize(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!(a3 * a2))
  {
    a1[2] = 0;
    return;
  }
  int v7 = a4;
  if (a5) {
    int v10 = a1[3].i32[0] != a3;
  }
  else {
    int v10 = 0;
  }
  if (a4 == 3)
  {
    if (a1[2].i32[1] == a2 && ((a1[2].i32[0] == a3) & ~v10) != 0) {
      return;
    }
    int v7 = 0;
  }
  int v11 = a1[3].i32[0];
  if (v11 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = a1[3].i32[1] / v11;
  }
  if (v11 < (int)a3) {
    goto LABEL_17;
  }
  if (v12 < (int)a2) {
    LOBYTE(v10) = 1;
  }
  if (v10)
  {
LABEL_17:
    if (v7 == 2)
    {
      int32x2_t v21 = vmin_s32(a1[2], (int32x2_t)__PAIR64__(a2, a3));
      kaldi::Matrix<double>::Matrix((uint64_t)&v24, a2, a3, 0, a5);
      kaldi::SubMatrix<double>::SubMatrix((uint64_t)v23, (uint64_t)&v24, 0, v21.i32[1], 0, v21.i32[0]);
      int32x2_t v13 = a1[1];
      int32x2_t v14 = a1[4];
      int32x2_t v15 = a1[3];
      v22[1] = v21;
      v22[2] = v15;
      v22[3] = v14;
      v22[0] = v13;
      kaldi::MatrixBase<double>::CopyFromMat<double>(v23, (int *)v22, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
    }
    else
    {
      size_t v17 = a1 + 1;
      size_t v16 = (void *)a1[1];
      if (v16)
      {
        if (!a1[5].i8[0]) {
          free(v16);
        }
      }
      *size_t v17 = 0;
      a1[2] = 0;
      a1[3] = 0;
      kaldi::Matrix<double>::Matrix((uint64_t)&v24, a2, a3, v7, a5);
    }
    int32x2_t v18 = v24;
    int32x2_t v24 = a1[1];
    a1[1] = v18;
    long long v19 = v25;
    long long v25 = *(_OWORD *)a1[2].i8;
    *(_OWORD *)a1[2].i8 = v19;
    v18.i8[0] = v26;
    __int8 v26 = a1[5].i8[0];
    a1[5].i8[0] = v18.i8[0];
    kaldi::Matrix<float>::~Matrix((uint64_t)&v24);
  }
  else
  {
    a1[2].i32[0] = a3;
    a1[2].i32[1] = a2;
    if (!v7)
    {
      uint64_t v20 = (uint64_t)&a1[1];
      kaldi::MatrixBase<double>::SetZero(v20);
    }
  }
}

void sub_1B1DAD928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::CuMatrix<double>::CuMatrix<double>(int32x2_t *a1, int *a2, int a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = (int32x2_t)a4;
  *a1 = (int32x2_t)&unk_1F0A51738;
  a1[5].i8[0] = 0;
  if (a3 == 111)
  {
    uint64_t v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    uint64_t v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  }
  else
  {
    uint64_t v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    uint64_t v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  }
  kaldi::CuMatrix<double>::Resize(a1, v7, v8, 1, 0);
  kaldi::MatrixBase<double>::CopyFromMat<double>((int *)&a1[1], a2, a3);
  return a1;
}

int *kaldi::CuMatrixBase<float>::CopyToMat<float>(uint64_t a1, int *a2, int a3)
{
  return kaldi::MatrixBase<float>::CopyFromMat<float>(a2, (int *)(a1 + 8), a3);
}

void *kaldi::VectorBase<float>::CopyRowsFromMat(void **a1, uint64_t a2)
{
  return kaldi::VectorBase<float>::CopyRowsFromMat(a1, a2 + 8);
}

{
  char *v4;
  int v5;
  int v6;
  int v7;
  void *result;
  const void *v9;
  int v10;
  size_t v11;
  uint64_t vars8;

  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t v4 = (char *)*a1;
  unint64_t v5 = kaldi::MatrixBase<float>::NumCols(a2);
  int32x2_t v6 = kaldi::MatrixBase<float>::NumRows(a2);
  uint64_t v7 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(a2);
  uint64_t result = (void *)kaldi::MatrixBase<float>::NumCols(a2);
  if (v7 == result)
  {
    uint64_t v9 = *(const void **)a2;
    return memcpy(v4, v9, 4 * v6 * v5);
  }
  else if (v6 >= 1)
  {
    int v10 = 0;
    uint64_t v11 = 4 * v5;
    do
    {
      uint64_t result = memcpy(v4, (const void *)(*(void *)a2 + 4 * *(_DWORD *)(a2 + 16) * v10++), v11);
      v4 += v11;
    }
    while (v6 != v10);
  }
  return result;
}

uint64_t kaldi::CuMatrix<float>::Swap(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = *(void *)(result + 8);
  *(void *)(result + 8) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = v2;
  LODWORD(v2) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = v2;
  LOBYTE(v2) = *((unsigned char *)a2 + 32);
  *((unsigned char *)a2 + 32) = *(unsigned char *)(result + 40);
  *(unsigned char *)(result + 40) = v2;
  return result;
}

void sub_1B1DADAB8(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void sub_1B1DADB08(_Unwind_Exception *a1)
{
  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v1);
  _Unwind_Resume(a1);
}

void kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(uint64_t a1, uint64_t a2)
{
}

void sub_1B1DADB58(_Unwind_Exception *a1)
{
  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorwiseQuantizedMatrix<short>::~VectorwiseQuantizedMatrix(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  if (v2) {
    MEMORY[0x1B3EA8670](v2, 0x1000C40BDFB0063);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    MEMORY[0x1B3EA8670](v3, 0x1000C4052888210);
  }
  return a1;
}

void kaldi::QuantizedMatrixBase<signed char>::AddMat()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::QuantizedMatrixBase<short>::AddMat()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void *kaldi::operator<<<float>(void *a1, uint64_t a2)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v5, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>(v5, (int *)(a2 + 8), 111);
  kaldi::MatrixBase<float>::Write(v5, a1, 0, 0);
  kaldi::Matrix<float>::~Matrix((uint64_t)v5);
  return a1;
}

void sub_1B1DADCCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::CuMatrix<float>::CuMatrix(int32x2_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = (int32x2_t)a5;
  *a1 = (int32x2_t)&unk_1F0A51768;
  a1[5].i8[0] = 0;
  kaldi::CuMatrix<float>::Resize(a1, a2, a3, a4, a6);
  return a1;
}

uint64_t kaldi::CuMatrix<float>::CuMatrix(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F0A51768;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a3 == 111)
  {
    uint64_t v7 = *(unsigned int *)(a2 + 16);
    uint64_t v6 = *(unsigned int *)(a2 + 20);
    BOOL v8 = *(_DWORD *)(a2 + 24) == v7;
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a2 + 16);
    uint64_t v7 = *(unsigned int *)(a2 + 20);
    BOOL v8 = 0;
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1, v6, v7, 1, v8);
  if (*(_DWORD *)(a2 + 20)) {
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)(a1 + 8), (int *)(a2 + 8), a3);
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1F0A51768;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a3 == 111)
  {
    uint64_t v7 = *(unsigned int *)(a2 + 16);
    uint64_t v6 = *(unsigned int *)(a2 + 20);
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a2 + 16);
    uint64_t v7 = *(unsigned int *)(a2 + 20);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1, v6, v7, 1, 0);
  if (*(_DWORD *)(a2 + 20)) {
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)(a1 + 8), (int *)(a2 + 8), a3);
  }
  return a1;
}

int32x2_t *kaldi::CuMatrix<float>::operator=(int32x2_t *a1, int32x2_t *a2)
{
  if (!*(void *)&a1[4]) {
    a1[4] = a2[4];
  }
  kaldi::CuMatrix<float>::Resize(a1, a2[2].u32[1], a2[2].u32[0], 1, 0);
  if (a2[2].i32[1]) {
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[1], (int *)&a2[1], 111);
  }
  return a1;
}

int32x2_t *kaldi::CuMatrix<float>::operator=(int32x2_t *a1, int *a2)
{
  uint64_t v4 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  uint64_t v5 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  kaldi::CuMatrix<float>::Resize(a1, v4, v5, 1, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[1], a2, 111);
  return a1;
}

uint64_t kaldi::CuMatrix<float>::Transpose(uint64_t result)
{
  if (*(_DWORD *)(result + 20))
  {
    uint64_t v1 = result;
    kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v5, result, 112);
    uint64_t v2 = v6;
    uint64_t v6 = *(void *)(v1 + 8);
    *(void *)(v1 + 8) = v2;
    long long v3 = v7;
    long long v7 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v1 + 16) = v3;
    uint64_t v4 = v8;
    uint64_t v8 = *(void *)(v1 + 32);
    *(void *)(v1 + 32) = v4;
    LOBYTE(v4) = v9;
    char v9 = *(unsigned char *)(v1 + 40);
    *(unsigned char *)(v1 + 40) = v4;
    return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v5);
  }
  return result;
}

uint64_t kaldi::CuMatrix<float>::Swap(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = *(void *)(result + 8);
  *(void *)(result + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 20) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
  *(_DWORD *)(result + 28) = v2;
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(result + 32) = v3;
  LOBYTE(v3) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(result + 40);
  *(unsigned char *)(result + 40) = v3;
  return result;
}

void kaldi::CuMatrixBase<float>::SetZero(uint64_t a1)
{
}

uint64_t kaldi::CuMatrix<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::Matrix<float>::Matrix((uint64_t)&v12, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 16));
  kaldi::Matrix<float>::Read(&v12, a2, a3, 0, a4);
  uint64_t v8 = *(void **)(a1 + 8);
  if (v8 && !*(unsigned char *)(a1 + 40)) {
    free(v8);
  }
  *(int32x2_t *)(a1 + 8) = v12;
  long long v9 = v13;
  int32x2_t v12 = 0;
  long long v13 = 0uLL;
  *(_OWORD *)(a1 + 16) = v9;
  char v10 = v14;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v10;
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v12);
}

void sub_1B1DAE120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuMatrix<float>::~CuMatrix(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51768;
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 && !*(unsigned char *)(a1 + 40)) {
    free(v2);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

void kaldi::CuMatrix<float>::~CuMatrix(uint64_t a1)
{
  kaldi::CuMatrix<float>::~CuMatrix(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::CuMatrix<float>::DataUnowned(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t kaldi::CuMatrix<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::Matrix<double>::Matrix((uint64_t)&v12, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 16));
  kaldi::Matrix<double>::Read(&v12, a2, a3, 0, a4);
  uint64_t v8 = *(void **)(a1 + 8);
  if (v8 && !*(unsigned char *)(a1 + 40)) {
    free(v8);
  }
  *(int32x2_t *)(a1 + 8) = v12;
  long long v9 = v13;
  int32x2_t v12 = 0;
  long long v13 = 0uLL;
  *(_OWORD *)(a1 + 16) = v9;
  char v10 = v14;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v10;
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v12);
}

void sub_1B1DAE288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuMatrix<double>::~CuMatrix(uint64_t a1)
{
  *(void *)a1 = &unk_1F0A51738;
  uint64_t v3 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 && !*(unsigned char *)(a1 + 40)) {
    free(v2);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return a1;
}

void kaldi::CuMatrix<double>::~CuMatrix(uint64_t a1)
{
  kaldi::CuMatrix<double>::~CuMatrix(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::CuMatrix<double>::DataUnowned(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t kaldi::CuMatrixBase<float>::CopyCols(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return kaldi::MatrixBase<float>::CopyCols(a1 + 8, (uint64_t *)(a2 + 8), a3);
}

void *kaldi::CuArray<int>::CopyToVec(int *a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::pointer begin = this->__begin_;
  unint64_t v5 = (unint64_t)((char *)this->__end_ - (char *)this->__begin_) >> 2;
  std::vector<unsigned int>::size_type v6 = *a1;
  if (v6 != v5)
  {
    std::vector<int>::resize(this, v6);
    std::vector<unsigned int>::pointer begin = this->__begin_;
    LODWORD(v5) = *a1;
  }
  long long v7 = (const void *)*((void *)a1 + 1);
  return memcpy(begin, v7, 4 * (int)v5);
}

unint64_t kaldi::CuMatrixBase<float>::CopyIndexedItems(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  return kaldi::MatrixBase<float>::CopyIndexedItems(a1 + 8, (uint64_t *)(a2 + 8), *((void *)a3 + 1), *(void *)(a4 + 8), *a3, a5);
}

void kaldi::CuMatrixBase<float>::CopyRows(uint64_t a1, uint64_t a2, void *a3)
{
}

void kaldi::CuMatrixBase<float>::CopySelectedRows(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::CuMatrixBase<float>::AddToDiag(uint64_t a1, uint64_t a2, float a3, float a4)
{
  return kaldi::MatrixBase<float>::AddToDiag(a1 + 8, (uint64_t *)(a2 + 8), a3, a4);
}

uint64_t kaldi::CuMatrixBase<float>::SetStride(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 24);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"New stride (", 12);
      uint64_t v3 = (void *)std::ostream::operator<<();
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)") must not be smaller than", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" the current stride (", 21);
      unint64_t v5 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, ").");
      goto LABEL_8;
    }
    if (a2 % v2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"New stride (", 12);
      std::vector<unsigned int>::size_type v6 = (void *)std::ostream::operator<<();
      long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") must be a multiple of ", 24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"current stride (", 16);
      uint64_t v8 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, ").");
LABEL_8:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
    }
    *(_DWORD *)(result + 20) = (*(_DWORD *)(result + 20) - 1) / (a2 / v2) + 1;
    *(_DWORD *)(result + ++*(_DWORD *)(result + 24) = a2;
  }
  return result;
}

void kaldi::CuMatrixBase<float>::AddMat(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
}

int *kaldi::CuMatrixBase<float>::CopyRowsFromVec(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::CopyRowsFromVec((int *)(a1 + 8), (char **)(a2 + 8));
}

int *kaldi::CuMatrixBase<float>::CopyRowsFromVec(uint64_t a1, char **a2)
{
  return kaldi::MatrixBase<float>::CopyRowsFromVec((int *)(a1 + 8), a2);
}

void kaldi::CuMatrixBase<float>::Sigmoid(uint64_t a1, uint64_t a2)
{
}

void kaldi::CuMatrixBase<float>::GroupPnorm(uint64_t a1, uint64_t a2, float a3)
{
}

void kaldi::CuMatrixBase<float>::GroupPnormDeriv(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
}

void kaldi::CuMatrixBase<float>::Tanh(uint64_t a1, uint64_t a2)
{
}

void kaldi::CuMatrixBase<float>::ApplyTanh(uint64_t a1)
{
}

uint64_t *kaldi::CuMatrixBase<float>::DiffSigmoid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::DiffSigmoid((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

uint64_t kaldi::CuMatrixBase<float>::DiffRelu(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 20);
  if (v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = *(unsigned int *)(result + 16);
    uint64_t v6 = *(void *)(a3 + 8);
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v8 = *(void *)(result + 8);
    uint64_t v9 = 4 * *(int *)(result + 24);
    uint64_t v10 = 4 * *(int *)(a3 + 24);
    uint64_t v11 = 4 * *(int *)(a2 + 24);
    do
    {
      if ((int)v5 >= 1)
      {
        uint64_t result = 0;
        do
        {
          int v12 = 0;
          if (*(float *)(v7 + result) > 0.0) {
            int v12 = *(_DWORD *)(v6 + result);
          }
          *(_DWORD *)(v8 + result) = v12;
          result += 4;
        }
        while (4 * v5 != result);
      }
      ++v4;
      v8 += v9;
      v6 += v10;
      v7 += v11;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t *kaldi::CuMatrixBase<float>::DiffTanh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::DiffTanh((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

void kaldi::CuMatrixBase<float>::DiffXent(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  kaldi::CuVector<float>::Resize(a3, *a2, 0);
  uint64_t v6 = *(unsigned int *)(a1 + 20);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *((void *)a2 + 1);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 4 * *(int *)(a1 + 24);
    do
    {
      uint64_t v12 = *(int *)(v8 + 4 * v7);
      float v13 = *(float *)(v9 + 4 * v12);
      if (v13 < 1.0e-20)
      {
        *(_DWORD *)(v9 + 4 * v12) = 507307272;
        float v13 = 1.0e-20;
      }
      *(float *)(v10 + 4 * v7) = logf(v13);
      *(float *)(v9 + 4 * v12) = *(float *)(v9 + 4 * v12) + -1.0;
      ++v7;
      v9 += v11;
    }
    while (v6 != v7);
  }
}

void kaldi::CuMatrixBase<float>::AddMatMat(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, CBLAS_TRANSPOSE a5, float a6, float a7)
{
  uint64_t v7 = (_DWORD *)(a4 + 20);
  if (a5 != CblasTrans) {
    uint64_t v7 = (_DWORD *)(a4 + 16);
  }
  if (*v7) {
    kaldi::MatrixBase<float>::AddMatMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, a7);
  }
}

uint64_t *kaldi::CuMatrixBase<float>::MaxoutForward(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::MaxoutForward((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
}

uint64_t kaldi::CuMatrixBase<float>::MaxoutDerivative(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::MaxoutDerivative(a1 + 8, (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

void kaldi::CuMatrixBase<float>::ApplyPow(uint64_t a1, float a2)
{
}

void kaldi::CuMatrixBase<float>::ApplyPowAbs(uint64_t a1, int a2, float a3)
{
}

uint64_t kaldi::CuMatrixBase<float>::ApplyHeaviside(uint64_t a1)
{
  return kaldi::MatrixBase<float>::ApplyHeaviside(a1 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::ApplyFloor(a1 + 8, a2);
}

uint64_t kaldi::CuMatrixBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::ApplyCeiling(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::ApplyExp(uint64_t a1)
{
}

uint64_t kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  kaldi::MatrixBase<float>::CopyFromMat<float>((int *)(a1 + 8), (int *)(a2 + 8), 111);
  uint64_t result = kaldi::MatrixBase<float>::NumRows(v2);
  if ((int)result >= 1)
  {
    int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)v2 + 4 * *(_DWORD *)(v2 + 16) * v4;
      int v6 = kaldi::MatrixBase<float>::NumCols(v2);
      int v9 = 0;
      uint64_t v10 = 0;
      uint64_t v7 = v5;
      int v8 = v6;
      kaldi::VectorBase<float>::ApplySoftMax((uint64_t)&v7);
      ++v4;
      uint64_t result = kaldi::MatrixBase<float>::NumRows(v2);
    }
    while (v4 < (int)result);
  }
  return result;
}

uint64_t kaldi::CuMatrixBase<float>::ApplyMaxNorm(uint64_t a1, int a2, float a3)
{
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v14, a1, 111);
  uint64_t v6 = a1 + 8;
  kaldi::MatrixBase<float>::MulElements((uint64_t)&v15, a1 + 8);
  if (a2)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 20);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_1F0A517C0;
    uint64_t v11 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v10, v7, 0);
    uint64_t v13 = *(void *)(a1 + 32);
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)&v10, (uint64_t)v14, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v10, 0.5);
    kaldi::CuVectorBase<float>::Scale((uint64_t)&v10, 1.0 / a3);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v10, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)&v10);
    kaldi::MatrixBase<float>::MulRowsVec(v6, &v11);
  }
  else
  {
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v10 = &unk_1F0A517C0;
    uint64_t v11 = 0;
    kaldi::CuVector<float>::Resize((uint64_t)&v10, v8, 0);
    uint64_t v13 = *(void *)(a1 + 32);
    kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v10, (uint64_t)v14, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)&v10, 0.5);
    kaldi::CuVectorBase<float>::Scale((uint64_t)&v10, 1.0 / a3);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v10, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)&v10);
    kaldi::MatrixBase<float>::MulColsVec(v6, &v11);
  }
  kaldi::CuVector<float>::~CuVector(&v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_1B1DAE9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

float32_t kaldi::CuMatrixBase<float>::MulElements(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::MulElements(a1 + 8, a2 + 8);
}

uint64_t kaldi::CuMatrixBase<float>::MulRowsVec(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::MulRowsVec(a1 + 8, (uint64_t *)(a2 + 8));
}

uint64_t kaldi::CuMatrixBase<float>::MulColsVec(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::MulColsVec(a1 + 8, (uint64_t *)(a2 + 8));
}

void kaldi::CuMatrixBase<float>::FindRowMaxId(uint64_t a1, int *a2)
{
  kaldi::CuArray<int>::Resize((uint64_t)a2, *(_DWORD *)(a1 + 20), 0);
  if (*a2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)a2 + 1);
    do
      *(_DWORD *)(v5 + 4 * v4++) = -1;
    while (v4 < *a2);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 20);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *((void *)a2 + 1);
    do
    {
      if ((int)v8 < 1)
      {
        int v13 = -1;
      }
      else
      {
        uint64_t v11 = 0;
        int v13 = -1;
        float v14 = -1.0e21;
        do
        {
          uint64_t v12 = v9 + 4 * *(_DWORD *)(a1 + 24) * (int)v7;
          if (v14 < *(float *)(v12 + 4 * v11))
          {
            float v14 = *(float *)(v12 + 4 * v11);
            int v13 = v11;
          }
          ++v11;
        }
        while (v8 != v11);
      }
      *(_DWORD *)(v10 + 4 * v7++) = v13;
    }
    while (v7 != v6);
  }
}

void kaldi::CuArray<int>::Resize(uint64_t a1, unsigned int a2, int a3)
{
  BOOL v3 = a3;
  if (a3 == 3) {
    BOOL v3 = *(_DWORD *)a1 >= (int)a2;
  }
  if (*(_DWORD *)(a1 + 4) >= (signed int)a2)
  {
    *(_DWORD *)a1 = a2;
    if (!a2 || v3) {
      return;
    }
    uint64_t v8 = *(void **)(a1 + 8);
    size_t v9 = 4 * a2;
    goto LABEL_13;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v6) {
    free(v6);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v7;
  if (a2)
  {
    uint64_t v8 = malloc_type_malloc(4 * a2, 0x100004052888210uLL);
    *(void *)(a1 + 8) = v8;
    if (!v8)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Memory allocation failed when initializing CuVector ", 52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"with dimension ", 15);
      uint64_t v11 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" object size in bytes: ", 23);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
    }
    *(_DWORD *)a1 = a2;
    *(_DWORD *)(a1 + 4) = a2;
    if (!v3)
    {
      size_t v9 = 4 * a2;
LABEL_13:
      bzero(v8, v9);
    }
  }
}

uint64_t kaldi::CuMatrixBase<float>::Set(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::Set(a1 + 8, a2);
}

uint64_t kaldi::CuMatrixBase<float>::Add(uint64_t a1, float a2)
{
  return kaldi::MatrixBase<float>::Add(a1 + 8, a2);
}

void kaldi::CuMatrixBase<float>::Scale(uint64_t a1, float a2)
{
}

void kaldi::CuMatrixBase<float>::ApplyLog(uint64_t a1)
{
}

uint64_t kaldi::CuMatrixBase<float>::DivElements(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::DivElements(a1 + 8, (uint64_t *)(a2 + 8));
}

uint64_t kaldi::CuMatrixBase<float>::Max(uint64_t a1, uint64_t a2)
{
  return kaldi::MatrixBase<float>::Max(a1 + 8, a2 + 8);
}

void kaldi::CuMatrixBase<float>::MulRowsGroupMat(uint64_t a1, uint64_t a2)
{
}

uint64_t *kaldi::CuMatrixBase<float>::AddVecToCols(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Non matching dimensions: Rows:", 30);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" VectorDim:", 11);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  uint64_t v6 = (uint64_t *)(a1 + 8);
  if (a4 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1 + 8, a4);
  }
  return kaldi::MatrixBase<float>::AddVecToCols<float>(v6, (uint64_t *)(a2 + 8), a3);
}

uint64_t *kaldi::CuMatrixBase<float>::AddVecToRows(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Non matching dimensions: Cols:", 30);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" VectorDim:", 11);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  uint64_t v6 = (uint64_t *)(a1 + 8);
  if (a4 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1 + 8, a4);
  }
  return kaldi::MatrixBase<float>::AddVecToRows<float>(v6, (uint64_t *)(a2 + 8), a3);
}

void kaldi::CuMatrixBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v8 = a1 + 8;
  if (a5 != 1.0) {
    kaldi::MatrixBase<float>::Scale(a1 + 8, a5);
  }
  kaldi::MatrixBase<float>::AddVecVec<float>(v8, a2 + 8, a3 + 8, a4);
}

void kaldi::CuMatrixBase<float>::AddMatMatMasked(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, CBLAS_TRANSPOSE a5, float a6)
{
  if (a3 == CblasTrans && a5 == CblasTrans)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "matrix A and B can not be transposed at the same time, not implemented yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  uint64_t v6 = a1 + 8;
  uint64_t v7 = a2 + 8;
  uint64_t v8 = a4 + 8;
  kaldi::MatrixBase<float>::AddMatMat(v6, v7, a3, v8, a5, a6, 1.0);
}

uint64_t kaldi::CuMatrixBase<float>::AddMatEwpMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, float a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatEwpMat(a1 + 8, a2 + 8, a3, a4 + 8, a5, a6, a7);
}

void kaldi::CuMatrixBase<float>::AddDiagVecMat(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5, float a6)
{
}

void kaldi::CuMatrixBase<float>::AddMatDiagVec(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5, float a6)
{
}

uint64_t kaldi::CuMatrixBase<float>::AddIndexedRows(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return kaldi::MatrixBase<float>::AddIndexedRows(a1 + 8, (uint64_t *)(a2 + 8), a3 + 8, a4);
}

float kaldi::CuMatrixBase<float>::Sum(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 32);
  v7[1] = 0;
  _OWORD v7[2] = 0;
  v7[0] = &unk_1F0A517C0;
  void v7[3] = v3;
  kaldi::CuVector<float>::Resize((uint64_t)v7, v2, 0);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v7, a1, 1.0, 0.0);
  double v4 = kaldi::CuVectorBase<float>::Sum((uint64_t)v7);
  float v5 = *(float *)&v4;
  kaldi::CuVector<float>::~CuVector(v7);
  return v5;
}

void sub_1B1DAF008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::CuMatrixBase<float>::CountZeros(uint64_t a1)
{
  return kaldi::MatrixBase<float>::CountZeros(a1 + 8);
}

void kaldi::CuMatrixBase<float>::SetRandn(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20)) {
    kaldi::MatrixBase<float>::SetRandn(a1 + 8);
  }
}

uint64_t kaldi::CuMatrixBase<float>::Write(uint64_t a1, void *a2, int a3, int a4)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v9, *(unsigned int *)(a1 + 20), *(unsigned int *)(a1 + 16), 1, 0);
  kaldi::MatrixBase<float>::CopyFromMat<float>(v9, (int *)(a1 + 8), 111);
  kaldi::MatrixBase<float>::Write(v9, a2, a3, a4);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v9);
}

void sub_1B1DAF0B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuMatrixBase<float>::AddUniqueElements(uint64_t result, unsigned int *a2, float a3)
{
  uint64_t v3 = *a2;
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(result + 8);
    int v6 = *(_DWORD *)(result + 24);
    uint64_t v7 = (_DWORD *)(*((void *)a2 + 1) + 8);
    do
    {
      uint64_t v8 = *((void *)v7 - 1);
      float v9 = *(float *)v7;
      v7 += 3;
      float v10 = v9;
      if ((int)v8 >= 0) {
        int v11 = v8;
      }
      else {
        int v11 = v4;
      }
      *(float *)(v5 + 4 * v6 * v11 + 4 * (v8 >> 32)) = (float)(v10 * a3)
                                                       + *(float *)(v5 + 4 * v6 * v11 + 4 * (v8 >> 32));
      ++v4;
    }
    while (v3 != v4);
  }
  return result;
}

void kaldi::CuMatrixBase<float>::EqualElementColMask(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a1 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  int v6 = *(_DWORD *)(a1 + 20);
  if (v6 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = *(unsigned int *)(a1 + 16);
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      if ((int)v8 >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)&a3[1] + 4 * a3[3].i32[0] * v7;
        uint64_t v12 = *(void *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * v7;
        do
        {
          if (*(float *)(v12 + 4 * v10) == *(float *)(v9 + 4 * v10)) {
            float v13 = 1.0;
          }
          else {
            float v13 = 0.0;
          }
          *(float *)(v11 + 4 * v10++) = v13;
        }
        while (v8 != v10);
      }
      ++v7;
    }
    while (v7 != v6);
  }
}

void kaldi::CuMatrixBase<float>::EqualElementMask(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  uint64_t v6 = *(unsigned int *)(a1 + 20);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    uint64_t v10 = *(void *)(a2 + 8);
    uint64_t v11 = 4 * *(int *)(a2 + 24);
    do
    {
      if ((int)v9 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)&a3[1] + v7 * a3[3].i32[0];
        uint64_t v14 = *(void *)(a1 + 8) + v7 * *(int *)(a1 + 24);
        do
        {
          if (*(float *)(v14 + 4 * v12) == *(float *)(v10 + 4 * v12)) {
            float v15 = 1.0;
          }
          else {
            float v15 = 0.0;
          }
          *(float *)(v13 + 4 * v12++) = v15;
        }
        while (v9 != v12);
      }
      ++v8;
      v7 += 4;
      v10 += v11;
    }
    while (v8 != v6);
  }
}

uint64_t kaldi::CuMatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::ConcatenateVec(a1 + 8, (uint64_t *)(a2 + 8), a3 + 8);
}

void kaldi::CuMatrixBase<float>::ConcatenateVec(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
}

uint64_t kaldi::CuMatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::MatrixBase<float>::SummarizeVec(a1 + 8, (uint64_t *)(a2 + 8), (uint64_t *)(a3 + 8));
}

void kaldi::CuMatrixBase<float>::SummarizeVec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void kaldi::CuMatrixBase<float>::DataUnowned()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuMatrixBase<double>::DataUnowned()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Function not implemented for this class");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void **kaldi::CuMatrixBase<float>::AddMatMat<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, kaldi::quasar::Vocab *a4, int a5, double a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<signed char>((void **)(a1 + 8), a2 + 8, a6, a7, a3, a4, a5);
}

void **kaldi::CuMatrixBase<float>::AddMatMat<short>(uint64_t a1, uint64_t a2, uint64_t a3, kaldi::quasar::Vocab *a4, int a5, double a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<short>((void **)(a1 + 8), a2 + 8, a6, a7, a3, a4, a5);
}

int *kaldi::CuMatrixBase<float>::AddMatMat<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<signed char>((int *)(a1 + 8), a2 + 8, a6, a7, a3, a4, a5);
}

int *kaldi::CuMatrixBase<float>::AddMatMat<short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, double a6, float a7)
{
  return kaldi::MatrixBase<float>::AddMatMat<short>((int *)(a1 + 8), a2 + 8, a6, a7, a3, a4, a5);
}

uint64_t kaldi::Quant3Levels<float>(uint64_t a1, uint64_t a2, float a3)
{
  return kaldi::Quant3Levels<float>(a1 + 8, a2 + 8, a3);
}

uint64_t kaldi::ZeroSmallValues<float>(uint64_t a1, uint64_t a2, float a3)
{
  return kaldi::ZeroSmallValues<float>(a1 + 8, a2 + 8, a3);
}

void quasar::stringToFst(uint64_t a1, uint64_t a2)
{
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&v3);
  fst::SymbolTable::ReadText(a2);
  if (v5 < 0) {
    operator delete(__p);
  }
  operator new();
}

void sub_1B1DAF4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(v16);
  MEMORY[0x1B3EA8670](v17, 0x1060C40D58F381ALL);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::LatticeFasterDecoder::registerParams(quasar::LatticeFasterDecoder *this, quasar::SystemConfig *a2)
{
  quasar::OnlinePhoneDecoderConfig::Register((uint64_t)this + 488, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v9, "word-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "word symbol table text format filename");
  uint64_t v4 = (char *)this + 608;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v9, (uint64_t)this + 608, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "HCLG FST filename");
  char v5 = (char *)this + 448;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v9, (uint64_t)v5, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  MEMORY[0x1B3EA7B20](v4, "");
  return MEMORY[0x1B3EA7B20](v5, "");
}

void sub_1B1DAF664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlinePhoneDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  kaldi::LatticeFasterDecoderConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "update-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam update interval in frames");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 72, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-update");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam update rate");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 76, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-beam-update");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max beam update rate");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 80, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "inter-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum # of silence frames to trigger new utterance");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 60, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum # of silence frames to trigger end of speech while no speech presented");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 68, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "If the utterance becomes longer than this number of frames, shorter silence is acceptable as an utterance separator");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 64, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "det-max-mem");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum approximate memory usage in determinization (real usage might be many times this)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 84, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "det-max-loop");
  std::string::basic_string[abi:ne180100]<0>(__p, "Option used to detect a particular type of determinization failure, typically due to invalid input (e.g., negative-cost loops)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 8))(a2, v6, a1 + 88, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1DAFA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LatticeFasterDecoder::finishInit(quasar::LatticeFasterDecoder *this)
{
  quasar::ModelLoader::readSymbolTable(*((void *)this + 46), (uint64_t)this + 608, 4, 0, &v8);
  int v6 = 3;
  std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,void>(&v8, &v6, &v7);
  long long v2 = v7;
  long long v7 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 80);
  *(_OWORD *)((char *)this + 632) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  (*(void (**)(long long *__return_ptr))(**((void **)this + 46) + 16))(&v7);
  long long v4 = v7;
  long long v7 = 0uLL;
  char v5 = (std::__shared_weak_count *)*((void *)this + 60);
  *(_OWORD *)((char *)this + 472) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1B1DAFBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void quasar::LatticeFasterDecoder::runImpl(void *a1, uint64_t a2, uint64_t **a3)
{
  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[59]);
  char v5 = (uint64_t *)(*a3)[59];
  int v6 = (std::__shared_weak_count *)a1[80];
  uint64_t v21 = a1[79];
  uint64_t v22 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  quasar::SymbolTableList::addSymbolTable(v5, &v21, 0, -1);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (**a3 != (*a3)[1]) {
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst();
  }
  std::vector<std::string>::__clear[abi:ne180100](*a3);
  long long v7 = *a3;
  uint64_t v8 = (void **)v7[3];
  uint64_t v9 = (void **)v7[4];
  while (v9 != v8)
  {
    v9 -= 3;
    uint64_t v15 = v9;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
  void v7[4] = (uint64_t)v8;
  uint64_t v10 = a1[59];
  uint64_t v11 = (long long *)(a1 + 61);
  quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
  kaldi::LatticeFasterOnlineDecoder::LatticeFasterOnlineDecoder((uint64_t)&v15, v10, v11);
  *(_OWORD *)((char *)v17 + 12) = *(long long *)((char *)v11 + 76);
  long long v12 = v11[3];
  v16[9] = v11[2];
  v16[10] = v12;
  v17[0] = v11[4];
  long long v13 = v11[1];
  v16[7] = *v11;
  v16[8] = v13;
  uint64_t v19 = 1;
  int32x2_t v18 = v16;
  int v20 = 0;
  while (quasar::OnlinePhoneDecoder::DecodeMe<kaldi::DecodableInterface>((kaldi::LatticeFasterOnlineDecoder *)&v15, *(kaldi::DecodableInterface **)(a2 + 16)) != 1);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B1DB07AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  a55 = &STACK[0x298];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst(&a52);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[16 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[16 * v13];
    uint64_t v16 = *(void *)(a2 + 8);
    *((void *)v15 + 1) = v16;
    ++*(_DWORD *)(v16 + 56);
    *(void *)uint64_t v15 = &unk_1F0A45ED0;
    _OWORD v17[2] = v15 + 16;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 8);
    v7[1] = v8;
    ++*(_DWORD *)(v8 + 56);
    *long long v7 = &unk_1F0A45ED0;
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void v17[5];

  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[16 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[16 * v13];
    uint64_t v16 = *(void *)(a2 + 8);
    *((void *)v15 + 1) = v16;
    ++*(_DWORD *)(v16 + 56);
    *(void *)uint64_t v15 = &unk_1F0A45ED0;
    _OWORD v17[2] = v15 + 16;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 8);
    v7[1] = v8;
    ++*(_DWORD *)(v8 + 56);
    *long long v7 = &unk_1F0A45ED0;
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1B1DB0B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Union<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  long long v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  unint64_t v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v4, v5, (const fst::SymbolTable *)1)
    || (unint64_t v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1),
        long long v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2),
        !fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    int v20 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    uint64_t v21 = (void *)fst::cerr(v20);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Union: input/output symbol tables of 1st argument ", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"do not match input/output symbol tables of 2nd argument", 55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x2000000000, 1);
  unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  if (result == -1)
  {
    if ((v11 & 4) != 0)
    {
      long long v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192);
      return v25(a1, 4, 4);
    }
    return result;
  }
  uint64_t v13 = result;
  if ((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 1, 0))
  {
    int v14 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
    if (v9) {
      int v15 = v8;
    }
    else {
      int v15 = v8 + 1;
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 248))(a1, (v15 + v14));
  }
  unsigned int v36 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v34);
LABEL_10:
  if (!v34)
  {
    if ((int)v36 >= v35) {
      goto LABEL_40;
    }
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v34 + 16))(v34))
  {
LABEL_14:
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
    if (v34) {
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 24))(v34);
    }
    else {
      uint64_t v17 = v36;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, v17);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, v16, v18);
    unint64_t v33 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 136))(a2, v17, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(void *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(void *)__p + 8))();
          goto LABEL_31;
        }
LABEL_29:
        if (v32) {
          --*v32;
        }
LABEL_31:
        if (v34) {
          (*(void (**)(uint64_t))(*(void *)v34 + 32))(v34);
        }
        else {
          ++v36;
        }
        goto LABEL_10;
      }
      if (!__p) {
        goto LABEL_23;
      }
      uint64_t v19 = (long long *)(*(uint64_t (**)(void))(*(void *)__p + 32))();
LABEL_24:
      long long v28 = *v19;
      HIDWORD(v28) += v8;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 208))(a1, v16, &v28);
      if (__p) {
        (*(void (**)(void *))(*(void *)__p + 40))(__p);
      }
      else {
        ++v33;
      }
    }
    if (v33 >= v31) {
      goto LABEL_29;
    }
LABEL_23:
    uint64_t v19 = (long long *)(v30 + 16 * v33);
    goto LABEL_24;
  }
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
LABEL_40:
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v23 == -1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v11, 0x3FFFFFFF0004);
  }
  else
  {
    int v24 = v23;
    if (v9)
    {
      std::string __p = 0;
      LODWORD(v30) = 0;
      HIDWORD(v30) = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v23, &__p);
    }
    else
    {
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v26);
      std::string __p = 0;
      LODWORD(v30) = 0;
      HIDWORD(v30) = v24;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v26, &__p);
      std::string __p = 0;
      LODWORD(v30) = 0;
      HIDWORD(v30) = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v26, &__p);
    }
    unint64_t v27 = fst::UnionProperties(v10, v11, 0);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v27, 0x3FFFFFFF0007);
  }
}

void sub_1B1DB1448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlinePhoneDecoder::DecodeMe<kaldi::DecodableInterface>(kaldi::LatticeFasterOnlineDecoder *this, kaldi::DecodableInterface *a2)
{
  int v4 = *((_DWORD *)this + 102);
  if (v4 == 4 || v4 == 1) {
    kaldi::LatticeFasterOnlineDecoder::InitDecoding(this);
  }
  char v20 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v19, (clockid_t)a2);
  uint64_t v21 = 0;
  kaldi::Timer::GetSeconds((kaldi::Timer *)5, v6);
  long long v7 = (int32x2_t *)((char *)this + 412);
  char v8 = (*(uint64_t (**)(kaldi::DecodableInterface *, void))(*(void *)a2 + 8))(a2, (*((_DWORD *)this + 103) - 1));
  if ((v8 & 1) == 0)
  {
    int v9 = 0;
    int v10 = 0;
    do
    {
      if (v10 >= *((_DWORD *)this + 90)) {
        break;
      }
      if (v10)
      {
        HIDWORD(v11) = 85899344 - 1030792151 * v7->i32[0];
        LODWORD(v11) = HIDWORD(v11);
        if ((v11 >> 3) <= 0x147AE14 && quasar::gLogLevel >= 6)
        {
          memset(v18, 0, sizeof(v18));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Beam: ", 6);
          uint64_t v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; Speed: ", 9);
          kaldi::Timer::GetSeconds((kaldi::Timer *)5, v14);
          int v15 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" xRT", 4);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v18);
        }
      }
      kaldi::LatticeFasterOnlineDecoder::ProcessEmitting(this, a2);
      kaldi::LatticeFasterOnlineDecoder::ProcessNonemitting(this);
      int32x2_t v16 = *v7;
      *long long v7 = vadd_s32(*v7, (int32x2_t)0x100000001);
      ++v10;
      v9 += 10;
    }
    while (!(*(unsigned int (**)(kaldi::DecodableInterface *, void))(*(void *)a2 + 8))(a2, v16.u32[0]));
  }
  if ((*(unsigned int (**)(kaldi::DecodableInterface *, void))(*(void *)a2 + 8))(a2, v7->u32[0]))
  {
    kaldi::LatticeFasterOnlineDecoder::FinalizeDecoding(this);
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = 2;
  }
  *((_DWORD *)this + 102) = result;
  return result;
}

void sub_1B1DB177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void quasar::OnlinePhoneDecoder::GetDeterminizedLattice()
{
}

void sub_1B1DB1934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va1);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((uint64_t *)va);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v5 - 64));
  _Unwind_Resume(a1);
}

void quasar::LatticeFasterDecoder::~LatticeFasterDecoder(quasar::LatticeFasterDecoder *this)
{
  *(void *)this = &unk_1F0A54F90;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 584, *((void **)this + 74));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F0A54F90;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 584, *((void **)this + 74));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  quasar::Decoder::~Decoder(this);
  JUMPOUT(0x1B3EA8670);
}

void quasar::OnlinePhoneDecoder::~OnlinePhoneDecoder(quasar::OnlinePhoneDecoder *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 != -1)
  {
    uint64_t v3 = *((void *)this + 3);
    do
    {
      int v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      uint64_t v2 = *v4;
    }
    while (v2 != -1);
  }
  uint64_t v5 = *(void *)this;
  *(void *)this = 0;
  *((void *)this + 1) = -1;
  kaldi::LatticeFasterOnlineDecoder::DeleteElems((uint64_t)this, v5);
  kaldi::LatticeFasterOnlineDecoder::~LatticeFasterOnlineDecoder(this);
}

void *std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  clockid_t v6 = operator new(0xA8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1B1DB1B84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(void *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A60678;
  std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1B1DB1BF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<fst::SymbolTable> &,quasar::TextEncoding>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  uint64_t v5 = *a3;
  int v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v6 = *a4;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 96) = v5;
    *(void *)(a2 + 104) = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_DWORD *)(a2 + 112) = v6;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 0;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    int v8 = *a4;
    double result = 0.0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a2 + 96) = v5;
    *(void *)(a2 + 104) = 0;
    *(_DWORD *)(a2 + 112) = v8;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 120) = 0;
  }
  return result;
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 != *result)
  {
    uint64_t v5 = v4 - 16;
    do
    {
      *(void *)(v4 - 16) = &unk_1F0A45ED0;
      v4 -= 16;
      uint64_t v6 = *(void *)(v3 - 8);
      *(void *)(v4 + 8) = v6;
      ++*(_DWORD *)(v6 + 56);
      v5 -= 16;
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *double result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 16);
    *(void *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5E6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void quasar::TextProc::GetOrthography(long long **a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        if (*((void *)v5 + 1))
        {
LABEL_6:
          if (*((unsigned char *)v5 + 44)) {
            BOOL v8 = 0;
          }
          else {
            BOOL v8 = a2 == 0;
          }
          if (v8)
          {
            if ((*((unsigned char *)v5 + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)v5, *((void *)v5 + 1));
            }
            else
            {
              long long v12 = *v5;
              v16.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
              *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
            }
          }
          else
          {
            if (*((char *)v5 + 23) >= 0) {
              size_t v9 = *((unsigned __int8 *)v5 + 23);
            }
            else {
              size_t v9 = *((void *)v5 + 1);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v16, v9 + 1);
            if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v10 = &v16;
            }
            else {
              int v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
            }
            if (v9)
            {
              if (*((char *)v5 + 23) >= 0) {
                unint64_t v11 = (const std::string::value_type *)v5;
              }
              else {
                unint64_t v11 = *(const std::string::value_type **)v5;
              }
              memmove(v10, v11, v9);
            }
            *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 32;
          }
          if (*((unsigned char *)v5 + 45))
          {
            std::operator+<char>();
          }
          else if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
          }
          else
          {
            std::string __p = v16;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(a3, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          uint64_t v4 = a1[1];
        }
      }
      else if (*((unsigned char *)v5 + 23))
      {
        goto LABEL_6;
      }
      v5 += 14;
    }
    while (v5 != v4);
  }
}

void sub_1B1DB1FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void quasar::TextProc::GetTokenizedPhraseChoiceList(uint64_t **a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  int v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(a4, &v107, (uint64_t ***)&v104);
  }
  else
  {
    int v10 = 0;
    unint64_t v101 = 0;
    unint64_t v102 = 0;
    unint64_t v103 = 0;
    do
    {
      uint64_t v11 = v6[1];
      if (*v6 == v11)
      {
        if (v6 == *a1)
        {
          std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(a4, &v107, (uint64_t ***)&v104);
          goto LABEL_134;
        }
      }
      else
      {
        if (a2 <= *(_DWORD *)(v11 - 192)) {
          a2 = *(_DWORD *)(v11 - 192);
        }
        if ((unint64_t)v10 >= v103)
        {
          int v10 = (void **)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v101, v6);
        }
        else
        {
          *int v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
          std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v10, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * ((v6[1] - *v6) >> 5));
          v10 += 3;
        }
        unint64_t v102 = v10;
        uint64_t v5 = a1[1];
      }
      v6 += 3;
    }
    while (v6 != v5);
    memset(v100, 0, sizeof(v100));
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v100, (uint64_t *)v101, (uint64_t *)v10, 0xAAAAAAAAAAAAAAABLL * (v10 - v101));
    uint64_t v13 = v101;
    long long v12 = v102;
    if (v101 == v102) {
      goto LABEL_129;
    }
    clockid_t v14 = v101;
    do
    {
      *((_DWORD *)*v14 + 7) = 0;
      *((_DWORD *)v14[1] - 48) = a2;
      v14 += 3;
    }
    while (v14 != v12);
    if (v13 == v12)
    {
LABEL_129:
      unint64_t v98 = 0;
      uint64_t v99 = 0;
      uint64_t v97 = (void ***)&v98;
LABEL_130:
      std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(a4, &v107, (uint64_t ***)&v104);
    }
    else
    {
      int v15 = v13;
      do
      {
        std::string v16 = *v15;
        uint64_t v17 = v15[1];
        if (*v15 != v17)
        {
          unsigned int v18 = 0;
          while (1)
          {
            unsigned int v19 = v16[7];
            if (v18 > v19) {
              break;
            }
            unsigned int v18 = v16[8];
            if (v19 > v18) {
              break;
            }
            v16 += 56;
            if (v16 == v17) {
              goto LABEL_23;
            }
          }
          std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(a4, &v107, (uint64_t ***)&v104);
          goto LABEL_133;
        }
LABEL_23:
        v15 += 3;
      }
      while (v15 != v12);
      unint64_t v98 = 0;
      uint64_t v99 = 0;
      uint64_t v97 = (void ***)&v98;
      if (v13 == v12) {
        goto LABEL_130;
      }
      do
      {
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        uint64_t v94 = (unsigned int *)&v95;
        for (uint64_t i = (unsigned int *)*v13; i != v13[1]; i += 56)
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v94, i + 8, i + 8);
        if (v13 == v101)
        {
          std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)&v97, v94, (unsigned int *)&v95);
        }
        else
        {
          uint64_t v92 = 0;
          uint64_t v93 = 0;
          uint64_t v91 = &v92;
          uint64_t v21 = (uint64_t *)v94;
          if (v94 == (unsigned int *)&v95)
          {
            char v32 = (unsigned int *)&v92;
          }
          else
          {
            do
            {
              uint64_t v22 = v98;
              if (v98)
              {
                unsigned int v23 = *((_DWORD *)v21 + 7);
                int v24 = &v98;
                do
                {
                  long long v25 = v22;
                  uint64_t v26 = v24;
                  unsigned int v27 = *((_DWORD *)v22 + 7);
                  long long v28 = v22 + 1;
                  if (v27 >= v23)
                  {
                    long long v28 = v25;
                    int v24 = (void **)v25;
                  }
                  uint64_t v22 = (void *)*v28;
                }
                while (v22);
                if (v24 != &v98)
                {
                  if (v27 < v23) {
                    long long v25 = v26;
                  }
                  if (v23 >= *((_DWORD *)v25 + 7)) {
                    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t **)&v91, (unsigned int *)v21 + 7, (_DWORD *)v21 + 7);
                  }
                }
              }
              BOOL v29 = (uint64_t *)v21[1];
              if (v29)
              {
                do
                {
                  uint64_t v30 = v29;
                  BOOL v29 = (uint64_t *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  uint64_t v30 = (uint64_t *)v21[2];
                  BOOL v31 = *v30 == (void)v21;
                  uint64_t v21 = v30;
                }
                while (!v31);
              }
              uint64_t v21 = v30;
            }
            while (v30 != (uint64_t *)&v95);
            char v32 = (unsigned int *)v91;
          }
          std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)&v97, v32, (unsigned int *)&v92);
          std::__tree<int>::destroy((uint64_t)&v91, v92);
        }
        std::__tree<int>::destroy((uint64_t)&v94, v95);
        v13 += 3;
      }
      while (v13 != v102);
      if (!v99) {
        goto LABEL_130;
      }
      std::vector<std::vector<unsigned int>>::resize(&v107, 0xAAAAAAAAAAAAAAABLL * (v13 - v101));
      unint64_t v33 = v99;
      std::vector<std::vector<std::vector<quasar::Token>>>::resize((uint64_t *)&v104, v99);
      uint64_t v94 = 0;
      uint64_t v95 = 0;
      uint64_t v96 = 0;
      std::vector<std::set<std::string>>::resize((uint64_t *)&v94, v33);
      long long v82 = a4;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      std::vector<std::map<std::string,unsigned int>>::resize((uint64_t *)&v91, v33);
      uint64_t v34 = v101;
      if (v102 != v101)
      {
        unint64_t v35 = 0;
        do
        {
          memset(&v90, 0, sizeof(v90));
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          unint64_t v89 = 0;
          unsigned int v36 = &v34[3 * v35];
          uint64_t v37 = *v36;
          if (v36[1] != *v36)
          {
            unint64_t v38 = 0;
            unsigned int v83 = 0;
            do
            {
              unsigned int v39 = v37[56 * v38 + 8];
              std::operator+<char>();
              if (LOBYTE(v37[56 * v38 + 11])) {
                signed int v40 = " ";
              }
              else {
                signed int v40 = "";
              }
              uint64_t v41 = std::string::append(&v84, v40);
              long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
              int64_t v86 = v41->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v42;
              v41->__r_.__value_.__l.__size_ = 0;
              v41->__r_.__value_.__r.__words[2] = 0;
              v41->__r_.__value_.__r.__words[0] = 0;
              if (v86 >= 0) {
                uint64_t v43 = __p;
              }
              else {
                uint64_t v43 = (void **)__p[0];
              }
              if (v86 >= 0) {
                std::string::size_type v44 = HIBYTE(v86);
              }
              else {
                std::string::size_type v44 = (std::string::size_type)__p[1];
              }
              std::string::append(&v90, (const std::string::value_type *)v43, v44);
              if (SHIBYTE(v86) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v84.__r_.__value_.__l.__data_);
              }
              uint64_t v45 = (const quasar::Token *)((char *)v100[0][3 * v35] + 224 * v38);
              uint64_t v46 = v88;
              if ((unint64_t)v88 >= v89)
              {
                uint64_t v47 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v87, v45);
              }
              else
              {
                quasar::Token::Token(v88, v45);
                uint64_t v47 = (std::string *)((char *)v46 + 224);
              }
              uint64_t v88 = v47;
              ++v38;
              uint64_t v48 = &v101[3 * v35];
              uint64_t v37 = *v48;
              unint64_t v49 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v48[1] - (unsigned char *)*v48) >> 5);
              BOOL v50 = v49 == v38 || v37[56 * v38 + 8] != v39;
              uint64_t v51 = v98;
              if (v98)
              {
                uint64_t v52 = &v98;
                do
                {
                  long long v53 = v51;
                  uint64_t v54 = v52;
                  unsigned int v55 = *((_DWORD *)v51 + 7);
                  if (v55 >= v39) {
                    uint64_t v52 = (void **)v51;
                  }
                  else {
                    ++v51;
                  }
                  uint64_t v51 = (void *)*v51;
                }
                while (v51);
                if (v52 != &v98)
                {
                  if (v55 < v39) {
                    long long v53 = v54;
                  }
                  if (v39 < *((_DWORD *)v53 + 7)) {
                    BOOL v50 = 0;
                  }
                  if (v50)
                  {
                    if (0xAAAAAAAAAAAAAAABLL * ((v95 - (char *)v94) >> 3) <= v83) {
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    }
                    unint64_t v56 = (uint64_t *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v94[6 * v83], (const void **)&v90.__r_.__value_.__l.__data_);
                    if (0xAAAAAAAAAAAAAAABLL * ((v95 - (char *)v94) >> 3) <= v83) {
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    }
                    if (&v94[6 * v83 + 2] == (unsigned int *)v56)
                    {
                      if (0xAAAAAAAAAAAAAAABLL * ((v105 - (uint64_t)v104) >> 3) <= v83
                        || ((v58 = (uint64_t *)&v104[3 * v83], v59 = v58 + 1, unint64_t v60 = v58[1], v60 >= v58[2])
                          ? (v61 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v58, (uint64_t *)&v87)): (std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v58, (uint64_t *)&v87), v61 = v60 + 24), uint64_t *v59 = v61, 0xAAAAAAAAAAAAAAABLL * ((v105 - (uint64_t)v104) >> 3) <= v83))
                      {
                        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t **)v92 - v91) <= v83) {
LABEL_136:
                      }
                        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                      uint64_t v62 = &v104[3 * v83];
                      long long v64 = *v62;
                      uint64_t v63 = v62[1];
                      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
                      int v57 = -1 - 1431655765 * ((unint64_t)(v63 - v64) >> 3);
                      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v91[3 * v83], (const void **)&v90.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v84)+ 14) = v57;
                      if (0xAAAAAAAAAAAAAAABLL * ((v95 - (char *)v94) >> 3) <= v83) {
                        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                      }
                      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v94[6 * v83], (const void **)&v90.__r_.__value_.__l.__data_, (uint64_t)&v90);
                    }
                    else
                    {
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t **)v92 - v91) <= v83) {
                        goto LABEL_136;
                      }
                      v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
                      int v57 = *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v91[3 * v83], (const void **)&v90.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v84)+ 14);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * ((v108 - v107) >> 3) <= v35) {
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    }
                    uint64_t v65 = v107 + 24 * v35;
                    uint64_t v67 = (_DWORD **)(v65 + 8);
                    uint64_t v66 = *(_DWORD **)(v65 + 8);
                    long long v69 = (void *)(v65 + 16);
                    unint64_t v68 = *(void *)(v65 + 16);
                    if ((unint64_t)v66 >= v68)
                    {
                      uint64_t v71 = *(_DWORD **)v65;
                      uint64_t v72 = ((uint64_t)v66 - *(void *)v65) >> 2;
                      unint64_t v73 = v72 + 1;
                      if ((unint64_t)(v72 + 1) >> 62) {
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v74 = v68 - (void)v71;
                      if (v74 >> 1 > v73) {
                        unint64_t v73 = v74 >> 1;
                      }
                      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v75 = v73;
                      }
                      if (v75)
                      {
                        long long v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v69, v75);
                        uint64_t v66 = *v67;
                        uint64_t v71 = *(_DWORD **)v65;
                      }
                      else
                      {
                        long long v76 = 0;
                      }
                      int v77 = &v76[4 * v72];
                      *(_DWORD *)int v77 = v57;
                      unint64_t v70 = v77 + 4;
                      while (v66 != v71)
                      {
                        int v78 = *--v66;
                        *((_DWORD *)v77 - 1) = v78;
                        v77 -= 4;
                      }
                      *(void *)uint64_t v65 = v77;
                      char *v67 = v70;
                      *long long v69 = &v76[4 * v75];
                      if (v71) {
                        operator delete(v71);
                      }
                    }
                    else
                    {
                      *uint64_t v66 = v57;
                      unint64_t v70 = v66 + 1;
                    }
                    char *v67 = v70;
                    MEMORY[0x1B3EA7B20](&v90, "");
                    long long v80 = v87;
                    for (uint64_t j = v88; j != v80; quasar::Token::~Token((void **)&j[-10].__r_.__value_.__r.__words[2]))
                      ;
                    uint64_t v88 = v80;
                    ++v83;
                    long long v81 = &v101[3 * v35];
                    uint64_t v37 = *v81;
                    unint64_t v49 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v81[1] - (unsigned char *)*v81) >> 5);
                  }
                }
              }
            }
            while (v49 > v38);
          }
          __p[0] = &v87;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v90.__r_.__value_.__l.__data_);
          }
          ++v35;
          uint64_t v34 = v101;
        }
        while (0xAAAAAAAAAAAAAAABLL * (v102 - v101) > v35);
      }
      if (a3) {
        quasar::TextProc::RepairConfidence((uint64_t *)&v104);
      }
      std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(v82, &v107, (uint64_t ***)&v104);
      v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
      std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
      uint64_t v91 = (uint64_t **)&v94;
      std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
    }
    std::__tree<int>::destroy((uint64_t)&v97, v98);
LABEL_133:
    uint64_t v97 = v100;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
LABEL_134:
    v100[0] = (void **)&v101;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v100);
  }
  unint64_t v101 = (void **)&v104;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&v101);
  int v104 = (void **)&v107;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v104);
}

void sub_1B1DB29BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t *a39,void *a40,uint64_t a41,uint64_t a42)
{
  std::string __p = &a33;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a33 = &a36;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::__tree<int>::destroy((uint64_t)&a39, a40);
  a39 = &a42;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  a42 = v42 - 168;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  *(void *)(v42 - 168) = v42 - 144;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 168));
  *(void *)(v42 - 144) = v42 - 120;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 144));
  _Unwind_Resume(a1);
}

void std::vector<std::vector<unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        int v10 = *(void **)(v8 - 24);
        v8 -= 24;
        size_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::vector<quasar::Token>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<quasar::Token>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::set<std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::set<std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 24;
        std::__tree<std::string>::destroy(v3 - 24, *(char **)(v3 - 16));
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::map<std::string,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::map<std::string,unsigned int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 24;
        std::__tree<std::string>::destroy(v3 - 24, *(char **)(v3 - 16));
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void quasar::TextProc::RepairConfidence(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  if (v1 == *a1) {
    return;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t v4 = v2 + 24 * v3;
    uint64_t v6 = *(void *)(v4 + 8);
    BOOL v5 = (void *)(v4 + 8);
    uint64_t v37 = (uint64_t **)(v2 + 24 * v3);
    uint64_t v7 = *v37;
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)*v37) >> 3) < 2) {
      goto LABEL_55;
    }
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    unint64_t v36 = v3;
    uint64_t v10 = 0;
    if (*v7 != v9)
    {
      do
      {
        uint64_t v10 = (uint64_t)(float)(*(float *)(v8 + 40) + (float)v10);
        v8 += 224;
      }
      while (v8 != v9);
    }
    char v11 = 0;
    unint64_t v12 = 1;
    uint64_t v13 = *v37;
    do
    {
      clockid_t v14 = &v13[3 * v12];
      uint64_t v15 = v14[1];
      if (*v14 == v15)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = *v14;
        do
        {
          uint64_t v16 = (uint64_t)(float)(*(float *)(v17 + 40) + (float)v16);
          v17 += 224;
        }
        while (v17 != v15);
      }
      uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((v15 - *v14) >> 5) * v10;
      uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((v7[1] - *v7) >> 5) * v16;
      if (v19) {
        BOOL v20 = v18 < v19;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20)
      {
        int v21 = quasar::gLogLevel;
        if ((v11 & 1) == 0)
        {
          if (quasar::gLogLevel < 5) {
            goto LABEL_39;
          }
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v49 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Changed confidence for slot=", 28);
          std::ostream::operator<<();
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
          if (quasar::gLogLevel < 5)
          {
LABEL_39:
            uint64_t v29 = *v14;
            uint64_t v30 = v14[1];
            while (v29 != v30)
            {
              *(float *)(v29 + 40) = (float)(v18 * (uint64_t)*(float *)(v29 + 40) / v19);
              v29 += 224;
            }
            if (quasar::gLogLevel <= 4)
            {
              char v11 = 1;
            }
            else
            {
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              long long v54 = 0u;
              long long v55 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
              long long v50 = 0u;
              long long v51 = 0u;
              long long v49 = 0u;
              long long v47 = 0u;
              long long v48 = 0u;
              long long v45 = 0u;
              long long v46 = 0u;
              long long v43 = 0u;
              long long v44 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"phrase=", 7);
              BOOL v31 = (void *)std::ostream::operator<<();
              char v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" new: ", 6);
              unint64_t v38 = ",";
              uint64_t v39 = 1;
              quasar::join<std::vector<quasar::Token>>(v14, (uint64_t *)&v38);
              if ((v42 & 0x80u) == 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              if ((v42 & 0x80u) == 0) {
                uint64_t v34 = v42;
              }
              else {
                uint64_t v34 = v41;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)p_p, v34);
              if ((char)v42 < 0) {
                operator delete(__p);
              }
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
              char v11 = 1;
            }
            goto LABEL_53;
          }
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v49 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"1best: ", 7);
          unint64_t v38 = ",";
          uint64_t v39 = 1;
          quasar::join<std::vector<quasar::Token>>(v7, (uint64_t *)&v38);
          if ((v42 & 0x80u) == 0) {
            unsigned int v27 = &__p;
          }
          else {
            unsigned int v27 = __p;
          }
          if ((v42 & 0x80u) == 0) {
            uint64_t v28 = v42;
          }
          else {
            uint64_t v28 = v41;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
          if ((char)v42 < 0) {
            operator delete(__p);
          }
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
          int v21 = quasar::gLogLevel;
        }
        if (v21 >= 5)
        {
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v49 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"phrase=", 7);
          uint64_t v22 = (void *)std::ostream::operator<<();
          unsigned int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" orig: ", 7);
          unint64_t v38 = ",";
          uint64_t v39 = 1;
          quasar::join<std::vector<quasar::Token>>(v14, (uint64_t *)&v38);
          if ((v42 & 0x80u) == 0) {
            int v24 = &__p;
          }
          else {
            int v24 = __p;
          }
          if ((v42 & 0x80u) == 0) {
            uint64_t v25 = v42;
          }
          else {
            uint64_t v25 = v41;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
          if ((char)v42 < 0) {
            operator delete(__p);
          }
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
        }
        goto LABEL_39;
      }
LABEL_53:
      ++v12;
      uint64_t v13 = *v37;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v5 - (void)*v37) >> 3) > v12);
    unint64_t v3 = v36;
    uint64_t v2 = *a1;
    uint64_t v1 = a1[1];
LABEL_55:
    ++v3;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3) > v3);
}

void sub_1B1DB3284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a20);
  _Unwind_Resume(a1);
}

uint64_t quasar::join<std::vector<quasar::Token>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::Token>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1DB3448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::TextProc::GranularizedTokenPhraseChoiceList(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  if (a1[3] == a1[4] || (uint64_t v4 = *a1, v5 = a1[1], *a1 == v5))
  {
    std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]((void *)a2, (uint64_t)a1);
  }
  else
  {
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    std::vector<std::vector<unsigned int>>::resize((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
    uint64_t v6 = v2[3];
    uint64_t v157 = (uint64_t *)a2;
    if (v2[4] != v6)
    {
      unint64_t v7 = 0;
      long long v155 = (uint64_t *)(a2 + 24);
      uint64_t v154 = v2;
      do
      {
        std::string __p = 0;
        v166 = 0;
        v167 = 0;
        uint64_t v8 = v2[1];
        uint64_t v9 = *v2;
        do
        {
          memset(v177, 0, 24);
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v177, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
          uint64_t v10 = *(void *)v177;
          char v11 = v166;
          if (v166 >= v167)
          {
            uint64_t v13 = __p;
            uint64_t v14 = (v166 - __p) >> 2;
            unint64_t v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v16 = v167 - __p;
            if ((v167 - __p) >> 1 > v15) {
              unint64_t v15 = v16 >> 1;
            }
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17)
            {
              uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v167, v17);
              uint64_t v13 = __p;
              char v11 = v166;
            }
            else
            {
              uint64_t v18 = 0;
            }
            uint64_t v19 = &v18[4 * v14];
            *(_DWORD *)uint64_t v19 = *(_DWORD *)(v10 + 4 * v7);
            unint64_t v12 = v19 + 4;
            while (v11 != v13)
            {
              int v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            std::string __p = v19;
            v167 = &v18[4 * v17];
            if (v13) {
              operator delete(v13);
            }
          }
          else
          {
            *(_DWORD *)v166 = *(_DWORD *)(*(void *)v177 + 4 * v7);
            unint64_t v12 = v166 + 4;
          }
          v166 = v12;
          if (*(void *)v177)
          {
            *(void *)&v177[8] = *(void *)v177;
            operator delete(*(void **)v177);
          }
          v9 += 24;
        }
        while (v9 != v8);
        if (*(_DWORD *)__p)
        {
          long long v191 = 0u;
          long long v192 = 0u;
          long long v189 = 0u;
          long long v190 = 0u;
          *(_OWORD *)v187 = 0u;
          long long v188 = 0u;
          *(_OWORD *)v185 = 0u;
          long long v186 = 0u;
          long long v183 = 0u;
          long long v184 = 0u;
          long long v181 = 0u;
          *(_OWORD *)v182 = 0u;
          *(_OWORD *)v179 = 0u;
          long long v180 = 0u;
          long long v178 = 0u;
          memset(v177, 0, sizeof(v177));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v177);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"Unsupported n-best index configuration", 38);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v177);
        }
        unint64_t v156 = v7;
        int v21 = (void *)(v6 + 24 * v7);
        uint64_t v22 = (void *)v21[1];
        v161 = v21;
        v163 = v21 + 1;
        unsigned int v23 = (uint64_t *)*v21;
        unint64_t v24 = *(void *)(a2 + 32);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *v21) >> 3) > 1)
        {
          uint64_t v159 = *v155;
          unsigned int v27 = (const quasar::Token *)*v23;
          uint64_t v26 = (const quasar::Token *)v23[1];
          if ((const quasar::Token *)*v23 == v26)
          {
            unsigned __int8 v42 = (void *)*v21;
          }
          else
          {
            do
            {
              quasar::Token::Token((std::string *)v177, v27);
              v174 = 0;
              uint64_t v175 = 0;
              v176 = 0;
              v172 = &v174;
              char v173 = 0;
              v174 = (char *)operator new(0xE0uLL);
              uint64_t v175 = (uint64_t)v174;
              v176 = v174 + 224;
              uint64_t v175 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v176, (uint64_t)v177, (uint64_t)&v190, (uint64_t)v174);
              *(void *)&long long v170 = 0;
              long long v169 = 0uLL;
              v172 = (char **)&v169;
              char v173 = 0;
              *(void *)&long long v169 = operator new(0x18uLL);
              *((void *)&v169 + 1) = v169;
              *(void *)&long long v170 = v169 + 24;
              *((void *)&v169 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v170, (uint64_t *)&v174, (uint64_t *)v177, (void *)v169);
              v172 = &v174;
              std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
              if (SBYTE7(v188) < 0) {
                operator delete(v187[0]);
              }
              if (SBYTE7(v186) < 0) {
                operator delete(v185[0]);
              }
              v172 = (char **)&v183 + 1;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
              if (SBYTE7(v183) < 0) {
                operator delete(v182[0]);
              }
              v172 = (char **)&v180 + 1;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
              if (SBYTE7(v180) < 0) {
                operator delete(v179[0]);
              }
              if ((v177[23] & 0x80000000) != 0) {
                operator delete(*(void **)v177);
              }
              unint64_t v28 = *(void *)(a2 + 32);
              if (v28 >= *(void *)(a2 + 40))
              {
                uint64_t v29 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(v155, (uint64_t **)&v169);
              }
              else
              {
                std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)v155, (uint64_t **)&v169);
                uint64_t v29 = v28 + 24;
              }
              *(void *)(a2 + 32) = v29;
              uint64_t v30 = *(void *)a2;
              if (*(void *)(a2 + 8) == *(void *)a2) {
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              }
              unint64_t v31 = *(void *)(v30 + 16);
              char v32 = *(_DWORD **)(v30 + 8);
              if ((unint64_t)v32 >= v31)
              {
                uint64_t v34 = *(_DWORD **)v30;
                uint64_t v35 = ((uint64_t)v32 - *(void *)v30) >> 2;
                unint64_t v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 62) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v37 = v31 - (void)v34;
                if (v37 >> 1 > v36) {
                  unint64_t v36 = v37 >> 1;
                }
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v36;
                }
                if (v38)
                {
                  uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v30 + 16, v38);
                  uint64_t v34 = *(_DWORD **)v30;
                  char v32 = *(_DWORD **)(v30 + 8);
                }
                else
                {
                  uint64_t v39 = 0;
                }
                signed int v40 = &v39[4 * v35];
                *(_DWORD *)signed int v40 = 0;
                unint64_t v33 = v40 + 4;
                while (v32 != v34)
                {
                  int v41 = *--v32;
                  *((_DWORD *)v40 - 1) = v41;
                  v40 -= 4;
                }
                *(void *)uint64_t v30 = v40;
                *(void *)(v30 + 8) = v33;
                *(void *)(v30 + 16) = &v39[4 * v38];
                if (v34) {
                  operator delete(v34);
                }
              }
              else
              {
                *char v32 = 0;
                unint64_t v33 = v32 + 1;
              }
              *(void *)(v30 + 8) = v33;
              *(void *)v177 = &v169;
              std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
              unsigned int v27 = (const quasar::Token *)((char *)v27 + 224);
            }
            while (v27 != v26);
            unsigned __int8 v42 = (void *)*v161;
            uint64_t v22 = (void *)*v163;
          }
          unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v159) >> 3);
          uint64_t v62 = v42 + 3;
          while (v62 != v22)
          {
            uint64_t v63 = v62;
            long long v169 = 0u;
            long long v170 = 0u;
            int v171 = 1065353216;
            uint64_t v64 = v42[3];
            if (v42[4] != v64)
            {
              unint64_t v65 = 0;
              do
              {
                unint64_t v168 = 0;
                if (!v65 || (uint64_t v66 = *v23, v67 = v23[1], *v23 == v67))
                {
                  unint64_t v69 = 0;
                }
                else
                {
                  unint64_t v68 = 0;
                  unint64_t v69 = 0;
                  unsigned int v70 = *(_DWORD *)(*v63 + 224 * v65 + 28);
                  unsigned int v71 = -1;
                  do
                  {
                    unsigned int v72 = *(_DWORD *)(v66 + 28);
                    if (v70 <= v72) {
                      int v73 = *(_DWORD *)(v66 + 28);
                    }
                    else {
                      int v73 = *(_DWORD *)(*v63 + 224 * v65 + 28);
                    }
                    if (v72 >= v70) {
                      int v74 = *(_DWORD *)(*v63 + 224 * v65 + 28);
                    }
                    else {
                      int v74 = *(_DWORD *)(v66 + 28);
                    }
                    unsigned int v75 = v73 - v74;
                    if (v75 >= v71) {
                      unint64_t v76 = v69;
                    }
                    else {
                      unint64_t v76 = v68;
                    }
                    if (v75 >= v71) {
                      unsigned int v75 = v71;
                    }
                    if (v72)
                    {
                      unint64_t v69 = v76;
                      unsigned int v71 = v75;
                    }
                    ++v68;
                    v66 += 224;
                  }
                  while (v66 != v67);
                }
                unint64_t v168 = v69;
                unint64_t v77 = v69 + v61;
                uint64_t v78 = *(void *)(a2 + 24);
                if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 32) - v78) >> 3) <= v69 + v61) {
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                }
                long long v79 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(&v169, &v168);
                long long v80 = (const quasar::Token *)(v64 + 224 * v65);
                if (v79)
                {
                  uint64_t v81 = *(void *)(v78 + 24 * v77 + 8);
                  unint64_t v82 = *(void *)(v81 - 16);
                  if (v82 >= *(void *)(v81 - 8))
                  {
                    uint64_t v83 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)(v81 - 24), v80);
                  }
                  else
                  {
                    quasar::Token::Token(*(std::string **)(v81 - 16), v80);
                    uint64_t v83 = v82 + 224;
                    *(void *)(v81 - 16) = v82 + 224;
                  }
                  *(void *)(v81 - 16) = v83;
                }
                else
                {
                  quasar::Token::Token((std::string *)v177, v80);
                  v174 = 0;
                  uint64_t v175 = 0;
                  v176 = 0;
                  v172 = &v174;
                  char v173 = 0;
                  v174 = (char *)operator new(0xE0uLL);
                  uint64_t v175 = (uint64_t)v174;
                  v176 = v174 + 224;
                  uint64_t v175 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v176, (uint64_t)v177, (uint64_t)&v190, (uint64_t)v174);
                  std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)(v78 + 24 * v77), (uint64_t)&v174);
                  v172 = &v174;
                  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
                  if (SBYTE7(v188) < 0) {
                    operator delete(v187[0]);
                  }
                  if (SBYTE7(v186) < 0) {
                    operator delete(v185[0]);
                  }
                  v172 = (char **)&v183 + 1;
                  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
                  if (SBYTE7(v183) < 0) {
                    operator delete(v182[0]);
                  }
                  v172 = (char **)&v180 + 1;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
                  if (SBYTE7(v180) < 0) {
                    operator delete(v179[0]);
                  }
                  if ((v177[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v177);
                  }
                  std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v169, &v168, &v168);
                }
                ++v65;
                uint64_t v64 = *v63;
              }
              while (v65 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v42[4] - *v63) >> 5));
            }
            std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v169);
            uint64_t v62 = v63 + 3;
            uint64_t v22 = (void *)*v163;
            unsigned __int8 v42 = v63;
          }
          uint64_t v84 = *(void *)(a2 + 24) + 24 * v61;
          for (unint64_t i = v156; v84 != *(void *)(a2 + 32); v84 += 24)
          {
            uint64_t v85 = *(uint64_t **)v84;
            long long v169 = 0uLL;
            *(void *)&long long v170 = 0;
            uint64_t v86 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v169, v85);
            uint64_t v87 = *(uint64_t **)v84;
            uint64_t v88 = *(void *)a2;
            uint64_t v89 = *(void *)(a2 + 8);
            *((void *)&v169 + 1) = v86;
            unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * ((v89 - v88) >> 3);
            unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v84 + 8) - (void)v87) >> 3);
            if (v90 < v91)
            {
              long long v191 = 0u;
              long long v192 = 0u;
              long long v189 = 0u;
              long long v190 = 0u;
              *(_OWORD *)v187 = 0u;
              long long v188 = 0u;
              *(_OWORD *)v185 = 0u;
              long long v186 = 0u;
              long long v183 = 0u;
              long long v184 = 0u;
              long long v181 = 0u;
              *(_OWORD *)v182 = 0u;
              *(_OWORD *)v179 = 0u;
              long long v180 = 0u;
              long long v178 = 0u;
              memset(v177, 0, sizeof(v177));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v177);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"n-best output size is wrong", 27);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v177);
            }
            if (v91 >= 2)
            {
              unint64_t v92 = 1;
              uint64_t v158 = v84;
              do
              {
                uint64_t v93 = &v87[3 * v92];
                uint64_t v95 = (uint64_t *)*((void *)&v169 + 1);
                uint64_t v94 = v169;
                v162 = v93;
                v164 = v87;
                if ((void)v169 == *((void *)&v169 + 1))
                {
                  unint64_t v101 = (uint64_t *)v169;
                }
                else
                {
                  uint64_t v96 = v87[3 * v92 + 1];
                  uint64_t v97 = *v93;
                  uint64_t v98 = (v96 - *v93) >> 5;
                  unint64_t v99 = 0x6DB6DB6DB6DB6DB7 * v98;
                  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * v98) <= 1) {
                    uint64_t v100 = 1;
                  }
                  else {
                    uint64_t v100 = 0x6DB6DB6DB6DB6DB7 * v98;
                  }
                  uint64_t v160 = v169;
                  unint64_t v101 = (uint64_t *)v169;
                  while (1)
                  {
                    uint64_t v102 = *v101;
                    if (0x6DB6DB6DB6DB6DB7 * ((v101[1] - *v101) >> 5) == v99)
                    {
                      if (v96 == v97) {
                        break;
                      }
                      BOOL v103 = 0;
                      uint64_t v104 = 0;
                      do
                      {
                        uint64_t v105 = (unsigned __int8 *)(v102 + 224 * v104);
                        uint64_t v106 = (unsigned __int8 **)(v97 + 224 * v104);
                        uint64_t v107 = v105[23];
                        if ((v107 & 0x80u) == 0) {
                          uint64_t v108 = (unsigned __int8 *)v105[23];
                        }
                        else {
                          uint64_t v108 = (unsigned __int8 *)*((void *)v105 + 1);
                        }
                        uint64_t v109 = (unsigned __int8 *)*((unsigned __int8 *)v106 + 23);
                        int v110 = (char)v109;
                        if ((char)v109 < 0) {
                          uint64_t v109 = v106[1];
                        }
                        if (v108 != v109) {
                          break;
                        }
                        if (v110 >= 0) {
                          uint64_t v111 = (unsigned __int8 *)(v97 + 224 * v104);
                        }
                        else {
                          uint64_t v111 = *v106;
                        }
                        if ((v107 & 0x80) != 0)
                        {
                          if (memcmp(*(const void **)v105, v111, *((void *)v105 + 1))) {
                            break;
                          }
                        }
                        else if (v105[23])
                        {
                          while (*v105 == *v111)
                          {
                            ++v105;
                            ++v111;
                            if (!--v107) {
                              goto LABEL_154;
                            }
                          }
                          break;
                        }
LABEL_154:
                        BOOL v103 = ++v104 >= v99;
                      }
                      while (v104 != v100);
                      if (v103) {
                        break;
                      }
                    }
                    v101 += 3;
                    if (v101 == v95)
                    {
                      a2 = (uint64_t)v157;
                      uint64_t v84 = v158;
                      uint64_t v112 = *v157;
                      uint64_t v113 = v157[1];
                      uint64_t v94 = v160;
                      goto LABEL_164;
                    }
                  }
                  a2 = (uint64_t)v157;
                  uint64_t v84 = v158;
                  uint64_t v94 = v160;
                }
                uint64_t v112 = *(void *)a2;
                uint64_t v113 = *(void *)(a2 + 8);
                if (v101 == v95)
                {
LABEL_164:
                  if (0xAAAAAAAAAAAAAAABLL * ((v113 - v112) >> 3) <= v92) {
LABEL_226:
                  }
                    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                  unint64_t v120 = v112 + 24 * v92;
                  int v121 = -1431655765 * (((unint64_t)v95 - v94) >> 3);
                  v123 = (_DWORD **)(v120 + 8);
                  v122 = *(_DWORD **)(v120 + 8);
                  long long v125 = (void *)(v120 + 16);
                  unint64_t v124 = *(void *)(v120 + 16);
                  if ((unint64_t)v122 >= v124)
                  {
                    std::string::size_type v127 = *(_DWORD **)v120;
                    uint64_t v128 = ((uint64_t)v122 - *(void *)v120) >> 2;
                    unint64_t v129 = v128 + 1;
                    if ((unint64_t)(v128 + 1) >> 62) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v130 = v124 - (void)v127;
                    if (v130 >> 1 > v129) {
                      unint64_t v129 = v130 >> 1;
                    }
                    if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v131 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v131 = v129;
                    }
                    if (v131)
                    {
                      uint64_t v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v125, v131);
                      v122 = *v123;
                      std::string::size_type v127 = *(_DWORD **)v120;
                    }
                    else
                    {
                      uint64_t v132 = 0;
                    }
                    v139 = &v132[4 * v128];
                    *(_DWORD *)v139 = v121;
                    v126 = v139 + 4;
                    while (v122 != v127)
                    {
                      int v140 = *--v122;
                      *((_DWORD *)v139 - 1) = v140;
                      v139 -= 4;
                    }
                    *(void *)unint64_t v120 = v139;
                    std::wstring *v123 = v126;
                    *long long v125 = &v132[4 * v131];
                    if (v127) {
                      operator delete(v127);
                    }
                  }
                  else
                  {
                    _DWORD *v122 = v121;
                    v126 = v122 + 1;
                  }
                  std::wstring *v123 = v126;
                  std::string::size_type v141 = (void *)*((void *)&v169 + 1);
                  if (*((void *)&v169 + 1) >= (unint64_t)v170)
                  {
                    uint64_t v142 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v169, v162);
                  }
                  else
                  {
                    **((void **)&v169 + 1) = 0;
                    v141[1] = 0;
                    void v141[2] = 0;
                    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v141, *v162, v164[3 * v92 + 1], 0x6DB6DB6DB6DB6DB7 * ((v164[3 * v92 + 1] - *v162) >> 5));
                    uint64_t v142 = (uint64_t)(v141 + 3);
                  }
                  *((void *)&v169 + 1) = v142;
                }
                else
                {
                  if (0xAAAAAAAAAAAAAAABLL * ((v113 - v112) >> 3) <= v92) {
                    goto LABEL_226;
                  }
                  unint64_t v114 = v112 + 24 * v92;
                  unint64_t v116 = (_DWORD **)(v114 + 8);
                  v115 = *(_DWORD **)(v114 + 8);
                  unint64_t v118 = (void *)(v114 + 16);
                  unint64_t v117 = *(void *)(v114 + 16);
                  if ((unint64_t)v115 >= v117)
                  {
                    uint64_t v133 = *(_DWORD **)v114;
                    uint64_t v134 = ((uint64_t)v115 - *(void *)v114) >> 2;
                    unint64_t v135 = v134 + 1;
                    if ((unint64_t)(v134 + 1) >> 62) {
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v136 = v117 - (void)v133;
                    if (v136 >> 1 > v135) {
                      unint64_t v135 = v136 >> 1;
                    }
                    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v137 = v135;
                    }
                    if (v137)
                    {
                      uint64_t v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v118, v137);
                      v115 = *v116;
                      uint64_t v133 = *(_DWORD **)v114;
                    }
                    else
                    {
                      uint64_t v138 = 0;
                    }
                    std::string v143 = &v138[4 * v134];
                    *(_DWORD *)std::string v143 = 0;
                    v119 = v143 + 4;
                    while (v115 != v133)
                    {
                      int v144 = *--v115;
                      *((_DWORD *)v143 - 1) = v144;
                      v143 -= 4;
                    }
                    *(void *)unint64_t v114 = v143;
                    unint64_t *v116 = v119;
                    *unint64_t v118 = &v138[4 * v137];
                    if (v133) {
                      operator delete(v133);
                    }
                  }
                  else
                  {
                    _DWORD *v115 = 0;
                    v119 = v115 + 1;
                  }
                  unint64_t *v116 = v119;
                }
                ++v92;
                uint64_t v87 = *(uint64_t **)v84;
              }
              while (v92 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v84 + 8) - *(void *)v84) >> 3));
            }
            unint64_t i = v156;
            if ((long long *)v84 != &v169) {
              std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v84, (uint64_t *)v169, *((uint64_t **)&v169 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v169 + 1) - v169) >> 3));
            }
            *(void *)v177 = &v169;
            std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v177);
          }
        }
        else
        {
          if (v24 >= *(void *)(a2 + 40))
          {
            uint64_t v25 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(v155, (uint64_t **)v21);
          }
          else
          {
            std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)v155, (uint64_t **)v21);
            uint64_t v25 = v24 + 24;
          }
          unint64_t i = v156;
          *(void *)(a2 + 32) = v25;
          long long v45 = __p;
          long long v44 = v12;
          if (v12 == __p) {
            goto LABEL_205;
          }
          unint64_t v46 = 0;
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) <= v46) {
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v47 = *(void *)a2 + 24 * v46;
            long long v49 = (_DWORD **)(v47 + 8);
            long long v48 = *(_DWORD **)(v47 + 8);
            long long v51 = (void *)(v47 + 16);
            unint64_t v50 = *(void *)(v47 + 16);
            if ((unint64_t)v48 >= v50)
            {
              long long v53 = *(_DWORD **)v47;
              uint64_t v54 = ((uint64_t)v48 - *(void *)v47) >> 2;
              unint64_t v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v56 = v50 - (void)v53;
              if (v56 >> 1 > v55) {
                unint64_t v55 = v56 >> 1;
              }
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v57 = v55;
              }
              if (v57)
              {
                long long v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v51, v57);
                long long v48 = *v49;
                long long v53 = *(_DWORD **)v47;
              }
              else
              {
                long long v58 = 0;
              }
              long long v59 = &v58[4 * v54];
              *(_DWORD *)long long v59 = *(_DWORD *)&v45[4 * v46];
              long long v52 = v59 + 4;
              while (v48 != v53)
              {
                int v60 = *--v48;
                *((_DWORD *)v59 - 1) = v60;
                v59 -= 4;
              }
              *(void *)uint64_t v47 = v59;
              *long long v49 = v52;
              *long long v51 = &v58[4 * v57];
              if (v53) {
                operator delete(v53);
              }
            }
            else
            {
              *long long v48 = *(_DWORD *)&v45[4 * v46];
              long long v52 = v48 + 1;
            }
            *long long v49 = v52;
            ++v46;
            long long v45 = __p;
          }
          while (v46 < (v166 - __p) >> 2);
        }
        long long v44 = __p;
LABEL_205:
        uint64_t v2 = v154;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v7 = i + 1;
        uint64_t v6 = v154[3];
      }
      while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v154[4] - v6) >> 3));
    }
    memset(v177, 0, 24);
    std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(v177, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)a2);
    v145 = *(void **)&v177[8];
    std::string::size_type v146 = *(void **)v177;
    if (*(void *)v177 != *(void *)&v177[8])
    {
      unint64_t v147 = 0;
      v148 = *(uint64_t **)v177;
      do
      {
        uint64_t v150 = *v148;
        uint64_t v149 = v148[1];
        v148 += 3;
        unint64_t v151 = (v149 - v150) >> 2;
        if (v147 <= v151) {
          unint64_t v147 = v151;
        }
      }
      while (v148 != *(uint64_t **)&v177[8]);
      while (v146 != v145)
      {
        if (v147 == (uint64_t)(v146[1] - *v146) >> 2)
        {
          unint64_t v152 = *(void *)(a2 + 8);
          if (v152 >= *(void *)(a2 + 16))
          {
            uint64_t v153 = std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>((uint64_t *)a2, (uint64_t)v146);
          }
          else
          {
            std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(a2, (uint64_t)v146);
            uint64_t v153 = v152 + 24;
          }
          *(void *)(a2 + 8) = v153;
        }
        v146 += 3;
      }
    }
    quasar::TextProc::RepairConfidence((uint64_t *)(a2 + 24));
    *(void *)&long long v169 = v177;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
  }
}

void sub_1B1DB43C4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1DB4514);
}

void sub_1B1DB43DC()
{
}

void sub_1B1DB43F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a34);
  a34 = (void **)&a36;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a34);
  quasar::Token::~Token(&a39);
  if (a25) {
    operator delete(a25);
  }
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(v39);
  _Unwind_Resume(a1);
}

void sub_1B1DB4440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(v40);
  _Unwind_Resume(a1);
}

void sub_1B1DB446C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a25) {
    operator delete(a25);
  }
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(v25);
  _Unwind_Resume(a1);
}

void sub_1B1DB4478()
{
}

void sub_1B1DB448C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  *(void *)(v29 - 16) = v30;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a29);
  JUMPOUT(0x1B1DB44FCLL);
}

void sub_1B1DB449C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39)
{
  a34 = (void **)&a36;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a34);
  quasar::Token::~Token(&a39);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a29);
  JUMPOUT(0x1B1DB44FCLL);
}

void sub_1B1DB44D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  a39 = (void **)&a29;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a39);
  if (a25) {
    operator delete(a25);
  }
  std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::~pair(v39);
  _Unwind_Resume(a1);
}

void *std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100]<std::vector<std::vector<unsigned int>>&,std::vector<std::vector<std::vector<quasar::Token>>>&,0>(void *a1, uint64_t *a2, uint64_t ***a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(a1 + 3, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  return a1;
}

void sub_1B1DB459C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(void *result, uint64_t **a2, uint64_t **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1DB461C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(uint64_t a1, uint64_t **a2, uint64_t **a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  char v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (v6[1] - *v6));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1DB46E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<quasar::Token>>>,std::vector<std::vector<quasar::Token>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    unint64_t v3 = v1;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void *std::pair<std::vector<std::vector<unsigned int>>,std::vector<std::vector<std::vector<quasar::Token>>>>::pair[abi:ne180100](void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::vector<std::vector<quasar::Token>>>::__init_with_size[abi:ne180100]<std::vector<std::vector<quasar::Token>>*,std::vector<std::vector<quasar::Token>>*>(a1 + 3, *(uint64_t ***)(a2 + 24), *(uint64_t ***)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  return a1;
}

void sub_1B1DB4800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>(uint64_t a1, uint64_t **a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  *unint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  double result = std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1DB4870(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)char v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v15 += 24;
  std::vector<std::vector<std::vector<quasar::Token>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer(v14);
  return v12;
}

void sub_1B1DB4988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<unsigned int>>::__init_with_size[abi:ne180100]<std::vector<unsigned int>*,std::vector<unsigned int>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1DB4A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  char v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1DB4AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__tree<unsigned int>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  unint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        unint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unint64_t v5 = v3 + 1;
  }
  else
  {
    unint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void std::vector<std::vector<std::vector<quasar::Token>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    unint64_t v17 = &v16[v14];
    std::vector<std::vector<std::vector<quasar::Token>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer(&v15);
  }
}

void sub_1B1DB4CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<quasar::Token>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::set<std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 24 * a2;
      uint64_t v14 = 24 * a2;
      unint64_t v15 = (void *)(v7 + 8);
      do
      {
        *unint64_t v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    unsigned int v23 = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v19 = v12;
    int v20 = &v12[24 * v8];
    uint64_t v22 = &v12[24 * v11];
    uint64_t v16 = &v20[24 * a2];
    uint64_t v17 = 24 * a2;
    uint64_t v18 = v20 + 8;
    do
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    int v21 = v16;
    std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::set<std::string>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_1B1DB4E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  void v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = v9;
      unint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - ++*(_DWORD *)(result + 24) = v10;
        *unint64_t v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - ++*(_DWORD *)(result + 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::set<std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::set<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::string>::destroy(i - 24, *(char **)(i - 16));
  }
}

void **std::vector<std::map<std::string,unsigned int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 24 * a2;
      uint64_t v14 = 24 * a2;
      unint64_t v15 = (void *)(v7 + 8);
      do
      {
        *unint64_t v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    unsigned int v23 = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v19 = v12;
    int v20 = &v12[24 * v8];
    uint64_t v22 = &v12[24 * v11];
    uint64_t v16 = &v20[24 * a2];
    uint64_t v17 = 24 * a2;
    long long v18 = v20 + 8;
    do
    {
      *long long v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    int v21 = v16;
    std::vector<std::map<std::string,unsigned int>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::set<std::string>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_1B1DB51C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<std::string,unsigned int>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,unsigned int>>,std::reverse_iterator<std::map<std::string,unsigned int>*>,std::reverse_iterator<std::map<std::string,unsigned int>*>,std::reverse_iterator<std::map<std::string,unsigned int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,unsigned int>>,std::reverse_iterator<std::map<std::string,unsigned int>*>,std::reverse_iterator<std::map<std::string,unsigned int>*>,std::reverse_iterator<std::map<std::string,unsigned int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  void v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = v9;
      unint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - ++*(_DWORD *)(result + 24) = v10;
        *unint64_t v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - ++*(_DWORD *)(result + 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,unsigned int>>,std::reverse_iterator<std::map<std::string,unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,unsigned int>>,std::reverse_iterator<std::map<std::string,unsigned int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *quasar::joinToStream<std::vector<quasar::Token>>(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      uint64_t result = quasar::operator<<(v6, v3);
      char v7 = 0;
      v3 += 224;
    }
    while (v3 != v4);
  }
  return result;
}

void *std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B1DB5404(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<unsigned int>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1B1DB5510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeRealignmentDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 58), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[56], a2, 16, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v13, "am-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic model (transition model) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 70), (uint64_t)__p, 1, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  unint64_t v4 = this + 67;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 67), (uint64_t)__p, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 540, (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "first-pass-lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "First pass lattice beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 69), (uint64_t)__p, 1, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding lattice beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 548, (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "retry-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Fall-back decoding beam");
  unint64_t v5 = this + 68;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 68), (uint64_t)__p, 0, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "HCP FST filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 73), (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "tree-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tree file");
  uint64_t v6 = (char *)(this + 76);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 76), (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "phone-map-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Phone mappings file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 79), (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  uint64_t v7 = (char *)(this + 82);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 82), (uint64_t)__p, 1, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  unint64_t v8 = (char *)(this + 85);
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)(this + 85), (uint64_t)__p, 0, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "max-expand");
  std::string::basic_string[abi:ne180100]<0>(__p, "If >0, the max amount by which lattices will be expanded.");
  unint64_t v9 = this + 88;
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)v9, (uint64_t)__p, 0, 49, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  *unint64_t v4 = 1065353216;
  *unint64_t v9 = 0;
  *unint64_t v5 = 0;
  MEMORY[0x1B3EA7B20](v6, "");
  MEMORY[0x1B3EA7B20](v7, "");
  return MEMORY[0x1B3EA7B20](v8, "");
}

void sub_1B1DB5AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeRealignmentDecoder::convertToOtherTransitionModel(uint64_t a1, uint64_t a2, int (***a3)(void), uint64_t a4, uint64_t a5)
{
  if ((**a3)(a3) > 1 && quasar::gLogLevel >= 5)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)uint64_t v7 = 0u;
    *(_OWORD *)unint64_t v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Conversion of alignments in lattice is only supported for models with context width = 1, other models will result in alignments which do not properly consider cross-word contexts", 178);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v7);
  }
  (*(void (**)(uint64_t))(*(void *)a5 + 160))(a5);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
}

void sub_1B1DB6034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24,uint64_t a25,uint64_t a26)
{
}

void quasar::OnlineLatticeRealignmentDecoder::realignLattice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  kaldi::DecodableMatrixScaledMapped::DecodableMatrixScaledMapped(v16, *(void *)(a1 + 712), a2, 1, *(float *)(a1 + 536));
  uint64_t v7 = 0xC87FFFFFFFLL;
  int v8 = 0;
  int v10 = 25;
  char v11 = 1;
  long long v12 = xmmword_1B255FD30;
  uint64_t v13 = 0x2FAF0803A800000;
  __int16 v14 = 257;
  char v15 = 0;
  int v6 = *(_DWORD *)(a1 + 540);
  int v9 = *(_DWORD *)(a1 + 548);
  kaldi::LatticeFasterDecoder::LatticeFasterDecoder(v5, a3, &v6);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B1DB6364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst(&a44);
  kaldi::LatticeFasterDecoder::~LatticeFasterDecoder((kaldi::LatticeFasterDecoder *)&a46);
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped((kaldi::DecodableMatrixScaledMapped *)(v46 - 96));
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeRealignmentDecoder::finishInit(quasar::OnlineLatticeRealignmentDecoder *this)
{
  uint64_t v2 = (quasar::OnlineLatticeRealignmentDecoder *)((char *)this + 32);
  quasar::SystemConfig::Version::Version(v17, 16, 1);
  if (quasar::SystemConfig::Version::operator>(v2, v17))
  {
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 56), v2, 0, *((unsigned __int8 *)this + 441), 1);
    uint64_t v3 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 56), "<?>");
    if (v3 != -1)
    {
      int v4 = v3;
      uint64_t v5 = *((int *)this + 116);
      if (v5 && v3 != v5 && quasar::gLogLevel >= 5)
      {
        memset(v17, 0, sizeof(v17));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Silence label is set to ", 24);
        int v6 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but does not match the auto-determined silence label ", 54);
        uint64_t v7 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)". Will use latter.", 18);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v17);
      }
      *((_DWORD *)this + 116) = v4;
    }
  }
  if (*((char *)this + 655) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 79), *((void *)this + 80));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 632);
  }
  kaldi::ReadPhoneMap((uint64_t)&__p, (std::vector<int> *)((char *)this + 496));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  quasar::ModelLoader::readTransitionModel(*((void *)this + 46), (unsigned __int8 *)this + 560, 1, v17);
  long long v8 = v17[0];
  v17[0] = 0uLL;
  int v9 = (std::__shared_weak_count *)*((void *)this + 90);
  *(_OWORD *)((char *)this + 712) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v17[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17[0] + 1));
    }
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((void **)this + 46), (unsigned int *)this + 116, (uint64_t)this + 656, (uint64_t)this + 680, (uint64_t *)v17);
  long long v10 = v17[0];
  v17[0] = 0uLL;
  char v11 = (std::__shared_weak_count *)*((void *)this + 61);
  *((_OWORD *)this + 30) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v17[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17[0] + 1));
    }
  }
  (*(void (**)(_OWORD *__return_ptr))(**((void **)this + 46) + 16))(v17);
  long long v12 = v17[0];
  v17[0] = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 92);
  *(_OWORD *)((char *)this + 728) = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (*((void *)&v17[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17[0] + 1));
    }
  }
  quasar::ModelLoader::readContextDependency(*((void *)this + 46), (unsigned __int8 *)this + 608, v17);
  long long v14 = v17[0];
  v17[0] = 0uLL;
  char v15 = (std::__shared_weak_count *)*((void *)this + 66);
  *(_OWORD *)((char *)this + 520) = v14;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (*((void *)&v17[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17[0] + 1));
    }
  }
}

void sub_1B1DB6694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void quasar::OnlineLatticeRealignmentDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  int v6 = *(std::__shared_weak_count **)(*a3 + 496);
  *(void *)(v5 + 488) = 0;
  *(void *)(v5 + 496) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v9 = *(void *)(*(void *)(*a3 + 152) + 8);
  ++*(_DWORD *)(v9 + 56);
  long long v8 = &unk_1F0A46010;
  uint64_t v7 = (kaldi::TransitionModel *)quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
  kaldi::ConvertCompactLatticeToPhones(v7, &v8, 0);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
}

void sub_1B1DB6D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va5, a2);
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v15 = va_arg(va4, void);
  uint64_t v17 = va_arg(va4, void);
  uint64_t v18 = va_arg(va4, void);
  va_copy(va5, va4);
  uint64_t v19 = va_arg(va5, void);
  uint64_t v21 = va_arg(va5, void);
  uint64_t v22 = va_arg(va5, void);
  uint64_t v23 = va_arg(va5, void);
  uint64_t v24 = va_arg(va5, void);
  uint64_t v25 = va_arg(va5, void);
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)va5);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((uint64_t *)va);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((uint64_t *)va1);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va2);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((uint64_t *)va3);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v4 - 128));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ImplToFst((void *)(v4 - 112));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v4 - 96));
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ImplToFst((void *)(v4 - 80));
  _Unwind_Resume(a1);
}

void fst::Push<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, int a2)
{
  memset(__p, 0, sizeof(__p));
  fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (uint64_t)__p, a2 == 0);
}

void sub_1B1DB6F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::MinimizeEncoded<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, float a2)
{
  float v3 = a2;
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, &v3);
  fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::EncodeMapper(&v2, 3, 1);
}

void sub_1B1DB712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t quasar::OnlineLatticeRealignmentDecoder::supportsEager(quasar::OnlineLatticeRealignmentDecoder *this)
{
  return 1;
}

void quasar::OnlineLatticeRealignmentDecoder::~OnlineLatticeRealignmentDecoder(quasar::OnlineLatticeRealignmentDecoder *this)
{
  quasar::OnlineLatticeRealignmentDecoder::~OnlineLatticeRealignmentDecoder(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F0A58338;
  int v2 = (std::__shared_weak_count *)*((void *)this + 92);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  float v3 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 703) < 0) {
    operator delete(*((void **)this + 85));
  }
  if (*((char *)this + 679) < 0) {
    operator delete(*((void **)this + 82));
  }
  if (*((char *)this + 655) < 0) {
    operator delete(*((void **)this + 79));
  }
  if (*((char *)this + 631) < 0) {
    operator delete(*((void **)this + 76));
  }
  if (*((char *)this + 607) < 0) {
    operator delete(*((void **)this + 73));
  }
  if (*((char *)this + 583) < 0) {
    operator delete(*((void **)this + 70));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 66);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (void *)*((void *)this + 62);
  if (v5)
  {
    *((void *)this + 63) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 61);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  quasar::Decoder::~Decoder(this);
}

void fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFst();
  }
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)v3, a1);
}

void sub_1B1DB74C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~ImplToFst(&a13);
  _Unwind_Resume(a1);
}

float fst::ComputeTotalWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, char a3)
{
  if (a3)
  {
    if ((*(int (**)(uint64_t))(*(void *)a1 + 24))(a1) < (unint64_t)((a2[1] - *a2) >> 2)) {
      return *(float *)(*a2 + 4 * (*(int (**)(uint64_t))(*(void *)a1 + 24))(a1));
    }
    return INFINITY;
  }
  uint64_t v6 = *a2;
  if (a2[1] == *a2) {
    return INFINITY;
  }
  unint64_t v7 = 0;
  float v5 = INFINITY;
  do
  {
    (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 32))(a1, v7);
    float v9 = *(float *)(v6 + 4 * v7);
    float v10 = NAN;
    if (v9 != -INFINITY && v8 != -INFINITY)
    {
      float v10 = INFINITY;
      BOOL v11 = v8 == INFINITY || v9 == INFINITY;
      float v12 = v9 + v8;
      if (!v11) {
        float v10 = v12;
      }
    }
    if (v5 >= v10) {
      float v13 = v10;
    }
    else {
      float v13 = v5;
    }
    if (v10 == -INFINITY || v5 == -INFINITY) {
      float v5 = NAN;
    }
    else {
      float v5 = v13;
    }
    ++v7;
    uint64_t v6 = *a2;
  }
  while (v7 < (a2[1] - *a2) >> 2);
  return v5;
}

uint64_t fst::Reweight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t *a1, void *a2, int a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 160))(a1);
  if (!result) {
    return result;
  }
  signed int v52 = 0;
  (*(void (**)(uint64_t *, uint64_t *))(*a1 + 128))(a1, &v50);
LABEL_3:
  if (v50)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v50 + 16))(v50)) {
      goto LABEL_72;
    }
    if (v50)
    {
      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 24))(v50);
      goto LABEL_9;
    }
  }
  else if (v52 >= v51)
  {
    goto LABEL_72;
  }
  int v8 = v52;
LABEL_9:
  uint64_t v9 = v8;
  if (v8 != (uint64_t)(a2[1] - *a2) >> 2)
  {
    float v10 = *(float *)(*a2 + 4 * v8);
    v48.n128_f32[0] = v10;
    LODWORD(v49) = 2139095040;
    v7.n128_f32[0] = v10;
    if (v10 == INFINITY) {
      goto LABEL_44;
    }
    (*(void (**)(uint64_t *, void, uint64_t *, float))(*a1 + 296))(a1, v8, &v49, v48.n128_f32[0]);
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v49 + 24))(v49))
      {
        if (v49) {
          (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
        }
        if (a3)
        {
LABEL_44:
          if (a3 == 1)
          {
            v17.n128_u32[0] = (*(float (**)(uint64_t *, uint64_t, __n128))(*a1 + 32))(a1, v9, v7);
            v18.n128_u32[0] = 2143289344;
            if (v10 != -INFINITY && v17.n128_f32[0] != -INFINITY)
            {
              v18.n128_u32[0] = 2139095040;
              BOOL v19 = v17.n128_f32[0] == INFINITY || v10 == INFINITY;
              v17.n128_f32[0] = v10 + v17.n128_f32[0];
              if (!v19) {
                v18.n128_f32[0] = v17.n128_f32[0];
              }
            }
            (*(void (**)(uint64_t *, uint64_t, __n128, __n128))(*a1 + 184))(a1, v9, v18, v17);
          }
        }
        else
        {
          float v21 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 32))(a1, v9);
          if (v21 == -INFINITY || (LODWORD(v10) & 0x7FFFFFFFu) > 0x7F7FFFFF)
          {
            v20.n128_u32[0] = 2143289344;
          }
          else
          {
            v20.n128_u32[0] = 2139095040;
            if (v21 != INFINITY) {
              v20.n128_f32[0] = v21 - v10;
            }
          }
          (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 184))(a1, v9, v20);
        }
        if (v50) {
          (*(void (**)(uint64_t))(*(void *)v50 + 32))(v50);
        }
        else {
          ++v52;
        }
        goto LABEL_3;
      }
      __n128 v11 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 32))(v49);
      __n128 v48 = v11;
      if (v11.n128_i32[3] < (unint64_t)((uint64_t)(a2[1] - *a2) >> 2))
      {
        v11.n128_u32[0] = *(_DWORD *)(*a2 + 4 * v48.n128_i32[3]);
        unsigned __int32 v54 = v11.n128_u32[0];
        int v53 = 2139095040;
        v12.n128_u32[0] = v11.n128_u32[0];
        if (v11.n128_f32[0] != INFINITY) {
          break;
        }
      }
LABEL_40:
      (*(void (**)(uint64_t, __n128, __n128))(*(void *)v49 + 40))(v49, v11, v12);
    }
    if (a3)
    {
      if (a3 != 1)
      {
LABEL_39:
        v11.n128_f64[0] = (*(double (**)(uint64_t, __n128 *))(*(void *)v49 + 88))(v49, &v48);
        goto LABEL_40;
      }
      float v13 = NAN;
      if (v10 == -INFINITY) {
        goto LABEL_38;
      }
      float v13 = NAN;
      if (v48.n128_f32[2] == -INFINITY) {
        goto LABEL_38;
      }
      if (v10 == INFINITY || v48.n128_f32[2] == INFINITY)
      {
        float v13 = INFINITY;
        if ((v11.n128_u32[0] & 0x7FFFFFFF) >= 0x7F800000) {
          float v13 = NAN;
        }
        goto LABEL_38;
      }
      float v14 = v10 + v48.n128_f32[2];
      float v13 = NAN;
      if ((float)(v10 + v48.n128_f32[2]) == -INFINITY)
      {
LABEL_38:
        v48.n128_f32[2] = v13;
        goto LABEL_39;
      }
      if ((v11.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF)
      {
        float v13 = INFINITY;
        if (v14 != INFINITY) {
          float v13 = v14 - v11.n128_f32[0];
        }
        goto LABEL_38;
      }
    }
    else
    {
      float v13 = NAN;
      if (v48.n128_f32[2] == -INFINITY || v11.n128_f32[0] == -INFINITY) {
        goto LABEL_38;
      }
      BOOL v15 = v48.n128_f32[2] == INFINITY || v11.n128_f32[0] == INFINITY;
      float v16 = v11.n128_f32[0] + v48.n128_f32[2];
      if (v15) {
        float v16 = INFINITY;
      }
      if (v16 != -INFINITY && (LODWORD(v10) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
      {
        float v13 = INFINITY;
        if (v16 != INFINITY) {
          float v13 = v16 - v10;
        }
        goto LABEL_38;
      }
    }
    float v13 = NAN;
    goto LABEL_38;
  }
  while (1)
  {
LABEL_72:
    if (!v50)
    {
      if (v52 >= v51) {
        break;
      }
      goto LABEL_64;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v50 + 16))(v50)) {
      break;
    }
    if (v50)
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 24))(v50);
      goto LABEL_65;
    }
LABEL_64:
    uint64_t v22 = v52;
LABEL_65:
    if (a3 == 1)
    {
      BOOL v15 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 32))(a1, v22) == -INFINITY;
      v23.n128_u32[0] = 2139095040;
      if (v15) {
        v23.n128_f32[0] = NAN;
      }
      (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 184))(a1, v22, v23);
    }
    if (v50) {
      (*(void (**)(uint64_t))(*(void *)v50 + 32))(v50);
    }
    else {
      ++v52;
    }
  }
  if ((*(int (**)(uint64_t *))(*a1 + 24))(a1) >= (unint64_t)((uint64_t)(a2[1] - *a2) >> 2)) {
    float v25 = INFINITY;
  }
  else {
    float v25 = *(float *)(*a2 + 4 * (*(int (**)(uint64_t *))(*a1 + 24))(a1));
  }
  v48.n128_f32[0] = v25;
  LODWORD(v49) = 0;
  v24.n128_f32[0] = v25;
  if (v25 == 0.0) {
    goto LABEL_137;
  }
  v48.n128_f32[0] = v25;
  LODWORD(v49) = 2139095040;
  v24.n128_f32[0] = v25;
  if (v25 == INFINITY) {
    goto LABEL_137;
  }
  uint64_t v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, float))(*a1 + 64))(a1, 0x2000000000, 1, v25);
  uint64_t v27 = *a1;
  if ((v26 & 0x2000000000) == 0)
  {
    uint64_t v28 = (*(uint64_t (**)(uint64_t *))(v27 + 200))(a1);
    unsigned int v29 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
    if ((LODWORD(v25) & 0x7FFFFFFFu) >= 0x7F800000) {
      float v30 = NAN;
    }
    else {
      float v30 = 0.0 - v25;
    }
    if (!a3) {
      float v30 = v25;
    }
    v48.n128_u64[0] = 0;
    v48.n128_u64[1] = __PAIR64__(v29, LODWORD(v30));
    (*(void (**)(uint64_t *, uint64_t, __n128 *))(*a1 + 208))(a1, v28, &v48);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 176))(a1, v28);
    goto LABEL_137;
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t *))(v27 + 24))(a1);
  (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*a1 + 296))(a1, v31, &v49);
  if ((LODWORD(v25) & 0x7FFFFFFFu) >= 0x7F800000) {
    float v32 = NAN;
  }
  else {
    float v32 = 0.0 - v25;
  }
  while (2)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v49 + 24))(v49))
    {
      __n128 v48 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 32))(v49);
      float v33 = NAN;
      if (a3)
      {
        if (v32 != -INFINITY)
        {
          float v33 = NAN;
          if (v48.n128_f32[2] != -INFINITY)
          {
            float v33 = INFINITY;
            BOOL v34 = v48.n128_f32[2] == INFINITY || v32 == INFINITY;
            float v35 = v32 + v48.n128_f32[2];
LABEL_103:
            if (!v34) {
              float v33 = v35;
            }
          }
        }
      }
      else if (v25 != -INFINITY)
      {
        float v33 = NAN;
        if (v48.n128_f32[2] != -INFINITY)
        {
          float v33 = INFINITY;
          BOOL v34 = v48.n128_f32[2] == INFINITY || v25 == INFINITY;
          float v35 = v48.n128_f32[2] + v25;
          goto LABEL_103;
        }
      }
      v48.n128_f32[2] = v33;
      (*(void (**)(uint64_t, __n128 *))(*(void *)v49 + 88))(v49, &v48);
      (*(void (**)(uint64_t))(*(void *)v49 + 40))(v49);
      continue;
    }
    break;
  }
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  unint64_t v36 = *(float (**)(uint64_t *, uint64_t))(*a1 + 32);
  if (a3)
  {
    v37.n128_f32[0] = v36(a1, v31);
    float v38 = INFINITY;
    if (v37.n128_f32[0] != INFINITY && v32 != INFINITY) {
      float v38 = v32 + v37.n128_f32[0];
    }
    BOOL v41 = v37.n128_f32[0] == -INFINITY || v32 == -INFINITY;
    v37.n128_u32[0] = 2143289344;
    if (!v41) {
      v37.n128_f32[0] = v38;
    }
  }
  else
  {
    v37.n128_f32[0] = v36(a1, v31);
    float v42 = INFINITY;
    if (v37.n128_f32[0] != INFINITY && v25 != INFINITY) {
      float v42 = v37.n128_f32[0] + v25;
    }
    BOOL v45 = v37.n128_f32[0] == -INFINITY || v25 == -INFINITY;
    v37.n128_u32[0] = 2143289344;
    if (!v45) {
      v37.n128_f32[0] = v42;
    }
  }
  (*(void (**)(uint64_t *, uint64_t, __n128))(*a1 + 184))(a1, v31, v37);
LABEL_137:
  unint64_t v46 = (*(uint64_t (**)(uint64_t *, uint64_t, void, __n128))(*a1 + 64))(a1, 0x3FFFFFFF0007, 0, v24);
  unint64_t v47 = fst::ReweightProperties(v46);
  (*(void (**)(uint64_t *, unint64_t, uint64_t))(*a1 + 192))(a1, v47, 0x3FFFFFFF0007);
  uint64_t result = v50;
  if (v50) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  return result;
}

void sub_1B1DB82C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveWeight<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t result, int a2, float a3)
{
  *(float *)&long long v15 = a3;
  LODWORD(v14) = 0;
  if (a3 == 0.0) {
    return result;
  }
  *(float *)&long long v15 = a3;
  LODWORD(v14) = 2139095040;
  if (a3 == INFINITY) {
    return result;
  }
  uint64_t v4 = result;
  if (a2)
  {
    unsigned int v16 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)result + 128))(result, &v15);
    while (1)
    {
      uint64_t result = v15;
      if (!(void)v15) {
        break;
      }
      int v5 = (*(uint64_t (**)(void))(*(void *)v15 + 16))(v15);
      uint64_t result = v15;
      if (v5)
      {
        if ((void)v15) {
          return (*(uint64_t (**)(void))(*(void *)v15 + 8))();
        }
        return result;
      }
      if (!(void)v15) {
        goto LABEL_11;
      }
      uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v15 + 24))();
      if ((void)v15) {
        uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v15 + 24))(v15);
      }
      else {
        uint64_t v7 = v16;
      }
LABEL_12:
      float v9 = (*(float (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v7);
      if (v9 == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        v8.n128_u32[0] = 2143289344;
      }
      else
      {
        v8.n128_u32[0] = 2139095040;
        if (v9 != INFINITY) {
          v8.n128_f32[0] = v9 - a3;
        }
      }
      (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)v4 + 184))(v4, v6, v8);
      if ((void)v15) {
        (*(void (**)(void))(*(void *)v15 + 32))(v15);
      }
      else {
        ++v16;
      }
    }
    if ((int)v16 >= SDWORD2(v15)) {
      return result;
    }
LABEL_11:
    uint64_t v6 = v16;
    uint64_t v7 = v16;
    goto LABEL_12;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 296))(v4, v10, &v14);
  while (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 24))(v14))
  {
    long long v15 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
    float v11 = *((float *)&v15 + 2) - a3;
    if (*((float *)&v15 + 2) == INFINITY) {
      float v11 = INFINITY;
    }
    if (*((float *)&v15 + 2) == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF) {
      float v11 = NAN;
    }
    *((float *)&v15 + 2) = v11;
    (*(void (**)(uint64_t, long long *))(*(void *)v14 + 88))(v14, &v15);
    (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  float v13 = (*(float (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v10);
  if (v13 == -INFINITY || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    v12.n128_u32[0] = 2143289344;
  }
  else
  {
    v12.n128_u32[0] = 2139095040;
    if (v13 != INFINITY) {
      v12.n128_f32[0] = v13 - a3;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(void *)v4 + 184))(v4, v10, v12);
}

void sub_1B1DB8830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  _Unwind_Resume(exception_object);
}

void *fst::ShortestDistance<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, void *a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = a2;
  void v6[2] = *(void *)a3;
  int v7 = *(_DWORD *)(a3 + 16);
  char v8 = *(unsigned char *)(a3 + 20);
  char v9 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  memset(v13, 0, 29);
  a2[1] = *a2;
  fst::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ShortestDistance(v6, *(_DWORD *)(a3 + 12));
  if (BYTE12(v13[1]))
  {
    a2[1] = *a2;
    int v5 = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v5);
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(v6);
}

void sub_1B1DB8940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState((uint64_t *)va);
  _Unwind_Resume(a1);
}

void fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A40F38;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v4 & 0x4000000000) == 0 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) != -1)
  {
    if ((v4 & 0x800000000) == 0)
    {
      if ((v4 & 0x200000000) == 0)
      {
        uint64_t v6 = 0;
        v5[0] = v3;
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = &v6;
        fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, (uint64_t)v5);
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B1DB91D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  float v30 = *v28;
  if (*v28)
  {
    *(void *)(v26 + 56) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *v27;
  if (*v27)
  {
    *(void *)(v26 + 32) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::NaturalLess<fst::TropicalWeightTpl<float>>>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  *a5 = 1;
  *a6 = 1;
  uint64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
  if (v10)
  {
    unint64_t v11 = v10 >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    bzero(*(void **)a3, 4 * v11);
  }
  unsigned int v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, &v28);
  while (1)
  {
    uint64_t result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29) {
        return result;
      }
LABEL_11:
      uint64_t v14 = v30;
      goto LABEL_12;
    }
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
    uint64_t result = v28;
    if (v13) {
      break;
    }
    if (!v28) {
      goto LABEL_11;
    }
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v28 + 24))();
LABEL_12:
    unint64_t v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a1 + 136))(a1, v14, v25);
    uint64_t v15 = (int)v14;
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2]) {
          goto LABEL_38;
        }
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(void))(*(void *)v25[0] + 24))(v25[0])) {
        break;
      }
      if (v25[0])
      {
        uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v16 = v25[1] + 16 * v27;
LABEL_19:
      uint64_t v17 = *(int *)(*a2 + 4 * v15);
      if (v17 == *(_DWORD *)(*a2 + 4 * *(int *)(v16 + 12)))
      {
        __n128 v18 = *(_DWORD **)a3;
        if (!a4
          || (BOOL v19 = (float *)(v16 + 8),
              float v32 = 0.0,
              fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a4, (float *)(v16 + 8), &v32)))
        {
          int v20 = 1;
          goto LABEL_23;
        }
        if ((v18[v17] | 2) == 2)
        {
          float v32 = 0.0;
          float v22 = *v19;
          float v32 = *v19;
          int v31 = 2139095040;
          if (v32 == INFINITY || (v32 = v22, int v31 = 0, v22 == 0.0)) {
            int v20 = 2;
          }
          else {
            int v20 = 3;
          }
LABEL_23:
          v18[v17] = v20;
        }
        *a5 = 0;
      }
      float v32 = 0.0;
      float v21 = *(float *)(v16 + 8);
      float v32 = v21;
      int v31 = 2139095040;
      if (v21 != INFINITY)
      {
        float v32 = v21;
        int v31 = 0;
        if (v21 != 0.0) {
          *a6 = 0;
        }
      }
      if (v25[0]) {
        (*(void (**)(void))(*(void *)v25[0] + 40))(v25[0]);
      }
      else {
        ++v27;
      }
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(void *)v25[0] + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v26) {
      --*v26;
    }
LABEL_40:
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 32))(v28);
    }
    else {
      ++v30;
    }
  }
  if (v28) {
    return (*(uint64_t (**)(void))(*(void *)v28 + 8))();
  }
  return result;
}

void sub_1B1DB96EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F0A3A1C8;
  *(void *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v3 = 0;
  uint64_t v1 = a1 + 24;
  int v2 = &v3;
  fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>();
}

void sub_1B1DB98C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0) {
    operator delete(__p);
  }
  float v22 = *v19;
  if (*v19)
  {
    *(void *)(v18 + 56) = v22;
    operator delete(v22);
  }
  __n128 v23 = *v20;
  if (*v20)
  {
    *(void *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>()
{
}

void sub_1B1DBA1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  unint64_t v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::ShortestDistanceState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ShortestDistance(void *a1, int a2)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1) == -1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0);
    if (!result) {
      return result;
    }
    unint64_t v137 = (char *)a1 + 116;
    goto LABEL_224;
  }
  (*(void (**)(void))(**(void **)(a1[2] + 16) + 56))(*(void *)(a1[2] + 16));
  if (!*((unsigned char *)a1 + 33))
  {
    *(void *)(a1[1] + 8) = *(void *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1) {
    a2 = (*(uint64_t (**)(void))(*(void *)*a1 + 24))();
  }
  unint64_t v4 = a2;
  int v5 = (void **)a1[1];
  int v7 = v5 + 1;
  uint64_t v6 = v5[1];
  char v8 = (char *)*v5;
  unint64_t v9 = ((char *)v6 - (unsigned char *)*v5) >> 2;
  if (v9 <= a2)
  {
    uint64_t v10 = (char **)(a1 + 5);
    do
    {
      unint64_t v11 = (unint64_t)v5[2];
      if ((unint64_t)v6 >= v11)
      {
        if ((v9 + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v11 - (void)v8;
        uint64_t v14 = v13 >> 1;
        if (v13 >> 1 <= v9 + 1) {
          uint64_t v14 = v9 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 2), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v16[4 * v9];
        *(_DWORD *)uint64_t v17 = 2139095040;
        uint64_t v12 = v17 + 4;
        uint64_t v18 = (char *)*v7;
        uint64_t v19 = (char *)*v5;
        if (*v7 != *v5)
        {
          do
          {
            int v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          uint64_t v18 = (char *)*v5;
        }
        *int v5 = v17;
        *int v7 = v12;
        v5[2] = &v16[4 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v6 = 2139095040;
        uint64_t v12 = v6 + 1;
      }
      *int v7 = v12;
      float v22 = (_DWORD *)a1[6];
      unint64_t v21 = a1[7];
      if ((unint64_t)v22 >= v21)
      {
        uint64_t v24 = ((char *)v22 - *v10) >> 2;
        if ((unint64_t)(v24 + 1) >> 62) {
LABEL_229:
        }
          std::vector<int>::__throw_length_error[abi:ne180100]();
        uint64_t v25 = v21 - (void)*v10;
        uint64_t v26 = v25 >> 1;
        if (v25 >> 1 <= (unint64_t)(v24 + 1)) {
          uint64_t v26 = v24 + 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v27);
        }
        else {
          uint64_t v28 = 0;
        }
        int v29 = &v28[4 * v24];
        *(_DWORD *)int v29 = 2139095040;
        __n128 v23 = v29 + 4;
        int v31 = (char *)a1[5];
        unsigned int v30 = (char *)a1[6];
        if (v30 != v31)
        {
          do
          {
            int v32 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v29 - 1) = v32;
            v29 -= 4;
          }
          while (v30 != v31);
          unsigned int v30 = *v10;
        }
        a1[5] = v29;
        a1[6] = v23;
        a1[7] = &v28[4 * v27];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *float v22 = 2139095040;
        __n128 v23 = v22 + 1;
      }
      a1[6] = v23;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      int v5 = (void **)a1[1];
      int v7 = v5 + 1;
      uint64_t v6 = v5[1];
      char v8 = (char *)*v5;
      unint64_t v9 = ((char *)v6 - (unsigned char *)*v5) >> 2;
    }
    while (v9 <= v4);
  }
  if (*((unsigned char *)a1 + 33))
  {
    float v33 = (char *)a1[11];
    BOOL v34 = (char *)a1[12];
    unint64_t v35 = (v34 - v33) >> 2;
    if (v35 <= v4)
    {
      unint64_t v36 = a1 + 13;
      do
      {
        if ((unint64_t)v34 >= *v36)
        {
          unint64_t v38 = v35 + 1;
          if ((v35 + 1) >> 62) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v39 = *v36 - (void)v33;
          if (v39 >> 1 > v38) {
            unint64_t v38 = v39 >> 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            BOOL v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v40);
            float v33 = (char *)a1[11];
            BOOL v34 = (char *)a1[12];
          }
          else
          {
            BOOL v41 = 0;
          }
          float v42 = &v41[4 * v35];
          *(_DWORD *)float v42 = -1;
          __n128 v37 = v42 + 4;
          while (v34 != v33)
          {
            int v43 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }
          a1[11] = v42;
          a1[12] = v37;
          a1[13] = &v41[4 * v40];
          if (v33)
          {
            operator delete(v33);
            float v33 = (char *)a1[11];
          }
          else
          {
            float v33 = v42;
          }
        }
        else
        {
          *(_DWORD *)BOOL v34 = -1;
          __n128 v37 = v34 + 4;
        }
        a1[12] = v37;
        unint64_t v35 = (v37 - v33) >> 2;
        BOOL v34 = v37;
      }
      while (v35 <= v4);
      char v8 = *(char **)a1[1];
    }
    *(_DWORD *)&v33[4 * v4] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v8[4 * v4] = 0;
  long long v44 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v4) = 0;
  *(void *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(void, unint64_t))(**(void **)(a1[2] + 16) + 24))(*(void *)(a1[2] + 16), v4);
  BOOL v45 = a1 + 13;
  unint64_t v137 = (char *)a1 + 116;
  uint64_t v138 = (uint64_t)(a1 + 7);
  do
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 48))(*(void *)(a1[2] + 16))) {
      goto LABEL_220;
    }
    int v46 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 16) + 16))(*(void *)(a1[2] + 16));
    (*(void (**)(void))(**(void **)(a1[2] + 16) + 32))(*(void *)(a1[2] + 16));
    unint64_t v47 = (void **)a1[1];
    __n128 v48 = v47 + 1;
    uint64_t v49 = v47[1];
    uint64_t v50 = (char *)*v47;
    for (unint64_t i = ((char *)v49 - (unsigned char *)*v47) >> 2; i <= v46; unint64_t i = ((char *)v49 - (unsigned char *)*v47) >> 2)
    {
      unint64_t v52 = (unint64_t)v47[2];
      if ((unint64_t)v49 >= v52)
      {
        if ((i + 1) >> 62) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v54 = v52 - (void)v50;
        uint64_t v55 = v54 >> 1;
        if (v54 >> 1 <= i + 1) {
          uint64_t v55 = i + 1;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v55;
        }
        if (v56) {
          unint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v47 + 2), v56);
        }
        else {
          unint64_t v57 = 0;
        }
        long long v58 = &v57[4 * i];
        *(_DWORD *)long long v58 = 2139095040;
        int v53 = v58 + 4;
        long long v59 = (char *)*v48;
        int v60 = (char *)*v47;
        if (*v48 != *v47)
        {
          do
          {
            int v61 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v58 - 1) = v61;
            v58 -= 4;
          }
          while (v59 != v60);
          long long v59 = (char *)*v47;
        }
        std::string *v47 = v58;
        *__n128 v48 = v53;
        uint64_t v47[2] = &v57[4 * v56];
        if (v59) {
          operator delete(v59);
        }
      }
      else
      {
        *uint64_t v49 = 2139095040;
        int v53 = v49 + 1;
      }
      *__n128 v48 = v53;
      uint64_t v63 = (_DWORD *)a1[6];
      unint64_t v62 = a1[7];
      if ((unint64_t)v63 >= v62)
      {
        uint64_t v65 = ((char *)v63 - *v44) >> 2;
        if ((unint64_t)(v65 + 1) >> 62) {
          goto LABEL_229;
        }
        uint64_t v66 = v62 - (void)*v44;
        uint64_t v67 = v66 >> 1;
        if (v66 >> 1 <= (unint64_t)(v65 + 1)) {
          uint64_t v67 = v65 + 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v67;
        }
        if (v68) {
          unint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v68);
        }
        else {
          unint64_t v69 = 0;
        }
        unsigned int v70 = &v69[4 * v65];
        *(_DWORD *)unsigned int v70 = 2139095040;
        uint64_t v64 = v70 + 4;
        unsigned int v72 = (char *)a1[5];
        unsigned int v71 = (char *)a1[6];
        if (v71 != v72)
        {
          do
          {
            int v73 = *((_DWORD *)v71 - 1);
            v71 -= 4;
            *((_DWORD *)v70 - 1) = v73;
            v70 -= 4;
          }
          while (v71 != v72);
          unsigned int v71 = *v44;
        }
        a1[5] = v70;
        a1[6] = v64;
        a1[7] = &v69[4 * v68];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        *uint64_t v63 = 2139095040;
        uint64_t v64 = v63 + 1;
      }
      a1[6] = v64;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      unint64_t v47 = (void **)a1[1];
      __n128 v48 = v47 + 1;
      uint64_t v49 = v47[1];
      uint64_t v50 = (char *)*v47;
    }
    if (*((unsigned char *)a1 + 32))
    {
      LODWORD(v139[0]) = (*(float (**)(void, void))(*(void *)*a1 + 32))(*a1, v46);
      int v142 = 2139095040;
      if (*(float *)v139 != INFINITY)
      {
LABEL_220:
        ++*((_DWORD *)a1 + 28);
        uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*a1 + 64))(*a1, 4, 0);
        if (!result) {
          return result;
        }
LABEL_224:
        *unint64_t v137 = 1;
        return result;
      }
    }
    *(void *)(a1[8] + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
    uint64_t v74 = a1[5];
    float v75 = *(float *)(v74 + 4 * v46);
    *(_DWORD *)(v74 + 4 * v46) = 2139095040;
    uint64_t v76 = *a1;
    unint64_t v141 = 0;
    (*(void (**)(uint64_t, void, void *))(*(void *)v76 + 136))(v76, v46, v139);
    while (1)
    {
      if (v139[0])
      {
        if ((*(uint64_t (**)(void))(*(void *)v139[0] + 24))(v139[0])) {
          goto LABEL_212;
        }
        if (v139[0])
        {
          uint64_t v77 = (*(uint64_t (**)(void))(*(void *)v139[0] + 32))(v139[0]);
          goto LABEL_109;
        }
      }
      else if (v141 >= v139[2])
      {
LABEL_212:
        char v135 = 1;
        goto LABEL_214;
      }
      uint64_t v77 = v139[1] + 16 * v141;
LABEL_109:
      uint64_t v78 = (void **)a1[1];
      long long v79 = v78 + 1;
      long long v80 = v78[1];
      uint64_t v81 = (char *)*v78;
      unint64_t v82 = ((char *)v80 - (unsigned char *)*v78) >> 2;
      if (v82 <= *(int *)(v77 + 12))
      {
        do
        {
          unint64_t v84 = (unint64_t)v78[2];
          if ((unint64_t)v80 >= v84)
          {
            if ((v82 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v86 = v84 - (void)v81;
            uint64_t v87 = v86 >> 1;
            if (v86 >> 1 <= v82 + 1) {
              uint64_t v87 = v82 + 1;
            }
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v88 = v87;
            }
            if (v88) {
              uint64_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v78 + 2), v88);
            }
            else {
              uint64_t v89 = 0;
            }
            unint64_t v90 = &v89[4 * v82];
            *(_DWORD *)unint64_t v90 = 2139095040;
            uint64_t v85 = v90 + 4;
            unint64_t v91 = (char *)*v79;
            unint64_t v92 = (char *)*v78;
            if (*v79 != *v78)
            {
              do
              {
                int v93 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v90 - 1) = v93;
                v90 -= 4;
              }
              while (v91 != v92);
              unint64_t v91 = (char *)*v78;
            }
            *uint64_t v78 = v90;
            *long long v79 = v85;
            v78[2] = &v89[4 * v88];
            if (v91) {
              operator delete(v91);
            }
          }
          else
          {
            *long long v80 = 2139095040;
            uint64_t v85 = v80 + 1;
          }
          *long long v79 = v85;
          uint64_t v95 = (_DWORD *)a1[6];
          unint64_t v94 = a1[7];
          if ((unint64_t)v95 >= v94)
          {
            uint64_t v97 = ((char *)v95 - *v44) >> 2;
            if ((unint64_t)(v97 + 1) >> 62) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v98 = v94 - (void)*v44;
            uint64_t v99 = v98 >> 1;
            if (v98 >> 1 <= (unint64_t)(v97 + 1)) {
              uint64_t v99 = v97 + 1;
            }
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v100 = v99;
            }
            if (v100) {
              unint64_t v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v100);
            }
            else {
              unint64_t v101 = 0;
            }
            uint64_t v102 = &v101[4 * v97];
            *(_DWORD *)uint64_t v102 = 2139095040;
            uint64_t v96 = v102 + 4;
            uint64_t v104 = (char *)a1[5];
            BOOL v103 = (char *)a1[6];
            if (v103 != v104)
            {
              do
              {
                int v105 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                *((_DWORD *)v102 - 1) = v105;
                v102 -= 4;
              }
              while (v103 != v104);
              BOOL v103 = *v44;
            }
            a1[5] = v102;
            a1[6] = v96;
            a1[7] = &v101[4 * v100];
            if (v103) {
              operator delete(v103);
            }
          }
          else
          {
            _DWORD *v95 = 2139095040;
            uint64_t v96 = v95 + 1;
          }
          a1[6] = v96;
          LOBYTE(v142) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v142);
          uint64_t v78 = (void **)a1[1];
          long long v79 = v78 + 1;
          long long v80 = v78[1];
          uint64_t v81 = (char *)*v78;
          unint64_t v82 = ((char *)v80 - (unsigned char *)*v78) >> 2;
          unint64_t v83 = *(int *)(v77 + 12);
        }
        while (v82 <= v83);
      }
      else
      {
        LODWORD(v83) = *(_DWORD *)(v77 + 12);
      }
      if (*((unsigned char *)a1 + 33))
      {
        uint64_t v106 = (char *)a1[11];
        uint64_t v107 = (char *)a1[12];
        unint64_t v108 = (v107 - v106) >> 2;
        if (v108 <= (int)v83)
        {
          do
          {
            if ((unint64_t)v107 >= *v45)
            {
              unint64_t v111 = v108 + 1;
              if ((v108 + 1) >> 62) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v112 = *v45 - (void)v106;
              if (v112 >> 1 > v111) {
                unint64_t v111 = v112 >> 1;
              }
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v111;
              }
              if (v113)
              {
                unint64_t v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v113);
                uint64_t v106 = (char *)a1[11];
                uint64_t v107 = (char *)a1[12];
              }
              else
              {
                unint64_t v114 = 0;
              }
              v115 = &v114[4 * v108];
              *(_DWORD *)v115 = -1;
              int v110 = v115 + 4;
              while (v107 != v106)
              {
                int v116 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *((_DWORD *)v115 - 1) = v116;
                v115 -= 4;
              }
              a1[11] = v115;
              a1[12] = v110;
              a1[13] = &v114[4 * v113];
              if (v106)
              {
                operator delete(v106);
                uint64_t v106 = (char *)a1[11];
              }
              else
              {
                uint64_t v106 = v115;
              }
            }
            else
            {
              *(_DWORD *)uint64_t v107 = -1;
              int v110 = v107 + 4;
            }
            a1[12] = v110;
            unint64_t v108 = (v110 - v106) >> 2;
            LODWORD(v83) = *(_DWORD *)(v77 + 12);
            uint64_t v107 = v110;
          }
          while (v108 <= (int)v83);
          uint64_t v109 = (int)v83;
          uint64_t v78 = (void **)a1[1];
        }
        else
        {
          uint64_t v109 = (int)v83;
        }
        if (*(_DWORD *)&v106[4 * v109] != *((_DWORD *)a1 + 28))
        {
          *((_DWORD *)*v78 + v109) = 2139095040;
          *(_DWORD *)(a1[5] + 4 * *(int *)(v77 + 12)) = 2139095040;
          unint64_t v83 = *(int *)(v77 + 12);
          *(void *)(a1[8] + ((v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
          *(_DWORD *)(a1[11] + 4 * v83) = *((_DWORD *)a1 + 28);
          uint64_t v78 = (void **)a1[1];
          LODWORD(v83) = *(_DWORD *)(v77 + 12);
        }
      }
      unint64_t v117 = (char *)*v78;
      unint64_t v118 = *v44;
      float v119 = NAN;
      if (v75 != -INFINITY)
      {
        float v120 = *(float *)(v77 + 8);
        float v119 = NAN;
        if (v120 != -INFINITY)
        {
          float v119 = INFINITY;
          BOOL v121 = v120 == INFINITY || v75 == INFINITY;
          float v122 = v75 + v120;
          if (!v121) {
            float v119 = v122;
          }
        }
      }
      float v123 = *(float *)&v117[4 * (int)v83];
      if (v123 >= v119) {
        float v124 = v119;
      }
      else {
        float v124 = *(float *)&v117[4 * (int)v83];
      }
      if (v119 == -INFINITY || v123 == -INFINITY) {
        float v124 = NAN;
      }
      float v127 = *((float *)a1 + 7);
      if (v124 > (float)(v123 + v127) || v123 > (float)(v127 + v124)) {
        break;
      }
LABEL_209:
      if (v139[0]) {
        (*(void (**)(void))(*(void *)v139[0] + 40))(v139[0]);
      }
      else {
        ++v141;
      }
    }
    *(float *)&v117[4 * (int)v83] = v124;
    float v129 = *(float *)&v118[4 * (int)v83];
    if (v129 >= v119) {
      float v130 = v119;
    }
    else {
      float v130 = *(float *)&v118[4 * (int)v83];
    }
    BOOL v132 = v119 == -INFINITY || v129 == -INFINITY;
    float v133 = NAN;
    if (!v132) {
      float v133 = v130;
    }
    *(float *)&v118[4 * (int)v83] = v133;
    if (*(float *)&v117[4 * (int)v83] != -INFINITY && (v133 < -INFINITY || v133 > -INFINITY))
    {
      uint64_t v134 = **(void **)(a1[2] + 16);
      if ((*(void *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v77 + 12)))
      {
        (*(void (**)(void))(v134 + 40))();
      }
      else
      {
        (*(void (**)(void))(v134 + 24))();
        *(void *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v77 + 12);
      }
      goto LABEL_209;
    }
    char v135 = 0;
    *unint64_t v137 = 1;
LABEL_214:
    uint64_t result = v139[0];
    if (v139[0])
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v139[0] + 8))(v139[0]);
    }
    else if (v140)
    {
      --*v140;
    }
  }
  while ((v135 & 1) != 0);
  return result;
}

void sub_1B1DBAFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AcceptorMinimize<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 0x200010000, 1)) {
    fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  }
  int v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  char v3 = (void *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"FST is not an unweighted acceptor", 33);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
}

void sub_1B1DBB2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1DBB33C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    JUMPOUT(0x1B1DBB330);
  }
  JUMPOUT(0x1B1DBB334);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::QuantizeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, float *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v6 = 0;
      int32x2_t v7 = vdup_n_s32(0x7F800000u);
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 296))(a1, v6, &v14);
        while (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 24))(v14))
        {
          uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          *(int32x2_t *)&double v9 = fst::QuantizeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(a2, v8, v13);
          (*(void (**)(uint64_t, int32x2_t *, double))(*(void *)v14 + 88))(v14, v13, v9);
          (*(void (**)(uint64_t))(*(void *)v14 + 40))(v14);
        }
        if (v14) {
          (*(void (**)(void))(*(void *)v14 + 8))();
        }
        (*(void (**)(int32x2_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(v13, a1, v6);
        float v10 = vaddv_f32((float32x2_t)v13[0]);
        int32x2_t v11 = (int32x2_t)0x7F0000007FLL;
        if (v10 != -INFINITY)
        {
          int32x2_t v11 = v7;
          if (v10 != INFINITY)
          {
            v11.i32[0] = *(__int32 *)a2;
            int32x2_t v11 = (int32x2_t)vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32((float32x2_t)v13[0], (float32x2_t)vdup_lane_s32(v11, 0)), (float32x2_t)0x3F0000003F000000)), *a2);
          }
        }
        int32x2_t v12 = v11;
        (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)a1 + 184))(a1, v6, &v12);
        uint64_t v6 = (v6 + 1);
      }
      while ((int)v6 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFCFFFF0007, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1DBB690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t fst::QuantizeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()@<D0>(float *a1@<X0>, uint64_t a2@<X1>, int32x2_t *a3@<X8>)
{
  float32x2_t v3 = *(float32x2_t *)(a2 + 8);
  float v4 = vaddv_f32(v3);
  int32x2_t v5 = (int32x2_t)0x7F0000007FLL;
  if (v4 != -INFINITY)
  {
    if (v4 == INFINITY)
    {
      int32x2_t v5 = vdup_n_s32(0x7F800000u);
    }
    else
    {
      v5.i32[0] = *(__int32 *)a1;
      int32x2_t v5 = (int32x2_t)vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(v3, (float32x2_t)vdup_lane_s32(v5, 0)), (float32x2_t)0x3F0000003F000000)), *a1);
    }
  }
  __int32 v6 = *(_DWORD *)(a2 + 16);
  int32x2_t result = *(int32x2_t *)a2;
  *a3 = *(int32x2_t *)a2;
  a3[1] = v5;
  a3[2].i32[0] = v6;
  return result;
}

void fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::EncodeMapper(_DWORD *a1, int a2, int a3)
{
  *a1 = a2;
  a1[1] = a3;
  operator new();
}

void sub_1B1DBB7AC(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10A0C40782F6942);
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::EncodeTable(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  int v4 = a2;
  char v5 = a2 & 1;
  BOOL v6 = (a2 & 2) != 0;
  std::unordered_map<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const* const,int>>>::unordered_map(a1 + 32, 0x400uLL, &v4);
  *(_DWORD *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  return a1;
}

void sub_1B1DBB840(_Unwind_Exception *exception_object)
{
  float32x2_t v3 = v2;
  char v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,std::allocator<std::pair<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const* const,int>>>::unordered_map(uint64_t a1, size_t a2, int *a3)
{
  int v4 = *a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 36) = v4 & 1;
  *(unsigned char *)(a1 + 37) = (v4 & 2) != 0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1DBB8B0(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 288))(a1, 0);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if (*(_DWORD *)(a2 + 4) == 1 && (*(unsigned char *)a2 & 2) != 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
      uint64_t v34 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v5, &v34);
      char v6 = 0;
    }
    else
    {
      LODWORD(v5) = -1;
      char v6 = 1;
    }
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      int32x2_t v8 = vdup_n_s32(0x7F800000u);
      while (1)
      {
        (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 296))(a1, v7, &v29);
        while (!(*(unsigned int (**)(void *))(*v29 + 24))(v29))
        {
          double v9 = (int8x8_t *)(*(uint64_t (**)(void *))(*v29 + 32))(v29);
          fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()((int *)a2, v9, (uint64_t)&v32);
          (*(void (**)(void *, void **))(*v29 + 88))(v29, &v32);
          (*(void (**)(void *))(*v29 + 40))(v29);
        }
        if (v29) {
          (*(void (**)(void))(*v29 + 8))();
        }
        if (v6)
        {
          (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v28, a1, v7);
          int v29 = 0;
          unint64_t v30 = v28;
          int v31 = -1;
          fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()((int *)a2, (int8x8_t *)&v29, (uint64_t)&v32);
          if (v32)
          {
            int v10 = FLAGS_fst_error_fatal;
            if (FLAGS_fst_error_fatal)
            {
              std::string::basic_string[abi:ne180100]<0>(v25, "FATAL");
              int32x2_t v11 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)v25);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
              int32x2_t v11 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)__p);
            }
            int32x2_t v12 = (void *)fst::cerr(v11);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ArcMap: non-zero arc labels for superfinal arc", 46);
            if (v10)
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v27);
              if (v26 < 0)
              {
                unint64_t v15 = (void *)v25[0];
                goto LABEL_30;
              }
            }
            else
            {
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v24);
              if (v23 < 0)
              {
                unint64_t v15 = __p[0];
LABEL_30:
                operator delete(v15);
              }
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 4, 4);
          }
          uint64_t v21 = *(void *)v33;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v21);
          goto LABEL_33;
        }
        if (v7 != v5) {
          break;
        }
LABEL_33:
        uint64_t v7 = (v7 + 1);
        if ((int)v7 >= (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1)) {
          goto LABEL_34;
        }
      }
      (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v28, a1, v7);
      int v29 = 0;
      unint64_t v30 = v28;
      int v31 = -1;
      fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()((int *)a2, (int8x8_t *)&v29, (uint64_t)&v32);
      if (v32)
      {
        unsigned int v14 = LODWORD(v33[1]);
        unsigned int v13 = LODWORD(v33[0]);
      }
      else
      {
        unsigned int v14 = LODWORD(v33[1]);
        *(float *)&unint64_t v28 = v33[1];
        unsigned int v13 = LODWORD(v33[0]);
        *(float *)&int v29 = v33[0];
        int v36 = 2139095040;
        float v35 = INFINITY;
        if (v33[0] == INFINITY && *(float *)&v28 == v35) {
          goto LABEL_23;
        }
      }
      int v29 = v32;
      unint64_t v30 = __PAIR64__(v14, v13);
      int v31 = v5;
      (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 208))(a1, v7, &v29);
LABEL_23:
      int32x2_t v20 = v8;
      (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)a1 + 184))(a1, v7, &v20);
      goto LABEL_33;
    }
LABEL_34:
    uint64_t v16 = 0x3FFF00000007;
    if ((*(_DWORD *)a2 & 1) == 0) {
      uint64_t v16 = 0x3FFFFFFF0007;
    }
    if ((*(_DWORD *)a2 & 2) != 0)
    {
      uint64_t v17 = 0x1D7C48100007;
      if (*(_DWORD *)(a2 + 4) == 1) {
        uint64_t v17 = 0x2EBC84200007;
      }
      v16 &= v17;
    }
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v18 = v19 | 4;
    }
    else {
      uint64_t v18 = v19;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v16 & v18, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1B1DBBF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(int *a1@<X0>, int8x8_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = a2[2].i32[0];
  if (a1[1] == 1)
  {
    if (v6 != -1)
    {
LABEL_3:
      __int32 v7 = fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Encode(*((void *)a1 + 1), a2);
      __int32 v8 = a2->i32[1];
      if (*a1) {
        __int32 v8 = v7;
      }
      unsigned int v9 = (*a1 & 2) == 0;
      int v6 = a2[2].i32[0];
      *(_DWORD *)a3 = v7;
      *(_DWORD *)(a3 + 4) = v8;
      int8x8_t v10 = vand_s8(a2[1], (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v9), 0x1FuLL)));
      goto LABEL_41;
    }
    if ((*(unsigned char *)a1 & 2) != 0)
    {
      LODWORD(__p[0]) = 0;
      float v14 = *(float *)a2[1].i32;
      __int32 v15 = a2[1].i32[1];
      *(float *)std::string __p = v14;
      LODWORD(v26[0]) = v15;
      LODWORD(v24[0]) = 2139095040;
      float v32 = INFINITY;
      if (v14 != INFINITY || *(float *)v26 != v32) {
        goto LABEL_3;
      }
    }
    else
    {
      float v14 = *(float *)a2[1].i32;
      __int32 v15 = a2[1].i32[1];
    }
    *(int8x8_t *)a3 = *a2;
    *(float *)(a3 + 8) = v14;
    *(_DWORD *)(a3 + 12) = v15;
    goto LABEL_19;
  }
  if (v6 == -1)
  {
    *(int8x8_t *)a3 = *a2;
    *(int8x8_t *)(a3 + 8) = a2[1];
LABEL_19:
    int v6 = -1;
    goto LABEL_42;
  }
  if (!a2->i32[0])
  {
    *(int8x8_t *)a3 = *a2;
    int8x8_t v10 = a2[1];
LABEL_41:
    *(int8x8_t *)(a3 + 8) = v10;
    goto LABEL_42;
  }
  int v11 = *a1;
  if ((*a1 & 1) != 0 && a2->i32[0] != a2->i32[1])
  {
    if (FLAGS_fst_error_fatal) {
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    }
    int32x2_t v12 = fst::LogMessage::LogMessage((fst *)&v30, (uint64_t)__p);
    unsigned int v13 = (void *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"EncodeMapper: Label-encoded arc has different input and output labels", 69);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v30);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    *((unsigned char *)a1 + 16) = 1;
    int v11 = *a1;
  }
  if ((v11 & 2) != 0)
  {
    LODWORD(v26[0]) = 0;
    LODWORD(v26[0]) = a2[1].i32[0];
    LODWORD(v24[0]) = 0;
    LODWORD(v24[0]) = a2[1].i32[1];
    float v32 = 0.0;
    float v31 = 0.0;
    if (*(float *)v26 != 0.0 || *(float *)v24 != v31)
    {
      if (FLAGS_fst_error_fatal) {
        std::string::basic_string[abi:ne180100]<0>(v26, "FATAL");
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(v26, "ERROR");
      }
      uint64_t v16 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)v26);
      uint64_t v17 = (void *)fst::cerr(v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"EncodeMapper: Weight-encoded arc has non-trivial weight", 55);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      *((unsigned char *)a1 + 16) = 1;
    }
  }
  uint64_t v18 = (int8x8_t *)fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Decode(*((void *)a1 + 1), a2->i32[0]);
  if (v18)
  {
    if (*a1) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = a2;
    }
    __int32 v20 = v19->i32[1];
    if ((*a1 & 2) != 0) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = a2;
    }
    int v6 = a2[2].i32[0];
    *(_DWORD *)a3 = v18->i32[0];
    *(_DWORD *)(a3 + 4) = v20;
    int8x8_t v10 = v21[1];
    goto LABEL_41;
  }
  if (FLAGS_fst_error_fatal) {
    std::string::basic_string[abi:ne180100]<0>(v24, "FATAL");
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(v24, "ERROR");
  }
  float v22 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v24);
  char v23 = (void *)fst::cerr(v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"EncodeMapper: decode failed", 27);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  *((unsigned char *)a1 + 16) = 1;
  int v6 = a2[2].i32[0];
  *(void *)a3 = -1;
  *(int32x2_t *)(a3 + 8) = vdup_n_s32(0x7FC00000u);
LABEL_42:
  *(_DWORD *)(a3 + 16) = v6;
}

void sub_1B1DBC320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)(v27 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Encode(uint64_t a1, int8x8_t *a2)
{
  int v2 = ((int)(*(_DWORD *)a1 << 31) >> 31) & a2->i32[1];
  unsigned int v3 = (*(_DWORD *)a1 & 2) == 0;
  v6[0] = a2->i32[0];
  v6[1] = v2;
  int8x8_t v7 = vand_s8(a2[1], (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32(v3), 0x1FuLL)));
  __int32 v8 = v6;
  int v4 = std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*>((void *)(a1 + 32), &v8);
  if (!v4) {
    operator new();
  }
  return *((unsigned int *)v4 + 6);
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Decode(uint64_t a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (a2 <= (unint64_t)((*(void *)(a1 + 16) - v2) >> 3)) {
      return *(void *)(v2 + 8 * (a2 - 1));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  unsigned int v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
  int v4 = (void *)fst::cerr(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"EncodeTable::Decode: unknown decode key: ", 41);
  std::ostream::operator<<();
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_1B1DBC5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>>>::find<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*>(void *a1, int **a2)
{
  unint64_t v4 = fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey::operator()((uint64_t)(a1 + 4), *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  int8x8_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  int v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 5);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual::operator()(v12, v11[2], (uint64_t)*a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      int v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey::operator()(uint64_t a1, int *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 4);
  int v3 = *(unsigned __int8 *)(a1 + 5);
  uint64_t result = *a2;
  if (v2) {
    result += 7853 * a2[1];
  }
  if (v3)
  {
    int v5 = a2[2];
    int v6 = a2[3];
    BOOL v7 = __CFADD__(v6, v5);
    uint64_t v8 = (v6 + v5);
    uint64_t v9 = 0x100000000;
    if (!v7) {
      uint64_t v9 = 0;
    }
    result += 7867 * (v9 | v8);
  }
  return result;
}

BOOL fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)a2 == *(_DWORD *)a3
      && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4)
      && *(float *)(a2 + 8) == *(float *)(a3 + 8)
      && *(float *)(a2 + 12) == *(float *)(a3 + 12);
}

void *std::__hash_table<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,std::__unordered_map_hasher<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,false>,std::__unordered_map_equal<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual,fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey,true>,std::allocator<std::__hash_value_type<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,int>>>::__emplace_unique_key_args<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const*,std::piecewise_construct_t const&,std::tuple<fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Tuple const* const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, void **a4)
{
  unint64_t v8 = fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleKey::operator()(a1 + 32, *a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      float v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::TupleEqual::operator()(a1 + 40, v14[2], (uint64_t)*a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          float v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  float v14 = operator new(0x20uLL);
  *float v14 = 0;
  v14[1] = v9;
  void v14[2] = **a4;
  *((_DWORD *)v14 + 6) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 40);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  char v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *float v14 = *v23;
LABEL_38:
    *char v23 = v14;
    goto LABEL_39;
  }
  *float v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v22 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v24 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    char v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1B1DBCA30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::MergeStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(void *a1, uint64_t a2)
{
  std::vector<int>::vector(&v18, (int)((uint64_t)(a1[5] - a1[4]) >> 3));
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = v4 - v5;
  if (((unint64_t)(v4 - v5) >> 3))
  {
    uint64_t v7 = 0;
    unint64_t v8 = (int)(v6 >> 3);
    std::vector<int>::pointer begin = v18.__begin_;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      *begin++ = **(_DWORD **)(v5 + (v7 >> 29));
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v10 = 0;
    do
    {
      uint8x8_t v11 = *(unsigned int **)(v5 + 8 * (int)v10);
      if (v11)
      {
        do
        {
          int v12 = *v11;
          (*(void (**)(uint64_t, void, uint64_t *))(*(void *)a2 + 296))(a2, *v11, &v17);
          while (!(*(unsigned int (**)(uint64_t))(*(void *)v17 + 24))(v17))
          {
            uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17);
            v15[0] = *(void *)v13;
            v15[1] = *(void *)(v13 + 8);
            int v16 = *(_DWORD *)(v13 + 16);
            int v16 = v18.__begin_[*(int *)(a1[10] + 4 * v16)];
            if (v12 == v18.__begin_[v10]) {
              (*(void (**)(uint64_t, void *))(*(void *)v17 + 88))(v17, v15);
            }
            else {
              (*(void (**)(uint64_t))(*(void *)a2 + 208))(a2);
            }
            (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
          }
          if (v17) {
            (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          }
          uint8x8_t v11 = (unsigned int *)*((void *)v11 + 1);
        }
        while (v11);
        uint64_t v5 = a1[4];
        uint64_t v4 = a1[5];
      }
      ++v10;
    }
    while (v10 < (int)((unint64_t)(v4 - v5) >> 3));
  }
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, v18.__begin_[*(int *)(a1[10] + 4 * v14)]);
  fst::Connect<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
}

void sub_1B1DBCD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::AcyclicMinimizer(uint64_t a1, void *a2)
{
  BOOL v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1) == 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v4;
  if (!(*(uint64_t (**)(void *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1)) {
    FstCheck(1, "Weight::Properties() & kIdempotent", "../libquasar/libkaldi/tools/openfst/src/include/fst/minimize.h");
  }
  fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Initialize(a1, (uint64_t)a2);
  fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Refine((void *)a1, a2);
  return a1;
}

void sub_1B1DBCE5C(_Unwind_Exception *a1)
{
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Initialize(uint64_t a1, uint64_t a2)
{
}

void sub_1B1DBCF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Refine(void *a1, void *a2)
{
  uint64_t v2 = a1[5] - a1[4];
  if (((unint64_t)v2 >> 3))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (int)(v2 >> 3);
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      _OWORD v17[2] = a2;
      v17[3] = a1;
      int v18 = 7;
      int v16 = (uint64_t *)v17;
      uint64_t v8 = *(void *)(a1[4] + 8 * (int)v5);
      int v15 = *(_DWORD *)v8;
      unint64_t v19 = (unsigned int *)&v15;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v5;
      for (uint64_t i = *(void *)(v8 + 8); i; uint64_t i = *(void *)(i + 8))
      {
        int v15 = 0;
        int v15 = *(_DWORD *)i;
        uint64_t v10 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&v16, (unsigned int *)&v15);
        if (v17 == (void **)v10) {
          int v11 = fst::Partition<int>::AddClass((uint64_t)a1);
        }
        else {
          int v11 = *(_DWORD *)(v10 + 32);
        }
        unint64_t v19 = (unsigned int *)&v15;
        *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8) = v11;
      }
      uint64_t v12 = *(void *)(a1[4] + 8 * (int)v5);
      while (v12)
      {
        int v15 = 0;
        int v15 = *(_DWORD *)v12;
        int v13 = *(_DWORD *)(a1[10] + 4 * v15);
        unint64_t v19 = (unsigned int *)&v15;
        int v14 = *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(&v16, (unsigned int *)&v15, (uint64_t)&std::piecewise_construct, &v19)+ 8);
        uint64_t v12 = *(void *)(v12 + 8);
        if (v13 != v14) {
          fst::Partition<int>::Move(a1, v15, v14);
        }
      }
      std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
      ++v5;
    }
    while (v5 != v7);
  }
}

void sub_1B1DBD144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

uint64_t fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::AcyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::HeightVisitor,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    memset(&v6, 0, sizeof(v6));
    long long v4 = 0u;
    long long v5 = 0u;
    long long v3 = 0u;
    fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MemoryPool(v2, 64);
  }
  return result;
}

void sub_1B1DBD97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~MemoryPool((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va1);
  int v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(void *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  std::vector<char> v6 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>((uint64_t)a1, &v10, a2);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = **a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__find_equal<int>(uint64_t a1, void *a2, unsigned int *a3)
{
  long long v5 = (uint64_t *)(a1 + 8);
  long long v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = (void *)(a1 + 24);
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        if (!fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v7, *a3, *((unsigned int *)v4 + 7)))break; {
        long long v4 = (uint64_t *)*v8;
        }
        long long v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v7, *((unsigned int *)v8 + 7), *a3))break; {
      long long v5 = v8 + 1;
      }
      long long v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *((_DWORD *)a1 + 4);
  if (v6)
  {
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 32))(v26);
    if (__CFADD__(HIDWORD(v26[0]), v26[0])) {
      uint64_t v16 = 0x100000000;
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v17 = v16 | (HIDWORD(v26[0]) + LODWORD(v26[0]));
    (*(void (**)(void *__return_ptr))(*(void *)*a1 + 32))(v26);
    if (__CFADD__(HIDWORD(v26[0]), v26[0])) {
      uint64_t v18 = 0x100000000;
    }
    else {
      uint64_t v18 = 0;
    }
    unint64_t v19 = v18 | (HIDWORD(v26[0]) + LODWORD(v26[0]));
    if (v17 < v19) {
      return 1;
    }
    if (v17 <= v19 && (a1[2] & 2) != 0) {
      goto LABEL_3;
    }
    return 0;
  }
  if ((v6 & 2) == 0) {
    return 0;
  }
LABEL_3:
  unint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  if (v7 < (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a3)) {
    return 1;
  }
  unint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a2);
  if (v8 > (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 40))(*a1, a3) || (a1[2] & 4) == 0) {
    return 0;
  }
  uint64_t v9 = *a1;
  unint64_t v28 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v9 + 136))(v9, a2, v26);
  uint64_t v10 = *a1;
  unint64_t v25 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 136))(v10, a3, v23);
  while (1)
  {
    if (v26[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v26[0] + 24))(v26[0])) {
        goto LABEL_42;
      }
    }
    else if (v28 >= v26[2])
    {
      goto LABEL_42;
    }
    if (v23[0])
    {
      if ((*(uint64_t (**)(void))(*(void *)v23[0] + 24))(v23[0])) {
        goto LABEL_42;
      }
    }
    else if (v25 >= v23[2])
    {
LABEL_42:
      uint64_t v20 = 0;
      char v21 = 1;
      goto LABEL_45;
    }
    if (v26[0]) {
      int v11 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v26[0] + 32))(v26[0]);
    }
    else {
      int v11 = (_DWORD *)(v26[1] + 20 * v28);
    }
    if (v23[0]) {
      uint64_t v12 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)v23[0] + 32))(v23[0]);
    }
    else {
      uint64_t v12 = (_DWORD *)(v23[1] + 20 * v25);
    }
    if (*v11 < *v12) {
      goto LABEL_43;
    }
    if (*v11 > *v12) {
      break;
    }
    uint64_t v13 = *(void *)(a1[1] + 80);
    int v14 = *(_DWORD *)(v13 + 4 * (int)v11[4]);
    int v15 = *(_DWORD *)(v13 + 4 * (int)v12[4]);
    if (v14 < v15)
    {
LABEL_43:
      char v21 = 0;
      uint64_t v20 = 1;
      goto LABEL_45;
    }
    if (v14 > v15) {
      break;
    }
    if (v26[0]) {
      (*(void (**)(void))(*(void *)v26[0] + 40))(v26[0]);
    }
    else {
      ++v28;
    }
    if (v23[0]) {
      (*(void (**)(void))(*(void *)v23[0] + 40))(v23[0]);
    }
    else {
      ++v25;
    }
  }
  char v21 = 0;
  uint64_t v20 = 0;
LABEL_45:
  if (v23[0])
  {
    (*(void (**)(void))(*(void *)v23[0] + 8))(v23[0]);
  }
  else if (v24)
  {
    --*v24;
  }
  if (v26[0])
  {
    (*(void (**)(void))(*(void *)v26[0] + 8))(v26[0]);
  }
  else if (v27)
  {
    --*v27;
  }
  if (v21) {
    return 0;
  }
  return v20;
}

void sub_1B1DBDFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  long long v5 = (void *)(a1 + 24);
  uint64_t v6 = a1 + 8;
  do
  {
    int v7 = fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v5, *(unsigned int *)(v3 + 28), *a2);
    unint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      unint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2
    || fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::operator()(v5, *a2, *(unsigned int *)(v6 + 28)))
  {
    return v2;
  }
  return v6;
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::CyclicMinimizer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x40000, 1);
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = v3 == 0;
  *(_DWORD *)(a1 + 192) = 2;
  *(unsigned char *)(a1 + 196) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 184) = &unk_1F0A450C0;
  fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::VectorFst();
}

void sub_1B1DBE23C(_Unwind_Exception *a1)
{
  std::deque<int>::~deque[abi:ne180100](v2);
  fst::Partition<int>::~Partition(v1);
  _Unwind_Resume(a1);
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Initialize(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 31);
  fst::Reverse<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a2, a1 + 31, 1);
  fst::ArcSort<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(v4);
  fst::Partition<int>::Initialize((uint64_t)a1, (((*(void *)(a1[32] + 72) - *(void *)(a1[32] + 64)) << 29) - 0x100000000) >> 32);
  fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::PrePartition(a1, a2);
  operator new();
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Compute(void *a1)
{
  uint64_t v1 = a1[30];
  if (v1)
  {
    uint64_t v3 = (uint64_t)(a1 + 25);
    do
    {
      int v4 = *(_DWORD *)(*(void *)(a1[26] + ((a1[29] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (a1[29] & 0x3FFLL));
      ++a1[29];
      a1[30] = v1 - 1;
      std::deque<int>::__maybe_remove_front_spare[abi:ne180100](v3, 1);
      fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Split(a1, v4);
      uint64_t v1 = a1[30];
    }
    while (v1);
  }
}

void fst::ArcSort<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>(uint64_t a1)
{
  v1[0] = a1;
  v1[1] = (uint64_t)&v4;
  *(_OWORD *)std::string __p = 0u;
  long long v3 = 0u;
  fst::StateMap<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(a1, v1);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1DBE3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::PrePartition(void *a1, uint64_t a2)
{
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    char v4 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)&__p);
    long long v5 = (void *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"PrePartition", 12);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
    if (SHIBYTE(v37) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v37 = 0;
  uint64_t v38 = a2;
  uint64_t v39 = a1;
  int v40 = 1;
  std::string __p = &v36;
  int v36 = 0;
  int v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v32);
  int v6 = fst::Partition<int>::AddClass((uint64_t)a1);
  if (v32) {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
  }
  else {
    int v7 = v34;
  }
  uint64_t v8 = *(void *)(a1[1] + 8 * v7);
  uint64_t v9 = a1[4];
  uint64_t v10 = *(void *)(v9 + 8 * v6);
  if (v10)
  {
    *(void *)(v10 + 16) = v8;
    uint64_t v10 = *(void *)(v9 + 8 * v6);
  }
  *(void *)(v8 + 8) = v10;
  *(void *)(v8 + 16) = 0;
  *(void *)(v9 + 8 * v6) = v8;
  *(_DWORD *)(a1[10] + 4 * v7) = v6;
  ++*(_DWORD *)(a1[13] + 4 * v6);
  if (v32) {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
  }
  else {
    int v11 = v34;
  }
  int v31 = v11;
  v29[0] = &v31;
  *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v6;
  LODWORD(v29[0]) = v6;
  std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
  uint64_t v12 = v32;
  if (v32) {
    goto LABEL_28;
  }
  ++v34;
  while (v32)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32)) {
      goto LABEL_30;
    }
    int v31 = 0;
    if (!v32) {
      goto LABEL_19;
    }
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
LABEL_20:
    int v31 = v13;
    uint64_t v14 = std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::find<int>((uint64_t)&__p, (unsigned int *)&v31);
    if (&v36 == (void **)v14)
    {
      int v21 = fst::Partition<int>::AddClass((uint64_t)a1);
      int v22 = v21;
      uint64_t v23 = v31;
      uint64_t v24 = *(void *)(a1[1] + 8 * v31);
      uint64_t v25 = a1[4];
      uint64_t v26 = *(void *)(v25 + 8 * v21);
      if (v26)
      {
        *(void *)(v26 + 16) = v24;
        uint64_t v26 = *(void *)(v25 + 8 * v21);
      }
      *(void *)(v24 + 8) = v26;
      *(void *)(v24 + 16) = 0;
      *(void *)(v25 + 8 * v21) = v24;
      *(_DWORD *)(a1[10] + 4 * v23) = v21;
      ++*(_DWORD *)(a1[13] + 4 * v21);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v21;
      LODWORD(v29[0]) = v22;
      std::deque<int>::push_front((uint64_t)(a1 + 25), v29);
    }
    else
    {
      uint64_t v15 = v31;
      int v16 = *(_DWORD *)(v14 + 32);
      uint64_t v17 = *(void *)(a1[1] + 8 * v31);
      uint64_t v18 = a1[4];
      uint64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
        *(void *)(v19 + 16) = v17;
        uint64_t v19 = *(void *)(v18 + 8 * v16);
      }
      *(void *)(v17 + 8) = v19;
      *(void *)(v17 + 16) = 0;
      *(void *)(v18 + 8 * v16) = v17;
      *(_DWORD *)(a1[10] + 4 * v15) = v16;
      ++*(_DWORD *)(a1[13] + 4 * v16);
      int v20 = *(_DWORD *)(v14 + 32);
      v29[0] = &v31;
      *((_DWORD *)std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,fst::StateComparator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,false>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t **)&__p, (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, (unsigned int **)v29)+ 8) = v20;
    }
    uint64_t v12 = v32;
    if (v32) {
LABEL_28:
    }
      (*(void (**)(uint64_t))(*(void *)v32 + 32))(v12);
    else {
      ++v34;
    }
  }
  if (v34 < v33)
  {
LABEL_19:
    int v13 = v34;
    goto LABEL_20;
  }
LABEL_30:
  if (FLAGS_v >= 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "INFO");
    uint64_t v27 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)v29);
    unint64_t v28 = (void *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Initial Partition: ", 19);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (v30 < 0) {
      operator delete(v29[0]);
    }
  }
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  std::__tree<int>::destroy((uint64_t)&__p, v36);
}

void sub_1B1DBE878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  std::__tree<int>::destroy((uint64_t)&a20, a21);
  _Unwind_Resume(a1);
}

uint64_t fst::StateMap<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - v9) >> 2)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 20 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 32))(&v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v10);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0x3FFF0FFF0007 | (((v5 >> 16) & 1) << 30) | 0x10000000, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  char v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v16 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v14);
  while (1)
  {
    if (!v14[0])
    {
      if (v16 >= v14[2]) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v14[0] + 24))(v14[0])) {
      break;
    }
    if (v14[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v14[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = v14[1] + 20 * v16;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> const&>(v4, v7);
    }
    else
    {
      *(void *)unint64_t v8 = *(void *)v7;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 16);
      uint64_t v9 = v8 + 20;
    }
    a1[3] = v9;
    if (v14[0]) {
      (*(void (**)(void))(*(void *)v14[0] + 40))(v14[0]);
    }
    else {
      ++v16;
    }
  }
  if (v14[0])
  {
    (*(void (**)(void))(*(void *)v14[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v15) {
    --*v15;
  }
LABEL_18:
  uint64_t v10 = (uint64_t *)a1[2];
  int v11 = (uint64_t *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)v10) >> 2));
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*,false>(v10, v11, (uint64_t)v14, v13, 1);
}

void sub_1B1DBEDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::ArcSortMapper<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetState();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(a2 - 20);
      uint64_t v7 = *(void *)a1;
      if ((int)v6 < (int)*(void *)a1)
      {
        int v8 = *(_DWORD *)(a1 + 16);
        *(void *)a1 = v6;
        uint64_t v9 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
        uint64_t v10 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v9;
        *(void *)(a2 - 20) = v7;
        *(void *)(a2 - 12) = v10;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 20);
      return 1;
    default:
      int v11 = (uint64_t *)(a1 + 40);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (uint64_t *)(a1 + 20), (uint64_t *)(a1 + 40));
      uint64_t v12 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    uint64_t v15 = *(void *)v12;
    uint64_t v16 = *v11;
    if ((int)*(void *)v12 < (int)*v11)
    {
      uint64_t v17 = *(void *)(v12 + 8);
      int v18 = *(_DWORD *)(v12 + 16);
      uint64_t v19 = v13;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(void *)(v20 + 60) = v16;
        *(void *)(v20 + 68) = *(void *)(a1 + v19 + 48);
        *(_DWORD *)(v20 + 76) = *(_DWORD *)(a1 + v19 + 56);
        if (v19 == -40) {
          break;
        }
        uint64_t v16 = *(void *)(v20 + 20);
        v19 -= 20;
        if ((int)v15 >= (int)v16)
        {
          uint64_t v21 = a1 + v19 + 60;
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      *(void *)uint64_t v21 = v15;
      *(void *)(v21 + 8) = v17;
      *(_DWORD *)(v21 + 16) = v18;
      if (++v14 == 8) {
        return v12 + 20 == a2;
      }
    }
    int v11 = (uint64_t *)v12;
    v13 += 20;
    v12 += 20;
    if (v12 == a2) {
      return 1;
    }
  }
}

void fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::Split(void *a1, int a2)
{
  for (unint64_t i = *(int **)(a1[4] + 8 * a2); i; unint64_t i = (int *)*((void *)i + 1))
  {
    if (*(void *)(*(void *)(*(void *)(a1[32] + 64) + 8 * (*i + 1)) + 32) != *(void *)(*(void *)(*(void *)(a1[32] + 64) + 8 * (*i + 1)) + 24)) {
      operator new();
    }
  }
  uint64_t v4 = a1[33];
  char v5 = *(void **)v4;
  uint64_t v6 = (void *)(v4 + 8);
  uint64_t v7 = *(void *)(v4 + 8);
  if (*(void *)v4 != v7)
  {
    int v8 = -1;
    while (1)
    {
      uint64_t v9 = (void *)*v5;
      float v35 = *(void **)(v4 + 24);
      if (v7 - (uint64_t)v5 >= 9)
      {
        uint64_t v10 = (void *)*v5;
        int v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>(v5, (uint64_t)&v35, (unint64_t)(v7 - (void)v5) >> 3);
        uint64_t v12 = (void *)(v7 - 8);
        if ((void **)(v7 - 8) == v11)
        {
          *int v11 = v10;
        }
        else
        {
          *int v11 = (void *)*v12;
          *uint64_t v12 = v10;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>((BOOL)v5, (uint64_t)(v11 + 1), (uint64_t)&v35, v11 + 1 - (void **)v5);
        }
      }
      *v6 -= 8;
      if (!*v9) {
        break;
      }
      char v13 = (*(uint64_t (**)(void))(*(void *)*v9 + 24))(*v9);
      uint64_t v14 = *v9;
      if ((v13 & 1) == 0)
      {
        if (v14)
        {
          uint64_t v16 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          if (*v9)
          {
            uint64_t v17 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))(*v9);
            goto LABEL_24;
          }
        }
        else
        {
LABEL_22:
          uint64_t v16 = (int *)(v9[1] + 20 * v9[4]);
        }
        uint64_t v17 = v9[1] + 20 * v9[4];
LABEL_24:
        uint64_t v18 = *(int *)(v17 + 16);
        int v19 = *v16;
        if (v8 != *v16) {
          fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
        }
        if (*(_DWORD *)(a1[13] + 4 * *(int *)(a1[10] + 4 * (v18 - 1))) >= 2u) {
          fst::Partition<int>::SplitOn(a1, v18 - 1);
        }
        if (*v9)
        {
          (*(void (**)(void))(*(void *)*v9 + 40))(*v9);
          if (*v9)
          {
            if ((*(uint64_t (**)(void))(*(void *)*v9 + 24))(*v9))
            {
              if (*v9)
              {
                (*(void (**)(void))(*(void *)*v9 + 8))(*v9);
                goto LABEL_39;
              }
LABEL_37:
              BOOL v24 = (_DWORD *)v9[3];
              if (v24) {
                --*v24;
              }
LABEL_39:
              MEMORY[0x1B3EA8670](v9, 0x1070C401ACC3EEFLL);
LABEL_55:
              int v8 = v19;
              goto LABEL_56;
            }
LABEL_35:
            uint64_t v20 = (void **)a1[33];
            uint64_t v21 = (char *)v20[1];
            unint64_t v22 = (unint64_t)v20[2];
            if ((unint64_t)v21 >= v22)
            {
              uint64_t v25 = (v21 - (unsigned char *)*v20) >> 3;
              if ((unint64_t)(v25 + 1) >> 61) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v26 = v22 - (void)*v20;
              uint64_t v27 = v26 >> 2;
              if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
                uint64_t v27 = v25 + 1;
              }
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v27;
              }
              if (v28) {
                uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v20 + 2), v28);
              }
              else {
                uint64_t v29 = 0;
              }
              char v30 = &v29[8 * v25];
              *(void *)char v30 = v9;
              uint64_t v23 = (uint64_t)(v30 + 8);
              uint64_t v32 = (char *)*v20;
              int v31 = (char *)v20[1];
              if (v31 != *v20)
              {
                do
                {
                  uint64_t v33 = *((void *)v31 - 1);
                  v31 -= 8;
                  *((void *)v30 - 1) = v33;
                  v30 -= 8;
                }
                while (v31 != v32);
                int v31 = (char *)*v20;
              }
              *uint64_t v20 = v30;
              v20[1] = (void *)v23;
              v20[2] = &v29[8 * v28];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(void *)uint64_t v21 = v9;
              uint64_t v23 = (uint64_t)(v21 + 8);
            }
            v20[1] = (void *)v23;
            int v34 = *v20;
            float v35 = v20[3];
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>((BOOL)v34, v23, (uint64_t)&v35, (v23 - (uint64_t)v34) >> 3);
            goto LABEL_55;
          }
        }
        else
        {
          ++v9[4];
        }
        if (v9[4] >= v9[2]) {
          goto LABEL_37;
        }
        goto LABEL_35;
      }
      if (!v14) {
        goto LABEL_16;
      }
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
LABEL_18:
      MEMORY[0x1B3EA8670](v9, 0x1070C401ACC3EEFLL);
LABEL_56:
      uint64_t v4 = a1[33];
      char v5 = *(void **)v4;
      uint64_t v6 = (void *)(v4 + 8);
      uint64_t v7 = *(void *)(v4 + 8);
      if (*(void *)v4 == v7) {
        goto LABEL_57;
      }
    }
    if (v9[4] < v9[2]) {
      goto LABEL_22;
    }
LABEL_16:
    uint64_t v15 = (_DWORD *)v9[3];
    if (v15) {
      --*v15;
    }
    goto LABEL_18;
  }
LABEL_57:
  fst::Partition<int>::FinalizeSplit<fst::LifoQueue<int>>((uint64_t)a1, (uint64_t)(a1 + 23));
}

void sub_1B1DBF99C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C401ACC3EEFLL);
  _Unwind_Resume(a1);
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    int v8 = (void **)(result + 8 * (v4 >> 1));
    uint64_t v9 = (void **)(a2 - 8);
    BOOL result = fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, *(void **)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        int v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        int v8 = (void **)(v6 + 8 * v7);
        BOOL result = fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a3, *v8, v10);
        uint64_t v9 = (void **)v11;
      }
      while (result);
      *int v11 = v10;
    }
  }
  return result;
}

BOOL fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(uint64_t a1, void *a2, void *a3)
{
  if (*a2) {
    unint64_t v4 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2);
  }
  else {
    unint64_t v4 = (_DWORD *)(a2[1] + 20 * a2[4]);
  }
  if (*a3) {
    char v5 = (_DWORD *)(*(uint64_t (**)(void))(*(void *)*a3 + 32))(*a3);
  }
  else {
    char v5 = (_DWORD *)(a3[1] + 20 * a3[4]);
  }
  return *v4 > *v5;
}

void **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare &,std::__wrap_iter<fst::ArcIterator<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> **>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = (void **)&a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::ArcIterCompare::operator()(a2, *v9, (void *)a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void *fst::CyclicMinimizer<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::LifoQueue<int>>::~CyclicMinimizer(void *a1)
{
  uint64_t v2 = a1[33];
  if (v2)
  {
    long long v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x1B3EA8670](v2, 0xE0C40DD5D8FE3);
  }
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::~ImplToFst(a1 + 31);
  std::deque<int>::~deque[abi:ne180100](a1 + 25);
  return fst::Partition<int>::~Partition(a1);
}

uint64_t fst::StateMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (result != -1)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)*a2 + 24))();
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, v6);
    if ((*(int (**)(uint64_t))(*(void *)a1 + 160))(a1) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::SetState(a2, v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 240))(a1, v7);
        for (unint64_t i = a2[5]; ; a2[5] = i)
        {
          uint64_t v9 = a2[2];
          if (i >= 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - v9) >> 2)) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 208))(a1, v7, v9 + 20 * i);
          unint64_t i = a2[5] + 1;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 32))(&v10);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 184))(a1, v7, &v10);
        uint64_t v7 = (v7 + 1);
      }
      while ((int)v7 < (*(int (**)(uint64_t))(*(void *)a1 + 160))(a1));
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 192))(a1, v5 & 0xA6A0A950007, 0x3FFFFFFF0007);
  }
  return result;
}

void fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::SetState(uint64_t *a1, uint64_t a2)
{
  a1[5] = 0;
  unint64_t v4 = a1 + 2;
  a1[3] = a1[2];
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)*a1 + 40))(*a1);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::reserve(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v6 + 136))(v6, a2, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2]) {
        goto LABEL_16;
      }
      goto LABEL_7;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 24))(v15[0])) {
      break;
    }
    if (v15[0])
    {
      uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v15[0] + 32))();
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v7 = v15[1] + 20 * v17;
LABEL_8:
    unint64_t v8 = a1[3];
    if (v8 >= a1[4])
    {
      uint64_t v9 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v4, v7);
    }
    else
    {
      *(void *)unint64_t v8 = *(void *)v7;
      *(void *)(v8 + 8) = *(void *)(v7 + 8);
      *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 16);
      uint64_t v9 = v8 + 20;
    }
    a1[3] = v9;
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 40))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_18;
  }
LABEL_16:
  if (v16) {
    --*v16;
  }
LABEL_18:
  uint64_t v10 = (uint64_t *)a1[2];
  uint64_t v11 = (uint64_t *)a1[3];
  unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)v10) >> 2));
  if (v11 == v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(v10, v11, (uint64_t)v15, v13, 1);
  uint64_t v14 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *>,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *>,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal &>(a1[2], a1[3], (uint64_t)v15);
  std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::resize(v4, 0xCCCCCCCCCCCCCCCDLL * ((v14 - a1[2]) >> 2));
}

void sub_1B1DC0120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  else {
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ContextMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>>((uint64_t)&a10);
  }
  _Unwind_Resume(a1);
}

void std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 20 * a2;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 20;
  if (result + 20 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    uint64_t v5 = v4;
    uint64_t v4 = v2;
    int v6 = *(_DWORD *)(v5 + 20);
    if (v6 >= *(_DWORD *)v5)
    {
      if (v6 > *(_DWORD *)v5) {
        goto LABEL_21;
      }
      int v15 = *(_DWORD *)(v5 + 24);
      int v16 = *(_DWORD *)(v5 + 4);
      if (v15 >= v16 && (v15 > v16 || *(_DWORD *)(v5 + 36) >= *(_DWORD *)(v5 + 16))) {
        goto LABEL_21;
      }
    }
    uint64_t v7 = *(void *)(v5 + 20);
    uint64_t v8 = *(void *)(v5 + 28);
    int v9 = *(_DWORD *)(v5 + 36);
    *(void *)(v5 + 20) = *(void *)v5;
    *(void *)(v4 + 8) = *(void *)(v5 + 8);
    *(_DWORD *)(v4 + 16) = *(_DWORD *)(v5 + 16);
    uint64_t v10 = result;
    if (v5 == result) {
      goto LABEL_20;
    }
    uint64_t v11 = v3;
    while (1)
    {
      uint64_t v12 = result + v11;
      int v13 = *(_DWORD *)(result + v11 - 20);
      if (v13 <= (int)v7)
      {
        if (v13 < (int)v7) {
          goto LABEL_19;
        }
        int v14 = *(_DWORD *)(result + v11 - 16);
        if (v14 <= SHIDWORD(v7)) {
          break;
        }
      }
LABEL_12:
      v5 -= 20;
      *(void *)uint64_t v12 = *(void *)(v12 - 20);
      *(void *)(v12 + 8) = *(void *)(v12 - 12);
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 - 4);
      v11 -= 20;
      if (!v11)
      {
        uint64_t v10 = result;
        goto LABEL_20;
      }
    }
    if (v14 >= SHIDWORD(v7))
    {
      uint64_t v10 = result + v11;
      if (v9 >= *(_DWORD *)(result + v11 - 4)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v10 = v5;
LABEL_20:
    *(void *)uint64_t v10 = v7;
    *(void *)(v10 + 8) = v8;
    *(_DWORD *)(v10 + 16) = v9;
LABEL_21:
    uint64_t v2 = v4 + 20;
    v3 += 20;
  }
  while (v4 + 20 != a2);
  return result;
}

void *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = (void *)((char *)result + 20);
    if ((void *)((char *)result + 20) != a2)
    {
      uint64_t v3 = result + 1;
      do
      {
        uint64_t v4 = result;
        uint64_t result = v2;
        int v5 = *((_DWORD *)v4 + 5);
        if (v5 < *(_DWORD *)v4
          || v5 <= *(_DWORD *)v4
          && ((int v14 = *((_DWORD *)v4 + 6), v15 = *((_DWORD *)v4 + 1), v14 < v15)
           || v14 <= v15 && *((_DWORD *)v4 + 9) < *((_DWORD *)v4 + 4)))
        {
          uint64_t v6 = *result;
          uint64_t v7 = *(void *)((char *)v4 + 28);
          int v8 = *((_DWORD *)v4 + 9);
          uint64_t v9 = HIDWORD(*result);
          uint64_t v10 = v3;
          do
          {
            do
            {
              uint64_t v11 = v10;
              *(void *)((char *)v10 + 12) = *(v10 - 1);
              *(void *)((char *)v10 + 20) = *v10;
              *((_DWORD *)v10 + 7) = *((_DWORD *)v10 + 2);
              int v12 = *((_DWORD *)v10 - 7);
              uint64_t v10 = (void *)((char *)v10 - 20);
            }
            while (v12 > (int)v6);
            if (v12 < (int)v6) {
              break;
            }
            int v13 = *((_DWORD *)v11 - 6);
          }
          while (v13 > (int)v9 || v13 >= (int)v9 && v8 < *((_DWORD *)v11 - 3));
          *(v11 - 1) = v6;
          *uint64_t v11 = v7;
          *((_DWORD *)v11 + 2) = v8;
        }
        uint64_t v2 = (void *)((char *)result + 20);
        uint64_t v3 = (void *)((char *)v3 + 20);
      }
      while ((void *)((char *)result + 20) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t *a1, int *a2, uint64_t *a3)
{
  int v3 = *a2;
  if (*a2 < *(_DWORD *)a1
    || v3 <= *(_DWORD *)a1
    && ((v25 = a2[1], int v26 = *((_DWORD *)a1 + 1), v25 < v26) || v25 <= v26 && a2[4] < *((_DWORD *)a1 + 4)))
  {
    if (*(_DWORD *)a3 < v3
      || *(_DWORD *)a3 <= v3
      && ((v19 = *((_DWORD *)a3 + 1), int v20 = a2[1], v19 < v20) || v19 <= v20 && *((_DWORD *)a3 + 4) < a2[4]))
    {
      uint64_t v4 = *a1;
      int v5 = *((_DWORD *)a1 + 4);
      *a1 = *a3;
      uint64_t v6 = a3[1];
      *((_DWORD *)a1 + 4) = *((_DWORD *)a3 + 4);
      uint64_t v7 = a1[1];
      a1[1] = v6;
      *a3 = v4;
      a3[1] = v7;
      *((_DWORD *)a3 + 4) = v5;
    }
    else
    {
      uint64_t v21 = *a1;
      int v22 = *((_DWORD *)a1 + 2);
      int v23 = *((_DWORD *)a1 + 3);
      int v24 = *((_DWORD *)a1 + 4);
      *a1 = *(void *)a2;
      a1[1] = *((void *)a2 + 1);
      *((_DWORD *)a1 + 4) = a2[4];
      *(void *)a2 = v21;
      a2[2] = v22;
      a2[3] = v23;
      a2[4] = v24;
      if (*(_DWORD *)a3 < (int)v21
        || *(_DWORD *)a3 <= (int)v21
        && ((int v29 = *((_DWORD *)a3 + 1), v29 < SHIDWORD(v21)) || v29 <= SHIDWORD(v21) && *((_DWORD *)a3 + 4) < v24))
      {
        *(void *)a2 = *a3;
        *((void *)a2 + 1) = a3[1];
        a2[4] = *((_DWORD *)a3 + 4);
        *a3 = v21;
        *((_DWORD *)a3 + 2) = v22;
        *((_DWORD *)a3 + 3) = v23;
        *((_DWORD *)a3 + 4) = v24;
        return 2;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v3
    || *(_DWORD *)a3 <= v3
    && ((int v9 = *((_DWORD *)a3 + 1), v10 = a2[1], v9 < v10) || v9 <= v10 && *((_DWORD *)a3 + 4) < a2[4]))
  {
    uint64_t v11 = *(void *)a2;
    int v12 = a2[4];
    *(void *)a2 = *a3;
    uint64_t v13 = a3[1];
    a2[4] = *((_DWORD *)a3 + 4);
    uint64_t v14 = *((void *)a2 + 1);
    *((void *)a2 + 1) = v13;
    *a3 = v11;
    a3[1] = v14;
    *((_DWORD *)a3 + 4) = v12;
    if (*a2 < *(_DWORD *)a1
      || *a2 <= *(_DWORD *)a1
      && ((int v27 = a2[1], v28 = *((_DWORD *)a1 + 1), v27 < v28) || v27 <= v28 && a2[4] < *((_DWORD *)a1 + 4)))
    {
      uint64_t v15 = *a1;
      int v16 = *((_DWORD *)a1 + 4);
      *a1 = *(void *)a2;
      uint64_t v17 = *((void *)a2 + 1);
      *((_DWORD *)a1 + 4) = a2[4];
      uint64_t v18 = a1[1];
      a1[1] = v17;
      *(void *)a2 = v15;
      *((void *)a2 + 1) = v18;
      a2[4] = v16;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 4);
  int v4 = *(_DWORD *)(a2 - 20);
  unint64_t v5 = HIDWORD(*a1);
  if (v4 <= (int)*a1
    && (v4 < (int)*a1 || (int v6 = *(_DWORD *)(a2 - 16), v6 <= (int)v5) && (v6 < (int)v5 || v3 >= *(_DWORD *)(a2 - 4))))
  {
    for (unint64_t i = (uint64_t *)((char *)a1 + 20); (unint64_t)i < a2; unint64_t i = (uint64_t *)((char *)i + 20))
    {
      if (*(_DWORD *)i > (int)v2) {
        break;
      }
      if (*(_DWORD *)i >= (int)v2)
      {
        int v25 = *((_DWORD *)i + 1);
        if (v25 > (int)v5 || v25 >= (int)v5 && v3 < *((_DWORD *)i + 4)) {
          break;
        }
      }
    }
  }
  else
  {
    unint64_t i = a1;
    while (1)
    {
      int v9 = *((_DWORD *)i + 5);
      unint64_t i = (uint64_t *)((char *)i + 20);
      int v8 = v9;
      if (v9 > (int)v2) {
        break;
      }
      if (v8 >= (int)v2)
      {
        int v10 = *((_DWORD *)i + 1);
        if (v10 > (int)v5 || v10 >= (int)v5 && v3 < *((_DWORD *)i + 4)) {
          break;
        }
      }
    }
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 20; ; a2 -= 20)
    {
      if (v4 <= (int)v2)
      {
        if (v4 < (int)v2) {
          break;
        }
        int v11 = *(_DWORD *)(a2 + 4);
        if (v11 <= (int)v5 && (v11 < (int)v5 || v3 >= *(_DWORD *)(a2 + 16))) {
          break;
        }
      }
      int v12 = *(_DWORD *)(a2 - 20);
      int v4 = v12;
    }
  }
  uint64_t v13 = a1[1];
  while ((unint64_t)i < a2)
  {
    uint64_t v14 = *i;
    int v15 = *((_DWORD *)i + 4);
    uint64_t *i = *(void *)a2;
    uint64_t v16 = *(void *)(a2 + 8);
    *((_DWORD *)i + 4) = *(_DWORD *)(a2 + 16);
    uint64_t v17 = i[1];
    i[1] = v16;
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v17;
    *(_DWORD *)(a2 + 16) = v15;
    while (1)
    {
      int v19 = *((_DWORD *)i + 5);
      unint64_t i = (uint64_t *)((char *)i + 20);
      int v18 = v19;
      if (v19 > (int)v2) {
        break;
      }
      if (v18 >= (int)v2)
      {
        int v20 = *((_DWORD *)i + 1);
        if (v20 > (int)v5 || v20 >= (int)v5 && v3 < *((_DWORD *)i + 4)) {
          break;
        }
      }
    }
    do
    {
      do
      {
        int v21 = *(_DWORD *)(a2 - 20);
        a2 -= 20;
        BOOL v22 = v21 < (int)v2;
      }
      while (v21 > (int)v2);
      if (v22) {
        break;
      }
      int v23 = *(_DWORD *)(a2 + 4);
    }
    while (v23 > (int)v5 || v23 >= (int)v5 && v3 < *(_DWORD *)(a2 + 16));
  }
  if ((uint64_t *)((char *)i - 20) != a1)
  {
    *a1 = *(uint64_t *)((char *)i - 20);
    a1[1] = *(uint64_t *)((char *)i - 12);
    *((_DWORD *)a1 + 4) = *((_DWORD *)i - 1);
  }
  *(uint64_t *)((char *)i - 20) = v2;
  *(uint64_t *)((char *)i - 12) = v13;
  *((_DWORD *)i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &>(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  int v5 = *((_DWORD *)a1 + 4);
  unint64_t v6 = HIDWORD(*a1);
  while (1)
  {
    int v7 = *(_DWORD *)((char *)a1 + v2 + 20);
    if (v7 >= (int)v3)
    {
      if (v7 > (int)v3) {
        break;
      }
      int v8 = *(_DWORD *)((char *)a1 + v2 + 24);
      if (v8 >= (int)v6 && (v8 > (int)v6 || *(_DWORD *)((char *)a1 + v2 + 36) >= v5)) {
        break;
      }
    }
    v2 += 20;
  }
  unint64_t v9 = (unint64_t)a1 + v2 + 20;
  if (v2)
  {
    while (1)
    {
      int v11 = *(_DWORD *)(a2 - 20);
      a2 -= 20;
      int v10 = v11;
      if (v11 < (int)v3) {
        break;
      }
      if (v10 <= (int)v3)
      {
        int v12 = *(_DWORD *)(a2 + 4);
        if (v12 < (int)v6 || v12 <= (int)v6 && *(_DWORD *)(a2 + 16) < v5) {
          break;
        }
      }
    }
  }
  else
  {
LABEL_25:
    if (v9 < a2)
    {
      do
      {
        int v14 = *(_DWORD *)(a2 - 20);
        a2 -= 20;
        int v13 = v14;
        if (v14 < (int)v3) {
          break;
        }
        if (v13 > (int)v3) {
          goto LABEL_25;
        }
        int v15 = *(_DWORD *)(a2 + 4);
        if (v15 < (int)v6) {
          break;
        }
        if (v15 > (int)v6) {
          goto LABEL_25;
        }
      }
      while (*(_DWORD *)(a2 + 16) >= v5 && v9 < a2);
    }
  }
  unint64_t v17 = v9;
  if (v9 < a2)
  {
    unint64_t v18 = a2;
    do
    {
      uint64_t v19 = *(void *)v17;
      int v20 = *(_DWORD *)(v17 + 16);
      *(void *)unint64_t v17 = *(void *)v18;
      uint64_t v21 = *(void *)(v18 + 8);
      *(_DWORD *)(v17 + 16) = *(_DWORD *)(v18 + 16);
      uint64_t v22 = *(void *)(v17 + 8);
      *(void *)(v17 + 8) = v21;
      *(void *)unint64_t v18 = v19;
      *(void *)(v18 + 8) = v22;
      *(_DWORD *)(v18 + 16) = v20;
      do
      {
        do
        {
          int v23 = *(_DWORD *)(v17 + 20);
          v17 += 20;
          BOOL v26 = __OFSUB__(v23, v3);
          BOOL v24 = v23 == v3;
          BOOL v25 = v23 - (int)v3 < 0;
        }
        while (v23 < (int)v3);
        if (!(v25 ^ v26 | v24)) {
          break;
        }
        int v27 = *(_DWORD *)(v17 + 4);
      }
      while (v27 < (int)v6 || v27 <= (int)v6 && *(_DWORD *)(v17 + 16) < v5);
      while (1)
      {
        int v29 = *(_DWORD *)(v18 - 20);
        v18 -= 20;
        int v28 = v29;
        if (v29 < (int)v3) {
          break;
        }
        if (v28 <= (int)v3)
        {
          int v30 = *(_DWORD *)(v18 + 4);
          if (v30 < (int)v6 || v30 <= (int)v6 && *(_DWORD *)(v18 + 16) < v5) {
            break;
          }
        }
      }
    }
    while (v17 < v18);
  }
  if ((uint64_t *)(v17 - 20) != a1)
  {
    *a1 = *(void *)(v17 - 20);
    a1[1] = *(void *)(v17 - 12);
    *((_DWORD *)a1 + 4) = *(_DWORD *)(v17 - 4);
  }
  *(void *)(v17 - 20) = v3;
  *(void *)(v17 - 12) = v4;
  *(_DWORD *)(v17 - 4) = v5;
  return v17 - 20;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = *(_DWORD *)(a2 - 20);
      if (v6 < *(_DWORD *)a1
        || v6 <= *(_DWORD *)a1
        && ((v25 = *(_DWORD *)(a2 - 16), int v26 = *(_DWORD *)(a1 + 4), v25 < v26)
         || v25 <= v26 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 16)))
      {
        uint64_t v7 = *(void *)a1;
        int v8 = *(_DWORD *)(a1 + 16);
        *(void *)a1 = *(void *)(a2 - 20);
        uint64_t v9 = *(void *)(a2 - 12);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 - 4);
        uint64_t v10 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = v9;
        *(void *)(a2 - 20) = v7;
        *(void *)(a2 - 12) = v10;
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (int *)(a1 + 20), (uint64_t *)(a2 - 20));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, (uint64_t *)(a1 + 20), (uint64_t *)(a1 + 40), (uint64_t *)(a2 - 20));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 20);
      return 1;
    default:
      uint64_t v11 = a1 + 40;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (int *)(a1 + 20), (uint64_t *)(a1 + 40));
      uint64_t v12 = a1 + 60;
      if (a1 + 60 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v12 < *(_DWORD *)v11
      || *(_DWORD *)v12 <= *(_DWORD *)v11
      && ((int v23 = *(_DWORD *)(v12 + 4), v24 = *(_DWORD *)(v11 + 4), v23 < v24)
       || v23 <= v24 && *(_DWORD *)(v12 + 16) < *(_DWORD *)(v11 + 16)))
    {
      uint64_t v15 = *(void *)v12;
      uint64_t v16 = *(void *)(v12 + 8);
      int v17 = *(_DWORD *)(v12 + 16);
      *(void *)uint64_t v12 = *(void *)v11;
      *(void *)(v12 + 8) = *(void *)(v11 + 8);
      *(_DWORD *)(v12 + 16) = *(_DWORD *)(v11 + 16);
      uint64_t v18 = a1;
      if (v11 != a1)
      {
        uint64_t v19 = v13;
        while (1)
        {
          uint64_t v20 = a1 + v19;
          int v21 = *(_DWORD *)(a1 + v19 + 20);
          if (v21 <= (int)v15)
          {
            if (v21 < (int)v15) {
              goto LABEL_22;
            }
            int v22 = *(_DWORD *)(a1 + v19 + 24);
            if (v22 <= SHIDWORD(v15))
            {
              if (v22 < SHIDWORD(v15))
              {
LABEL_22:
                uint64_t v18 = v11;
                goto LABEL_24;
              }
              if (v17 >= *(_DWORD *)(a1 + v19 + 36)) {
                break;
              }
            }
          }
          v11 -= 20;
          *(void *)(v20 + 40) = *(void *)(v20 + 20);
          *(void *)(v20 + 48) = *(void *)(v20 + 28);
          *(_DWORD *)(v20 + 56) = *(_DWORD *)(v20 + 36);
          v19 -= 20;
          if (v19 == -40)
          {
            uint64_t v18 = a1;
            goto LABEL_24;
          }
        }
        uint64_t v18 = a1 + v19 + 40;
      }
LABEL_24:
      *(void *)uint64_t v18 = v15;
      *(void *)(v18 + 8) = v16;
      *(_DWORD *)(v18 + 16) = v17;
      if (++v14 == 8) {
        return v12 + 20 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 20;
    v12 += 20;
    if (v12 == a2) {
      return 1;
    }
  }
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)a1, (int *)a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || *(_DWORD *)a4 <= *(_DWORD *)a3
    && ((int v9 = *((_DWORD *)a4 + 1), v10 = *((_DWORD *)a3 + 1), v9 < v10)
     || v9 <= v10 && *((_DWORD *)a4 + 4) < *((_DWORD *)a3 + 4)))
  {
    uint64_t v11 = *a3;
    int v12 = *((_DWORD *)a3 + 4);
    *a3 = *a4;
    double result = *((double *)a4 + 1);
    *((_DWORD *)a3 + 4) = *((_DWORD *)a4 + 4);
    uint64_t v13 = a3[1];
    *((double *)a3 + 1) = result;
    *a4 = v11;
    a4[1] = v13;
    *((_DWORD *)a4 + 4) = v12;
    if (*(_DWORD *)a3 < *(_DWORD *)a2
      || *(_DWORD *)a3 <= *(_DWORD *)a2
      && ((int v14 = *((_DWORD *)a3 + 1), v15 = *((_DWORD *)a2 + 1), v14 < v15)
       || v14 <= v15 && *((_DWORD *)a3 + 4) < *((_DWORD *)a2 + 4)))
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 4);
      *a2 = *a3;
      double result = *((double *)a3 + 1);
      *((_DWORD *)a2 + 4) = *((_DWORD *)a3 + 4);
      uint64_t v18 = a2[1];
      *((double *)a2 + 1) = result;
      *a3 = v16;
      a3[1] = v18;
      *((_DWORD *)a3 + 4) = v17;
      if (*(_DWORD *)a2 < *(_DWORD *)a1
        || *(_DWORD *)a2 <= *(_DWORD *)a1
        && ((v19 = *((_DWORD *)a2 + 1), int v20 = *(_DWORD *)(a1 + 4), v19 < v20)
         || v19 <= v20 && *((_DWORD *)a2 + 4) < *(_DWORD *)(a1 + 16)))
      {
        uint64_t v21 = *(void *)a1;
        int v22 = *(_DWORD *)(a1 + 16);
        *(void *)a1 = *a2;
        double result = *((double *)a2 + 1);
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
        uint64_t v23 = *(void *)(a1 + 8);
        *(double *)(a1 + 8) = result;
        *a2 = v21;
        a2[1] = v23;
        *((_DWORD *)a2 + 4) = v22;
      }
    }
  }
  return result;
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, (uint64_t *)a2, (uint64_t *)a3, (uint64_t *)a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4
    || *(_DWORD *)a5 <= *(_DWORD *)a4
    && ((int v32 = *(_DWORD *)(a5 + 4), v33 = *(_DWORD *)(a4 + 4), v32 < v33)
     || v32 <= v33 && *(_DWORD *)(a5 + 16) < *(_DWORD *)(a4 + 16)))
  {
    uint64_t v10 = *(void *)a4;
    int v11 = *(_DWORD *)(a4 + 16);
    *(void *)a4 = *(void *)a5;
    uint64_t v12 = *(void *)(a5 + 8);
    *(_DWORD *)(a4 + 16) = *(_DWORD *)(a5 + 16);
    uint64_t v13 = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v12;
    *(void *)a5 = v10;
    *(void *)(a5 + 8) = v13;
    *(_DWORD *)(a5 + 16) = v11;
    if (*(_DWORD *)a4 < *(_DWORD *)a3
      || *(_DWORD *)a4 <= *(_DWORD *)a3
      && ((int v14 = *(_DWORD *)(a4 + 4), v15 = *(_DWORD *)(a3 + 4), v14 < v15)
       || v14 <= v15 && *(_DWORD *)(a4 + 16) < *(_DWORD *)(a3 + 16)))
    {
      uint64_t v16 = *(void *)a3;
      int v17 = *(_DWORD *)(a3 + 16);
      *(void *)a3 = *(void *)a4;
      uint64_t v18 = *(void *)(a4 + 8);
      *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 16);
      uint64_t v19 = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v18;
      *(void *)a4 = v16;
      *(void *)(a4 + 8) = v19;
      *(_DWORD *)(a4 + 16) = v17;
      if (*(_DWORD *)a3 < *(_DWORD *)a2
        || *(_DWORD *)a3 <= *(_DWORD *)a2
        && ((int v20 = *(_DWORD *)(a3 + 4), v21 = *(_DWORD *)(a2 + 4), v20 < v21)
         || v20 <= v21 && *(_DWORD *)(a3 + 16) < *(_DWORD *)(a2 + 16)))
      {
        uint64_t v22 = *(void *)a2;
        int v23 = *(_DWORD *)(a2 + 16);
        *(void *)a2 = *(void *)a3;
        uint64_t v24 = *(void *)(a3 + 8);
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
        uint64_t v25 = *(void *)(a2 + 8);
        *(void *)(a2 + 8) = v24;
        *(void *)a3 = v22;
        *(void *)(a3 + 8) = v25;
        *(_DWORD *)(a3 + 16) = v23;
        if (*(_DWORD *)a2 < *(_DWORD *)a1
          || *(_DWORD *)a2 <= *(_DWORD *)a1
          && ((int v26 = *(_DWORD *)(a2 + 4), v27 = *(_DWORD *)(a1 + 4), v26 < v27)
           || v26 <= v27 && *(_DWORD *)(a2 + 16) < *(_DWORD *)(a1 + 16)))
        {
          uint64_t v28 = *(void *)a1;
          int v29 = *(_DWORD *)(a1 + 16);
          *(void *)a1 = *(void *)a2;
          uint64_t v30 = *(void *)(a2 + 8);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          uint64_t v31 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = v30;
          *(void *)a2 = v28;
          *(void *)(a2 + 8) = v31;
          *(_DWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 20;
    if ((uint64_t)a2 - a1 >= 21)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(a1 + 20 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, v12);
        uint64_t v12 = (uint64_t *)((char *)v12 - 20);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      int v14 = a2;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 <= *(_DWORD *)a1
          && ((int v15 = *((_DWORD *)v14 + 1), v16 = *(_DWORD *)(a1 + 4), v15 < v16)
           || v15 <= v16 && *((_DWORD *)v14 + 4) < *(_DWORD *)(a1 + 16)))
        {
          uint64_t v17 = *v14;
          int v18 = *((_DWORD *)v14 + 4);
          *int v14 = *(void *)a1;
          uint64_t v19 = *(void *)(a1 + 8);
          *((_DWORD *)v14 + 4) = *(_DWORD *)(a1 + 16);
          uint64_t v20 = v14[1];
          v14[1] = v19;
          *(void *)a1 = v17;
          *(void *)(a1 + 8) = v20;
          *(_DWORD *)(a1 + 16) = v18;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v9, (uint64_t *)a1);
        }
        int v14 = (uint64_t *)((char *)v14 + 20);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 21)
    {
      int64_t v21 = v8 / 0x14uLL;
      uint64_t v22 = (uint64_t)a2 - 20;
      do
      {
        uint64_t v23 = *(void *)a1;
        int v25 = *(_DWORD *)(a1 + 8);
        int v24 = *(_DWORD *)(a1 + 12);
        int v26 = *(_DWORD *)(a1 + 16);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, a4, v21);
        if (v22 == v27)
        {
          *(void *)uint64_t v27 = v23;
          *(_DWORD *)(v27 + 8) = v25;
          *(_DWORD *)(v27 + 12) = v24;
          *(_DWORD *)(v27 + 16) = v26;
        }
        else
        {
          *(void *)uint64_t v27 = *(void *)v22;
          *(void *)(v27 + 8) = *(void *)(v22 + 8);
          *(_DWORD *)(v27 + 16) = *(_DWORD *)(v22 + 16);
          *(void *)uint64_t v22 = v23;
          *(_DWORD *)(v22 + 8) = v25;
          *(_DWORD *)(v22 + 12) = v24;
          *(_DWORD *)(v22 + 16) = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(a1, v27 + 20, a4, 0xCCCCCCCCCCCCCCCDLL * ((v27 + 20 - a1) >> 2));
        }
        v22 -= 20;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 2)))
    {
      int64_t v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 2)) | 1;
      int v6 = (uint64_t *)(result + 20 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2) < a3)
      {
        int v7 = *((_DWORD *)v6 + 5);
        if (*(_DWORD *)v6 < v7
          || *(_DWORD *)v6 <= v7
          && ((int v8 = *(_DWORD *)(result + 20 * v5 + 4), v9 = *((_DWORD *)v6 + 6), v8 < v9)
           || v8 <= v9 && *(_DWORD *)(result + 20 * v5 + 16) < *((_DWORD *)v6 + 9)))
        {
          int v6 = (uint64_t *)((char *)v6 + 20);
          int64_t v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      if (*(_DWORD *)v6 >= *(_DWORD *)a4)
      {
        if (*(_DWORD *)v6 > *(_DWORD *)a4
          || (v10 = *((_DWORD *)v6 + 1), int v11 = *((_DWORD *)a4 + 1), v10 >= v11)
          && (v10 > v11 || *((_DWORD *)v6 + 4) >= *((_DWORD *)a4 + 4)))
        {
          uint64_t v12 = *a4;
          uint64_t v13 = a4[1];
          int v14 = *((_DWORD *)a4 + 4);
          *a4 = *v6;
          a4[1] = v6[1];
          *((_DWORD *)a4 + 4) = *((_DWORD *)v6 + 4);
          if (v4 >= v5)
          {
            while (1)
            {
              int v15 = v6;
              uint64_t v16 = 2 * v5;
              int64_t v5 = (2 * v5) | 1;
              int v6 = (uint64_t *)(result + 20 * v5);
              int64_t v17 = v16 + 2;
              if (v17 < a3)
              {
                int v18 = *((_DWORD *)v6 + 5);
                if (*(_DWORD *)v6 < v18
                  || *(_DWORD *)v6 <= v18
                  && ((v19 = *(_DWORD *)(result + 20 * v5 + 4), int v20 = *((_DWORD *)v6 + 6), v19 < v20)
                   || v19 <= v20 && *(_DWORD *)(result + 20 * v5 + 16) < *((_DWORD *)v6 + 9)))
                {
                  int v6 = (uint64_t *)((char *)v6 + 20);
                  int64_t v5 = v17;
                }
              }
              if (*(_DWORD *)v6 < (int)v12) {
                break;
              }
              if (*(_DWORD *)v6 <= (int)v12)
              {
                int v21 = *((_DWORD *)v6 + 1);
                if (v21 < SHIDWORD(v12) || v21 <= SHIDWORD(v12) && *((_DWORD *)v6 + 4) < v14) {
                  break;
                }
              }
              *int v15 = *v6;
              v15[1] = v6[1];
              *((_DWORD *)v15 + 4) = *((_DWORD *)v6 + 4);
              if (v4 < v5) {
                goto LABEL_31;
              }
            }
            int v6 = v15;
          }
LABEL_31:
          *int v6 = v12;
          v6[1] = v13;
          *((_DWORD *)v6 + 4) = v14;
        }
      }
    }
  }
  return result;
}

double std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    uint64_t v7 = v3 + 1;
    a1 += 20 * (v3 + 1);
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      int v10 = *(_DWORD *)(a1 + 20);
      if (*(_DWORD *)a1 < v10
        || *(_DWORD *)a1 <= v10
        && ((int v11 = *(_DWORD *)(v6 + 20 * v7 + 4), v12 = *(_DWORD *)(a1 + 24), v11 < v12)
         || v11 <= v12 && *(_DWORD *)(v6 + 20 * v7 + 16) < *(_DWORD *)(a1 + 36)))
      {
        a1 += 20;
        uint64_t v3 = v9;
      }
    }
    *(void *)uint64_t v6 = *(void *)a1;
    double result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
    *(_DWORD *)(v6 + 16) = *(_DWORD *)(a1 + 16);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 20 * (v4 >> 1);
    int v7 = *(_DWORD *)(a2 - 20);
    if (*(_DWORD *)v6 < v7
      || *(_DWORD *)v6 <= v7
      && ((int v8 = *(_DWORD *)(result + 20 * v5 + 4), v9 = *(_DWORD *)(a2 - 16), v8 < v9)
       || v8 <= v9 && *(_DWORD *)(result + 20 * v5 + 16) < *(_DWORD *)(a2 - 4)))
    {
      uint64_t v10 = *(void *)(a2 - 20);
      uint64_t v11 = *(void *)(a2 - 12);
      int v12 = *(_DWORD *)(a2 - 4);
      *(void *)(a2 - 20) = *(void *)v6;
      uint64_t v13 = result + 20 * v5;
      *(void *)(a2 - 12) = *(void *)(v13 + 8);
      *(_DWORD *)(a2 - 4) = *(_DWORD *)(v13 + 16);
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v15 = v5 - 1;
          unint64_t v5 = (v5 - 1) >> 1;
          uint64_t v14 = result + 20 * v5;
          if (*(_DWORD *)v14 >= (int)v10)
          {
            if (*(_DWORD *)v14 > (int)v10) {
              break;
            }
            int v16 = *(_DWORD *)(result + 20 * v5 + 4);
            if (v16 >= SHIDWORD(v10) && (v16 > SHIDWORD(v10) || *(_DWORD *)(result + 20 * v5 + 16) >= v12)) {
              break;
            }
          }
          *(void *)uint64_t v6 = *(void *)v14;
          uint64_t v17 = result + 20 * v5;
          *(void *)(v6 + 8) = *(void *)(v17 + 8);
          *(_DWORD *)(v6 + 16) = *(_DWORD *)(v17 + 16);
          uint64_t v6 = v17;
          if (v15 <= 1) {
            goto LABEL_15;
          }
        }
      }
      uint64_t v14 = v6;
LABEL_15:
      *(void *)uint64_t v14 = v10;
      *(void *)(v14 + 8) = v11;
      *(_DWORD *)(v14 + 16) = v12;
    }
  }
  return result;
}

uint64_t std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *>,std::__wrap_iter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *>,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = a2;
  if (a1 != a2)
  {
    do
    {
      uint64_t v7 = a1 + 20;
      if (a1 + 20 == a2) {
        return a2;
      }
      BOOL v8 = fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal::operator()(a3, a1, a1 + 20);
      a1 = v7;
    }
    while (!v8);
    uint64_t v9 = v7 + 20;
    uint64_t v10 = v7 - 20;
    while (v9 != a2)
    {
      if (!fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal::operator()(a3, v10, v9))
      {
        *(void *)(v10 + 20) = *(void *)v9;
        v10 += 20;
        *(void *)(v10 + 8) = *(void *)(v9 + 8);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v9 + 16);
      }
      v9 += 20;
    }
    return v10 + 20;
  }
  return result;
}

BOOL fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Equal::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)a2 == *(_DWORD *)a3
      && *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4)
      && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a3 + 16)
      && *(float *)(a2 + 8) == *(float *)(a3 + 8)
      && *(float *)(a2 + 12) == *(float *)(a3 + 12);
}

void std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    a1[1] = v7 + 20 * (20 * a2 / 0x14);
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v17 = v4;
    if (v11) {
      int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(v4, v11);
    }
    else {
      int v12 = 0;
    }
    std::string __p = v12;
    uint64_t v14 = &v12[20 * v8];
    unint64_t v15 = &v14[20 * (20 * a2 / 0x14)];
    int v16 = &v12[20 * v11];
    std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__swap_out_circular_buffer(a1, &__p);
    if (v15 != v14) {
      unint64_t v15 = &v14[(v15 - v14 - 20) % 0x14uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_1B1DC1BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void fst::RmFinalEpsilon<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  memset(v4, 0, sizeof(v4));
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = 0;
  v1[0] = 0;
  v1[1] = v4;
  uint64_t v1[2] = v3;
  v1[3] = &v2;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (uint64_t)v1);
}

void sub_1B1DC2490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  uint64_t v27 = *(void **)(v25 - 120);
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = *(void **)(v25 - 96);
  if (v28) {
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::EncodeMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeMapper(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 80) - 1;
  *(_DWORD *)(v2 + 80) = v3;
  if (!v3)
  {
    uint64_t v4 = fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeTable((void *)v2);
    MEMORY[0x1B3EA8670](v4, 0x10A0C40782F6942);
  }
  return a1;
}

void *fst::EncodeTable<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::~EncodeTable(void *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 != v3)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x1B3EA8670](v5, 0x1000C40451B5BE8);
        uint64_t v3 = a1[1];
        uint64_t v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[11];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[12];
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 4));
  unint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void LMThreads::freeThread(LMThreads *this)
{
  LM::freeThread(this);
  LMStats::freeThread(v1);
  NBestHyp::freeThread(v2);
  Vocab::freeThread(v3);
  WordMesh::freeThread(v4);
  XCount::freeThread(v5);
  RefList_freeThread();
  wordError_freeThread();
  DStructThreads::freeThread(v6);
  uint64_t v7 = (void **)countSentenceWidsTLS();
  if (*v7)
  {
    free(*v7);
    *uint64_t v7 = 0;
  }
  unint64_t v8 = (void **)writeBufferTLS();
  if (*v8)
  {
    free(*v8);
    *unint64_t v8 = 0;
  }
}

uint64_t _ZTW20countSentenceWidsTLS()
{
  return countSentenceWidsTLS();
}

uint64_t _ZTW14writeBufferTLS()
{
  return writeBufferTLS();
}

double kaldi::BeamSearchDecoder::BeamSearchDecoder(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v2;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 248) = 0;
  if (*(int *)(a1 + 4) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"opts_.max_steps > 0", 19);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  if (*(int *)(a1 + 8) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"opts_.beam > 0", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

void sub_1B1DC2908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  int v12 = *(void **)(v9 + 232);
  if (v12)
  {
    *(void *)(v9 + 240) = v12;
    operator delete(v12);
  }
  a9 = (void **)(v9 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v13 = *(void **)(v9 + 184);
  if (v13)
  {
    *(void *)(v9 + 192) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v9 + 160);
  if (v14)
  {
    *(void *)(v9 + 168) = v14;
    operator delete(v14);
  }
  unint64_t v15 = *(void **)(v9 + 136);
  if (v15)
  {
    *(void *)(v9 + 144) = v15;
    operator delete(v15);
  }
  int v16 = *(void **)(v9 + 112);
  if (v16)
  {
    *(void *)(v9 + 120) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(v9 + 88);
  if (v17) {
    operator delete(v17);
  }
  int v18 = *(void **)(v9 + 64);
  if (v18)
  {
    *(void *)(v9 + 72) = v18;
    operator delete(v18);
  }
  int v19 = *v10;
  if (*v10)
  {
    *(void *)(v9 + 48) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(a1);
}

void kaldi::BeamSearchDecoder::InitDecoding(kaldi::BeamSearchDecoder *this)
{
  *(_OWORD *)((char *)this + 20) = xmmword_1B257B900;
  *((void *)this + 6) = *((void *)this + 5);
  std::vector<int>::size_type v2 = *((int *)this + 2);
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v11, v2, &__x);
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  *(std::vector<int> *)((char *)this + 64) = v11;
  unint64_t v4 = *((int *)this + 2);
  LOBYTE(__x) = 0;
  std::vector<BOOL>::vector(&v11, v4, (unsigned __int8 *)&__x);
  uint64_t v5 = (void *)*((void *)this + 11);
  if (v5) {
    operator delete(v5);
  }
  *(std::vector<int> *)((char *)this + 88) = v11;
  std::vector<int>::size_type v6 = *((int *)this + 2);
  std::vector<int>::value_type __x = 0;
  std::vector<int>::vector(&v11, v6, &__x);
  uint64_t v7 = (void *)*((void *)this + 14);
  if (v7)
  {
    *((void *)this + 15) = v7;
    operator delete(v7);
  }
  *(std::vector<int> *)((char *)this + 112) = v11;
  unint64_t v8 = *((int *)this + 2);
  std::vector<int>::value_type __x = 0;
  std::vector<float>::vector(&v11, v8, &__x);
  uint64_t v9 = (void *)*((void *)this + 17);
  if (v9)
  {
    *((void *)this + 18) = v9;
    operator delete(v9);
  }
  *(std::vector<int> *)((char *)this + 136) = v11;
  *((void *)this + 21) = *((void *)this + 20);
  *((void *)this + ++*(_DWORD *)(result + 24) = *((void *)this + 23);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 26);
}

BOOL kaldi::BeamSearchDecoder::Finished(kaldi::BeamSearchDecoder *this)
{
  if (*((_DWORD *)this + 8) == *((_DWORD *)this + 1)) {
    return 1;
  }
  unint64_t v1 = *((void *)this + 12);
  int v2 = v1 & 0x3F;
  if (v1 <= 0x3F && v2 == 0) {
    return 1;
  }
  int v4 = 0;
  uint64_t v5 = (void *)*((void *)this + 11);
  std::vector<int>::size_type v6 = &v5[v1 >> 6];
  do
  {
    BOOL result = (*v5 & (1 << v4)) != 0;
    if ((*v5 & (1 << v4)) == 0) {
      break;
    }
    v5 += v4 == 63;
    if (v4 == 63) {
      int v4 = 0;
    }
    else {
      ++v4;
    }
  }
  while (v4 != v2 || v5 != v6);
  return result;
}

uint64_t kaldi::BeamSearchDecoder::AdvanceDecoding(kaldi::BeamSearchDecoder *this, uint64_t a2, unsigned int a3)
{
  if (!*((_DWORD *)this + 8))
  {
    *((_DWORD *)this + 5) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    *((_DWORD *)this + 6) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    *((_DWORD *)this + 7) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    std::vector<int>::vector((std::vector<int> *)v17, *((int *)this + 2), (const std::vector<int>::value_type *)this + 5);
    uint64_t v5 = (void *)*((void *)this + 5);
    if (v5)
    {
      *((void *)this + 6) = v5;
      operator delete(v5);
      *((void *)this + 5) = 0;
      *((void *)this + 6) = 0;
      *((void *)this + 7) = 0;
    }
    *(_OWORD *)((char *)this + 40) = *(_OWORD *)v17;
    *((void *)this + 7) = *(void *)&v17[16];
    if ((*((_DWORD *)this + 5) & 0x80000000) != 0 || (*((_DWORD *)this + 6) & 0x80000000) != 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "bos_index_ >= 0 && eos_index_ >= 0");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
  }
  if (!a3) {
    return 0;
  }
  uint64_t v6 = 0;
  while (!kaldi::BeamSearchDecoder::Finished(this))
  {
    memset(v17, 0, sizeof(v17));
    int v18 = 1065353216;
    if (((**(uint64_t (***)(uint64_t, void, char *, char *, unsigned char *, char *))a2)(a2, *((unsigned int *)this + 8), (char *)this + 64, (char *)this + 40, v17, (char *)this + 232) & 1) == 0)goto LABEL_31; {
    if (!*(void *)&v17[24])
    }
    {
      unint64_t v9 = *((int *)this + 2);
      LOBYTE(v14) = 1;
      std::vector<BOOL>::vector(__p, v9, (unsigned __int8 *)&v14);
      unint64_t v10 = (void *)*((void *)this + 11);
      if (v10)
      {
        operator delete(v10);
        *((void *)this + 11) = 0;
        *((void *)this + 12) = 0;
        *((void *)this + 13) = 0;
      }
      *((void *)this + 11) = *(void *)__p;
      *((_OWORD *)this + 6) = *(_OWORD *)&__p[8];
LABEL_31:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)v17);
      return v6;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "loglikes");
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v17, __p);
    if (!v7) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "att_probs");
    unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v17, __p);
    if (!v8) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    kaldi::BeamSearchDecoder::AdjustLogProbs((uint64_t)this, (uint64_t)(v7 + 40));
    kaldi::BeamSearchDecoder::AdjustAttentionProbs((unsigned int *)this, (char **)v8 + 5);
    *(_OWORD *)std::string __p = *((_OWORD *)this + 7);
    *(void *)&__p[16] = *((void *)this + 16);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    *((void *)this + 14) = 0;
    kaldi::BeamSearchDecoder::AdjustLengths((uint64_t)this, __p);
    kaldi::BeamSearchDecoder::Score((uint64_t)this, (uint64_t *)v7 + 5, (uint64_t *)v8 + 5, (int **)__p, (uint64_t *)&v14, *((float *)this + 3), 0.0);
    if (!*((_DWORD *)this + 8)) {
      std::vector<float>::resize((uint64_t)&v14, ((v15 - (unsigned char *)v14) >> 2) / (unint64_t)*((int *)this + 2));
    }
    kaldi::BeamSearchDecoder::ComputeTopIndices((uint64_t)this, (uint64_t *)&v14, &v13);
    kaldi::BeamSearchDecoder::UpdateDecoderState((uint64_t)this, (uint64_t *)v7 + 5, (uint64_t *)v8 + 5, (uint64_t *)__p, &v13.__begin_);
    if (v13.__begin_)
    {
      v13.__end_ = v13.__begin_;
      operator delete(v13.__begin_);
    }
    if (v14)
    {
      unint64_t v15 = v14;
      operator delete(v14);
    }
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<float>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<float>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<float>>>>::~__hash_table((uint64_t)v17);
    ++*((_DWORD *)this + 8);
    uint64_t v6 = (v6 + 1);
    if (a3 == v6) {
      return a3;
    }
  }
  return v6;
}

void sub_1B1DC2EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
}

void sub_1B1DC2F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::BeamSearchDecoder::FinalizeDecoding(kaldi::BeamSearchDecoder *this)
{
  if (*((_DWORD *)this + 8))
  {
    kaldi::BeamSearchDecoder::Score((uint64_t)this, (uint64_t *)this + 17, (uint64_t *)this + 20, (int **)this + 14, (uint64_t *)v3, *((float *)this + 3), *((float *)this + 4));
    kaldi::BeamSearchDecoder::ComputeTopIndices((uint64_t)this, (uint64_t *)v3, &__p);
    kaldi::BeamSearchDecoder::FinalizeDecoderState((uint64_t)this, (uint64_t *)v3, &__p.__begin_);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v3[0])
    {
      v3[1] = v3[0];
      operator delete(v3[0]);
    }
  }
}

void sub_1B1DC3018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::BeamSearchDecoder::AdjustLogProbs(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    unint64_t v3 = 0;
    int v4 = *(float **)a2;
    unint64_t v5 = ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2) / v2;
    uint64_t v6 = v5 << 32;
    uint64_t v7 = (int)v5;
    uint64_t v8 = *(void *)(result + 136);
    uint64_t v9 = *(void *)(result + 88);
    unint64_t v10 = (unint64_t)(4 * (int)v5) >> 2;
    do
    {
      std::vector<int> v11 = &v4[v7];
      if ((*(void *)(v9 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3))
      {
        if (v6 >= 1)
        {
          unint64_t v12 = v10;
          std::vector<int> v13 = v4;
          do
            *v13++ = -3.4028e38;
          while (v12-- > 1);
        }
        v4[*(int *)(result + 24)] = *(float *)(v8 + 4 * v3);
      }
      else if (v6)
      {
        do
        {
          *int v4 = *(float *)(v8 + 4 * v3) + *v4;
          ++v4;
        }
        while (v4 != v11);
      }
      ++v3;
      int v4 = v11;
    }
    while (v3 != v2);
  }
  return result;
}

unsigned int *kaldi::BeamSearchDecoder::AdjustAttentionProbs(unsigned int *result, char **a2)
{
  unint64_t v3 = (float *)*((void *)result + 20);
  int v4 = (float *)*((void *)result + 21);
  if (v3 != v4)
  {
    unint64_t v5 = result;
    unint64_t v6 = result[2];
    if ((int)v6 >= 1)
    {
      unint64_t v7 = 0;
      uint64_t v8 = *a2;
      unint64_t v9 = (v4 - v3) / v6;
      unint64_t v10 = v9 << 32;
      uint64_t v11 = (int)v9;
      size_t v12 = 4 * (int)v9;
      uint64_t v13 = (int)(((a2[1] - *a2) >> 2) / v6);
      do
      {
        uint64_t v14 = &v3[v11];
        if ((*(void *)(*((void *)v5 + 11) + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7))
        {
          if (v10)
          {
            BOOL result = (unsigned int *)memmove(v8, v3, v12);
            LODWORD(v6) = v5[2];
          }
        }
        else
        {
          unint64_t v15 = (float *)v8;
          if (v10)
          {
            do
            {
              float v16 = *v3++;
              *unint64_t v15 = v16 + *v15;
              ++v15;
            }
            while (v3 != v14);
          }
        }
        v8 += 4 * v13;
        ++v7;
        unint64_t v3 = v14;
      }
      while ((uint64_t)v7 < (int)v6);
    }
  }
  return result;
}

uint64_t kaldi::BeamSearchDecoder::AdjustLengths(uint64_t result, void *a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = *(void *)(result + 88);
    do
    {
      if (((*(void *)(v4 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) == 0)
      {
        ++*(_DWORD *)(*a2 + 4 * v3);
        int v2 = *(_DWORD *)(result + 8);
      }
      ++v3;
    }
    while ((uint64_t)v3 < v2);
  }
  return result;
}

void kaldi::BeamSearchDecoder::Score(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int **a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>, float a7@<S1>)
{
  kaldi::BeamSearchDecoder::LengthPenalty(a4, v33, a6);
  kaldi::BeamSearchDecoder::CoveragePenalty(a1, a3, v32, a7);
  std::vector<float>::vector(a5, (a2[1] - *a2) >> 2);
  unint64_t v13 = *(int *)(a1 + 8);
  if ((int)v13 >= 1)
  {
    uint64_t v14 = 0;
    int v15 = 0;
    uint64_t v16 = *a2;
    unint64_t v17 = ((a2[1] - *a2) >> 2) / v13;
    do
    {
      float v18 = *((float *)v32[0] + v14);
      uint64_t v19 = v14 * (int)v17;
      if ((int)v17 >= 1)
      {
        float v20 = *((float *)v33[0] + v14);
        uint64_t v21 = *a5;
        uint64_t v22 = v15;
        do
        {
          *(float *)(v21 + 4 * v22) = v18 + (float)(*(float *)(v16 + 4 * v22) / v20);
          ++v22;
        }
        while (v22 < v19 + (int)v17);
      }
      int v23 = *(_DWORD *)(a1 + 28);
      if (v23 != -1 && v23 < (int)v17)
      {
        uint64_t v25 = *(void *)(a1 + 40);
        if (v25 != *(void *)(a1 + 48) && *(_DWORD *)(v25 + 4 * v14) == v23)
        {
          int v26 = (*a4)[v14];
          uint64_t v27 = (int *)operator new(4uLL);
          *uint64_t v27 = v26 - 1;
          v30[1] = v27 + 1;
          v30[2] = v27 + 1;
          v30[0] = v27;
          kaldi::BeamSearchDecoder::LengthPenalty(v30, __p, a6);
          float v28 = *(float *)__p[0];
          __p[1] = __p[0];
          operator delete(__p[0]);
          operator delete(v27);
          uint64_t v16 = *a2;
          *(float *)(*a5 + 4 * (v19 + *(int *)(a1 + 28))) = v18
                                                          + (float)(*(float *)(*a2 + 4 * (v19 + *(int *)(a1 + 28))) / v28);
          LODWORD(v13) = *(_DWORD *)(a1 + 8);
        }
      }
      ++v14;
      v15 += v17;
    }
    while (v14 < (int)v13);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
}

void sub_1B1DC3414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoder::ComputeTopIndices(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::vector<int>::vector(a3, (a2[1] - *a2) >> 2);
  std::vector<int>::pointer begin = a3->__begin_;
  std::vector<std::string>::pointer end = a3->__end_;
  if (a3->__begin_ != end)
  {
    int v8 = 0;
    unint64_t v9 = a3->__begin_;
    do
      *v9++ = v8++;
    while (v9 != end);
  }
  unint64_t v10 = *(int *)(a1 + 8);
  if (v10 >= (a2[1] - *a2) >> 2)
  {
    uint64_t v38 = a2;
    if ((char *)end - (char *)begin < 513)
    {
      float v35 = 0;
      uint64_t v37 = 0;
    }
    else
    {
      float v35 = (int *)std::get_temporary_buffer[abi:ne180100]<int>(end - begin);
      uint64_t v37 = v36;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(begin, end, &v38, end - begin, v35, v37);
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    uint64_t v38 = a2;
    if (v10)
    {
      uint64_t v11 = &begin[v10];
      if ((int)v10 >= 2)
      {
        unint64_t v12 = (v10 - 2) >> 1;
        unint64_t v13 = v12 + 1;
        uint64_t v14 = &begin[v12];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v38, v10, v14--);
          --v13;
        }
        while (v13);
      }
      if (v11 != end)
      {
        int v15 = &begin[v10];
        do
        {
          uint64_t v16 = *v15;
          uint64_t v17 = *begin;
          if (*(float *)(*a2 + 4 * v16) > *(float *)(*a2 + 4 * v17))
          {
            *int v15 = v17;
            *std::vector<int>::pointer begin = v16;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<int> kaldi::quasar::argsortn<float,false>(std::vector<float> const&,unsigned long)::{lambda(int,int)#1} &,std::__wrap_iter<int *>>((uint64_t)begin, &v38, v10, begin);
          }
          ++v15;
        }
        while (v15 != end);
      }
      if ((int)v10 >= 2)
      {
        uint64_t v18 = v10;
        do
        {
          uint64_t v19 = 0;
          int v20 = *begin;
          uint64_t v21 = v38;
          uint64_t v22 = begin;
          do
          {
            int v23 = v22;
            v22 += v19 + 1;
            uint64_t v24 = 2 * v19;
            uint64_t v19 = (2 * v19) | 1;
            uint64_t v25 = v24 + 2;
            if (v25 < v18 && *(float *)(*v21 + 4 * *v22) > *(float *)(*v21 + 4 * v22[1]))
            {
              ++v22;
              uint64_t v19 = v25;
            }
            *int v23 = *v22;
          }
          while (v19 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
          if (v22 == --v11)
          {
            *uint64_t v22 = v20;
          }
          else
          {
            *uint64_t v22 = *v11;
            *uint64_t v11 = v20;
            uint64_t v26 = (char *)v22 - (char *)begin + 4;
            if (v26 >= 5)
            {
              unint64_t v27 = (((unint64_t)v26 >> 2) - 2) >> 1;
              float v28 = &begin[v27];
              uint64_t v29 = *v28;
              uint64_t v30 = *v22;
              uint64_t v31 = *v21;
              float v32 = *(float *)(v31 + 4 * v30);
              if (*(float *)(v31 + 4 * v29) > v32)
              {
                do
                {
                  int v33 = v28;
                  *uint64_t v22 = v29;
                  if (!v27) {
                    break;
                  }
                  unint64_t v27 = (v27 - 1) >> 1;
                  float v28 = &begin[v27];
                  uint64_t v29 = *v28;
                  uint64_t v22 = v33;
                }
                while (*(float *)(v31 + 4 * v29) > v32);
                *int v33 = v30;
              }
            }
          }
        }
        while (v18-- > 2);
      }
    }
    std::vector<int>::resize((std::vector<unsigned int> *)a3, *(int *)(a1 + 8));
  }
}

void sub_1B1DC3724(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoder::UpdateDecoderState(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int **a5)
{
  unint64_t v9 = *(int *)(a1 + 8);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  unint64_t v12 = *a5;
  unint64_t v13 = a5[1];
  uint64_t v14 = (int **)(a1 + 64);
  unint64_t v15 = ((a2[1] - *a2) >> 2) / v9;
  if (*a5 != v13)
  {
    uint64_t v16 = *v14;
    do
    {
      int v17 = *v12++;
      *v16++ = v17 / (int)v15;
    }
    while (v12 != v13);
  }
  memset(&v55, 0, sizeof(v55));
  uint64_t v18 = (int **)(a1 + 40);
  kaldi::BeamSearchDecoder::Gather<int>(a1, (uint64_t *)(a1 + 40), (int **)(a1 + 64), &v55);
  uint64_t v19 = *a5;
  int v20 = a5[1];
  uint64_t v21 = *v18;
  if (*a5 != v20)
  {
    uint64_t v22 = *v18;
    do
    {
      int v23 = *v19++;
      *v22++ = v23 % (int)v15;
    }
    while (v19 != v20);
  }
  uint64_t v24 = *(int **)(a1 + 48);
  if (v21 != v24)
  {
    int v25 = 0;
    uint64_t v26 = *(uint64_t **)(a1 + 88);
    int v27 = *(_DWORD *)(a1 + 24);
    do
    {
      uint64_t v28 = 1 << v25;
      if (v27 == *v21) {
        uint64_t v29 = *v26 | v28;
      }
      else {
        uint64_t v29 = *v26 & ~v28;
      }
      *uint64_t v26 = v29;
      ++v21;
      v26 += v25 == 63;
      if (v25 == 63) {
        int v25 = 0;
      }
      else {
        ++v25;
      }
    }
    while (v21 != v24);
  }
  unint64_t v52 = 0;
  int v53 = 0;
  uint64_t v54 = 0;
  kaldi::BeamSearchDecoder::Gather<float>(a1, (uint64_t *)(a1 + 136), v14, (float **)&v52);
  kaldi::BeamSearchDecoder::Gather<float>(a1, a2, a5, (float **)(a1 + 136));
  kaldi::BeamSearchDecoder::GatherBlocks<float>(a1, a3, v14, ((v11 - v10) >> 2) / v9, (char **)(a1 + 160));
  kaldi::BeamSearchDecoder::Gather<int>(a1, a4, v14, (std::vector<unsigned int> *)(a1 + 112));
  int v30 = *(_DWORD *)(a1 + 8);
  if (v30 <= 0)
  {
    std::vector<int> __p = 0;
    uint64_t v50 = 0;
    int v51 = 0;
  }
  else
  {
    uint64_t v31 = 0;
    std::vector<unsigned int>::pointer begin = v55.__begin_;
    do
    {
      int v33 = *(_DWORD *)(a1 + 28);
      if (v33 != -1 && begin[v31] == v33 && (*v18)[v31] == v33)
      {
        --*(_DWORD *)(*(void *)(a1 + 112) + 4 * v31);
        int v30 = *(_DWORD *)(a1 + 8);
      }
      ++v31;
    }
    while (v31 < v30);
    std::vector<int> __p = 0;
    uint64_t v50 = 0;
    int v51 = 0;
    if (v30 >= 1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      do
      {
        uint64_t v36 = *v18;
        uint64_t v37 = *v14;
        float v38 = *(float *)(*(void *)(a1 + 136) + 4 * v35) - *((float *)v52 + v35);
        if (v34 >= v51)
        {
          uint64_t v39 = (char *)__p;
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v34 - (unsigned char *)__p) >> 2);
          unint64_t v41 = v40 + 1;
          if (v40 + 1 > 0x1555555555555555) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v51 - (unsigned char *)__p) >> 2) > v41) {
            unint64_t v41 = 0x5555555555555556 * ((v51 - (unsigned char *)__p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v51 - (unsigned char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v42 = 0x1555555555555555;
          }
          else {
            unint64_t v42 = v41;
          }
          if (v42)
          {
            int v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v51, v42);
            uint64_t v39 = (char *)__p;
            uint64_t v34 = v50;
          }
          else
          {
            int v43 = 0;
          }
          long long v44 = &v43[12 * v40];
          *(_DWORD *)long long v44 = v36[v35];
          *((_DWORD *)v44 + 1) = v37[v35];
          *((float *)v44 + 2) = v38;
          BOOL v45 = v44;
          if (v34 != v39)
          {
            do
            {
              uint64_t v46 = *(void *)(v34 - 12);
              v34 -= 12;
              int v47 = *((_DWORD *)v34 + 2);
              *(void *)(v45 - 12) = v46;
              v45 -= 12;
              *((_DWORD *)v45 + 2) = v47;
            }
            while (v34 != v39);
            uint64_t v39 = (char *)__p;
          }
          uint64_t v34 = v44 + 12;
          std::vector<int> __p = v45;
          uint64_t v50 = v44 + 12;
          int v51 = &v43[12 * v42];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v34 = v36[v35];
          *((_DWORD *)v34 + 1) = v37[v35];
          *((float *)v34 + 2) = v38;
          v34 += 12;
        }
        uint64_t v50 = v34;
        ++v35;
      }
      while (v35 < *(int *)(a1 + 8));
    }
  }
  std::vector<std::vector<std::tuple<int,int,float>>>::push_back[abi:ne180100]((uint64_t *)(a1 + 208), (uint64_t)&__p);
  if (__p)
  {
    uint64_t v50 = (char *)__p;
    operator delete(__p);
  }
  if (v52)
  {
    int v53 = v52;
    operator delete(v52);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_1B1DC3B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoder::FinalizeDecoderState(uint64_t a1, uint64_t *a2, int **a3)
{
  kaldi::BeamSearchDecoder::Gather<float>(a1, a2, a3, (float **)(a1 + 184));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  kaldi::BeamSearchDecoder::Gather<float>(a1, (uint64_t *)(a1 + 136), a3, (float **)__p);
  unint64_t v5 = *(void **)(a1 + 136);
  if (v5)
  {
    *(void *)(a1 + 144) = v5;
    operator delete(v5);
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(_OWORD *)__p;
  *(void *)(a1 + 1--*(_DWORD *)(a9 + 52) = v12;
  __p[1] = 0;
  uint64_t v12 = 0;
  __p[0] = 0;
  long long v9 = 0uLL;
  unint64_t v6 = (uint64_t *)(*(void *)(a1 + 216) - 24);
  uint64_t v10 = 0;
  kaldi::BeamSearchDecoder::Gather<std::tuple<int,int,float>>(a1, v6, a3, (uint64_t *)&v9);
  uint64_t v7 = *(void *)(a1 + 216);
  int v8 = *(void **)(v7 - 24);
  if (v8)
  {
    *(void *)(v7 - 16) = v8;
    operator delete(v8);
    *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
    *(void *)(v7 - 16) = 0;
    *(void *)(v7 - 8) = 0;
  }
  *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v9;
  *(void *)(v7 - 8) = v10;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B1DC3C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::BeamSearchDecoder::Gather<int>(int a1, uint64_t *a2, int **a3, std::vector<unsigned int> *this)
{
  std::vector<int>::resize(this, a3[1] - *a3);
  uint64_t v7 = *a3;
  int v8 = a3[1];
  if (*a3 != v8)
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v10 = *a2;
    do
    {
      uint64_t v11 = *v7++;
      *begin++ = *(_DWORD *)(v10 + 4 * v11);
    }
    while (v7 != v8);
  }
}

float kaldi::BeamSearchDecoder::Gather<float>(uint64_t a1, uint64_t *a2, int **a3, float **a4)
{
  std::vector<float>::resize((uint64_t)a4, a3[1] - *a3);
  int v8 = *a3;
  long long v9 = a3[1];
  if (*a3 != v9)
  {
    uint64_t v10 = *a4;
    uint64_t v11 = *a2;
    do
    {
      uint64_t v12 = *v8++;
      float result = *(float *)(v11 + 4 * v12);
      *v10++ = result;
    }
    while (v8 != v9);
  }
  return result;
}

void kaldi::BeamSearchDecoder::GatherBlocks<float>(uint64_t a1, void *a2, void *a3, int a4, char **a5)
{
  uint64_t v9 = a4;
  std::vector<float>::resize((uint64_t)a5, ((uint64_t)(a3[1] - *a3) >> 2) * a4);
  uint64_t v10 = (_DWORD *)*a3;
  uint64_t v11 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v11)
  {
    uint64_t v12 = *a5;
    do
    {
      if (a4) {
        memmove(v12, (const void *)(*a2 + 4 * *v10 * a4), 4 * v9);
      }
      ++v10;
      v12 += 4 * v9;
    }
    while (v10 != v11);
  }
}

uint64_t std::vector<std::vector<std::tuple<int,int,float>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<std::tuple<int,int,float>>>::__swap_out_circular_buffer(a1, v16);
    int v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    _OWORD v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    int v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1B1DC3F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::BeamSearchDecoder::Gather<std::tuple<int,int,float>>(uint64_t a1, uint64_t *a2, int **a3, uint64_t *a4)
{
  std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>>::resize((uint64_t)a4, a3[1] - *a3);
  int v8 = *a3;
  unint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    uint64_t v10 = *a4;
    uint64_t v11 = *a2;
    do
    {
      int v12 = *v8++;
      unint64_t v13 = (float *)(v11 + 12 * v12);
      uint64_t v14 = *(void *)v13;
      float result = v13[2];
      unint64_t v15 = HIDWORD(*(void *)v13);
      *(_DWORD *)uint64_t v10 = v14;
      *(_DWORD *)(v10 + 4) = v15;
      *(float *)(v10 + 8) = result;
      v10 += 12;
    }
    while (v8 != v9);
  }
  return result;
}

BOOL kaldi::BeamSearchDecoder::ReachedFinal(kaldi::BeamSearchDecoder *this, int a2)
{
  int v11 = a2;
  int v2 = (int *)((char *)this + 8);
  if (a2 != -1 && *v2 >= a2) {
    int v2 = &v11;
  }
  unint64_t v3 = *v2;
  if ((v3 & 0x80000000) != 0) {
    uint64_t v4 = -(uint64_t)((63 - v3) >> 6);
  }
  else {
    uint64_t v4 = v3 >> 6;
  }
  int v5 = v3 & 0x3F;
  if (v5) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v4 == 0;
  }
  if (v6) {
    return 0;
  }
  int v7 = 0;
  int v8 = (void *)*((void *)this + 11);
  unint64_t v9 = &v8[v4];
  do
  {
    BOOL result = (*v8 & (1 << v7)) != 0;
    if ((*v8 & (1 << v7)) != 0) {
      break;
    }
    v8 += v7 == 63;
    if (v7 == 63) {
      int v7 = 0;
    }
    else {
      ++v7;
    }
  }
  while (v7 != v5 || v8 != v9);
  return result;
}

uint64_t kaldi::BeamSearchDecoder::GetRawLattice(uint64_t a1, uint64_t a2, int a3)
{
  int v51 = a3;
  int v5 = (int *)(a1 + 8);
  if (a3 != -1 && *v5 >= a3) {
    int v5 = &v51;
  }
  int v6 = *v5;
  int v51 = *v5;
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  if (*(void *)(a1 + 216) == *(void *)(a1 + 208))
  {
    uint64_t result = 0;
    uint64_t v24 = *(void *)(a1 + 232);
    uint64_t v23 = *(void *)(a1 + 240);
    if (v23 == v24 || v6 == 0) {
      return result;
    }
    uint64_t v25 = 0;
  }
  else
  {
    if (!v6) {
      return 0;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
    uint64_t v50 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v7, &v50);
    long long v47 = 0u;
    long long v48 = 0u;
    int v49 = 1065353216;
    LODWORD(v44) = 0;
    if (v6 >= 1)
    {
      do
      {
        float v38 = &v44;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v47, (int *)&v44, (uint64_t)&std::piecewise_construct, (_DWORD **)&v38)+ 5) = v7;
        LODWORD(v44) = v44 + 1;
      }
      while ((int)v44 < v6);
    }
    unsigned int v8 = -1431655765 * ((*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3) - 1;
    if ((v8 & 0x80000000) == 0)
    {
      do
      {
        uint64_t v9 = *(void *)(a1 + 208);
        uint64_t v10 = v8;
        long long v44 = 0u;
        long long v45 = 0u;
        int v46 = 1065353216;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap((uint64_t)&v44, (uint64_t)&v47);
        int v11 = (uint64_t *)v45;
        if ((void)v45)
        {
          int v12 = (void *)(v9 + 24 * v8);
          do
          {
            uint64_t v13 = *v12 + 12 * *((int *)v11 + 4);
            float v14 = *(float *)(v13 + 8);
            uint64_t v15 = *(void *)v13;
            uint64_t v42 = v15;
            float v43 = v14;
            if (v15 == *(_DWORD *)(a1 + 24))
            {
              if (*(unsigned char *)a1) {
                LODWORD(v15) = 0;
              }
            }
            else if (v15 == *(_DWORD *)(a1 + 20))
            {
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains BOS label (", 36);
                uint64_t v16 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"). Mapping it to label 0.", 25);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
              }
              LODWORD(v15) = 0;
            }
            else if (!v15)
            {
              LODWORD(v15) = *(_DWORD *)(a1 + 20);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains label 0. Mapping it to BOS label (", 59);
                int v17 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)").", 2);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
                LODWORD(v15) = *(_DWORD *)(a1 + 20);
              }
            }
            if (*(unsigned char *)(a1 + 1) && v42 == *(_DWORD *)(a1 + 28)) {
              LODWORD(v15) = 0;
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3) - 1 != v10
              || (uint64_t v18 = *(void *)(a1 + 184), v18 == *(void *)(a1 + 192)))
            {
              float v19 = -0.0;
            }
            else
            {
              float v19 = *(float *)(v18 + 4 * *((int *)v11 + 4))
                  - *(float *)(*(void *)(a1 + 136) + 4 * *((int *)v11 + 4));
            }
            int v20 = *((_DWORD *)v11 + 5);
            float v38 = (long long *)__PAIR64__(v15, v42);
            float v39 = -v19;
            float v40 = -v43;
            int v41 = v20;
            uint64_t v21 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v47, (int *)&v42 + 1);
            if (v21)
            {
              uint64_t v22 = *((unsigned int *)v21 + 5);
            }
            else
            {
              uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
              unint64_t v52 = (_DWORD *)&v42 + 1;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)&v47, (int *)&v42 + 1, (uint64_t)&std::piecewise_construct, &v52)+ 5) = v22;
            }
            (*(void (**)(uint64_t, uint64_t, long long **))(*(void *)a2 + 208))(a2, v22, &v38);
            int v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v44);
        unsigned int v8 = v10 - 1;
      }
      while ((int)v10 > 0);
    }
    (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, *(unsigned int *)(v48 + 20));
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v47);
    uint64_t v24 = *(void *)(a1 + 232);
    uint64_t v23 = *(void *)(a1 + 240);
    uint64_t v25 = v7;
  }
  if (v23 != v24)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2) == -1)
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v25);
    }
    int32x2_t v37 = vdup_n_s32(0x7F800000u);
    (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(void *)a2 + 184))(a2, v25, &v37);
    uint64_t v28 = *(unsigned int **)(a1 + 232);
    uint64_t v29 = *(unsigned int **)(a1 + 240);
    if (v28 == v29)
    {
      uint64_t v32 = v25;
    }
    else
    {
      do
      {
        unsigned int v30 = *v28;
        float v31 = *((float *)v28 + 1);
        uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
        if (v30 == *(_DWORD *)(a1 + 24))
        {
          if (*(unsigned char *)a1) {
            unsigned int v33 = 0;
          }
          else {
            unsigned int v33 = v30;
          }
        }
        else if (v30 == *(_DWORD *)(a1 + 20))
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains BOS label (", 36);
            uint64_t v34 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"). Mapping it to label 0.", 25);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
          }
          unsigned int v33 = 0;
        }
        else
        {
          unsigned int v33 = v30;
          if (!v30)
          {
            unsigned int v33 = *(_DWORD *)(a1 + 20);
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Decoding output contains label 0. Mapping it to BOS label (", 59);
              uint64_t v35 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)").", 2);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
              unsigned int v33 = *(_DWORD *)(a1 + 20);
            }
          }
        }
        if (*(unsigned char *)(a1 + 1))
        {
          if (v30 == *(_DWORD *)(a1 + 28)) {
            unsigned int v33 = 0;
          }
        }
        float v38 = (long long *)__PAIR64__(v33, v30);
        float v39 = 0.0;
        float v40 = -v31;
        int v41 = v32;
        (*(void (**)(uint64_t, uint64_t, long long **))(*(void *)a2 + 208))(a2, v25, &v38);
        v28 += 2;
        uint64_t v25 = v32;
      }
      while (v28 != v29);
    }
    uint64_t v36 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v32, &v36);
  }
  fst::RemoveEpsLocal<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
  return 1;
}

void sub_1B1DC4774(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t kaldi::BeamSearchDecoder::GetBestPath(uint64_t a1, uint64_t a2)
{
  return kaldi::BeamSearchDecoder::GetRawLattice(a1, a2, 1);
}

void kaldi::BeamSearchDecoder::LengthPenalty(int **a1@<X1>, void *a2@<X8>, float a3@<S0>)
{
  unint64_t v5 = a1[1] - *a1;
  int v16 = 1065353216;
  int v6 = (float **)std::vector<float>::vector(a2, v5, &v16);
  if (a3 != 0.0)
  {
    unsigned int v8 = a1;
    uint64_t v7 = *a1;
    uint64_t v9 = (char *)v8[1] - (char *)v7;
    if (v9)
    {
      unint64_t v10 = v9 >> 2;
      long double v11 = a3;
      int v12 = *v6;
      if (v10 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v10;
      }
      do
      {
        int v14 = *v7++;
        float v15 = pow(((double)v14 + 5.0) / 6.0, v11);
        *v12++ = v15;
        --v13;
      }
      while (v13);
    }
  }
}

void kaldi::BeamSearchDecoder::CoveragePenalty(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>, float a4@<S0>)
{
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  unint64_t v9 = *(int *)(a1 + 8);
  int v24 = 0;
  unint64_t v10 = std::vector<float>::vector(a3, v9, &v24);
  if (a4 != 0.0)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      int v13 = 0;
      unint64_t v14 = ((v7 - v8) >> 2) / v9;
      uint64_t v15 = *a2;
      uint64_t v16 = *v10;
      do
      {
        uint64_t v17 = v12 + 1;
        float v18 = *(float *)(v16 + 4 * v12);
        if ((int)v14 >= 1)
        {
          uint64_t v19 = v13;
          do
          {
            float v20 = *(float *)(v15 + 4 * v19);
            float v21 = 1.0;
            if (v20 > 1.0 || (v22 = v20 < 0.000001, float v21 = *(float *)(v15 + 4 * v19), v23 = 0.000001, !v22)) {
              float v23 = v21;
            }
            float v18 = logf(v23) + v18;
            *(float *)(v16 + 4 * v12) = v18;
            ++v19;
          }
          while (v19 < v17 * (int)v14);
        }
        *(float *)(v16 + 4 * v12) = v18 * a4;
        v13 += v14;
        ++v12;
      }
      while (v17 != v11);
    }
  }
}

int *std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    uint64_t v8 = (char *)result;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *result;
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * v10))
      {
        *uint64_t result = v9;
        *(a2 - 1) = v10;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      BOOL v22 = a5;
      unint64_t v23 = a4 >> 1;
      int v24 = &result[a4 >> 1];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5);
        uint64_t v26 = &v22[v23];
        uint64_t result = std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>((int *)&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v26);
        int v27 = &v22[a4];
        uint64_t v28 = *a3;
        uint64_t v29 = v26;
        while (v29 != v27)
        {
          unsigned int v30 = v29;
          uint64_t v31 = *v29;
          float v32 = *(float *)(*v28 + 4 * v31);
          uint64_t v33 = *v22;
          float v34 = *(float *)(*v28 + 4 * v33);
          if (v32 > v34) {
            LODWORD(v33) = v31;
          }
          v22 += v32 <= v34;
          uint64_t v29 = &v30[v32 > v34];
          *(_DWORD *)uint64_t v8 = v33;
          v8 += 4;
          if (v22 == v26)
          {
            if (v29 != v27)
            {
              uint64_t v35 = 0;
              if (v32 > v34) {
                char v36 = 1;
              }
              else {
                char v36 = 2;
              }
              int32x2_t v37 = &v30[v36 & 1];
              do
              {
                *(_DWORD *)&v8[v35 * 4] = v37[v35];
                ++v35;
              }
              while (&v37[v35] != v27);
            }
            return result;
          }
        }
        if (v22 != v26)
        {
          uint64_t v38 = 0;
          do
          {
            *(_DWORD *)&v8[v38 * 4] = v22[v38];
            ++v38;
          }
          while (&v22[v38] != v26);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v8[4 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v22, a6);
        return (int *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(v8, &v8[4 * (a4 >> 1)], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v22, a6);
      }
    }
    else if (result != a2)
    {
      uint64_t v12 = result + 1;
      if (result + 1 != a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        uint64_t v15 = result;
        do
        {
          uint64_t v16 = *v15;
          uint64_t v15 = v12;
          uint64_t v17 = *v12;
          float v18 = *(float *)(v14 + 4 * v17);
          if (v18 > *(float *)(v14 + 4 * v16))
          {
            uint64_t v19 = v13;
            while (1)
            {
              *(int *)((char *)result + v19 + 4) = v16;
              if (!v19) {
                break;
              }
              uint64_t v16 = *(int *)((char *)result + v19 - 4);
              v19 -= 4;
              if (v18 <= *(float *)(v14 + 4 * v16))
              {
                float v20 = (int *)((char *)result + v19 + 4);
                goto LABEL_15;
              }
            }
            float v20 = result;
LABEL_15:
            *float v20 = v17;
          }
          uint64_t v12 = v15 + 1;
          v13 += 4;
        }
        while (v15 + 1 != a2);
      }
    }
  }
  return result;
}

int *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(int *result, int *a2, uint64_t **a3, unint64_t a4, int *a5)
{
  if (a4)
  {
    unint64_t v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      *unint64_t v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = **a3;
      float v12 = *(float *)(v11 + 4 * v10);
      float v13 = *(float *)(v11 + 4 * *result);
      if (v12 <= v13) {
        LODWORD(v10) = *result;
      }
      *a5 = v10;
      unint64_t v5 = a5 + 1;
      if (v12 <= v13) {
        uint64_t v7 = a2 - 1;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(result, v25, a3, a4 >> 1, a5, a4 >> 1);
      uint64_t result = (int *)std::__stable_sort<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      uint64_t v26 = *a3;
      int v27 = &v7[a4 >> 1];
      while (v27 != a2)
      {
        uint64_t v28 = v27;
        uint64_t v29 = *v27;
        float v30 = *(float *)(*v26 + 4 * v29);
        uint64_t v31 = *v7;
        float v32 = *(float *)(*v26 + 4 * v31);
        if (v30 > v32) {
          LODWORD(v31) = v29;
        }
        int v27 = &v28[v30 > v32];
        v7 += v30 <= v32;
        *v5++ = v31;
        if (v7 == v25)
        {
          if (v27 != a2)
          {
            uint64_t v33 = 0;
            float v34 = &v28[v30 > v32];
            do
            {
              v5[v33] = v34[v33];
              ++v33;
            }
            while (&v34[v33] != a2);
          }
          return result;
        }
      }
      if (v7 != v25)
      {
        uint64_t v35 = 0;
        do
        {
          v5[v35] = v7[v35];
          ++v35;
        }
        while (&v7[v35] != v25);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        uint64_t v15 = 0;
        uint64_t v16 = **a3;
        uint64_t v17 = a5;
        float v18 = a5;
        do
        {
          uint64_t v20 = *v18++;
          int v19 = v20;
          uint64_t v21 = *v14;
          if (*(float *)(v16 + 4 * v21) <= *(float *)(v16 + 4 * v20))
          {
            *float v18 = v21;
          }
          else
          {
            v17[1] = v19;
            BOOL v22 = a5;
            if (v17 != a5)
            {
              uint64_t v23 = v15;
              while (1)
              {
                BOOL v22 = (int *)((char *)a5 + v23);
                uint64_t v24 = *(int *)((char *)a5 + v23 - 4);
                if (*(float *)(v16 + 4 * *v14) <= *(float *)(v16 + 4 * v24)) {
                  break;
                }
                *BOOL v22 = v24;
                v23 -= 4;
                if (!v23)
                {
                  BOOL v22 = a5;
                  break;
                }
              }
            }
            *BOOL v22 = *v14;
          }
          ++v14;
          v15 += 4;
          uint64_t v17 = v18;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(char *result, char *a2, char *a3, uint64_t **a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v10 = a6;
    float v13 = result;
    while (v10 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v14 = 0;
      uint64_t v15 = *(int *)a2;
      uint64_t v16 = **a4;
      uint64_t v17 = -a5;
      while (1)
      {
        uint64_t v18 = *(int *)&v13[v14];
        if (*(float *)(v16 + 4 * v15) > *(float *)(v16 + 4 * v18)) {
          break;
        }
        v14 += 4;
        if (__CFADD__(v17++, 1)) {
          return result;
        }
      }
      long long v59 = a4;
      __src = a7;
      uint64_t v57 = a8;
      long long v58 = a3;
      unint64_t v56 = &v13[v14];
      if (-v17 >= v10)
      {
        if (v17 == -1)
        {
          *(_DWORD *)&v13[v14] = v15;
          *(_DWORD *)a2 = v18;
          return result;
        }
        if (v17 <= 0) {
          uint64_t v30 = -v17;
        }
        else {
          uint64_t v30 = 1 - v17;
        }
        uint64_t v29 = v30 >> 1;
        uint64_t v23 = &v13[4 * (v30 >> 1) + v14];
        BOOL v22 = a2;
        if (a2 != a3)
        {
          unint64_t v31 = (a3 - a2) >> 2;
          BOOL v22 = a2;
          do
          {
            unint64_t v32 = v31 >> 1;
            uint64_t v33 = &v22[4 * (v31 >> 1)];
            uint64_t v35 = *(int *)v33;
            float v34 = v33 + 4;
            v31 += ~(v31 >> 1);
            if (*(float *)(v16 + 4 * v35) > *(float *)(v16 + 4 * *(int *)v23)) {
              BOOL v22 = v34;
            }
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        uint64_t v21 = (v22 - a2) >> 2;
      }
      else
      {
        if (v10 >= 0) {
          uint64_t v20 = v10;
        }
        else {
          uint64_t v20 = v10 + 1;
        }
        uint64_t v21 = v20 >> 1;
        BOOL v22 = &a2[4 * (v20 >> 1)];
        uint64_t v23 = a2;
        if (a2 - v13 != v14)
        {
          unint64_t v24 = (a2 - v13 - v14) >> 2;
          uint64_t v23 = &v13[v14];
          do
          {
            unint64_t v25 = v24 >> 1;
            uint64_t v26 = &v23[4 * (v24 >> 1)];
            uint64_t v28 = *(int *)v26;
            int v27 = v26 + 4;
            v24 += ~(v24 >> 1);
            if (*(float *)(v16 + 4 * *(int *)v22) > *(float *)(v16 + 4 * v28)) {
              unint64_t v24 = v25;
            }
            else {
              uint64_t v23 = v27;
            }
          }
          while (v24);
        }
        uint64_t v29 = (v23 - v13 - v14) >> 2;
      }
      a5 = -(v29 + v17);
      uint64_t v36 = v10 - v21;
      uint64_t v37 = v29;
      uint64_t v38 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>>(v23, a2, v22);
      uint64_t v39 = v37;
      float v40 = v38;
      if (v39 + v21 >= v10 - (v39 + v21) - v17)
      {
        float v43 = v22;
        uint64_t v44 = v39;
        a8 = v57;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(v38, v43, v58, v59, a5, v10 - v21, __src, v57);
        a2 = v23;
        a4 = v59;
        uint64_t v36 = v21;
        a7 = __src;
        a5 = v44;
        a3 = v40;
        float v13 = v56;
      }
      else
      {
        int v41 = v23;
        a4 = v59;
        uint64_t v42 = v21;
        a7 = __src;
        uint64_t result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::BeamSearchDecoder::ComputeTopIndices(std::vector<float> const&)::$_1 &,std::__wrap_iter<int *>>(&v13[v14], v41, v38, v59, v39, v42, __src, v57);
        float v13 = v40;
        a2 = v22;
        a8 = v57;
        a3 = v58;
      }
      uint64_t v10 = v36;
      if (!v36) {
        return result;
      }
    }
    if (a5 <= v10)
    {
      if (v13 != a2)
      {
        unint64_t v49 = 0;
        do
        {
          a7[v49 / 4] = *(_DWORD *)&v13[v49];
          v49 += 4;
        }
        while (&v13[v49] != a2);
        if (v49)
        {
          uint64_t v50 = *a4;
          int v51 = a7;
          while (a2 != a3)
          {
            uint64_t v52 = *(int *)a2;
            float v53 = *(float *)(*v50 + 4 * v52);
            float v54 = *(float *)(*v50 + 4 * *v51);
            if (v53 <= v54) {
              LODWORD(v--*(_DWORD *)(a9 + 52) = *v51;
            }
            a2 += 4 * (v53 > v54);
            v51 += v53 <= v54;
            *(_DWORD *)float v13 = v52;
            v13 += 4;
            if (&a7[v49 / 4] == v51) {
              return result;
            }
          }
          return (char *)memmove(v13, v51, (char *)a7 - (char *)v51 + v49);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v45 = 0;
      do
      {
        a7[v45] = *(_DWORD *)&a2[v45 * 4];
        ++v45;
      }
      while (&a2[v45 * 4] != a3);
      if (v45 * 4)
      {
        int v46 = &a7[v45];
        long long v47 = a3 - 4;
        while (a2 != v13)
        {
          uint64_t v48 = *(v46 - 1);
          if (*(float *)(**a4 + 4 * v48) <= *(float *)(**a4 + 4 * *((int *)a2 - 1)))
          {
            --v46;
          }
          else
          {
            LODWORD(v48) = *((_DWORD *)a2 - 1);
            a2 -= 4;
          }
          *(_DWORD *)long long v47 = v48;
          v47 -= 4;
          if (v46 == a7) {
            return result;
          }
        }
        uint64_t v55 = 0;
        do
        {
          *(_DWORD *)&v47[v55 * 4] = v46[v55 - 1];
          --v55;
        }
        while (&v46[v55] != a7);
      }
    }
  }
  return result;
}

uint64_t std::vector<std::vector<std::tuple<int,int,float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::tuple<int,int,float>>>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::tuple<int,int,float>>>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - ++*(_DWORD *)(result + 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::tuple<int,int,float>>>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::tuple<int,int,float>>>,std::reverse_iterator<std::vector<std::tuple<int,int,float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *TAllocator::clear(TAllocator *this)
{
  uint64_t result = (void *)*((void *)this + 4);
  if (result)
  {
    do
    {
      unint64_t v3 = (void *)*result;
      MEMORY[0x1B3EA8630]();
      uint64_t result = v3;
    }
    while (v3);
  }
  *(void *)this = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  return result;
}

void TAllocator::TAllocator(TAllocator *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = a2;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
}

uint64_t TAllocator::allocate(TAllocator *this, uint64_t a2)
{
  unint64_t v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = (char *)this + 16;
  uint64_t result = *((void *)this + 2);
  if (*((void *)v5 + 1) - result < v3)
  {
    if (v3 + 8 <= *((void *)this + 1)) {
      unint64_t v6 = *((void *)this + 1);
    }
    else {
      unint64_t v6 = v3 + 8;
    }
    *(void *)this += v6;
    operator new[]();
  }
  *((void *)this + 2) = result + v3;
  return result;
}

void DStructThreads::freeThread(DStructThreads *this)
{
  BM_freeThread();
  srilm_tserror_freeThread();
}

void quasar::GrammarFST::getAlternatives(unsigned __int8 ***a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4) {
    goto LABEL_57;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  do
  {
    if (v6) {
      goto LABEL_4;
    }
    int v9 = *((char *)v3 + 23);
    if (v9 < 0)
    {
      if (v3[1] != (unsigned __int8 *)1) {
        goto LABEL_4;
      }
      uint64_t v10 = *v3;
    }
    else
    {
      uint64_t v10 = v3;
      if (v9 != 1) {
        goto LABEL_4;
      }
    }
    if (*v10 == 124)
    {
      unint64_t v13 = a2[1];
      if (v13 >= a2[2])
      {
        uint64_t v14 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a2, (long long **)&v19);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a2, (long long **)&v19);
        uint64_t v14 = v13 + 24;
      }
      a2[1] = v14;
      uint64_t v5 = v19;
      for (unint64_t i = v20; i != v5; --i)
      {
        if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(i[-1].__r_.__value_.__l.__data_);
        }
      }
      uint64_t v20 = v5;
    }
LABEL_4:
    int v7 = *((unsigned __int8 *)v3 + 23);
    if (*((char *)v3 + 23) < 0)
    {
      if (v3[1] != (unsigned __int8 *)1) {
        goto LABEL_39;
      }
      int v8 = **v3;
    }
    else
    {
      if (v7 != 1) {
        goto LABEL_16;
      }
      int v8 = *(unsigned __int8 *)v3;
    }
    if (v8 == 91 || v8 == 40) {
      ++v6;
    }
    if ((v7 & 0x80) == 0)
    {
LABEL_16:
      if (v7 == 1)
      {
        int v11 = *(unsigned __int8 *)v3;
LABEL_22:
        if (v11 == 93 || v11 == 41) {
          --v6;
        }
        if (v6) {
          goto LABEL_39;
        }
        if ((v7 & 0x80) != 0)
        {
          if (v3[1] == (unsigned __int8 *)1)
          {
            char v12 = *v3;
LABEL_36:
            int v6 = 0;
            if (*v12 == 124) {
              goto LABEL_46;
            }
            goto LABEL_39;
          }
        }
        else
        {
LABEL_27:
          char v12 = v3;
          if (v7 == 1) {
            goto LABEL_36;
          }
        }
        int v6 = 0;
        goto LABEL_39;
      }
      if (!v6) {
        goto LABEL_27;
      }
      goto LABEL_39;
    }
    if (v3[1] == (unsigned __int8 *)1)
    {
      int v11 = **v3;
      goto LABEL_22;
    }
LABEL_39:
    if ((unint64_t)v5 >= v21)
    {
      uint64_t v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v19, (long long *)v3);
    }
    else
    {
      if ((v7 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
      }
      else
      {
        long long v15 = *(_OWORD *)v3;
        v5->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v15;
      }
      ++v5;
    }
    uint64_t v20 = v5;
LABEL_46:
    v3 += 3;
  }
  while (v3 != v4);
  unint64_t v17 = a2[1];
  if (v17 >= a2[2])
  {
LABEL_57:
    uint64_t v18 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a2, (long long **)&v19);
    goto LABEL_58;
  }
  std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a2, (long long **)&v19);
  uint64_t v18 = v17 + 24;
LABEL_58:
  a2[1] = v18;
  BOOL v22 = (long long **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
}

void sub_1B1DC5718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::GrammarFST::getWeight()
{
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "prior=(-?\\d+\\.?\\d*)$", 0);
}

void sub_1B1DC59A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  __cxa_end_catch();
  int v11 = *(void **)(v9 - 208);
  if (v11)
  {
    *(void *)(v9 - 200) = v11;
    operator delete(v11);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)(v9 - 96));
  _Unwind_Resume(a1);
}

uint64_t quasar::GrammarFST::extractBracketedPart(uint64_t a1, uint64_t *a2, unsigned int a3, _DWORD *a4, char *a5)
{
  if ((a3 & 0x80000000) != 0) {
    return 0;
  }
  unint64_t v7 = a3 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) < v7) {
    return 0;
  }
  uint64_t v11 = *a2 + 24 * a3;
  if (*(char *)(v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
  }
  else
  {
    long long v12 = *(_OWORD *)v11;
    v43.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v12;
  }
  unint64_t v13 = std::string::basic_string[abi:ne180100]<0>(v41, "");
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v43.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_65;
    }
    int v14 = *v43.__r_.__value_.__l.__data_;
  }
  else
  {
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_65;
    }
    int v14 = v43.__r_.__value_.__s.__data_[0];
  }
  if (v14 == 91)
  {
    MEMORY[0x1B3EA7B20](v13, "]");
    char v15 = 1;
    goto LABEL_16;
  }
  if (v14 != 40)
  {
LABEL_65:
    if (quasar::gLogLevel >= 1)
    {
      memset(v40, 0, sizeof(v40));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"RegexParseError: expected [ or(at ", 36);
      uint64_t v33 = (void *)std::ostream::operator<<();
      float v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" but found ", 11);
      uint64_t v35 = *a2 + 24 * a3;
      int v36 = *(char *)(v35 + 23);
      if (v36 >= 0) {
        uint64_t v37 = *a2 + 24 * a3;
      }
      else {
        uint64_t v37 = *(void *)v35;
      }
      if (v36 >= 0) {
        uint64_t v38 = *(unsigned __int8 *)(v35 + 23);
      }
      else {
        uint64_t v38 = *(void *)(v35 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v37, v38);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v40);
    }
    goto LABEL_73;
  }
  MEMORY[0x1B3EA7B20](v13, ")");
  char v15 = 0;
LABEL_16:
  *a5 = v15;
  uint64_t v16 = *a2;
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v17 <= v7)
  {
LABEL_73:
    uint64_t v8 = 0;
    goto LABEL_74;
  }
  int v18 = 0;
  if ((v42 & 0x80u) == 0) {
    unint64_t v19 = v42;
  }
  else {
    unint64_t v19 = (unint64_t)v41[1];
  }
  if ((v42 & 0x80u) == 0) {
    uint64_t v20 = v41;
  }
  else {
    uint64_t v20 = (void **)v41[0];
  }
  uint64_t v21 = v16 + 23;
  while (1)
  {
    if (v18)
    {
      int v22 = *(unsigned __int8 *)(v21 + 24 * v7);
      goto LABEL_36;
    }
    uint64_t v23 = (unsigned __int8 *)(v16 + 24 * v7);
    uint64_t v24 = v23[23];
    int v22 = v23[23];
    unint64_t v25 = (v24 & 0x80u) == 0 ? (void *)v23[23] : (void *)*((void *)v23 + 1);
    if (v25 == (void *)v19) {
      break;
    }
LABEL_36:
    uint64_t v23 = (unsigned __int8 *)(v16 + 24 * v7);
    if ((v22 & 0x80) != 0) {
      goto LABEL_40;
    }
    if (v22 != 1) {
      goto LABEL_44;
    }
    LODWORD(v27) = 0;
    uint64_t v28 = (unsigned char *)(v16 + 24 * v7);
LABEL_42:
    if (*v28 == 91) {
      goto LABEL_43;
    }
    if (v27)
    {
      if (*((void *)v23 + 1) != 1) {
        goto LABEL_44;
      }
      unint64_t v31 = *(unsigned char **)v23;
    }
    else
    {
      if (v22 != 1) {
        goto LABEL_44;
      }
      unint64_t v31 = v23;
    }
    if (*v31 == 40)
    {
LABEL_43:
      ++v18;
    }
    else
    {
      if (v27)
      {
        if (*((void *)v23 + 1) != 1) {
          goto LABEL_44;
        }
        unint64_t v32 = *(unsigned char **)v23;
      }
      else
      {
        if (v22 != 1) {
          goto LABEL_44;
        }
        unint64_t v32 = v23;
      }
      if (*v32 != 93)
      {
        if (v27)
        {
          if (*((void *)v23 + 1) != 1) {
            goto LABEL_44;
          }
          uint64_t v23 = *(unsigned __int8 **)v23;
        }
        else if (v22 != 1)
        {
          goto LABEL_44;
        }
        if (*v23 != 41) {
          goto LABEL_44;
        }
      }
      --v18;
    }
LABEL_44:
    if (v17 <= ++v7) {
      goto LABEL_73;
    }
  }
  if ((v22 & 0x80) == 0)
  {
    if (!v23[23]) {
      goto LABEL_79;
    }
    uint64_t v26 = v20;
    while (*v23 == *(unsigned __int8 *)v26)
    {
      ++v23;
      uint64_t v26 = (void **)((char *)v26 + 1);
      if (!--v24) {
        goto LABEL_79;
      }
    }
    goto LABEL_36;
  }
  uint64_t v29 = v21;
  int v30 = memcmp(*(const void **)v23, v20, *((void *)v23 + 1));
  uint64_t v21 = v29;
  if (v30)
  {
LABEL_40:
    uint64_t v27 = *(void *)(v16 + 24 * v7 + 8);
    if (v27 != 1) {
      goto LABEL_44;
    }
    uint64_t v28 = *(unsigned char **)v23;
    goto LABEL_42;
  }
LABEL_79:
  *a4 = v7;
  uint64_t v8 = 1;
LABEL_74:
  if ((char)v42 < 0) {
    operator delete(v41[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  return v8;
}

void sub_1B1DC5D9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::GrammarFST::compile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a3;
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    *(void *)&long long v50 = 0;
    DWORD2(v50) = 0;
    HIDWORD(v50) = a4;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a6 + 208))(a6, a3, &v50);
    return 1;
  }
  quasar::GrammarFST::getAlternatives((unsigned __int8 ***)a2, &v68);
  uint64_t v15 = v68;
  uint64_t v16 = v69;
  if (0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3) <= 1)
  {
    uint64_t v20 = *(unsigned __int8 ***)a2;
    if (*(void *)(a2 + 8) == *(void *)a2) {
      goto LABEL_74;
    }
    uint64_t v21 = a1;
    uint64_t v22 = 0;
    signed int v23 = 0;
    uint64_t v44 = v21;
    while (1)
    {
      uint64_t v24 = &v20[3 * v22];
      if (*((char *)v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v67, (const std::string::value_type *)*v24, (std::string::size_type)v24[1]);
      }
      else
      {
        long long v25 = *(_OWORD *)v24;
        v67.__r_.__value_.__r.__words[2] = (std::string::size_type)v24[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v25;
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v67.__r_.__value_.__l.__size_ != 1) {
          goto LABEL_47;
        }
        int v26 = *v67.__r_.__value_.__l.__data_;
        if (v26 != 40 && v26 != 91)
        {
          if (v26 != 93)
          {
            uint64_t v27 = (std::string *)v67.__r_.__value_.__r.__words[0];
            if (*v67.__r_.__value_.__l.__data_ != 41)
            {
              if ((*((unsigned char *)&v67.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                if (HIBYTE(v67.__r_.__value_.__r.__words[2]) != 1) {
                  goto LABEL_47;
                }
LABEL_29:
                uint64_t v27 = &v67;
              }
              if (v27->__r_.__value_.__s.__data_[0] != 124)
              {
LABEL_47:
                if (-1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) != v22) {
                  (*(void (**)(uint64_t))(*(void *)a6 + 200))(a6);
                }
                LODWORD(v46[0]) = 0;
                quasar::GrammarFST::getWeight();
              }
            }
          }
LABEL_31:
          if (quasar::gLogLevel >= 1)
          {
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            long long v56 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
            uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Unexpected regex found: '", 25);
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v29 = &v67;
            }
            else {
              uint64_t v29 = (std::string *)v67.__r_.__value_.__r.__words[0];
            }
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v67.__r_.__value_.__l.__size_;
            }
            unint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
            unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' in '", 6);
            v46[0] = (uint64_t)" ";
            v46[1] = 1;
            quasar::join<std::vector<std::string>>((uint64_t *)a2, v46);
            if ((v49 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if ((v49 & 0x80u) == 0) {
              uint64_t v34 = v49;
            }
            else {
              uint64_t v34 = v48;
            }
            uint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)p_p, v34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"'", 1);
            if ((char)v49 < 0) {
              operator delete(__p);
            }
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v50);
          }
LABEL_58:
          int v41 = 1;
          goto LABEL_70;
        }
      }
      else
      {
        if (HIBYTE(v67.__r_.__value_.__r.__words[2]) != 1) {
          goto LABEL_47;
        }
        if (v67.__r_.__value_.__s.__data_[0] != 40 && v67.__r_.__value_.__s.__data_[0] != 91)
        {
          if (v67.__r_.__value_.__s.__data_[0] != 93 && v67.__r_.__value_.__s.__data_[0] != 41) {
            goto LABEL_29;
          }
          goto LABEL_31;
        }
      }
      LODWORD(v46[0]) = 0;
      char v45 = 0;
      uint64_t v14 = quasar::GrammarFST::extractBracketedPart(v14, (uint64_t *)a2, v23, v46, &v45);
      if ((v14 & 1) == 0)
      {
        if (quasar::gLogLevel >= 1)
        {
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v56 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Unbalanced parenthesis or brackets found in grammar", 51);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v50);
        }
        goto LABEL_58;
      }
      int v36 = (long long *)(*(void *)a2 + 24 * v22 + 24);
      uint64_t v37 = SLODWORD(v46[0]);
      uint64_t v38 = (long long *)(*(void *)a2 + 24 * SLODWORD(v46[0]));
      *(void *)&long long v51 = 0;
      long long v50 = 0uLL;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::string *)&v50, v36, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v36) >> 3));
      uint64_t v39 = a4;
      if (-1 - 0x5555555555555555 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) != v37) {
        uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 200))(a6);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v67.__r_.__value_.__l.__size_ == 1)
        {
          float v40 = (std::string *)v67.__r_.__value_.__r.__words[0];
LABEL_61:
          if (v40->__r_.__value_.__s.__data_[0] == 91)
          {
            std::vector<int> __p = 0;
            LODWORD(v48) = 0;
            HIDWORD(v48) = v39;
            (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a6 + 208))(a6, v9, &__p);
          }
        }
      }
      else if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) == 1)
      {
        float v40 = &v67;
        goto LABEL_61;
      }
      int v42 = quasar::GrammarFST::compile(v44, &v50, v9, v39, (a5 + 1), a6, a7);
      if (v42)
      {
        signed int v23 = v37 + 1;
        uint64_t v9 = v39;
      }
      else
      {
        uint64_t v9 = v9;
      }
      if (v42) {
        int v41 = 4;
      }
      else {
        int v41 = 1;
      }
      std::vector<int> __p = &v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_70:
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((v41 | 4) != 4)
      {
        uint64_t v18 = 0;
        goto LABEL_75;
      }
      uint64_t v22 = v23;
      uint64_t v20 = *(unsigned __int8 ***)a2;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) <= v23) {
        goto LABEL_74;
      }
    }
  }
  if (v68 == v69)
  {
LABEL_74:
    uint64_t v18 = 1;
    goto LABEL_75;
  }
  do
  {
    uint64_t v17 = quasar::GrammarFST::compile(a1, v15, v9, a4, 1, a6, a7);
    uint64_t v18 = v17;
    v15 += 24;
    if (v15 == v16) {
      char v19 = 0;
    }
    else {
      char v19 = v17;
    }
  }
  while ((v19 & 1) != 0);
LABEL_75:
  *(void *)&long long v50 = &v68;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  return v18;
}

void sub_1B1DC657C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  std::vector<int> __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v23 - 121) < 0) {
    operator delete(*(void **)(v22 + 272));
  }
  a22 = v23 - 120;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void quasar::GrammarFST::_createFST()
{
}

void sub_1B1DC6C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
}

void quasar::GrammarFST::createFstWithTokenization()
{
}

void quasar::SpokenFormLine::getLineWithPrior(quasar::SpokenFormLine *this@<X0>, std::string *a2@<X8>)
{
  if (*((unsigned char *)this + 56))
  {
    std::to_string(&v18, *(float *)this);
    uint64_t v4 = std::string::insert(&v18, 0, "prior=");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    int v6 = std::string::append(&v19, " ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = (const std::string::value_type *)*((void *)this + 1);
    uint64_t v9 = (char *)this + 8;
    uint64_t v8 = v10;
    int v11 = v9[23];
    if (v11 >= 0) {
      long long v12 = v9;
    }
    else {
      long long v12 = v8;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = v9[23];
    }
    else {
      std::string::size_type v13 = *((void *)v9 + 1);
    }
    uint64_t v14 = std::string::append(&v20, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  else if (*((char *)this + 31) < 0)
  {
    uint64_t v16 = (const std::string::value_type *)*((void *)this + 1);
    std::string::size_type v17 = *((void *)this + 2);
    std::string::__init_copy_ctor_external(a2, v16, v17);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void sub_1B1DC6ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1B1DC6F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::nnet1::Nnet>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x51B3BEA3677D46CFLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::nnet1::Nnet>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 376 * a2;
    while (v3 != v7)
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v3 - 376));
    a1[1] = v7;
  }
}

void kaldi::nnet1::ParallelComponent::ParallelComponent(kaldi::nnet1::ParallelComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 54) = a2;
  *((_DWORD *)this + 55) = a3;
  *((_WORD *)this + 112) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 26) = &unk_1F0A4BA20;
  *((void *)this + 32) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 264) = xmmword_1B255E480;
  *((void *)this + 35) = 0x3BF800000;
  *((_DWORD *)this + 72) = 1;
  *((_WORD *)this + 146) = 0;
  *((unsigned char *)this + 294) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (uint64_t *)&off_1F0A32380);
  *(void *)uint64_t v3 = off_1F0A4AAA0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = off_1F0A4AD58;
  *(void *)(v3 + 160) = &unk_1F0A4ABF8;
  *(void *)(v3 + 168) = &unk_1F0A4AC20;
  *(_WORD *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 192) = 0;
}

void sub_1B1DC716C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::WordVecComponent::WordVecComponent(kaldi::nnet1::WordVecComponent *this, int a2, int a3)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_WORD *)this + 8) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 6) = &unk_1F0A4A6D0;
  *(_OWORD *)((char *)this + 56) = xmmword_1B255E480;
  *((_DWORD *)this + 18) = -1082130432;
  *(void *)((char *)this + 76) = 0x100000003;
  *((_WORD *)this + 42) = 0;
  *((unsigned char *)this + 86) = 0;
  *(void *)this = &unk_1F0A4A7B0;
  *((void *)this + 11) = &unk_1F0A4A8E0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((void *)this + 12) = &unk_1F0A51768;
  *((unsigned char *)this + 136) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 1--*(_DWORD *)(a9 + 52) = 0u;
  *((void *)this + 18) = &unk_1F0A51768;
  *((unsigned char *)this + 184) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + ++*(_DWORD *)(result + 24) = &unk_1F0A51768;
  *((unsigned char *)this + 232) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 64) = a3 / a2;
  *((_DWORD *)this + 65) = 1065353216;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 33) = &unk_1F0A51768;
  *((unsigned char *)this + 304) = 0;
  *((void *)this + 47) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  return result;
}

uint64_t *kaldi::nnet1::ParallelComponent::CheckNetworkDimensions(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  *((unsigned char *)this + 177) = 1;
  int v2 = (kaldi::nnet1::Nnet *)this[23];
  uint64_t v3 = (kaldi::nnet1::Nnet *)this[24];
  if (v2 == v3)
  {
    int v5 = 0;
    int v4 = 0;
    uint64_t v8 = *this;
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
    do
    {
      int v6 = kaldi::nnet1::Nnet::InputDim(v2);
      int v7 = kaldi::nnet1::Nnet::OutputDim(v2);
      this = (uint64_t *)kaldi::nnet1::Nnet::OutputDim(v2);
      uint64_t v8 = *(void *)v1;
      if (this != *(_DWORD *)(v1 + 12 + *(void *)(*(void *)v1 - 24))) {
        *(unsigned char *)(v1 + 177) = 0;
      }
      v4 += v6;
      v5 += v7;
      int v2 = (kaldi::nnet1::Nnet *)((char *)v2 + 376);
    }
    while (v2 != v3);
  }
  *(unsigned char *)(v1 + 176) = 1;
  uint64_t v9 = v8;
  uint64_t v10 = *(int *)(v1 + *(void *)(v8 - 24) + 8);
  if (v10 != v4)
  {
    if (v4 / (unint64_t)(0x51B3BEA3677D46CFLL * ((uint64_t)(*(void *)(v1 + 192) - *(void *)(v1 + 184)) >> 3)) != v10)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Input dimension of parallel component and input dimensions of nested networks do not match.");
      goto LABEL_16;
    }
    *(unsigned char *)(v1 + 176) = 0;
  }
  if (!*(unsigned char *)(v1 + 177) && *(_DWORD *)(v1 + *(void *)(v9 - 24) + 12) != v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Output dimension of parallel component and output dimensions of nested networks do not match.");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return this;
}

char *std::vector<kaldi::nnet1::Nnet>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAE4C415C9882BALL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[376 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*,kaldi::nnet1::Nnet*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a4 + v7), (const kaldi::nnet1::Nnet *)(a2 + v7));
      v7 += 376;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1DC7574(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 376;
    do
    {
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v4 + v2));
      v2 -= 376;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAE4C415C9882BALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(376 * a2);
}

void std::vector<kaldi::nnet1::Nnet>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(v4 - 376));
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__append(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v4 = v5;
  int v6 = *(kaldi::nnet1::Nnet **)(result - 8);
  if (0x51B3BEA3677D46CFLL * ((v5 - (uint64_t)v6) >> 3) < a2)
  {
    uint64_t v7 = 0x51B3BEA3677D46CFLL * (((uint64_t)v6 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 <= 0xAE4C415C9882B9)
    {
      unint64_t v9 = 0x51B3BEA3677D46CFLL * ((v4 - *a1) >> 3);
      if (2 * v9 > v8) {
        unint64_t v8 = 2 * v9;
      }
      if (v9 >= 0x572620AE4C415CLL) {
        unint64_t v10 = 0xAE4C415C9882B9;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v10) {
        int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>>(result, v10);
      }
      else {
        int v11 = 0;
      }
      kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)&v11[376 * v7]);
    }
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (a2) {
    kaldi::nnet1::Nnet::Nnet(v6);
  }
  a1[1] = v6;
  return result;
}

void sub_1B1DC77CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::nnet1::Nnet>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::nnet1::Nnet>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>,std::reverse_iterator<kaldi::nnet1::Nnet*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 376;
  while (a3 + v10 != a5)
  {
    long long v12 = (kaldi::nnet1::Nnet *)(v11 + v10);
    v10 -= 376;
    kaldi::nnet1::Nnet::Nnet(v12, (const kaldi::nnet1::Nnet *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::nnet1::Nnet>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 376;
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(i - 376));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,false>(unint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(uint64_t a1, const void **a2, const void **a3)
{
  int v5 = *((char *)a3 + 23);
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *a2;
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  if (v5 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16) {
    return 0;
  }
  unint64_t v19 = (const void **)a3[3];
  uint64_t v18 = a3 + 3;
  unint64_t v17 = v19;
  int v20 = *((char *)v18 + 23);
  uint64_t v23 = (const void **)a2[3];
  uint64_t v22 = a2 + 3;
  long long v21 = v23;
  int v24 = *((char *)v22 + 23);
  if (v24 >= 0) {
    size_t v25 = *((unsigned __int8 *)v22 + 23);
  }
  else {
    size_t v25 = (size_t)v22[1];
  }
  if (v24 >= 0) {
    BOOL v26 = v22;
  }
  else {
    BOOL v26 = v21;
  }
  if (v20 >= 0) {
    size_t v27 = *((unsigned __int8 *)v18 + 23);
  }
  else {
    size_t v27 = (size_t)v18[1];
  }
  if (v20 >= 0) {
    uint64_t v28 = v18;
  }
  else {
    uint64_t v28 = v17;
  }
  if (v27 >= v25) {
    size_t v29 = v25;
  }
  else {
    size_t v29 = v27;
  }
  int v30 = memcmp(v26, v28, v29);
  if (v30) {
    return v30 < 0;
  }
  else {
    return v25 < v27;
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    int v5 = (const void **)(a1 + 48);
    if ((const void **)(a1 + 48) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        size_t v9 = v5;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, v5, (const void **)v8))
        {
          *(_OWORD *)BOOL v13 = *(_OWORD *)v9;
          uint64_t v14 = v9[2];
          v9[1] = 0;
          void v9[2] = 0;
          *size_t v9 = 0;
          long long __p = *(_OWORD *)(v8 + 72);
          uint64_t v16 = *(void *)(v8 + 88);
          *(void *)(v8 + 72) = 0;
          *(void *)(v8 + 80) = 0;
          uint64_t v10 = v7;
          *(void *)(v8 + 88) = 0;
          while (1)
          {
            std::pair<std::string,std::string>::operator=[abi:ne180100](a1 + v10 + 48, (long long *)(a1 + v10));
            if (!v10) {
              break;
            }
            char v11 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v13, (const void **)(a1 + v10 - 48));
            v10 -= 48;
            if ((v11 & 1) == 0)
            {
              uint64_t v12 = a1 + v10 + 48;
              goto LABEL_10;
            }
          }
          uint64_t v12 = a1;
LABEL_10:
          std::pair<std::string,std::string>::operator=[abi:ne180100](v12, (long long *)v13);
          if (SHIBYTE(v16) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v14) < 0) {
            operator delete(v13[0]);
          }
        }
        int v5 = v9 + 6;
        v7 += 48;
        uint64_t v8 = (uint64_t)v9;
      }
      while (v9 + 6 != a2);
    }
  }
}

void sub_1B1DC8044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    int v5 = a1 + 6;
    if (a1 + 6 != a2)
    {
      do
      {
        uint64_t v7 = v5;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, v5, v4))
        {
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v7;
          size_t v9 = v7[2];
          v7[1] = 0;
          _OWORD v7[2] = 0;
          *uint64_t v7 = 0;
          long long __p = *(_OWORD *)(v4 + 9);
          char v11 = v4[11];
          v4[9] = 0;
          v4[10] = 0;
          v4[11] = 0;
          do
          {
            std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)(v4 + 6), (long long *)v4);
            v4 -= 6;
          }
          while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v8, v4) & 1) != 0);
          std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)(v4 + 6), (long long *)v8);
          if (SHIBYTE(v11) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v9) < 0) {
            operator delete(v8[0]);
          }
        }
        int v5 = v7 + 6;
        uint64_t v4 = v7;
      }
      while (v7 + 6 != a2);
    }
  }
}

void sub_1B1DC815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  char v8 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)a2, (const void **)a1);
  uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)a3, (const void **)a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v17 = *((void *)a2 + 2);
    long long v18 = *a2;
    uint64_t v19 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v19;
    *a3 = v18;
    *((void *)a3 + 2) = v17;
    uint64_t v20 = *((void *)a2 + 5);
    long long v21 = *(long long *)((char *)a2 + 24);
    uint64_t v22 = *((void *)a3 + 5);
    *(long long *)((char *)a2 + ++*(_DWORD *)(result + 24) = *(long long *)((char *)a3 + 24);
    *((void *)a2 + 5) = v22;
    *(long long *)((char *)a3 + ++*(_DWORD *)(result + 24) = v21;
    *((void *)a3 + 5) = v20;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)a2, (const void **)a1))return 1; {
    uint64_t v23 = *((void *)a1 + 2);
    }
    long long v24 = *a1;
    uint64_t v25 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v25;
    *a2 = v24;
    *((void *)a2 + 2) = v23;
    uint64_t v26 = *((void *)a1 + 5);
    long long v27 = *(long long *)((char *)a1 + 24);
    uint64_t v28 = *((void *)a2 + 5);
    *(long long *)((char *)a1 + ++*(_DWORD *)(result + 24) = *(long long *)((char *)a2 + 24);
    *((void *)a1 + 5) = v28;
    *(long long *)((char *)a2 + ++*(_DWORD *)(result + 24) = v27;
    *((void *)a2 + 5) = v26;
    return 2;
  }
  uint64_t v10 = (long long *)((char *)a1 + 24);
  if (!result)
  {
    uint64_t v29 = *((void *)a1 + 2);
    long long v30 = *a1;
    uint64_t v31 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v31;
    *a2 = v30;
    *((void *)a2 + 2) = v29;
    uint64_t v32 = *((void *)a1 + 5);
    long long v33 = *v10;
    uint64_t v34 = *((void *)a2 + 5);
    *uint64_t v10 = *(long long *)((char *)a2 + 24);
    *((void *)a1 + 5) = v34;
    *(long long *)((char *)a2 + ++*(_DWORD *)(result + 24) = v33;
    *((void *)a2 + 5) = v32;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)a3, (const void **)a2))return 1; {
    uint64_t v35 = *((void *)a2 + 2);
    }
    long long v36 = *a2;
    uint64_t v37 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v37;
    *a3 = v36;
    *((void *)a3 + 2) = v35;
    uint64_t v38 = *((void *)a2 + 5);
    long long v39 = *(long long *)((char *)a2 + 24);
    uint64_t v40 = *((void *)a3 + 5);
    *(long long *)((char *)a2 + ++*(_DWORD *)(result + 24) = *(long long *)((char *)a3 + 24);
    *((void *)a2 + 5) = v40;
    *(long long *)((char *)a3 + ++*(_DWORD *)(result + 24) = v39;
    *((void *)a3 + 5) = v38;
    return 2;
  }
  uint64_t v11 = *((void *)a1 + 2);
  long long v12 = *a1;
  uint64_t v13 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v13;
  *a3 = v12;
  *((void *)a3 + 2) = v11;
  uint64_t v14 = *((void *)a1 + 5);
  long long v15 = *v10;
  uint64_t v16 = *((void *)a3 + 5);
  *uint64_t v10 = *(long long *)((char *)a3 + 24);
  *((void *)a1 + 5) = v16;
  *(long long *)((char *)a3 + ++*(_DWORD *)(result + 24) = v15;
  *((void *)a3 + 5) = v14;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string,std::string> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a1;
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v6 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_OWORD *)long long __p = v6;
  uint64_t v20 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)(a2 - 48)))
  {
    unint64_t v7 = a1;
    do
      v7 += 48;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)v7) & 1) == 0);
  }
  else
  {
    char v8 = (const void **)(a1 + 48);
    do
    {
      unint64_t v7 = (unint64_t)v8;
      if ((unint64_t)v8 >= v4) {
        break;
      }
      int v9 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, v8);
      char v8 = (const void **)(v7 + 48);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      v4 -= 48;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    long long v10 = *(_OWORD *)v7;
    uint64_t v22 = *(void *)(v7 + 16);
    long long v21 = v10;
    long long v11 = *(_OWORD *)v4;
    *(void *)(v7 + 16) = *(void *)(v4 + 16);
    *(_OWORD *)unint64_t v7 = v11;
    long long v12 = v21;
    *(void *)(v4 + 16) = v22;
    *(_OWORD *)unint64_t v4 = v12;
    uint64_t v13 = *(void *)(v7 + 40);
    long long v14 = *(_OWORD *)(v7 + 24);
    uint64_t v15 = *(void *)(v4 + 40);
    *(_OWORD *)(v7 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(v4 + 24);
    *(void *)(v7 + 40) = v15;
    *(_OWORD *)(v4 + ++*(_DWORD *)(result + 24) = v14;
    *(void *)(v4 + 40) = v13;
    do
      v7 += 48;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)v7));
    do
      v4 -= 48;
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v17, (const void **)v4) & 1) != 0);
  }
  if (v7 - 48 != a1) {
    std::pair<std::string,std::string>::operator=[abi:ne180100](a1, (long long *)(v7 - 48));
  }
  std::pair<std::string,std::string>::operator=[abi:ne180100](v7 - 48, (long long *)v17);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  return v7;
}

void sub_1B1DC851C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string,std::string> *,std::__less<void,void> &>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v23 = *(void *)(a1 + 40);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v7 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(_OWORD *)long long __p = v7;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  do
  {
    char v8 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)(a1 + v6 + 48), (const void **)v20);
    v6 += 48;
  }
  while ((v8 & 1) != 0);
  unint64_t v9 = a1 + v6;
  if (v6 == 48)
  {
    do
    {
      if (v9 >= (unint64_t)a2) {
        break;
      }
      a2 -= 6;
    }
    while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, a2, (const void **)v20) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, a2, (const void **)v20));
  }
  if (v9 >= (unint64_t)a2)
  {
    uint64_t v18 = (long long *)(v9 - 48);
  }
  else
  {
    unint64_t v10 = a1 + v6;
    long long v11 = a2;
    do
    {
      long long v24 = *(_OWORD *)v10;
      long long v12 = v24;
      uint64_t v25 = *(const void **)(v10 + 16);
      uint64_t v13 = v25;
      long long v14 = v11[2];
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
      *(void *)(v10 + 16) = v14;
      v11[2] = v13;
      *(_OWORD *)long long v11 = v12;
      uint64_t v15 = *(const void **)(v10 + 40);
      long long v16 = *(_OWORD *)(v10 + 24);
      uint64_t v17 = v11[5];
      *(_OWORD *)(v10 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(v11 + 3);
      *(void *)(v10 + 40) = v17;
      *(_OWORD *)(v11 + 3) = v16;
      v11[5] = v15;
      do
        v10 += 48;
      while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v10, (const void **)v20) & 1) != 0);
      do
        v11 -= 6;
      while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, v11, (const void **)v20));
    }
    while (v10 < (unint64_t)v11);
    uint64_t v18 = (long long *)(v10 - 48);
  }
  if (v18 != (long long *)a1) {
    std::pair<std::string,std::string>::operator=[abi:ne180100](a1, v18);
  }
  std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v18, (long long *)v20);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20[0]);
  }
  return v18;
}

void sub_1B1DC8700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (_OWORD *)(a2 - 48);
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)(a2 - 48), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 32);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *char v8 = v10;
        *(void *)(a2 - 32) = v9;
        uint64_t v12 = *(void *)(a1 + 40);
        long long v13 = *(_OWORD *)(a1 + 24);
        uint64_t v14 = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 40) = v14;
        *(_OWORD *)(a2 - ++*(_DWORD *)(result + 24) = v13;
        *(void *)(a2 - 8) = v12;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)a1, (long long *)(a1 + 48), (long long *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      uint64_t v15 = (const void **)(a1 + 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), a3);
      uint64_t v16 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v16, v15))
    {
      *(_OWORD *)uint64_t v23 = *(_OWORD *)v16;
      uint64_t v24 = *(void *)(v16 + 16);
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      long long v19 = *(_OWORD *)(v16 + 24);
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + ++*(_DWORD *)(result + 24) = 0;
      long long __p = v19;
      uint64_t v26 = *(void *)(v16 + 40);
      uint64_t v20 = v17;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 40) = 0;
      while (1)
      {
        std::pair<std::string,std::string>::operator=[abi:ne180100](a1 + v20 + 144, (long long *)(a1 + v20 + 96));
        if (v20 == -96) {
          break;
        }
        char v21 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v23, (const void **)(a1 + v20 + 48));
        v20 -= 48;
        if ((v21 & 1) == 0)
        {
          uint64_t v22 = a1 + v20 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      std::pair<std::string,std::string>::operator=[abi:ne180100](v22, (long long *)v23);
      if (SHIBYTE(v26) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete(v23[0]);
      }
      if (++v18 == 8) {
        return v16 + 48 == a2;
      }
    }
    uint64_t v15 = (const void **)v16;
    v17 += 48;
    v16 += 48;
    if (v16 == a2) {
      return 1;
    }
  }
}

void sub_1B1DC897C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a5, (const void **)a4, (const void **)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    uint64_t v14 = *(void *)(a3 + 40);
    long long v15 = *(_OWORD *)(a3 + 24);
    uint64_t v16 = *(void *)(a4 + 40);
    *(_OWORD *)(a3 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a4 + 24);
    *(void *)(a3 + 40) = v16;
    *(_OWORD *)(a4 + ++*(_DWORD *)(result + 24) = v15;
    *(void *)(a4 + 40) = v14;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a5, (const void **)a3, (const void **)a2))
    {
      uint64_t v17 = *(void *)(a2 + 16);
      long long v18 = *(_OWORD *)a2;
      uint64_t v19 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(void *)(a3 + 16) = v17;
      uint64_t v20 = *(void *)(a2 + 40);
      long long v21 = *(_OWORD *)(a2 + 24);
      uint64_t v22 = *(void *)(a3 + 40);
      *(_OWORD *)(a2 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 + 24);
      *(void *)(a2 + 40) = v22;
      *(_OWORD *)(a3 + ++*(_DWORD *)(result + 24) = v21;
      *(void *)(a3 + 40) = v20;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a5, (const void **)a2, (const void **)a1))
      {
        uint64_t v23 = *(void *)(a1 + 16);
        long long v24 = *(_OWORD *)a1;
        uint64_t v25 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v25;
        *(_OWORD *)a2 = v24;
        *(void *)(a2 + 16) = v23;
        uint64_t v26 = *(void *)(a1 + 40);
        __n128 result = *(__n128 *)(a1 + 24);
        uint64_t v27 = *(void *)(a2 + 40);
        *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
        *(void *)(a1 + 40) = v27;
        *(__n128 *)(a2 + ++*(_DWORD *)(result + 24) = result;
        *(void *)(a2 + 40) = v26;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a2, a3, a4, a6);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *(void *)(a4 + 16);
    long long v14 = *(_OWORD *)a4;
    uint64_t v15 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v15;
    *(_OWORD *)a5 = v14;
    *(void *)(a5 + 16) = v13;
    uint64_t v16 = *(void *)(a4 + 40);
    long long v17 = *(_OWORD *)(a4 + 24);
    uint64_t v18 = *(void *)(a5 + 40);
    *(_OWORD *)(a4 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a5 + 24);
    *(void *)(a4 + 40) = v18;
    *(_OWORD *)(a5 + ++*(_DWORD *)(result + 24) = v17;
    *(void *)(a5 + 40) = v16;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a6, (const void **)a4, (const void **)a3))
    {
      uint64_t v19 = *(void *)(a3 + 16);
      long long v20 = *(_OWORD *)a3;
      uint64_t v21 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(void *)(a4 + 16) = v19;
      uint64_t v22 = *(void *)(a3 + 40);
      long long v23 = *(_OWORD *)(a3 + 24);
      uint64_t v24 = *(void *)(a4 + 40);
      *(_OWORD *)(a3 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a4 + 24);
      *(void *)(a3 + 40) = v24;
      *(_OWORD *)(a4 + ++*(_DWORD *)(result + 24) = v23;
      *(void *)(a4 + 40) = v22;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a6, (const void **)a3, (const void **)a2))
      {
        uint64_t v25 = *(void *)(a2 + 16);
        long long v26 = *(_OWORD *)a2;
        uint64_t v27 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v27;
        *(_OWORD *)a3 = v26;
        *(void *)(a3 + 16) = v25;
        uint64_t v28 = *(void *)(a2 + 40);
        long long v29 = *(_OWORD *)(a2 + 24);
        uint64_t v30 = *(void *)(a3 + 40);
        *(_OWORD *)(a2 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 + 24);
        *(void *)(a2 + 40) = v30;
        *(_OWORD *)(a3 + ++*(_DWORD *)(result + 24) = v29;
        *(void *)(a3 + 40) = v28;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a6, (const void **)a2, (const void **)a1))
        {
          uint64_t v31 = *(void *)(a1 + 16);
          long long v32 = *(_OWORD *)a1;
          uint64_t v33 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v33;
          *(_OWORD *)a2 = v32;
          *(void *)(a2 + 16) = v31;
          uint64_t v34 = *(void *)(a1 + 40);
          __n128 result = *(__n128 *)(a1 + 24);
          uint64_t v35 = *(void *)(a2 + 40);
          *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
          *(void *)(a1 + 40) = v35;
          *(__n128 *)(a2 + ++*(_DWORD *)(result + 24) = result;
          *(void *)(a2 + 40) = v34;
        }
      }
    }
  }
  return result;
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  int v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)int v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + ++*(_DWORD *)(result + 24) = 0;
  return a1;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 48 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a4, v9, v12);
        v12 -= 48;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      long long v14 = (_OWORD *)(a1 + 24);
      uint64_t v15 = v6;
      do
      {
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, (const void **)v15, (const void **)a1))
        {
          uint64_t v16 = *(void *)(v15 + 16);
          long long v17 = *(_OWORD *)v15;
          uint64_t v18 = *(void *)(a1 + 16);
          *(_OWORD *)uint64_t v15 = *(_OWORD *)a1;
          *(void *)(v15 + 16) = v18;
          *(_OWORD *)a1 = v17;
          *(void *)(a1 + 16) = v16;
          uint64_t v19 = *(void *)(v15 + 40);
          long long v20 = *(_OWORD *)(v15 + 24);
          uint64_t v21 = *(void *)(a1 + 40);
          *(_OWORD *)(v15 + ++*(_DWORD *)(result + 24) = *v14;
          *(void *)(v15 + 40) = v21;
          *long long v14 = v20;
          *(void *)(a1 + 40) = v19;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a4, v9, a1);
        }
        v15 += 48;
      }
      while (v15 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 49)
    {
      unint64_t v22 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<std::string,std::string> *>(a1, v6, a4, v22);
        v6 -= 48;
      }
      while (v22-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      uint64_t v10 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      uint64_t v11 = a1 + 48 * v10;
      uint64_t v12 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      if (v12 < a3
        && std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)(a1 + 48 * v10), (const void **)(v11 + 48)))
      {
        v11 += 48;
        uint64_t v10 = v12;
      }
      if ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)v11, (const void **)v5) & 1) == 0)
      {
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v5;
        uint64_t v17 = *(void *)(v5 + 16);
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        long long v13 = *(_OWORD *)(v5 + 24);
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + ++*(_DWORD *)(result + 24) = 0;
        *(_OWORD *)long long __p = v13;
        uint64_t v19 = *(void *)(v5 + 40);
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        do
        {
          uint64_t v14 = v11;
          std::pair<std::string,std::string>::operator=[abi:ne180100](v5, (long long *)v11);
          if (v7 < v10) {
            break;
          }
          uint64_t v15 = (2 * v10) | 1;
          uint64_t v11 = a1 + 48 * v15;
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v15;
          }
          else if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)(a1 + 48 * v15), (const void **)(v11 + 48)))
          {
            v11 += 48;
          }
          else
          {
            uint64_t v10 = v15;
          }
          uint64_t v5 = v14;
        }
        while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)v11, (const void **)v16));
        std::pair<std::string,std::string>::operator=[abi:ne180100](v14, (long long *)v16);
        if (SHIBYTE(v19) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v17) < 0) {
          operator delete(v16[0]);
        }
      }
    }
  }
}

void sub_1B1DC9058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a1;
    uint64_t v12 = *(void *)(a1 + 16);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
    *(_OWORD *)long long __p = v7;
    uint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = (long long *)(a2 - 48);
    if (v8 == v10)
    {
      std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v8, (long long *)v11);
    }
    else
    {
      std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v8, v10);
      std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)v10, (long long *)v11);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(a1, (uint64_t)(v9 + 3), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - a1 + 48) >> 4));
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
  }
}

void sub_1B1DC9164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

long long *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = (long long *)(a1 + 48 * v6 + 48);
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3
      && std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a2, (const void **)(a1 + 48 * v6 + 48), (const void **)(a1 + 48 * v6 + 96)))
    {
      v9 += 3;
      uint64_t v10 = v11;
    }
    std::pair<std::string,std::string>::operator=[abi:ne180100](a1, v9);
    a1 = (uint64_t)v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = (long long *)(a1 + 48 * v7);
    uint64_t v9 = a2 - 48;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v8, (const void **)(a2 - 48)))
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v9;
      uint64_t v12 = *(void *)(v9 + 16);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)uint64_t v9 = 0;
      *(_OWORD *)long long __p = *(_OWORD *)(a2 - 24);
      uint64_t v14 = *(void *)(a2 - 8);
      *(void *)(a2 - ++*(_DWORD *)(result + 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v10 = (uint64_t)v8;
        std::pair<std::string,std::string>::operator=[abi:ne180100](v9, v8);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (long long *)(a1 + 48 * v7);
        uint64_t v9 = v10;
      }
      while ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v8, (const void **)v11) & 1) != 0);
      std::pair<std::string,std::string>::operator=[abi:ne180100](v10, (long long *)v11);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
    }
  }
}

void sub_1B1DC9344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const&,char const(&)[1],0>(std::string *this, long long *a2, char *__s)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::basic_string[abi:ne180100]<0>(this[1].__r_.__value_.__r.__words, __s);
  return this;
}

void sub_1B1DC93B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

const void **std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,std::string> *>,std::__wrap_iter<std::pair<std::string,std::string> *>,std::pair<std::string,std::string>,std::__identity,std::__less<void,void>>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  unint64_t v4 = a1;
  if (a2 != a1)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 4);
    do
    {
      uint64_t v8 = &v4[6 * (v7 >> 1)];
      int v9 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a4, v8, a3);
      if (v9) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v9) {
        unint64_t v4 = v8 + 6;
      }
    }
    while (v7);
  }
  return v4;
}

void *TSegmenter::TSegmenter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1F0A348F0;
  a1[1] = 0;
  TAllocator::TAllocator((TAllocator *)(a1 + 2), 2048);
  a1[7] = a2;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[12] = a3;
  a1[13] = a4;
  a1[1] = 5;
  (*(void (**)(void *))(*a1 + 16))(a1);
  a1[11] = *(void *)(a3 + 72);
  return a1;
}

void sub_1B1DC9524(_Unwind_Exception *a1)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
  }
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

void TSegmenter::~TSegmenter(TSegmenter *this)
{
  uint64_t v2 = (void *)*((void *)this + 8);
  *((void *)this + 9) = v2;
  if (v2) {
    operator delete(v2);
  }
  TAllocator::clear((TSegmenter *)((char *)this + 16));
}

unsigned __int8 *TSegmenter::findSegmentEnd(void *a1, unsigned __int8 *a2, int *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v10 = a1[12];
  if (*(_DWORD *)(v10 + 64) != 2)
  {
    unint64_t v33 = 0;
    unint64_t v34 = 0;
    memset(v121, 0, 32);
    while (1)
    {
      unint64_t v35 = a2[v33];
      if (v35 <= 0x20 && ((1 << v35) & 0x100003E01) != 0) {
        break;
      }
      unint64_t v37 = v35 >> 6;
      uint64_t v38 = 1 << v35;
      uint64_t v39 = *((void *)v121 + v37);
      if ((v39 & v38) == 0)
      {
        *((void *)v121 + v37) = v39 | v38;
        ++v34;
      }
      ++v33;
    }
    uint64_t i = &a2[v33];
    if (v34 >= 0x1F)
    {
      *a3 = 5;
      unint64_t v41 = *(void *)(a5 + 16);
      int v42 = "b";
      uint64_t v43 = a5;
      unint64_t v44 = 6;
LABEL_264:
      TBuffer<wchar_t>::insert(v43, v41, (int *)v42, v44);
      return i;
    }
    if (v33 >= 0x100)
    {
      *a3 = 5;
LABEL_263:
      unint64_t v41 = *(void *)(v5 + 16);
      int v42 = "s";
      uint64_t v43 = v5;
      unint64_t v44 = 16;
      goto LABEL_264;
    }
  }
  int v124 = 0;
  int v11 = TLocaleInfo::multiByteToUnicode(v10, a2, &v124);
  if (v11 == -1)
  {
    LODWORD(v121[0]) = 0;
    for (uint64_t i = a2 + 1; TLocaleInfo::multiByteToUnicode(a1[12], i, v121) == -1; ++i)
      ;
    *a3 = 5;
    unint64_t v41 = *(void *)(v5 + 16);
    int v42 = "e";
    uint64_t v43 = v5;
    unint64_t v44 = 8;
    goto LABEL_264;
  }
  int v12 = v11;
  uint64_t v120 = v5;
  if (a1[11] >= 3uLL)
  {
    uint64_t v13 = v124;
    {
      operator new();
    }
    BOOL v15 = (int)v13 < 65281 && v13 != 12288;
    if ((int)v13 <= 65510
      && !v15
      && ((v13 - 65471) > 0x20
       || TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13) != v13))
    {
      uint64_t v16 = v124;
      {
        operator new();
      }
      int v124 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v16);
      *a4 |= 2uLL;
    }
  }
  signed int v123 = 0;
  uint64_t v17 = &a2[v12];
  int v18 = TLocaleInfo::multiByteToUnicode(a1[12], v17, &v123);
  int v19 = v18;
  if (*v17) {
    BOOL v20 = v18 == -1;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20)
  {
    do
    {
      int v21 = TLocaleInfo::composeCharacter(a1[12], v124, v123);
      if (!v21) {
        break;
      }
      BOOL v22 = (v123 & 0xFFFFFFFB) != 0x670 && v123 >= 0x660;
      uint64_t v23 = v22 ? 1 : 4;
      uint64_t v24 = v123 >= 1611 ? v23 : 1;
      *a4 |= v24;
      int v124 = v21;
      v17 += v19;
      int v25 = TLocaleInfo::multiByteToUnicode(a1[12], v17, &v123);
      int v19 = v25;
    }
    while (*v17 && v25 != -1);
  }
  uint64_t v27 = (int *)a1[13];
  if (v27)
  {
    int v28 = *v27;
    signed int v29 = v124;
    if (*v27)
    {
      uint64_t v30 = v27 + 2;
      do
      {
        signed int v31 = *(v30 - 1);
        if (!v31) {
          break;
        }
        if (v124 == v28)
        {
          int v124 = *(v30 - 1);
          *a4 |= 8uLL;
          signed int v29 = v31;
          break;
        }
        int v32 = *v30;
        v30 += 2;
        int v28 = v32;
      }
      while (v32);
    }
  }
  else
  {
    signed int v29 = v124;
  }
  {
    operator new();
  }
  if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v29))
  {
    int v45 = 1;
    goto LABEL_76;
  }
  int v46 = v124;
  {
    operator new();
  }
  int v45 = 0;
  if (v46 > 159)
  {
    if (v46 >= 12288)
    {
      if (v46 == 12288) {
        goto LABEL_76;
      }
      int v47 = 65279;
    }
    else
    {
      if (v46 == 160) {
        goto LABEL_76;
      }
      int v47 = 8203;
    }
    if (v46 == v47) {
      goto LABEL_76;
    }
  }
  else if (v46 <= 0x20 && ((1 << v46) & 0x100002600) != 0)
  {
    goto LABEL_76;
  }
  unsigned int v95 = v124;
  {
    operator new();
  }
  if (TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v95))
  {
    unint64_t v96 = 1;
    uint64_t i = v17;
    if (*v17 && v19 != -1)
    {
      unint64_t v96 = 1;
      uint64_t i = v17;
      do
      {
        unsigned int v97 = v123;
        {
          operator new();
        }
        if (!TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v97)) {
          break;
        }
        ++v96;
        i += v19;
        int v98 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v123);
        int v19 = v98;
      }
      while (*i && v98 != -1);
    }
    if (v96 > a1[1])
    {
      *a3 = 5;
      uint64_t v43 = v120;
      unint64_t v41 = *(void *)(v120 + 16);
      int v42 = "m";
      unint64_t v44 = 32;
      goto LABEL_264;
    }
    int v113 = 3;
    goto LABEL_323;
  }
  unsigned int v104 = v124;
  {
    operator new();
  }
  if ((int)v104 >= 48
    && (v104 < 0x3A
     || v104 >= 0x660
     && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v104) != -1))
  {
    int v45 = 2;
    goto LABEL_76;
  }
  int v105 = v124;
  {
    operator new();
  }
  int v45 = 5;
  if ((v105 - 1) >= 8 && (v105 - 11) >= 2 && v105 != 0xFFFF)
  {
    if ((v105 - 14) < 0x12)
    {
      int v45 = 5;
      goto LABEL_76;
    }
    if (a1[11] < 3uLL || !unicodeIsDiacritic(v124, a1[12]))
    {
      int v45 = 4;
      goto LABEL_76;
    }
    if (isComposableDiacriticInContext(0, v124, a1[12]))
    {
      *a3 = 5;
      uint64_t v114 = v120;
      unint64_t v115 = *(void *)(v120 + 16);
      int v116 = (int *)"d";
      unint64_t v117 = 9;
      goto LABEL_324;
    }
    int v113 = 4;
LABEL_323:
    *a3 = v113;
    LODWORD(v121[0]) = v124;
    uint64_t v114 = v120;
    unint64_t v115 = *(void *)(v120 + 16);
    int v116 = (int *)v121;
    unint64_t v117 = 1;
LABEL_324:
    TBuffer<wchar_t>::insert(v114, v115, v116, v117);
    return v17;
  }
LABEL_76:
  *a3 = v45;
  unint64_t v48 = *(void *)(v120 + 16);
  LODWORD(v121[0]) = v124;
  unint64_t v118 = v48;
  TBuffer<wchar_t>::insert(v120, v48, (int *)v121, 1uLL);
  float v119 = a3;
  if (!*v17 || v19 == -1)
  {
    uint64_t i = v17;
  }
  else
  {
    uint64_t i = v17;
    while (2)
    {
      int v49 = v123;
      if (!v123) {
        break;
      }
      uint64_t v50 = v124;
      uint64_t v51 = a1[12];
      switch(*v119)
      {
        case 0:
          {
            operator new();
          }
          if ((int)v50 <= 8202)
          {
            if (v50 != 32 && v50 != 160)
            {
LABEL_142:
              if (v50 == 13 && v49 == 10) {
                goto LABEL_152;
              }
              break;
            }
          }
          else if (v50 != 8203 && v50 != 65279 && v50 != 12288)
          {
            goto LABEL_142;
          }
          {
            operator new();
          }
          if (v49 > 8202)
          {
            if (v49 != 8203 && v49 != 12288)
            {
              int v55 = 65279;
              goto LABEL_137;
            }
            goto LABEL_152;
          }
          if (v49 == 32 || v49 == 160) {
            goto LABEL_152;
          }
          break;
        case 1:
          {
            operator new();
          }
          char isAlpha = TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v49);
          goto LABEL_151;
        case 2:
          {
            operator new();
          }
          if (v49 < 48
            || v49 >= 0x3A
            && (v49 < 0x660
             || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v49) == -1))
          {
            break;
          }
          goto LABEL_152;
        case 3:
          break;
        case 5:
          {
            operator new();
          }
          if ((v49 - 1) >= 8)
          {
            BOOL v53 = (v49 - 11) < 2 || v49 == 0xFFFF;
            if (!v53 && (v49 - 32) < 0xFFFFFFEE) {
              break;
            }
          }
          goto LABEL_152;
        default:
          {
            operator new();
          }
          if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v49)) {
            break;
          }
          {
            operator new();
          }
          if (v49 > 159)
          {
            if (v49 >= 12288)
            {
              if (v49 == 12288) {
                break;
              }
              int v54 = 65279;
            }
            else
            {
              if (v49 == 160) {
                break;
              }
              int v54 = 8203;
            }
            if (v49 == v54) {
              break;
            }
          }
          else if (v49 <= 0x20 && ((1 << v49) & 0x100002600) != 0)
          {
            break;
          }
          {
            operator new();
          }
          uint64_t isPunct = TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v49);
          if (isPunct) {
            break;
          }
          GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)isPunct);
          if (v49 >= 48)
          {
            if (v49 < 0x3A) {
              break;
            }
            if (v49 >= 0x660)
            {
              GlobalLocaleInfo = (TLocaleInfo *)TLocaleInfo::getDigitExtended((uint64_t)GlobalLocaleInfo, v49);
              if (GlobalLocaleInfo != -1) {
                break;
              }
            }
          }
          TLocaleInfo::getGlobalLocaleInfo(GlobalLocaleInfo);
          if (unicodeIsJunk(v49)) {
            break;
          }
          if (isComposableDiacriticInContext(0, v50, v51)) {
            break;
          }
          BOOL v58 = isComposableDiacriticInContext(v50, v49, v51);
          if (v58) {
            break;
          }
          long long v59 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v58);
          if ((v50 - 19968) >> 4 <= 0x51A)
          {
            int v55 = 12293;
LABEL_137:
            if (v49 != v55) {
              break;
            }
            goto LABEL_152;
          }
          long long v60 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v59);
          if ((v49 - 19968) >> 4 < 0x51B) {
            break;
          }
          TLocaleInfo::getGlobalLocaleInfo(v60);
          long long v61 = (TLocaleInfo *)isKatakana(v50);
          int v62 = (int)v61;
          TLocaleInfo::getGlobalLocaleInfo(v61);
          if (v62)
          {
            char isAlpha = isSmallKatakana(v49);
            goto LABEL_150;
          }
          uint64_t v63 = isKatakana(v49);
          if (v63) {
            break;
          }
          long long v64 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v63);
          if ((v50 - 12353) < 0x53 || (v50 - 12540) < 3 || (v50 - 12445) <= 1)
          {
            TLocaleInfo::getGlobalLocaleInfo(v64);
            char isAlpha = isSmallHiragana(v49);
LABEL_150:
            if (v50 == 12540) {
              break;
            }
LABEL_151:
            if ((isAlpha & 1) == 0) {
              break;
            }
            goto LABEL_152;
          }
          unint64_t v83 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v64);
          if ((v49 - 12353) < 0x53 || (v49 - 12540) < 3 || (v49 - 12445) < 2) {
            break;
          }
          unint64_t v84 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v83);
          uint64_t v85 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v84);
          unsigned int v86 = v49 - 3585;
          if ((v50 - 3585) > 0x5A)
          {
            if (v86 < 0x5B) {
              break;
            }
            uint64_t v87 = (TLocaleInfo *)TLocaleInfo::getGlobalLocaleInfo(v85);
            if ((int)v50 >= 1425)
            {
              BOOL v89 = v50 < 0x5F5 || (v50 - 64285) < 0x33;
              TLocaleInfo::getGlobalLocaleInfo(v87);
              if (v49 >= 1425)
              {
                if (v49 >= 0x5F5)
                {
                  if ((((v49 - 64285) < 0x33) ^ v89)) {
                    break;
                  }
                }
                else if (!v89)
                {
                  break;
                }
              }
              else if (v89)
              {
                break;
              }
            }
            else
            {
              TLocaleInfo::getGlobalLocaleInfo(v87);
              if (v49 >= 1425 && (v49 < 0x5F5 || (v49 - 64285) < 0x33)) {
                break;
              }
            }
          }
          else
          {
            if (v86 > 0x5A) {
              break;
            }
            if ((v49 - 3663) >= 0xFFFFFFD5)
            {
              if (v49 > 0xE3A)
              {
                if (v49 > 0xE44) {
                  goto LABEL_152;
                }
              }
              else if (v49 > 0xE2F || (v49 & 0xFFFFFFFD) == 0xE24)
              {
                goto LABEL_152;
              }
            }
            if ((v50 - 3653) < 0xFFFFFFFB) {
              break;
            }
          }
LABEL_152:
          if (a1[11] >= 3uLL)
          {
            uint64_t v65 = v123;
            {
              operator new();
            }
            BOOL v67 = (int)v65 < 65281 && v65 != 12288;
            if ((int)v65 <= 65510
              && !v67
              && ((v65 - 65471) > 0x20
               || TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v65) != v65))
            {
              uint64_t v68 = v123;
              {
                operator new();
              }
              signed int v123 = TLocaleInfo::normalizeWidth(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v68);
              *a4 |= 2uLL;
            }
          }
          int v69 = v124;
          int v124 = v123;
          i += v19;
          int v70 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v123);
          int v19 = v70;
          int v71 = *i;
          if (v69 == 3661 && v124 >= 3656 && v124 <= 3659 && v123 == 3634 && *i && v70 != -1)
          {
            *(_DWORD *)(*(void *)v120 + 4 * *(void *)(v120 + 16) - 4) = v124;
            int v124 = 3661;
            int v71 = *i;
          }
          if (v71 && v70 != -1)
          {
            do
            {
              int v72 = TLocaleInfo::composeCharacter(a1[12], v124, v123);
              if (!v72) {
                break;
              }
              BOOL v73 = (v123 & 0xFFFFFFFB) != 0x670 && v123 >= 0x660;
              uint64_t v74 = v73 ? 1 : 4;
              uint64_t v75 = v123 >= 1611 ? v74 : 1;
              *a4 |= v75;
              int v124 = v72;
              i += v19;
              int v76 = TLocaleInfo::multiByteToUnicode(a1[12], i, &v123);
              int v19 = v76;
            }
            while (*i && v76 != -1);
          }
          uint64_t v78 = (int *)a1[13];
          if (v78)
          {
            int v79 = *v78;
            if (*v78)
            {
              long long v80 = v78 + 2;
              while (*(v80 - 1))
              {
                if (v124 == v79)
                {
                  int v124 = *(v80 - 1);
                  *a4 |= 8uLL;
                  break;
                }
                int v81 = *v80;
                v80 += 2;
                int v79 = v81;
                if (!v81) {
                  break;
                }
              }
            }
          }
          if ((unint64_t)(i - a2) <= 0xFF)
          {
            LODWORD(v121[0]) = v124;
            TBuffer<wchar_t>::insert(v120, *(void *)(v120 + 16), (int *)v121, 1uLL);
          }
          if (*i) {
            BOOL v82 = v19 == -1;
          }
          else {
            BOOL v82 = 1;
          }
          if (v82) {
            break;
          }
          continue;
      }
      break;
    }
  }
  if ((unint64_t)(i - a2) >= 0x100)
  {
    uint64_t v5 = v120;
    int *v119 = 5;
    TBuffer<wchar_t>::resize(v120, v118);
    goto LABEL_263;
  }
  if (*v119 != 4)
  {
    if (*v119 != 5) {
      return i;
    }
    TBuffer<wchar_t>::resize(v120, v118);
    unint64_t v41 = *(void *)(v120 + 16);
    int v42 = "u";
    uint64_t v43 = v120;
    unint64_t v44 = 11;
    goto LABEL_264;
  }
  uint64_t v91 = a1[12];
  unint64_t v93 = *(void *)(v120 + 8);
  unint64_t v92 = *(void *)(v120 + 16);
  if (v92 >= v93)
  {
    if (*(unsigned char *)(v120 + 1048))
    {
      LODWORD(v121[0]) = 0;
      TBuffer<wchar_t>::insert(v120, v92, (int *)v121, 1uLL);
      --*(void *)(v120 + 16);
      uint64_t v94 = *(void *)v120;
    }
    else
    {
      uint64_t v94 = *(void *)v120;
      if (v93) {
        *(_DWORD *)(v94 + 4 * v93 - 4) = 0;
      }
    }
  }
  else
  {
    uint64_t v94 = *(void *)v120;
    *(_DWORD *)(*(void *)v120 + 4 * v92) = 0;
  }
  if (TLocaleInfo::isKtivMenukad(v91, (unsigned int *)(v94 + 4 * v118)))
  {
    *(void *)&v121[0] = (char *)&v121[1] + 8;
    *(_OWORD *)((char *)v121 + 8) = xmmword_1B25607E0;
    char v122 = 1;
    uint64_t v100 = a1[12];
    unint64_t v102 = *(void *)(v120 + 8);
    unint64_t v101 = *(void *)(v120 + 16);
    if (v101 >= v102)
    {
      if (*(unsigned char *)(v120 + 1048))
      {
        v125[0] = 0;
        TBuffer<wchar_t>::insert(v120, v101, v125, 1uLL);
        --*(void *)(v120 + 16);
        uint64_t v103 = *(void *)v120;
      }
      else
      {
        uint64_t v103 = *(void *)v120;
        if (v102) {
          *(_DWORD *)(v103 + 4 * v102 - 4) = 0;
        }
      }
    }
    else
    {
      uint64_t v103 = *(void *)v120;
      *(_DWORD *)(*(void *)v120 + 4 * v101) = 0;
    }
    TLocaleInfo::ktivMenukadToKtivMaleh(v100, (int *)(v103 + 4 * v118), v121);
    TBuffer<wchar_t>::resize(v120, v118);
    if (*(void *)&v121[1])
    {
      uint64_t v106 = TBuffer<wchar_t>::c_str((uint64_t)v121);
      uint64_t v107 = (int *)v106;
      uint64_t v108 = 0;
      unint64_t v109 = *(void *)(v120 + 16);
      while (*(_DWORD *)(v106 + 4 * v108++))
        ;
      unint64_t v111 = v108 - 1;
    }
    else
    {
      int *v119 = 5;
      unint64_t v109 = *(void *)(v120 + 16);
      uint64_t v107 = (int *)"n";
      unint64_t v111 = 6;
    }
    TBuffer<wchar_t>::insert(v120, v109, v107, v111);
    if (v122)
    {
      if (*(_OWORD **)&v121[0] != (_OWORD *)((char *)&v121[1] + 8) && *(void *)&v121[0] != 0) {
        MEMORY[0x1B3EA8630]();
      }
    }
  }
  return i;
}

void sub_1B1DCA948(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TLocaleInfo::getGlobalLocaleInfo(TLocaleInfo *this)
{
  {
    operator new();
  }
  return TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
}

void sub_1B1DCAAD4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t unicodeIsJunk(int a1)
{
  BOOL v1 = a1 == 0xFFFF || (a1 - 14) < 0x12;
  unsigned int v2 = (a1 - 11) < 2 || v1;
  if ((a1 - 1) >= 8) {
    return v2;
  }
  else {
    return 1;
  }
}

uint64_t unicodeIsDiacritic(unsigned int a1, uint64_t a2)
{
  if ((int)a1 < 768) {
    return 0;
  }
  if (a1 < 0x370) {
    return 1;
  }
  if (a1 > 0xE30)
  {
    LODWORD(v2) = a1 - 3655 < 0xFFFFFFF4;
    if (a1 <= 0xE33) {
      LODWORD(v2) = a1 == 3633;
    }
    if (a1 <= 0xE4E) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    if (a1 == 1600) {
      return 1;
    }
    if (a1 < 0x64B) {
      return 0;
    }
    uint64_t v2 = 1;
    if (a1 >= 0x660 && (a1 & 0xFFFFFFFB) != 0x670)
    {
      if (a1 == 2364) {
        return *(void *)(a2 + 72) > 3uLL;
      }
      return 0;
    }
  }
  return v2;
}

BOOL isComposableDiacriticInContext(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if ((int)a2 < 768) {
    return 0;
  }
  if (a2 < 0x370) {
    goto LABEL_4;
  }
  if (a2 > 0xE30)
  {
    if (a2 > 0xE4E) {
      return 0;
    }
    if (a2 > 0xE33)
    {
      if (a2 - 3655 > 0xFFFFFFF3) {
        return 0;
      }
    }
    else if (a2 != 3633)
    {
      return 0;
    }
  }
  else if (a2 != 1600)
  {
    if (a2 >= 0x64B)
    {
      if (a2 >= 0x660 && (a2 & 0xFFFFFFFB) != 0x670)
      {
        BOOL result = 0;
        if (a2 != 2364 || *(void *)(a3 + 72) <= 3uLL) {
          return result;
        }
      }
      goto LABEL_4;
    }
    return 0;
  }
LABEL_4:
  {
    operator new();
  }
  return a2 - 3585 > 0x5A || TLocaleInfo::composeCharacter(a3, a1, a2) != 0;
}

void sub_1B1DCAD18(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBuffer<wchar_t>::c_str(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= v3)
  {
    if (*(unsigned char *)(a1 + 1048))
    {
      int v5 = 0;
      TBuffer<wchar_t>::insert(a1, v2, &v5, 1uLL);
      --*(void *)(a1 + 16);
      return *(void *)a1;
    }
    else
    {
      uint64_t result = *(void *)a1;
      if (v3) {
        *(_DWORD *)(result + 4 * v3 - 4) = 0;
      }
    }
  }
  else
  {
    uint64_t result = *(void *)a1;
    *(_DWORD *)(*(void *)a1 + 4 * v2) = 0;
  }
  return result;
}

uint64_t TSegmenter::getSegment(TSegmenter *this, char *a2)
{
  if (!*a2) {
    return 0;
  }
  unint64_t v4 = (unint64_t)&a2[-*((void *)this + 7)];
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = (uint64_t *)((char *)this + 64);
  if (v4 >= (*((void *)this + 9) - v5) >> 3)
  {
    uint64_t v14 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)this + 64, 2 * v4 + 2, &v14);
    uint64_t v5 = *v6;
  }
  uint64_t result = *(void *)(v5 + 8 * v4);
  if (!result)
  {
    int v19 = 4;
    uint64_t v18 = 0;
    uint64_t v14 = (__int32 *)v16;
    long long v15 = xmmword_1B25607E0;
    char v17 = 1;
    SegmentEnd = TSegmenter::findSegmentEnd(this, (unsigned __int8 *)a2, &v19, &v18, (uint64_t)&v14);
    if ((unint64_t)(*((void *)&v15 + 1) + 1) >> 62) {
      uint64_t v9 = -1;
    }
    else {
      uint64_t v9 = 4 * (*((void *)&v15 + 1) + 1);
    }
    uint64_t v10 = (TSegmenter *)((char *)this + 16);
    int v11 = (__int32 *)TAllocator::allocate((TSegmenter *)((char *)this + 16), v9);
    if (*((void *)&v15 + 1) >= (unint64_t)v15)
    {
      if (v17)
      {
        int v20 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v14, *((unint64_t *)&v15 + 1), &v20, 1uLL);
        int v12 = v14;
        --*((void *)&v15 + 1);
      }
      else
      {
        int v12 = v14;
        if ((void)v15) {
          v14[(void)v15 - 1] = 0;
        }
      }
    }
    else
    {
      int v12 = v14;
      v14[*((void *)&v15 + 1)] = 0;
    }
    wcscpy(v11, v12);
    uint64_t v13 = TAllocator::allocate(v10, 32);
    *(void *)uint64_t v13 = v11;
    *(void *)(v13 + 8) = SegmentEnd;
    *(void *)(v13 + 16) = v18;
    *(_DWORD *)(v13 + ++*(_DWORD *)(result + 24) = v19;
    *(void *)(*v6 + 8 * v4) = v13;
    if (v17 && v14 != (__int32 *)v16)
    {
      if (v14) {
        MEMORY[0x1B3EA8630]();
      }
    }
    return *(void *)(*v6 + 8 * v4);
  }
  return result;
}

void sub_1B1DCAF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418]) && a9 != v9)
  {
    if (a9) {
      MEMORY[0x1B3EA8630]();
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TSegmenter::getPreviousSegment(TSegmenter *this, char *a2)
{
  unint64_t v3 = (char *)*((void *)this + 7);
  if (v3 == a2) {
    return 0;
  }
  uint64_t v5 = a2 - v3;
  uint64_t v6 = *((void *)this + 8);
  unint64_t v7 = (*((void *)this + 9) - v6) >> 3;
  unint64_t v8 = a2 - v3 - 1;
  if ((unint64_t)(a2 - v3) <= 1) {
    uint64_t v5 = 1;
  }
  while (1)
  {
    if (v8 < v7)
    {
      uint64_t result = *(void *)(v6 + 8 * v8);
      if (result) {
        break;
      }
    }
    --v8;
    if (!--v5) {
      return TSegmenter::getSegment(this, v3);
    }
  }
  for (uint64_t i = *(char **)(result + 8); i < a2; uint64_t i = *(char **)(result + 8))
    uint64_t result = TSegmenter::getSegment(this, i);
  return result;
}

uint64_t isKatakana(int a1)
{
  BOOL v1 = (a1 - 12540) < 3 || (a1 - 65438) < 2;
  int v2 = (a1 - 12443) < 4 || v1;
  if ((a1 - 12449) >= 0x56) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = 1;
  }
  if ((a1 - 65382) >= 0x38) {
    return v3;
  }
  else {
    return 1;
  }
}

uint64_t isSmallKatakana(int a1)
{
  BOOL v1 = (a1 - 12443) >= 4 && (a1 - 12540) >= 3;
  if (!v1 || (a1 - 65382) < 0xB) {
    return 1;
  }
  uint64_t result = 1;
  if (((a1 - 12449) > 0x22 || ((1 << (a1 + 95)) & 0x400000155) == 0)
    && ((a1 - 12515) > 0xB || ((1 << (a1 + 29)) & 0x815) == 0)
    && (a1 - 65438) >= 2)
  {
    return 0;
  }
  return result;
}

BOOL isSmallHiragana(int a1)
{
  BOOL result = 1;
  BOOL v3 = (a1 - 12419) > 0x1B || ((1 << (a1 + 125)) & 0xC000815) == 0;
  if (v3 && ((a1 - 12353) > 8 || ((1 << (a1 - 65)) & 0x155) == 0)) {
    return (a1 - 12540) < 3;
  }
  return result;
}

void quasar::corrective_reranking::CorrectiveRerankerConfig::read(quasar::corrective_reranking::CorrectiveRerankerConfig *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  quasar::PTree::getString((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1DCB5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::FusedIntentClassifierConfig::read(quasar::corrective_reranking::FusedIntentClassifierConfig *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  quasar::PTree::getString((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1DCB7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::OverridesConfig::read(quasar::corrective_reranking::OverridesConfig *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "tokens-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1DCB93C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22)
  {
    if (a21 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::PhoneticMatcherConfig::read(quasar::corrective_reranking::PhoneticMatcherConfig *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "euclid-config-file");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1DCBCC8()
{
  if (*(unsigned char *)(v0 - 48))
  {
    if (*(char *)(v0 - 49) < 0) {
      JUMPOUT(0x1B1DCBD04);
    }
  }
  JUMPOUT(0x1B1DCBD08);
}

void sub_1B1DCBCF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TransformerClassifierConfig::read(quasar::corrective_reranking::TransformerClassifierConfig *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  quasar::PTree::getString((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1DCBE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::WFSTConfig::read(quasar::corrective_reranking::WFSTConfig *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "text-file");
  quasar::PTree::getString((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1DCBF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::TargetIndexFilterConfig::read(quasar::corrective_reranking::TargetIndexFilterConfig *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "filter-file");
  quasar::PTree::getString((uint64_t)a2, (uint64_t)__p);
}

void sub_1B1DCC030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Config::Config(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 32) = 0;
  quasar::corrective_reranking::CorrectiveRerankerConfig::CorrectiveRerankerConfig((quasar::corrective_reranking::CorrectiveRerankerConfig *)(a1 + 40));
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 2--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 2++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0x2000;
  *(_WORD *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 298) = 0;
  *(_DWORD *)(a1 + 300) = -1;
  *(unsigned char *)(a1 + 304) = 1;
  *(void *)(a1 + 312) = v6;
  *(void *)(a1 + 320) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 376) = 0xC000000200;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(unsigned char *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 10;
  *(void *)(a1 + 496) = 0;
  quasar::PTree::PTree((quasar::PTree *)(a1 + 528));
  uint64_t v7 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc.voice-commands.corrective-reranking");
  Ptree = (const quasar::PTree *)quasar::SystemConfig::getPtree(v7, (uint64_t)__p);
  quasar::corrective_reranking::Config::read((quasar::corrective_reranking::Config *)a1, Ptree);
}

void sub_1B1DCC1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  quasar::PTree::~PTree(v21);
  if (*(char *)(v15 + 519) < 0) {
    operator delete(*(void **)(v15 + 496));
  }
  std::pair<std::string,std::string>::~pair(v20);
  std::pair<std::string,std::string>::~pair(v15 + 384);
  std::pair<std::string,std::string>::~pair(v19);
  quasar::corrective_reranking::PhoneticMatcherConfig::~PhoneticMatcherConfig(v18);
  std::pair<std::string,std::vector<std::string>>::~pair((uint64_t)(v17 + 9));
  quasar::corrective_reranking::OverridesConfig::~OverridesConfig(v17);
  quasar::corrective_reranking::CorrectiveRerankerConfig::~CorrectiveRerankerConfig(v16);
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v22);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v15 + 8);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void quasar::corrective_reranking::Config::Config(uint64_t a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<quasar::SystemConfig,std::allocator<quasar::SystemConfig>,std::string const&,void>(a2, &v3);
  quasar::corrective_reranking::Config::Config(a1, &v3);
}

void sub_1B1DCC2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::Config::read(quasar::corrective_reranking::Config *this, const quasar::PTree *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "version");
  quasar::PTree::getStringOptional((uint64_t)a2, (uint64_t)v3);
}

void sub_1B1DCC6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::corrective_reranking::PhoneticMatcherConfig::~PhoneticMatcherConfig(quasar::corrective_reranking::PhoneticMatcherConfig *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void quasar::corrective_reranking::OverridesConfig::~OverridesConfig(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void quasar::corrective_reranking::CorrectiveRerankerConfig::~CorrectiveRerankerConfig(void **this)
{
  int v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  int v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

quasar::corrective_reranking::CorrectiveRerankerConfig *quasar::corrective_reranking::CorrectiveRerankerConfig::CorrectiveRerankerConfig(quasar::corrective_reranking::CorrectiveRerankerConfig *this)
{
  *(void *)&long long v6 = *MEMORY[0x1E4F143B8];
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 12) = 1;
  *(void *)((char *)this + 60) = 0;
  *(void *)((char *)this + --*(_DWORD *)(a9 + 52) = 0;
  *(void *)((char *)this + 68) = 0x100000001;
  *((_DWORD *)this + 19) = 50;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\b\\d+:\\d+\\b");
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  int v2 = (std::string *)operator new(0x18uLL);
  *((void *)this + 12) = v2 + 1;
  *((void *)this + 10) = v2;
  *((void *)this + 11) = v2;
  *((void *)this + 11) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)this + 96, (long long *)__p, &v6, v2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_1B1DCC940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v18 = v17;
  *(void *)(v16 + 88) = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a16 < 0) {
    operator delete(__p);
  }
  long long __p = (void *)(v16 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SystemConfig,std::allocator<quasar::SystemConfig>,std::string &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x620uLL);
  BOOL result = std::__shared_ptr_emplace<quasar::SystemConfig>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::SystemConfig>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1DCC9E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SystemConfig>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::SystemConfig>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FAA8;
  std::allocator<quasar::SystemConfig>::construct[abi:ne180100]<quasar::SystemConfig,std::string &>((uint64_t)&v4, (quasar::SystemConfig *)(a1 + 3), a2);
  return a1;
}

void sub_1B1DCCA54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SystemConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SystemConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5FAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::SystemConfig>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void std::allocator<quasar::SystemConfig>::construct[abi:ne180100]<quasar::SystemConfig,std::string &>(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3)
{
  memset(v5, 0, sizeof(v5));
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  quasar::SystemConfig::SystemConfig(a2, a3, v5, (uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v3);
  *(void *)&v3[0] = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
}

void sub_1B1DCCB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::SystemConfig,std::allocator<quasar::SystemConfig>,std::string const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x620uLL);
  BOOL result = std::__shared_ptr_emplace<quasar::SystemConfig>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SystemConfig>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1DCCBDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::SystemConfig>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SystemConfig>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FAA8;
  std::allocator<quasar::SystemConfig>::construct[abi:ne180100]<quasar::SystemConfig,std::string const&>((uint64_t)&v4, (quasar::SystemConfig *)(a1 + 3), a2);
  return a1;
}

void sub_1B1DCCC4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::SystemConfig>::construct[abi:ne180100]<quasar::SystemConfig,std::string const&>(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3)
{
  memset(v5, 0, sizeof(v5));
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  quasar::SystemConfig::SystemConfig(a2, a3, v5, (uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v3);
  *(void *)&v3[0] = v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v3);
}

void sub_1B1DCCCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::RecogRequestFilter::getPowerContextOptions(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "unconstrained");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a1, (const void **)__p, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reduced");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a1, (const void **)__p, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "avoid");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)a1, (const void **)__p, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B1DCCDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

std::string *quasar::RecogRequestFilter::RecogRequestFilter(std::string *this, kaldi::quasar::Vocab *a2, std::string *a3)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v6 = *(_OWORD *)&a3->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  uint64_t v7 = this + 1;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  unint64_t v8 = this + 5;
  *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = 0u;
  uint64_t v91 = (std::vector<std::wstring> *)&this[7];
  unint64_t v92 = this + 4;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[1] = 0u;
  BOOL v89 = (std::vector<std::wstring> *)&this[8];
  unint64_t v90 = (std::vector<std::wstring> *)&this[6];
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "::");
  quasar::splitAndTrim(a3, __p, &v95);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  int v9 = kaldi::quasar::Vocab::VocabSize(a2);
  uint64_t v10 = (const std::string *)v95;
  uint64_t v11 = v96 - v95;
  if (v9 > 14)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    if (v13 != 5 && v13 != 8)
    {
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v99 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The number of recognition request parameters is ", 48);
      unint64_t v84 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" (requirement is 5 or 8 for config file ver 15.0+)", 50);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  else if (v11 != 72)
  {
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v99 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The number of recognition request parameters is ", 48);
    int v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (requirement is 3)", 19);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v93, "|");
  quasar::splitAndTrimNoEmpty(v10, (char *)v93, __p);
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  uint64_t v16 = *(const std::string **)__p;
  for (uint64_t i = *(const std::string **)&__p[8]; v16 != i; ++v16)
  {
    int v17 = std::stoi(v16, 0, 10);
    int v18 = v17;
    std::string::size_type size = (_DWORD *)this[1].__r_.__value_.__l.__size_;
    unint64_t v19 = this[1].__r_.__value_.__r.__words[2];
    if ((unint64_t)size >= v19)
    {
      std::string::pointer data = (std::string::pointer)v7->__r_.__value_.__r.__words[0];
      uint64_t v23 = (uint64_t)((uint64_t)size - v7->__r_.__value_.__r.__words[0]) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
        std::vector<int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v25 = v19 - (void)data;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&this[1].__r_.__value_.__r.__words[2], v26);
        std::string::pointer data = this[1].__r_.__value_.__l.__data_;
        std::string::size_type size = (_DWORD *)this[1].__r_.__value_.__l.__size_;
      }
      else
      {
        uint64_t v27 = 0;
      }
      int v28 = (int *)&v27[4 * v23];
      *int v28 = v18;
      std::string::size_type v21 = (std::string::size_type)(v28 + 1);
      while (size != (_DWORD *)data)
      {
        int v29 = *--size;
        *--int v28 = v29;
      }
      this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      this[1].__r_.__value_.__l.__size_ = v21;
      this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v27[4 * v26];
      if (data) {
        operator delete(data);
      }
    }
    else
    {
      *std::string::size_type size = v17;
      std::string::size_type v21 = (std::string::size_type)(size + 1);
    }
    this[1].__r_.__value_.__l.__size_ = v21;
  }
  v93[0] = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v93);
  uint64_t v30 = (const std::string *)v95;
  std::string::basic_string[abi:ne180100]<0>(v93, "|");
  quasar::splitAndTrimNoEmpty(v30 + 1, (char *)v93, __p);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&this[2]);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  this[2].__r_.__value_.__r.__words[2] = *(void *)&__p[16];
  unsigned int v97 = (void **)__p;
  memset(__p, 0, 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  std::string::pointer v31 = this[2].__r_.__value_.__l.__data_;
  std::string::size_type v32 = this[2].__r_.__value_.__l.__size_;
  while (v31 != (std::string::pointer)v32)
  {
    if (v31[23] < 0)
    {
      uint64_t v34 = *(void *)v31;
      int64_t v33 = *((void *)v31 + 1);
    }
    else
    {
      int64_t v33 = v31[23];
      uint64_t v34 = (uint64_t)v31;
    }
    if (v33 >= 1)
    {
      unint64_t v35 = (unsigned char *)(v34 + v33);
      long long v36 = (void *)v34;
      do
      {
        unint64_t v37 = memchr(v36, 42, v33);
        if (!v37) {
          break;
        }
        if (*v37 == 42)
        {
          if (v37 != v35 && &v37[-v34] != (unsigned char *)-1)
          {
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            long long v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Illegal char '*' found in task type ", 36);
            int v61 = v31[23];
            if (v61 >= 0) {
              uint64_t v62 = (uint64_t)v31;
            }
            else {
              uint64_t v62 = *(void *)v31;
            }
            if (v61 >= 0) {
              uint64_t v63 = v31[23];
            }
            else {
              uint64_t v63 = *((void *)v31 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          break;
        }
        long long v36 = v37 + 1;
        int64_t v33 = v35 - (unsigned char *)v36;
      }
      while (v35 - (unsigned char *)v36 >= 1);
    }
    v31 += 24;
  }
  uint64_t v38 = (const std::string *)v95;
  std::string::basic_string[abi:ne180100]<0>(v93, "|");
  quasar::splitAndTrimNoEmpty(v38 + 2, (char *)v93, __p);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&this[3]);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  this[3].__r_.__value_.__r.__words[2] = *(void *)&__p[16];
  unsigned int v97 = (void **)__p;
  memset(__p, 0, 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
  if (v94 < 0) {
    operator delete(v93[0]);
  }
  std::string::pointer v39 = this[3].__r_.__value_.__l.__data_;
  std::string::size_type v40 = this[3].__r_.__value_.__l.__size_;
  while (v39 != (std::string::pointer)v40)
  {
    char v41 = v39[23];
    if (v41 >= 0) {
      int64_t v42 = v39[23];
    }
    else {
      int64_t v42 = *((void *)v39 + 1);
    }
    if (v41 >= 0) {
      uint64_t v43 = (uint64_t)v39;
    }
    else {
      uint64_t v43 = *(void *)v39;
    }
    unint64_t v44 = (unsigned char *)(v42 - 1);
    if (v42 >= 1)
    {
      int v45 = (unsigned char *)(v43 + v42);
      int v46 = (void *)v43;
      do
      {
        int v47 = memchr(v46, 42, v42);
        if (!v47) {
          break;
        }
        if (*v47 == 42)
        {
          if (&v47[-v43] != v44 && v47 != v45 && &v47[-v43] != (unsigned char *)-1)
          {
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            long long v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Illegal char '*' found in device type ", 38);
            int v65 = v39[23];
            if (v65 >= 0) {
              uint64_t v66 = (uint64_t)v39;
            }
            else {
              uint64_t v66 = *(void *)v39;
            }
            if (v65 >= 0) {
              uint64_t v67 = v39[23];
            }
            else {
              uint64_t v67 = *((void *)v39 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v66, v67);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          break;
        }
        int v46 = v47 + 1;
        int64_t v42 = v45 - (unsigned char *)v46;
      }
      while (v45 - (unsigned char *)v46 >= 1);
    }
    v39 += 24;
  }
  *(_WORD *)long long __p = 1;
  std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(v92, __p, &__p[2], 2uLL);
  *(_WORD *)long long __p = 1;
  std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(this[5].__r_.__value_.__r.__words, __p, &__p[2], 2uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "*");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v90, (std::string *)__p, (long long *)&__p[24], 1uLL);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "*");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v91, (std::string *)__p, (long long *)&__p[24], 1uLL);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "*");
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v89, (std::string *)__p, (long long *)&__p[24], 1uLL);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v96 - v95) >> 3) >= 4)
  {
    quasar::parseBoolField(v95 + 72, __p);
    if (v92->__r_.__value_.__r.__words[0])
    {
      operator delete(v92->__r_.__value_.__l.__data_);
      v92->__r_.__value_.__r.__words[0] = 0;
      this[4].__r_.__value_.__l.__size_ = 0;
      this[4].__r_.__value_.__r.__words[2] = 0;
    }
    this[4].__r_.__value_.__r.__words[0] = *(void *)__p;
    uint64_t v48 = *(void *)&__p[8];
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
    if (!v48)
    {
      long long v112 = 0u;
      long long v113 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v99 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      long long v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"farField type must be '*', 'true', or 'false': ", 47);
      int v81 = *(char *)(v95 + 95);
      if (v81 >= 0) {
        uint64_t v82 = v95 + 72;
      }
      else {
        uint64_t v82 = *(void *)(v95 + 72);
      }
      if (v81 >= 0) {
        uint64_t v83 = *(unsigned __int8 *)(v95 + 95);
      }
      else {
        uint64_t v83 = *(void *)(v95 + 80);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v82, v83);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v96 - v95) >> 3) >= 5)
    {
      quasar::parseBoolField(v95 + 96, __p);
      if (v8->__r_.__value_.__r.__words[0])
      {
        operator delete(v8->__r_.__value_.__l.__data_);
        v8->__r_.__value_.__r.__words[0] = 0;
        this[5].__r_.__value_.__l.__size_ = 0;
        this[5].__r_.__value_.__r.__words[2] = 0;
      }
      this[5].__r_.__value_.__r.__words[0] = *(void *)__p;
      uint64_t v49 = *(void *)&__p[8];
      *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      if (!v49)
      {
        long long v112 = 0u;
        long long v113 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        long long v102 = 0u;
        long long v103 = 0u;
        long long v100 = 0u;
        long long v101 = 0u;
        long long v99 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"atypicalSpeech types must be '*', 'true', or 'false': ", 54);
        int v86 = *(char *)(v95 + 119);
        if (v86 >= 0) {
          uint64_t v87 = v95 + 96;
        }
        else {
          uint64_t v87 = *(void *)(v95 + 96);
        }
        if (v86 >= 0) {
          uint64_t v88 = *(unsigned __int8 *)(v95 + 119);
        }
        else {
          uint64_t v88 = *(void *)(v95 + 104);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, v87, v88);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      uint64_t v50 = (const std::string *)v95;
      if (0xAAAAAAAAAAAAAAABLL * ((v96 - v95) >> 3) >= 8)
      {
        std::string::basic_string[abi:ne180100]<0>(v93, "|");
        quasar::splitAndTrimNoEmpty(v50 + 5, (char *)v93, __p);
        std::vector<std::string>::__vdeallocate(v90);
        *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        this[6].__r_.__value_.__r.__words[2] = *(void *)&__p[16];
        unsigned int v97 = (void **)__p;
        memset(__p, 0, 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
        if (v94 < 0) {
          operator delete(v93[0]);
        }
        std::string::pointer v52 = this[6].__r_.__value_.__l.__data_;
        std::string::size_type v51 = this[6].__r_.__value_.__l.__size_;
        while (v52 != (std::string::pointer)v51)
        {
          if (quasar::isInvalidPowerContext((uint64_t)v52))
          {
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            uint64_t v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"aneContext type must be '*', 'unconstrained', 'reduced', or 'avoid': ", 69);
            int v69 = v52[23];
            if (v69 >= 0) {
              uint64_t v70 = (uint64_t)v52;
            }
            else {
              uint64_t v70 = *(void *)v52;
            }
            if (v69 >= 0) {
              uint64_t v71 = v52[23];
            }
            else {
              uint64_t v71 = *((void *)v52 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, v70, v71);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          v52 += 24;
        }
        BOOL v53 = (const std::string *)v95;
        std::string::basic_string[abi:ne180100]<0>(v93, "|");
        quasar::splitAndTrimNoEmpty(v53 + 6, (char *)v93, __p);
        std::vector<std::string>::__vdeallocate(v91);
        *(_OWORD *)&this[7].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        this[7].__r_.__value_.__r.__words[2] = *(void *)&__p[16];
        unsigned int v97 = (void **)__p;
        memset(__p, 0, 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
        if (v94 < 0) {
          operator delete(v93[0]);
        }
        std::string::pointer v55 = this[7].__r_.__value_.__l.__data_;
        std::string::size_type v54 = this[7].__r_.__value_.__l.__size_;
        while (v55 != (std::string::pointer)v54)
        {
          if (quasar::isInvalidPowerContext((uint64_t)v55))
          {
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            int v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"cpuContext type must be '*', 'unconstrained', 'reduced', or 'avoid': ", 69);
            int v73 = v55[23];
            if (v73 >= 0) {
              uint64_t v74 = (uint64_t)v55;
            }
            else {
              uint64_t v74 = *(void *)v55;
            }
            if (v73 >= 0) {
              uint64_t v75 = v55[23];
            }
            else {
              uint64_t v75 = *((void *)v55 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          v55 += 24;
        }
        long long v56 = (const std::string *)v95;
        std::string::basic_string[abi:ne180100]<0>(v93, "|");
        quasar::splitAndTrimNoEmpty(v56 + 7, (char *)v93, __p);
        std::vector<std::string>::__vdeallocate(v89);
        *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        this[8].__r_.__value_.__r.__words[2] = *(void *)&__p[16];
        unsigned int v97 = (void **)__p;
        memset(__p, 0, 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v97);
        if (v94 < 0) {
          operator delete(v93[0]);
        }
        std::string::pointer v58 = this[8].__r_.__value_.__l.__data_;
        std::string::size_type v57 = this[8].__r_.__value_.__l.__size_;
        while (v58 != (std::string::pointer)v57)
        {
          if (quasar::isInvalidPowerContext((uint64_t)v58))
          {
            long long v112 = 0u;
            long long v113 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v99 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            int v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"gpuContext type must be '*', 'unconstrained', 'reduced', or 'avoid': ", 69);
            int v77 = v58[23];
            if (v77 >= 0) {
              uint64_t v78 = (uint64_t)v58;
            }
            else {
              uint64_t v78 = *(void *)v58;
            }
            if (v77 >= 0) {
              uint64_t v79 = v58[23];
            }
            else {
              uint64_t v79 = *((void *)v58 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v78, v79);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          v58 += 24;
        }
      }
    }
  }
  *(void *)long long __p = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return this;
}

void sub_1B1DCDAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void ***a16, uint64_t a17, uint64_t a18, void **a19)
{
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  if (*v21) {
    operator delete(*v21);
  }
  if (*a13) {
    operator delete(*a13);
  }
  a19 = a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  uint64_t v23 = *v20;
  if (*v20)
  {
    *(void *)(v19 + 32) = v23;
    operator delete(v23);
  }
  if (*(char *)(v19 + 23) < 0) {
    operator delete(*(void **)v19);
  }
  _Unwind_Resume(a1);
}

void sub_1B1DCDAA8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1DCDB6CLL);
}

void sub_1B1DCDAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  a16 = (void **)&a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  JUMPOUT(0x1B1DCDAD0);
}

void quasar::parseBoolField(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::size_type v3 = *(void *)(a1 + 8);
    if (!v3) {
      return;
    }
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a1, v3);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 23)) {
      return;
    }
    std::string v14 = *(std::string *)a1;
  }
  char v4 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v5 = (std::string *)((char *)&v14 + HIBYTE(v14.__r_.__value_.__r.__words[2]));
  }
  else {
    char v5 = (std::string *)(v14.__r_.__value_.__r.__words[0] + v14.__r_.__value_.__l.__size_);
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v6 = &v14;
  }
  else {
    long long v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v6 != v5)
  {
    do
    {
      v6->__r_.__value_.__s.__data_[0] = __tolower(v6->__r_.__value_.__s.__data_[0]);
      long long v6 = (std::string *)((char *)v6 + 1);
    }
    while (v6 != v5);
    char v4 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  if ((v4 & 0x80) == 0)
  {
    if (v4 != 1)
    {
      if (v4 != 4)
      {
        if (v4 == 5)
        {
          uint64_t v7 = &v14;
LABEL_24:
          int data = (int)v7->__r_.__value_.__l.__data_;
          int v9 = v7->__r_.__value_.__s.__data_[4];
          if (data == 1936482662 && v9 == 101)
          {
            char v13 = 0;
            std::vector<BOOL>::push_back((uint64_t)a2, &v13);
          }
          goto LABEL_38;
        }
        goto LABEL_38;
      }
      int v12 = (int)v14.__r_.__value_.__l.__data_;
LABEL_36:
      if (v12 == 1702195828)
      {
        char v13 = 1;
        std::vector<BOOL>::push_back((uint64_t)a2, &v13);
      }
      goto LABEL_38;
    }
    int v11 = v14.__r_.__value_.__s.__data_[0];
LABEL_33:
    if (v11 == 42)
    {
      char v13 = 1;
      std::vector<BOOL>::push_back((uint64_t)a2, &v13);
      char v13 = 0;
      std::vector<BOOL>::push_back((uint64_t)a2, &v13);
    }
    goto LABEL_38;
  }
  switch(v14.__r_.__value_.__l.__size_)
  {
    case 1uLL:
      int v11 = *v14.__r_.__value_.__l.__data_;
      goto LABEL_33;
    case 4uLL:
      int v12 = *(_DWORD *)v14.__r_.__value_.__l.__data_;
      goto LABEL_36;
    case 5uLL:
      uint64_t v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
      goto LABEL_24;
  }
LABEL_38:
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1B1DCDD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*v16) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::isInvalidPowerContext(uint64_t a1)
{
  quasar::RecogRequestFilter::getPowerContextOptions((uint64_t)v6);
  int v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    if (*(void *)(a1 + 8) != 1)
    {
LABEL_8:
      BOOL v4 = &v7 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v6, (const void **)a1);
      goto LABEL_9;
    }
    std::string::size_type v3 = *(unsigned char **)a1;
  }
  else
  {
    std::string::size_type v3 = (unsigned char *)a1;
    if (v2 != 1) {
      goto LABEL_8;
    }
  }
  if (*v3 != 42) {
    goto LABEL_8;
  }
  BOOL v4 = 0;
LABEL_9:
  std::__tree<std::string>::destroy((uint64_t)v6, v7);
  return v4;
}

void sub_1B1DCDDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

BOOL quasar::RecogRequestFilter::matchesTask(uint64_t a1, unsigned __int8 **a2)
{
  return std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 48), *(void *)(a1 + 56), a2) != *(void *)(a1 + 56);
}

uint64_t quasar::RecogRequestFilter::matchesConfiguration(quasar::RecogRequestFilter *this, const quasar::SpeechRecognizerActiveConfiguration *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    BOOL v4 = (unsigned int *)*((void *)this + 3);
    char v5 = (unsigned int *)*((void *)this + 4);
    if (v4 == v5) {
      return 0;
    }
    while (1)
    {
      if (*((void *)a2 + 1))
      {
        unsigned int v6 = *v4;
        uint64_t v7 = (_DWORD *)((char *)a2 + 8);
        uint64_t v8 = *((void *)a2 + 1);
        do
        {
          unsigned int v9 = *(_DWORD *)(v8 + 28);
          BOOL v10 = v9 >= v6;
          if (v9 >= v6) {
            int v11 = (uint64_t *)v8;
          }
          else {
            int v11 = (uint64_t *)(v8 + 8);
          }
          if (v10) {
            uint64_t v7 = (_DWORD *)v8;
          }
          uint64_t v8 = *v11;
        }
        while (*v11);
        if (v7 != (_DWORD *)((char *)a2 + 8) && v6 >= v7[7]) {
          break;
        }
      }
      if (++v4 == v5) {
        return 0;
      }
    }
  }
  if (*((unsigned char *)a2 + 56))
  {
    int v12 = (const void **)*((void *)this + 6);
    char v13 = (const void **)*((void *)this + 7);
    if (v12 != v13)
    {
      std::string v14 = (char *)a2 + 40;
      while (v14 == (char *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a2 + 32, v12))
      {
        v12 += 3;
        if (v12 == v13) {
          return 0;
        }
      }
      goto LABEL_23;
    }
    return 0;
  }
LABEL_23:
  if (!*((unsigned char *)a2 + 88)
    || (uint64_t result = quasar::matchesConfigurationCategoryWithWildcard((uint64_t *)this + 9, (uint64_t)a2 + 64), result))
  {
    if (!*((unsigned char *)a2 + 120)
      || (uint64_t result = quasar::matchesConfigurationCategory<BOOL>((uint64_t)this + 96, (uint64_t)a2 + 96), result))
    {
      if (!*((unsigned char *)a2 + 152)
        || (uint64_t result = quasar::matchesConfigurationCategory<BOOL>((uint64_t)this + 120, (uint64_t)a2 + 128), result))
      {
        if (!*((unsigned char *)a2 + 184)
          || (uint64_t result = quasar::matchesConfigurationCategoryWithWildcard((uint64_t *)this + 18, (uint64_t)a2 + 160),
              result))
        {
          if (!*((unsigned char *)a2 + 216)
            || (uint64_t result = quasar::matchesConfigurationCategoryWithWildcard((uint64_t *)this + 21, (uint64_t)a2 + 192),
                result))
          {
            if (!*((unsigned char *)a2 + 248)) {
              return 1;
            }
            uint64_t result = quasar::matchesConfigurationCategoryWithWildcard((uint64_t *)this + 24, (uint64_t)a2 + 224);
            if (result) {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t quasar::matchesConfigurationCategoryWithWildcard(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3) {
    return 0;
  }
  char v5 = (void *)(a2 + 8);
  uint64_t v6 = a2 + 16;
  while (1)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      if (*(unsigned char *)(*(void *)v2 + *(void *)(v2 + 8) - 1) != 42)
      {
LABEL_16:
        if (v5 != (void *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)v2))return 1; {
        goto LABEL_29;
        }
      }
      uint64_t v7 = *(void *)(v2 + 8);
    }
    else
    {
      uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
      if (*(unsigned char *)(v2 + v7 - 1) != 42) {
        goto LABEL_16;
      }
    }
    std::string::basic_string(&__s1, (const std::string *)v2, 0, v7 - 1, (std::allocator<char> *)&v19);
    uint64_t v8 = *v5;
    if (*v5)
    {
      unsigned int v9 = v5;
      do
      {
        BOOL v10 = std::less<std::string>::operator()[abi:ne180100](v6, (const void **)(v8 + 32), (const void **)&__s1.__r_.__value_.__l.__data_);
        int v11 = (uint64_t *)(v8 + 8);
        if (!v10)
        {
          int v11 = (uint64_t *)v8;
          unsigned int v9 = (void *)v8;
        }
        uint64_t v8 = *v11;
      }
      while (*v11);
      if (v9 != v5)
      {
        std::string::size_type v12 = *((char *)v9 + 55) < 0 ? v9[5] : *((unsigned __int8 *)v9 + 55);
        char v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
          if (v12 < __s1.__r_.__value_.__l.__size_) {
            goto LABEL_28;
          }
          p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v12 < HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
            goto LABEL_29;
          }
          p_s1 = &__s1;
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        uint64_t v16 = v9 + 4;
        if ((*((unsigned char *)v9 + 55) & 0x80) != 0) {
          uint64_t v16 = (void *)*v16;
        }
        if (!memcmp(p_s1, v16, size)) {
          break;
        }
      }
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
LABEL_28:
    }
      operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_29:
    v2 += 24;
    if (v2 == v3) {
      return 0;
    }
  }
  if (v13 < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  return 1;
}

uint64_t quasar::matchesConfigurationCategory<BOOL>(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  int v3 = v2 & 0x3F;
  if (v2 <= 0x3F && v3 == 0) {
    return 0;
  }
  int v5 = 0;
  int v6 = 0;
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)a1 + 8 * (v2 >> 6);
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v9 = a2 + 8;
  uint64_t v10 = v11;
  while (1)
  {
    if (v10)
    {
      uint64_t v12 = (*v7 >> v6) & 1;
      uint64_t v13 = v9;
      uint64_t v14 = v10;
      do
      {
        unsigned int v15 = *(unsigned __int8 *)(v14 + 25);
        BOOL v16 = v15 >= v12;
        if (v15 >= v12) {
          int v17 = (uint64_t *)v14;
        }
        else {
          int v17 = (uint64_t *)(v14 + 8);
        }
        if (v16) {
          uint64_t v13 = v14;
        }
        uint64_t v14 = *v17;
      }
      while (*v17);
      if (v13 != v9 && *(unsigned __int8 *)(v13 + 25) <= v12) {
        break;
      }
    }
    int v18 = v6 + 1;
    v7 += v5 == 63;
    if (v5 == 63) {
      int v5 = 0;
    }
    else {
      int v5 = v18;
    }
    BOOL v19 = v7 == (void *)v8 && v3 == v5;
    int v6 = v5;
    if (v19) {
      return 0;
    }
  }
  return 1;
}

uint64_t quasar::RecogRequestFilter::isMatch(uint64_t a1, __int32 a2, unsigned __int8 **a3, std::string *a4, int a5, int a6, std::string *a7, std::string *a8, std::string *__str)
{
  BOOL v16 = *(__int32 **)(a1 + 32);
  int v17 = wmemchr(*(__int32 **)(a1 + 24), a2, ((uint64_t)v16 - *(void *)(a1 + 24)) >> 2);
  if (v17) {
    int v18 = v17;
  }
  else {
    int v18 = v16;
  }
  if (v18 == *(__int32 **)(a1 + 32)
    || std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(void *)(a1 + 48), *(void *)(a1 + 56), a3) == *(void *)(a1 + 56))
  {
    return 0;
  }
  BOOL v19 = *(void **)(a1 + 96);
  unint64_t v20 = *(void *)(a1 + 104);
  std::string::size_type v21 = a5
      ? std::__find_BOOL[abi:ne180100]<true,std::vector<BOOL>,true>(v19, 0, v20)
      : std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,true>(v19, 0, v20);
  if ((void *)(*(void *)(a1 + 96) + 8 * (*(void *)(a1 + 104) >> 6)) == v21
    && (*(_DWORD *)(a1 + 104) & 0x3F) == v22)
  {
    return 0;
  }
  uint64_t result = quasar::isMatchWithWildcard(a4, (uint64_t *)(a1 + 72), 1);
  if (!result) {
    return result;
  }
  uint64_t v25 = *(void **)(a1 + 120);
  unint64_t v26 = *(void *)(a1 + 128);
  uint64_t v27 = a6
      ? std::__find_BOOL[abi:ne180100]<true,std::vector<BOOL>,true>(v25, 0, v26)
      : std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,true>(v25, 0, v26);
  unint64_t v29 = *(void *)(a1 + 128);
  if ((void *)(*(void *)(a1 + 120) + 8 * (v29 >> 6)) == v27 && (v29 & 0x3F) == v28) {
    return 0;
  }
  int isMatchWithWildcard = quasar::isMatchWithWildcard(a7, (uint64_t *)(a1 + 144), 0);
  uint64_t result = 0;
  if (isMatchWithWildcard)
  {
    int v31 = quasar::isMatchWithWildcard(a8, (uint64_t *)(a1 + 168), 0);
    uint64_t result = 0;
    if (v31) {
      return quasar::isMatchWithWildcard(__str, (uint64_t *)(a1 + 192), 0);
    }
  }
  return result;
}

uint64_t quasar::RecogRequestFilter::noMatchingComponentErrorMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Could not find the recognizer components for the params samplingRate=", 69);
  uint64_t v13 = (void *)std::ostream::operator<<();
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" task=", 6);
  int v15 = *(char *)(a2 + 23);
  if (v15 >= 0) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = *(void *)a2;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a2 + 8);
  }
  int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  BOOL v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" device=", 8);
  int v20 = *(char *)(a3 + 23);
  if (v20 >= 0) {
    uint64_t v21 = a3;
  }
  else {
    uint64_t v21 = *(void *)a3;
  }
  if (v20 >= 0) {
    uint64_t v22 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v22 = *(void *)(a3 + 8);
  }
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" farField=", 10);
  unint64_t v24 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" atypicalSpeech=", 16);
  uint64_t v25 = (void *)std::ostream::operator<<();
  unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" aneContext=", 12);
  int v27 = *(char *)(a6 + 23);
  if (v27 >= 0) {
    uint64_t v28 = a6;
  }
  else {
    uint64_t v28 = *(void *)a6;
  }
  if (v27 >= 0) {
    uint64_t v29 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    uint64_t v29 = *(void *)(a6 + 8);
  }
  uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
  int v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" cpuContext=", 12);
  int v32 = *(char *)(a7 + 23);
  if (v32 >= 0) {
    uint64_t v33 = a7;
  }
  else {
    uint64_t v33 = *(void *)a7;
  }
  if (v32 >= 0) {
    uint64_t v34 = *(unsigned __int8 *)(a7 + 23);
  }
  else {
    uint64_t v34 = *(void *)(a7 + 8);
  }
  unint64_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
  long long v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" gpuContext=", 12);
  int v37 = *(char *)(a8 + 23);
  if (v37 >= 0) {
    uint64_t v38 = a8;
  }
  else {
    uint64_t v38 = *(void *)a8;
  }
  if (v37 >= 0) {
    uint64_t v39 = *(unsigned __int8 *)(a8 + 23);
  }
  else {
    uint64_t v39 = *(void *)(a8 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
  std::stringbuf::str();
  v41[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v41 + *(void *)(v41[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v41[1] = MEMORY[0x1E4FBA470] + 16;
  if (v42 < 0) {
    operator delete((void *)v41[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v43);
}

void sub_1B1DCE5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::RecogRequestFilter::validateFilters(void *a1, uint64_t *a2)
{
  quasar::RecogRequestFilter::getPowerContextOptions((uint64_t)&v67);
  BOOL v4 = (void *)a1[6];
  if (v4 == a1 + 7)
  {
    uint64_t v28 = 1;
  }
  else
  {
    int v5 = a1 + 10;
    int v6 = &v68;
    uint64_t v34 = a1 + 7;
    do
    {
      uint64_t v7 = (void *)a1[9];
      if (v7 != v5)
      {
        unsigned int v40 = *((_DWORD *)v4 + 7);
        uint64_t v38 = v6;
        uint64_t v39 = a2;
        unint64_t v35 = v5;
        long long v36 = a1;
        do
        {
          uint64_t v8 = 0;
          int v32 = v7;
          char v41 = (unsigned __int8 **)(v7 + 4);
          __int16 v66 = 1;
          do
          {
            uint64_t v9 = 0;
            uint64_t v33 = v8;
            int v42 = *((unsigned __int8 *)&v66 + v8);
            __int16 v65 = 1;
            do
            {
              uint64_t v10 = v67;
              if (v67 != v6)
              {
                int v43 = *((unsigned __int8 *)&v65 + v9);
                uint64_t v37 = v9;
                do
                {
                  uint64_t v11 = v67;
                  if (v67 != v6)
                  {
                    do
                    {
                      uint64_t v12 = v67;
                      if (v67 != v6)
                      {
                        while (2)
                        {
                          uint64_t v14 = *a2;
                          uint64_t v13 = a2[1];
                          while (1)
                          {
                            if (v14 == v13)
                            {
                              if (quasar::gLogLevel >= 1)
                              {
                                long long v63 = 0u;
                                long long v64 = 0u;
                                long long v61 = 0u;
                                long long v62 = 0u;
                                long long v59 = 0u;
                                long long v60 = 0u;
                                long long v57 = 0u;
                                long long v58 = 0u;
                                long long v55 = 0u;
                                long long v56 = 0u;
                                long long v53 = 0u;
                                long long v54 = 0u;
                                long long v51 = 0u;
                                long long v52 = 0u;
                                long long v49 = 0u;
                                long long v50 = 0u;
                                *(_OWORD *)long long __p = 0u;
                                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                                std::string::basic_string[abi:ne180100]<0>(v44, "*");
                                quasar::RecogRequestFilter::noMatchingComponentErrorMessage(v40, (uint64_t)v41, (uint64_t)v44, v42 != 0, v43 != 0, (uint64_t)(v10 + 4), (uint64_t)(v11 + 4), (uint64_t)(v12 + 4));
                                if ((v47 & 0x80u) == 0) {
                                  uint64_t v29 = v46;
                                }
                                else {
                                  uint64_t v29 = (void **)v46[0];
                                }
                                if ((v47 & 0x80u) == 0) {
                                  uint64_t v30 = v47;
                                }
                                else {
                                  uint64_t v30 = (uint64_t)v46[1];
                                }
                                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v29, v30);
                                if ((char)v47 < 0) {
                                  operator delete(v46[0]);
                                }
                                if (v45 < 0) {
                                  operator delete(v44[0]);
                                }
                                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
                              }
                              uint64_t v28 = 0;
                              goto LABEL_64;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__p, "*");
                            char isMatch = quasar::RecogRequestFilter::isMatch(v14, v40, v41, (std::string *)__p, v42 != 0, v43 != 0, (std::string *)(v10 + 4), (std::string *)(v11 + 4), (std::string *)(v12 + 4));
                            if (SBYTE7(v49) < 0) {
                              operator delete(__p[0]);
                            }
                            if (isMatch) {
                              break;
                            }
                            v14 += 216;
                          }
                          uint64_t v16 = v12[1];
                          if (v16)
                          {
                            do
                            {
                              uint64_t v17 = (char **)v16;
                              uint64_t v16 = *(char **)v16;
                            }
                            while (v16);
                          }
                          else
                          {
                            do
                            {
                              uint64_t v17 = (char **)v12[2];
                              BOOL v18 = *v17 == (char *)v12;
                              uint64_t v12 = v17;
                            }
                            while (!v18);
                          }
                          uint64_t v12 = v17;
                          int v6 = v38;
                          a2 = v39;
                          if (v17 != v38) {
                            continue;
                          }
                          break;
                        }
                      }
                      BOOL v19 = v11[1];
                      if (v19)
                      {
                        do
                        {
                          int v20 = (char **)v19;
                          BOOL v19 = *(char **)v19;
                        }
                        while (v19);
                      }
                      else
                      {
                        do
                        {
                          int v20 = (char **)v11[2];
                          BOOL v18 = *v20 == (char *)v11;
                          uint64_t v11 = v20;
                        }
                        while (!v18);
                      }
                      uint64_t v11 = v20;
                    }
                    while (v20 != v6);
                  }
                  uint64_t v21 = v10[1];
                  if (v21)
                  {
                    do
                    {
                      uint64_t v22 = (char **)v21;
                      uint64_t v21 = *(char **)v21;
                    }
                    while (v21);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v22 = (char **)v10[2];
                      BOOL v18 = *v22 == (char *)v10;
                      uint64_t v10 = v22;
                    }
                    while (!v18);
                  }
                  uint64_t v10 = v22;
                  int v5 = v35;
                  a1 = v36;
                  uint64_t v9 = v37;
                }
                while (v22 != v6);
              }
              ++v9;
            }
            while (v9 != 2);
            uint64_t v8 = v33 + 1;
          }
          while (v33 != 1);
          uint64_t v23 = v32;
          unint64_t v24 = (void *)v32[1];
          if (v24)
          {
            do
            {
              uint64_t v25 = v24;
              unint64_t v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              uint64_t v25 = (void *)v23[2];
              BOOL v18 = *v25 == (void)v23;
              uint64_t v23 = v25;
            }
            while (!v18);
          }
          uint64_t v7 = v25;
        }
        while (v25 != v5);
      }
      unint64_t v26 = (void *)v4[1];
      if (v26)
      {
        do
        {
          int v27 = v26;
          unint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          int v27 = (void *)v4[2];
          BOOL v18 = *v27 == (void)v4;
          BOOL v4 = v27;
        }
        while (!v18);
      }
      uint64_t v28 = 1;
      BOOL v4 = v27;
    }
    while (v27 != v34);
  }
LABEL_64:
  std::__tree<std::string>::destroy((uint64_t)&v67, v68);
  return v28;
}

void sub_1B1DCE9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a33);
  std::__tree<std::string>::destroy(v38 - 112, *(char **)(v38 - 104));
  _Unwind_Resume(a1);
}

void quasar::collectRecogInfoFromSysConfigHelper(quasar *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v5 = 0u;
  long long v6 = 0u;
  int v7 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "associated-task-mapping");
  quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
}

void sub_1B1DCEF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v27 - 144);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void sub_1B1DCEF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  a27 = (void **)(v27 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a27);
  JUMPOUT(0x1B1DCF044);
}

void sub_1B1DCEF74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  long long __p = (void *)(v32 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1B1DCF044);
}

void sub_1B1DCEF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v27 - 144);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void sub_1B1DCEF9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  a36 = &a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  JUMPOUT(0x1B1DCF034);
}

std::string *std::pair<std::string,quasar::PTree>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    this[2].__r_.__value_.__r.__words[0] = *(void *)(a3 + 24);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 56), *(void *)(a3 + 32), *(void *)(a3 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  this[3].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a3 + 56);
  return this;
}

void sub_1B1DCF134(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__assign_with_size[abi:ne180100]<BOOL const*,BOOL const*>(void *result, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  result[1] = 0;
  if (a4)
  {
    int v7 = result;
    if (a4 > result[2] << 6)
    {
      uint64_t v8 = (void *)*result;
      if (*v7)
      {
        operator delete(v8);
        *int v7 = 0;
        v7[1] = 0;
        _OWORD v7[2] = 0;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](v7, a4);
    }
    return std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(v7, a2, a3, a4);
  }
  return result;
}

void *std::vector<BOOL>::__construct_at_end<BOOL const*,BOOL const*>(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    int v7 = v4 & 0x3F;
    uint64_t v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v9 = 1 << v7;
      if (*a2) {
        uint64_t v10 = *v8 | v9;
      }
      else {
        uint64_t v10 = *v8 & ~v9;
      }
      *uint64_t v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (a2 != a3);
  }
  return result;
}

void *std::__find_BOOL[abi:ne180100]<true,std::vector<BOOL>,true>(void *result, unsigned int a2, unint64_t a3)
{
  if (!a2)
  {
LABEL_8:
    if (a3 >= 0x40)
    {
      do
      {
        if (*result) {
          break;
        }
        ++result;
        a3 -= 64;
      }
      while (a3 > 0x3F);
    }
    return result;
  }
  unint64_t v3 = 64 - a2;
  if (v3 >= a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = 64 - a2;
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & *result) != 0) {
    return result;
  }
  if (v3 < a3)
  {
    a3 -= v4;
    ++result;
    goto LABEL_8;
  }
  unint64_t v5 = a2 + a3;
  uint64_t v6 = v5 - 63;
  if ((uint64_t)(v5 - 63) < 0) {
    uint64_t v6 = a2 + a3;
  }
  uint64_t v7 = v6 >> 6;
  unint64_t v8 = v5 >> 6;
  if ((a3 & 0x8000000000000000) != 0) {
    unint64_t v8 = v7;
  }
  result += v8;
  return result;
}

void *std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,true>(void *result, unsigned int a2, unint64_t a3)
{
  if (!a2)
  {
LABEL_8:
    if (a3 >= 0x40)
    {
      do
      {
        if (*result != -1) {
          break;
        }
        ++result;
        a3 -= 64;
      }
      while (a3 > 0x3F);
    }
    return result;
  }
  unint64_t v3 = 64 - a2;
  if (v3 >= a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = 64 - a2;
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~*result) != 0) {
    return result;
  }
  if (v3 < a3)
  {
    a3 -= v4;
    ++result;
    goto LABEL_8;
  }
  unint64_t v5 = a2 + a3;
  uint64_t v6 = v5 - 63;
  if ((uint64_t)(v5 - 63) < 0) {
    uint64_t v6 = a2 + a3;
  }
  uint64_t v7 = v6 >> 6;
  unint64_t v8 = v5 >> 6;
  if ((a3 & 0x8000000000000000) != 0) {
    unint64_t v8 = v7;
  }
  result += v8;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v++*(_DWORD *)(result + 24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1B1DCF7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_1B1DCF844(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void quasar::splitUnicodeRegex(uint64_t a1, const char *a2)
{
  UErrorCode v3 = U_ZERO_ERROR;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v2, a2, &v3);
}

void sub_1B1DCFA4C(_Unwind_Exception *a1)
{
  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(v1 - 72));
  _Unwind_Resume(a1);
}

void quasar::trimUnicodeRegex(uint64_t a1, const char *a2)
{
  UErrorCode v3 = U_ZERO_ERROR;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v2, a2, &v3);
}

void sub_1B1DCFB84(_Unwind_Exception *a1)
{
  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(v1 - 48));
  _Unwind_Resume(a1);
}

void quasar::splitUnicodeCharSet(uint64_t a1, char *a2)
{
  quasar::getRegexCharSet(a2, __p);
  quasar::splitUnicodeRegex(a1, __p);
}

void sub_1B1DCFBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::trimUnicodeCharSet(uint64_t a1, char *a2)
{
  quasar::getRegexCharSet(a2, &v7);
  UErrorCode v3 = std::string::insert(&v7, 0, "(");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v8.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  unint64_t v5 = std::string::append(&v8, ")+");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  std::string::size_type v10 = v5->__r_.__value_.__r.__words[2];
  long long v9 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  quasar::trimUnicodeRegex(a1, (const char *)&v9);
}

void sub_1B1DCFCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  _Unwind_Resume(exception_object);
}

void quasar::replaceUnicodeRegex(uint64_t a1, const char *a2)
{
  UErrorCode v3 = U_ZERO_ERROR;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)v2, a2, &v3);
}

void sub_1B1DCFE38(_Unwind_Exception *a1)
{
  quasar::URegularExpressionWrapper::~URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(v1 - 48));
  _Unwind_Resume(a1);
}

void quasar::getWordBoundarySeparatedString(char *a1@<X0>, std::vector<std::string> *a2@<X8>)
{
}

void quasar::getBoundarySeparatedString(char *a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  memset(&v25, 0, sizeof(v25));
  if (a1[23] < 0) {
    a1 = *(char **)a1;
  }
  quasar::UnicodeCharacterVectorFromUTF8((quasar *)a1, &v23);
  int v22 = 0;
  ubrk_open();
  int v3 = ubrk_first();
  if (v3 != -1)
  {
    do
    {
      int v4 = ubrk_next();
      int v5 = v4;
      if (v4 > v3 && v4 < (unint64_t)(v24 - v23))
      {
        long long v6 = &v23[v4];
        if (*(v6 - 1))
        {
          float v18 = 0;
          BOOL v19 = 0;
          uint64_t v20 = 0;
          std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(&v18, &v23[v3], (uint64_t)v6, v4 - (uint64_t)v3);
          quasar::UTF8StringFromUnicodeCharacterArray((UChar *)v18, (unint64_t)(v19 - (unsigned char *)v18) >> 1, __p);
          std::vector<std::string>::pointer end = v25.__end_;
          if (v25.__end_ >= v25.__end_cap_.__value_)
          {
            unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25.__end_ - (char *)v25.__begin_) >> 3);
            unint64_t v10 = v9 + 1;
            if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<int>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v25.__end_cap_.__value_ - (char *)v25.__begin_) >> 3) > v10) {
              unint64_t v10 = 0x5555555555555556 * (((char *)v25.__end_cap_.__value_ - (char *)v25.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v25.__end_cap_.__value_ - (char *)v25.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v11 = v10;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v25.__end_cap_;
            if (v11) {
              uint8x8_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v25.__end_cap_, v11);
            }
            else {
              uint8x8_t v12 = 0;
            }
            unint64_t v13 = v12 + v9;
            __v.__first_ = v12;
            __v.__begin_ = v13;
            __v.__end_cap_.__value_ = &v12[v11];
            long long v14 = *(_OWORD *)__p;
            v13->__r_.__value_.__r.__words[2] = v17;
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
            __p[1] = 0;
            std::string::size_type v17 = 0;
            __p[0] = 0;
            __v.__end_ = v13 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v25, &__v);
            int v15 = v25.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
            v25.__end_ = v15;
            if (SHIBYTE(v17) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v8 = *(_OWORD *)__p;
            v25.__end_->__r_.__value_.__r.__words[2] = v17;
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
            v25.__end_ = end + 1;
          }
          if (v18)
          {
            BOOL v19 = v18;
            operator delete(v18);
          }
        }
      }
      int v3 = v5;
    }
    while (v5 != -1);
  }
  ubrk_close();
  *a2 = v25;
  memset(&v25, 0, sizeof(v25));
  if (v23)
  {
    unint64_t v24 = v23;
    operator delete(v23);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1B1DD016C(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *a7, uint64_t a8, void *__pa, std::__split_buffer<std::wstring> *a10)
{
  uint8x8_t v12 = *(void **)(v10 - 136);
  if (v12)
  {
    *(void *)(v10 - 128) = v12;
    operator delete(v12);
  }
  *(void *)(v10 - 136) = v10 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 136));
  _Unwind_Resume(__p);
}

void quasar::getSentenceBoundarySeparatedString(char *a1@<X0>, std::vector<std::string> *a2@<X8>)
{
}

uint64_t quasar::isCJK(unsigned int a1)
{
  char v2 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1B257BB40, (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_1B257BB30))));
  uint64_t result = 1;
  if ((v2 & 1) == 0)
  {
    unsigned int v4 = a1 & 0xFFFFFF00;
    unsigned int v5 = a1 & 0xFFFFFFC0;
    unsigned int v6 = a1 - 65381;
    BOOL v7 = (a1 & 0xFFFF0000) == 0x20000;
    if (v5 == 43072) {
      BOOL v7 = 1;
    }
    if (v4 == 4352) {
      BOOL v7 = 1;
    }
    return v6 < 0x78 || v7;
  }
  return result;
}

void quasar::trimUnicode()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B1DD04B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long __p, long long a10, long long a11, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25)
{
  if (a2 == 1)
  {
    uint64_t v28 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      uint64_t v29 = v28;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      uint64_t v30 = (const char *)(*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
      size_t v31 = strlen(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v30, v31);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    __cxa_end_catch();
    JUMPOUT(0x1B1DD0474);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(v26 - 256);
  _Unwind_Resume(a1);
}

void sub_1B1DD05C8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1DD05C0);
}

void quasar::splitAndTrimNoEmptyUnicode()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  memset(&v0, 0, sizeof(v0));
  operator new();
}

void sub_1B1DD08CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long __p, long long a12, long long a13, long long a14, long long a15, long long a16, long long a17, long long a18, long long a19, long long a20,long long a21,long long a22,long long a23,long long a24,long long a25,long long a26,long long a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__split_buffer<std::wstring> *a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2 == 1)
  {
    unsigned int v40 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      char v41 = v40;
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      long long __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      int v42 = (const char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
      size_t v43 = strlen(v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v42, v43);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    void *v38 = 0;
    v38[1] = 0;
    v38[2] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1B1DD086CLL);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a38);
  *(void *)&long long __p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1B1DD0A28(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B1DD08F0);
}

std::string *quasar::joinAndAutoSpace@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::size_type v4 = result->__r_.__value_.__r.__words[0];
  std::string::size_type size = result->__r_.__value_.__l.__size_;
  if (size != result->__r_.__value_.__r.__words[0])
  {
    unsigned int v5 = (std::string::__raw *)result;
    uint64_t v6 = 0;
    for (unint64_t i = 0; 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - v4) >> 3) > i; ++i)
    {
      uint64_t v8 = v4 + v6;
      if (*(char *)(v4 + v6 + 23) < 0)
      {
        if (*(void *)(v8 + 8))
        {
LABEL_7:
          if (quasar::needsSpaceBetween((uint64_t)a2, v8)) {
            std::string::append(a2, " ");
          }
          std::string::size_type v9 = v5->__words[0] + v6;
          int v10 = *(char *)(v9 + 23);
          if (v10 >= 0) {
            unint64_t v11 = (const std::string::value_type *)(v5->__words[0] + v6);
          }
          else {
            unint64_t v11 = *(const std::string::value_type **)v9;
          }
          if (v10 >= 0) {
            std::string::size_type v12 = *(unsigned __int8 *)(v9 + 23);
          }
          else {
            std::string::size_type v12 = *(void *)(v9 + 8);
          }
          uint64_t result = std::string::append(a2, v11, v12);
          std::string::size_type v4 = v5->__words[0];
          std::string::size_type size = v5->__words[1];
        }
      }
      else if (*(unsigned char *)(v4 + v6 + 23))
      {
        goto LABEL_7;
      }
      v6 += 24;
    }
  }
  return result;
}

void sub_1B1DD0B18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::needsSpaceBetween(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
    if ((v3 & 0x80u) != 0) {
      uint64_t v3 = *(void *)(a2 + 8);
    }
    if (v3) {
      operator new();
    }
  }
  return 0;
}

void sub_1B1DD0E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B1DD0E3C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B1DD0E44);
  }
  __clang_call_terminate(a1);
}

void quasar::toU32String()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void quasar::toString()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t quasar::USimpleSearch::USimpleSearch(uint64_t a1, uint64_t a2, void *a3, const void **a4, int a5, char a6)
{
  *(unsigned char *)a1 = a6;
  *(void *)(a1 + 8) = (uint64_t)(a3[1] - *a3) >> 1;
  *(void *)(a1 + 16) = 0;
  if (*((char *)a4 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v9 = (size_t)a4[1];
  }
  int v10 = v20;
  std::string::basic_string[abi:ne180100]((uint64_t)v20, v9 + 17);
  if (v21 < 0) {
    int v10 = (void **)v20[0];
  }
  if (v9)
  {
    if (*((char *)a4 + 23) >= 0) {
      unint64_t v11 = a4;
    }
    else {
      unint64_t v11 = *a4;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, "@collation=search");
  UErrorCode v19 = U_ZERO_ERROR;
  std::string::size_type v12 = operator new(2uLL);
  *std::string::size_type v12 = 32;
  *(void *)(a1 + 16) = usearch_open();
  if (v19 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"USimpleSearch usearch_open failure:", 35);
    unint64_t v16 = u_errorName(v19);
    size_t v17 = strlen(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
  }
  usearch_getCollator();
  if (a5) {
    int v13 = 1;
  }
  else {
    int v13 = 2;
  }
  if (ucol_getStrength() != v13)
  {
    ucol_setStrength();
    usearch_reset();
  }
  usearch_setAttribute();
  usearch_setPattern();
  usearch_setText();
  operator delete(v12);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  return a1;
}

void sub_1B1DD1634(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (*(char *)(v2 - 65) < 0) {
    operator delete(*(void **)(v2 - 88));
  }
  _Unwind_Resume(a1);
}

void quasar::USimpleSearch::~USimpleSearch(quasar::USimpleSearch *this)
{
  if (*((void *)this + 2)) {
    usearch_close();
  }
}

uint64_t quasar::USimpleSearch::nextMatchRange@<X0>(quasar::USimpleSearch *this@<X0>, uint64_t a2@<X8>)
{
  int v9 = 0;
  uint64_t result = usearch_next();
  int v5 = result;
  if (result == -1)
  {
    char v7 = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    uint64_t result = usearch_getMatchedLength();
    if (!result)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "USimpleSearch usearch_getMatchedLength is 0 for a match");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
    }
    int v6 = result;
    if (*(unsigned char *)this && *((void *)this + 1) > (unint64_t)(v5 + 1)) {
      uint64_t result = usearch_setOffset();
    }
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    char v7 = 1;
  }
  *(unsigned char *)(a2 + 16) = v7;
  return result;
}

void sub_1B1DD187C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::USimpleSearch::getAllMatchRanges@<X0>(quasar::USimpleSearch *this@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = quasar::USimpleSearch::nextMatchRange(this, (uint64_t)&v20);
  int v5 = v21;
  if (v21)
  {
    while (1)
    {
      char v7 = a2[1];
      unint64_t v6 = (unint64_t)a2[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*a2) >> 4;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 60) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v6 - (void)*a2;
        if (v11 >> 3 > v10) {
          unint64_t v10 = v11 >> 3;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12) {
          int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a2 + 2), v12);
        }
        else {
          int v13 = 0;
        }
        long long v14 = &v13[16 * v9];
        *(_OWORD *)long long v14 = v20;
        unint64_t v16 = (char *)*a2;
        int v15 = (char *)a2[1];
        size_t v17 = v14;
        if (v15 != *a2)
        {
          do
          {
            *((_OWORD *)v17 - 1) = *((_OWORD *)v15 - 1);
            v17 -= 16;
            v15 -= 16;
          }
          while (v15 != v16);
          int v15 = (char *)*a2;
        }
        uint64_t v8 = v14 + 16;
        *a2 = v17;
        a2[1] = v14 + 16;
        a2[2] = &v13[16 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *char v7 = v20;
        uint64_t v8 = v7 + 1;
      }
      a2[1] = v8;
      uint64_t result = quasar::USimpleSearch::nextMatchRange(this, (uint64_t)&v18);
      if (v5 != v19) {
        break;
      }
      long long v20 = v18;
      int v5 = 1;
    }
  }
  return result;
}

void sub_1B1DD19EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL quasar::UInsensitiveEquals()
{
  ucol_open();
  ucol_setStrength();
  int v0 = ucol_strcoll();
  ucol_close();
  return v0 == 0;
}

uint64_t quasar::isLowerUnicode(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1) {
    quasar::toU32String();
  }
  return 0;
}

void sub_1B1DD1C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::isUpperUnicode(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1) {
    quasar::toU32String();
  }
  return 0;
}

void sub_1B1DD1D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::isTitleUnicode(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1) {
    quasar::toU32String();
  }
  return 0;
}

void sub_1B1DD1E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::keepFirstNCodePoints()
{
}

void sub_1B1DD1F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::keepLastNCodePoints()
{
}

void sub_1B1DD202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t quasar::intersectionRange(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (*a1 <= v3 && v3 < a1[1] + *a1) {
    unint64_t v4 = *a2;
  }
  else {
    unint64_t v4 = 0;
  }
  if (v3 > v2 || v2 >= a2[1] + *a2) {
    return v4;
  }
  else {
    return *a1;
  }
}

void quasar::tokenizeForWordBoundariesValidation(char *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  quasar::getBoundarySeparatedString(a1, &v3);
  if (v3.__begin_ != v3.__end_) {
    quasar::trimUnicode();
  }
  long long __p = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1B1DD22B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  long long __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  size_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::getRangesForSearchStringWithWordBoundariesValidation@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  int v6 = *(char *)(result + 23);
  if (v6 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v7 = *(void *)(result + 8);
  }
  if (!v7) {
    goto LABEL_123;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    unint64_t v10 = (std::string *)result;
    if (v6 < 0) {
      uint64_t result = *(void *)result;
    }
    quasar::utf8::utf8ToUtf16((char *)result, v7, (uint64_t)v88);
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      unint64_t v12 = (char *)a2;
    }
    else {
      unint64_t v12 = *(char **)a2;
    }
    if (v11 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    quasar::utf8::utf8ToUtf16(v12, v13, (uint64_t)v87);
    quasar::tokenizeForWordBoundariesValidation((char *)v10, &v85);
    int v73 = a4;
    uint64_t v75 = a3;
    quasar::tokenizeForWordBoundariesValidation((char *)a2, &__p);
    memset(&v82, 0, sizeof(v82));
    long long v14 = (std::string::size_type *)v85;
    uint64_t v15 = v86;
    if (v85 != v86)
    {
      do
      {
        std::string::basic_string(&v90, v10, *v14, v14[1], (std::allocator<char> *)&__v);
        std::vector<std::string>::pointer end = v82.__end_;
        if (v82.__end_ >= v82.__end_cap_.__value_)
        {
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v82.__end_ - (char *)v82.__begin_) >> 3);
          unint64_t v19 = v18 + 1;
          if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v82.__end_cap_.__value_ - (char *)v82.__begin_) >> 3) > v19) {
            unint64_t v19 = 0x5555555555555556 * (((char *)v82.__end_cap_.__value_ - (char *)v82.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v82.__end_cap_.__value_ - (char *)v82.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v19;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v82.__end_cap_;
          if (v20) {
            unsigned __int8 v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v82.__end_cap_, v20);
          }
          else {
            unsigned __int8 v21 = 0;
          }
          int v22 = v21 + v18;
          __v.__first_ = v21;
          __v.__begin_ = v22;
          __v.__end_cap_.__value_ = &v21[v20];
          long long v23 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
          v22->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          memset(&v90, 0, sizeof(v90));
          __v.__end_ = v22 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v82, &__v);
          unint64_t v24 = v82.__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v82.__end_ = v24;
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v90.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v17 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
          v82.__end_->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v17;
          v82.__end_ = end + 1;
        }
        v14 += 2;
      }
      while (v14 != v15);
    }
    uint64_t v25 = tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)v88);
    uint64_t v26 = (void *)tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)v87);
    quasar::USimpleSearch::USimpleSearch((uint64_t)v81, v25, v26, (const void **)v75, 1, 1);
    uint64_t v27 = v73;
    std::string *v73 = 0;
    v73[1] = 0;
    v73[2] = 0;
    quasar::USimpleSearch::getAllMatchRanges((quasar::USimpleSearch *)v81, (void **)&v79);
    uint64_t v28 = v79;
    uint64_t v74 = v80;
    if (v79 != v80)
    {
      while (1)
      {
        *((void *)&v78 + 1) = 0;
        uint64_t v29 = (uint64_t *)tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)v87);
        quasar::pySlice<std::vector<unsigned short>>(v29, 0, *v28, (uint64_t)&v90);
        quasar::utf8::utf16ToUtf8((uint64_t)&v90, (uint64_t)&__v);
        uint64_t v30 = tl::expected<std::string,std::string>::value<std::string,(void *)0>((uint64_t)&__v);
        uint64_t v31 = *(unsigned __int8 *)(v30 + 23);
        if ((v31 & 0x80u) != 0) {
          uint64_t v31 = *(void *)(v30 + 8);
        }
        *(void *)&long long v78 = v31;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        if (v90.__r_.__value_.__r.__words[0])
        {
          v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        uint64_t v32 = (uint64_t *)tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)v87);
        quasar::pySlice<std::vector<unsigned short>>(v32, *v28, v28[2] + *v28, (uint64_t)&v90);
        quasar::utf8::utf16ToUtf8((uint64_t)&v90, (uint64_t)&__v);
        uint64_t v33 = tl::expected<std::string,std::string>::value<std::string,(void *)0>((uint64_t)&__v);
        uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
        if ((v34 & 0x80u) != 0) {
          uint64_t v34 = *(void *)(v33 + 8);
        }
        *((void *)&v78 + 1) = v34;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        if (v90.__r_.__value_.__r.__words[0])
        {
          v90.__r_.__value_.__l.__size_ = v90.__r_.__value_.__r.__words[0];
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        memset(&v77, 0, sizeof(v77));
        long long v36 = (unint64_t *)__p;
        unint64_t v35 = v84;
        if (__p == v84)
        {
          std::vector<std::string>::pointer v48 = 0;
          std::vector<std::string>::pointer begin = 0;
        }
        else
        {
          do
          {
            quasar::intersectionRange(v36, (unint64_t *)&v78);
            if (v37)
            {
              std::string::basic_string(&v90, (const std::string *)a2, *v36, v36[1], (std::allocator<char> *)&__v);
              std::vector<std::string>::pointer v38 = v77.__end_;
              if (v77.__end_ >= v77.__end_cap_.__value_)
              {
                unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (((char *)v77.__end_ - (char *)v77.__begin_) >> 3);
                unint64_t v41 = v40 + 1;
                if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v77.__end_cap_.__value_ - (char *)v77.__begin_) >> 3) > v41) {
                  unint64_t v41 = 0x5555555555555556 * (((char *)v77.__end_cap_.__value_ - (char *)v77.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v77.__end_cap_.__value_ - (char *)v77.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v42 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v42 = v41;
                }
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v77.__end_cap_;
                if (v42) {
                  size_t v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v77.__end_cap_, v42);
                }
                else {
                  size_t v43 = 0;
                }
                unint64_t v44 = v43 + v40;
                __v.__first_ = v43;
                __v.__begin_ = v44;
                __v.__end_cap_.__value_ = &v43[v42];
                long long v45 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
                v44->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
                memset(&v90, 0, sizeof(v90));
                __v.__end_ = v44 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v77, &__v);
                int v46 = v77.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
                v77.__end_ = v46;
                if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v90.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v39 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
                v77.__end_->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
                v77.__end_ = v38 + 1;
              }
            }
            v36 += 2;
          }
          while (v36 != v35);
          std::vector<std::string>::pointer begin = v77.__begin_;
          std::vector<std::string>::pointer v48 = v77.__end_;
        }
        std::vector<std::string>::pointer v50 = v82.__begin_;
        std::vector<std::string>::pointer v49 = v82.__end_;
        if (*(char *)(v75 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)v75, *(void *)(v75 + 8));
        }
        else {
          std::string v76 = *(std::string *)v75;
        }
        if ((char *)v49 - (char *)v50 == (char *)v48 - (char *)begin)
        {
          if (v50 == v49 || begin == v48)
          {
LABEL_85:
            BOOL v60 = v50 == v49 && begin == v48;
          }
          else
          {
            uint64_t v51 = 0;
            while (1)
            {
              int v52 = SHIBYTE(v50[v51].__r_.__value_.__r.__words[2]);
              long long v53 = v52 >= 0 ? (char *)&v50[v51] : (char *)v50[v51].__r_.__value_.__r.__words[0];
              uint64_t v54 = v52 >= 0 ? HIBYTE(v50[v51].__r_.__value_.__r.__words[2]) : v50[v51].__r_.__value_.__l.__size_;
              quasar::utf8::utf8ToUtf16(v53, v54, (uint64_t)&__v);
              int v55 = SHIBYTE(begin[v51].__r_.__value_.__r.__words[2]);
              long long v56 = v55 >= 0 ? (char *)&begin[v51] : (char *)begin[v51].__r_.__value_.__r.__words[0];
              uint64_t v57 = v55 >= 0 ? HIBYTE(begin[v51].__r_.__value_.__r.__words[2]) : begin[v51].__r_.__value_.__l.__size_;
              quasar::utf8::utf8ToUtf16(v56, v57, (uint64_t)&v90);
              tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)&__v);
              tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>((uint64_t)&v90);
              BOOL v58 = quasar::UInsensitiveEquals();
              tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&v90);
              tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&__v);
              if (!v58) {
                break;
              }
              if (&v50[++v51] == v49 || &begin[v51] == v48)
              {
                std::vector<std::string>::pointer v50 = (std::vector<std::string>::pointer)((char *)v50 + v51 * 24);
                std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)((char *)begin + v51 * 24);
                uint64_t v27 = v73;
                goto LABEL_85;
              }
            }
            BOOL v60 = 0;
            uint64_t v27 = v73;
          }
        }
        else
        {
          BOOL v60 = 0;
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v76.__r_.__value_.__l.__data_);
          if (v60)
          {
LABEL_97:
            long long v62 = v27[1];
            unint64_t v61 = (unint64_t)v27[2];
            if ((unint64_t)v62 >= v61)
            {
              uint64_t v64 = ((char *)v62 - (unsigned char *)*v27) >> 4;
              unint64_t v65 = v64 + 1;
              if ((unint64_t)(v64 + 1) >> 60) {
                std::vector<int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v66 = v61 - (void)*v27;
              if (v66 >> 3 > v65) {
                unint64_t v65 = v66 >> 3;
              }
              if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v67 = v65;
              }
              if (v67) {
                uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v73 + 2), v67);
              }
              else {
                uint64_t v68 = 0;
              }
              int v69 = &v68[16 * v64];
              *(_OWORD *)int v69 = v78;
              uint64_t v71 = (char *)*v27;
              uint64_t v70 = (char *)v27[1];
              int v72 = v69;
              if (v70 != *v27)
              {
                do
                {
                  *((_OWORD *)v72 - 1) = *((_OWORD *)v70 - 1);
                  v72 -= 16;
                  v70 -= 16;
                }
                while (v70 != v71);
                uint64_t v70 = (char *)*v27;
              }
              long long v63 = v69 + 16;
              *uint64_t v27 = v72;
              v27[1] = v69 + 16;
              v27[2] = &v68[16 * v67];
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              _OWORD *v62 = v78;
              long long v63 = v62 + 1;
            }
            v27[1] = v63;
          }
        }
        else if (v60)
        {
          goto LABEL_97;
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v77;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        v28 += 4;
        if (v28 == v74)
        {
          uint64_t v28 = v79;
          break;
        }
      }
    }
    if (v28)
    {
      long long v80 = v28;
      operator delete(v28);
    }
    quasar::USimpleSearch::~USimpleSearch((quasar::USimpleSearch *)v81);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v82;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (__p)
    {
      unint64_t v84 = (unint64_t *)__p;
      operator delete(__p);
    }
    if (v85)
    {
      int v86 = (std::string::size_type *)v85;
      operator delete(v85);
    }
    tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v87);
    return tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)v88);
  }
  else
  {
LABEL_123:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  return result;
}

void sub_1B1DD2A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40)
{
  size_t v43 = *(void **)v40;
  if (*(void *)v40)
  {
    *(void *)(v40 + 8) = v43;
    operator delete(v43);
  }
  quasar::USimpleSearch::~USimpleSearch((quasar::USimpleSearch *)&a28);
  *(void *)(v41 - 120) = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 120));
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base((uint64_t)&a40);
  tl::detail::expected_storage_base<std::vector<unsigned short>,std::string,false,false>::~expected_storage_base(v41 - 192);
  _Unwind_Resume(a1);
}

uint64_t tl::expected<std::vector<unsigned short>,std::string>::value<std::vector<unsigned short>,(void *)0>(uint64_t result)
{
  if (!*(unsigned char *)(result + 24))
  {
    if (*(char *)(result + 23) < 0) {
      std::string::__init_copy_ctor_external(&v1, *(const std::string::value_type **)result, *(void *)(result + 8));
    }
    else {
      std::string v1 = *(std::string *)result;
    }
    unint64_t v2 = &unk_1F0A36590;
    std::string v3 = v1;
    memset(&v1, 0, sizeof(v1));
    tl::detail::throw_exception<tl::bad_expected_access<std::string>>((uint64_t)&v2);
  }
  return result;
}

void sub_1B1DD2C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::exception a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void quasar::pySlice<std::vector<unsigned short>>(uint64_t *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 == v6)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    uint64_t v7 = v6 - v5;
    int32x2_t v8 = vdup_n_s32((unint64_t)(v6 - v5) >> 1);
    int32x2_t v9 = vmax_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(a3, a2)), (int8x8_t)v8), (int32x2_t)__PAIR64__(a3, a2)), 0);
    int32x2_t v10 = vmin_s32(v9, v8);
    __int32 v11 = v10.i32[1];
    __int32 v12 = v10.i32[0];
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    if (v10.i32[1] > v10.i32[0])
    {
      unsigned __int32 v29 = v9.i32[0];
      std::vector<unsigned short>::reserve((void **)a4, v10.i32[1] - v10.i32[0]);
      if ((int)(v7 >> 1) >= (uint64_t)v29) {
        unint64_t v14 = v29;
      }
      else {
        unint64_t v14 = (int)(v7 >> 1);
      }
      int v15 = v11 + v14 - v12;
      do
      {
        uint64_t v16 = *a1;
        if (v14 >= (a1[1] - *a1) >> 1) {
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v18 = *(_WORD **)(a4 + 8);
        unint64_t v17 = *(void *)(a4 + 16);
        if ((unint64_t)v18 >= v17)
        {
          unint64_t v20 = *(_WORD **)a4;
          uint64_t v21 = (uint64_t)v18 - *(void *)a4;
          if (v21 <= -3) {
            std::vector<int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v21 >> 1;
          unint64_t v23 = v17 - (void)v20;
          if (v23 <= (v21 >> 1) + 1) {
            unint64_t v24 = v22 + 1;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v23 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v25 = v24;
          }
          if (v25)
          {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a4 + 16, v25);
            unint64_t v20 = *(_WORD **)a4;
            unint64_t v18 = *(_WORD **)(a4 + 8);
          }
          else
          {
            uint64_t v26 = 0;
          }
          uint64_t v27 = &v26[2 * v22];
          *(_WORD *)uint64_t v27 = *(_WORD *)(v16 + 2 * v14);
          unint64_t v19 = v27 + 2;
          while (v18 != v20)
          {
            __int16 v28 = *--v18;
            *((_WORD *)v27 - 1) = v28;
            v27 -= 2;
          }
          *(void *)a4 = v27;
          *(void *)(a4 + 8) = v19;
          *(void *)(a4 + 16) = &v26[2 * v25];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *unint64_t v18 = *(_WORD *)(v16 + 2 * v14);
          unint64_t v19 = v18 + 1;
        }
        *(void *)(a4 + 8) = v19;
        ++v14;
      }
      while (v15 != v14);
    }
  }
}

void sub_1B1DD2E54(_Unwind_Exception *exception_object)
{
  std::string v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t tl::expected<std::string,std::string>::value<std::string,(void *)0>(uint64_t result)
{
  if (!*(unsigned char *)(result + 24))
  {
    if (*(char *)(result + 23) < 0) {
      std::string::__init_copy_ctor_external(&v1, *(const std::string::value_type **)result, *(void *)(result + 8));
    }
    else {
      std::string v1 = *(std::string *)result;
    }
    unint64_t v2 = &unk_1F0A36590;
    std::string v3 = v1;
    memset(&v1, 0, sizeof(v1));
    tl::detail::throw_exception<tl::bad_expected_access<std::string>>((uint64_t)&v2);
  }
  return result;
}

{
  std::string v1;
  void *v2;
  std::string v3;

  if (!*(unsigned char *)(result + 24))
  {
    if (*(char *)(result + 23) < 0) {
      std::string::__init_copy_ctor_external(&v1, *(const std::string::value_type **)result, *(void *)(result + 8));
    }
    else {
      std::string v1 = *(std::string *)result;
    }
    unint64_t v2 = &unk_1F0A36590;
    std::string v3 = v1;
    memset(&v1, 0, sizeof(v1));
    tl::detail::throw_exception<tl::bad_expected_access<std::string>>((uint64_t)&v2);
  }
  return result;
}

void sub_1B1DD2F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::exception a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned short *>,std::__wrap_iter<unsigned short *>>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1DD2F94(_Unwind_Exception *exception_object)
{
  std::string v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void tl::detail::throw_exception<tl::bad_expected_access<std::string>>(uint64_t a1)
{
  exception = (char *)__cxa_allocate_exception(0x20uLL);
  *(void *)exception = &unk_1F0A36590;
  uint64_t v3 = *(void *)(a1 + 24);
  *(_OWORD *)(exception + 8) = *(_OWORD *)(a1 + 8);
  *((void *)exception + 3) = v3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 8) = 0;
}

void tl::bad_expected_access<std::string>::~bad_expected_access(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1F0A36590;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_1F0A36590;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);
  JUMPOUT(0x1B3EA8670);
}

const char *tl::bad_expected_access<std::string>::what()
{
  return "Bad expected access";
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    int32x2_t v9 = &v6[2 * v8];
    int32x2_t v10 = (char *)*a1;
    __int32 v11 = (char *)a1[1];
    __int32 v12 = v7;
    if (v11 != *a1)
    {
      __int32 v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *quasar::rescoring::operator<<(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Feature(", 8);
  int64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"type=", 5);
  unint64_t v6 = *a2;
  if (v6 <= 0x15) {
    uint64_t v7 = quasar::rescoring::EnumNamesFeatureType(void)::names[v6];
  }
  else {
    uint64_t v7 = "";
  }
  size_t v8 = strlen(v7);
  int32x2_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  int32x2_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"index=", 6);
  __int32 v11 = (void *)std::ostream::operator<<();
  __int32 v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
  return a1;
}

void *quasar::rescoring::operator<<(void *a1, int *a2)
{
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"TransformedFeature(", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"feature=[", 9);
  int64_t v5 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  uint64_t v6 = *v5;
  size_t v8 = (unsigned __int8 *)v5 + v6 + 4;
  uint64_t v7 = *(unsigned int *)((char *)v5 + v6);
  if (v7)
  {
    uint64_t v9 = 8 * v7;
    do
    {
      int32x2_t v10 = quasar::rescoring::operator<<(a1, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", ", 2);
      v8 += 8;
      v9 -= 8;
    }
    while (v9);
  }
  __int32 v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"], ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"transformation=[", 16);
  __int32 v12 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
  uint64_t v13 = *v12;
  unint64_t v14 = (unsigned __int8 *)v12 + v13 + 4;
  uint64_t v15 = *(unsigned int *)((char *)v12 + v13);
  if (v15)
  {
    do
    {
      unint64_t v16 = *v14;
      unint64_t v17 = "";
      if (v16 <= 0x11) {
        unint64_t v17 = quasar::rescoring::EnumNamesFeatureTransformation(void)::names[v16];
      }
      size_t v18 = strlen(v17);
      unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
      ++v14;
      --v15;
    }
    while (v15);
  }
  unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"], ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"index=", 6);
  uint64_t v21 = (void *)std::ostream::operator<<();
  uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  void *v15;

  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"FeatureWeight(", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"weight=", 7);
  int64_t v5 = (void *)std::ostream::operator<<();
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"feature=[", 9);
  uint64_t v7 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  size_t v8 = (unsigned int *)((char *)v7 + *v7);
  __int32 v11 = *v8;
  uint64_t v9 = v8 + 1;
  int32x2_t v10 = v11;
  if (v11)
  {
    __int32 v12 = 4 * v10;
    uint64_t v13 = v9;
    do
    {
      unint64_t v14 = *v13++;
      uint64_t v15 = quasar::rescoring::operator<<(a1, (int *)((char *)v9 + v14));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
      uint64_t v9 = v13;
      v12 -= 4;
    }
    while (v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"])", 2);
  return a1;
}

uint64_t quasar::rescoring::AdapterModel::getFeaturizer(quasar::rescoring::AdapterModel *this)
{
  return *((void *)this + 1);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorOfStructs<quasar::rescoring::Feature>(flatbuffers_2_0_6::FlatBufferBuilder *a1, const unsigned __int8 *a2, uint64_t a3)
{
  flatbuffers_2_0_6::FlatBufferBuilder::StartVector(a1, 2 * (a3 & 0x1FFFFFFFFFFFFFFFLL), 4uLL);
  if (a3) {
    flatbuffers_2_0_6::vector_downward::push(a1, a2, 8 * a3);
  }
  *((unsigned char *)a1 + 78) = 0;
  return flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>(a1, a3);
}

void quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::fromBuilder()
{
}

void sub_1B1DD3660(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void *quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::~unique_string_flatbuf_ptr(void *a1)
{
  *a1 = &unk_1F0A59E70;
  uint64_t v4 = a1[1];
  unint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  return a1;
}

void quasar::rescoring::NullOpAdapterModel()
{
  char v12 = 0;
  long long v13 = xmmword_1B256C0E0;
  uint64_t v14 = 0;
  int v15 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 1;
  __int16 v19 = 256;
  uint64_t v20 = 0;
  uint64_t v10 = 21;
  uint64_t v11 = 0;
  int v0 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorOfStructs<quasar::rescoring::Feature>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, (const unsigned __int8 *)&v10, 1);
  BYTE14(v17) = 1;
  __int16 v1 = v15;
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, 10, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>(&v11, 8, 0, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, 6, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, 4, v0);
  int v2 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, v1);
  uint64_t v3 = operator new(4uLL);
  *uint64_t v3 = v2;
  int v4 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, (uint64_t)v3, 1);
  BYTE14(v17) = 1;
  LOWORD(v2) = v15;
  flatbuffers_2_0_6::FlatBufferBuilder::AddElement<double>(&v11, 8, 0.0, 0.0);
  unsigned int v5 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<double>((flatbuffers_2_0_6::vector_downward *)&v11, 1.0);
  flatbuffers_2_0_6::FlatBufferBuilder::TrackField(&v11, 6, v5);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, 4, v4);
  int v6 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, v2);
  uint64_t v7 = operator new(4uLL);
  *uint64_t v7 = v6;
  int v8 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, (uint64_t)v7, 1);
  BYTE14(v17) = 1;
  LOWORD(v6) = v15;
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, 6, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, 4, v8);
  int v9 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, v6);
  flatbuffers_2_0_6::FlatBufferBuilder::Finish((flatbuffers_2_0_6::FlatBufferBuilder *)&v11, v9, 0, 0);
  operator delete(v7);
  operator delete(v3);
  quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::fromBuilder();
}

void sub_1B1DD3974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v6 = *(void *)(v4 - 96);
  *(void *)(v4 - 104) = &unk_1F0A59E70;
  *(void *)(v4 - 96) = 0;
  if (v6) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100](v3 + 8, v6);
  }
  MEMORY[0x1B3EA8670](v2, 0x10E1C40DC75050CLL);
  uint64_t v7 = v8;
  uint64_t v8 = 0;
  if (v7) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)va, v7);
  }
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers_2_0_6::FlatBufferBuilder *)va1);
  _Unwind_Resume(a1);
}

void quasar::rescoring::LoadLinearAdapterModelFromPath(uint64_t a1, kaldi::quasar::Vocab *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v28 = MEMORY[0x1E4FBA460] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v26[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v26 + *(void *)(v26[0] - 24)) = v4;
  v26[1] = 0;
  unsigned int v5 = (std::ios_base *)((char *)v26 + *(void *)(v26[0] - 24));
  std::ios_base::init(v5, v27);
  uint64_t v6 = MEMORY[0x1E4FBA460] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  v26[0] = v6;
  uint64_t v28 = v3;
  MEMORY[0x1B3EA7CE0](v27);
  kaldi::quasar::Vocab::OOvWord(a2, (std::string *)__p);
  std::ifstream::open();
  if (SBYTE7(v10) < 0) {
    operator delete(__p[0]);
  }
  if (!*(_DWORD *)&v27[*(void *)(v26[0] - 24) + 16])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    std::ostream::operator<<();
    std::stringbuf::str();
    quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::fromString();
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)long long __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to load adapter model at ", 32);
  uint64_t v8 = quasar::filesystem::operator<<(v7, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".", 1);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B1DD3F28(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1B1DD4024()
{
  std::istream::~istream();
  MEMORY[0x1B3EA8520](v0);
  JUMPOUT(0x1B1DD401CLL);
}

void quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::fromString()
{
}

void sub_1B1DD4110(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void *quasar::rescoring::AdapterModelMultiplexer::AdapterModelMultiplexer(void *result, uint64_t *a2, void *a3)
{
  *uint64_t result = *a3;
  uint64_t v3 = a3 + 1;
  uint64_t v4 = a3[1];
  result[1] = v4;
  unsigned int v5 = result + 1;
  uint64_t v6 = a3[2];
  result[2] = v6;
  if (v6)
  {
    *(void *)(v4 + 16) = v5;
    *a3 = v3;
    *uint64_t v3 = 0;
    a3[2] = 0;
  }
  else
  {
    *uint64_t result = v5;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  result[3] = v7;
  return result;
}

uint64_t quasar::rescoring::AdapterModelMultiplexer::getModel(uint64_t a1, int *a2)
{
  if (!a2) {
    return *(void *)(a1 + 24);
  }
  uint64_t v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 < 5u) {
    return *(void *)(a1 + 24);
  }
  uint64_t v4 = v3[2];
  if (!v4) {
    return *(void *)(a1 + 24);
  }
  unsigned int v5 = (unsigned int *)((char *)a2 + v4 + *(unsigned int *)((char *)a2 + v4));
  unsigned int v6 = *v5;
  v10[0] = v5 + 1;
  v10[1] = v6;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1, (uint64_t)v10);
  if (a1 + 8 == v7) {
    uint64_t v8 = a1 + 24;
  }
  else {
    uint64_t v8 = v7 + 56;
  }
  return *(void *)v8;
}

unsigned char *flatbuffers_2_0_6::FlatBufferBuilder::AddElement<double>(unsigned char *this, uint64_t a2, double a3, double a4)
{
  unsigned int v5 = this;
  if (a3 != a4 || this[88])
  {
    unsigned int v6 = flatbuffers_2_0_6::FlatBufferBuilder::PushElement<double>((flatbuffers_2_0_6::vector_downward *)this, a3);
    return flatbuffers_2_0_6::FlatBufferBuilder::TrackField(v5, a2, v6);
  }
  return this;
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::PushElement<double>(flatbuffers_2_0_6::vector_downward *this, double a2)
{
  if (*((void *)this + 10) <= 7uLL) {
    *((void *)this + 10) = 8;
  }
  flatbuffers_2_0_6::vector_downward::fill(this, -*((_DWORD *)this + 10) & 7);
  double v5 = a2;
  flatbuffers_2_0_6::vector_downward::push_small<double>(this, &v5);
  return *((unsigned int *)this + 10);
}

double flatbuffers_2_0_6::vector_downward::push_small<double>(flatbuffers_2_0_6::vector_downward *this, double *a2)
{
  uint64_t v4 = *((void *)this + 7);
  if ((unint64_t)(v4 - *((void *)this + 8)) <= 7)
  {
    flatbuffers_2_0_6::vector_downward::reallocate(this, 8uLL);
    uint64_t v4 = *((void *)this + 7);
  }
  double result = *a2;
  *(double *)(v4 - 8) = *a2;
  *((void *)this + 7) = v4 - 8;
  *((_DWORD *)this + 10) += 8;
  return result;
}

void *quasar::tennessee::generic_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc,std::string,std::unique_ptr<std::string>>::~generic_flatbuf_ptr(void *a1)
{
  *a1 = &unk_1F0A59E70;
  uint64_t v4 = a1[1];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  return a1;
}

void quasar::tennessee::generic_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc,std::string,std::unique_ptr<std::string>>::~generic_flatbuf_ptr(void *a1)
{
  *a1 = &unk_1F0A59E70;
  uint64_t v3 = a1[1];
  uint64_t v1 = a1 + 1;
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
  JUMPOUT(0x1B3EA8670);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers_2_0_6::FlatBufferBuilder *a1, unint64_t a2, uint64_t *a3)
{
  std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>>::vector(&__p, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *a3;
      uint64_t v8 = *(double **)(*(void *)a3[1] + 8 * v6);
      uint64_t v9 = a3[2];
      v22[0] = *a3;
      v22[1] = v8;
      v22[2] = v9;
      uint64_t v10 = *((void *)v8 + 1) - *(void *)v8;
      if (v10) {
        int v11 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers_2_0_6::FlatBufferBuilder *)v7, v10 >> 3, (uint64_t)v22);
      }
      else {
        int v11 = 0;
      }
      double v13 = v8[3];
      double v12 = v8[4];
      *(unsigned char *)(v7 + 78) = 1;
      int v14 = *(_DWORD *)(v7 + 40);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<double>((unsigned char *)v7, 8, v12, 0.0);
      flatbuffers_2_0_6::FlatBufferBuilder::AddElement<double>((unsigned char *)v7, 6, v13, 0.0);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)v7, 4, v11);
      int v15 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)v7, v14);
      long long v16 = __p;
      *((_DWORD *)__p + v6++) = v15;
    }
    while (a2 != v6);
  }
  else
  {
    long long v16 = __p;
  }
  if (v21 == v16) {
    long long v17 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>> const&)::t;
  }
  else {
    long long v17 = v16;
  }
  uint64_t v18 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(a1, (uint64_t)v17, (v21 - v16) >> 2);
  if (__p)
  {
    long long v21 = __p;
    operator delete(__p);
  }
  return v18;
}

void sub_1B1DD4538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#2},quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers_2_0_6::FlatBufferBuilder *a1, unint64_t a2, uint64_t *a3)
{
  std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>::vector(&__p, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      int TransformedFeature = quasar::rescoring::CreateTransformedFeature(*a3, *(void *)(*(void *)(a3[1] + 24) + 8 * v6), a3[2]);
      uint64_t v8 = __p;
      *((_DWORD *)__p + v6++) = TransformedFeature;
    }
    while (a2 != v6);
  }
  else
  {
    uint64_t v8 = __p;
  }
  if (v13 == v8) {
    uint64_t v9 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>> const&)::t;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(a1, (uint64_t)v9, (v13 - v8) >> 2);
  if (__p)
  {
    double v13 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1B1DD4608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B1DD4684(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateFeatureWeight(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::FeatureWeightT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers_2_0_6::FlatBufferBuilder *a1, unint64_t a2, uint64_t a3)
{
  std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>::vector(&__p, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      int TransformedFeature = quasar::rescoring::CreateTransformedFeature(*(void *)a3, *(void *)(**(void **)(a3 + 8) + 8 * v6), *(void *)(a3 + 16));
      uint64_t v8 = __p;
      *((_DWORD *)__p + v6++) = TransformedFeature;
    }
    while (a2 != v6);
  }
  else
  {
    uint64_t v8 = __p;
  }
  if (v13 == v8) {
    uint64_t v9 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>> const&)::t;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(a1, (uint64_t)v9, (v13 - v8) >> 2);
  if (__p)
  {
    double v13 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1B1DD4750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B1DD47CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::rescoring::CreateTransformedFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[0] = a1;
  v17[1] = a2;
  _OWORD v17[2] = a3;
  double v5 = *(const unsigned __int8 **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - (void)v5;
  if (v7) {
    int v8 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorOfStructs<quasar::rescoring::Feature>((flatbuffers_2_0_6::FlatBufferBuilder *)a1, v5, v7 >> 3);
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  if (v10 == v9) {
    int v11 = 0;
  }
  else {
    int v11 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorScalarCast<signed char,quasar::rescoring::FeatureTransformation>(a1, v9, v10 - v9);
  }
  int v12 = *(_DWORD *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 64) - *(void *)(a2 + 56);
  if (v13) {
    int v14 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureTransformationArgument>,quasar::rescoring::CreateTransformedFeature(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::TransformedFeatureT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateTransformedFeature(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::TransformedFeatureT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateTransformedFeature(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::TransformedFeatureT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers_2_0_6::FlatBufferBuilder *)a1, v13 >> 3, v17);
  }
  else {
    int v14 = 0;
  }
  *(unsigned char *)(a1 + 78) = 1;
  int v15 = *(_DWORD *)(a1 + 40);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)a1, 10, v14);
  flatbuffers_2_0_6::FlatBufferBuilder::AddElement<int>((unsigned char *)a1, 8, v12, 0);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)a1, 6, v11);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)a1, 4, v8);
  return flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)a1, v15);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVectorScalarCast<signed char,quasar::rescoring::FeatureTransformation>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  flatbuffers_2_0_6::FlatBufferBuilder::StartVector((flatbuffers_2_0_6::FlatBufferBuilder *)a1, a3, 1uLL);
  if (a3)
  {
    uint64_t v6 = a2 - 1;
    uint64_t v7 = a3;
    do
    {
      char v8 = *(unsigned char *)(v6 + v7);
      if (!*(void *)(a1 + 80)) {
        *(void *)(a1 + 80) = 1;
      }
      --v7;
      char v10 = v8;
      flatbuffers_2_0_6::vector_downward::push_small<signed char>((void *)a1, &v10);
    }
    while (v7);
  }
  *(unsigned char *)(a1 + 78) = 0;
  return flatbuffers_2_0_6::FlatBufferBuilder::PushElement<int>((flatbuffers_2_0_6::vector_downward *)a1, a3);
}

uint64_t flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureTransformationArgument>,quasar::rescoring::CreateTransformedFeature(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::TransformedFeatureT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateTransformedFeature(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::TransformedFeatureT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateTransformedFeature(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::TransformedFeatureT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers_2_0_6::FlatBufferBuilder *a1, unint64_t a2, uint64_t *a3)
{
  std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureTransformationArgument>>::vector(&__p, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *a3;
      char v8 = **(float ***)(*(void *)(a3[1] + 56) + 8 * v6);
      if (v8)
      {
        float v9 = *v8;
        *(unsigned char *)(v7 + 78) = 1;
        int v10 = *(_DWORD *)(v7 + 40);
        flatbuffers_2_0_6::FlatBufferBuilder::AddElement<float>((unsigned char *)v7, 4, v9, 0.0);
        int v11 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)v7, v10);
      }
      else
      {
        int v11 = 0;
      }
      *(unsigned char *)(v7 + 78) = 1;
      int v12 = *(_DWORD *)(v7 + 40);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)v7, 4, v11);
      int v13 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)v7, v12);
      int v14 = __p;
      *((_DWORD *)__p + v6++) = v13;
    }
    while (a2 != v6);
  }
  else
  {
    int v14 = __p;
  }
  if (v19 == v14) {
    int v15 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureTransformationArgument>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureTransformationArgument>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureTransformationArgument>> const&)::t;
  }
  else {
    int v15 = v14;
  }
  uint64_t v16 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(a1, (uint64_t)v15, (v19 - v14) >> 2);
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
  return v16;
}

void sub_1B1DD4AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureTransformationArgument>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1B1DD4B1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::generic_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc,std::string,std::unique_ptr<std::string>>::generic_flatbuf_ptr(uint64_t result, unsigned int **a2, unsigned int a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)double result = &unk_1F0A59E70;
  *(void *)(result + 8) = v3;
  *(_WORD *)(result + 16) = a3;
  if (!a3)
  {
    *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
    if (*((char *)v3 + 23) < 0) {
      uint64_t v3 = *(unsigned int **)v3;
    }
    goto LABEL_10;
  }
  if (*((char *)v3 + 23) < 0) {
    uint64_t v3 = *(unsigned int **)v3;
  }
  uint64_t v4 = (int *)((char *)v3 + *v3);
  *(void *)(result + ++*(_DWORD *)(result + 24) = v4;
  double v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 > a3)
  {
    uint64_t v6 = *(unsigned __int16 *)((char *)v5 + a3);
    if (v6)
    {
      uint64_t v3 = (unsigned int *)((char *)v4 + v6);
LABEL_10:
      uint64_t v7 = (char *)v3 + *v3;
      goto LABEL_11;
    }
  }
  uint64_t v7 = 0;
LABEL_11:
  *(void *)(result + 32) = v7;
  return result;
}

void quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::~unique_string_flatbuf_ptr(void *a1)
{
  *a1 = &unk_1F0A59E70;
  uint64_t v3 = a1[1];
  uint64_t v1 = a1 + 1;
  uint64_t v2 = v3;
  *uint64_t v1 = 0;
  if (v3) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
  JUMPOUT(0x1B3EA8670);
}

void *quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::unique_string_flatbuf_ptr(void *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v7 = v4;
  quasar::tennessee::generic_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc,std::string,std::unique_ptr<std::string>>::generic_flatbuf_ptr((uint64_t)a1, &v7, *(unsigned __int16 *)(a2 + 16));
  *a1 = &unk_1F0A59F60;
  double v5 = v7;
  uint64_t v7 = 0;
  if (v5) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)&v7, (uint64_t)v5);
  }
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return a1;
}

void sub_1B1DD4CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void *quasar::rescoring::LinearAdapterModel::LinearAdapterModel(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *a1 = &unk_1F0A59888;
  a1[1] = v5;
  a1[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_1F0A598C0;
  uint64_t v6 = (quasar::rescoring *)quasar::tennessee::unique_string_flatbuf_ptr<quasar::rescoring::LinearRescoringModelDesc>::unique_string_flatbuf_ptr(a1 + 3, a3);
  uint64_t v7 = (int *)a1[7];
  char v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 < 7u || (uint64_t v9 = v8[3]) == 0) {
    quasar::rescoring::GetDefaultTransformedFeatureDescs(v6);
  }
  quasar::rescoring::ConvertTransformedFeaturesToTransformedFeatureDescs<flatbuffers_2_0_6::Vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>>((unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9)), a1 + 8);
  return a1;
}

void sub_1B1DD4DA0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v1[4];
  v1[3] = &unk_1F0A59E70;
  v1[4] = 0;
  if (v4) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)(v1 + 4), v4);
  }
  *uint64_t v1 = v2;
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(exception_object);
}

void quasar::rescoring::ConvertTransformedFeaturesToTransformedFeatureDescs<flatbuffers_2_0_6::Vector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>>>(unsigned int *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<quasar::rescoring::TransformedFeatureDesc>::reserve(a2, *a1);
  unsigned int v6 = *a1;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = v6;
  if (v6)
  {
    uint64_t v7 = 4 * v4;
    do
    {
      quasar::rescoring::CreateTransformedFeatureDesc((int *)((char *)v5 + *v5), v10);
      char v8 = (void *)a2[1];
      if ((unint64_t)v8 >= a2[2])
      {
        uint64_t v9 = std::vector<quasar::rescoring::TransformedFeatureDesc>::__emplace_back_slow_path<quasar::rescoring::TransformedFeatureDesc>(a2, (uint64_t)v10);
      }
      else
      {
        v8[2] = 0;
        void v8[3] = 0;
        *char v8 = 0;
        v8[1] = 0;
        *(_OWORD *)char v8 = *(_OWORD *)v10;
        v8[2] = v11;
        v10[0] = 0;
        v10[1] = 0;
        uint64_t v11 = 0;
        v8[4] = 0;
        v8[5] = 0;
        *(_OWORD *)(v8 + 3) = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v8[5] = v13;
        v8[6] = 0;
        uint64_t v13 = 0;
        v8[7] = 0;
        _DWORD v8[8] = 0;
        *((_OWORD *)v8 + 3) = v14;
        _DWORD v8[8] = v15;
        long long v14 = 0uLL;
        uint64_t v15 = 0;
        uint64_t v9 = (uint64_t)(v8 + 9);
      }
      a2[1] = v9;
      uint64_t v16 = (void **)&v14;
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v16);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v10[0])
      {
        v10[1] = v10[0];
        operator delete(v10[0]);
      }
      ++v5;
      v7 -= 4;
    }
    while (v7);
  }
}

void sub_1B1DD4F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void quasar::rescoring::LinearAdapterModel::~LinearAdapterModel(quasar::rescoring::LinearAdapterModel *this)
{
  *(void *)this = &unk_1F0A598C0;
  uint64_t v4 = (void **)((char *)this + 64);
  std::vector<quasar::rescoring::TransformedFeatureDesc>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 3) = &unk_1F0A59E70;
  *((void *)this + 4) = 0;
  if (v2) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)this + 32, v2);
  }
  *(void *)this = &unk_1F0A59888;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(void *)this = &unk_1F0A598C0;
  uint64_t v4 = (void **)((char *)this + 64);
  std::vector<quasar::rescoring::TransformedFeatureDesc>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 3) = &unk_1F0A59E70;
  *((void *)this + 4) = 0;
  if (v2) {
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)this + 32, v2);
  }
  *(void *)this = &unk_1F0A59888;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  MEMORY[0x1B3EA8670](this, 0x10E1C40DC75050CLL);
}

float quasar::rescoring::LinearAdapterModel::scoreHypothesis(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (quasar::gLogLevel >= 6)
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Scoring hypothesis ", 19);
    char v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" of ", 4);
    int v10 = (unsigned __int16 *)((char *)a2 - *a2);
    if (*v10 < 5u)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = v10[2];
      if (v11) {
        v11 += (uint64_t)a2 + *(unsigned int *)((char *)a2 + v11);
      }
    }
    uint64_t v12 = v11 + 4;
    size_t v13 = strlen((const char *)(v11 + 4));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v48);
  }
  long long v14 = *(int **)(a1 + 56);
  uint64_t v15 = *(unsigned __int16 *)((char *)v14 - *v14 + 4);
  uint64_t v16 = *(unsigned int *)((char *)v14 + v15);
  long long v17 = (unsigned int *)((char *)v14 + v15 + v16);
  uint64_t v18 = *v17;
  if (v18)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 4 * v18;
    long long v21 = (char *)v14 + v15 + v16;
    double v22 = 0.0;
    while (1)
    {
      uint64_t v23 = *(unsigned int *)&v21[v19 + 4];
      long long v24 = (int *)((char *)&v17[v19 / 4] + v23);
      uint64_t v25 = v23 - v24[1];
      uint64_t v26 = (char *)&v17[v19 / 4] + v25;
      if (*((unsigned __int16 *)v26 + 2) >= 7u)
      {
        uint64_t v27 = *((unsigned __int16 *)v26 + 5);
        if (v27)
        {
          if (*(double *)((char *)&v17[v19 / 4 + 1] + v23 + v27) != 0.0) {
            break;
          }
        }
      }
LABEL_28:
      v19 += 4;
      if (v20 == v19) {
        goto LABEL_31;
      }
    }
    uint64_t v28 = *(unsigned __int16 *)((char *)&v17[v19 / 4 + 2] + v25);
    if (v28) {
      uint64_t v29 = (uint64_t)&v17[v19 / 4 + 1] + v23 + v28 + *(unsigned int *)((char *)&v17[v19 / 4 + 1] + v23 + v28);
    }
    else {
      uint64_t v29 = 0;
    }
    float v30 = (*(float (**)(void, int *, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), a2, a3, a4, v29);
    float v31 = v30;
    uint64_t v32 = v23 - v24[1];
    uint64_t v33 = &v21[v19 + v32];
    unsigned int v34 = *((unsigned __int16 *)v33 + 2);
    if (v34 < 9)
    {
      double v36 = (float)(v30 + 0.0);
      double v37 = 0.0;
      if (v34 < 7)
      {
LABEL_25:
        float v40 = v36 * v37;
        if (quasar::gLogLevel >= 6)
        {
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v48 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Hypothesis ", 11);
          uint64_t v41 = (void *)std::ostream::operator<<();
          unint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" ", 1);
          size_t v43 = quasar::rescoring::operator<<(v42, v24 + 1);
          unint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"; ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"featureValue=", 13);
          long long v45 = (void *)std::ostream::operator<<();
          int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" ", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"shiftedAndWeightedFeatureValue=", 31);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v48);
        }
        double v22 = v22 + v40;
        goto LABEL_28;
      }
    }
    else
    {
      if (*((_WORD *)v33 + 6)) {
        double v35 = *(double *)&v21[v19 + 4 + v23 + *((unsigned __int16 *)v33 + 6)];
      }
      else {
        double v35 = 0.0;
      }
      float v38 = v35 + v31;
      double v36 = v38;
    }
    uint64_t v39 = *(unsigned __int16 *)&v21[v19 + 10 + v32];
    if (v39) {
      double v37 = *(double *)&v21[v19 + 4 + v23 + v39];
    }
    else {
      double v37 = 0.0;
    }
    goto LABEL_25;
  }
  double v22 = 0.0;
LABEL_31:
  if (quasar::gLogLevel > 5)
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Score: ", 7);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v48);
  }
  return v22;
}

void sub_1B1DD54C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t quasar::rescoring::LinearAdapterModel::getTransformedFeatureDescs(quasar::rescoring::LinearAdapterModel *this)
{
  return (uint64_t)this + 64;
}

void quasar::rescoring::LinearAdapterModel::serialize(uint64_t a1, void *a2)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  quasar::rescoring::LinearRescoringModelDesc::UnPackTo(*(int **)(a1 + 56), &v17);
  uint64_t v7 = 0;
  char v8 = 0;
  long long v9 = xmmword_1B256C0E0;
  uint64_t v10 = 0;
  int v11 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 1;
  __int16 v15 = 256;
  uint64_t v16 = 0;
  v20[0] = (uint64_t)&v7;
  v20[1] = (uint64_t)&v17;
  v20[2] = 0;
  if (*((void *)&v17 + 1) == (void)v17) {
    int v3 = 0;
  }
  else {
    int v3 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::FeatureWeight>,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers_2_0_6::FlatBufferBuilder *)&v7, (uint64_t)(*((void *)&v17 + 1) - v17) >> 3, v20);
  }
  if ((void)v19 == *((void *)&v18 + 1)) {
    int v4 = 0;
  }
  else {
    int v4 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<flatbuffers_2_0_6::Offset<quasar::rescoring::TransformedFeature>,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#2},quasar::rescoring::CreateLinearRescoringModelDesc(flatbuffers_2_0_6::FlatBufferBuilder&,quasar::rescoring::LinearRescoringModelDescT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers_2_0_6::FlatBufferBuilder *)&v7, (uint64_t)(v19 - *((void *)&v18 + 1)) >> 3, v20);
  }
  BYTE14(v13) = 1;
  __int16 v5 = v11;
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)&v7, 6, v4);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((flatbuffers_2_0_6::FlatBufferBuilder *)&v7, 4, v3);
  int v6 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable((flatbuffers_2_0_6::FlatBufferBuilder *)&v7, v5);
  flatbuffers_2_0_6::FlatBufferBuilder::Finish((flatbuffers_2_0_6::FlatBufferBuilder *)&v7, v6, 0, 0);
  quasar::tennessee::Serialize((uint64_t)&v7, a2);
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers_2_0_6::FlatBufferBuilder *)&v7);
  uint64_t v7 = (void **)&v18 + 1;
  std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v7 = (void **)&v17;
  std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1B1DD564C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  quasar::rescoring::LinearRescoringModelDescT::~LinearRescoringModelDescT((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<quasar::rescoring::TransformedFeatureDesc>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _OWORD v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 72 * v6;
    std::vector<quasar::rescoring::TransformedFeatureDesc>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::rescoring::TransformedFeatureDesc>::~__split_buffer(v7);
  }
  return result;
}

void sub_1B1DD571C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::rescoring::TransformedFeatureDesc>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::rescoring::CreateTransformedFeatureDesc(int *a1@<X0>, void *a2@<X8>)
{
  long long v51 = 0;
  long long v52 = 0;
  long long v53 = 0;
  uint64_t v4 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - *a1 + 4));
  std::vector<quasar::rescoring::FeatureType>::reserve((unint64_t *)&v51, *(unsigned int *)((char *)v4 + *v4));
  unint64_t v44 = a2;
  uint64_t v5 = *a1;
  uint64_t v6 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - v5 + 4));
  uint64_t v7 = *v6;
  long long v9 = (char *)v6 + v7 + 4;
  uint64_t v8 = *(unsigned int *)((char *)v6 + v7);
  if (v8)
  {
    uint64_t v10 = &v9[8 * v8];
    int v11 = v52;
    do
    {
      char v12 = *v9;
      if (v11 >= v53)
      {
        unint64_t v14 = (unint64_t)v51;
        uint64_t v15 = v11 - (unsigned char *)v51;
        uint64_t v16 = v11 - (unsigned char *)v51 + 1;
        if (v16 < 0) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = v53 - (unsigned char *)v51;
        if (2 * (v53 - (unsigned char *)v51) > (unint64_t)v16) {
          uint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v18 = v16;
        }
        if (v18) {
          long long v19 = (char *)operator new(v18);
        }
        else {
          long long v19 = 0;
        }
        uint64_t v20 = &v19[v15];
        long long v21 = &v19[v15];
        *long long v21 = v12;
        long long v13 = v21 + 1;
        if (v11 != (char *)v14)
        {
          double v22 = &v11[~v14];
          do
          {
            char v23 = *--v11;
            (v22--)[(void)v19] = v23;
          }
          while (v11 != (char *)v14);
          uint64_t v20 = v19;
        }
        long long v51 = v20;
        long long v52 = v13;
        long long v53 = &v19[v18];
        if (v14) {
          operator delete((void *)v14);
        }
      }
      else
      {
        *int v11 = v12;
        long long v13 = v11 + 1;
      }
      long long v52 = v13;
      v9 += 8;
      int v11 = v13;
    }
    while (v9 != v10);
    uint64_t v5 = *a1;
  }
  long long v24 = (unsigned __int16 *)((char *)a1 - v5);
  unsigned int v25 = *v24;
  if (v24[3]) {
    size_t v43 = (unsigned int *)((char *)a1 + v24[3] + *(unsigned int *)((char *)a1 + v24[3]));
  }
  else {
    size_t v43 = 0;
  }
  long long v48 = 0;
  long long v49 = 0;
  uint64_t v50 = 0;
  if (v25 >= 0xB)
  {
    uint64_t v26 = v24[5];
    if (v24[5])
    {
      uint64_t v27 = *(unsigned int *)((char *)a1 + v26);
      uint64_t v28 = (unsigned int *)((char *)a1 + v26 + v27);
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::resize((uint64_t *)&v48, *v28);
      uint64_t v29 = *v28;
      if (v29)
      {
        unint64_t v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 4 * v29;
        uint64_t v33 = (char *)a1 + v26 + v27;
        do
        {
          uint64_t v34 = *(unsigned int *)&v33[v30 + 4];
          double v35 = (char *)&v28[v30 / 4] + v34 - *(int *)((char *)&v28[v30 / 4 + 1] + v34);
          if (*((unsigned __int16 *)v35 + 2) >= 5u)
          {
            uint64_t v36 = *((unsigned __int16 *)v35 + 4);
            if (*((_WORD *)v35 + 4))
            {
              uint64_t v37 = *(unsigned int *)((char *)&v28[v30 / 4 + 1] + v34 + v36);
              float v38 = (_DWORD *)v48[v31];
              if (!v38) {
                operator new();
              }
              uint64_t v39 = *(int *)&v33[v34 + 4 + v36 + v30 + v37];
              int v40 = 0;
              if (*(unsigned __int16 *)((char *)&v28[v30 / 4 + 1] + v34 + v36 + v37 - v39) >= 5u)
              {
                uint64_t v41 = v34 + v36 + v37;
                if (*(_WORD *)((char *)&v28[v30 / 4 + 2] + v41 - v39)) {
                  int v40 = *(_DWORD *)&v33[v41 + 4 + v30 + *(unsigned __int16 *)((char *)&v28[v30 / 4 + 2] + v41 - v39)];
                }
              }
              _DWORD *v38 = v40;
            }
          }
          ++v31;
          v30 += 4;
        }
        while (v32 != v30);
      }
    }
  }
  size_t v42 = *v43;
  int v46 = 0;
  uint64_t v47 = 0;
  long long __p = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation const*,quasar::rescoring::FeatureTransformation const*>(&__p, v43 + 1, (uint64_t)v43 + v42 + 4, v42);
  *unint64_t v44 = 0;
  v44[1] = 0;
  uint64_t v44[2] = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>(v44, v51, (uint64_t)v52, v52 - (unsigned char *)v51);
  v44[3] = 0;
  v44[4] = 0;
  v44[5] = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation*,quasar::rescoring::FeatureTransformation*>(v44 + 3, __p, (uint64_t)v46, v46 - (unsigned char *)__p);
  v44[6] = 0;
  v44[7] = 0;
  v44[8] = 0;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformationArgumentT*,quasar::rescoring::FeatureTransformationArgumentT*>(v44 + 6, v48, v49, v49 - v48);
  if (__p)
  {
    int v46 = __p;
    operator delete(__p);
  }
  long long __p = &v48;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v51)
  {
    long long v52 = (char *)v51;
    operator delete(v51);
  }
}

void sub_1B1DD5AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  a12 = &a15;
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::rescoring::TransformedFeatureDesc>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::rescoring::TransformedFeatureDesc>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::rescoring::TransformedFeatureDesc>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 72;
      std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan>(a1, (void *)(v7 - 72), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 72;
      *((void *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::TransformedFeatureDesc>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::TransformedFeatureDesc>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::TransformedFeatureDesc>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::TransformedFeatureDesc>,std::reverse_iterator<quasar::rescoring::TransformedFeatureDesc*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::rescoring::TransformedFeatureDesc>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void std::allocator<quasar::rescoring::TransformedFeatureDesc>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(a2 + 48);
  std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<quasar::rescoring::TransformedFeatureDesc>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<quasar::rescoring::TransformedFeatureDesc>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::rescoring::TransformedFeatureDesc>::destroy[abi:ne180100](v4, i - 72);
  }
}

uint64_t std::vector<quasar::rescoring::TransformedFeatureDesc>::__emplace_back_slow_path<quasar::rescoring::TransformedFeatureDesc>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[72 * v3];
  long long v13 = &v7[72 * v6];
  std::allocator<quasar::PhoneticMatchAlignmentSpan>::construct[abi:ne180100]<quasar::PhoneticMatchAlignmentSpan,quasar::PhoneticMatchAlignmentSpan>((uint64_t)(a1 + 2), v11, a2);
  char v12 = v11 + 72;
  std::vector<quasar::rescoring::TransformedFeatureDesc>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<quasar::rescoring::TransformedFeatureDesc>::~__split_buffer(&v10);
  return v8;
}

void sub_1B1DD5F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::rescoring::TransformedFeatureDesc>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::rescoring::FeatureType>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void std::vector<quasar::rescoring::FeatureTransformationArgumentT>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (void *)(*a1 + 8 * a2));
    }
  }
  else
  {
    std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__append(a1, a2 - v2);
  }
}

void std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    char v14 = v13;
    long long v15 = &v13[8 * v10];
    unint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    long long v16 = &v15[8 * a2];
    std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<quasar::rescoring::FeatureTransformationArgumentT>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1B1DD6124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<quasar::rescoring::FeatureTransformationArgumentT>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::rescoring::FeatureTransformationArgumentT>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<quasar::rescoring::FeatureTransformationArgumentT>,std::reverse_iterator<quasar::rescoring::FeatureTransformationArgumentT*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  unint64_t v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = MEMORY[0x1B3EA8670](result, 0x1000C4052888210);
    }
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<quasar::rescoring::FeatureTransformationArgumentT>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<quasar::rescoring::FeatureTransformationArgumentT>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = MEMORY[0x1B3EA8670](result, 0x1000C4052888210);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void *std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation const*,quasar::rescoring::FeatureTransformation const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B1DD63D4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::rescoring::TransformedFeatureDesc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::rescoring::TransformedFeatureDesc>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::rescoring::LinearRescoringModelDesc::UnPackTo(int *a1, void *a2)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    uint64_t v5 = v4[2];
    if (v5)
    {
      uint64_t v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
      std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::resize((uint64_t)a2, *v6);
      if (*v6)
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        unint64_t v9 = v6 + 1;
        do
        {
          uint64_t v10 = *(uint64_t **)(*a2 + v7);
          if (!v10) {
            operator new();
          }
          quasar::rescoring::FeatureWeight::UnPackTo((int *)((char *)v9 + *v9), v10);
          ++v8;
          v7 += 8;
          ++v9;
        }
        while (v8 < *v6);
      }
    }
  }
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u)
  {
    uint64_t v12 = v11[3];
    if (v12)
    {
      long long v13 = (int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
      char v14 = a2 + 3;
      std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::resize(v14, *v13);
      if (*v13)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        unint64_t v17 = v13 + 1;
        do
        {
          uint64_t v18 = *(void *)(*v14 + v15);
          if (!v18) {
            operator new();
          }
          quasar::rescoring::TransformedFeature::UnPackTo((int *)((char *)v17 + *v17), v18);
          ++v16;
          v15 += 8;
          ++v17;
        }
        while (v16 < *v13);
      }
    }
  }
}

void sub_1B1DD66BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void quasar::rescoring::LinearRescoringModelDescT::~LinearRescoringModelDescT(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(void ****)(a1 + 8);
  unint64_t v4 = ((uint64_t)v3 - *(void *)a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 8 * a2;
      while (v3 != (void ***)v6)
        std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](--v3, 0);
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__append((char **)a1, v5);
  }
}

void quasar::rescoring::FeatureWeight::UnPackTo(int *a1, uint64_t *a2)
{
  unint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    uint64_t v5 = v4[2];
    if (v5)
    {
      uint64_t v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
      std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::resize(a2, *v6);
      if (*v6)
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        unint64_t v9 = v6 + 1;
        do
        {
          uint64_t v10 = *(void *)(*a2 + v7);
          if (!v10) {
            operator new();
          }
          quasar::rescoring::TransformedFeature::UnPackTo((int *)((char *)v9 + *v9), v10);
          ++v8;
          v7 += 8;
          ++v9;
        }
        while (v8 < *v6);
      }
    }
  }
  uint64_t v11 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v12 = *v11;
  if (v12 <= 6)
  {
    a2[3] = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (v11[3]) {
      uint64_t v14 = *(void *)((char *)a1 + v11[3]);
    }
    a2[3] = v14;
    if (v12 >= 9)
    {
      uint64_t v15 = v11[4];
      if (v15) {
        uint64_t v13 = *(void *)((char *)a1 + v15);
      }
    }
  }
  a2[4] = v13;
}

void sub_1B1DD6958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (uint64_t *)(*a1 + 8 * a2));
    }
  }
  else
  {
    std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__append(a1, a2 - v2);
  }
}

void quasar::rescoring::TransformedFeature::UnPackTo(int *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    uint64_t v5 = v4[2];
    if (v4[2])
    {
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = *(unsigned int *)((char *)a1 + v5);
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a2, *(unsigned int *)((char *)a1 + v5 + v7));
      if (*(_DWORD *)&v6[v7])
      {
        unint64_t v8 = 0;
        do
        {
          *(void *)(*(void *)a2 + 8 * v8) = *(void *)((char *)&a1[2 * v8 + 1] + v5 + v7);
          ++v8;
        }
        while (v8 < *(unsigned int *)&v6[v7]);
      }
    }
  }
  unint64_t v9 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v9 >= 7u)
  {
    uint64_t v10 = v9[3];
    if (v10)
    {
      uint64_t v11 = (int *)((char *)a1 + v10 + *(unsigned int *)((char *)a1 + v10));
      uint64_t v12 = *(void *)(a2 + 24);
      unint64_t v13 = *v11;
      unint64_t v14 = *(void *)(a2 + 32) - v12;
      if (v13 <= v14)
      {
        if (v13 < v14) {
          *(void *)(a2 + 32) = v12 + v13;
        }
      }
      else
      {
        std::vector<quasar::rescoring::FeatureTransformation>::__append(a2 + 24, v13 - v14);
        LODWORD(v13) = *v11;
      }
      if (v13)
      {
        uint64_t v15 = (char *)(v11 + 1);
        unint64_t v16 = *(unsigned char **)(a2 + 24);
        unint64_t v13 = v13;
        do
        {
          char v17 = *v15++;
          *v16++ = v17;
          --v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 9u)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[4];
    if (v19) {
      LODWORD(v19) = *(int *)((char *)a1 + v19);
    }
  }
  *(_DWORD *)(a2 + 48) = v19;
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 >= 0xBu)
  {
    uint64_t v21 = v20[5];
    if (v21)
    {
      double v22 = (int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
      char v23 = (uint64_t *)(a2 + 56);
      std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::resize(v23, *v22);
      if (*v22)
      {
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        uint64_t v26 = v22 + 1;
        do
        {
          uint64_t v27 = *(void **)(*v23 + v24);
          if (!v27) {
            operator new();
          }
          uint64_t v28 = *v26;
          uint64_t v29 = v28 - *(int *)((char *)v26 + v28);
          if (*(unsigned __int16 *)((char *)v26 + v29) >= 5u)
          {
            unint64_t v30 = (char *)v26 + v29;
            uint64_t v31 = *((unsigned __int16 *)v30 + 2);
            if (*((_WORD *)v30 + 2))
            {
              uint64_t v32 = *(unsigned int *)((char *)v26 + v28 + v31);
              uint64_t v33 = v28 + v31 + v32;
              if (!*v27) {
                operator new();
              }
              uint64_t v34 = *(int *)((char *)v26 + v33);
              int v35 = 0;
              if (*(unsigned __int16 *)((char *)v26 + v33 - v34) >= 5u)
              {
                uint64_t v36 = v28 + v31 + v32;
                uint64_t v37 = *(unsigned __int16 *)((char *)v26 + v36 - v34 + 4);
                if (v37) {
                  int v35 = *(unsigned int *)((char *)v26 + v36 + v37);
                }
              }
              *(_DWORD *)*uint64_t v27 = v35;
            }
          }
          ++v25;
          v24 += 8;
          ++v26;
        }
        while (v25 < *v22);
      }
    }
  }
}

void sub_1B1DD6D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<quasar::rescoring::FeatureTransformationArgumentT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    uint64_t v24 = v4;
    if (v13)
    {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    unint64_t v16 = &v14[8 * v13];
    char v23 = v16;
    bzero(v15, 8 * a2);
    char v17 = &v15[8 * a2];
    *((void *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        uint64_t v18 = *((void *)v7 - 1);
        v7 -= 8;
        *(void *)uint64_t v7 = 0;
        *((void *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      char v17 = (char *)*((void *)&v22 + 1);
      unint64_t v16 = v23;
    }
    long long v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    long long v22 = v19;
    uint64_t v20 = a1[2];
    a1[2] = v16;
    char v23 = v20;
    uint64_t v21 = v19;
    std::__split_buffer<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::~__split_buffer((uint64_t)&v21);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100]((void ***)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](void ***result, void **a2)
{
  unint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1B3EA8670](v2, 0x1020C4084B17629);
  }
  return result;
}

void std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    char v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    unint64_t v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1B1DD70F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::TransformedFeatureT>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
  unint64_t v2 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *uint64_t v1 = 0;
    if (v3) {
      std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<quasar::rescoring::TransformedFeatureT>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (uint64_t **)(*a1 + 8 * a2));
    }
  }
  else
  {
    std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__append(a1, a2 - v2);
  }
}

void std::vector<quasar::rescoring::FeatureTransformation>::__append(uint64_t a1, size_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unint64_t v6 = *(void *)a1;
    uint64_t v7 = &v5[-*(void *)a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v4 - v6;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = operator new(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v7[(void)v11];
    unint64_t v13 = (char *)v11 + v10;
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      uint64_t v11 = v12;
    }
    else
    {
      char v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[(void)v11] = v15;
      }
      while (v5 != (char *)v6);
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = &v12[a2];
    *(void *)(a1 + 16) = v13;
    if (v6)
    {
      operator delete((void *)v6);
    }
  }
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    char v14 = v13;
    char v15 = &v13[8 * v10];
    char v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    long long v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1B1DD757C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>,std::reverse_iterator<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(*(void *)(a1 + 16) + 8);
  unint64_t v2 = *(uint64_t ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *v1;
    *uint64_t v1 = 0;
    if (v3) {
      std::default_delete<quasar::rescoring::FeatureTransformationArgumentT>::operator()[abi:ne180100]((uint64_t)v1, v3);
    }
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v5 = *(uint64_t **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v5) {
      std::default_delete<quasar::rescoring::FeatureTransformationArgumentT>::operator()[abi:ne180100](i - 8, v5);
    }
  }
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      *uint64_t v5 = 0;
      if (v6) {
        std::default_delete<quasar::rescoring::FeatureTransformationArgumentT>::operator()[abi:ne180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::default_delete<quasar::rescoring::FeatureTransformationArgumentT>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      MEMORY[0x1B3EA8670](v2, 0x1000C4052888210);
    }
    JUMPOUT(0x1B3EA8670);
  }
}

void std::default_delete<quasar::rescoring::TransformedFeatureT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v5 = (void **)(a2 + 56);
    std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint64_t v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(void *)(a2 + 32) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v4;
      operator delete(v4);
    }
    MEMORY[0x1B3EA8670](a2, 0x1030C40F1006E01);
  }
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t ***)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<quasar::rescoring::FeatureTransformationArgumentT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<quasar::rescoring::FeatureWeightT>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void ***)**a1;
  if (v2)
  {
    uint64_t v4 = (void ***)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<quasar::rescoring::FeatureWeightT>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void quasar::TranslationTokenInternal::strippedText(std::string *__str@<X0>, std::string *a2@<X8>)
{
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    uint64_t v3 = __str;
  }
  if (size >= 3) {
    std::string::size_type size = 3;
  }
  if (!size) {
    goto LABEL_20;
  }
  uint64_t v4 = (unsigned __int8 *)v3 + size;
  uint64_t v5 = v3;
  uint64_t v6 = (std::string *)v4;
  do
  {
    if (v5->__r_.__value_.__s.__data_[0] == 226)
    {
      uint64_t v7 = 1u;
      while (v7 != 3)
      {
        if ((unsigned __int8 *)((char *)v5 + v7) == v4) {
          goto LABEL_17;
        }
        int v8 = v5->__r_.__value_.__s.__data_[v7];
        int v9 = asc_1B267B84A[v7++];
        if (v8 != v9) {
          goto LABEL_9;
        }
      }
      uint64_t v6 = v5;
    }
LABEL_9:
    uint64_t v5 = (std::string *)((char *)v5 + 1);
  }
  while (v5 != (std::string *)v4);
LABEL_17:
  if (v6 != (std::string *)v4 && v6 == v3)
  {
    std::string::basic_string(a2, __str, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
  }
  else
  {
LABEL_20:
    if (SHIBYTE(__str[3].__r_.__value_.__r.__words[2]) < 0)
    {
      int data = __str[3].__r_.__value_.__l.__data_;
      std::string::size_type v11 = __str[3].__r_.__value_.__l.__size_;
      std::string::__init_copy_ctor_external(a2, data, v11);
    }
    else
    {
      *a2 = __str[3];
    }
  }
}

void sub_1B1DD7CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<float>>(uint64_t *a1, uint64_t *a2)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<float>>((uint64_t)v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B3EA8520](&v9);
}

void sub_1B1DD7E54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::joinToStream<std::vector<float>>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = (void *)result;
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      }
      v3 += 4;
      uint64_t result = std::ostream::operator<<();
      char v7 = 0;
    }
    while (v3 != v4);
  }
  return result;
}

kaldi::nnet1::RecurrentBaseComponent *kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::RecurrentBaseComponent *a2, uint64_t a3)
{
  *(void *)this = &unk_1F0A4BB48;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 1, *(void *)(a3 + 8), *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 4));
  *((void *)this + 4) = &unk_1F0A49B30;
  *((_DWORD *)this + 10) = *(_DWORD *)(a3 + 40);
  uint64_t v6 = *(void *)a2;
  *(void *)this = *(void *)a2;
  *(void *)((char *)this + *(void *)(v6 - 24)) = *((void *)a2 + 1);
  *((void *)this + 6) = &unk_1F0A4A6D0;
  long long v7 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)(a3 + 71);
  *(_OWORD *)((char *)this + 56) = v7;
  *(void *)&long long v7 = *(void *)(a3 + 96);
  *((void *)this + 13) = 0;
  *((void *)this + 6) = &unk_1F0A4DB38;
  *((void *)this + 11) = &unk_1F0A4DB58;
  *((void *)this + 12) = v7;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)this + 13, *(void *)(a3 + 104), *(void *)(a3 + 112), (uint64_t)(*(void *)(a3 + 112) - *(void *)(a3 + 104)) >> 5);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)this + 16, *(void *)(a3 + 128), *(void *)(a3 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 136) - *(void *)(a3 + 128)) >> 4));
  *((void *)this + 19) = *(void *)(a3 + 152);
  return this;
}

void sub_1B1DD80B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(v3);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::NewCuSubOrVec<float>()
{
}

void sub_1B1DD817C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v8);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = &unk_1F0A4FA88;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A322C0, a2);
  *(void *)a1 = off_1F0A49008;
  *(void *)(a1 + 848) = off_1F0A492F8;
  *(void *)(a1 + 160) = &unk_1F0A49198;
  *(void *)(a1 + 168) = &unk_1F0A491C0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 7--*(_DWORD *)(a9 + 52) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v9 = *(void *)(a2 + 216);
  if (v9) {
    kaldi::NewCuSubOrMat<float>(v9, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    unint64_t v10 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v10))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v11, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v10))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v12, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v10))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v10);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v10))
      {
        uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v13, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v10))
      {
        uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v14, 0);
      }
      ++v10;
    }
    while (v10 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_1B1DD901C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,quasar::Bitmap *a22,quasar::Bitmap *a23,kaldi::nnet1::UpdatableComponent *a24,void **a25,void **a26,void **a27,void **a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,void **a32)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v33);
  a32 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  int v35 = *a15;
  if (*a15)
  {
    *((void *)v32 + 64) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *a16;
  if (*a16)
  {
    *((void *)v32 + 61) = v36;
    operator delete(v36);
  }
  a32 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a28;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  uint64_t v37 = *((void *)v32 + 27);
  *((void *)v32 + 27) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  uint64_t v38 = *((void *)v32 + 25);
  *((void *)v32 + 25) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a30, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a31, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v32, (uint64_t *)&off_1F0A322C0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v8);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = &unk_1F0A4FA88;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A322E0, a2);
  *(void *)a1 = off_1F0A49428;
  *(void *)(a1 + 848) = off_1F0A49718;
  *(void *)(a1 + 160) = &unk_1F0A495B8;
  *(void *)(a1 + 168) = &unk_1F0A495E0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 7--*(_DWORD *)(a9 + 52) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v9 = *(void *)(a2 + 216);
  if (v9) {
    kaldi::NewCuSubOrMat<float>(v9, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    unint64_t v10 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v10))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v11, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v10))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v12, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v10))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v10);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v10))
      {
        uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v13, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v10))
      {
        uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v14, 0);
      }
      ++v10;
    }
    while (v10 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_1B1DD9E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,quasar::Bitmap *a22,quasar::Bitmap *a23,kaldi::nnet1::UpdatableComponent *a24,void **a25,void **a26,void **a27,void **a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,void **a32)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v33);
  a32 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  int v35 = *a15;
  if (*a15)
  {
    *((void *)v32 + 64) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *a16;
  if (*a16)
  {
    *((void *)v32 + 61) = v36;
    operator delete(v36);
  }
  a32 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a28;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  uint64_t v37 = *((void *)v32 + 27);
  *((void *)v32 + 27) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  uint64_t v38 = *((void *)v32 + 25);
  *((void *)v32 + 25) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a30, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a31, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v32, (uint64_t *)&off_1F0A322E0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a24);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 904) = xmmword_1B255E480;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)&off_1F0A322A0);
  *(void *)uint64_t v4 = off_1F0A48BE8;
  *(void *)(v4 + 848) = off_1F0A48ED8;
  *(void *)(v4 + 160) = &unk_1F0A48D78;
  *(void *)(v4 + 168) = &unk_1F0A48DA0;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 2++*(_DWORD *)(result + 24) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 4++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 5--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 8++*(_DWORD *)(result + 24) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_1B1DDA34C(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v8);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v4);
    kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = &unk_1F0A4FA88;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A322A0, a2);
  *(void *)a1 = off_1F0A48BE8;
  *(void *)(a1 + 848) = off_1F0A48ED8;
  *(void *)(a1 + 160) = &unk_1F0A48D78;
  *(void *)(a1 + 168) = &unk_1F0A48DA0;
  int v7 = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 176) = v7;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  LOBYTE(v7) = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 7--*(_DWORD *)(a9 + 52) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  uint64_t v9 = *(void *)(a2 + 184);
  if (v9) {
    kaldi::NewCuSubOrMat<float>(v9, 0);
  }
  uint64_t v10 = *(void *)(a2 + 192);
  if (v10) {
    kaldi::NewCuSubOrMat<float>(v10, 0);
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v11 = *(void *)(a2 + 216);
  if (v11) {
    kaldi::NewCuSubOrMat<float>(v11, 0);
  }
  uint64_t v12 = *(void *)(a2 + 232);
  if (v12) {
    kaldi::NewCuSubOrMat<float>(v12, 0);
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    unint64_t v13 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v13))
      {
        uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v13);
        kaldi::NewCuSubOrMat<float>(v14, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v13))
      {
        uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v13);
        kaldi::NewCuSubOrMat<float>(v15, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v13))
      {
        kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v13);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v13))
      {
        uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v13);
        kaldi::NewCuSubOrMat<float>(v16, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v13))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v13);
        kaldi::NewCuSubOrMat<float>(v17, 0);
      }
      ++v13;
    }
    while (v13 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_1B1DDAF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,quasar::Bitmap *a22,quasar::Bitmap *a23,kaldi::nnet1::UpdatableComponent *a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v29);
  a28 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  uint64_t v31 = *a14;
  if (*a14)
  {
    *((void *)v28 + 64) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *a15;
  if (*a15)
  {
    *((void *)v28 + 61) = v32;
    operator delete(v32);
  }
  a28 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  uint64_t v33 = *((void *)v28 + 29);
  *((void *)v28 + 29) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 24))(v33);
  }
  uint64_t v34 = *((void *)v28 + 27);
  *((void *)v28 + 27) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 24))(v34);
  }
  uint64_t v35 = *((void *)v28 + 25);
  *((void *)v28 + 25) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
  }
  uint64_t v36 = *((void *)v28 + 24);
  *((void *)v28 + ++*(_DWORD *)(result + 24) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
  }
  uint64_t v37 = *a27;
  *a27 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v28, (uint64_t *)&off_1F0A322A0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = &unk_1F0A48D78;
  *(void *)(a1 + 168) = &unk_1F0A48DA0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v12 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v12 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v7 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 168));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 160));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void sub_1B1DDB7F8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void sub_1B1DDB894(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void sub_1B1DDB91C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v68 = -1;
  int v69 = v4;
  int v66 = 0x40000000;
  int v67 = -1073741824;
  int v64 = -1073741824;
  int v65 = 1036831949;
  int v63 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v62);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v61);
  memset(v60, 0, sizeof(v60));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v60);
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
    {
      uint64_t v5 = v60;
      switch(HIBYTE(v60[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v6 = v60[0] == 0x6D726F4E78614D3CLL && LOBYTE(v60[1]) == 62;
          uint64_t v7 = (int *)(a1 + 472);
          if (v6) {
            goto LABEL_202;
          }
          BOOL v8 = v60[0] == 0x6461724778614D3CLL && LOBYTE(v60[1]) == 62;
          uint64_t v7 = (int *)(a1 + 152);
          if (v8) {
            goto LABEL_202;
          }
          BOOL v9 = v60[0] == 0x6C6C654378614D3CLL && LOBYTE(v60[1]) == 62;
          uint64_t v7 = (int *)(a1 + 476);
          if (v9) {
            goto LABEL_202;
          }
          if ((v60[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v60[0] == 0x6C6C65436D754E3CLL && LOWORD(v60[1]) == 15987) {
            goto LABEL_205;
          }
          if (v60[0] != 0x61654D736169423CLL || LOWORD(v60[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v60[0] != 0x6E6152736169423CLL || *(void *)((char *)v60 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v60[0] == 0x536D6F646E61523CLL && LODWORD(v60[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v60[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v60[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v60[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v60[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v60[0] != 0x74536D617261503CLL || *(void *)((char *)v60 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v29 = v60[0] == 0x61526E7261654C3CLL && *(void *)((char *)v60 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v60[0] == 0x6E6569646172473CLL && v60[1] == 0x7079546D726F4E74 && LOWORD(v60[2]) == 15973) {
            goto LABEL_204;
          }
          if (v60[0] == 0x4374757074754F3CLL && v60[1] == 0x65756C61566C6C65 && LOWORD(v60[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v60[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v60[0] != 0x47746567726F463CLL || v60[1] != 0x4D73616942657461 || LODWORD(v60[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v60[0] != 0x47746567726F463CLL
            || v60[1] != 0x5273616942657461
            || *(void *)((char *)&v60[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v18 = v60[0] == 0x7463656A6F72503CLL
             && v60[1] == 0x6E7261654C6E6F69
             && v60[2] == 0x66656F4365746152
             && v61.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v10 = v60[1];
    switch(v60[1])
    {
      case 9:
        BOOL v11 = *(void *)v60[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
        uint64_t v7 = (int *)(a1 + 472);
        if (!v11)
        {
          BOOL v12 = *(void *)v60[0] == 0x6461724778614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
          uint64_t v7 = (int *)(a1 + 152);
          if (!v12) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v60[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v60[0] + 8) == 15987)
        {
LABEL_205:
          long long v52 = &v69;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v52);
          break;
        }
        if (*(void *)v60[0] != 0x61654D736169423CLL || *(_WORD *)(v60[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        uint64_t v7 = &v67;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v7);
        break;
      case 0xBLL:
        if (*(void *)v60[0] != 0x6E6152736169423CLL || *(void *)(v60[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        uint64_t v7 = &v66;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v60[0] != 0x74536D617261503CLL || *(void *)(v60[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        uint64_t v7 = &v65;
        goto LABEL_202;
      case 0xFLL:
        BOOL v29 = *(void *)v60[0] == 0x61526E7261654C3CLL && *(void *)(v60[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        uint64_t v7 = (int *)(a1 + 464);
        if (!v29) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v60[0] == 0x6E6569646172473CLL
          && *(void *)(v60[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v60[0] + 16) == 15973)
        {
LABEL_204:
          size_t v42 = &v61;
          goto LABEL_150;
        }
        if (v60[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v33 = *(void *)v60[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
        uint64_t v7 = (int *)(a1 + 476);
        if (v33) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v10 = v60[1];
LABEL_121:
        if (v10 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v60[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v60[0] + 8) == 1046766949)
        {
LABEL_206:
          long long v52 = &v68;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v10 = v60[1];
LABEL_127:
        if (v10 == 8)
        {
          if (*(void *)v60[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v10 = v60[1];
        }
        if (v10 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v60[0] != 0x4374757074754F3CLL
          || *(void *)(v60[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v60[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v10 = v60[1];
LABEL_139:
          if (v10 != 19) {
            goto LABEL_209;
          }
          uint64_t v5 = (uint64_t *)v60[0];
LABEL_141:
          uint64_t v37 = *v5;
          uint64_t v38 = v5[1];
          uint64_t v39 = *(uint64_t *)((char *)v5 + 11);
          BOOL v40 = v37 == 0x61725474696E493CLL && v38 == 0x79546D726F66736ELL;
          if (!v40 || v39 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v60, "</Component>"))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
              long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Invalid token ", 14);
              if (v60[2] >= 0) {
                long long v54 = v60;
              }
              else {
                long long v54 = (void *)v60[0];
              }
              if (v60[2] >= 0) {
                uint64_t v55 = HIBYTE(v60[2]);
              }
              else {
                uint64_t v55 = v60[1];
              }
              long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
              long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)". Allowed tokens: ", 18);
              long long v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v59);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams(a1, v69);
          }
          size_t v42 = &v62;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v42);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v60[0] != 0x47746567726F463CLL
          || *(void *)(v60[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v60[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        uint64_t v7 = &v64;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v60[0] != 0x47746567726F463CLL
          || *(void *)(v60[0] + 8) != 0x5273616942657461
          || *(void *)(v60[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        uint64_t v7 = &v63;
        goto LABEL_202;
      case 0x19:
        BOOL v18 = *(void *)v60[0] == 0x7463656A6F72503CLL
           && *(void *)(v60[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v60[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v60[0] + 24) == 62;
LABEL_200:
        uint64_t v7 = (int *)(a1 + 468);
        if (!v18) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_1B1DDC598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_1B1DDCBF8()
{
}

void sub_1B1DDCC0C(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  kaldi::Matrix<float>::Matrix((uint64_t)v15, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  uint64_t v10 = 0;
LABEL_2:
  if (v10 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v15))
  {
    for (uint64_t i = 0; ; ++i)
    {
      if (i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v15))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0);
          float v12 = v13 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v12 = (kaldi::UniformRandomNumber::RandUniform(a1, 0) + -0.5) * (float)(a5 + a5);
        }
      }
      else if (v10 == i)
      {
        float v12 = 1.0;
      }
      else
      {
        float v12 = 0.0;
      }
      *(float *)(*(void *)v15 + 4 * (int)v10 * v16 + 4 * i) = v12;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, v15, 111);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v15);
}

void sub_1B1DDCD74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v34 = *(_DWORD *)(a1 + 176);
    int v35 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v34 < v35)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      uint64_t v39 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") should not be less than output dim (", 38);
      BOOL v40 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, ").");
    }
    else
    {
      *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = v34 > v35;
      if (!*(void *)(a1 + 184)) {
        operator new();
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v43);
    if ((SHIBYTE(v44) & 0x80000000) == 0)
    {
      switch(HIBYTE(v44))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v43 != 0x6C6C65436D754E3CLL || WORD4(v43) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v23 = (void)v43 == 0x61526E7261654C3CLL && *(void *)((char *)&v43 + 7) == 0x3E66656F43657461;
          uint64_t v10 = (float *)(a1 + 464);
          if (v23) {
            goto LABEL_127;
          }
          if (HIBYTE(v44) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v43 == 0x4374757074754F3CLL
            && *((void *)&v43 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v44 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v44) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v44) != 18) {
            goto LABEL_138;
          }
          BOOL v21 = (void)v43 == 0x6E6569646172473CLL && *((void *)&v43 + 1) == 0x7079546D726F4E74;
          if (!v21 || (unsigned __int16)v44 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v44) != 25) {
            goto LABEL_138;
          }
          BOOL v18 = (void)v43 == 0x7463656A6F72503CLL
             && *((void *)&v43 + 1) == 0x6E7261654C6E6F69
             && v44 == 0x66656F4365746152
             && v45 == 62;
          uint64_t v10 = (float *)(a1 + 468);
          if (v18) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v44) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v24 = (void)v43 == 0x6D726F4E78614D3CLL && BYTE8(v43) == 62;
          uint64_t v10 = (float *)(a1 + 472);
          if (v24) {
            goto LABEL_127;
          }
          if (HIBYTE(v44) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v44) != 9) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v43 == 0x6C6C654378614D3CLL && BYTE8(v43) == 62;
          uint64_t v10 = (float *)(a1 + 476);
          if (!v25) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v7 = *((void *)&v43 + 1);
    if (*((void *)&v43 + 1) == 10
      && (*(void *)v43 == 0x6C6C65436D754E3CLL ? (BOOL v8 = *(unsigned __int16 *)(v43 + 8) == 15987) : (BOOL v8 = 0), v8))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176);
    }
    else
    {
      if (*((void *)&v43 + 1) == 15)
      {
        BOOL v9 = *(void *)v43 == 0x61526E7261654C3CLL && *(void *)(v43 + 7) == 0x3E66656F43657461;
        uint64_t v10 = (float *)(a1 + 464);
        if (v9) {
          goto LABEL_127;
        }
        uint64_t v7 = *((void *)&v43 + 1);
      }
      if (v7 == 25)
      {
        BOOL v13 = *(void *)v43 == 0x7463656A6F72503CLL
           && *(void *)(v43 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v43 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v43 + 24) == 62;
        uint64_t v10 = (float *)(a1 + 468);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v7 = *((void *)&v43 + 1);
      }
      if (v7 != 9) {
        goto LABEL_47;
      }
      BOOL v14 = *(void *)v43 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v43 + 8) == 62;
      uint64_t v10 = (float *)(a1 + 472);
      if (v14) {
        goto LABEL_127;
      }
      uint64_t v7 = *((void *)&v43 + 1);
      if (*((void *)&v43 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v15 = *(void *)v43 == 0x6C6C654378614D3CLL && *(unsigned char *)(v43 + 8) == 62;
      uint64_t v10 = (float *)(a1 + 476);
      if (v15) {
        goto LABEL_127;
      }
      if ((v44 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v44) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v44) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v43 != 0x3E706565506F4E3CLL)
        {
          if ((v44 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v7 = *((void *)&v43 + 1);
          if (v7 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v43 == 0x4374757074754F3CLL
            && *(void *)(v43 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v43 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v7 = *((void *)&v43 + 1);
          if (*((void *)&v43 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v43 == 0x6E6569646172473CLL
            && *(void *)(v43 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v43 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v42 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v42) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v44 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v44) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            unint64_t v30 = &v43;
          }
          else
          {
LABEL_120:
            if (v7 != 9) {
              goto LABEL_138;
            }
            unint64_t v30 = (long long *)v43;
          }
          uint64_t v31 = *(void *)v30;
          int v32 = *((unsigned __int8 *)v30 + 8);
          BOOL v33 = v31 == 0x6461724778614D3CLL && v32 == 62;
          uint64_t v10 = (float *)(a1 + 152);
          if (!v33)
          {
LABEL_138:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v44 >= 0) {
              uint64_t v37 = &v43;
            }
            else {
              uint64_t v37 = (long long *)v43;
            }
            if (v44 >= 0) {
              uint64_t v38 = HIBYTE(v44);
            }
            else {
              uint64_t v38 = *((void *)&v43 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v10);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v7 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v43 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v44) < 0) {
      operator delete((void *)v43);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_1B1DDDB4C()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<NumCells>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<ProjectionLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxCell>");
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, "<NoPeep>");
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, "<OutputCellValues>");
  }
  return result;
}

void sub_1B1DDDD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(void *a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3);
  if (a1[224])
  {
    uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v12, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  int v2 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  int v3 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) * v2;
  int v4 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  int v5 = v3 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) * v4;
  uint64_t v6 = (v5 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    uint64_t v6 = (v6
                      + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16)
                      * v7);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    return (v6
                        + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16)
                        * v8);
  }
  return v6;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

const void **kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(unsigned char *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v6 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v5;
  int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16) * v7;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  BOOL v23 = (char *)*a2;
  LODWORD(v++*(_DWORD *)(result + 24) = v6;
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v9);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v10 = v8 + v6;
  BOOL v23 = (char *)*a2 + 4 * v6;
  LODWORD(v++*(_DWORD *)(result + 24) = v8;
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v11);
  if (a1[208])
  {
    int v12 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v13 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v12;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v14 = v13 + v10;
    BOOL v23 = (char *)*a2 + 4 * v10;
    LODWORD(v++*(_DWORD *)(result + 24) = v13;
    uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v15);
    int v10 = v14;
  }
  int v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  BOOL v23 = (char *)*a2 + 4 * v10;
  LODWORD(v++*(_DWORD *)(result + 24) = v16;
  uint64_t v17 = (const void **)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  uint64_t result = kaldi::CuVectorBase<float>::CopyToVec<float>(v17, (uint64_t)&v23);
  if (a1[224])
  {
    int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v10;
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v20;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    BOOL v23 = (char *)*a2 + 4 * v19;
    LODWORD(v++*(_DWORD *)(result + 24) = v21;
    uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    return (const void **)kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v22);
  }
  return result;
}

const void **virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(void *a1, void **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams((unsigned char *)a1 + *(void *)(*a1 - 200), a2);
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(unsigned char *a1, char **a2)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  int v4 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v5 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v4;
  int v6 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16) * v6;
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v21 = *a2;
  LODWORD(v22) = v5;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v8, &v21);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v10 = v7 + v5;
  int v21 = &(*a2)[4 * v5];
  LODWORD(v22) = v7;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v9, &v21);
  if (a1[208])
  {
    int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v12 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v11;
    uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v21 = &(*a2)[4 * v10];
    LODWORD(v22) = v12;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v13, &v21);
    v10 += v12;
  }
  int v14 = (void *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  int v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v21 = &(*a2)[4 * v10];
  LODWORD(v22) = v15;
  uint64_t result = (int *)kaldi::CuVectorBase<float>::CopyFromVec<float>(v14, (uint64_t)&v21);
  if (a1[224])
  {
    int v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v10;
    int v18 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v18;
    uint64_t v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v21 = &(*a2)[4 * v17];
    LODWORD(v22) = v19;
    return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v20, &v21);
  }
  return result;
}

int *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(void *a1, char **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  uint64_t v2 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  float v3 = kaldi::CuMatrixBase<float>::Sum(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  float v5 = v3 + kaldi::CuMatrixBase<float>::Sum(v4);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    float v5 = v5 + kaldi::CuMatrixBase<float>::Sum(v6);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    float v5 = v5 + kaldi::CuMatrixBase<float>::Sum(v7);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  double v9 = kaldi::CuVectorBase<float>::Sum(v8);
  return v5 + *(float *)&v9;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  uint64_t v4 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrix<float>::CuMatrix(v20, v4, *(unsigned int *)(v5 + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v20, 111, a2, 1.0);
  uint64_t v7 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrix<float>::Resize(v20, v7, *(unsigned int *)(v8 + 16), 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v9, (uint64_t)v20, 111, a2, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v10 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrix<float>::Resize(v20, v10, *(unsigned int *)(v11 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v12, (uint64_t)v20, 111, a2, 1.0);
  }
  uint64_t v13 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16);
  memset(&v19[1], 0, 24);
  v19[0] = &unk_1F0A517C0;
  kaldi::CuVector<float>::Resize((uint64_t)v19, v13, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v19);
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec(v14, (uint64_t)v19, a2, 1.0);
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v15 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrix<float>::Resize(v20, v15, *(unsigned int *)(v16 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v17, (uint64_t)v20, 111, a2, 1.0);
  }
  kaldi::CuVector<float>::~CuVector(v19);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
}

void sub_1B1DDE7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(void *a1, float a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams((uint64_t)a1 + *(void *)(*a1 - 232), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 0);
  int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  int v12 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v11;
  int v13 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  int v14 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  BOOL v33 = *a4;
  LODWORD(v34) = v12;
  uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v30, v15, 111);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v33, (uint64_t)&v30);
  int v16 = v14 * v13;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v30);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v17 = v16 + v12;
  uint64_t v30 = (uint64_t)*a4 + 4 * v12;
  LODWORD(v31) = v16;
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v30, v18);
  if (a1[208])
  {
    int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v19;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v21 = v20 + v17;
    uint64_t v30 = (uint64_t)*a4 + 4 * v17;
    LODWORD(v31) = v20;
    uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v30, v22);
    int v17 = v21;
  }
  int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = (uint64_t)*a4 + 4 * v17;
  LODWORD(v31) = v23;
  uint64_t v24 = (const void **)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v24, (uint64_t)&v30);
  if (a1[224])
  {
    int v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v17;
    int v26 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v26;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v30 = (uint64_t)*a4 + 4 * v25;
    LODWORD(v31) = v27;
    uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v30, v28);
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_1B1DDEAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v44);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v44, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v3);
  if ((v43 & 0x80u) == 0) {
    unint64_t v4 = v42;
  }
  else {
    unint64_t v4 = (void **)v42[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v5 = v43;
  }
  else {
    uint64_t v5 = (uint64_t)v42[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v8);
  if ((v41 & 0x80u) == 0) {
    uint64_t v9 = v40;
  }
  else {
    uint64_t v9 = (void **)v40[0];
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v10 = v41;
  }
  else {
    uint64_t v10 = (uint64_t)v40[1];
  }
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13);
  if ((v39 & 0x80u) == 0) {
    int v14 = v38;
  }
  else {
    int v14 = (void **)v38[0];
  }
  if ((v39 & 0x80u) == 0) {
    uint64_t v15 = v39;
  }
  else {
    uint64_t v15 = (uint64_t)v38[1];
  }
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  uint64_t v19 = *(int *)(a1 + 176);
  uint64_t v34 = 0;
  uint64_t v20 = *(void *)(v18 + 8) + 4 * v19;
  uint64_t v32 = &unk_1F0A472D0;
  uint64_t v33 = v20;
  LODWORD(v34) = v19;
  uint64_t v35 = *(void *)(v18 + 24);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)&v32);
  if ((v37 & 0x80u) == 0) {
    int v21 = __p;
  }
  else {
    int v21 = (void **)__p[0];
  }
  if ((v37 & 0x80u) == 0) {
    uint64_t v22 = v37;
  }
  else {
    uint64_t v22 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v21, v22);
  if ((char)v37 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v39 < 0) {
    operator delete(v38[0]);
  }
  if ((char)v41 < 0) {
    operator delete(v40[0]);
  }
  if ((char)v43 < 0) {
    operator delete(v42[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v24);
    int v25 = v34 >= 0 ? &v32 : (void **)v32;
    uint64_t v26 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Projection weights:", 21);
    uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v28);
    BOOL v29 = v34 >= 0 ? &v32 : (void **)v32;
    uint64_t v30 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
  }
  std::stringbuf::str();
  v44[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v44 + *(void *)(v44[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v44[1] = MEMORY[0x1E4FBA470] + 16;
  if (v45 < 0) {
    operator delete((void *)v44[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v46);
}

void sub_1B1DDF298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v101, 0, sizeof(v101));
    int v100 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v88, "\n For batch ");
        kaldi::quasar::to_string<int>();
        if ((v87 & 0x80u) == 0) {
          uint64_t v3 = v86;
        }
        else {
          uint64_t v3 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v4 = v87;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v86[1];
        }
        uint64_t v5 = std::string::append(&v88, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, ": ");
        if ((v85 & 0x80u) == 0) {
          uint64_t v7 = v84;
        }
        else {
          uint64_t v7 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v8 = v85;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v84[1];
        }
        uint64_t v9 = std::string::append(&v89, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Number of cells : ");
        if ((v83 & 0x80u) == 0) {
          int v11 = v82;
        }
        else {
          int v11 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v12 = v83;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v82[1];
        }
        uint64_t v13 = std::string::append(&v90, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::quasar::to_string<int>();
        if ((v81 & 0x80u) == 0) {
          uint64_t v15 = v80;
        }
        else {
          uint64_t v15 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v16 = v81;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v80[1];
        }
        int v17 = std::string::append(&v91, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Input weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          uint64_t v19 = v78;
        }
        else {
          uint64_t v19 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v20 = v79;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v78[1];
        }
        int v21 = std::string::append(&v92, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v77 & 0x80u) == 0) {
          uint64_t v24 = v76;
        }
        else {
          uint64_t v24 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v25 = v77;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v76[1];
        }
        uint64_t v26 = std::string::append(&v93, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Recurrent weights gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v28 = v74;
        }
        else {
          uint64_t v28 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v29 = v75;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v74[1];
        }
        uint64_t v30 = std::string::append(&v94, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v73 & 0x80u) == 0) {
          uint64_t v33 = v72;
        }
        else {
          uint64_t v33 = (void **)v72[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v34 = v73;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v72[1];
        }
        uint64_t v35 = std::string::append(&v95, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v70, "\n  Bias gradient: ");
        if ((v71 & 0x80u) == 0) {
          unsigned __int8 v37 = v70;
        }
        else {
          unsigned __int8 v37 = (void **)v70[0];
        }
        if ((v71 & 0x80u) == 0) {
          std::string::size_type v38 = v71;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v70[1];
        }
        unsigned __int8 v39 = std::string::append(&v96, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v41);
        if ((v69 & 0x80u) == 0) {
          uint64_t v42 = __p;
        }
        else {
          uint64_t v42 = (void **)__p[0];
        }
        if ((v69 & 0x80u) == 0) {
          std::string::size_type v43 = v69;
        }
        else {
          std::string::size_type v43 = (std::string::size_type)__p[1];
        }
        uint64_t v44 = std::string::append(&v97, (const std::string::value_type *)v42, v43);
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        int64_t v99 = v44->__r_.__value_.__r.__words[2];
        long long v98 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (v99 >= 0) {
          uint64_t v46 = (const std::string::value_type *)&v98;
        }
        else {
          uint64_t v46 = (const std::string::value_type *)v98;
        }
        if (v99 >= 0) {
          std::string::size_type v47 = HIBYTE(v99);
        }
        else {
          std::string::size_type v47 = *((void *)&v98 + 1);
        }
        std::string::append(&v101, v46, v47);
        if (SHIBYTE(v99) < 0) {
          operator delete((void *)v98);
        }
        if ((char)v69 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v71 < 0) {
          operator delete(v70[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v73 < 0) {
          operator delete(v72[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Peephole weights gradient: ");
          uint64_t v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v48);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v49 = &v96;
          }
          else {
            long long v49 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v96.__r_.__value_.__l.__size_;
          }
          long long v51 = std::string::append(&v97, (const std::string::value_type *)v49, size);
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          int64_t v99 = v51->__r_.__value_.__r.__words[2];
          long long v98 = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0) {
            long long v53 = (const std::string::value_type *)&v98;
          }
          else {
            long long v53 = (const std::string::value_type *)v98;
          }
          if (v99 >= 0) {
            std::string::size_type v54 = HIBYTE(v99);
          }
          else {
            std::string::size_type v54 = *((void *)&v98 + 1);
          }
          std::string::append(&v101, v53, v54);
          if (SHIBYTE(v99) < 0) {
            operator delete((void *)v98);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Projection weights gradient: ");
          uint64_t v55 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v55);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v56 = &v96;
          }
          else {
            long long v56 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v57 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v57 = v96.__r_.__value_.__l.__size_;
          }
          long long v58 = std::string::append(&v97, (const std::string::value_type *)v56, v57);
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          int64_t v99 = v58->__r_.__value_.__r.__words[2];
          long long v98 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0) {
            long long v60 = (const std::string::value_type *)&v98;
          }
          else {
            long long v60 = (const std::string::value_type *)v98;
          }
          if (v99 >= 0) {
            std::string::size_type v61 = HIBYTE(v99);
          }
          else {
            std::string::size_type v61 = *((void *)&v98 + 1);
          }
          std::string::append(&v101, v60, v61);
          if (SHIBYTE(v99) < 0) {
            operator delete((void *)v98);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
        }
        ++v100;
      }
      while (v100 < *(_DWORD *)(a1 + 80));
    }
    std::string v62 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v98, "\n");
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v63 = &v101;
    }
    else {
      int v63 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v64 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v64 = v101.__r_.__value_.__l.__size_;
    }
    int v65 = std::string::insert(v62, 0, (const std::string::value_type *)v63, v64);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v99) < 0) {
      operator delete((void *)v98);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1B1DDFA8C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        int v11 = v70;
      }
      else {
        int v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      uint64_t v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      int v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      int v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      unsigned __int8 v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        unsigned __int8 v39 = __p;
      }
      else {
        unsigned __int8 v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      uint64_t v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        std::string::size_type v43 = (const std::string::value_type *)&v86;
      }
      else {
        std::string::size_type v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v45 = &v84;
        }
        else {
          long long v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          long long v49 = (const std::string::value_type *)&v86;
        }
        else {
          long long v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  long long v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v52 = &v89;
  }
  else {
    long long v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  std::string::size_type v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_1B1DE036C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B1DE0578()
{
}

void sub_1B1DE0580()
{
}

void sub_1B1DE0588()
{
}

void sub_1B1DE0590()
{
}

void sub_1B1DE0598()
{
}

void sub_1B1DE05A0()
{
}

void sub_1B1DE05A8()
{
}

void sub_1B1DE05B0()
{
}

void sub_1B1DE05B8()
{
}

void sub_1B1DE05C0()
{
}

void sub_1B1DE05C8()
{
}

void sub_1B1DE05D0()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        int v11 = v58;
      }
      else {
        int v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      uint64_t v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      int v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      int v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v37 = &v70;
        }
        else {
          unsigned __int8 v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        unsigned __int8 v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          uint64_t v41 = (const std::string::value_type *)&v72;
        }
        else {
          uint64_t v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  uint64_t v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_1B1DE0B5C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B1DE0D28()
{
}

void sub_1B1DE0D30()
{
}

void sub_1B1DE0D38()
{
}

void sub_1B1DE0D40()
{
}

void sub_1B1DE0D48()
{
}

void sub_1B1DE0D50()
{
}

void sub_1B1DE0D58()
{
}

void sub_1B1DE0D60()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  uint64_t v9 = *(unsigned int *)(a1 + 96);
  uint64_t v127 = ((int)v8 / (int)v9);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v158, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v158, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    long long v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v158);
  }
  uint64_t v13 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(v7, a4, v8, v13);
  uint64_t v14 = *(void *)(v7 + 104);
  if (*(void *)(v7 + 112) == v14 || *(int *)(v14 + 32 * a4 + 16) < 1)
  {
    int v122 = 0;
  }
  else
  {
    uint64_t v15 = (int32x2_t *)(*(void *)(v7 + 128) + 48 * a4);
    int v15[4] = (int32x2_t)v13;
    int v122 = 1;
    kaldi::CuMatrix<float>::Resize(v15, v9, *(unsigned int *)(*(void *)(v7 + 8) + 48 * a4 + 16), 1, 0);
  }
  uint64_t v16 = *(void *)(v7 + 248) + 48 * a4;
  uint64_t v128 = *(void *)(v7 + 344) + 48 * a4;
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(v7);
  kaldi::CuMatrixBase<float>::AddMatMat(v16, a2, CblasNoTrans, v17, CblasTrans, 1.0, 0.0);
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(v7);
  kaldi::CuMatrixBase<float>::AddVecToRows(v16, v18, 1.0, 1.0);
  if ((int)v127 >= 1)
  {
    unsigned int v19 = 0;
    uint64_t v20 = 0;
    uint64_t v123 = v7 + 12;
    uint64_t v126 = (int)v9;
    uint64_t v21 = -(uint64_t)(int)v9;
    int v121 = -(int)v9;
    uint64_t v124 = v7;
    int v125 = v9;
    do
    {
      uint64_t v129 = v21;
      unsigned int v22 = *(_DWORD *)(v16 + 24);
      uint64_t v23 = *(void *)(v16 + 8) + 4 * (int)(v22 * v19);
      int v24 = *(_DWORD *)(v16 + 28) - v22 * v19;
      uint64_t v25 = *(void *)(v16 + 32);
      DWORD2(v159) = *(_DWORD *)(v7 + 176);
      HIDWORD(v159) = v9;
      *(void *)&long long v160 = __PAIR64__(v24, v22);
      *((void *)&v160 + 1) = v25;
      *(void *)&long long v159 = v23;
      uint64_t v158 = &unk_1F0A472A0;
      unsigned int v26 = *(_DWORD *)(v16 + 24);
      uint64_t v27 = *(void *)(v16 + 8) + 4 * (int)(v26 * v19) + 4 * DWORD2(v159);
      int v28 = *(_DWORD *)(v16 + 28) - DWORD2(v159) - v26 * v19;
      uint64_t v29 = *(void *)(v16 + 32);
      *((void *)&v156 + 1) = __PAIR64__(v9, DWORD2(v159));
      *(void *)&long long v157 = __PAIR64__(v28, v26);
      *((void *)&v157 + 1) = v29;
      *(void *)&long long v156 = v27;
      long long v155 = &unk_1F0A472A0;
      unsigned int v30 = *(_DWORD *)(v16 + 24);
      uint64_t v31 = *(void *)(v16 + 8) + 4 * (int)(v30 * v19) + 4 * (3 * DWORD2(v159));
      LODWORD(v27) = *(_DWORD *)(v16 + 28) - v30 * v19 - 3 * DWORD2(v159);
      uint64_t v32 = *(void *)(v16 + 32);
      *((void *)&v153 + 1) = __PAIR64__(v9, DWORD2(v159));
      *(void *)&long long v154 = __PAIR64__(v27, v30);
      *((void *)&v154 + 1) = v32;
      *(void *)&long long v153 = v31;
      unint64_t v152 = &unk_1F0A472A0;
      uint64_t v33 = *(void *)(v7 + 272) + 48 * a4;
      LODWORD(v31) = *(_DWORD *)(v33 + 16);
      LODWORD(v32) = *(_DWORD *)(v33 + 24);
      uint64_t v34 = *(void *)(v33 + 8) + 4 * (int)(v32 * v19);
      unsigned int v35 = *(_DWORD *)(v33 + 28) - v32 * v19;
      uint64_t v36 = *(void *)(v33 + 32);
      *((void *)&v150 + 1) = __PAIR64__(v9, v31);
      *(void *)&long long v151 = __PAIR64__(v35, v32);
      *((void *)&v151 + 1) = v36;
      uint64_t v149 = &unk_1F0A472A0;
      *(void *)&long long v150 = v34;
      long long v147 = 0u;
      long long v148 = 0u;
      std::string::size_type v146 = &unk_1F0A472A0;
      long long v144 = 0u;
      long long v145 = 0u;
      std::string v143 = &unk_1F0A472A0;
      uint64_t v130 = v20;
      if (v20)
      {
        if (v122)
        {
          int v37 = a4;
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(v7 + 128) + 48 * a4);
          uint64_t v38 = *(void *)(v7 + 128) + 48 * a4;
          uint64_t v39 = *(void *)(v38 + 8);
          unsigned int v40 = *(_DWORD *)(v38 + 20);
          unsigned int v41 = *(_DWORD *)(v38 + 24);
          unsigned int v42 = *(_DWORD *)(v38 + 28);
          uint64_t v43 = *(void *)(v38 + 32);
          DWORD2(v141) = *(_DWORD *)(v7 + 176);
          *(void *)&long long v144 = v39;
          *((void *)&v144 + 1) = __PAIR64__(v40, DWORD2(v141));
          *(void *)&long long v145 = __PAIR64__(v42, v41);
          *((void *)&v145 + 1) = v43;
          int v140 = &unk_1F0A472A0;
          long long v141 = 0u;
          long long v142 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
          uint64_t v44 = *(void *)(v7 + 272) + 48 * a4;
          unsigned int v45 = *(_DWORD *)(v44 + 16);
          unsigned int v46 = *(_DWORD *)(v44 + 24);
          uint64_t v47 = *(void *)(v44 + 8) + 4 * (int)(v46 * (v121 + v19));
          int v48 = *(_DWORD *)(v44 + 28) - v46 * (v121 + v19);
          uint64_t v49 = *(void *)(v44 + 32);
          *((void *)&v141 + 1) = __PAIR64__(v9, v45);
          *(void *)&long long v142 = __PAIR64__(v48, v46);
          *((void *)&v142 + 1) = v49;
          int v140 = &unk_1F0A472A0;
          *(void *)&long long v141 = v47;
          uint64_t v50 = *(void *)(v7 + 104) + 32 * a4;
          *((void *)&v138 + 1) = 0;
          unint64_t v137 = &unk_1F0A472D0;
          *(void *)&long long v138 = *(void *)(v50 + 8) + 4 * v19;
          DWORD2(v138) = v9;
          *(void *)&long long v139 = *(void *)(v50 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v143, (uint64_t)&v140, (uint64_t)&v137, 1);
          int v140 = &unk_1F0A472A0;
          long long v141 = 0u;
          long long v142 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
          uint64_t v51 = *(void *)(v7 + 128) + 48 * a4;
          uint64_t v52 = *(int *)(v7 + 176);
          unsigned int v53 = *(_DWORD *)(v51 + 20);
          unsigned int v54 = *(_DWORD *)(v51 + 24);
          uint64_t v55 = *(void *)(v51 + 8) + 4 * v52;
          LODWORD(v--*(_DWORD *)(a9 + 52) = *(_DWORD *)(v51 + 28) - v52;
          uint64_t v56 = *(void *)(v51 + 32);
          DWORD2(v141) = *(_DWORD *)(v123 + *(void *)(*(void *)v7 - 24));
          *(void *)&long long v147 = v55;
          *((void *)&v147 + 1) = __PAIR64__(v53, DWORD2(v141));
          *(void *)&long long v148 = __PAIR64__(v52, v54);
          *((void *)&v148 + 1) = v56;
          int v140 = &unk_1F0A472A0;
          long long v141 = 0u;
          long long v142 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
          unsigned int v57 = *(_DWORD *)(v128 + 24);
          uint64_t v58 = *(void *)(v128 + 8) + 4 * (int)(v57 * (v121 + v19));
          int v59 = *(_DWORD *)(v128 + 28) - v57 * (v121 + v19);
          uint64_t v60 = *(void *)(v128 + 32);
          DWORD2(v141) = *(_DWORD *)(v128 + 16);
          HIDWORD(v141) = v9;
          *(void *)&long long v142 = __PAIR64__(v59, v57);
          *((void *)&v142 + 1) = v60;
          int v140 = &unk_1F0A472A0;
          *(void *)&long long v141 = v58;
          uint64_t v61 = *(void *)(v7 + 104) + 32 * a4;
          *((void *)&v138 + 1) = 0;
          unint64_t v137 = &unk_1F0A472D0;
          *(void *)&long long v138 = *(void *)(v61 + 8) + 4 * v19;
          DWORD2(v138) = v9;
          *(void *)&long long v139 = *(void *)(v61 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v146, (uint64_t)&v140, (uint64_t)&v137, 1);
        }
        else
        {
          unsigned int v74 = *(_DWORD *)(v128 + 16);
          unsigned int v75 = *(_DWORD *)(v128 + 24);
          int v76 = *(_DWORD *)(v128 + 28) - v75 * (v121 + v19);
          uint64_t v77 = *(void *)(v128 + 32);
          *(void *)&long long v147 = *(void *)(v128 + 8) + 4 * (int)(v75 * (v121 + v19));
          *((void *)&v147 + 1) = __PAIR64__(v9, v74);
          *(void *)&long long v148 = __PAIR64__(v76, v75);
          *((void *)&v148 + 1) = v77;
          int v140 = &unk_1F0A472A0;
          long long v141 = 0uLL;
          long long v142 = 0uLL;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
          int v37 = a4;
          uint64_t v78 = *(void *)(v7 + 272) + 48 * a4;
          unsigned int v79 = *(_DWORD *)(v78 + 16);
          unsigned int v80 = *(_DWORD *)(v78 + 24);
          uint64_t v81 = *(void *)(v78 + 8) + 4 * (int)(v80 * (v121 + v19));
          int v82 = *(_DWORD *)(v78 + 28) - v80 * (v121 + v19);
          uint64_t v83 = *(void *)(v78 + 32);
          *(void *)&long long v144 = v81;
          *((void *)&v144 + 1) = __PAIR64__(v9, v79);
          *(void *)&long long v145 = __PAIR64__(v82, v80);
          *((void *)&v145 + 1) = v83;
        }
        int v140 = &unk_1F0A472A0;
        long long v141 = 0u;
        long long v142 = 0u;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
      }
      else
      {
        uint64_t v62 = *(void *)(v7 + 8) + 48 * a4;
        unsigned int v63 = *(_DWORD *)(v62 + 20);
        unsigned int v64 = *(_DWORD *)(v62 + 24);
        uint64_t v65 = *(void *)(v62 + 8) + 4 * DWORD2(v159);
        int v66 = *(_DWORD *)(v62 + 28) - DWORD2(v159);
        uint64_t v67 = *(void *)(v62 + 32);
        DWORD2(v141) = *(_DWORD *)(v123 + *(void *)(*(void *)v7 - 24));
        *(void *)&long long v147 = v65;
        *((void *)&v147 + 1) = __PAIR64__(v63, DWORD2(v141));
        *(void *)&long long v148 = __PAIR64__(v66, v64);
        *((void *)&v148 + 1) = v67;
        int v140 = &unk_1F0A472A0;
        long long v141 = 0uLL;
        long long v142 = 0uLL;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
        uint64_t v68 = *(void *)(v7 + 8) + 48 * a4;
        uint64_t v69 = *(void *)(v68 + 8);
        unsigned int v70 = *(_DWORD *)(v68 + 20);
        unsigned int v71 = *(_DWORD *)(v68 + 24);
        unsigned int v72 = *(_DWORD *)(v68 + 28);
        uint64_t v73 = *(void *)(v68 + 32);
        DWORD2(v141) = *(_DWORD *)(v7 + 176);
        *(void *)&long long v144 = v69;
        *((void *)&v144 + 1) = __PAIR64__(v70, DWORD2(v141));
        *(void *)&long long v145 = __PAIR64__(v72, v71);
        *((void *)&v145 + 1) = v73;
        int v140 = &unk_1F0A472A0;
        long long v141 = 0u;
        long long v142 = 0u;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
        int v37 = a4;
      }
      unsigned int v84 = *(_DWORD *)(v16 + 24);
      uint64_t v85 = *(void *)(v16 + 8) + 4 * (int)(v84 * v19);
      int v86 = *(_DWORD *)(v16 + 28) - v84 * v19;
      uint64_t v87 = *(void *)(v16 + 32);
      DWORD2(v141) = *(_DWORD *)(v16 + 16);
      HIDWORD(v141) = v9;
      *(void *)&long long v142 = __PAIR64__(v86, v84);
      *((void *)&v142 + 1) = v87;
      int v140 = &unk_1F0A472A0;
      *(void *)&long long v141 = v85;
      uint64_t v88 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(v7);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v140, (uint64_t)&v146, CblasNoTrans, v88, CblasTrans, 1.0, 1.0);
      int v140 = &unk_1F0A472A0;
      long long v141 = 0u;
      long long v142 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
      if (*(unsigned char *)(v7 + 208))
      {
        uint64_t v89 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(v7);
        unsigned int v90 = *(_DWORD *)(v89 + 16);
        uint64_t v91 = *(void *)(v89 + 32);
        *(void *)&long long v141 = *(void *)(v89 + 8);
        int v140 = &unk_1F0A472D0;
        *((void *)&v141 + 1) = v90;
        *(void *)&long long v142 = v91;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v158, (uint64_t)&v143, 111, (uint64_t)&v140, 1.0, 1.0);
        uint64_t v92 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(v7);
        unsigned int v93 = *(_DWORD *)(v92 + 16);
        uint64_t v94 = *(void *)(v92 + 32);
        *(void *)&long long v141 = *(void *)(v92 + 8) + 4 * *(int *)(v92 + 24);
        int v140 = &unk_1F0A472D0;
        *((void *)&v141 + 1) = v93;
        *(void *)&long long v142 = v94;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v155, (uint64_t)&v143, 111, (uint64_t)&v140, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v158, (uint64_t)&v158);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v155, (uint64_t)&v155);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v152);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v149, (uint64_t)&v158, 111, (uint64_t)&v152, 111, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v149, (uint64_t)&v155, 111, (uint64_t)&v143, 111, 1.0, 1.0);
      float v95 = *(float *)(v7 + 476);
      if (v95 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v149, v95);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v149, -*(float *)(v7 + 476));
      }
      uint64_t v96 = *(int *)(v7 + 176);
      unsigned int v97 = *(_DWORD *)(v16 + 24);
      uint64_t v98 = *(void *)(v16 + 8) + 4 * (int)(v97 * v19) + 8 * v96;
      unsigned int v99 = *(_DWORD *)(v16 + 28) - (v97 * v19 + 2 * v96);
      uint64_t v100 = *(void *)(v16 + 32);
      DWORD2(v141) = *(_DWORD *)(v7 + 176);
      HIDWORD(v141) = v9;
      *(void *)&long long v142 = __PAIR64__(v99, v97);
      *((void *)&v142 + 1) = v100;
      int v140 = &unk_1F0A472A0;
      *(void *)&long long v141 = v98;
      if (*(unsigned char *)(v7 + 208))
      {
        uint64_t v101 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(v7);
        unsigned int v102 = *(_DWORD *)(v101 + 16);
        uint64_t v103 = *(void *)(v101 + 32);
        *(void *)&long long v138 = *(void *)(v101 + 8) + 8 * *(int *)(v101 + 24);
        unint64_t v137 = &unk_1F0A472D0;
        *((void *)&v138 + 1) = v102;
        *(void *)&long long v139 = v103;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v140, (uint64_t)&v149, 111, (uint64_t)&v137, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v140, (uint64_t)&v140);
      uint64_t v104 = *(void *)(v7 + 296) + 48 * v37;
      unsigned int v105 = *(_DWORD *)(v104 + 16);
      unsigned int v106 = *(_DWORD *)(v104 + 24);
      uint64_t v107 = *(void *)(v104 + 8) + 4 * (int)(v106 * v19);
      int v108 = *(_DWORD *)(v104 + 28) - v106 * v19;
      uint64_t v109 = *(void *)(v104 + 32);
      *((void *)&v138 + 1) = __PAIR64__(v9, v105);
      *(void *)&long long v139 = __PAIR64__(v108, v106);
      *((void *)&v139 + 1) = v109;
      unint64_t v137 = &unk_1F0A472A0;
      *(void *)&long long v138 = v107;
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v137, (uint64_t)&v149);
      uint64_t v110 = *(void *)(v7 + 320) + 48 * v37;
      unsigned int v111 = *(_DWORD *)(v110 + 16);
      unsigned int v112 = *(_DWORD *)(v110 + 24);
      uint64_t v113 = *(void *)(v110 + 8) + 4 * (int)(v112 * v19);
      int v114 = *(_DWORD *)(v110 + 28) - v112 * v19;
      uint64_t v115 = *(void *)(v110 + 32);
      *((void *)&v135 + 1) = __PAIR64__(v9, v111);
      *(void *)&long long v136 = __PAIR64__(v114, v112);
      *((void *)&v136 + 1) = v115;
      uint64_t v134 = &unk_1F0A472A0;
      *(void *)&long long v135 = v113;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v134, (uint64_t)&v140, 111, (uint64_t)&v137, 111, 1.0, 0.0);
      unsigned int v116 = *(_DWORD *)(v128 + 24);
      uint64_t v117 = *(void *)(v128 + 8) + 4 * (int)(v116 * v19);
      int v118 = *(_DWORD *)(v128 + 28) - v116 * v19;
      uint64_t v119 = *(void *)(v128 + 32);
      if (*(unsigned char *)(v7 + 224))
      {
        DWORD2(v132) = *(_DWORD *)(v128 + 16);
        HIDWORD(v132) = v9;
        *(void *)&long long v133 = __PAIR64__(v118, v116);
        *((void *)&v133 + 1) = v119;
        unint64_t v131 = &unk_1F0A472A0;
        *(void *)&long long v132 = v117;
        uint64_t v120 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(v7);
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v131, (uint64_t)&v134, CblasNoTrans, v120, CblasTrans, 1.0, 0.0);
      }
      else
      {
        DWORD2(v132) = *(_DWORD *)(v128 + 16);
        HIDWORD(v132) = v9;
        *(void *)&long long v133 = __PAIR64__(v118, v116);
        *((void *)&v133 + 1) = v119;
        unint64_t v131 = &unk_1F0A472A0;
        *(void *)&long long v132 = v117;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v131, (uint64_t)&v134, 111);
      }
      unint64_t v131 = &unk_1F0A472A0;
      long long v132 = 0u;
      long long v133 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v131);
      uint64_t v134 = &unk_1F0A472A0;
      long long v135 = 0u;
      long long v136 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v134);
      unint64_t v137 = &unk_1F0A472A0;
      long long v138 = 0u;
      long long v139 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v137);
      int v140 = &unk_1F0A472A0;
      long long v141 = 0u;
      long long v142 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
      std::string v143 = &unk_1F0A472A0;
      long long v144 = 0u;
      long long v145 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      std::string::size_type v146 = &unk_1F0A472A0;
      long long v147 = 0u;
      long long v148 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
      uint64_t v149 = &unk_1F0A472A0;
      long long v150 = 0u;
      long long v151 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
      unint64_t v152 = &unk_1F0A472A0;
      long long v153 = 0u;
      long long v154 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
      long long v155 = &unk_1F0A472A0;
      long long v156 = 0u;
      long long v157 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
      uint64_t v158 = &unk_1F0A472A0;
      long long v159 = 0u;
      long long v160 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
      uint64_t v20 = v130 + 1;
      LODWORD(v9) = v125;
      v19 += v125;
      uint64_t v21 = v129 + v126;
      uint64_t v7 = v124;
    }
    while (v127 != v130 + 1);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, v128, 111);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(v7, a4);
}

void sub_1B1DE1C78(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 248) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 272) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 296) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 320) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 344) + 48 * a2), a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1B1DE1FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v26, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v26);
  }
  uint64_t v4 = *(void *)(a1 + 272) + 48 * a2;
  unsigned int v5 = *(_DWORD *)(a1 + 96);
  unsigned int v6 = *(_DWORD *)(v4 + 20) - v5;
  uint64_t v7 = *(void *)(a1 + 8) + 48 * a2;
  int v8 = *(_DWORD *)(a1 + 176);
  int v9 = *(_DWORD *)(v7 + 28);
  uint64_t v10 = *(void *)(v7 + 32);
  v27[0] = *(void *)(v7 + 8);
  LODWORD(v27[1]) = v8;
  *(void *)((char *)&v27[1] + 4) = *(void *)(v7 + 20);
  HIDWORD(v27[2]) = v9;
  v27[3] = v10;
  unsigned int v26 = &unk_1F0A472A0;
  LODWORD(v7) = *(_DWORD *)(v4 + 16);
  unsigned int v11 = *(_DWORD *)(v4 + 24);
  uint64_t v12 = *(void *)(v4 + 8) + 4 * (int)(v11 * v6);
  int v13 = *(_DWORD *)(v4 + 28) - v11 * v6;
  uint64_t v14 = *(void *)(v4 + 32);
  *((void *)&v24 + 1) = __PAIR64__(v5, v7);
  *(void *)&long long v25 = __PAIR64__(v13, v11);
  *((void *)&v25 + 1) = v14;
  uint64_t v23 = &unk_1F0A472A0;
  *(void *)&long long v24 = v12;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v26, (uint64_t)&v23, 111);
  uint64_t v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  unsigned int v26 = &unk_1F0A472A0;
  memset(v27, 0, sizeof(v27));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
  uint64_t v15 = *(void *)(a1 + 8) + 48 * a2;
  uint64_t v16 = *(int *)(a1 + 176);
  int v17 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  uint64_t v18 = *(void *)(v15 + 8) + 4 * v16;
  LODWORD(v16) = *(_DWORD *)(v15 + 28) - v16;
  uint64_t v19 = *(void *)(v15 + 32);
  v27[0] = v18;
  LODWORD(v27[1]) = v17;
  *(void *)((char *)&v27[1] + 4) = *(void *)(v15 + 20);
  HIDWORD(v27[2]) = v16;
  v27[3] = v19;
  unsigned int v26 = &unk_1F0A472A0;
  uint64_t v20 = *(void *)(a1 + 344) + 48 * a2;
  LODWORD(v16) = *(_DWORD *)(v20 + 16);
  LODWORD(v18) = *(_DWORD *)(v20 + 24);
  uint64_t v21 = *(void *)(v20 + 8) + 4 * (int)(v18 * v6);
  LODWORD(v19) = *(_DWORD *)(v20 + 28) - v18 * v6;
  uint64_t v22 = *(void *)(v20 + 32);
  *((void *)&v24 + 1) = __PAIR64__(*(_DWORD *)(a1 + 96), v16);
  *(void *)&long long v25 = __PAIR64__(v19, v18);
  *((void *)&v25 + 1) = v22;
  uint64_t v23 = &unk_1F0A472A0;
  *(void *)&long long v24 = v21;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v26, (uint64_t)&v23, 111);
  uint64_t v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  unsigned int v26 = &unk_1F0A472A0;
  memset(v27, 0, sizeof(v27));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
}

void sub_1B1DE2254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, void *a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v6 = a3[3];
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, 0, 1, v6);
  uint64_t v7 = *(void *)(a1 + 104);
  if (*(void *)(a1 + 112) != v7 && *(int *)(v7 + 16) >= 1)
  {
    int v8 = *(int32x2_t **)(a1 + 128);
    v8[4] = (int32x2_t)v6;
    kaldi::CuMatrix<float>::Resize(v8, 1, *(unsigned int *)(*(void *)(a1 + 8) + 16), 1, 0);
  }
  uint64_t v9 = *(void *)(a1 + 248);
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v67 = 0;
  uint64_t v10 = *(void *)(v9 + 8);
  int v66 = &unk_1F0A472D0;
  uint64_t v67 = v10;
  LODWORD(v68) = *(_DWORD *)(v9 + 16);
  uint64_t v69 = *(void *)(v9 + 32);
  uint64_t v11 = *(void *)(a1 + 344);
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v62 = &unk_1F0A472D0;
  uint64_t v63 = v12;
  LODWORD(v64) = *(_DWORD *)(v11 + 16);
  uint64_t v65 = *(void *)(v11 + 32);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v66, v13, CblasNoTrans, a2, 1.0, 0.0);
  uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v66, v14, 1.0, 1.0);
  uint64_t v15 = *(int *)(a1 + 176);
  void v60[3] = v69;
  v61[0] = &unk_1F0A472D0;
  v61[1] = v67;
  v61[2] = v15;
  v61[3] = v69;
  v60[0] = &unk_1F0A472D0;
  v60[1] = v67 + 4 * v15;
  v60[2] = v15;
  uint64_t v58 = 0;
  v59[0] = &unk_1F0A472D0;
  v59[1] = v67 + 12 * v15;
  v59[2] = v15;
  v59[3] = v69;
  uint64_t v16 = *(void *)(a1 + 272);
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v17 = *(void *)(v16 + 8);
  uint64_t v55 = &unk_1F0A472D0;
  uint64_t v56 = v17;
  LODWORD(v57) = *(_DWORD *)(v16 + 16);
  uint64_t v58 = *(void *)(v16 + 32);
  uint64_t v18 = *(void *)(a1 + 8);
  unsigned int v19 = *(_DWORD *)(v18 + 16);
  uint64_t v20 = *(void *)(v18 + 32);
  uint64_t v51 = *(void *)(v18 + 8);
  uint64_t v50 = &unk_1F0A472D0;
  uint64_t v52 = v19;
  uint64_t v53 = v20;
  unsigned int v21 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  v54[0] = &unk_1F0A472D0;
  v54[1] = v51 + 4 * v15;
  v54[2] = v21;
  v54[3] = v20;
  uint64_t v51 = *(void *)(v18 + 8);
  uint64_t v50 = &unk_1F0A472D0;
  uint64_t v52 = v15;
  uint64_t v53 = v20;
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v66, v22, CblasNoTrans, (uint64_t)v54, 1.0, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    unsigned int v24 = *(_DWORD *)(v23 + 16);
    uint64_t v25 = *(void *)(v23 + 32);
    uint64_t v47 = *(void *)(v23 + 8);
    unsigned int v46 = &unk_1F0A472D0;
    uint64_t v48 = v24;
    uint64_t v49 = v25;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v61, (uint64_t)&v50, (uint64_t)&v46, 1.0, 1.0);
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    unsigned int v27 = *(_DWORD *)(v26 + 16);
    uint64_t v28 = *(void *)(v26 + 32);
    uint64_t v47 = *(void *)(v26 + 8) + 4 * *(int *)(v26 + 24);
    unsigned int v46 = &unk_1F0A472D0;
    uint64_t v48 = v27;
    uint64_t v49 = v28;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v60, (uint64_t)&v50, (uint64_t)&v46, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v61, (uint64_t)v61);
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)v60, (uint64_t)v60);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)v59);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v55, (uint64_t)v61, (uint64_t)v59, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v55, (uint64_t)&v50, (uint64_t)v60, 1.0, 1.0);
  float v29 = *(float *)(a1 + 476);
  if (v29 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)&v55, v29);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v55, -*(float *)(a1 + 476));
  }
  uint64_t v30 = *(int *)(a1 + 176);
  unsigned int v46 = &unk_1F0A472D0;
  uint64_t v47 = v67 + 8 * v30;
  uint64_t v48 = v30;
  uint64_t v49 = v69;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    unsigned int v32 = *(_DWORD *)(v31 + 16);
    uint64_t v33 = *(void *)(v31 + 32);
    uint64_t v43 = *(void *)(v31 + 8) + 8 * *(int *)(v31 + 24);
    unsigned int v42 = &unk_1F0A472D0;
    uint64_t v44 = v32;
    uint64_t v45 = v33;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v46, (uint64_t)&v55, (uint64_t)&v42, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v46, (uint64_t)&v46);
  uint64_t v34 = *(void *)(a1 + 296);
  uint64_t v44 = 0;
  uint64_t v35 = *(void *)(v34 + 8);
  unsigned int v42 = &unk_1F0A472D0;
  uint64_t v43 = v35;
  LODWORD(v44) = *(_DWORD *)(v34 + 16);
  uint64_t v45 = *(void *)(v34 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v42, (uint64_t)&v55);
  uint64_t v36 = *(void *)(a1 + 320);
  uint64_t v40 = 0;
  uint64_t v37 = *(void *)(v36 + 8);
  v39[0] = &unk_1F0A472D0;
  v39[1] = v37;
  LODWORD(v40) = *(_DWORD *)(v36 + 16);
  uint64_t v41 = *(void *)(v36 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v39, (uint64_t)&v46, (uint64_t)&v42, 1.0, 0.0);
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v38 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v62, v38, CblasNoTrans, (uint64_t)v39, 1.0, 0.0);
  }
  else
  {
    kaldi::CuVectorBase<float>::CopyFromVec(&v62, (uint64_t)v39);
  }
  kaldi::CuVectorBase<float>::CopyFromVec(a3, (uint64_t)&v62);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, 0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(void *a1, uint64_t a2, void *a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc();
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8 = a1;
  uint64_t v9 = *(unsigned int *)(a2 + 20);
  uint64_t v10 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v158, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v158);
  }
  uint64_t v124 = ((int)v9 / (int)v10);
  uint64_t v14 = a5;
  if (!a5) {
    uint64_t v14 = a4;
  }
  uint64_t v15 = *(void *)(v14 + 32);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(v8, a6, v9, v15);
  uint64_t v16 = a6;
  uint64_t v17 = 3 * a6;
  uint64_t v18 = *(void *)(v8 + 248) + 48 * a6;
  uint64_t v120 = *(void *)(v8 + 440) + 16 * v17;
  uint64_t v119 = (int *)(*(void *)(v8 + 368) + 16 * v17);
  uint64_t v125 = *(void *)(v8 + 416);
  uint64_t v19 = *(void *)(v8 + 104);
  uint64_t v123 = v16;
  if (*(void *)(v8 + 112) == v19 || *(int *)(v19 + 32 * v16 + 16) < 1)
  {
    int v122 = 0;
    uint64_t v21 = *(void *)(v8 + 440) + 16 * v17;
  }
  else
  {
    uint64_t v20 = (int32x2_t *)(*(void *)(v8 + 128) + 48 * (int)v16);
    int v20[4] = (int32x2_t)v15;
    uint64_t v21 = v120;
    int v122 = 1;
    kaldi::CuMatrix<float>::Resize(v20, v10, *(unsigned int *)(v120 + 16), 1, 0);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v119, a4, 111);
  uint64_t v22 = *(int *)(v8 + 176);
  int v23 = *(_DWORD *)(v18 + 28);
  uint64_t v24 = *(void *)(v18 + 32);
  v158[1] = *(void *)(v18 + 8);
  LODWORD(v158[2]) = v22;
  *(void *)((char *)&v158[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v158[3]) = v23;
  v158[4] = v24;
  v158[0] = &unk_1F0A472A0;
  int v25 = *(_DWORD *)(v18 + 28) - v22;
  uint64_t v26 = *(void *)(v18 + 32);
  v157[1] = *(void *)(v18 + 8) + 4 * v22;
  LODWORD(v157[2]) = v22;
  *(void *)((char *)&v157[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v157[3]) = v25;
  v157[4] = v26;
  v157[0] = &unk_1F0A472A0;
  int v27 = *(_DWORD *)(v18 + 28) - 2 * v22;
  uint64_t v28 = *(void *)(v18 + 32);
  v156[1] = *(void *)(v18 + 8) + 8 * v22;
  LODWORD(v156[2]) = v22;
  *(void *)((char *)&v156[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v156[3]) = v27;
  v156[4] = v28;
  v156[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v18 + 28) - 3 * v22;
  uint64_t v29 = *(void *)(v18 + 32);
  v155[1] = *(void *)(v18 + 8) + 4 * (3 * v22);
  LODWORD(v155[2]) = v22;
  *(void *)((char *)&v155[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v155[3]) = v28;
  v155[4] = v29;
  v155[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28);
  uint64_t v30 = *(void *)(v21 + 32);
  v154[1] = *(void *)(v21 + 8);
  LODWORD(v154[2]) = v22;
  *(void *)((char *)&v154[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v154[3]) = v28;
  v154[4] = v30;
  v154[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28) - v22;
  uint64_t v31 = *(void *)(v21 + 32);
  v153[1] = *(void *)(v21 + 8) + 4 * v22;
  LODWORD(v153[2]) = v22;
  *(void *)((char *)&v153[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v153[3]) = v28;
  v153[4] = v31;
  v153[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28) - 2 * v22;
  uint64_t v32 = *(void *)(v21 + 32);
  v152[1] = *(void *)(v21 + 8) + 8 * v22;
  LODWORD(v152[2]) = v22;
  *(void *)((char *)&v152[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v152[3]) = v28;
  v152[4] = v32;
  v152[0] = &unk_1F0A472A0;
  int v33 = *(_DWORD *)(v21 + 28) - 3 * v22;
  uint64_t v34 = *(void *)(v21 + 32);
  v151[1] = *(void *)(v21 + 8) + 4 * (3 * v22);
  LODWORD(v151[2]) = v22;
  *(void *)((char *)&v151[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v151[3]) = v33;
  v151[4] = v34;
  v151[0] = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v154, (uint64_t)v158, (uint64_t)v155);
  v150[0] = v153[1] + 4 * LODWORD(v153[3]) * (int)v10;
  LODWORD(v150[1]) = v153[2];
  HIDWORD(v150[1]) = v9 - v10;
  LODWORD(v150[2]) = v153[3];
  HIDWORD(v150[2]) = HIDWORD(v153[3]) - LODWORD(v153[3]) * v10;
  v150[3] = v153[4];
  uint64_t v149 = &unk_1F0A472A0;
  *(void *)&long long v147 = v157[1] + 4 * LODWORD(v157[3]) * (int)v10;
  DWORD2(v147) = v157[2];
  HIDWORD(v147) = v9 - v10;
  LODWORD(v148) = v157[3];
  DWORD1(v148) = HIDWORD(v157[3]) - LODWORD(v157[3]) * v10;
  *((void *)&v148 + 1) = v157[4];
  std::string::size_type v146 = &unk_1F0A472A0;
  uint64_t v35 = *(void *)(v8 + 272) + 48 * (int)v123;
  int v36 = *(_DWORD *)(v35 + 16);
  uint64_t v37 = *(void *)(v35 + 32);
  *(void *)&long long v144 = *(void *)(v35 + 8);
  DWORD2(v144) = v36;
  HIDWORD(v144) = v9 - v10;
  *(void *)&long long v145 = *(void *)(v35 + 24);
  *((void *)&v145 + 1) = v37;
  std::string v143 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v149, (uint64_t)&v146, (uint64_t)&v143);
  std::string v143 = &unk_1F0A472A0;
  long long v144 = 0u;
  long long v145 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
  std::string::size_type v146 = &unk_1F0A472A0;
  long long v147 = 0u;
  long long v148 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
  uint64_t v149 = &unk_1F0A472A0;
  memset(v150, 0, sizeof(v150));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
  v150[0] = v153[1];
  v150[1] = __PAIR64__(v10, v153[2]);
  v150[2] = v153[3];
  v150[3] = v153[4];
  uint64_t v149 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v149);
  uint64_t v149 = &unk_1F0A472A0;
  memset(v150, 0, sizeof(v150));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
  if (v122)
  {
    uint64_t v38 = *(void *)(v8 + 128) + 48 * (int)v123;
    int v39 = *(_DWORD *)(v8 + 176);
    int v40 = *(_DWORD *)(v38 + 28);
    uint64_t v41 = *(void *)(v38 + 32);
    v150[0] = *(void *)(v38 + 8);
    LODWORD(v150[1]) = v39;
    *(void *)((char *)&v150[1] + 4) = *(void *)(v38 + 20);
    HIDWORD(v150[2]) = v40;
    v150[3] = v41;
    uint64_t v149 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v149);
    int v42 = 0;
    uint64_t v43 = v124 - 1;
    do
    {
      int v44 = LODWORD(v153[3]) * (v10 + v42);
      *((void *)&v147 + 1) = __PAIR64__(v10, v153[2]);
      LODWORD(v148) = v153[3];
      DWORD1(v148) = HIDWORD(v153[3]) - v44;
      *((void *)&v148 + 1) = v153[4];
      *(void *)&long long v147 = v153[1] + 4 * v44;
      std::string::size_type v146 = &unk_1F0A472A0;
      uint64_t v45 = *(void *)(v8 + 104) + 32 * v123;
      *((void *)&v144 + 1) = 0;
      std::string v143 = &unk_1F0A472D0;
      *(void *)&long long v144 = *(void *)(v45 + 8) + 4 * (v10 + v42);
      DWORD2(v144) = v10;
      *(void *)&long long v145 = *(void *)(v45 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v146, (uint64_t)&v149, (uint64_t)&v143, 0);
      std::string::size_type v146 = &unk_1F0A472A0;
      long long v147 = 0u;
      long long v148 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
      v42 += v10;
      --v43;
    }
    while (v43);
    uint64_t v149 = &unk_1F0A472A0;
    memset(v150, 0, sizeof(v150));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v152, (uint64_t)v156, *(void *)(v8 + 296) + 48 * (int)v123);
  uint64_t v46 = v120;
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)v151, (uint64_t)v155, (uint64_t)v158);
  uint64_t v47 = v125 + 16 * v17;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(v8 + 296) + 48 * (int)v123, (uint64_t)v156);
  int v48 = 0;
  uint64_t v126 = (v124 - 1);
  int v121 = v10 * (v124 - 1);
  uint64_t v118 = v8;
  uint64_t v49 = v119;
  do
  {
    unsigned int v50 = v121 + v48;
    int v51 = v49[6];
    uint64_t v52 = *((void *)v49 + 1) + 4 * v51 * (v121 + v48);
    int v53 = v49[7] - v51 * (v121 + v48);
    uint64_t v54 = *((void *)v49 + 4);
    LODWORD(v150[1]) = v49[4];
    HIDWORD(v150[1]) = v10;
    v150[2] = __PAIR64__(v53, v51);
    v150[3] = v54;
    v150[0] = v52;
    uint64_t v149 = &unk_1F0A472A0;
    uint64_t v55 = *(void *)(v8 + 392) + 48 * (int)v123;
    LODWORD(v--*(_DWORD *)(a9 + 52) = *(_DWORD *)(v55 + 16);
    unsigned int v56 = *(_DWORD *)(v55 + 24);
    int v57 = v56 * (v121 + v48);
    uint64_t v58 = *(void *)(v55 + 8) + 4 * v57;
    LODWORD(v54) = *(_DWORD *)(v55 + 28) - v57;
    uint64_t v59 = *(void *)(v55 + 32);
    *((void *)&v147 + 1) = __PAIR64__(v10, v52);
    *(void *)&long long v148 = __PAIR64__(v54, v56);
    *((void *)&v148 + 1) = v59;
    *(void *)&long long v147 = v58;
    std::string::size_type v146 = &unk_1F0A472A0;
    if (*(unsigned char *)(v8 + 224))
    {
      uint64_t v60 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(v8);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v146, (uint64_t)&v149, CblasNoTrans, v60, CblasNoTrans, 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v146, (uint64_t)&v149, 111);
    }
    *(void *)&long long v144 = v152[1] + 4 * (int)(LODWORD(v152[3]) * v50);
    *((void *)&v144 + 1) = __PAIR64__(v10, v152[2]);
    LODWORD(v145) = v152[3];
    DWORD1(v145) = HIDWORD(v152[3]) - LODWORD(v152[3]) * v50;
    *((void *)&v145 + 1) = v152[4];
    std::string v143 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v143, (uint64_t)&v146);
    unsigned int v61 = *(_DWORD *)(v47 + 16);
    unsigned int v62 = *(_DWORD *)(v47 + 24);
    int v63 = *(_DWORD *)(v47 + 28) - v62 * v50;
    uint64_t v64 = *(void *)(v47 + 32);
    *(void *)&long long v141 = *(void *)(v47 + 8) + 4 * (int)(v62 * v50);
    *((void *)&v141 + 1) = __PAIR64__(v10, v61);
    *(void *)&long long v142 = __PAIR64__(v63, v62);
    *((void *)&v142 + 1) = v64;
    int v140 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v140, (uint64_t)&v146);
    if (*(unsigned char *)(v8 + 208))
    {
      uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(v8);
      uint64_t v66 = *(void *)(v65 + 8) + 8 * *(int *)(v65 + 24);
      unsigned int v67 = *(_DWORD *)(v65 + 16);
      uint64_t v68 = *(void *)(v65 + 32);
      long long v138 = &unk_1F0A472D0;
      v139[0] = v66;
      v139[1] = v67;
      v139[2] = v68;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v140, (uint64_t)&v143, 111, (uint64_t)&v138, 1.0, 1.0);
    }
    if (v126 < (int)v124 - 1)
    {
      uint64_t v69 = (v10 * v124 + v48);
      unsigned int v70 = *(_DWORD *)(v47 + 16);
      unsigned int v71 = *(_DWORD *)(v47 + 24);
      unsigned int v72 = *(_DWORD *)(v47 + 28) - v71 * v69;
      uint64_t v73 = *(void *)(v47 + 32);
      v139[0] = *(void *)(v47 + 8) + 4 * (int)(v71 * v69);
      v139[1] = __PAIR64__(v10, v70);
      v139[2] = __PAIR64__(v72, v71);
      void v139[3] = v73;
      long long v138 = &unk_1F0A472A0;
      v137[0] = v157[1] + 4 * LODWORD(v157[3]) * (int)v69;
      v137[1] = __PAIR64__(v10, v157[2]);
      LODWORD(v137[2]) = v157[3];
      HIDWORD(v137[2]) = HIDWORD(v157[3]) - LODWORD(v157[3]) * v69;
      v137[3] = v157[4];
      long long v136 = &unk_1F0A472A0;
      if (v122)
      {
        uint64_t v74 = *(void *)(v8 + 128) + 48 * (int)v123;
        int v75 = *(_DWORD *)(v8 + 176);
        int v76 = *(_DWORD *)(v74 + 28);
        uint64_t v77 = *(void *)(v74 + 32);
        v135[0] = *(void *)(v74 + 8);
        LODWORD(v135[1]) = v75;
        *(void *)((char *)&v135[1] + 4) = *(void *)(v74 + 20);
        HIDWORD(v135[2]) = v76;
        v135[3] = v77;
        uint64_t v134 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v134);
        uint64_t v78 = *(void *)(v8 + 104) + 32 * v123;
        v133[1] = 0;
        long long v132 = &unk_1F0A472D0;
        v133[0] = *(void *)(v78 + 8) + 4 * v69;
        LODWORD(v133[1]) = v10;
        v133[2] = *(void *)(v78 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v134, (uint64_t)&v138, (uint64_t)&v132, 1);
        *(_OWORD *)&v139[1] = *(_OWORD *)&v135[1];
        v139[0] = v135[0];
        void v139[3] = v135[3];
        uint64_t v79 = *(void *)(v8 + 128) + 48 * (int)v123;
        uint64_t v80 = *(int *)(v8 + 176);
        int v81 = *(_DWORD *)(v79 + 28) - v80;
        uint64_t v82 = *(void *)(v79 + 32);
        v133[0] = *(void *)(v79 + 8) + 4 * v80;
        LODWORD(v133[1]) = v80;
        *(void *)((char *)&v133[1] + 4) = *(void *)(v79 + 20);
        HIDWORD(v133[2]) = v81;
        v133[3] = v82;
        long long v132 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v132);
        uint64_t v83 = *(void *)(v8 + 104) + 32 * v123;
        v131[2] = 0;
        v131[0] = &unk_1F0A472D0;
        v131[1] = *(void *)(v83 + 8) + 4 * v69;
        LODWORD(v131[2]) = v10;
        v131[3] = *(void *)(v83 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v132, (uint64_t)&v136, (uint64_t)v131, 1);
        v137[0] = v133[0];
        *(_OWORD *)&v137[1] = *(_OWORD *)&v133[1];
        v137[3] = v133[3];
        long long v132 = &unk_1F0A472A0;
        memset(v133, 0, sizeof(v133));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v132);
        uint64_t v134 = &unk_1F0A472A0;
        memset(v135, 0, sizeof(v135));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v134);
      }
      if (*(unsigned char *)(v8 + 208))
      {
        v135[0] = v153[1] + 4 * LODWORD(v153[3]) * (int)v69;
        v135[1] = __PAIR64__(v10, v153[2]);
        LODWORD(v135[2]) = v153[3];
        HIDWORD(v135[2]) = HIDWORD(v153[3]) - LODWORD(v153[3]) * v69;
        v135[3] = v153[4];
        v133[0] = v154[1] + 4 * LODWORD(v154[3]) * (int)v69;
        v133[1] = __PAIR64__(v10, v154[2]);
        LODWORD(v133[2]) = v154[3];
        HIDWORD(v133[2]) = HIDWORD(v154[3]) - LODWORD(v154[3]) * v69;
        v133[3] = v154[4];
        uint64_t v134 = &unk_1F0A472A0;
        long long v132 = &unk_1F0A472A0;
        if (v122)
        {
          uint64_t v84 = *(void *)(v8 + 128) + 48 * (int)v123;
          uint64_t v85 = *(int *)(v8 + 176);
          int v86 = *(_DWORD *)(v84 + 28) - 2 * v85;
          uint64_t v87 = *(void *)(v84 + 32);
          v131[1] = *(void *)(v84 + 8) + 8 * v85;
          LODWORD(v131[2]) = v85;
          *(void *)((char *)&v131[2] + 4) = *(void *)(v84 + 20);
          HIDWORD(v131[3]) = v86;
          v131[4] = v87;
          v131[0] = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v131);
          uint64_t v88 = *(void *)(v8 + 104) + 32 * v123;
          v130[2] = 0;
          v130[0] = &unk_1F0A472D0;
          v130[1] = *(void *)(v88 + 8) + 4 * v69;
          LODWORD(v130[2]) = v10;
          v130[3] = *(void *)(v88 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v131, (uint64_t)&v134, (uint64_t)v130, 1);
          *(_OWORD *)&v135[1] = *(_OWORD *)&v131[2];
          v135[0] = v131[1];
          v135[3] = v131[4];
          uint64_t v89 = *(void *)(v8 + 128) + 48 * (int)v123;
          int v90 = *(_DWORD *)(v8 + 176);
          int v91 = *(_DWORD *)(v89 + 28) - 3 * v90;
          uint64_t v92 = *(void *)(v89 + 32);
          v130[1] = *(void *)(v89 + 8) + 12 * v90;
          LODWORD(v130[2]) = v90;
          *(void *)((char *)&v130[2] + 4) = *(void *)(v89 + 20);
          HIDWORD(v130[3]) = v91;
          v130[4] = v92;
          v130[0] = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v130);
          uint64_t v93 = *(void *)(v8 + 104) + 32 * v123;
          uint64_t v128 = 0;
          v127[0] = &unk_1F0A472D0;
          v127[1] = *(void *)(v93 + 8) + 4 * v69;
          LODWORD(v128) = v10;
          uint64_t v129 = *(void *)(v93 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v130, (uint64_t)&v132, (uint64_t)v127, 1);
          v133[0] = v130[1];
          *(_OWORD *)&v133[1] = *(_OWORD *)&v130[2];
          v133[3] = v130[4];
          v130[0] = &unk_1F0A472A0;
          memset(&v130[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v130);
          v131[0] = &unk_1F0A472A0;
          memset(&v131[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v131);
          uint64_t v8 = v118;
          uint64_t v49 = v119;
        }
        uint64_t v94 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(v8);
        unsigned int v95 = *(_DWORD *)(v94 + 16);
        uint64_t v96 = *(void *)(v94 + 32);
        v131[1] = *(void *)(v94 + 8) + 4 * *(int *)(v94 + 24);
        v131[0] = &unk_1F0A472D0;
        v131[2] = v95;
        v131[3] = v96;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v140, (uint64_t)&v134, 111, (uint64_t)v131, 1.0, 1.0);
        uint64_t v97 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(v8);
        unsigned int v98 = *(_DWORD *)(v97 + 16);
        uint64_t v99 = *(void *)(v97 + 32);
        v131[1] = *(void *)(v97 + 8);
        v131[0] = &unk_1F0A472D0;
        v131[2] = v98;
        v131[3] = v99;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v140, (uint64_t)&v132, 111, (uint64_t)v131, 1.0, 1.0);
        long long v132 = &unk_1F0A472A0;
        memset(v133, 0, sizeof(v133));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v132);
        uint64_t v134 = &unk_1F0A472A0;
        memset(v135, 0, sizeof(v135));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v134);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v140, (uint64_t)&v138, 111, (uint64_t)&v136, 111, 1.0, 1.0);
      long long v136 = &unk_1F0A472A0;
      memset(v137, 0, sizeof(v137));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v136);
      long long v138 = &unk_1F0A472A0;
      memset(v139, 0, sizeof(v139));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      uint64_t v46 = v120;
    }
    v139[0] = v154[1] + 4 * (int)(LODWORD(v154[3]) * v50);
    v139[1] = __PAIR64__(v10, v154[2]);
    LODWORD(v139[2]) = v154[3];
    HIDWORD(v139[2]) = HIDWORD(v154[3]) - LODWORD(v154[3]) * v50;
    void v139[3] = v154[4];
    long long v138 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v138, (uint64_t)&v140);
    long long v138 = &unk_1F0A472A0;
    memset(v139, 0, sizeof(v139));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
    v139[0] = v151[1] + 4 * (int)(LODWORD(v151[3]) * v50);
    v139[1] = __PAIR64__(v10, v151[2]);
    LODWORD(v139[2]) = v151[3];
    HIDWORD(v139[2]) = HIDWORD(v151[3]) - LODWORD(v151[3]) * v50;
    void v139[3] = v151[4];
    long long v138 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v138, (uint64_t)&v140);
    long long v138 = &unk_1F0A472A0;
    memset(v139, 0, sizeof(v139));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
    if (v126 >= 1)
    {
      v139[0] = v153[1] + 4 * (int)(LODWORD(v153[3]) * v50);
      v139[1] = __PAIR64__(v10, v153[2]);
      LODWORD(v139[2]) = v153[3];
      HIDWORD(v139[2]) = HIDWORD(v153[3]) - LODWORD(v153[3]) * v50;
      void v139[3] = v153[4];
      long long v138 = &unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v138, (uint64_t)&v140);
      long long v138 = &unk_1F0A472A0;
      memset(v139, 0, sizeof(v139));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
      unsigned int v100 = *(_DWORD *)(v46 + 16);
      unsigned int v101 = *(_DWORD *)(v46 + 24);
      int v102 = *(_DWORD *)(v46 + 28) - v101 * v50;
      uint64_t v103 = *(void *)(v46 + 32);
      v139[0] = *(void *)(v46 + 8) + 4 * (int)(v101 * v50);
      v139[1] = __PAIR64__(v10, v100);
      v139[2] = __PAIR64__(v102, v101);
      void v139[3] = v103;
      long long v138 = &unk_1F0A472A0;
      if (v122)
      {
        uint64_t v104 = *(void *)(v8 + 128) + 48 * (int)v123;
        int v105 = *(_DWORD *)(v104 + 28);
        uint64_t v106 = *(void *)(v104 + 32);
        v137[0] = *(void *)(v104 + 8);
        LODWORD(v137[1]) = v100;
        *(void *)((char *)&v137[1] + 4) = *(void *)(v104 + 20);
        HIDWORD(v137[2]) = v105;
        v137[3] = v106;
        long long v136 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v136);
        uint64_t v107 = *(void *)(v8 + 104) + 32 * v123;
        v135[1] = 0;
        uint64_t v134 = &unk_1F0A472D0;
        v135[0] = *(void *)(v107 + 8) + 4 * v50;
        LODWORD(v135[1]) = v10;
        v135[2] = *(void *)(v107 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v136, (uint64_t)&v138, (uint64_t)&v134, 1);
        *(_OWORD *)&v139[1] = *(_OWORD *)&v137[1];
        v139[0] = v137[0];
        void v139[3] = v137[3];
        long long v136 = &unk_1F0A472A0;
        memset(v137, 0, sizeof(v137));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v136);
        uint64_t v8 = v118;
        uint64_t v49 = v119;
      }
      int v108 = v49[4];
      int v109 = v49[6];
      int v110 = v109 * (v10 * (v124 - 2) + v48);
      uint64_t v111 = *((void *)v49 + 1) + 4 * v110;
      unsigned int v112 = v49[7] - v110;
      uint64_t v113 = *((void *)v49 + 4);
      v137[0] = v111;
      v137[1] = __PAIR64__(v10, v108);
      v137[2] = __PAIR64__(v112, v109);
      v137[3] = v113;
      long long v136 = &unk_1F0A472A0;
      uint64_t v114 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(v8);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v136, (uint64_t)&v138, CblasNoTrans, v114, CblasNoTrans, 1.0, 1.0);
      long long v136 = &unk_1F0A472A0;
      memset(v137, 0, sizeof(v137));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v136);
      long long v138 = &unk_1F0A472A0;
      memset(v139, 0, sizeof(v139));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v138);
    }
    int v140 = &unk_1F0A472A0;
    long long v141 = 0u;
    long long v142 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
    std::string v143 = &unk_1F0A472A0;
    long long v144 = 0u;
    long long v145 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
    std::string::size_type v146 = &unk_1F0A472A0;
    long long v147 = 0u;
    long long v148 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
    uint64_t v149 = &unk_1F0A472A0;
    memset(v150, 0, sizeof(v150));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
    v48 -= v10;
  }
  while (v126-- > 0);
  if (a5)
  {
    uint64_t v116 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(v8);
    kaldi::CuMatrixBase<float>::AddMatMat(a5, v46, CblasNoTrans, v116, CblasNoTrans, 1.0, 0.0);
  }
  v151[0] = &unk_1F0A472A0;
  memset(&v151[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v151);
  v152[0] = &unk_1F0A472A0;
  memset(&v152[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v152);
  v153[0] = &unk_1F0A472A0;
  memset(&v153[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v153);
  v154[0] = &unk_1F0A472A0;
  memset(&v154[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v154);
  v155[0] = &unk_1F0A472A0;
  memset(&v155[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v155);
  v156[0] = &unk_1F0A472A0;
  memset(&v156[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v156);
  v157[0] = &unk_1F0A472A0;
  memset(&v157[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v157);
  v158[0] = &unk_1F0A472A0;
  memset(&v158[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v158);
}

void sub_1B1DE410C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, unint64_t a11, _OWORD *a12, unint64_t a13, _OWORD *a14, unint64_t a15, _OWORD *a16, unint64_t a17, _OWORD *a18, unint64_t a19, _OWORD *a20,unint64_t a21,_OWORD *a22,unint64_t a23,_OWORD *a24,unint64_t a25)
{
  STACK[0x2F0] = v25;
  *uint64_t v26 = 0u;
  v26[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2F0]);
  STACK[0x318] = a19;
  *a20 = 0u;
  a20[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x318]);
  STACK[0x340] = a21;
  *a22 = 0u;
  a22[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x340]);
  STACK[0x368] = a23;
  *a24 = 0u;
  a24[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x368]);
  STACK[0x390] = a25;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x390]);
  STACK[0x3B8] = a11;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3B8]);
  STACK[0x3E0] = a13;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3E0]);
  STACK[0x408] = a15;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x408]);
  STACK[0x430] = a17;
  *a18 = 0u;
  a18[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_1B1DE4488()
{
}

uint64_t *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers(uint64_t *result)
{
  if (!*((unsigned char *)result + 241))
  {
    uint64_t v1 = result;
    std::vector<kaldi::CuMatrix<float>>::resize(result + 46, *((int *)result + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 49, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 52, *((int *)v1 + 20));
    uint64_t result = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 55, *((int *)v1 + 20));
    *((unsigned char *)v1 + 241) = 1;
  }
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 368) + 48 * a2), a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 392) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 416) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 440) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1B1DE4664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = *(_DWORD *)(a1 + 96);
  int v10 = *(_DWORD *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t v47 = *(void *)(a1 + 272);
  uint64_t v14 = *(void *)(a1 + 440) + 48 * a5;
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * a5) = v10;
  uint64_t v16 = *(int *)(a1 + 176);
  int v17 = *(_DWORD *)(v14 + 28);
  uint64_t v18 = *(void *)(v14 + 32);
  v60[1] = *(void *)(v14 + 8);
  LODWORD(v60[2]) = v16;
  *(void *)((char *)&v60[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v60[3]) = v17;
  void v60[4] = v18;
  v60[0] = &unk_1F0A472A0;
  int v19 = *(_DWORD *)(v14 + 28) - v16;
  uint64_t v20 = *(void *)(v14 + 32);
  v59[1] = *(void *)(v14 + 8) + 4 * v16;
  LODWORD(v59[2]) = v16;
  *(void *)((char *)&v59[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v59[3]) = v19;
  void v59[4] = v20;
  v59[0] = &unk_1F0A472A0;
  int v21 = *(_DWORD *)(v14 + 28) - 2 * v16;
  uint64_t v22 = *(void *)(v14 + 32);
  v58[1] = *(void *)(v14 + 8) + 8 * v16;
  LODWORD(v58[2]) = v16;
  *(void *)((char *)&v58[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v58[3]) = v21;
  v58[4] = v22;
  v58[0] = &unk_1F0A472A0;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a5) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a5) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a5) + ++*(_DWORD *)(result + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a5) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a5) + 32) = a4;
  }
  uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v23, v14, CblasTrans, a2, CblasNoTrans, 1.0, v15);
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a5);
  unsigned int v25 = *(_DWORD *)(v14 + 24);
  uint64_t v26 = *(void *)(v14 + 8) + 4 * (int)(v25 * v9);
  int v27 = *(_DWORD *)(v14 + 28) - v25 * v9;
  uint64_t v28 = *(void *)(v14 + 32);
  DWORD2(v56) = *(_DWORD *)(v14 + 16);
  HIDWORD(v56) = v10 - v9;
  *(void *)&long long v57 = __PAIR64__(v27, v25);
  *((void *)&v57 + 1) = v28;
  uint64_t v55 = &unk_1F0A472A0;
  *(void *)&long long v56 = v26;
  uint64_t v29 = *(void *)(a1 + 344) + 48 * a5;
  LODWORD(v26) = *(_DWORD *)(v29 + 16);
  uint64_t v30 = *(void *)(v29 + 32);
  *(void *)&long long v53 = *(void *)(v29 + 8);
  DWORD2(v53) = v26;
  HIDWORD(v53) = v10 - v9;
  *(void *)&long long v54 = *(void *)(v29 + 24);
  *((void *)&v54 + 1) = v30;
  uint64_t v52 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::AddMatMat(v24, (uint64_t)&v55, CblasTrans, (uint64_t)&v52, CblasNoTrans, 1.0, v15);
  uint64_t v52 = &unk_1F0A472A0;
  long long v53 = 0u;
  long long v54 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  uint64_t v55 = &unk_1F0A472A0;
  long long v56 = 0u;
  long long v57 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
  uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v31, v14, 1.0, v15);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a5);
    uint64_t v33 = v47 + 48 * a5;
    unsigned int v34 = *(_DWORD *)(v32 + 16);
    uint64_t v35 = *(void *)(v32 + 32);
    uint64_t v49 = *(void *)(v32 + 8);
    int v48 = &unk_1F0A472D0;
    uint64_t v50 = v34;
    uint64_t v51 = v35;
    DWORD2(v56) = v60[2];
    HIDWORD(v56) = v10 - v9;
    LODWORD(v57) = v60[3];
    DWORD1(v57) = HIDWORD(v60[3]) - LODWORD(v60[3]) * v9;
    *((void *)&v57 + 1) = v60[4];
    uint64_t v55 = &unk_1F0A472A0;
    *(void *)&long long v56 = v60[1] + 4 * LODWORD(v60[3]) * v9;
    int v36 = *(_DWORD *)(v33 + 16);
    uint64_t v37 = *(void *)(v33 + 32);
    *(void *)&long long v53 = *(void *)(v33 + 8);
    DWORD2(v53) = v36;
    HIDWORD(v53) = v10 - v9;
    *(void *)&long long v54 = *(void *)(v33 + 24);
    *((void *)&v54 + 1) = v37;
    uint64_t v52 = &unk_1F0A472A0;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    uint64_t v52 = &unk_1F0A472A0;
    long long v53 = 0u;
    long long v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    uint64_t v55 = &unk_1F0A472A0;
    long long v56 = 0u;
    long long v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    uint64_t v38 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a5);
    unsigned int v39 = *(_DWORD *)(v38 + 16);
    uint64_t v40 = *(void *)(v38 + 32);
    uint64_t v49 = *(void *)(v38 + 8) + 4 * *(int *)(v38 + 24);
    int v48 = &unk_1F0A472D0;
    uint64_t v50 = v39;
    uint64_t v51 = v40;
    DWORD2(v56) = v59[2];
    HIDWORD(v56) = v10 - v9;
    LODWORD(v57) = v59[3];
    DWORD1(v57) = HIDWORD(v59[3]) - LODWORD(v59[3]) * v9;
    *((void *)&v57 + 1) = v59[4];
    uint64_t v55 = &unk_1F0A472A0;
    *(void *)&long long v56 = v59[1] + 4 * LODWORD(v59[3]) * v9;
    int v41 = *(_DWORD *)(v33 + 16);
    uint64_t v42 = *(void *)(v33 + 32);
    *(void *)&long long v53 = *(void *)(v33 + 8);
    DWORD2(v53) = v41;
    HIDWORD(v53) = v10 - v9;
    *(void *)&long long v54 = *(void *)(v33 + 24);
    *((void *)&v54 + 1) = v42;
    uint64_t v52 = &unk_1F0A472A0;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    uint64_t v52 = &unk_1F0A472A0;
    long long v53 = 0u;
    long long v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    uint64_t v55 = &unk_1F0A472A0;
    long long v56 = 0u;
    long long v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    uint64_t v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a5);
    unsigned int v44 = *(_DWORD *)(v43 + 16);
    uint64_t v45 = *(void *)(v43 + 32);
    *(void *)&long long v56 = *(void *)(v43 + 8) + 8 * *(int *)(v43 + 24);
    uint64_t v55 = &unk_1F0A472D0;
    *((void *)&v56 + 1) = v44;
    *(void *)&long long v57 = v45;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v55, (uint64_t)v58, 112, v33, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v46, *(void *)(a1 + 368) + 48 * a5, CblasTrans, *(void *)(a1 + 320) + 48 * a5, CblasNoTrans, 1.0, v15);
  }
  v58[0] = &unk_1F0A472A0;
  memset(&v58[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v58);
  v59[0] = &unk_1F0A472A0;
  memset(&v59[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v59);
  v60[0] = &unk_1F0A472A0;
  memset(&v60[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
}

void sub_1B1DE4DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, _OWORD *a14, uint64_t a15, _OWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a31 = a11;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a31);
  a36 = a13;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a36);
  a41 = a15;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a41);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 2);
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      unsigned int v5 = __p;
    }
    else {
      unsigned int v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_1B1DE5648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = (void *)(a1 + 104);
  if (v5 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v5 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v5 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  unsigned __int8 v8 = (void *)(*v6 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v8, a2);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  uint64_t v7 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v7, 111);
}

void *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1);
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a4;
  uint64_t v9 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  unsigned int v10 = *(_DWORD *)(v8 + 16);
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v9;
  v13[0] = &unk_1F0A472D0;
  _OWORD v13[2] = v10;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(void *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v6 = (int *)(a1[1] + 48 * a3);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v6, a2, 111);
}

void *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(void *a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v8 = a1[1] + 48 * a4;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  uint64_t v10 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v10;
  v13[0] = &unk_1F0A472D0;
  _OWORD v13[2] = v9;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(void *a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  *(void *)(a1[1] + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v8 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8))
      {
        uint64_t v9 = a1[1] + 48 * a4;
        uint64_t v10 = *(void *)(v9 + 8) + 4 * *(_DWORD *)(v9 + 24) * (int)v8;
        unsigned int v11 = *(_DWORD *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 32);
        v20[1] = v10;
        v20[0] = &unk_1F0A472D0;
        v20[2] = v11;
        uint64_t v20[3] = v12;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          uint64_t v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        }
      }
      ++v8;
    }
    while (a2[1] > v8);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20, 3);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0) {
      float v15 = __p;
    }
    else {
      float v15 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v16 = v19;
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20);
  }
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v23);
}

void sub_1B1DE5CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 1--*(_DWORD *)(a9 + 52) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 156);
  if (v6 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v4);
      uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v15, v4);
      uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v16, v4);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v17, v4);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v4);
      }
    }
  }
  else if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v8, *(void *)(a1 + 656) + 48 * a2, v4);
      uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, *(void *)(a1 + 680) + 48 * a2, v4);
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 728) + 32 * a2, v4);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 704) + 48 * a2, v4);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v13 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, v13, v4);
      }
    }
  }
  else if (a3 > 0.0 && v6 == 2)
  {
    uint64_t v20 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v21, (int *)(*(void *)(a1 + 656) + 48 * v20), v4);
    uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, (int *)(*(void *)(a1 + 680) + 48 * v20), v4);
    uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v23, (void *)(*(void *)(a1 + 728) + 32 * v20), v4);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (int *)(*(void *)(a1 + 704) + 48 * v20), v4);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
      uint64_t v26 = (int *)(*(void *)(a1 + 752) + 48 * v20);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, v26, v4);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(void *a1, unsigned int a2, float a3)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v15 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v7);
  int v9 = kaldi::CuMatrixBase<float>::CountZeros(v8);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v7);
  int v11 = kaldi::CuMatrixBase<float>::CountZeros(v10) + v9;
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v12);
  *a2 = v11 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v13);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v14);
    int v15 = *a2 + result;
LABEL_11:
    *a2 = v15;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetInternalMemory(uint64_t a1, int *a2, int a3)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  float v7 = -a3;
  float v8 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v6, v9, 111, v8, 1.0);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  float v11 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v10, v12, 111, v11, 1.0);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  float v14 = -(float)(a3 * *(float *)(a1 + 464));
  uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
  kaldi::CuVectorBase<float>::AddVec(v13, v15, v14, 1.0);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    float v17 = *(float *)(a1 + 464) * v7;
    uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v16, v18, 111, v17, 1.0);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    float v20 = *(float *)(a1 + 468) * v7;
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v19, v21, 111, v20, 1.0);
  }
}

void sub_1B1DE65B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  *uint64_t v9 = 0u;
  v9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 8) + v3), *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[1];
  unint64_t v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 8 * a2;
      while (v3 != (void *)v6)
      {
        uint64_t v8 = *--v3;
        uint64_t v7 = v8;
        *uint64_t v3 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
        }
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__append(a1, v5);
  }
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t a1)
{
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #rows = ", 22);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"; expecting ", 12);
    unint64_t v4 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #columns = ", 25);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    unint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, " (same as input dim)");
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #rows = ", 26);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) != *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #columns = ", 29);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      uint64_t v13 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      float v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; expecting ", 12);
      uint64_t v15 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    float v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20) == *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12))
    {
      if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #columns = ", 30);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      uint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; expecting ", 12);
      uint64_t v19 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #rows = ", 27);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      uint64_t v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
      float v17 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1B1DE6DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 904) = xmmword_1B255E480;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)&off_1F0A322C0);
  *(void *)uint64_t v4 = off_1F0A49008;
  *(void *)(v4 + 848) = off_1F0A492F8;
  *(void *)(v4 + 160) = &unk_1F0A49198;
  *(void *)(v4 + 168) = &unk_1F0A491C0;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 2++*(_DWORD *)(result + 24) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 4++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 5--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 8++*(_DWORD *)(result + 24) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_1B1DE6FB4(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = &unk_1F0A4FA88;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A322C0, a2);
  *(void *)a1 = off_1F0A49008;
  *(void *)(a1 + 848) = off_1F0A492F8;
  *(void *)(a1 + 160) = &unk_1F0A49198;
  *(void *)(a1 + 168) = &unk_1F0A491C0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 7--*(_DWORD *)(a9 + 52) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (*(void *)(a2 + 184)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  if (*(void *)(a2 + 192)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v9 = *(void *)(a2 + 216);
  if (v9) {
    kaldi::NewCuSubOrMat<float>(v9, 0);
  }
  if (*(void *)(a2 + 232)) {
    kaldi::NewCuSubOrMat<signed char>();
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    unint64_t v10 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v10))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v11, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v10))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v12, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v10))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v10);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v10))
      {
        uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v13, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v10))
      {
        uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v14, 0);
      }
      ++v10;
    }
    while (v10 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_1B1DE7D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,quasar::Bitmap *a22,quasar::Bitmap *a23,kaldi::nnet1::UpdatableComponent *a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  uint64_t v33 = *a14;
  if (*a14)
  {
    *((void *)v30 + 64) = v33;
    operator delete(v33);
  }
  unsigned int v34 = *a15;
  if (*a15)
  {
    *((void *)v30 + 61) = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  uint64_t v35 = *((void *)v30 + 27);
  *((void *)v30 + 27) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  }
  uint64_t v36 = *((void *)v30 + 25);
  *((void *)v30 + 25) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v30, (uint64_t *)&off_1F0A322C0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = &unk_1F0A49198;
  *(void *)(a1 + 168) = &unk_1F0A491C0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v9 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  uint64_t v7 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 168));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 160));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void sub_1B1DE8534(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void sub_1B1DE85D0(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void sub_1B1DE8658(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = &unk_1F0A4FA88;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A322E0, a2);
  *(void *)a1 = off_1F0A49428;
  *(void *)(a1 + 848) = off_1F0A49718;
  *(void *)(a1 + 160) = &unk_1F0A495B8;
  *(void *)(a1 + 168) = &unk_1F0A495E0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 7--*(_DWORD *)(a9 + 52) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v9 = *(void *)(a2 + 216);
  if (v9) {
    kaldi::NewCuSubOrMat<float>(v9, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    unint64_t v10 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v10))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v11, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v10))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v12, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v10))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v10);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v10))
      {
        uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v13, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v10))
      {
        uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v14, 0);
      }
      ++v10;
    }
    while (v10 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_1B1DE90CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,quasar::Bitmap *a22,quasar::Bitmap *a23,kaldi::nnet1::UpdatableComponent *a24,void **a25,void **a26,void **a27,void **a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,void **a32)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v33);
  a32 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  uint64_t v35 = *a15;
  if (*a15)
  {
    *((void *)v32 + 64) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *a16;
  if (*a16)
  {
    *((void *)v32 + 61) = v36;
    operator delete(v36);
  }
  a32 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a28;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  uint64_t v37 = *((void *)v32 + 27);
  *((void *)v32 + 27) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  uint64_t v38 = *((void *)v32 + 25);
  *((void *)v32 + 25) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a30, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a31, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v32, (uint64_t *)&off_1F0A322E0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a24);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v68 = -1;
  int v69 = v4;
  int v66 = 0x40000000;
  int v67 = -1073741824;
  int v64 = -1073741824;
  int v65 = 1036831949;
  int v63 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v62);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v61);
  memset(v60, 0, sizeof(v60));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v60);
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
    {
      uint64_t v5 = v60;
      switch(HIBYTE(v60[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v6 = v60[0] == 0x6D726F4E78614D3CLL && LOBYTE(v60[1]) == 62;
          char v7 = (int *)(a1 + 472);
          if (v6) {
            goto LABEL_202;
          }
          BOOL v8 = v60[0] == 0x6461724778614D3CLL && LOBYTE(v60[1]) == 62;
          char v7 = (int *)(a1 + 152);
          if (v8) {
            goto LABEL_202;
          }
          BOOL v9 = v60[0] == 0x6C6C654378614D3CLL && LOBYTE(v60[1]) == 62;
          char v7 = (int *)(a1 + 476);
          if (v9) {
            goto LABEL_202;
          }
          if ((v60[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v60[0] == 0x6C6C65436D754E3CLL && LOWORD(v60[1]) == 15987) {
            goto LABEL_205;
          }
          if (v60[0] != 0x61654D736169423CLL || LOWORD(v60[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v60[0] != 0x6E6152736169423CLL || *(void *)((char *)v60 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v60[0] == 0x536D6F646E61523CLL && LODWORD(v60[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v60[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v60[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v60[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v60[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v60[0] != 0x74536D617261503CLL || *(void *)((char *)v60 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v29 = v60[0] == 0x61526E7261654C3CLL && *(void *)((char *)v60 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v60[0] == 0x6E6569646172473CLL && v60[1] == 0x7079546D726F4E74 && LOWORD(v60[2]) == 15973) {
            goto LABEL_204;
          }
          if (v60[0] == 0x4374757074754F3CLL && v60[1] == 0x65756C61566C6C65 && LOWORD(v60[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v60[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v60[0] != 0x47746567726F463CLL || v60[1] != 0x4D73616942657461 || LODWORD(v60[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v60[0] != 0x47746567726F463CLL
            || v60[1] != 0x5273616942657461
            || *(void *)((char *)&v60[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v18 = v60[0] == 0x7463656A6F72503CLL
             && v60[1] == 0x6E7261654C6E6F69
             && v60[2] == 0x66656F4365746152
             && v61.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v10 = v60[1];
    switch(v60[1])
    {
      case 9:
        BOOL v11 = *(void *)v60[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
        char v7 = (int *)(a1 + 472);
        if (!v11)
        {
          BOOL v12 = *(void *)v60[0] == 0x6461724778614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
          char v7 = (int *)(a1 + 152);
          if (!v12) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v60[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v60[0] + 8) == 15987)
        {
LABEL_205:
          uint64_t v52 = &v69;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v52);
          break;
        }
        if (*(void *)v60[0] != 0x61654D736169423CLL || *(_WORD *)(v60[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        char v7 = &v67;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v7);
        break;
      case 0xBLL:
        if (*(void *)v60[0] != 0x6E6152736169423CLL || *(void *)(v60[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        char v7 = &v66;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v60[0] != 0x74536D617261503CLL || *(void *)(v60[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        char v7 = &v65;
        goto LABEL_202;
      case 0xFLL:
        BOOL v29 = *(void *)v60[0] == 0x61526E7261654C3CLL && *(void *)(v60[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        char v7 = (int *)(a1 + 464);
        if (!v29) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v60[0] == 0x6E6569646172473CLL
          && *(void *)(v60[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v60[0] + 16) == 15973)
        {
LABEL_204:
          uint64_t v42 = &v61;
          goto LABEL_150;
        }
        if (v60[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v33 = *(void *)v60[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
        char v7 = (int *)(a1 + 476);
        if (v33) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v10 = v60[1];
LABEL_121:
        if (v10 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v60[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v60[0] + 8) == 1046766949)
        {
LABEL_206:
          uint64_t v52 = &v68;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v10 = v60[1];
LABEL_127:
        if (v10 == 8)
        {
          if (*(void *)v60[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v10 = v60[1];
        }
        if (v10 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v60[0] != 0x4374757074754F3CLL
          || *(void *)(v60[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v60[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v10 = v60[1];
LABEL_139:
          if (v10 != 19) {
            goto LABEL_209;
          }
          uint64_t v5 = (uint64_t *)v60[0];
LABEL_141:
          uint64_t v37 = *v5;
          uint64_t v38 = v5[1];
          uint64_t v39 = *(uint64_t *)((char *)v5 + 11);
          BOOL v40 = v37 == 0x61725474696E493CLL && v38 == 0x79546D726F66736ELL;
          if (!v40 || v39 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v60, "</Component>"))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
              long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Invalid token ", 14);
              if (v60[2] >= 0) {
                long long v54 = v60;
              }
              else {
                long long v54 = (void *)v60[0];
              }
              if (v60[2] >= 0) {
                uint64_t v55 = HIBYTE(v60[2]);
              }
              else {
                uint64_t v55 = v60[1];
              }
              long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
              long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)". Allowed tokens: ", 18);
              uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v59);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams(a1, v69);
          }
          uint64_t v42 = &v62;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v42);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v60[0] != 0x47746567726F463CLL
          || *(void *)(v60[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v60[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        char v7 = &v64;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v60[0] != 0x47746567726F463CLL
          || *(void *)(v60[0] + 8) != 0x5273616942657461
          || *(void *)(v60[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        char v7 = &v63;
        goto LABEL_202;
      case 0x19:
        BOOL v18 = *(void *)v60[0] == 0x7463656A6F72503CLL
           && *(void *)(v60[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v60[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v60[0] + 24) == 62;
LABEL_200:
        char v7 = (int *)(a1 + 468);
        if (!v18) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_1B1DEA030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_1B1DEA61C()
{
}

void sub_1B1DEA638(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, kaldi::quasar::Vocab *this, float a5)
{
  uint64_t v10 = kaldi::quasar::Vocab::VocabSize(this);
  uint64_t v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)this);
  kaldi::Matrix<float>::Matrix((uint64_t)v17, v10, v11, 0, 0);
  uint64_t v12 = 0;
LABEL_2:
  if (v12 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v17))
  {
    for (uint64_t i = 0; ; ++i)
    {
      if (i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v17))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0);
          float v14 = v15 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v14 = (kaldi::UniformRandomNumber::RandUniform(a1, 0) + -0.5) * (float)(a5 + a5);
        }
      }
      else if (v12 == i)
      {
        float v14 = 1.0;
      }
      else
      {
        float v14 = 0.0;
      }
      *(float *)(v17[0] + 4 * (int)v12 * v18 + 4 * i) = v14;
    }
  }
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)this, (uint64_t)v17);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_1B1DEA7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v34 = *(_DWORD *)(a1 + 176);
    int v35 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v34 < v35)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      BOOL v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") should not be less than output dim (", 38);
      int v41 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v41, ").");
    }
    else
    {
      uint64_t v36 = *(void *)(a1 + 184);
      *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = v34 > v35;
      if (!v36) {
        operator new();
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v44 = 0uLL;
    uint64_t v45 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v44);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
      switch(HIBYTE(v45))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v44 != 0x6C6C65436D754E3CLL || WORD4(v44) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v23 = (void)v44 == 0x61526E7261654C3CLL && *(void *)((char *)&v44 + 7) == 0x3E66656F43657461;
          uint64_t v10 = (float *)(a1 + 464);
          if (v23) {
            goto LABEL_127;
          }
          if (HIBYTE(v45) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v44 == 0x4374757074754F3CLL
            && *((void *)&v44 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v45 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v45) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v45) != 18) {
            goto LABEL_138;
          }
          BOOL v21 = (void)v44 == 0x6E6569646172473CLL && *((void *)&v44 + 1) == 0x7079546D726F4E74;
          if (!v21 || (unsigned __int16)v45 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v45) != 25) {
            goto LABEL_138;
          }
          BOOL v18 = (void)v44 == 0x7463656A6F72503CLL
             && *((void *)&v44 + 1) == 0x6E7261654C6E6F69
             && v45 == 0x66656F4365746152
             && v46 == 62;
          uint64_t v10 = (float *)(a1 + 468);
          if (v18) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v45) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v24 = (void)v44 == 0x6D726F4E78614D3CLL && BYTE8(v44) == 62;
          uint64_t v10 = (float *)(a1 + 472);
          if (v24) {
            goto LABEL_127;
          }
          if (HIBYTE(v45) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v45) != 9) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v44 == 0x6C6C654378614D3CLL && BYTE8(v44) == 62;
          uint64_t v10 = (float *)(a1 + 476);
          if (!v25) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v7 = *((void *)&v44 + 1);
    if (*((void *)&v44 + 1) == 10
      && (*(void *)v44 == 0x6C6C65436D754E3CLL ? (BOOL v8 = *(unsigned __int16 *)(v44 + 8) == 15987) : (BOOL v8 = 0), v8))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176);
    }
    else
    {
      if (*((void *)&v44 + 1) == 15)
      {
        BOOL v9 = *(void *)v44 == 0x61526E7261654C3CLL && *(void *)(v44 + 7) == 0x3E66656F43657461;
        uint64_t v10 = (float *)(a1 + 464);
        if (v9) {
          goto LABEL_127;
        }
        uint64_t v7 = *((void *)&v44 + 1);
      }
      if (v7 == 25)
      {
        BOOL v13 = *(void *)v44 == 0x7463656A6F72503CLL
           && *(void *)(v44 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v44 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v44 + 24) == 62;
        uint64_t v10 = (float *)(a1 + 468);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v7 = *((void *)&v44 + 1);
      }
      if (v7 != 9) {
        goto LABEL_47;
      }
      BOOL v14 = *(void *)v44 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v44 + 8) == 62;
      uint64_t v10 = (float *)(a1 + 472);
      if (v14) {
        goto LABEL_127;
      }
      uint64_t v7 = *((void *)&v44 + 1);
      if (*((void *)&v44 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v15 = *(void *)v44 == 0x6C6C654378614D3CLL && *(unsigned char *)(v44 + 8) == 62;
      uint64_t v10 = (float *)(a1 + 476);
      if (v15) {
        goto LABEL_127;
      }
      if ((v45 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v45) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v45) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v44 != 0x3E706565506F4E3CLL)
        {
          if ((v45 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v7 = *((void *)&v44 + 1);
          if (v7 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v44 == 0x4374757074754F3CLL
            && *(void *)(v44 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v44 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v7 = *((void *)&v44 + 1);
          if (*((void *)&v44 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v44 == 0x6E6569646172473CLL
            && *(void *)(v44 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v44 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v43 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v43) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v45 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v45) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            uint64_t v30 = &v44;
          }
          else
          {
LABEL_120:
            if (v7 != 9) {
              goto LABEL_138;
            }
            uint64_t v30 = (long long *)v44;
          }
          uint64_t v31 = *(void *)v30;
          int v32 = *((unsigned __int8 *)v30 + 8);
          BOOL v33 = v31 == 0x6461724778614D3CLL && v32 == 62;
          uint64_t v10 = (float *)(a1 + 152);
          if (!v33)
          {
LABEL_138:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v45 >= 0) {
              uint64_t v38 = &v44;
            }
            else {
              uint64_t v38 = (long long *)v44;
            }
            if (v45 >= 0) {
              uint64_t v39 = HIBYTE(v45);
            }
            else {
              uint64_t v39 = *((void *)&v44 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v10);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v7 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v44 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_1B1DEB4C0()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<NumCells>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<ProjectionLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxCell>");
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, "<NoPeep>");
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, "<OutputCellValues>");
  }
  return result;
}

void sub_1B1DEB6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(void *a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  BOOL v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v8, a2, a3, a4);
  BOOL v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3);
  if (a1[224])
  {
    uint64_t v12 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<signed char>::Write(v12, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  uint64_t v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  int v3 = kaldi::quasar::Vocab::VocabSize(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  BOOL v6 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  int v7 = kaldi::quasar::Vocab::VocabSize(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  int v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  uint64_t v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20);
    uint64_t v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1)
                                   + 16)
                       * v11);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v12 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    int v13 = kaldi::quasar::Vocab::VocabSize(v12);
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

const void **kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(unsigned char *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v6 = kaldi::quasar::Vocab::VocabSize(v5);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7) * v6;
  int v9 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v10 = kaldi::quasar::Vocab::VocabSize(v9);
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v12 = kaldi::QuantizedMatrixBase<short>::NumCols(v11) * v10;
  BOOL v29 = (char *)*a2;
  LODWORD(v30) = v8;
  int v13 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v29, v13);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v14 = v12 + v8;
  BOOL v29 = (char *)*a2 + 4 * v8;
  LODWORD(v30) = v12;
  BOOL v15 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v29, v15);
  if (a1[208])
  {
    int v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v16;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v18 = v17 + v14;
    BOOL v29 = (char *)*a2 + 4 * v14;
    LODWORD(v30) = v17;
    uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v29, v19);
    int v14 = v18;
  }
  int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  BOOL v29 = (char *)*a2 + 4 * v14;
  LODWORD(v30) = v20;
  BOOL v21 = (const void **)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  uint64_t result = kaldi::CuVectorBase<float>::CopyToVec<float>(v21, (uint64_t)&v29);
  if (a1[224])
  {
    int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v14;
    BOOL v24 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v25 = kaldi::quasar::Vocab::VocabSize(v24);
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v27 = kaldi::QuantizedMatrixBase<short>::NumCols(v26);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    BOOL v29 = (char *)*a2 + 4 * v23;
    uint64_t v30 = (v27 * v25);
    uint64_t v28 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    return (const void **)kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v29, v28);
  }
  return result;
}

const void **virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(void *a1, void **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams((unsigned char *)a1 + *(void *)(*a1 - 200), a2);
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(unsigned char *a1, char **a2)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  uint64_t v4 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v5 = kaldi::quasar::Vocab::VocabSize(v4);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumCols(v6) * v5;
  int v8 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v9 = kaldi::quasar::Vocab::VocabSize(v8);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v11 = kaldi::QuantizedMatrixBase<short>::NumCols(v10) * v9;
  int v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v27 = *a2;
  LODWORD(v28) = v7;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v12, &v27);
  int v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v14 = v11 + v7;
  int v27 = &(*a2)[4 * v7];
  LODWORD(v28) = v11;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v13, &v27);
  if (a1[208])
  {
    int v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v15;
    uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v27 = &(*a2)[4 * v14];
    LODWORD(v28) = v16;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v17, &v27);
    v14 += v16;
  }
  int v18 = (void *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v27 = &(*a2)[4 * v14];
  LODWORD(v28) = v19;
  uint64_t result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v18, (uint64_t)&v27);
  if (a1[224])
  {
    int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v14;
    uint64_t v22 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v23 = kaldi::quasar::Vocab::VocabSize(v22);
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v25 = kaldi::QuantizedMatrixBase<short>::NumCols(v24) * v23;
    uint64_t v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v27 = &(*a2)[4 * v21];
    LODWORD(v28) = v25;
    return (void *)kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v26, &v27);
  }
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(void *a1, char **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  uint64_t v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  double v3 = kaldi::QuantizedMatrixBase<signed char>::Sum(v2);
  float v4 = *(float *)&v3;
  int v5 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  double v6 = kaldi::QuantizedMatrixBase<signed char>::Sum(v5);
  float v7 = v4 + *(float *)&v6;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    float v7 = v7 + kaldi::CuMatrixBase<float>::Sum(v8);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    double v10 = kaldi::QuantizedMatrixBase<signed char>::Sum(v9);
    float v7 = v7 + *(float *)&v10;
  }
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  double v12 = kaldi::CuVectorBase<float>::Sum(v11);
  return v7 + *(float *)&v12;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  uint64_t v3 = kaldi::quasar::Vocab::VocabSize(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix(v6, v3, v5, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

void sub_1B1DEBFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v5 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  uint64_t v6 = kaldi::quasar::Vocab::VocabSize(v5);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  uint64_t v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)va, v6, v8, 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1B1DEC030()
{
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0) + 20);
    uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize(v13, v2, *(unsigned int *)(v3 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
    uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v13, 111, v1, 1.0);
  }
  uint64_t v5 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0) + 16);
  memset(&v12[1], 0, 24);
  v12[0] = &unk_1F0A517C0;
  kaldi::CuVector<float>::Resize((uint64_t)v12, v5, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v6, (uint64_t)v12, v1, 1.0);
  if (*(unsigned char *)(v0 + 224))
  {
    uint64_t v7 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    uint64_t v8 = kaldi::quasar::Vocab::VocabSize(v7);
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    uint64_t v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9);
    kaldi::CuMatrix<float>::Resize(v13, v8, v10, 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<signed char>::AddMat();
  }
  kaldi::CuVector<float>::~CuVector(v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_1B1DEC16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(void *a1)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 0);
  uint64_t v11 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v12 = kaldi::quasar::Vocab::VocabSize(v11);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13) * v12;
  int v15 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v16 = kaldi::quasar::Vocab::VocabSize(v15);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  int v18 = kaldi::QuantizedMatrixBase<short>::NumCols(v17);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = *a4;
  LODWORD(v40) = v14;
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v36, v19, 111);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v39, (uint64_t)&v36);
  int v20 = v18 * v16;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v36);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v21 = v20 + v14;
  uint64_t v36 = (uint64_t)*a4 + 4 * v14;
  LODWORD(v37) = v20;
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v22);
  if (a1[208])
  {
    int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    int v24 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v23;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v25 = v24 + v21;
    uint64_t v36 = (uint64_t)*a4 + 4 * v21;
    LODWORD(v37) = v24;
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v26);
    int v21 = v25;
  }
  int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = (uint64_t)*a4 + 4 * v21;
  LODWORD(v37) = v27;
  uint64_t v28 = (const void **)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v36);
  if (a1[224])
  {
    int v29 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v21;
    uint64_t v30 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v31 = kaldi::quasar::Vocab::VocabSize(v30);
    uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    int v33 = kaldi::QuantizedMatrixBase<short>::NumCols(v32);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = (uint64_t)*a4 + 4 * v29;
    uint64_t v37 = (v33 * v31);
    uint64_t v34 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v34);
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_1B1DEC4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v44);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v44, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v3);
  if ((v43 & 0x80u) == 0) {
    unint64_t v4 = v42;
  }
  else {
    unint64_t v4 = (void **)v42[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v5 = v43;
  }
  else {
    uint64_t v5 = (uint64_t)v42[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v8);
  if ((v41 & 0x80u) == 0) {
    uint64_t v9 = v40;
  }
  else {
    uint64_t v9 = (void **)v40[0];
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v10 = v41;
  }
  else {
    uint64_t v10 = (uint64_t)v40[1];
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13);
  if ((v39 & 0x80u) == 0) {
    int v14 = v38;
  }
  else {
    int v14 = (void **)v38[0];
  }
  if ((v39 & 0x80u) == 0) {
    uint64_t v15 = v39;
  }
  else {
    uint64_t v15 = (uint64_t)v38[1];
  }
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  uint64_t v19 = *(int *)(a1 + 176);
  uint64_t v34 = 0;
  uint64_t v20 = *(void *)(v18 + 8) + 4 * v19;
  uint64_t v32 = &unk_1F0A472D0;
  uint64_t v33 = v20;
  LODWORD(v34) = v19;
  uint64_t v35 = *(void *)(v18 + 24);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)&v32);
  if ((v37 & 0x80u) == 0) {
    int v21 = __p;
  }
  else {
    int v21 = (void **)__p[0];
  }
  if ((v37 & 0x80u) == 0) {
    uint64_t v22 = v37;
  }
  else {
    uint64_t v22 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v21, v22);
  if ((char)v37 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v39 < 0) {
    operator delete(v38[0]);
  }
  if ((char)v41 < 0) {
    operator delete(v40[0]);
  }
  if ((char)v43 < 0) {
    operator delete(v42[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v24);
    int v25 = v34 >= 0 ? &v32 : (void **)v32;
    uint64_t v26 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Projection weights:", 21);
    uint64_t v28 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<signed char>(v28);
    int v29 = v34 >= 0 ? &v32 : (void **)v32;
    uint64_t v30 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
  }
  std::stringbuf::str();
  v44[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v44 + *(void *)(v44[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v44[1] = MEMORY[0x1E4FBA470] + 16;
  if (v45 < 0) {
    operator delete((void *)v44[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v46);
}

void sub_1B1DECC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v101, 0, sizeof(v101));
    int v100 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v88, "\n For batch ");
        kaldi::quasar::to_string<int>();
        if ((v87 & 0x80u) == 0) {
          uint64_t v3 = v86;
        }
        else {
          uint64_t v3 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v4 = v87;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v86[1];
        }
        uint64_t v5 = std::string::append(&v88, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, ": ");
        if ((v85 & 0x80u) == 0) {
          uint64_t v7 = v84;
        }
        else {
          uint64_t v7 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v8 = v85;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v84[1];
        }
        uint64_t v9 = std::string::append(&v89, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Number of cells : ");
        if ((v83 & 0x80u) == 0) {
          uint64_t v11 = v82;
        }
        else {
          uint64_t v11 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v12 = v83;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v82[1];
        }
        uint64_t v13 = std::string::append(&v90, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::quasar::to_string<int>();
        if ((v81 & 0x80u) == 0) {
          uint64_t v15 = v80;
        }
        else {
          uint64_t v15 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v16 = v81;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v80[1];
        }
        uint64_t v17 = std::string::append(&v91, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Input weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          uint64_t v19 = v78;
        }
        else {
          uint64_t v19 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v20 = v79;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v78[1];
        }
        int v21 = std::string::append(&v92, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v77 & 0x80u) == 0) {
          uint64_t v24 = v76;
        }
        else {
          uint64_t v24 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v25 = v77;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v76[1];
        }
        uint64_t v26 = std::string::append(&v93, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Recurrent weights gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v28 = v74;
        }
        else {
          uint64_t v28 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v29 = v75;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v74[1];
        }
        uint64_t v30 = std::string::append(&v94, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v73 & 0x80u) == 0) {
          uint64_t v33 = v72;
        }
        else {
          uint64_t v33 = (void **)v72[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v34 = v73;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v72[1];
        }
        uint64_t v35 = std::string::append(&v95, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v70, "\n  Bias gradient: ");
        if ((v71 & 0x80u) == 0) {
          unsigned __int8 v37 = v70;
        }
        else {
          unsigned __int8 v37 = (void **)v70[0];
        }
        if ((v71 & 0x80u) == 0) {
          std::string::size_type v38 = v71;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v70[1];
        }
        unsigned __int8 v39 = std::string::append(&v96, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v41);
        if ((v69 & 0x80u) == 0) {
          uint64_t v42 = __p;
        }
        else {
          uint64_t v42 = (void **)__p[0];
        }
        if ((v69 & 0x80u) == 0) {
          std::string::size_type v43 = v69;
        }
        else {
          std::string::size_type v43 = (std::string::size_type)__p[1];
        }
        long long v44 = std::string::append(&v97, (const std::string::value_type *)v42, v43);
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        int64_t v99 = v44->__r_.__value_.__r.__words[2];
        long long v98 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (v99 >= 0) {
          uint64_t v46 = (const std::string::value_type *)&v98;
        }
        else {
          uint64_t v46 = (const std::string::value_type *)v98;
        }
        if (v99 >= 0) {
          std::string::size_type v47 = HIBYTE(v99);
        }
        else {
          std::string::size_type v47 = *((void *)&v98 + 1);
        }
        std::string::append(&v101, v46, v47);
        if (SHIBYTE(v99) < 0) {
          operator delete((void *)v98);
        }
        if ((char)v69 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v71 < 0) {
          operator delete(v70[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v73 < 0) {
          operator delete(v72[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Peephole weights gradient: ");
          uint64_t v48 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v48);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v49 = &v96;
          }
          else {
            uint64_t v49 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v96.__r_.__value_.__l.__size_;
          }
          uint64_t v51 = std::string::append(&v97, (const std::string::value_type *)v49, size);
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          int64_t v99 = v51->__r_.__value_.__r.__words[2];
          long long v98 = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0) {
            long long v53 = (const std::string::value_type *)&v98;
          }
          else {
            long long v53 = (const std::string::value_type *)v98;
          }
          if (v99 >= 0) {
            std::string::size_type v54 = HIBYTE(v99);
          }
          else {
            std::string::size_type v54 = *((void *)&v98 + 1);
          }
          std::string::append(&v101, v53, v54);
          if (SHIBYTE(v99) < 0) {
            operator delete((void *)v98);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Projection weights gradient: ");
          uint64_t v55 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v55);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v56 = &v96;
          }
          else {
            long long v56 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v57 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v57 = v96.__r_.__value_.__l.__size_;
          }
          uint64_t v58 = std::string::append(&v97, (const std::string::value_type *)v56, v57);
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          int64_t v99 = v58->__r_.__value_.__r.__words[2];
          long long v98 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0) {
            uint64_t v60 = (const std::string::value_type *)&v98;
          }
          else {
            uint64_t v60 = (const std::string::value_type *)v98;
          }
          if (v99 >= 0) {
            std::string::size_type v61 = HIBYTE(v99);
          }
          else {
            std::string::size_type v61 = *((void *)&v98 + 1);
          }
          std::string::append(&v101, v60, v61);
          if (SHIBYTE(v99) < 0) {
            operator delete((void *)v98);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
        }
        ++v100;
      }
      while (v100 < *(_DWORD *)(a1 + 80));
    }
    std::string v62 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v98, "\n");
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v63 = &v101;
    }
    else {
      int v63 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v64 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v64 = v101.__r_.__value_.__l.__size_;
    }
    int v65 = std::string::insert(v62, 0, (const std::string::value_type *)v63, v64);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v99) < 0) {
      operator delete((void *)v98);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1B1DED44C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        uint64_t v11 = v70;
      }
      else {
        uint64_t v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      uint64_t v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      uint64_t v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      int v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      unsigned __int8 v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        unsigned __int8 v39 = __p;
      }
      else {
        unsigned __int8 v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      uint64_t v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        std::string::size_type v43 = (const std::string::value_type *)&v86;
      }
      else {
        std::string::size_type v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v45 = &v84;
        }
        else {
          long long v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          uint64_t v49 = (const std::string::value_type *)&v86;
        }
        else {
          uint64_t v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  uint64_t v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v52 = &v89;
  }
  else {
    long long v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  std::string::size_type v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_1B1DEDD2C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B1DEDF38()
{
}

void sub_1B1DEDF40()
{
}

void sub_1B1DEDF48()
{
}

void sub_1B1DEDF50()
{
}

void sub_1B1DEDF58()
{
}

void sub_1B1DEDF60()
{
}

void sub_1B1DEDF68()
{
}

void sub_1B1DEDF70()
{
}

void sub_1B1DEDF78()
{
}

void sub_1B1DEDF80()
{
}

void sub_1B1DEDF88()
{
}

void sub_1B1DEDF90()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v11 = v58;
      }
      else {
        uint64_t v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      uint64_t v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      uint64_t v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      int v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v37 = &v70;
        }
        else {
          unsigned __int8 v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        unsigned __int8 v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          uint64_t v41 = (const std::string::value_type *)&v72;
        }
        else {
          uint64_t v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  uint64_t v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_1B1DEE51C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B1DEE6E8()
{
}

void sub_1B1DEE6F0()
{
}

void sub_1B1DEE6F8()
{
}

void sub_1B1DEE700()
{
}

void sub_1B1DEE708()
{
}

void sub_1B1DEE710()
{
}

void sub_1B1DEE718()
{
}

void sub_1B1DEE720()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  uint64_t v9 = *(unsigned int *)(a1 + 96);
  uint64_t v130 = ((int)v8 / (int)v9);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v161, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v161, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    long long v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v161);
  }
  uint64_t v13 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(v7, a4, v8, v13);
  uint64_t v14 = *(void *)(v7 + 104);
  if (*(void *)(v7 + 112) == v14 || *(int *)(v14 + 32 * a4 + 16) < 1)
  {
    int v125 = 0;
  }
  else
  {
    uint64_t v15 = (int32x2_t *)(*(void *)(v7 + 128) + 48 * a4);
    int v15[4] = (int32x2_t)v13;
    int v125 = 1;
    kaldi::CuMatrix<float>::Resize(v15, v9, *(unsigned int *)(*(void *)(v7 + 8) + 48 * a4 + 16), 1, 0);
  }
  uint64_t v16 = *(void *)(v7 + 248) + 48 * a4;
  uint64_t v131 = *(void *)(v7 + 344) + 48 * a4;
  uint64_t v17 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(v7);
  LODWORD(v18) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v16, a2, 111, v17, 112, v18, 0.0);
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v7);
  kaldi::CuMatrixBase<float>::AddVecToRows(v16, v19, 1.0, 1.0);
  if ((int)v130 >= 1)
  {
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v126 = v7 + 12;
    uint64_t v129 = (int)v9;
    uint64_t v22 = -(uint64_t)(int)v9;
    int v124 = -(int)v9;
    uint64_t v127 = v7;
    int v128 = v9;
    do
    {
      uint64_t v132 = v22;
      unsigned int v23 = *(_DWORD *)(v16 + 24);
      uint64_t v24 = *(void *)(v16 + 8) + 4 * (int)(v23 * v20);
      int v25 = *(_DWORD *)(v16 + 28) - v23 * v20;
      uint64_t v26 = *(void *)(v16 + 32);
      DWORD2(v162) = *(_DWORD *)(v7 + 176);
      HIDWORD(v162) = v9;
      *(void *)&long long v163 = __PAIR64__(v25, v23);
      *((void *)&v163 + 1) = v26;
      *(void *)&long long v162 = v24;
      v161 = &unk_1F0A472A0;
      unsigned int v27 = *(_DWORD *)(v16 + 24);
      uint64_t v28 = *(void *)(v16 + 8) + 4 * (int)(v27 * v20) + 4 * DWORD2(v162);
      int v29 = *(_DWORD *)(v16 + 28) - DWORD2(v162) - v27 * v20;
      uint64_t v30 = *(void *)(v16 + 32);
      *((void *)&v159 + 1) = __PAIR64__(v9, DWORD2(v162));
      *(void *)&long long v160 = __PAIR64__(v29, v27);
      *((void *)&v160 + 1) = v30;
      *(void *)&long long v159 = v28;
      uint64_t v158 = &unk_1F0A472A0;
      unsigned int v31 = *(_DWORD *)(v16 + 24);
      uint64_t v32 = *(void *)(v16 + 8) + 4 * (int)(v31 * v20) + 4 * (3 * DWORD2(v162));
      LODWORD(v28) = *(_DWORD *)(v16 + 28) - v31 * v20 - 3 * DWORD2(v162);
      uint64_t v33 = *(void *)(v16 + 32);
      *((void *)&v156 + 1) = __PAIR64__(v9, DWORD2(v162));
      *(void *)&long long v157 = __PAIR64__(v28, v31);
      *((void *)&v157 + 1) = v33;
      *(void *)&long long v156 = v32;
      long long v155 = &unk_1F0A472A0;
      uint64_t v34 = *(void *)(v7 + 272) + 48 * a4;
      LODWORD(v32) = *(_DWORD *)(v34 + 16);
      LODWORD(v33) = *(_DWORD *)(v34 + 24);
      uint64_t v35 = *(void *)(v34 + 8) + 4 * (int)(v33 * v20);
      unsigned int v36 = *(_DWORD *)(v34 + 28) - v33 * v20;
      uint64_t v37 = *(void *)(v34 + 32);
      *((void *)&v153 + 1) = __PAIR64__(v9, v32);
      *(void *)&long long v154 = __PAIR64__(v36, v33);
      *((void *)&v154 + 1) = v37;
      unint64_t v152 = &unk_1F0A472A0;
      *(void *)&long long v153 = v35;
      long long v150 = 0u;
      long long v151 = 0u;
      uint64_t v149 = &unk_1F0A472A0;
      long long v147 = 0u;
      long long v148 = 0u;
      std::string::size_type v146 = &unk_1F0A472A0;
      uint64_t v133 = v21;
      if (v21)
      {
        if (v125)
        {
          int v38 = a4;
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(v7 + 128) + 48 * a4);
          uint64_t v39 = *(void *)(v7 + 128) + 48 * a4;
          uint64_t v40 = *(void *)(v39 + 8);
          unsigned int v41 = *(_DWORD *)(v39 + 20);
          unsigned int v42 = *(_DWORD *)(v39 + 24);
          unsigned int v43 = *(_DWORD *)(v39 + 28);
          uint64_t v44 = *(void *)(v39 + 32);
          DWORD2(v144) = *(_DWORD *)(v7 + 176);
          *(void *)&long long v147 = v40;
          *((void *)&v147 + 1) = __PAIR64__(v41, DWORD2(v144));
          *(void *)&long long v148 = __PAIR64__(v43, v42);
          *((void *)&v148 + 1) = v44;
          std::string v143 = &unk_1F0A472A0;
          long long v144 = 0u;
          long long v145 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
          uint64_t v45 = *(void *)(v7 + 272) + 48 * a4;
          unsigned int v46 = *(_DWORD *)(v45 + 16);
          unsigned int v47 = *(_DWORD *)(v45 + 24);
          uint64_t v48 = *(void *)(v45 + 8) + 4 * (int)(v47 * (v124 + v20));
          int v49 = *(_DWORD *)(v45 + 28) - v47 * (v124 + v20);
          uint64_t v50 = *(void *)(v45 + 32);
          *((void *)&v144 + 1) = __PAIR64__(v9, v46);
          *(void *)&long long v145 = __PAIR64__(v49, v47);
          *((void *)&v145 + 1) = v50;
          std::string v143 = &unk_1F0A472A0;
          *(void *)&long long v144 = v48;
          uint64_t v51 = *(void *)(v7 + 104) + 32 * a4;
          *((void *)&v141 + 1) = 0;
          int v140 = &unk_1F0A472D0;
          *(void *)&long long v141 = *(void *)(v51 + 8) + 4 * v20;
          DWORD2(v141) = v9;
          *(void *)&long long v142 = *(void *)(v51 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v146, (uint64_t)&v143, (uint64_t)&v140, 1);
          std::string v143 = &unk_1F0A472A0;
          long long v144 = 0u;
          long long v145 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
          uint64_t v52 = *(void *)(v7 + 128) + 48 * a4;
          uint64_t v53 = *(int *)(v7 + 176);
          unsigned int v54 = *(_DWORD *)(v52 + 20);
          unsigned int v55 = *(_DWORD *)(v52 + 24);
          uint64_t v56 = *(void *)(v52 + 8) + 4 * v53;
          LODWORD(v53) = *(_DWORD *)(v52 + 28) - v53;
          uint64_t v57 = *(void *)(v52 + 32);
          DWORD2(v144) = *(_DWORD *)(v126 + *(void *)(*(void *)v7 - 24));
          *(void *)&long long v150 = v56;
          *((void *)&v150 + 1) = __PAIR64__(v54, DWORD2(v144));
          *(void *)&long long v151 = __PAIR64__(v53, v55);
          *((void *)&v151 + 1) = v57;
          std::string v143 = &unk_1F0A472A0;
          long long v144 = 0u;
          long long v145 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
          unsigned int v58 = *(_DWORD *)(v131 + 24);
          uint64_t v59 = *(void *)(v131 + 8) + 4 * (int)(v58 * (v124 + v20));
          int v60 = *(_DWORD *)(v131 + 28) - v58 * (v124 + v20);
          uint64_t v61 = *(void *)(v131 + 32);
          DWORD2(v144) = *(_DWORD *)(v131 + 16);
          HIDWORD(v144) = v9;
          *(void *)&long long v145 = __PAIR64__(v60, v58);
          *((void *)&v145 + 1) = v61;
          std::string v143 = &unk_1F0A472A0;
          *(void *)&long long v144 = v59;
          uint64_t v62 = *(void *)(v7 + 104) + 32 * a4;
          *((void *)&v141 + 1) = 0;
          int v140 = &unk_1F0A472D0;
          *(void *)&long long v141 = *(void *)(v62 + 8) + 4 * v20;
          DWORD2(v141) = v9;
          *(void *)&long long v142 = *(void *)(v62 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v149, (uint64_t)&v143, (uint64_t)&v140, 1);
        }
        else
        {
          unsigned int v75 = *(_DWORD *)(v131 + 16);
          unsigned int v76 = *(_DWORD *)(v131 + 24);
          int v77 = *(_DWORD *)(v131 + 28) - v76 * (v124 + v20);
          uint64_t v78 = *(void *)(v131 + 32);
          *(void *)&long long v150 = *(void *)(v131 + 8) + 4 * (int)(v76 * (v124 + v20));
          *((void *)&v150 + 1) = __PAIR64__(v9, v75);
          *(void *)&long long v151 = __PAIR64__(v77, v76);
          *((void *)&v151 + 1) = v78;
          std::string v143 = &unk_1F0A472A0;
          long long v144 = 0uLL;
          long long v145 = 0uLL;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
          int v38 = a4;
          uint64_t v79 = *(void *)(v7 + 272) + 48 * a4;
          unsigned int v80 = *(_DWORD *)(v79 + 16);
          unsigned int v81 = *(_DWORD *)(v79 + 24);
          uint64_t v82 = *(void *)(v79 + 8) + 4 * (int)(v81 * (v124 + v20));
          int v83 = *(_DWORD *)(v79 + 28) - v81 * (v124 + v20);
          uint64_t v84 = *(void *)(v79 + 32);
          *(void *)&long long v147 = v82;
          *((void *)&v147 + 1) = __PAIR64__(v9, v80);
          *(void *)&long long v148 = __PAIR64__(v83, v81);
          *((void *)&v148 + 1) = v84;
        }
        std::string v143 = &unk_1F0A472A0;
        long long v144 = 0u;
        long long v145 = 0u;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      }
      else
      {
        uint64_t v63 = *(void *)(v7 + 8) + 48 * a4;
        unsigned int v64 = *(_DWORD *)(v63 + 20);
        unsigned int v65 = *(_DWORD *)(v63 + 24);
        uint64_t v66 = *(void *)(v63 + 8) + 4 * DWORD2(v162);
        int v67 = *(_DWORD *)(v63 + 28) - DWORD2(v162);
        uint64_t v68 = *(void *)(v63 + 32);
        DWORD2(v144) = *(_DWORD *)(v126 + *(void *)(*(void *)v7 - 24));
        *(void *)&long long v150 = v66;
        *((void *)&v150 + 1) = __PAIR64__(v64, DWORD2(v144));
        *(void *)&long long v151 = __PAIR64__(v67, v65);
        *((void *)&v151 + 1) = v68;
        std::string v143 = &unk_1F0A472A0;
        long long v144 = 0uLL;
        long long v145 = 0uLL;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
        uint64_t v69 = *(void *)(v7 + 8) + 48 * a4;
        uint64_t v70 = *(void *)(v69 + 8);
        unsigned int v71 = *(_DWORD *)(v69 + 20);
        unsigned int v72 = *(_DWORD *)(v69 + 24);
        unsigned int v73 = *(_DWORD *)(v69 + 28);
        uint64_t v74 = *(void *)(v69 + 32);
        DWORD2(v144) = *(_DWORD *)(v7 + 176);
        *(void *)&long long v147 = v70;
        *((void *)&v147 + 1) = __PAIR64__(v71, DWORD2(v144));
        *(void *)&long long v148 = __PAIR64__(v73, v72);
        *((void *)&v148 + 1) = v74;
        std::string v143 = &unk_1F0A472A0;
        long long v144 = 0u;
        long long v145 = 0u;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
        int v38 = a4;
      }
      unsigned int v85 = *(_DWORD *)(v16 + 24);
      uint64_t v86 = *(void *)(v16 + 8) + 4 * (int)(v85 * v20);
      int v87 = *(_DWORD *)(v16 + 28) - v85 * v20;
      uint64_t v88 = *(void *)(v16 + 32);
      DWORD2(v144) = *(_DWORD *)(v16 + 16);
      HIDWORD(v144) = v9;
      *(void *)&long long v145 = __PAIR64__(v87, v85);
      *((void *)&v145 + 1) = v88;
      std::string v143 = &unk_1F0A472A0;
      *(void *)&long long v144 = v86;
      std::string v89 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v7);
      LODWORD(v90) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v143, (uint64_t)&v149, 111, v89, 112, v90, 1.0);
      std::string v143 = &unk_1F0A472A0;
      long long v144 = 0u;
      long long v145 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      if (*(unsigned char *)(v7 + 208))
      {
        uint64_t v91 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v7);
        unsigned int v92 = *(_DWORD *)(v91 + 16);
        uint64_t v93 = *(void *)(v91 + 32);
        *(void *)&long long v144 = *(void *)(v91 + 8);
        std::string v143 = &unk_1F0A472D0;
        *((void *)&v144 + 1) = v92;
        *(void *)&long long v145 = v93;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v161, (uint64_t)&v146, 111, (uint64_t)&v143, 1.0, 1.0);
        uint64_t v94 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v7);
        unsigned int v95 = *(_DWORD *)(v94 + 16);
        uint64_t v96 = *(void *)(v94 + 32);
        *(void *)&long long v144 = *(void *)(v94 + 8) + 4 * *(int *)(v94 + 24);
        std::string v143 = &unk_1F0A472D0;
        *((void *)&v144 + 1) = v95;
        *(void *)&long long v145 = v96;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v158, (uint64_t)&v146, 111, (uint64_t)&v143, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v161, (uint64_t)&v161);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v158, (uint64_t)&v158);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v155);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v152, (uint64_t)&v161, 111, (uint64_t)&v155, 111, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v152, (uint64_t)&v158, 111, (uint64_t)&v146, 111, 1.0, 1.0);
      float v97 = *(float *)(v7 + 476);
      if (v97 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v152, v97);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v152, -*(float *)(v7 + 476));
      }
      uint64_t v98 = *(int *)(v7 + 176);
      unsigned int v99 = *(_DWORD *)(v16 + 24);
      uint64_t v100 = *(void *)(v16 + 8) + 4 * (int)(v99 * v20) + 8 * v98;
      unsigned int v101 = *(_DWORD *)(v16 + 28) - (v99 * v20 + 2 * v98);
      uint64_t v102 = *(void *)(v16 + 32);
      DWORD2(v144) = *(_DWORD *)(v7 + 176);
      HIDWORD(v144) = v9;
      *(void *)&long long v145 = __PAIR64__(v101, v99);
      *((void *)&v145 + 1) = v102;
      std::string v143 = &unk_1F0A472A0;
      *(void *)&long long v144 = v100;
      if (*(unsigned char *)(v7 + 208))
      {
        uint64_t v103 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v7);
        unsigned int v104 = *(_DWORD *)(v103 + 16);
        uint64_t v105 = *(void *)(v103 + 32);
        *(void *)&long long v141 = *(void *)(v103 + 8) + 8 * *(int *)(v103 + 24);
        int v140 = &unk_1F0A472D0;
        *((void *)&v141 + 1) = v104;
        *(void *)&long long v142 = v105;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v143, (uint64_t)&v152, 111, (uint64_t)&v140, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v143, (uint64_t)&v143);
      uint64_t v106 = *(void *)(v7 + 296) + 48 * v38;
      unsigned int v107 = *(_DWORD *)(v106 + 16);
      unsigned int v108 = *(_DWORD *)(v106 + 24);
      uint64_t v109 = *(void *)(v106 + 8) + 4 * (int)(v108 * v20);
      int v110 = *(_DWORD *)(v106 + 28) - v108 * v20;
      uint64_t v111 = *(void *)(v106 + 32);
      *((void *)&v141 + 1) = __PAIR64__(v9, v107);
      *(void *)&long long v142 = __PAIR64__(v110, v108);
      *((void *)&v142 + 1) = v111;
      int v140 = &unk_1F0A472A0;
      *(void *)&long long v141 = v109;
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v140, (uint64_t)&v152);
      uint64_t v112 = *(void *)(v7 + 320) + 48 * v38;
      unsigned int v113 = *(_DWORD *)(v112 + 16);
      unsigned int v114 = *(_DWORD *)(v112 + 24);
      uint64_t v115 = *(void *)(v112 + 8) + 4 * (int)(v114 * v20);
      int v116 = *(_DWORD *)(v112 + 28) - v114 * v20;
      uint64_t v117 = *(void *)(v112 + 32);
      *((void *)&v138 + 1) = __PAIR64__(v9, v113);
      *(void *)&long long v139 = __PAIR64__(v116, v114);
      *((void *)&v139 + 1) = v117;
      unint64_t v137 = &unk_1F0A472A0;
      *(void *)&long long v138 = v115;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v137, (uint64_t)&v143, 111, (uint64_t)&v140, 111, 1.0, 0.0);
      unsigned int v118 = *(_DWORD *)(v131 + 24);
      uint64_t v119 = *(void *)(v131 + 8) + 4 * (int)(v118 * v20);
      int v120 = *(_DWORD *)(v131 + 28) - v118 * v20;
      uint64_t v121 = *(void *)(v131 + 32);
      if (*(unsigned char *)(v7 + 224))
      {
        DWORD2(v135) = *(_DWORD *)(v131 + 16);
        HIDWORD(v135) = v9;
        *(void *)&long long v136 = __PAIR64__(v120, v118);
        *((void *)&v136 + 1) = v121;
        uint64_t v134 = &unk_1F0A472A0;
        *(void *)&long long v135 = v119;
        int v122 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v7);
        LODWORD(v123) = 1.0;
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v134, (uint64_t)&v137, 111, v122, 112, v123, 0.0);
      }
      else
      {
        DWORD2(v135) = *(_DWORD *)(v131 + 16);
        HIDWORD(v135) = v9;
        *(void *)&long long v136 = __PAIR64__(v120, v118);
        *((void *)&v136 + 1) = v121;
        uint64_t v134 = &unk_1F0A472A0;
        *(void *)&long long v135 = v119;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v134, (uint64_t)&v137, 111);
      }
      uint64_t v134 = &unk_1F0A472A0;
      long long v135 = 0u;
      long long v136 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v134);
      unint64_t v137 = &unk_1F0A472A0;
      long long v138 = 0u;
      long long v139 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v137);
      int v140 = &unk_1F0A472A0;
      long long v141 = 0u;
      long long v142 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
      std::string v143 = &unk_1F0A472A0;
      long long v144 = 0u;
      long long v145 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      std::string::size_type v146 = &unk_1F0A472A0;
      long long v147 = 0u;
      long long v148 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
      uint64_t v149 = &unk_1F0A472A0;
      long long v150 = 0u;
      long long v151 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
      unint64_t v152 = &unk_1F0A472A0;
      long long v153 = 0u;
      long long v154 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
      long long v155 = &unk_1F0A472A0;
      long long v156 = 0u;
      long long v157 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
      uint64_t v158 = &unk_1F0A472A0;
      long long v159 = 0u;
      long long v160 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
      v161 = &unk_1F0A472A0;
      long long v162 = 0u;
      long long v163 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v161);
      uint64_t v21 = v133 + 1;
      LODWORD(v9) = v128;
      v20 += v128;
      uint64_t v22 = v132 + v129;
      uint64_t v7 = v127;
    }
    while (v130 != v133 + 1);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, v131, 111);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(v7, a4);
}

void sub_1B1DEF638(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 248) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 272) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 296) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 320) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 344) + 48 * a2), a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1B1DEF968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v26, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v26);
  }
  uint64_t v4 = *(void *)(a1 + 272) + 48 * a2;
  unsigned int v5 = *(_DWORD *)(a1 + 96);
  unsigned int v6 = *(_DWORD *)(v4 + 20) - v5;
  uint64_t v7 = *(void *)(a1 + 8) + 48 * a2;
  int v8 = *(_DWORD *)(a1 + 176);
  int v9 = *(_DWORD *)(v7 + 28);
  uint64_t v10 = *(void *)(v7 + 32);
  v27[0] = *(void *)(v7 + 8);
  LODWORD(v27[1]) = v8;
  *(void *)((char *)&v27[1] + 4) = *(void *)(v7 + 20);
  HIDWORD(v27[2]) = v9;
  v27[3] = v10;
  uint64_t v26 = &unk_1F0A472A0;
  LODWORD(v7) = *(_DWORD *)(v4 + 16);
  unsigned int v11 = *(_DWORD *)(v4 + 24);
  uint64_t v12 = *(void *)(v4 + 8) + 4 * (int)(v11 * v6);
  int v13 = *(_DWORD *)(v4 + 28) - v11 * v6;
  uint64_t v14 = *(void *)(v4 + 32);
  *((void *)&v24 + 1) = __PAIR64__(v5, v7);
  *(void *)&long long v25 = __PAIR64__(v13, v11);
  *((void *)&v25 + 1) = v14;
  unsigned int v23 = &unk_1F0A472A0;
  *(void *)&long long v24 = v12;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v26, (uint64_t)&v23, 111);
  unsigned int v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  uint64_t v26 = &unk_1F0A472A0;
  memset(v27, 0, sizeof(v27));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
  uint64_t v15 = *(void *)(a1 + 8) + 48 * a2;
  uint64_t v16 = *(int *)(a1 + 176);
  int v17 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  uint64_t v18 = *(void *)(v15 + 8) + 4 * v16;
  LODWORD(v16) = *(_DWORD *)(v15 + 28) - v16;
  uint64_t v19 = *(void *)(v15 + 32);
  v27[0] = v18;
  LODWORD(v27[1]) = v17;
  *(void *)((char *)&v27[1] + 4) = *(void *)(v15 + 20);
  HIDWORD(v27[2]) = v16;
  v27[3] = v19;
  uint64_t v26 = &unk_1F0A472A0;
  uint64_t v20 = *(void *)(a1 + 344) + 48 * a2;
  LODWORD(v16) = *(_DWORD *)(v20 + 16);
  LODWORD(v18) = *(_DWORD *)(v20 + 24);
  uint64_t v21 = *(void *)(v20 + 8) + 4 * (int)(v18 * v6);
  LODWORD(v19) = *(_DWORD *)(v20 + 28) - v18 * v6;
  uint64_t v22 = *(void *)(v20 + 32);
  *((void *)&v24 + 1) = __PAIR64__(*(_DWORD *)(a1 + 96), v16);
  *(void *)&long long v25 = __PAIR64__(v19, v18);
  *((void *)&v25 + 1) = v22;
  unsigned int v23 = &unk_1F0A472A0;
  *(void *)&long long v24 = v21;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v26, (uint64_t)&v23, 111);
  unsigned int v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  uint64_t v26 = &unk_1F0A472A0;
  memset(v27, 0, sizeof(v27));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
}

void sub_1B1DEFC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v5 = *(void *)(a3 + 24);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers((uint64_t)a1, 0, 1, v5);
  uint64_t v6 = a1[13];
  if (a1[14] != v6 && *(int *)(v6 + 16) >= 1)
  {
    uint64_t v7 = (int32x2_t *)a1[16];
    void v7[4] = (int32x2_t)v5;
    kaldi::CuMatrix<float>::Resize(v7, 1, *(unsigned int *)(a1[1] + 16), 1, 0);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::CuVectorBase<float>::AddMatVec<signed char>();
}

void sub_1B1DEFDDC()
{
  uint64_t v2 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v1 - 80, v2, 1.0, 1.0);
  uint64_t v3 = *(int *)(v0 + 176);
  uint64_t v4 = *(void *)(v1 - 72);
  uint64_t v5 = *(void *)(v1 - 56);
  *(void *)(v1 - 1--*(_DWORD *)(a9 + 52) = v5;
  *(void *)(v1 - 144) = &unk_1F0A472D0;
  *(void *)(v1 - 136) = v4;
  *(void *)(v1 - 128) = 0;
  *(_DWORD *)(v1 - 128) = v3;
  *(void *)(v1 - 120) = v5;
  *(void *)(v1 - 176) = &unk_1F0A472D0;
  *(void *)(v1 - 168) = v4 + 4 * v3;
  *(void *)(v1 - 160) = 0;
  *(_DWORD *)(v1 - 160) = v3;
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v0);
  kaldi::CuVectorBase<float>::AddMatVec<signed char>();
}

void sub_1B1DEFFA4()
{
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    int v4 = *(_DWORD *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v28 = *(void *)(v3 + 8);
    int v30 = 0;
    unsigned int v27 = &unk_1F0A472D0;
    int v29 = v4;
    uint64_t v31 = v5;
    kaldi::CuVectorBase<float>::AddVecVec(v2 - 144, (uint64_t)v32, (uint64_t)&v27, 1.0, 1.0);
    uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    int v7 = *(_DWORD *)(v6 + 16);
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v28 = *(void *)(v6 + 8) + 4 * *(int *)(v6 + 24);
    int v30 = 0;
    unsigned int v27 = &unk_1F0A472D0;
    int v29 = v7;
    uint64_t v31 = v8;
    kaldi::CuVectorBase<float>::AddVecVec(v2 - 176, (uint64_t)v32, (uint64_t)&v27, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid(v2 - 144, v2 - 144);
  kaldi::CuVectorBase<float>::Sigmoid(v2 - 176, v2 - 176);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)v34);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v33, v2 - 144, (uint64_t)v34, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v33, (uint64_t)v32, v2 - 176, 1.0, 1.0);
  float v9 = *(float *)(v0 + 476);
  if (v9 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v33, v9);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v33, -*(float *)(v0 + 476));
  }
  uint64_t v10 = *(int *)(v0 + 176);
  uint64_t v11 = *(void *)(v2 - 56);
  uint64_t v12 = *(void *)(v2 - 72) + 8 * v10;
  unsigned int v27 = &unk_1F0A472D0;
  uint64_t v28 = v12;
  int v30 = 0;
  int v29 = v10;
  uint64_t v31 = v11;
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    unsigned int v14 = *(_DWORD *)(v13 + 16);
    uint64_t v15 = *(void *)(v13 + 32);
    uint64_t v24 = *(void *)(v13 + 8) + 8 * *(int *)(v13 + 24);
    unsigned int v23 = &unk_1F0A472D0;
    uint64_t v25 = v14;
    uint64_t v26 = v15;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v27, (uint64_t)v33, (uint64_t)&v23, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v27, (uint64_t)&v27);
  uint64_t v16 = *(void *)(v0 + 296);
  uint64_t v25 = 0;
  uint64_t v17 = *(void *)(v16 + 8);
  unsigned int v23 = &unk_1F0A472D0;
  uint64_t v24 = v17;
  LODWORD(v25) = *(_DWORD *)(v16 + 16);
  uint64_t v26 = *(void *)(v16 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v23, (uint64_t)v33);
  uint64_t v18 = *(void *)(v0 + 320);
  uint64_t v21 = 0;
  uint64_t v19 = *(void *)(v18 + 8);
  v20[0] = &unk_1F0A472D0;
  v20[1] = v19;
  LODWORD(v21) = *(_DWORD *)(v18 + 16);
  uint64_t v22 = *(void *)(v18 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v20, (uint64_t)&v27, (uint64_t)&v23, 1.0, 0.0);
  if (*(unsigned char *)(v0 + 224))
  {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    kaldi::CuVectorBase<float>::AddMatVec<signed char>();
  }
  kaldi::CuVectorBase<float>::CopyFromVec((void *)(v2 - 112), (uint64_t)v20);
  kaldi::CuVectorBase<float>::CopyFromVec(v1, v2 - 112);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(v0, 0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc();
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8 = a1;
  uint64_t v9 = *(unsigned int *)(a2 + 20);
  uint64_t v10 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v161, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v161);
  }
  uint64_t v127 = ((int)v9 / (int)v10);
  uint64_t v14 = a5;
  if (!a5) {
    uint64_t v14 = a4;
  }
  uint64_t v15 = *(void *)(v14 + 32);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(v8, a6, v9, v15);
  uint64_t v16 = a6;
  uint64_t v17 = 3 * a6;
  uint64_t v18 = *(void *)(v8 + 248) + 48 * a6;
  uint64_t v123 = *(void *)(v8 + 440) + 16 * v17;
  int v122 = (int *)(*(void *)(v8 + 368) + 16 * v17);
  uint64_t v128 = *(void *)(v8 + 416);
  uint64_t v19 = *(void *)(v8 + 104);
  uint64_t v126 = v16;
  if (*(void *)(v8 + 112) == v19 || *(int *)(v19 + 32 * v16 + 16) < 1)
  {
    int v125 = 0;
    uint64_t v21 = *(void *)(v8 + 440) + 16 * v17;
  }
  else
  {
    uint64_t v20 = (int32x2_t *)(*(void *)(v8 + 128) + 48 * (int)v16);
    int v20[4] = (int32x2_t)v15;
    uint64_t v21 = v123;
    int v125 = 1;
    kaldi::CuMatrix<float>::Resize(v20, v10, *(unsigned int *)(v123 + 16), 1, 0);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v122, a4, 111);
  uint64_t v22 = *(int *)(v8 + 176);
  int v23 = *(_DWORD *)(v18 + 28);
  uint64_t v24 = *(void *)(v18 + 32);
  v161[1] = *(void *)(v18 + 8);
  LODWORD(v161[2]) = v22;
  *(void *)((char *)&v161[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v161[3]) = v23;
  v161[4] = v24;
  v161[0] = &unk_1F0A472A0;
  int v25 = *(_DWORD *)(v18 + 28) - v22;
  uint64_t v26 = *(void *)(v18 + 32);
  v160[1] = *(void *)(v18 + 8) + 4 * v22;
  LODWORD(v160[2]) = v22;
  *(void *)((char *)&v160[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v160[3]) = v25;
  v160[4] = v26;
  v160[0] = &unk_1F0A472A0;
  int v27 = *(_DWORD *)(v18 + 28) - 2 * v22;
  uint64_t v28 = *(void *)(v18 + 32);
  v159[1] = *(void *)(v18 + 8) + 8 * v22;
  LODWORD(v159[2]) = v22;
  *(void *)((char *)&v159[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v159[3]) = v27;
  v159[4] = v28;
  v159[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v18 + 28) - 3 * v22;
  uint64_t v29 = *(void *)(v18 + 32);
  v158[1] = *(void *)(v18 + 8) + 4 * (3 * v22);
  LODWORD(v158[2]) = v22;
  *(void *)((char *)&v158[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v158[3]) = v28;
  v158[4] = v29;
  v158[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28);
  uint64_t v30 = *(void *)(v21 + 32);
  v157[1] = *(void *)(v21 + 8);
  LODWORD(v157[2]) = v22;
  *(void *)((char *)&v157[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v157[3]) = v28;
  v157[4] = v30;
  v157[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28) - v22;
  uint64_t v31 = *(void *)(v21 + 32);
  v156[1] = *(void *)(v21 + 8) + 4 * v22;
  LODWORD(v156[2]) = v22;
  *(void *)((char *)&v156[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v156[3]) = v28;
  v156[4] = v31;
  v156[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28) - 2 * v22;
  uint64_t v32 = *(void *)(v21 + 32);
  v155[1] = *(void *)(v21 + 8) + 8 * v22;
  LODWORD(v155[2]) = v22;
  *(void *)((char *)&v155[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v155[3]) = v28;
  v155[4] = v32;
  v155[0] = &unk_1F0A472A0;
  int v33 = *(_DWORD *)(v21 + 28) - 3 * v22;
  uint64_t v34 = *(void *)(v21 + 32);
  v154[1] = *(void *)(v21 + 8) + 4 * (3 * v22);
  LODWORD(v154[2]) = v22;
  *(void *)((char *)&v154[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v154[3]) = v33;
  v154[4] = v34;
  v154[0] = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v157, (uint64_t)v161, (uint64_t)v158);
  v153[0] = v156[1] + 4 * LODWORD(v156[3]) * (int)v10;
  LODWORD(v153[1]) = v156[2];
  HIDWORD(v153[1]) = v9 - v10;
  LODWORD(v153[2]) = v156[3];
  HIDWORD(v153[2]) = HIDWORD(v156[3]) - LODWORD(v156[3]) * v10;
  v153[3] = v156[4];
  unint64_t v152 = &unk_1F0A472A0;
  *(void *)&long long v150 = v160[1] + 4 * LODWORD(v160[3]) * (int)v10;
  DWORD2(v150) = v160[2];
  HIDWORD(v150) = v9 - v10;
  LODWORD(v151) = v160[3];
  DWORD1(v151) = HIDWORD(v160[3]) - LODWORD(v160[3]) * v10;
  *((void *)&v151 + 1) = v160[4];
  uint64_t v149 = &unk_1F0A472A0;
  uint64_t v35 = *(void *)(v8 + 272) + 48 * (int)v126;
  int v36 = *(_DWORD *)(v35 + 16);
  uint64_t v37 = *(void *)(v35 + 32);
  *(void *)&long long v147 = *(void *)(v35 + 8);
  DWORD2(v147) = v36;
  HIDWORD(v147) = v9 - v10;
  *(void *)&long long v148 = *(void *)(v35 + 24);
  *((void *)&v148 + 1) = v37;
  std::string::size_type v146 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v152, (uint64_t)&v149, (uint64_t)&v146);
  std::string::size_type v146 = &unk_1F0A472A0;
  long long v147 = 0u;
  long long v148 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
  uint64_t v149 = &unk_1F0A472A0;
  long long v150 = 0u;
  long long v151 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
  unint64_t v152 = &unk_1F0A472A0;
  memset(v153, 0, sizeof(v153));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  v153[0] = v156[1];
  v153[1] = __PAIR64__(v10, v156[2]);
  v153[2] = v156[3];
  v153[3] = v156[4];
  unint64_t v152 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v152);
  unint64_t v152 = &unk_1F0A472A0;
  memset(v153, 0, sizeof(v153));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  if (v125)
  {
    uint64_t v38 = *(void *)(v8 + 128) + 48 * (int)v126;
    int v39 = *(_DWORD *)(v8 + 176);
    int v40 = *(_DWORD *)(v38 + 28);
    uint64_t v41 = *(void *)(v38 + 32);
    v153[0] = *(void *)(v38 + 8);
    LODWORD(v153[1]) = v39;
    *(void *)((char *)&v153[1] + 4) = *(void *)(v38 + 20);
    HIDWORD(v153[2]) = v40;
    v153[3] = v41;
    unint64_t v152 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v152);
    int v42 = 0;
    uint64_t v43 = v127 - 1;
    do
    {
      int v44 = LODWORD(v156[3]) * (v10 + v42);
      *((void *)&v150 + 1) = __PAIR64__(v10, v156[2]);
      LODWORD(v151) = v156[3];
      DWORD1(v151) = HIDWORD(v156[3]) - v44;
      *((void *)&v151 + 1) = v156[4];
      *(void *)&long long v150 = v156[1] + 4 * v44;
      uint64_t v149 = &unk_1F0A472A0;
      uint64_t v45 = *(void *)(v8 + 104) + 32 * v126;
      *((void *)&v147 + 1) = 0;
      std::string::size_type v146 = &unk_1F0A472D0;
      *(void *)&long long v147 = *(void *)(v45 + 8) + 4 * (v10 + v42);
      DWORD2(v147) = v10;
      *(void *)&long long v148 = *(void *)(v45 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v149, (uint64_t)&v152, (uint64_t)&v146, 0);
      uint64_t v149 = &unk_1F0A472A0;
      long long v150 = 0u;
      long long v151 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
      v42 += v10;
      --v43;
    }
    while (v43);
    unint64_t v152 = &unk_1F0A472A0;
    memset(v153, 0, sizeof(v153));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v155, (uint64_t)v159, *(void *)(v8 + 296) + 48 * (int)v126);
  uint64_t v46 = v123;
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)v154, (uint64_t)v158, (uint64_t)v161);
  uint64_t v47 = v128 + 16 * v17;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(v8 + 296) + 48 * (int)v126, (uint64_t)v159);
  int v48 = 0;
  uint64_t v129 = (v127 - 1);
  int v124 = v10 * (v127 - 1);
  uint64_t v121 = v8;
  int v49 = v122;
  do
  {
    unsigned int v50 = v124 + v48;
    int v51 = v49[6];
    uint64_t v52 = *((void *)v49 + 1) + 4 * v51 * (v124 + v48);
    int v53 = v49[7] - v51 * (v124 + v48);
    uint64_t v54 = *((void *)v49 + 4);
    LODWORD(v153[1]) = v49[4];
    HIDWORD(v153[1]) = v10;
    v153[2] = __PAIR64__(v53, v51);
    v153[3] = v54;
    v153[0] = v52;
    unint64_t v152 = &unk_1F0A472A0;
    uint64_t v55 = *(void *)(v8 + 392) + 48 * (int)v126;
    LODWORD(v--*(_DWORD *)(a9 + 52) = *(_DWORD *)(v55 + 16);
    unsigned int v56 = *(_DWORD *)(v55 + 24);
    int v57 = v56 * (v124 + v48);
    uint64_t v58 = *(void *)(v55 + 8) + 4 * v57;
    LODWORD(v54) = *(_DWORD *)(v55 + 28) - v57;
    uint64_t v59 = *(void *)(v55 + 32);
    *((void *)&v150 + 1) = __PAIR64__(v10, v52);
    *(void *)&long long v151 = __PAIR64__(v54, v56);
    *((void *)&v151 + 1) = v59;
    *(void *)&long long v150 = v58;
    uint64_t v149 = &unk_1F0A472A0;
    if (*(unsigned char *)(v8 + 224))
    {
      int v60 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v8);
      LODWORD(v61) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v149, (uint64_t)&v152, 111, v60, 111, v61, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v149, (uint64_t)&v152, 111);
    }
    *(void *)&long long v147 = v155[1] + 4 * (int)(LODWORD(v155[3]) * v50);
    *((void *)&v147 + 1) = __PAIR64__(v10, v155[2]);
    LODWORD(v148) = v155[3];
    DWORD1(v148) = HIDWORD(v155[3]) - LODWORD(v155[3]) * v50;
    *((void *)&v148 + 1) = v155[4];
    std::string::size_type v146 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v146, (uint64_t)&v149);
    unsigned int v62 = *(_DWORD *)(v47 + 16);
    unsigned int v63 = *(_DWORD *)(v47 + 24);
    int v64 = *(_DWORD *)(v47 + 28) - v63 * v50;
    uint64_t v65 = *(void *)(v47 + 32);
    *(void *)&long long v144 = *(void *)(v47 + 8) + 4 * (int)(v63 * v50);
    *((void *)&v144 + 1) = __PAIR64__(v10, v62);
    *(void *)&long long v145 = __PAIR64__(v64, v63);
    *((void *)&v145 + 1) = v65;
    std::string v143 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v143, (uint64_t)&v149);
    if (*(unsigned char *)(v8 + 208))
    {
      uint64_t v66 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v8);
      uint64_t v67 = *(void *)(v66 + 8) + 8 * *(int *)(v66 + 24);
      unsigned int v68 = *(_DWORD *)(v66 + 16);
      uint64_t v69 = *(void *)(v66 + 32);
      long long v141 = &unk_1F0A472D0;
      v142[0] = v67;
      v142[1] = v68;
      v142[2] = v69;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v143, (uint64_t)&v146, 111, (uint64_t)&v141, 1.0, 1.0);
    }
    if (v129 < (int)v127 - 1)
    {
      uint64_t v70 = (v10 * v127 + v48);
      unsigned int v71 = *(_DWORD *)(v47 + 16);
      unsigned int v72 = *(_DWORD *)(v47 + 24);
      unsigned int v73 = *(_DWORD *)(v47 + 28) - v72 * v70;
      uint64_t v74 = *(void *)(v47 + 32);
      v142[0] = *(void *)(v47 + 8) + 4 * (int)(v72 * v70);
      v142[1] = __PAIR64__(v10, v71);
      v142[2] = __PAIR64__(v73, v72);
      v142[3] = v74;
      long long v141 = &unk_1F0A472A0;
      v140[0] = v160[1] + 4 * LODWORD(v160[3]) * (int)v70;
      v140[1] = __PAIR64__(v10, v160[2]);
      LODWORD(v140[2]) = v160[3];
      HIDWORD(v140[2]) = HIDWORD(v160[3]) - LODWORD(v160[3]) * v70;
      v140[3] = v160[4];
      long long v139 = &unk_1F0A472A0;
      if (v125)
      {
        uint64_t v75 = *(void *)(v8 + 128) + 48 * (int)v126;
        int v76 = *(_DWORD *)(v8 + 176);
        int v77 = *(_DWORD *)(v75 + 28);
        uint64_t v78 = *(void *)(v75 + 32);
        v138[0] = *(void *)(v75 + 8);
        LODWORD(v138[1]) = v76;
        *(void *)((char *)&v138[1] + 4) = *(void *)(v75 + 20);
        HIDWORD(v138[2]) = v77;
        v138[3] = v78;
        unint64_t v137 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v137);
        uint64_t v79 = *(void *)(v8 + 104) + 32 * v126;
        v136[1] = 0;
        long long v135 = &unk_1F0A472D0;
        v136[0] = *(void *)(v79 + 8) + 4 * v70;
        LODWORD(v136[1]) = v10;
        v136[2] = *(void *)(v79 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v137, (uint64_t)&v141, (uint64_t)&v135, 1);
        *(_OWORD *)&v142[1] = *(_OWORD *)&v138[1];
        v142[0] = v138[0];
        v142[3] = v138[3];
        uint64_t v80 = *(void *)(v8 + 128) + 48 * (int)v126;
        uint64_t v81 = *(int *)(v8 + 176);
        int v82 = *(_DWORD *)(v80 + 28) - v81;
        uint64_t v83 = *(void *)(v80 + 32);
        v136[0] = *(void *)(v80 + 8) + 4 * v81;
        LODWORD(v136[1]) = v81;
        *(void *)((char *)&v136[1] + 4) = *(void *)(v80 + 20);
        HIDWORD(v136[2]) = v82;
        v136[3] = v83;
        long long v135 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v135);
        uint64_t v84 = *(void *)(v8 + 104) + 32 * v126;
        v134[2] = 0;
        v134[0] = &unk_1F0A472D0;
        v134[1] = *(void *)(v84 + 8) + 4 * v70;
        LODWORD(v134[2]) = v10;
        v134[3] = *(void *)(v84 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v135, (uint64_t)&v139, (uint64_t)v134, 1);
        v140[0] = v136[0];
        *(_OWORD *)&v140[1] = *(_OWORD *)&v136[1];
        v140[3] = v136[3];
        long long v135 = &unk_1F0A472A0;
        memset(v136, 0, sizeof(v136));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v135);
        unint64_t v137 = &unk_1F0A472A0;
        memset(v138, 0, sizeof(v138));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v137);
      }
      if (*(unsigned char *)(v8 + 208))
      {
        v138[0] = v156[1] + 4 * LODWORD(v156[3]) * (int)v70;
        v138[1] = __PAIR64__(v10, v156[2]);
        LODWORD(v138[2]) = v156[3];
        HIDWORD(v138[2]) = HIDWORD(v156[3]) - LODWORD(v156[3]) * v70;
        v138[3] = v156[4];
        v136[0] = v157[1] + 4 * LODWORD(v157[3]) * (int)v70;
        v136[1] = __PAIR64__(v10, v157[2]);
        LODWORD(v136[2]) = v157[3];
        HIDWORD(v136[2]) = HIDWORD(v157[3]) - LODWORD(v157[3]) * v70;
        v136[3] = v157[4];
        unint64_t v137 = &unk_1F0A472A0;
        long long v135 = &unk_1F0A472A0;
        if (v125)
        {
          uint64_t v85 = *(void *)(v8 + 128) + 48 * (int)v126;
          uint64_t v86 = *(int *)(v8 + 176);
          int v87 = *(_DWORD *)(v85 + 28) - 2 * v86;
          uint64_t v88 = *(void *)(v85 + 32);
          v134[1] = *(void *)(v85 + 8) + 8 * v86;
          LODWORD(v134[2]) = v86;
          *(void *)((char *)&v134[2] + 4) = *(void *)(v85 + 20);
          HIDWORD(v134[3]) = v87;
          v134[4] = v88;
          v134[0] = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v134);
          uint64_t v89 = *(void *)(v8 + 104) + 32 * v126;
          v133[2] = 0;
          v133[0] = &unk_1F0A472D0;
          v133[1] = *(void *)(v89 + 8) + 4 * v70;
          LODWORD(v133[2]) = v10;
          v133[3] = *(void *)(v89 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v134, (uint64_t)&v137, (uint64_t)v133, 1);
          *(_OWORD *)&v138[1] = *(_OWORD *)&v134[2];
          v138[0] = v134[1];
          v138[3] = v134[4];
          uint64_t v90 = *(void *)(v8 + 128) + 48 * (int)v126;
          int v91 = *(_DWORD *)(v8 + 176);
          int v92 = *(_DWORD *)(v90 + 28) - 3 * v91;
          uint64_t v93 = *(void *)(v90 + 32);
          v133[1] = *(void *)(v90 + 8) + 12 * v91;
          LODWORD(v133[2]) = v91;
          *(void *)((char *)&v133[2] + 4) = *(void *)(v90 + 20);
          HIDWORD(v133[3]) = v92;
          void v133[4] = v93;
          v133[0] = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v133);
          uint64_t v94 = *(void *)(v8 + 104) + 32 * v126;
          uint64_t v131 = 0;
          v130[0] = &unk_1F0A472D0;
          v130[1] = *(void *)(v94 + 8) + 4 * v70;
          LODWORD(v131) = v10;
          uint64_t v132 = *(void *)(v94 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v133, (uint64_t)&v135, (uint64_t)v130, 1);
          v136[0] = v133[1];
          *(_OWORD *)&v136[1] = *(_OWORD *)&v133[2];
          v136[3] = v133[4];
          v133[0] = &unk_1F0A472A0;
          memset(&v133[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v133);
          v134[0] = &unk_1F0A472A0;
          memset(&v134[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v134);
          uint64_t v8 = v121;
          int v49 = v122;
        }
        uint64_t v95 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v8);
        unsigned int v96 = *(_DWORD *)(v95 + 16);
        uint64_t v97 = *(void *)(v95 + 32);
        v134[1] = *(void *)(v95 + 8) + 4 * *(int *)(v95 + 24);
        v134[0] = &unk_1F0A472D0;
        v134[2] = v96;
        v134[3] = v97;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v143, (uint64_t)&v137, 111, (uint64_t)v134, 1.0, 1.0);
        uint64_t v98 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v8);
        unsigned int v99 = *(_DWORD *)(v98 + 16);
        uint64_t v100 = *(void *)(v98 + 32);
        v134[1] = *(void *)(v98 + 8);
        v134[0] = &unk_1F0A472D0;
        v134[2] = v99;
        v134[3] = v100;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v143, (uint64_t)&v135, 111, (uint64_t)v134, 1.0, 1.0);
        long long v135 = &unk_1F0A472A0;
        memset(v136, 0, sizeof(v136));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v135);
        unint64_t v137 = &unk_1F0A472A0;
        memset(v138, 0, sizeof(v138));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v137);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v143, (uint64_t)&v141, 111, (uint64_t)&v139, 111, 1.0, 1.0);
      long long v139 = &unk_1F0A472A0;
      memset(v140, 0, sizeof(v140));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v139);
      long long v141 = &unk_1F0A472A0;
      memset(v142, 0, sizeof(v142));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      uint64_t v46 = v123;
    }
    v142[0] = v157[1] + 4 * (int)(LODWORD(v157[3]) * v50);
    v142[1] = __PAIR64__(v10, v157[2]);
    LODWORD(v142[2]) = v157[3];
    HIDWORD(v142[2]) = HIDWORD(v157[3]) - LODWORD(v157[3]) * v50;
    v142[3] = v157[4];
    long long v141 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v141, (uint64_t)&v143);
    long long v141 = &unk_1F0A472A0;
    memset(v142, 0, sizeof(v142));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
    v142[0] = v154[1] + 4 * (int)(LODWORD(v154[3]) * v50);
    v142[1] = __PAIR64__(v10, v154[2]);
    LODWORD(v142[2]) = v154[3];
    HIDWORD(v142[2]) = HIDWORD(v154[3]) - LODWORD(v154[3]) * v50;
    v142[3] = v154[4];
    long long v141 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v141, (uint64_t)&v143);
    long long v141 = &unk_1F0A472A0;
    memset(v142, 0, sizeof(v142));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
    if (v129 >= 1)
    {
      v142[0] = v156[1] + 4 * (int)(LODWORD(v156[3]) * v50);
      v142[1] = __PAIR64__(v10, v156[2]);
      LODWORD(v142[2]) = v156[3];
      HIDWORD(v142[2]) = HIDWORD(v156[3]) - LODWORD(v156[3]) * v50;
      v142[3] = v156[4];
      long long v141 = &unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v141, (uint64_t)&v143);
      long long v141 = &unk_1F0A472A0;
      memset(v142, 0, sizeof(v142));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      unsigned int v101 = *(_DWORD *)(v46 + 16);
      unsigned int v102 = *(_DWORD *)(v46 + 24);
      int v103 = *(_DWORD *)(v46 + 28) - v102 * v50;
      uint64_t v104 = *(void *)(v46 + 32);
      v142[0] = *(void *)(v46 + 8) + 4 * (int)(v102 * v50);
      v142[1] = __PAIR64__(v10, v101);
      v142[2] = __PAIR64__(v103, v102);
      v142[3] = v104;
      long long v141 = &unk_1F0A472A0;
      if (v125)
      {
        uint64_t v105 = *(void *)(v8 + 128) + 48 * (int)v126;
        int v106 = *(_DWORD *)(v105 + 28);
        uint64_t v107 = *(void *)(v105 + 32);
        v140[0] = *(void *)(v105 + 8);
        LODWORD(v140[1]) = v101;
        *(void *)((char *)&v140[1] + 4) = *(void *)(v105 + 20);
        HIDWORD(v140[2]) = v106;
        v140[3] = v107;
        long long v139 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v139);
        uint64_t v108 = *(void *)(v8 + 104) + 32 * v126;
        v138[1] = 0;
        unint64_t v137 = &unk_1F0A472D0;
        v138[0] = *(void *)(v108 + 8) + 4 * v50;
        LODWORD(v138[1]) = v10;
        v138[2] = *(void *)(v108 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v139, (uint64_t)&v141, (uint64_t)&v137, 1);
        *(_OWORD *)&v142[1] = *(_OWORD *)&v140[1];
        v142[0] = v140[0];
        v142[3] = v140[3];
        long long v139 = &unk_1F0A472A0;
        memset(v140, 0, sizeof(v140));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v139);
        uint64_t v8 = v121;
        int v49 = v122;
      }
      int v109 = v49[4];
      int v110 = v49[6];
      int v111 = v110 * (v10 * (v127 - 2) + v48);
      uint64_t v112 = *((void *)v49 + 1) + 4 * v111;
      unsigned int v113 = v49[7] - v111;
      uint64_t v114 = *((void *)v49 + 4);
      v140[0] = v112;
      v140[1] = __PAIR64__(v10, v109);
      v140[2] = __PAIR64__(v113, v110);
      v140[3] = v114;
      long long v139 = &unk_1F0A472A0;
      uint64_t v115 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v8);
      LODWORD(v116) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v139, (uint64_t)&v141, 111, v115, 111, v116, 1.0);
      long long v139 = &unk_1F0A472A0;
      memset(v140, 0, sizeof(v140));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v139);
      long long v141 = &unk_1F0A472A0;
      memset(v142, 0, sizeof(v142));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
    }
    std::string v143 = &unk_1F0A472A0;
    long long v144 = 0u;
    long long v145 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
    std::string::size_type v146 = &unk_1F0A472A0;
    long long v147 = 0u;
    long long v148 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
    uint64_t v149 = &unk_1F0A472A0;
    long long v150 = 0u;
    long long v151 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
    unint64_t v152 = &unk_1F0A472A0;
    memset(v153, 0, sizeof(v153));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
    v48 -= v10;
  }
  while (v129-- > 0);
  if (a5)
  {
    unsigned int v118 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(v8);
    LODWORD(v119) = 1.0;
    kaldi::CuMatrixBase<float>::AddMatMat<signed char>(a5, v46, 111, v118, 111, v119, 0.0);
  }
  v154[0] = &unk_1F0A472A0;
  memset(&v154[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v154);
  v155[0] = &unk_1F0A472A0;
  memset(&v155[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v155);
  v156[0] = &unk_1F0A472A0;
  memset(&v156[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v156);
  v157[0] = &unk_1F0A472A0;
  memset(&v157[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v157);
  v158[0] = &unk_1F0A472A0;
  memset(&v158[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v158);
  v159[0] = &unk_1F0A472A0;
  memset(&v159[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v159);
  v160[0] = &unk_1F0A472A0;
  memset(&v160[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v160);
  v161[0] = &unk_1F0A472A0;
  memset(&v161[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v161);
}

void sub_1B1DF1ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, unint64_t a11, _OWORD *a12, unint64_t a13, _OWORD *a14, unint64_t a15, _OWORD *a16, unint64_t a17, _OWORD *a18, unint64_t a19, _OWORD *a20,unint64_t a21,_OWORD *a22,unint64_t a23,_OWORD *a24,unint64_t a25)
{
  STACK[0x2F0] = v25;
  *uint64_t v26 = 0u;
  v26[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2F0]);
  STACK[0x318] = a19;
  *a20 = 0u;
  a20[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x318]);
  STACK[0x340] = a21;
  *a22 = 0u;
  a22[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x340]);
  STACK[0x368] = a23;
  *a24 = 0u;
  a24[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x368]);
  STACK[0x390] = a25;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x390]);
  STACK[0x3B8] = a11;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3B8]);
  STACK[0x3E0] = a13;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3E0]);
  STACK[0x408] = a15;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x408]);
  STACK[0x430] = a17;
  *a18 = 0u;
  a18[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_1B1DF1E48()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 368) + 48 * a2), a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 392) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 416) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 440) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1B1DF1FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = *(_DWORD *)(a1 + 96);
  int v10 = *(_DWORD *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  uint64_t v47 = *(void *)(a1 + 272);
  uint64_t v14 = *(void *)(a1 + 440) + 48 * a5;
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * a5) = v10;
  uint64_t v16 = *(int *)(a1 + 176);
  int v17 = *(_DWORD *)(v14 + 28);
  uint64_t v18 = *(void *)(v14 + 32);
  v60[1] = *(void *)(v14 + 8);
  LODWORD(v60[2]) = v16;
  *(void *)((char *)&v60[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v60[3]) = v17;
  void v60[4] = v18;
  v60[0] = &unk_1F0A472A0;
  int v19 = *(_DWORD *)(v14 + 28) - v16;
  uint64_t v20 = *(void *)(v14 + 32);
  v59[1] = *(void *)(v14 + 8) + 4 * v16;
  LODWORD(v59[2]) = v16;
  *(void *)((char *)&v59[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v59[3]) = v19;
  void v59[4] = v20;
  v59[0] = &unk_1F0A472A0;
  int v21 = *(_DWORD *)(v14 + 28) - 2 * v16;
  uint64_t v22 = *(void *)(v14 + 32);
  v58[1] = *(void *)(v14 + 8) + 8 * v16;
  LODWORD(v58[2]) = v16;
  *(void *)((char *)&v58[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v58[3]) = v21;
  v58[4] = v22;
  v58[0] = &unk_1F0A472A0;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a5) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a5) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a5) + ++*(_DWORD *)(result + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a5) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a5) + 32) = a4;
  }
  uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v23, v14, CblasTrans, a2, CblasNoTrans, 1.0, v15);
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a5);
  unsigned int v25 = *(_DWORD *)(v14 + 24);
  uint64_t v26 = *(void *)(v14 + 8) + 4 * (int)(v25 * v9);
  int v27 = *(_DWORD *)(v14 + 28) - v25 * v9;
  uint64_t v28 = *(void *)(v14 + 32);
  DWORD2(v56) = *(_DWORD *)(v14 + 16);
  HIDWORD(v56) = v10 - v9;
  *(void *)&long long v57 = __PAIR64__(v27, v25);
  *((void *)&v57 + 1) = v28;
  uint64_t v55 = &unk_1F0A472A0;
  *(void *)&long long v56 = v26;
  uint64_t v29 = *(void *)(a1 + 344) + 48 * a5;
  LODWORD(v26) = *(_DWORD *)(v29 + 16);
  uint64_t v30 = *(void *)(v29 + 32);
  *(void *)&long long v53 = *(void *)(v29 + 8);
  DWORD2(v53) = v26;
  HIDWORD(v53) = v10 - v9;
  *(void *)&long long v54 = *(void *)(v29 + 24);
  *((void *)&v54 + 1) = v30;
  uint64_t v52 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::AddMatMat(v24, (uint64_t)&v55, CblasTrans, (uint64_t)&v52, CblasNoTrans, 1.0, v15);
  uint64_t v52 = &unk_1F0A472A0;
  long long v53 = 0u;
  long long v54 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  uint64_t v55 = &unk_1F0A472A0;
  long long v56 = 0u;
  long long v57 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
  uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v31, v14, 1.0, v15);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a5);
    uint64_t v33 = v47 + 48 * a5;
    unsigned int v34 = *(_DWORD *)(v32 + 16);
    uint64_t v35 = *(void *)(v32 + 32);
    uint64_t v49 = *(void *)(v32 + 8);
    int v48 = &unk_1F0A472D0;
    uint64_t v50 = v34;
    uint64_t v51 = v35;
    DWORD2(v56) = v60[2];
    HIDWORD(v56) = v10 - v9;
    LODWORD(v57) = v60[3];
    DWORD1(v57) = HIDWORD(v60[3]) - LODWORD(v60[3]) * v9;
    *((void *)&v57 + 1) = v60[4];
    uint64_t v55 = &unk_1F0A472A0;
    *(void *)&long long v56 = v60[1] + 4 * LODWORD(v60[3]) * v9;
    int v36 = *(_DWORD *)(v33 + 16);
    uint64_t v37 = *(void *)(v33 + 32);
    *(void *)&long long v53 = *(void *)(v33 + 8);
    DWORD2(v53) = v36;
    HIDWORD(v53) = v10 - v9;
    *(void *)&long long v54 = *(void *)(v33 + 24);
    *((void *)&v54 + 1) = v37;
    uint64_t v52 = &unk_1F0A472A0;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    uint64_t v52 = &unk_1F0A472A0;
    long long v53 = 0u;
    long long v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    uint64_t v55 = &unk_1F0A472A0;
    long long v56 = 0u;
    long long v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    uint64_t v38 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a5);
    unsigned int v39 = *(_DWORD *)(v38 + 16);
    uint64_t v40 = *(void *)(v38 + 32);
    uint64_t v49 = *(void *)(v38 + 8) + 4 * *(int *)(v38 + 24);
    int v48 = &unk_1F0A472D0;
    uint64_t v50 = v39;
    uint64_t v51 = v40;
    DWORD2(v56) = v59[2];
    HIDWORD(v56) = v10 - v9;
    LODWORD(v57) = v59[3];
    DWORD1(v57) = HIDWORD(v59[3]) - LODWORD(v59[3]) * v9;
    *((void *)&v57 + 1) = v59[4];
    uint64_t v55 = &unk_1F0A472A0;
    *(void *)&long long v56 = v59[1] + 4 * LODWORD(v59[3]) * v9;
    int v41 = *(_DWORD *)(v33 + 16);
    uint64_t v42 = *(void *)(v33 + 32);
    *(void *)&long long v53 = *(void *)(v33 + 8);
    DWORD2(v53) = v41;
    HIDWORD(v53) = v10 - v9;
    *(void *)&long long v54 = *(void *)(v33 + 24);
    *((void *)&v54 + 1) = v42;
    uint64_t v52 = &unk_1F0A472A0;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    uint64_t v52 = &unk_1F0A472A0;
    long long v53 = 0u;
    long long v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    uint64_t v55 = &unk_1F0A472A0;
    long long v56 = 0u;
    long long v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    uint64_t v43 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a5);
    unsigned int v44 = *(_DWORD *)(v43 + 16);
    uint64_t v45 = *(void *)(v43 + 32);
    *(void *)&long long v56 = *(void *)(v43 + 8) + 8 * *(int *)(v43 + 24);
    uint64_t v55 = &unk_1F0A472D0;
    *((void *)&v56 + 1) = v44;
    *(void *)&long long v57 = v45;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v55, (uint64_t)v58, 112, v33, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v46, *(void *)(a1 + 368) + 48 * a5, CblasTrans, *(void *)(a1 + 320) + 48 * a5, CblasNoTrans, 1.0, v15);
  }
  v58[0] = &unk_1F0A472A0;
  memset(&v58[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v58);
  v59[0] = &unk_1F0A472A0;
  memset(&v59[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v59);
  v60[0] = &unk_1F0A472A0;
  memset(&v60[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
}

void sub_1B1DF2714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, _OWORD *a14, uint64_t a15, _OWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a31 = a11;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a31);
  a36 = a13;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a36);
  a41 = a15;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a41);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_1B1DF2FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = (void *)(a1 + 104);
  if (v5 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v5 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v5 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  unsigned __int8 v8 = (void *)(*v6 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v8, a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  uint64_t v7 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v7, 111);
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1);
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a4;
  uint64_t v9 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  unsigned int v10 = *(_DWORD *)(v8 + 16);
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v9;
  v13[0] = &unk_1F0A472D0;
  _OWORD v13[2] = v10;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(void *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v6 = (int *)(a1[1] + 48 * a3);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v6, a2, 111);
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(void *a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v8 = a1[1] + 48 * a4;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  uint64_t v10 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v10;
  v13[0] = &unk_1F0A472D0;
  _OWORD v13[2] = v9;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(void *a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  *(void *)(a1[1] + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v8 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8))
      {
        uint64_t v9 = a1[1] + 48 * a4;
        uint64_t v10 = *(void *)(v9 + 8) + 4 * *(_DWORD *)(v9 + 24) * (int)v8;
        unsigned int v11 = *(_DWORD *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 32);
        v20[1] = v10;
        v20[0] = &unk_1F0A472D0;
        void v20[2] = v11;
        uint64_t v20[3] = v12;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          uint64_t v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        }
      }
      ++v8;
    }
    while (a2[1] > v8);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20, 3);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0) {
      float v15 = __p;
    }
    else {
      float v15 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v16 = v19;
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20);
  }
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v23);
}

void sub_1B1DF3670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 1--*(_DWORD *)(a9 + 52) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 156);
  if (v6 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v4);
      uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v15, v4);
      uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v16, v4);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v17, v4);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v4);
      }
    }
  }
  else if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v8, *(void *)(a1 + 656) + 48 * a2, v4);
      uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, *(void *)(a1 + 680) + 48 * a2, v4);
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 728) + 32 * a2, v4);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 704) + 48 * a2, v4);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v13 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, v13, v4);
      }
    }
  }
  else if (a3 > 0.0 && v6 == 2)
  {
    uint64_t v20 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v21, (int *)(*(void *)(a1 + 656) + 48 * v20), v4);
    uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, (int *)(*(void *)(a1 + 680) + 48 * v20), v4);
    uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v23, (void *)(*(void *)(a1 + 728) + 32 * v20), v4);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (int *)(*(void *)(a1 + 704) + 48 * v20), v4);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
      uint64_t v26 = (int *)(*(void *)(a1 + 752) + 48 * v20);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, v26, v4);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(void *a1, unsigned int a2, float a3)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v15 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v7);
  int v9 = kaldi::CuMatrixBase<float>::CountZeros(v8);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v7);
  int v11 = kaldi::CuMatrixBase<float>::CountZeros(v10) + v9;
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v12);
  *a2 = v11 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v13);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v14);
    int v15 = *a2 + result;
LABEL_11:
    *a2 = v15;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetInternalMemory(uint64_t a1, int *a2, int a3)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 8) + v3), *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Check(uint64_t a1)
{
  unint64_t v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::quasar::Vocab::VocabSize(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    int v9 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::quasar::Vocab::VocabSize(v9);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  float v4 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::quasar::Vocab::VocabSize(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    int v15 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::quasar::Vocab::VocabSize(v15);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    unsigned __int8 v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      uint64_t v25 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v6 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    if (kaldi::quasar::Vocab::VocabSize(v6) == *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12))
    {
      uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      uint64_t v31 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      uint64_t v26 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::quasar::Vocab::VocabSize(v26);
      int v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1B1DF4330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  *(_OWORD *)(a1 + 904) = xmmword_1B255E480;
  *(void *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(unsigned char *)(a1 + 934) = 0;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (uint64_t *)&off_1F0A322E0);
  *(void *)uint64_t v4 = off_1F0A49428;
  *(void *)(v4 + 848) = off_1F0A49718;
  *(void *)(v4 + 160) = &unk_1F0A495B8;
  *(void *)(v4 + 168) = &unk_1F0A495E0;
  *(_DWORD *)(v4 + 176) = a3;
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 184) = 0;
  *(_WORD *)(v4 + 208) = 1;
  *(void *)(v4 + 216) = 0;
  *(unsigned char *)(v4 + 2++*(_DWORD *)(result + 24) = 0;
  *(void *)(v4 + 232) = 0;
  *(_WORD *)(v4 + 240) = 0;
  *(void *)(v4 + 456) = 0;
  double result = 0.0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 4++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(void *)(v4 + 464) = 0x3DCCCCCD3F800000;
  *(_OWORD *)(v4 + 472) = 0u;
  *(_OWORD *)(v4 + 488) = 0u;
  *(_OWORD *)(v4 + 504) = 0u;
  *(_OWORD *)(v4 + 513) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 5--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(v4 + 568) = 0u;
  *(_OWORD *)(v4 + 584) = 0u;
  *(_OWORD *)(v4 + 600) = 0u;
  *(_OWORD *)(v4 + 616) = 0u;
  *(_OWORD *)(v4 + 632) = 0u;
  *(_OWORD *)(v4 + 648) = 0u;
  *(_OWORD *)(v4 + 664) = 0u;
  *(_OWORD *)(v4 + 680) = 0u;
  *(_OWORD *)(v4 + 696) = 0u;
  *(_OWORD *)(v4 + 712) = 0u;
  *(_OWORD *)(v4 + 728) = 0u;
  *(_OWORD *)(v4 + 744) = 0u;
  *(_OWORD *)(v4 + 760) = 0u;
  *(_OWORD *)(v4 + 776) = 0u;
  *(_OWORD *)(v4 + 792) = 0u;
  *(_OWORD *)(v4 + 808) = 0u;
  *(_OWORD *)(v4 + 8++*(_DWORD *)(result + 24) = 0u;
  *(void *)(v4 + 840) = 0;
  return result;
}

void sub_1B1DF4544(_Unwind_Exception *a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 536);
  if (a2 >= (unint64_t)((*(void *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 560);
  if (a2 >= (unint64_t)((*(void *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  uint64_t v2 = *(void *)(a1 + 608);
  if (a2 >= (unint64_t)((*(void *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 208))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 584);
  if (a2 >= (unint64_t)((*(void *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  void v4[34];

  if (!*(unsigned char *)(a1 + 224))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 632);
  if (a2 >= (unint64_t)((*(void *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  uint64_t result = *(void *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = &unk_1F0A4FA88;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A322E0, a2);
  *(void *)a1 = off_1F0A49428;
  *(void *)(a1 + 848) = off_1F0A49718;
  *(void *)(a1 + 160) = &unk_1F0A495B8;
  *(void *)(a1 + 168) = &unk_1F0A495E0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 7--*(_DWORD *)(a9 + 52) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (*(void *)(a2 + 184)) {
    kaldi::NewCuSubOrMat<short>();
  }
  if (*(void *)(a2 + 192)) {
    kaldi::NewCuSubOrMat<short>();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v9 = *(void *)(a2 + 216);
  if (v9) {
    kaldi::NewCuSubOrMat<float>(v9, 0);
  }
  if (*(void *)(a2 + 232)) {
    kaldi::NewCuSubOrMat<short>();
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    unint64_t v10 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v10))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v11, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v10))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v12, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v10))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v10);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v10))
      {
        uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v13, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v10))
      {
        uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v14, 0);
      }
      ++v10;
    }
    while (v10 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_1B1DF5304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,quasar::Bitmap *a22,quasar::Bitmap *a23,kaldi::nnet1::UpdatableComponent *a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  uint64_t v33 = *a14;
  if (*a14)
  {
    *((void *)v30 + 64) = v33;
    operator delete(v33);
  }
  unsigned int v34 = *a15;
  if (*a15)
  {
    *((void *)v30 + 61) = v34;
    operator delete(v34);
  }
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  uint64_t v35 = *((void *)v30 + 27);
  *((void *)v30 + 27) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 24))(v35);
  }
  uint64_t v36 = *((void *)v30 + 25);
  *((void *)v30 + 25) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 16))(v36);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v30, (uint64_t *)&off_1F0A322E0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[3];
  *(void *)(a1 + 160) = &unk_1F0A495B8;
  *(void *)(a1 + 168) = &unk_1F0A495E0;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  uint64_t v9 = (void **)(a1 + 752);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 728);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 704);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 680);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 656);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 632);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 608);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 584);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 560);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v5 = *(void **)(a1 + 504);
  if (v5)
  {
    *(void *)(a1 + 512) = v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  uint64_t v7 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 168));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 160));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  uint64_t vars8;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 168);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(void *a1)
{
  uint64_t v2 = (kaldi::nnet1::UpdatableComponent *)(v1 + 848);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent((uint64_t)a1 + *(void *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1B3EA8670);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void sub_1B1DF5AC4(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void sub_1B1DF5B60(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + *(void *)(*(void *)a2 - 24);
  *(void *)(a1 + 848) = &unk_1F0A4FA88;
  uint64_t v5 = *(void *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(void *)(a1 + 856) = v5;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((void *)(a1 + 872), *(const void **)(v4 + 24), *(void *)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 3);
  *(void *)(a1 + 848) = &unk_1F0A4BA20;
  *(void *)(a1 + 896) = &unk_1F0A4A6D0;
  long long v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1F0A322C0, a2);
  *(void *)a1 = off_1F0A49008;
  *(void *)(a1 + 848) = off_1F0A492F8;
  *(void *)(a1 + 160) = &unk_1F0A49198;
  *(void *)(a1 + 168) = &unk_1F0A491C0;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = 0;
  char v7 = *(unsigned char *)(a2 + 240);
  char v8 = *(unsigned char *)(a2 + 241);
  *(void *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 240) = v7;
  *(unsigned char *)(a1 + 241) = v8;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 248), *(void *)(a2 + 248), *(void *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 256) - *(void *)(a2 + 248)) >> 4));
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 272), *(void *)(a2 + 272), *(void *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 280) - *(void *)(a2 + 272)) >> 4));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 296), *(void *)(a2 + 296), *(void *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 304) - *(void *)(a2 + 296)) >> 4));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 320), *(void *)(a2 + 320), *(void *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 328) - *(void *)(a2 + 320)) >> 4));
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 4));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 368), *(void *)(a2 + 368), *(void *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 376) - *(void *)(a2 + 368)) >> 4));
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 392), *(void *)(a2 + 392), *(void *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 400) - *(void *)(a2 + 392)) >> 4));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 416), *(void *)(a2 + 416), *(void *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 424) - *(void *)(a2 + 416)) >> 4));
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 440), *(void *)(a2 + 440), *(void *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 448) - *(void *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 480), *(const void **)(a2 + 480), *(void *)(a2 + 488), (uint64_t)(*(void *)(a2 + 488) - *(void *)(a2 + 480)) >> 2);
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 504), *(const void **)(a2 + 504), *(void *)(a2 + 512), (uint64_t)(*(void *)(a2 + 512) - *(void *)(a2 + 504)) >> 2);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 536), (uint64_t)(*(void *)(a2 + 544) - *(void *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 560), (uint64_t)(*(void *)(a2 + 568) - *(void *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 584), (uint64_t)(*(void *)(a2 + 592) - *(void *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((void *)(a1 + 608), (uint64_t)(*(void *)(a2 + 616) - *(void *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((void *)(a1 + 632), (uint64_t)(*(void *)(a2 + 640) - *(void *)(a2 + 632)) >> 3);
  *(void *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 656), *(void *)(a2 + 656), *(void *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 664) - *(void *)(a2 + 656)) >> 4));
  *(void *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 680), *(void *)(a2 + 680), *(void *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 688) - *(void *)(a2 + 680)) >> 4));
  *(void *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 704), *(void *)(a2 + 704), *(void *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 712) - *(void *)(a2 + 704)) >> 4));
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((void *)(a1 + 728), *(void *)(a2 + 728), *(void *)(a2 + 736), (uint64_t)(*(void *)(a2 + 736) - *(void *)(a2 + 728)) >> 5);
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 7--*(_DWORD *)(a9 + 52) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((void *)(a1 + 752), *(void *)(a2 + 752), *(void *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 760) - *(void *)(a2 + 752)) >> 4));
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 8++*(_DWORD *)(result + 24) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(unsigned char *)(a1 + *(void *)(*(void *)a1 - 24) + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  if (*(void *)(a2 + 192)) {
    operator new();
  }
  if (*(void *)(a2 + 200)) {
    kaldi::NewCuSubOrVec<float>();
  }
  uint64_t v9 = *(void *)(a2 + 216);
  if (v9) {
    kaldi::NewCuSubOrMat<float>(v9, 0);
  }
  if (*(void *)(a2 + 232)) {
    operator new();
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    unint64_t v10 = 0;
    do
    {
      if (*(void *)(*(void *)(a2 + 536) + 8 * v10))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v11, 0);
      }
      if (*(void *)(*(void *)(a2 + 560) + 8 * v10))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v12, 0);
      }
      if (*(void *)(*(void *)(a2 + 608) + 8 * v10))
      {
        kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v10);
        kaldi::NewCuSubOrVec<float>();
      }
      if (*(unsigned char *)(a1 + 208) && *(void *)(*(void *)(a2 + 584) + 8 * v10))
      {
        uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v13, 0);
      }
      if (*(unsigned char *)(a1 + 224) && *(void *)(*(void *)(a2 + 632) + 8 * v10))
      {
        uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v10);
        kaldi::NewCuSubOrMat<float>(v14, 0);
      }
      ++v10;
    }
    while (v10 < (uint64_t)(*(void *)(a1 + 544) - *(void *)(a1 + 536)) >> 3);
  }
  if (*(void *)(a2 + 784) != *(void *)(a2 + 776)) {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  }
  return a1;
}

void sub_1B1DF65D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,quasar::Bitmap *a22,quasar::Bitmap *a23,kaldi::nnet1::UpdatableComponent *a24,void **a25,void **a26,void **a27,void **a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,void **a32)
{
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v33);
  a32 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a32);
  uint64_t v35 = *a15;
  if (*a15)
  {
    *((void *)v32 + 64) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *a16;
  if (*a16)
  {
    *((void *)v32 + 61) = v36;
    operator delete(v36);
  }
  a32 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a27;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a28;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a32 = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a32);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  uint64_t v37 = *((void *)v32 + 27);
  *((void *)v32 + 27) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
  }
  uint64_t v38 = *((void *)v32 + 25);
  *((void *)v32 + 25) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 16))(v38);
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a30, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a31, 0);
  quasar::Bitmap::~Bitmap(a22);
  quasar::Bitmap::~Bitmap(a23);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(v32, (uint64_t *)&off_1F0A322C0);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a24);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void sub_1B1DF6944(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  int v68 = -1;
  int v69 = v4;
  int v66 = 0x40000000;
  int v67 = -1073741824;
  int v64 = -1073741824;
  int v65 = 1036831949;
  int v63 = 0x40000000;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v62);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v61);
  memset(v60, 0, sizeof(v60));
  while (1)
  {
    if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) != 0) {
      goto LABEL_210;
    }
    kaldi::ReadToken(a2, 0, (uint64_t)v60);
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
    {
      uint64_t v5 = v60;
      switch(HIBYTE(v60[2]))
      {
        case 8:
          goto LABEL_44;
        case 9:
          BOOL v6 = v60[0] == 0x6D726F4E78614D3CLL && LOBYTE(v60[1]) == 62;
          char v7 = (int *)(a1 + 472);
          if (v6) {
            goto LABEL_202;
          }
          BOOL v8 = v60[0] == 0x6461724778614D3CLL && LOBYTE(v60[1]) == 62;
          char v7 = (int *)(a1 + 152);
          if (v8) {
            goto LABEL_202;
          }
          BOOL v9 = v60[0] == 0x6C6C654378614D3CLL && LOBYTE(v60[1]) == 62;
          char v7 = (int *)(a1 + 476);
          if (v9) {
            goto LABEL_202;
          }
          if ((v60[2] & 0x8000000000000000) != 0) {
            goto LABEL_120;
          }
          goto LABEL_43;
        case 0xA:
          if (v60[0] == 0x6C6C65436D754E3CLL && LOWORD(v60[1]) == 15987) {
            goto LABEL_205;
          }
          if (v60[0] != 0x61654D736169423CLL || LOWORD(v60[1]) != 15982) {
            goto LABEL_209;
          }
          goto LABEL_161;
        case 0xB:
          if (v60[0] != 0x6E6152736169423CLL || *(void *)((char *)v60 + 3) != 0x3E65676E61527361) {
            goto LABEL_209;
          }
          goto LABEL_107;
        case 0xC:
          if (v60[0] == 0x536D6F646E61523CLL && LODWORD(v60[1]) == 1046766949) {
            goto LABEL_206;
          }
          if ((v60[2] & 0x8000000000000000) != 0) {
            goto LABEL_126;
          }
LABEL_43:
          if (HIBYTE(v60[2]) != 8) {
            goto LABEL_209;
          }
LABEL_44:
          if (v60[0] == 0x3E706565506F4E3CLL) {
            goto LABEL_151;
          }
          if ((v60[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_129;
        case 0xD:
          if (v60[0] != 0x74536D617261503CLL || *(void *)((char *)v60 + 5) != 0x3E7665646474536DLL) {
            goto LABEL_209;
          }
          goto LABEL_185;
        case 0xF:
          BOOL v29 = v60[0] == 0x61526E7261654C3CLL && *(void *)((char *)v60 + 7) == 0x3E66656F43657461;
          goto LABEL_189;
        case 0x12:
          if (v60[0] == 0x6E6569646172473CLL && v60[1] == 0x7079546D726F4E74 && LOWORD(v60[2]) == 15973) {
            goto LABEL_204;
          }
          if (v60[0] == 0x4374757074754F3CLL && v60[1] == 0x65756C61566C6C65 && LOWORD(v60[2]) == 15987) {
            goto LABEL_208;
          }
          if ((v60[2] & 0x8000000000000000) == 0) {
            goto LABEL_209;
          }
          goto LABEL_138;
        case 0x13:
          goto LABEL_141;
        case 0x14:
          if (v60[0] != 0x47746567726F463CLL || v60[1] != 0x4D73616942657461 || LODWORD(v60[2]) != 1047421285) {
            goto LABEL_209;
          }
          goto LABEL_170;
        case 0x15:
          if (v60[0] != 0x47746567726F463CLL
            || v60[1] != 0x5273616942657461
            || *(void *)((char *)&v60[1] + 5) != 0x3E65676E61527361)
          {
            goto LABEL_209;
          }
          goto LABEL_179;
        case 0x19:
          BOOL v18 = v60[0] == 0x7463656A6F72503CLL
             && v60[1] == 0x6E7261654C6E6F69
             && v60[2] == 0x66656F4365746152
             && v61.__r_.__value_.__s.__data_[0] == 62;
          goto LABEL_200;
        default:
          goto LABEL_209;
      }
    }
    uint64_t v10 = v60[1];
    switch(v60[1])
    {
      case 9:
        BOOL v11 = *(void *)v60[0] == 0x6D726F4E78614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
        char v7 = (int *)(a1 + 472);
        if (!v11)
        {
          BOOL v12 = *(void *)v60[0] == 0x6461724778614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
          char v7 = (int *)(a1 + 152);
          if (!v12) {
            goto LABEL_116;
          }
        }
        goto LABEL_202;
      case 0xALL:
        if (*(void *)v60[0] == 0x6C6C65436D754E3CLL && *(_WORD *)(v60[0] + 8) == 15987)
        {
LABEL_205:
          uint64_t v52 = &v69;
LABEL_207:
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v52);
          break;
        }
        if (*(void *)v60[0] != 0x61654D736169423CLL || *(_WORD *)(v60[0] + 8) != 15982) {
          goto LABEL_209;
        }
LABEL_161:
        char v7 = &v67;
LABEL_202:
        kaldi::ReadBasicType<float>(a2, 0, (float *)v7);
        break;
      case 0xBLL:
        if (*(void *)v60[0] != 0x6E6152736169423CLL || *(void *)(v60[0] + 3) != 0x3E65676E61527361) {
          goto LABEL_209;
        }
LABEL_107:
        char v7 = &v66;
        goto LABEL_202;
      case 0xDLL:
        if (*(void *)v60[0] != 0x74536D617261503CLL || *(void *)(v60[0] + 5) != 0x3E7665646474536DLL) {
          goto LABEL_209;
        }
LABEL_185:
        char v7 = &v65;
        goto LABEL_202;
      case 0xFLL:
        BOOL v29 = *(void *)v60[0] == 0x61526E7261654C3CLL && *(void *)(v60[0] + 7) == 0x3E66656F43657461;
LABEL_189:
        char v7 = (int *)(a1 + 464);
        if (!v29) {
          goto LABEL_209;
        }
        goto LABEL_202;
      case 0x12:
        if (*(void *)v60[0] == 0x6E6569646172473CLL
          && *(void *)(v60[0] + 8) == 0x7079546D726F4E74
          && *(_WORD *)(v60[0] + 16) == 15973)
        {
LABEL_204:
          uint64_t v42 = &v61;
          goto LABEL_150;
        }
        if (v60[1] != 9) {
          goto LABEL_121;
        }
LABEL_116:
        BOOL v33 = *(void *)v60[0] == 0x6C6C654378614D3CLL && *(unsigned char *)(v60[0] + 8) == 62;
        char v7 = (int *)(a1 + 476);
        if (v33) {
          goto LABEL_202;
        }
LABEL_120:
        uint64_t v10 = v60[1];
LABEL_121:
        if (v10 != 12) {
          goto LABEL_127;
        }
        if (*(void *)v60[0] == 0x536D6F646E61523CLL && *(_DWORD *)(v60[0] + 8) == 1046766949)
        {
LABEL_206:
          uint64_t v52 = &v68;
          goto LABEL_207;
        }
LABEL_126:
        uint64_t v10 = v60[1];
LABEL_127:
        if (v10 == 8)
        {
          if (*(void *)v60[0] == 0x3E706565506F4E3CLL)
          {
LABEL_151:
            *(unsigned char *)(a1 + 208) = 0;
            break;
          }
LABEL_129:
          uint64_t v10 = v60[1];
        }
        if (v10 != 18) {
          goto LABEL_139;
        }
        if (*(void *)v60[0] != 0x4374757074754F3CLL
          || *(void *)(v60[0] + 8) != 0x65756C61566C6C65
          || *(_WORD *)(v60[0] + 16) != 15987)
        {
LABEL_138:
          uint64_t v10 = v60[1];
LABEL_139:
          if (v10 != 19) {
            goto LABEL_209;
          }
          uint64_t v5 = (uint64_t *)v60[0];
LABEL_141:
          uint64_t v37 = *v5;
          uint64_t v38 = v5[1];
          uint64_t v39 = *(uint64_t *)((char *)v5 + 11);
          BOOL v40 = v37 == 0x61725474696E493CLL && v38 == 0x79546D726F66736ELL;
          if (!v40 || v39 != 0x3E657079546D726FLL)
          {
LABEL_209:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v60, "</Component>"))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v59);
              long long v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Invalid token ", 14);
              if (v60[2] >= 0) {
                long long v54 = v60;
              }
              else {
                long long v54 = (void *)v60[0];
              }
              if (v60[2] >= 0) {
                uint64_t v55 = HIBYTE(v60[2]);
              }
              else {
                uint64_t v55 = v60[1];
              }
              long long v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
              long long v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)". Allowed tokens: ", 18);
              uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v59);
            }
LABEL_210:
            kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams(a1, v69);
          }
          uint64_t v42 = &v62;
LABEL_150:
          kaldi::ReadToken(a2, 0, (uint64_t)v42);
          break;
        }
LABEL_208:
        *(unsigned char *)(a1 + 209) = 1;
        break;
      case 0x14:
        if (*(void *)v60[0] != 0x47746567726F463CLL
          || *(void *)(v60[0] + 8) != 0x4D73616942657461
          || *(_DWORD *)(v60[0] + 16) != 1047421285)
        {
          goto LABEL_209;
        }
LABEL_170:
        char v7 = &v64;
        goto LABEL_202;
      case 0x15:
        if (*(void *)v60[0] != 0x47746567726F463CLL
          || *(void *)(v60[0] + 8) != 0x5273616942657461
          || *(void *)(v60[0] + 13) != 0x3E65676E61527361)
        {
          goto LABEL_209;
        }
LABEL_179:
        char v7 = &v63;
        goto LABEL_202;
      case 0x19:
        BOOL v18 = *(void *)v60[0] == 0x7463656A6F72503CLL
           && *(void *)(v60[0] + 8) == 0x6E7261654C6E6F69
           && *(void *)(v60[0] + 16) == 0x66656F4365746152
           && *(unsigned char *)(v60[0] + 24) == 62;
LABEL_200:
        char v7 = (int *)(a1 + 468);
        if (!v18) {
          goto LABEL_209;
        }
        goto LABEL_202;
      default:
        goto LABEL_121;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
}

void sub_1B1DF75C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 185) < 0) {
    operator delete(*(void **)(v14 - 208));
  }
  if (*(char *)(v14 - 161) < 0) {
    operator delete(*(void **)(v14 - 184));
  }
  if (*(char *)(v14 - 137) < 0) {
    operator delete(*(void **)(v14 - 160));
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 176) = a2;
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"# LSTM cells (", 14);
    uint64_t v2 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") should not be less than output dim (", 38);
    uint64_t v3 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, ").");
  }
  else
  {
    if (!*(void *)(a1 + 184)) {
      operator new();
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_ thought to be un-initialized here");
  }
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
}

void sub_1B1DF7BAC()
{
}

void sub_1B1DF7BC8(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, kaldi::quasar::Vocab *this, float a5)
{
  uint64_t v10 = kaldi::quasar::Vocab::VocabSize(this);
  uint64_t v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)this);
  kaldi::Matrix<float>::Matrix((uint64_t)v17, v10, v11, 0, 0);
  uint64_t v12 = 0;
LABEL_2:
  if (v12 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v17))
  {
    for (uint64_t i = 0; ; ++i)
    {
      if (i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v17))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0);
          float v14 = v15 * a5;
        }
        else
        {
          if (a3 != 1) {
            continue;
          }
          float v14 = (kaldi::UniformRandomNumber::RandUniform(a1, 0) + -0.5) * (float)(a5 + a5);
        }
      }
      else if (v12 == i)
      {
        float v14 = 1.0;
      }
      else
      {
        float v14 = 0.0;
      }
      *(float *)(v17[0] + 4 * (int)v12 * v18 + 4 * i) = v14;
    }
  }
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)this, (uint64_t)v17);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v17);
}

void sub_1B1DF7D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  void v2[34];

  uint64_t result = *(void *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(void *a1, uint64_t *a2)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, int a3)
{
  if (kaldi::Peek(a2, a3) != 60)
  {
LABEL_135:
    int v34 = *(_DWORD *)(a1 + 176);
    int v35 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
    if (v34 < v35)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
      BOOL v40 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") should not be less than output dim (", 38);
      int v41 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v41, ").");
    }
    else
    {
      uint64_t v36 = *(void *)(a1 + 184);
      *(unsigned char *)(a1 + 2++*(_DWORD *)(result + 24) = v34 > v35;
      if (!v36) {
        operator new();
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  while (1)
  {
    long long v44 = 0uLL;
    uint64_t v45 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v44);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
      switch(HIBYTE(v45))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((void)v44 != 0x6C6C65436D754E3CLL || WORD4(v44) != 15987) {
            goto LABEL_138;
          }
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_138;
        case 0xF:
          BOOL v23 = (void)v44 == 0x61526E7261654C3CLL && *(void *)((char *)&v44 + 7) == 0x3E66656F43657461;
          uint64_t v10 = (float *)(a1 + 464);
          if (v23) {
            goto LABEL_127;
          }
          if (HIBYTE(v45) != 8) {
            goto LABEL_84;
          }
          goto LABEL_97;
        case 0x12:
          if ((void)v44 == 0x4374757074754F3CLL
            && *((void *)&v44 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v45 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v45) == 9) {
            goto LABEL_119;
          }
          if (HIBYTE(v45) != 18) {
            goto LABEL_138;
          }
          BOOL v21 = (void)v44 == 0x6E6569646172473CLL && *((void *)&v44 + 1) == 0x7079546D726F4E74;
          if (!v21 || (unsigned __int16)v45 != 15973) {
            goto LABEL_138;
          }
          goto LABEL_133;
        default:
          if (HIBYTE(v45) != 25) {
            goto LABEL_138;
          }
          BOOL v18 = (void)v44 == 0x7463656A6F72503CLL
             && *((void *)&v44 + 1) == 0x6E7261654C6E6F69
             && v45 == 0x66656F4365746152
             && v46 == 62;
          uint64_t v10 = (float *)(a1 + 468);
          if (v18) {
            goto LABEL_127;
          }
LABEL_84:
          if (HIBYTE(v45) != 9) {
            goto LABEL_138;
          }
LABEL_85:
          BOOL v24 = (void)v44 == 0x6D726F4E78614D3CLL && BYTE8(v44) == 62;
          uint64_t v10 = (float *)(a1 + 472);
          if (v24) {
            goto LABEL_127;
          }
          if (HIBYTE(v45) == 8) {
            goto LABEL_97;
          }
          if (HIBYTE(v45) != 9) {
            goto LABEL_138;
          }
          BOOL v25 = (void)v44 == 0x6C6C654378614D3CLL && BYTE8(v44) == 62;
          uint64_t v10 = (float *)(a1 + 476);
          if (!v25) {
            goto LABEL_119;
          }
          goto LABEL_127;
      }
    }
    uint64_t v7 = *((void *)&v44 + 1);
    if (*((void *)&v44 + 1) == 10
      && (*(void *)v44 == 0x6C6C65436D754E3CLL ? (BOOL v8 = *(unsigned __int16 *)(v44 + 8) == 15987) : (BOOL v8 = 0), v8))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176);
    }
    else
    {
      if (*((void *)&v44 + 1) == 15)
      {
        BOOL v9 = *(void *)v44 == 0x61526E7261654C3CLL && *(void *)(v44 + 7) == 0x3E66656F43657461;
        uint64_t v10 = (float *)(a1 + 464);
        if (v9) {
          goto LABEL_127;
        }
        uint64_t v7 = *((void *)&v44 + 1);
      }
      if (v7 == 25)
      {
        BOOL v13 = *(void *)v44 == 0x7463656A6F72503CLL
           && *(void *)(v44 + 8) == 0x6E7261654C6E6F69
           && *(void *)(v44 + 16) == 0x66656F4365746152
           && *(unsigned char *)(v44 + 24) == 62;
        uint64_t v10 = (float *)(a1 + 468);
        if (v13) {
          goto LABEL_127;
        }
        uint64_t v7 = *((void *)&v44 + 1);
      }
      if (v7 != 9) {
        goto LABEL_47;
      }
      BOOL v14 = *(void *)v44 == 0x6D726F4E78614D3CLL && *(unsigned char *)(v44 + 8) == 62;
      uint64_t v10 = (float *)(a1 + 472);
      if (v14) {
        goto LABEL_127;
      }
      uint64_t v7 = *((void *)&v44 + 1);
      if (*((void *)&v44 + 1) != 9) {
        goto LABEL_47;
      }
      BOOL v15 = *(void *)v44 == 0x6C6C654378614D3CLL && *(unsigned char *)(v44 + 8) == 62;
      uint64_t v10 = (float *)(a1 + 476);
      if (v15) {
        goto LABEL_127;
      }
      if ((v45 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v45) == 9) {
          goto LABEL_119;
        }
        if (HIBYTE(v45) != 8) {
          goto LABEL_138;
        }
LABEL_97:
        if ((void)v44 != 0x3E706565506F4E3CLL)
        {
          if ((v45 & 0x8000000000000000) == 0) {
            goto LABEL_138;
          }
LABEL_100:
          uint64_t v7 = *((void *)&v44 + 1);
          if (v7 != 18) {
            goto LABEL_120;
          }
LABEL_101:
          if (*(void *)v44 == 0x4374757074754F3CLL
            && *(void *)(v44 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v44 + 16) == 15987)
          {
LABEL_132:
            *(unsigned char *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          uint64_t v7 = *((void *)&v44 + 1);
          if (*((void *)&v44 + 1) != 18) {
            goto LABEL_120;
          }
          if (*(void *)v44 == 0x6E6569646172473CLL
            && *(void *)(v44 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v44 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v43 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v43) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_128;
          }
          if ((v45 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v45) != 9) {
              goto LABEL_138;
            }
LABEL_119:
            uint64_t v30 = &v44;
          }
          else
          {
LABEL_120:
            if (v7 != 9) {
              goto LABEL_138;
            }
            uint64_t v30 = (long long *)v44;
          }
          uint64_t v31 = *(void *)v30;
          int v32 = *((unsigned __int8 *)v30 + 8);
          BOOL v33 = v31 == 0x6461724778614D3CLL && v32 == 62;
          uint64_t v10 = (float *)(a1 + 152);
          if (!v33)
          {
LABEL_138:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v45 >= 0) {
              uint64_t v38 = &v44;
            }
            else {
              uint64_t v38 = (long long *)v44;
            }
            if (v45 >= 0) {
              uint64_t v39 = HIBYTE(v45);
            }
            else {
              uint64_t v39 = *((void *)&v44 + 1);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v10);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v7 != 8) {
          goto LABEL_101;
        }
        if (*(void *)v44 != 0x3E706565506F4E3CLL) {
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
    if (kaldi::Peek(a2, a3) != 60) {
      goto LABEL_135;
    }
  }
}

void sub_1B1DF8A50()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(void *a1, uint64_t *a2, int a3)
{
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, void *a2, uint64_t a3)
{
  kaldi::WriteToken(a2, a3, "<NumCells>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<ProjectionLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxCell>");
  uint64_t result = kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (!*(unsigned char *)(a1 + 208)) {
    uint64_t result = kaldi::WriteToken(a2, a3, "<NoPeep>");
  }
  if (*(unsigned char *)(a1 + 209)) {
    return kaldi::WriteToken(a2, a3, "<OutputCellValues>");
  }
  return result;
}

void sub_1B1DF8C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(void *a1, void *a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig((uint64_t)a1 + *(void *)(*a1 - 184), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(unsigned char *a1, void *a2, uint64_t a3, int a4)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 128))(a1);
  (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)a1 + 192))(a1, a2, a3);
  BOOL v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v8, a2, a3, a4);
  BOOL v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3);
  if (a1[224])
  {
    uint64_t v12 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<short>::Write(v12, a2, a3, a4);
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(void *a1, void *a2, uint64_t a3, int a4)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  uint64_t v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  int v3 = kaldi::quasar::Vocab::VocabSize(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  int v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  BOOL v6 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  int v7 = kaldi::quasar::Vocab::VocabSize(v6);
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  int v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  uint64_t v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16));
  if (*(unsigned char *)(a1 + 208))
  {
    int v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20);
    uint64_t v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16)
                       * v11);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v12 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    int v13 = kaldi::quasar::Vocab::VocabSize(v12);
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams((uint64_t)a1 + *(void *)(*a1 - 192));
}

const void **kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(unsigned char *a1, void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  int v5 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v6 = kaldi::quasar::Vocab::VocabSize(v5);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7) * v6;
  int v9 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v10 = kaldi::quasar::Vocab::VocabSize(v9);
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v12 = kaldi::QuantizedMatrixBase<short>::NumCols(v11) * v10;
  BOOL v29 = (char *)*a2;
  LODWORD(v30) = v8;
  int v13 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v29, v13);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v14 = v12 + v8;
  BOOL v29 = (char *)*a2 + 4 * v8;
  LODWORD(v30) = v12;
  BOOL v15 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v29, v15);
  if (a1[208])
  {
    int v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v16;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v18 = v17 + v14;
    BOOL v29 = (char *)*a2 + 4 * v14;
    LODWORD(v30) = v17;
    uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v29, v19);
    int v14 = v18;
  }
  int v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  BOOL v29 = (char *)*a2 + 4 * v14;
  LODWORD(v30) = v20;
  BOOL v21 = (const void **)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  uint64_t result = kaldi::CuVectorBase<float>::CopyToVec<float>(v21, (uint64_t)&v29);
  if (a1[224])
  {
    int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v14;
    BOOL v24 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v25 = kaldi::quasar::Vocab::VocabSize(v24);
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v27 = kaldi::QuantizedMatrixBase<short>::NumCols(v26);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    BOOL v29 = (char *)*a2 + 4 * v23;
    uint64_t v30 = (v27 * v25);
    uint64_t v28 = (float *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    return (const void **)kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v29, v28);
  }
  return result;
}

const void **virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(void *a1, void **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams((unsigned char *)a1 + *(void *)(*a1 - 200), a2);
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(unsigned char *a1, char **a2)
{
  (*(void (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  uint64_t v4 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v5 = kaldi::quasar::Vocab::VocabSize(v4);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v7 = kaldi::QuantizedMatrixBase<short>::NumCols(v6) * v5;
  int v8 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v9 = kaldi::quasar::Vocab::VocabSize(v8);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v11 = kaldi::QuantizedMatrixBase<short>::NumCols(v10) * v9;
  int v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v27 = *a2;
  LODWORD(v28) = v7;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v12, &v27);
  int v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v14 = v11 + v7;
  int v27 = &(*a2)[4 * v7];
  LODWORD(v28) = v11;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v13, &v27);
  if (a1[208])
  {
    int v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v15;
    uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v27 = &(*a2)[4 * v14];
    LODWORD(v28) = v16;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v17, &v27);
    v14 += v16;
  }
  int v18 = (void *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  int v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  int v27 = &(*a2)[4 * v14];
  LODWORD(v28) = v19;
  uint64_t result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v18, (uint64_t)&v27);
  if (a1[224])
  {
    int v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v14;
    uint64_t v22 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v23 = kaldi::quasar::Vocab::VocabSize(v22);
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v25 = kaldi::QuantizedMatrixBase<short>::NumCols(v24) * v23;
    uint64_t v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v27 = &(*a2)[4 * v21];
    LODWORD(v28) = v25;
    return (void *)kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v26, &v27);
  }
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(void *a1, char **a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams((unsigned char *)a1 + *(void *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  uint64_t v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  double v3 = kaldi::QuantizedMatrixBase<short>::Sum(v2);
  float v4 = *(float *)&v3;
  int v5 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  double v6 = kaldi::QuantizedMatrixBase<short>::Sum(v5);
  float v7 = v4 + *(float *)&v6;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    float v7 = v7 + kaldi::CuMatrixBase<float>::Sum(v8);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    double v10 = kaldi::QuantizedMatrixBase<short>::Sum(v9);
    float v7 = v7 + *(float *)&v10;
  }
  uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  double v12 = kaldi::CuVectorBase<float>::Sum(v11);
  return v7 + *(float *)&v12;
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams((uint64_t)a1 + *(void *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  uint64_t v3 = kaldi::quasar::Vocab::VocabSize(v2);
  uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  uint64_t v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix(v6, v3, v5, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

void sub_1B1DF9568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v5 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  uint64_t v6 = kaldi::quasar::Vocab::VocabSize(v5);
  uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  uint64_t v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)va, v6, v8, 1, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1B1DF95C0()
{
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0) + 20);
    uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize(v13, v2, *(unsigned int *)(v3 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
    uint64_t v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v13, 111, v1, 1.0);
  }
  uint64_t v5 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0) + 16);
  memset(&v12[1], 0, 24);
  v12[0] = &unk_1F0A517C0;
  kaldi::CuVector<float>::Resize((uint64_t)v12, v5, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v12);
  uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v6, (uint64_t)v12, v1, 1.0);
  if (*(unsigned char *)(v0 + 224))
  {
    uint64_t v7 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    uint64_t v8 = kaldi::quasar::Vocab::VocabSize(v7);
    uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    uint64_t v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9);
    kaldi::CuMatrix<float>::Resize(v13, v8, v10, 1, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v13);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<short>::AddMat();
  }
  kaldi::CuVector<float>::~CuVector(v12);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_1B1DF96FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(void *a1)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(unsigned char *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8 = (const void *)(*(uint64_t (**)(unsigned char *))(*(void *)a1 + 136))(a1);
  if (v8) {
  else
  }
    uint64_t v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, void, void))(*(void *)v9 + 336))(v9, a2, a3, 0, 0);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize(a4, v10, 0);
  uint64_t v11 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v12 = kaldi::quasar::Vocab::VocabSize(v11);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  int v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13) * v12;
  int v15 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v16 = kaldi::quasar::Vocab::VocabSize(v15);
  uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  int v18 = kaldi::QuantizedMatrixBase<short>::NumCols(v17);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = *a4;
  LODWORD(v40) = v14;
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v36, v19, 111);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v39, (uint64_t)&v36);
  int v20 = v18 * v16;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v36);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  int v21 = v20 + v14;
  uint64_t v36 = (uint64_t)*a4 + 4 * v14;
  LODWORD(v37) = v20;
  uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v22);
  if (a1[208])
  {
    int v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    int v24 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v23;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v25 = v24 + v21;
    uint64_t v36 = (uint64_t)*a4 + 4 * v21;
    LODWORD(v37) = v24;
    uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v26);
    int v21 = v25;
  }
  int v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = (uint64_t)*a4 + 4 * v21;
  LODWORD(v37) = v27;
  uint64_t v28 = (const void **)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v36);
  if (a1[224])
  {
    int v29 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v21;
    uint64_t v30 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v31 = kaldi::quasar::Vocab::VocabSize(v30);
    uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    int v33 = kaldi::QuantizedMatrixBase<short>::NumCols(v32);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = (uint64_t)*a4 + 4 * v29;
    uint64_t v37 = (v33 * v31);
    uint64_t v34 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v36, v34);
  }
  return (*(uint64_t (**)(void *))(*(void *)v9 + 8))(v9);
}

void sub_1B1DF9A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient((unsigned char *)a1 + *(void *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(void *a1, int a2)
{
  uint64_t v2 = (float *)((char *)a1 + *(void *)(*a1 - 24));
  if (!*((unsigned char *)v2 + 84)) {
    return v2[14];
  }
  uint64_t v3 = a1[63];
  unint64_t v4 = a1[64] - v3;
  if (!v4) {
    return NAN;
  }
  unint64_t v5 = v4 >> 2;
  if ((int)v5 <= a2) {
    return NAN;
  }
  int v6 = v5 - 1;
  if (a2 >= 0) {
    int v6 = a2;
  }
  return *(float *)(v3 + 4 * v6);
}

float virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(void *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate((void *)((char *)a1 + *(void *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v44);
  (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 192))(a1, v44, 0);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Input weights:", 16);
  uint64_t v3 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v3);
  if ((v43 & 0x80u) == 0) {
    unint64_t v4 = v42;
  }
  else {
    unint64_t v4 = (void **)v42[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v5 = v43;
  }
  else {
    uint64_t v5 = (uint64_t)v42[1];
  }
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  uint64_t v8 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v8);
  if ((v41 & 0x80u) == 0) {
    uint64_t v9 = v40;
  }
  else {
    uint64_t v9 = (void **)v40[0];
  }
  if ((v41 & 0x80u) == 0) {
    uint64_t v10 = v41;
  }
  else {
    uint64_t v10 = (uint64_t)v40[1];
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13);
  if ((v39 & 0x80u) == 0) {
    int v14 = v38;
  }
  else {
    int v14 = (void **)v38[0];
  }
  if ((v39 & 0x80u) == 0) {
    uint64_t v15 = v39;
  }
  else {
    uint64_t v15 = (uint64_t)v38[1];
  }
  int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\n Forget gate bias:", 19);
  uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  uint64_t v19 = *(int *)(a1 + 176);
  uint64_t v34 = 0;
  uint64_t v20 = *(void *)(v18 + 8) + 4 * v19;
  uint64_t v32 = &unk_1F0A472D0;
  uint64_t v33 = v20;
  LODWORD(v34) = v19;
  uint64_t v35 = *(void *)(v18 + 24);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)&v32);
  if ((v37 & 0x80u) == 0) {
    int v21 = __p;
  }
  else {
    int v21 = (void **)__p[0];
  }
  if ((v37 & 0x80u) == 0) {
    uint64_t v22 = v37;
  }
  else {
    uint64_t v22 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v21, v22);
  if ((char)v37 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v39 < 0) {
    operator delete(v38[0]);
  }
  if ((char)v41 < 0) {
    operator delete(v40[0]);
  }
  if ((char)v43 < 0) {
    operator delete(v42[0]);
  }
  if (*(unsigned char *)(a1 + 208))
  {
    int v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Peephole weights:", 19);
    uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v24);
    int v25 = v34 >= 0 ? &v32 : (void **)v32;
    uint64_t v26 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\n Projection weights:", 21);
    uint64_t v28 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<short>(v28);
    int v29 = v34 >= 0 ? &v32 : (void **)v32;
    uint64_t v30 = v34 >= 0 ? HIBYTE(v34) : v33;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);
    if (SHIBYTE(v34) < 0) {
      operator delete(v32);
    }
  }
  std::stringbuf::str();
  v44[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v44 + *(void *)(v44[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v44[1] = MEMORY[0x1E4FBA470] + 16;
  if (v45 < 0) {
    operator delete((void *)v44[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v46);
}

void sub_1B1DFA1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(void *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info((uint64_t)a1 + *(void *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 528))
  {
    memset(&v101, 0, sizeof(v101));
    int v100 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v88, "\n For batch ");
        kaldi::quasar::to_string<int>();
        if ((v87 & 0x80u) == 0) {
          uint64_t v3 = v86;
        }
        else {
          uint64_t v3 = (void **)v86[0];
        }
        if ((v87 & 0x80u) == 0) {
          std::string::size_type v4 = v87;
        }
        else {
          std::string::size_type v4 = (std::string::size_type)v86[1];
        }
        uint64_t v5 = std::string::append(&v88, (const std::string::value_type *)v3, v4);
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v84, ": ");
        if ((v85 & 0x80u) == 0) {
          uint64_t v7 = v84;
        }
        else {
          uint64_t v7 = (void **)v84[0];
        }
        if ((v85 & 0x80u) == 0) {
          std::string::size_type v8 = v85;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v84[1];
        }
        uint64_t v9 = std::string::append(&v89, (const std::string::value_type *)v7, v8);
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Number of cells : ");
        if ((v83 & 0x80u) == 0) {
          uint64_t v11 = v82;
        }
        else {
          uint64_t v11 = (void **)v82[0];
        }
        if ((v83 & 0x80u) == 0) {
          std::string::size_type v12 = v83;
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v82[1];
        }
        uint64_t v13 = std::string::append(&v90, (const std::string::value_type *)v11, v12);
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::quasar::to_string<int>();
        if ((v81 & 0x80u) == 0) {
          uint64_t v15 = v80;
        }
        else {
          uint64_t v15 = (void **)v80[0];
        }
        if ((v81 & 0x80u) == 0) {
          std::string::size_type v16 = v81;
        }
        else {
          std::string::size_type v16 = (std::string::size_type)v80[1];
        }
        uint64_t v17 = std::string::append(&v91, (const std::string::value_type *)v15, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Input weights gradient: ");
        if ((v79 & 0x80u) == 0) {
          uint64_t v19 = v78;
        }
        else {
          uint64_t v19 = (void **)v78[0];
        }
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v20 = v79;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v78[1];
        }
        int v21 = std::string::append(&v92, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v77 & 0x80u) == 0) {
          uint64_t v24 = v76;
        }
        else {
          uint64_t v24 = (void **)v76[0];
        }
        if ((v77 & 0x80u) == 0) {
          std::string::size_type v25 = v77;
        }
        else {
          std::string::size_type v25 = (std::string::size_type)v76[1];
        }
        uint64_t v26 = std::string::append(&v93, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Recurrent weights gradient: ");
        if ((v75 & 0x80u) == 0) {
          uint64_t v28 = v74;
        }
        else {
          uint64_t v28 = (void **)v74[0];
        }
        if ((v75 & 0x80u) == 0) {
          std::string::size_type v29 = v75;
        }
        else {
          std::string::size_type v29 = (std::string::size_type)v74[1];
        }
        uint64_t v30 = std::string::append(&v94, (const std::string::value_type *)v28, v29);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v73 & 0x80u) == 0) {
          uint64_t v33 = v72;
        }
        else {
          uint64_t v33 = (void **)v72[0];
        }
        if ((v73 & 0x80u) == 0) {
          std::string::size_type v34 = v73;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v72[1];
        }
        uint64_t v35 = std::string::append(&v95, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v70, "\n  Bias gradient: ");
        if ((v71 & 0x80u) == 0) {
          unsigned __int8 v37 = v70;
        }
        else {
          unsigned __int8 v37 = (void **)v70[0];
        }
        if ((v71 & 0x80u) == 0) {
          std::string::size_type v38 = v71;
        }
        else {
          std::string::size_type v38 = (std::string::size_type)v70[1];
        }
        unsigned __int8 v39 = std::string::append(&v96, (const std::string::value_type *)v37, v38);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        uint64_t v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v100);
        kaldi::nnet1::MomentStatistics<float>(v41);
        if ((v69 & 0x80u) == 0) {
          uint64_t v42 = __p;
        }
        else {
          uint64_t v42 = (void **)__p[0];
        }
        if ((v69 & 0x80u) == 0) {
          std::string::size_type v43 = v69;
        }
        else {
          std::string::size_type v43 = (std::string::size_type)__p[1];
        }
        long long v44 = std::string::append(&v97, (const std::string::value_type *)v42, v43);
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        int64_t v99 = v44->__r_.__value_.__r.__words[2];
        long long v98 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (v99 >= 0) {
          uint64_t v46 = (const std::string::value_type *)&v98;
        }
        else {
          uint64_t v46 = (const std::string::value_type *)v98;
        }
        if (v99 >= 0) {
          std::string::size_type v47 = HIBYTE(v99);
        }
        else {
          std::string::size_type v47 = *((void *)&v98 + 1);
        }
        std::string::append(&v101, v46, v47);
        if (SHIBYTE(v99) < 0) {
          operator delete((void *)v98);
        }
        if ((char)v69 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        if ((char)v71 < 0) {
          operator delete(v70[0]);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if ((char)v73 < 0) {
          operator delete(v72[0]);
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if ((char)v75 < 0) {
          operator delete(v74[0]);
        }
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v77 < 0) {
          operator delete(v76[0]);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
        if ((char)v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if ((char)v81 < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if ((char)v83 < 0) {
          operator delete(v82[0]);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if ((char)v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if ((char)v87 < 0) {
          operator delete(v86[0]);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (*(unsigned char *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Peephole weights gradient: ");
          uint64_t v48 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v48);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v49 = &v96;
          }
          else {
            uint64_t v49 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v96.__r_.__value_.__l.__size_;
          }
          uint64_t v51 = std::string::append(&v97, (const std::string::value_type *)v49, size);
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          int64_t v99 = v51->__r_.__value_.__r.__words[2];
          long long v98 = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0) {
            long long v53 = (const std::string::value_type *)&v98;
          }
          else {
            long long v53 = (const std::string::value_type *)v98;
          }
          if (v99 >= 0) {
            std::string::size_type v54 = HIBYTE(v99);
          }
          else {
            std::string::size_type v54 = *((void *)&v98 + 1);
          }
          std::string::append(&v101, v53, v54);
          if (SHIBYTE(v99) < 0) {
            operator delete((void *)v98);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v97, "\n  Projection weights gradient: ");
          uint64_t v55 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v100);
          kaldi::nnet1::MomentStatistics<float>(v55);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v56 = &v96;
          }
          else {
            long long v56 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v57 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v57 = v96.__r_.__value_.__l.__size_;
          }
          uint64_t v58 = std::string::append(&v97, (const std::string::value_type *)v56, v57);
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          int64_t v99 = v58->__r_.__value_.__r.__words[2];
          long long v98 = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (v99 >= 0) {
            int v60 = (const std::string::value_type *)&v98;
          }
          else {
            int v60 = (const std::string::value_type *)v98;
          }
          if (v99 >= 0) {
            std::string::size_type v61 = HIBYTE(v99);
          }
          else {
            std::string::size_type v61 = *((void *)&v98 + 1);
          }
          std::string::append(&v101, v60, v61);
          if (SHIBYTE(v99) < 0) {
            operator delete((void *)v98);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
        }
        ++v100;
      }
      while (v100 < *(_DWORD *)(a1 + 80));
    }
    std::string v62 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v98, "\n");
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v63 = &v101;
    }
    else {
      int v63 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v64 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v64 = v101.__r_.__value_.__l.__size_;
    }
    int v65 = std::string::insert(v62, 0, (const std::string::value_type *)v63, v64);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v65->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v99) < 0) {
      operator delete((void *)v98);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1B1DFA9DC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(void *a1@<X0>, void *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v89, 0, sizeof(v89));
  int v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v75 & 0x80u) == 0) {
        uint64_t v3 = v74;
      }
      else {
        uint64_t v3 = (void **)v74[0];
      }
      if ((v75 & 0x80u) == 0) {
        std::string::size_type v4 = v75;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v74[1];
      }
      uint64_t v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0) {
        uint64_t v7 = v72;
      }
      else {
        uint64_t v7 = (void **)v72[0];
      }
      if ((v73 & 0x80u) == 0) {
        std::string::size_type v8 = v73;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v72[1];
      }
      uint64_t v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0) {
        uint64_t v11 = v70;
      }
      else {
        uint64_t v11 = (void **)v70[0];
      }
      if ((v71 & 0x80u) == 0) {
        std::string::size_type v12 = v71;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v70[1];
      }
      uint64_t v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0) {
        uint64_t v15 = v68;
      }
      else {
        uint64_t v15 = (void **)v68[0];
      }
      if ((v69 & 0x80u) == 0) {
        std::string::size_type v16 = v69;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v68[1];
      }
      uint64_t v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0) {
        uint64_t v19 = v66;
      }
      else {
        uint64_t v19 = (void **)v66[0];
      }
      if ((v67 & 0x80u) == 0) {
        std::string::size_type v20 = v67;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v66[1];
      }
      int v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0) {
        uint64_t v23 = v64;
      }
      else {
        uint64_t v23 = (void **)v64[0];
      }
      if ((v65 & 0x80u) == 0) {
        std::string::size_type v24 = v65;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v64[1];
      }
      std::string::size_type v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0) {
        long long v27 = v62;
      }
      else {
        long long v27 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v28 = v63;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v62[1];
      }
      std::string::size_type v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0) {
        long long v31 = v60;
      }
      else {
        long long v31 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v32 = v61;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v60[1];
      }
      uint64_t v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v35 = v58;
      }
      else {
        uint64_t v35 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v36 = v59;
      }
      else {
        std::string::size_type v36 = (std::string::size_type)v58[1];
      }
      unsigned __int8 v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0) {
        unsigned __int8 v39 = __p;
      }
      else {
        unsigned __int8 v39 = (void **)__p[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v40 = v57;
      }
      else {
        std::string::size_type v40 = (std::string::size_type)__p[1];
      }
      uint64_t v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      int64_t v87 = v41->__r_.__value_.__r.__words[2];
      long long v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0) {
        std::string::size_type v43 = (const std::string::value_type *)&v86;
      }
      else {
        std::string::size_type v43 = (const std::string::value_type *)v86;
      }
      if (v87 >= 0) {
        std::string::size_type v44 = HIBYTE(v87);
      }
      else {
        std::string::size_type v44 = *((void *)&v86 + 1);
      }
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0) {
        operator delete((void *)v86);
      }
      if ((char)v57 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if ((char)v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if ((char)v67 < 0) {
        operator delete(v66[0]);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if ((char)v69 < 0) {
        operator delete(v68[0]);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if ((char)v71 < 0) {
        operator delete(v70[0]);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      if ((char)v73 < 0) {
        operator delete(v72[0]);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if ((char)v75 < 0) {
        operator delete(v74[0]);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v45 = &v84;
        }
        else {
          long long v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v84.__r_.__value_.__l.__size_;
        }
        std::string::size_type v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        int64_t v87 = v47->__r_.__value_.__r.__words[2];
        long long v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0) {
          uint64_t v49 = (const std::string::value_type *)&v86;
        }
        else {
          uint64_t v49 = (const std::string::value_type *)v86;
        }
        if (v87 >= 0) {
          std::string::size_type v50 = HIBYTE(v87);
        }
        else {
          std::string::size_type v50 = *((void *)&v86 + 1);
        }
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0) {
          operator delete((void *)v86);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  uint64_t v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v52 = &v89;
  }
  else {
    long long v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v53 = v89.__r_.__value_.__l.__size_;
  }
  std::string::size_type v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete((void *)v86);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
}

void sub_1B1DFB2BC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B1DFB4C8()
{
}

void sub_1B1DFB4D0()
{
}

void sub_1B1DFB4D8()
{
}

void sub_1B1DFB4E0()
{
}

void sub_1B1DFB4E8()
{
}

void sub_1B1DFB4F0()
{
}

void sub_1B1DFB4F8()
{
}

void sub_1B1DFB500()
{
}

void sub_1B1DFB508()
{
}

void sub_1B1DFB510()
{
}

void sub_1B1DFB518()
{
}

void sub_1B1DFB520()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  memset(&v75, 0, sizeof(v75));
  int v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::quasar::to_string<int>();
      if ((v63 & 0x80u) == 0) {
        uint64_t v3 = v62;
      }
      else {
        uint64_t v3 = (void **)v62[0];
      }
      if ((v63 & 0x80u) == 0) {
        std::string::size_type v4 = v63;
      }
      else {
        std::string::size_type v4 = (std::string::size_type)v62[1];
      }
      uint64_t v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0) {
        uint64_t v7 = v60;
      }
      else {
        uint64_t v7 = (void **)v60[0];
      }
      if ((v61 & 0x80u) == 0) {
        std::string::size_type v8 = v61;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)v60[1];
      }
      uint64_t v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0) {
        uint64_t v11 = v58;
      }
      else {
        uint64_t v11 = (void **)v58[0];
      }
      if ((v59 & 0x80u) == 0) {
        std::string::size_type v12 = v59;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v58[1];
      }
      uint64_t v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0) {
        uint64_t v15 = v56;
      }
      else {
        uint64_t v15 = (void **)v56[0];
      }
      if ((v57 & 0x80u) == 0) {
        std::string::size_type v16 = v57;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v56[1];
      }
      uint64_t v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0) {
        uint64_t v19 = v54;
      }
      else {
        uint64_t v19 = (void **)v54[0];
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v20 = v55;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)v54[1];
      }
      int v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0) {
        uint64_t v23 = v52;
      }
      else {
        uint64_t v23 = (void **)v52[0];
      }
      if ((v53 & 0x80u) == 0) {
        std::string::size_type v24 = v53;
      }
      else {
        std::string::size_type v24 = (std::string::size_type)v52[1];
      }
      std::string::size_type v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0) {
        long long v27 = v50;
      }
      else {
        long long v27 = (void **)v50[0];
      }
      if ((v51 & 0x80u) == 0) {
        std::string::size_type v28 = v51;
      }
      else {
        std::string::size_type v28 = (std::string::size_type)v50[1];
      }
      std::string::size_type v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0) {
        long long v31 = __p;
      }
      else {
        long long v31 = (void **)__p[0];
      }
      if ((v49 & 0x80u) == 0) {
        std::string::size_type v32 = v49;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v73 = v33->__r_.__value_.__r.__words[2];
      long long v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v72;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v72;
      }
      if (v73 >= 0) {
        std::string::size_type v36 = HIBYTE(v73);
      }
      else {
        std::string::size_type v36 = *((void *)&v72 + 1);
      }
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
      if ((char)v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      if ((char)v51 < 0) {
        operator delete(v50[0]);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if ((char)v53 < 0) {
        operator delete(v52[0]);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
      if ((char)v55 < 0) {
        operator delete(v54[0]);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if ((char)v59 < 0) {
        operator delete(v58[0]);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((char)v61 < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((char)v63 < 0) {
        operator delete(v62[0]);
      }
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(void *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v37 = &v70;
        }
        else {
          unsigned __int8 v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        }
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v70.__r_.__value_.__l.__size_;
        }
        unsigned __int8 v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        int64_t v73 = v39->__r_.__value_.__r.__words[2];
        long long v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0) {
          uint64_t v41 = (const std::string::value_type *)&v72;
        }
        else {
          uint64_t v41 = (const std::string::value_type *)v72;
        }
        if (v73 >= 0) {
          std::string::size_type v42 = HIBYTE(v73);
        }
        else {
          std::string::size_type v42 = *((void *)&v72 + 1);
        }
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  std::string::size_type v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v44 = &v75;
  }
  else {
    std::string::size_type v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  }
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v75.__r_.__value_.__l.__size_;
  }
  uint64_t v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
}

void sub_1B1DFBAAC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void sub_1B1DFBC78()
{
}

void sub_1B1DFBC80()
{
}

void sub_1B1DFBC88()
{
}

void sub_1B1DFBC90()
{
}

void sub_1B1DFBC98()
{
}

void sub_1B1DFBCA0()
{
}

void sub_1B1DFBCA8()
{
}

void sub_1B1DFBCB0()
{
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(void *a1@<X0>, std::string *a2@<X8>)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(unsigned int *)(a2 + 20);
  uint64_t v9 = *(unsigned int *)(a1 + 96);
  uint64_t v130 = ((int)v8 / (int)v9);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v161, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v161, (uint64_t)"Running forward propagation for batch std::string::size_type size = ", 45);
    long long v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    std::string::size_type v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v161);
  }
  uint64_t v13 = *(void *)(a3 + 32);
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(v7, a4, v8, v13);
  uint64_t v14 = *(void *)(v7 + 104);
  if (*(void *)(v7 + 112) == v14 || *(int *)(v14 + 32 * a4 + 16) < 1)
  {
    int v125 = 0;
  }
  else
  {
    uint64_t v15 = (int32x2_t *)(*(void *)(v7 + 128) + 48 * a4);
    int v15[4] = (int32x2_t)v13;
    int v125 = 1;
    kaldi::CuMatrix<float>::Resize(v15, v9, *(unsigned int *)(*(void *)(v7 + 8) + 48 * a4 + 16), 1, 0);
  }
  uint64_t v16 = *(void *)(v7 + 248) + 48 * a4;
  uint64_t v131 = *(void *)(v7 + 344) + 48 * a4;
  uint64_t v17 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(v7);
  LODWORD(v18) = 1.0;
  kaldi::CuMatrixBase<float>::AddMatMat<short>(v16, a2, 111, v17, 112, v18, 0.0);
  uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v7);
  kaldi::CuMatrixBase<float>::AddVecToRows(v16, v19, 1.0, 1.0);
  if ((int)v130 >= 1)
  {
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v126 = v7 + 12;
    uint64_t v129 = (int)v9;
    uint64_t v22 = -(uint64_t)(int)v9;
    int v124 = -(int)v9;
    uint64_t v127 = v7;
    int v128 = v9;
    do
    {
      uint64_t v132 = v22;
      unsigned int v23 = *(_DWORD *)(v16 + 24);
      uint64_t v24 = *(void *)(v16 + 8) + 4 * (int)(v23 * v20);
      int v25 = *(_DWORD *)(v16 + 28) - v23 * v20;
      uint64_t v26 = *(void *)(v16 + 32);
      DWORD2(v162) = *(_DWORD *)(v7 + 176);
      HIDWORD(v162) = v9;
      *(void *)&long long v163 = __PAIR64__(v25, v23);
      *((void *)&v163 + 1) = v26;
      *(void *)&long long v162 = v24;
      v161 = &unk_1F0A472A0;
      unsigned int v27 = *(_DWORD *)(v16 + 24);
      uint64_t v28 = *(void *)(v16 + 8) + 4 * (int)(v27 * v20) + 4 * DWORD2(v162);
      int v29 = *(_DWORD *)(v16 + 28) - DWORD2(v162) - v27 * v20;
      uint64_t v30 = *(void *)(v16 + 32);
      *((void *)&v159 + 1) = __PAIR64__(v9, DWORD2(v162));
      *(void *)&long long v160 = __PAIR64__(v29, v27);
      *((void *)&v160 + 1) = v30;
      *(void *)&long long v159 = v28;
      uint64_t v158 = &unk_1F0A472A0;
      unsigned int v31 = *(_DWORD *)(v16 + 24);
      uint64_t v32 = *(void *)(v16 + 8) + 4 * (int)(v31 * v20) + 4 * (3 * DWORD2(v162));
      LODWORD(v28) = *(_DWORD *)(v16 + 28) - v31 * v20 - 3 * DWORD2(v162);
      uint64_t v33 = *(void *)(v16 + 32);
      *((void *)&v156 + 1) = __PAIR64__(v9, DWORD2(v162));
      *(void *)&long long v157 = __PAIR64__(v28, v31);
      *((void *)&v157 + 1) = v33;
      *(void *)&long long v156 = v32;
      long long v155 = &unk_1F0A472A0;
      uint64_t v34 = *(void *)(v7 + 272) + 48 * a4;
      LODWORD(v32) = *(_DWORD *)(v34 + 16);
      LODWORD(v33) = *(_DWORD *)(v34 + 24);
      uint64_t v35 = *(void *)(v34 + 8) + 4 * (int)(v33 * v20);
      unsigned int v36 = *(_DWORD *)(v34 + 28) - v33 * v20;
      uint64_t v37 = *(void *)(v34 + 32);
      *((void *)&v153 + 1) = __PAIR64__(v9, v32);
      *(void *)&long long v154 = __PAIR64__(v36, v33);
      *((void *)&v154 + 1) = v37;
      unint64_t v152 = &unk_1F0A472A0;
      *(void *)&long long v153 = v35;
      long long v150 = 0u;
      long long v151 = 0u;
      uint64_t v149 = &unk_1F0A472A0;
      long long v147 = 0u;
      long long v148 = 0u;
      std::string::size_type v146 = &unk_1F0A472A0;
      uint64_t v133 = v21;
      if (v21)
      {
        if (v125)
        {
          int v38 = a4;
          kaldi::CuMatrixBase<float>::SetZero(*(void *)(v7 + 128) + 48 * a4);
          uint64_t v39 = *(void *)(v7 + 128) + 48 * a4;
          uint64_t v40 = *(void *)(v39 + 8);
          unsigned int v41 = *(_DWORD *)(v39 + 20);
          unsigned int v42 = *(_DWORD *)(v39 + 24);
          unsigned int v43 = *(_DWORD *)(v39 + 28);
          uint64_t v44 = *(void *)(v39 + 32);
          DWORD2(v144) = *(_DWORD *)(v7 + 176);
          *(void *)&long long v147 = v40;
          *((void *)&v147 + 1) = __PAIR64__(v41, DWORD2(v144));
          *(void *)&long long v148 = __PAIR64__(v43, v42);
          *((void *)&v148 + 1) = v44;
          std::string v143 = &unk_1F0A472A0;
          long long v144 = 0u;
          long long v145 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
          uint64_t v45 = *(void *)(v7 + 272) + 48 * a4;
          unsigned int v46 = *(_DWORD *)(v45 + 16);
          unsigned int v47 = *(_DWORD *)(v45 + 24);
          uint64_t v48 = *(void *)(v45 + 8) + 4 * (int)(v47 * (v124 + v20));
          int v49 = *(_DWORD *)(v45 + 28) - v47 * (v124 + v20);
          uint64_t v50 = *(void *)(v45 + 32);
          *((void *)&v144 + 1) = __PAIR64__(v9, v46);
          *(void *)&long long v145 = __PAIR64__(v49, v47);
          *((void *)&v145 + 1) = v50;
          std::string v143 = &unk_1F0A472A0;
          *(void *)&long long v144 = v48;
          uint64_t v51 = *(void *)(v7 + 104) + 32 * a4;
          *((void *)&v141 + 1) = 0;
          int v140 = &unk_1F0A472D0;
          *(void *)&long long v141 = *(void *)(v51 + 8) + 4 * v20;
          DWORD2(v141) = v9;
          *(void *)&long long v142 = *(void *)(v51 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v146, (uint64_t)&v143, (uint64_t)&v140, 1);
          std::string v143 = &unk_1F0A472A0;
          long long v144 = 0u;
          long long v145 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
          uint64_t v52 = *(void *)(v7 + 128) + 48 * a4;
          uint64_t v53 = *(int *)(v7 + 176);
          unsigned int v54 = *(_DWORD *)(v52 + 20);
          unsigned int v55 = *(_DWORD *)(v52 + 24);
          uint64_t v56 = *(void *)(v52 + 8) + 4 * v53;
          LODWORD(v53) = *(_DWORD *)(v52 + 28) - v53;
          uint64_t v57 = *(void *)(v52 + 32);
          DWORD2(v144) = *(_DWORD *)(v126 + *(void *)(*(void *)v7 - 24));
          *(void *)&long long v150 = v56;
          *((void *)&v150 + 1) = __PAIR64__(v54, DWORD2(v144));
          *(void *)&long long v151 = __PAIR64__(v53, v55);
          *((void *)&v151 + 1) = v57;
          std::string v143 = &unk_1F0A472A0;
          long long v144 = 0u;
          long long v145 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
          unsigned int v58 = *(_DWORD *)(v131 + 24);
          uint64_t v59 = *(void *)(v131 + 8) + 4 * (int)(v58 * (v124 + v20));
          int v60 = *(_DWORD *)(v131 + 28) - v58 * (v124 + v20);
          uint64_t v61 = *(void *)(v131 + 32);
          DWORD2(v144) = *(_DWORD *)(v131 + 16);
          HIDWORD(v144) = v9;
          *(void *)&long long v145 = __PAIR64__(v60, v58);
          *((void *)&v145 + 1) = v61;
          std::string v143 = &unk_1F0A472A0;
          *(void *)&long long v144 = v59;
          uint64_t v62 = *(void *)(v7 + 104) + 32 * a4;
          *((void *)&v141 + 1) = 0;
          int v140 = &unk_1F0A472D0;
          *(void *)&long long v141 = *(void *)(v62 + 8) + 4 * v20;
          DWORD2(v141) = v9;
          *(void *)&long long v142 = *(void *)(v62 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v149, (uint64_t)&v143, (uint64_t)&v140, 1);
        }
        else
        {
          unsigned int v75 = *(_DWORD *)(v131 + 16);
          unsigned int v76 = *(_DWORD *)(v131 + 24);
          int v77 = *(_DWORD *)(v131 + 28) - v76 * (v124 + v20);
          uint64_t v78 = *(void *)(v131 + 32);
          *(void *)&long long v150 = *(void *)(v131 + 8) + 4 * (int)(v76 * (v124 + v20));
          *((void *)&v150 + 1) = __PAIR64__(v9, v75);
          *(void *)&long long v151 = __PAIR64__(v77, v76);
          *((void *)&v151 + 1) = v78;
          std::string v143 = &unk_1F0A472A0;
          long long v144 = 0uLL;
          long long v145 = 0uLL;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
          int v38 = a4;
          uint64_t v79 = *(void *)(v7 + 272) + 48 * a4;
          unsigned int v80 = *(_DWORD *)(v79 + 16);
          unsigned int v81 = *(_DWORD *)(v79 + 24);
          uint64_t v82 = *(void *)(v79 + 8) + 4 * (int)(v81 * (v124 + v20));
          int v83 = *(_DWORD *)(v79 + 28) - v81 * (v124 + v20);
          uint64_t v84 = *(void *)(v79 + 32);
          *(void *)&long long v147 = v82;
          *((void *)&v147 + 1) = __PAIR64__(v9, v80);
          *(void *)&long long v148 = __PAIR64__(v83, v81);
          *((void *)&v148 + 1) = v84;
        }
        std::string v143 = &unk_1F0A472A0;
        long long v144 = 0u;
        long long v145 = 0u;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      }
      else
      {
        uint64_t v63 = *(void *)(v7 + 8) + 48 * a4;
        unsigned int v64 = *(_DWORD *)(v63 + 20);
        unsigned int v65 = *(_DWORD *)(v63 + 24);
        uint64_t v66 = *(void *)(v63 + 8) + 4 * DWORD2(v162);
        int v67 = *(_DWORD *)(v63 + 28) - DWORD2(v162);
        uint64_t v68 = *(void *)(v63 + 32);
        DWORD2(v144) = *(_DWORD *)(v126 + *(void *)(*(void *)v7 - 24));
        *(void *)&long long v150 = v66;
        *((void *)&v150 + 1) = __PAIR64__(v64, DWORD2(v144));
        *(void *)&long long v151 = __PAIR64__(v67, v65);
        *((void *)&v151 + 1) = v68;
        std::string v143 = &unk_1F0A472A0;
        long long v144 = 0uLL;
        long long v145 = 0uLL;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
        uint64_t v69 = *(void *)(v7 + 8) + 48 * a4;
        uint64_t v70 = *(void *)(v69 + 8);
        unsigned int v71 = *(_DWORD *)(v69 + 20);
        unsigned int v72 = *(_DWORD *)(v69 + 24);
        unsigned int v73 = *(_DWORD *)(v69 + 28);
        uint64_t v74 = *(void *)(v69 + 32);
        DWORD2(v144) = *(_DWORD *)(v7 + 176);
        *(void *)&long long v147 = v70;
        *((void *)&v147 + 1) = __PAIR64__(v71, DWORD2(v144));
        *(void *)&long long v148 = __PAIR64__(v73, v72);
        *((void *)&v148 + 1) = v74;
        std::string v143 = &unk_1F0A472A0;
        long long v144 = 0u;
        long long v145 = 0u;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
        int v38 = a4;
      }
      unsigned int v85 = *(_DWORD *)(v16 + 24);
      uint64_t v86 = *(void *)(v16 + 8) + 4 * (int)(v85 * v20);
      int v87 = *(_DWORD *)(v16 + 28) - v85 * v20;
      uint64_t v88 = *(void *)(v16 + 32);
      DWORD2(v144) = *(_DWORD *)(v16 + 16);
      HIDWORD(v144) = v9;
      *(void *)&long long v145 = __PAIR64__(v87, v85);
      *((void *)&v145 + 1) = v88;
      std::string v143 = &unk_1F0A472A0;
      *(void *)&long long v144 = v86;
      std::string v89 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v7);
      LODWORD(v90) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v143, (uint64_t)&v149, 111, v89, 112, v90, 1.0);
      std::string v143 = &unk_1F0A472A0;
      long long v144 = 0u;
      long long v145 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      if (*(unsigned char *)(v7 + 208))
      {
        uint64_t v91 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v7);
        unsigned int v92 = *(_DWORD *)(v91 + 16);
        uint64_t v93 = *(void *)(v91 + 32);
        *(void *)&long long v144 = *(void *)(v91 + 8);
        std::string v143 = &unk_1F0A472D0;
        *((void *)&v144 + 1) = v92;
        *(void *)&long long v145 = v93;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v161, (uint64_t)&v146, 111, (uint64_t)&v143, 1.0, 1.0);
        uint64_t v94 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v7);
        unsigned int v95 = *(_DWORD *)(v94 + 16);
        uint64_t v96 = *(void *)(v94 + 32);
        *(void *)&long long v144 = *(void *)(v94 + 8) + 4 * *(int *)(v94 + 24);
        std::string v143 = &unk_1F0A472D0;
        *((void *)&v144 + 1) = v95;
        *(void *)&long long v145 = v96;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v158, (uint64_t)&v146, 111, (uint64_t)&v143, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v161, (uint64_t)&v161);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v158, (uint64_t)&v158);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v155);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v152, (uint64_t)&v161, 111, (uint64_t)&v155, 111, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v152, (uint64_t)&v158, 111, (uint64_t)&v146, 111, 1.0, 1.0);
      float v97 = *(float *)(v7 + 476);
      if (v97 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v152, v97);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v152, -*(float *)(v7 + 476));
      }
      uint64_t v98 = *(int *)(v7 + 176);
      unsigned int v99 = *(_DWORD *)(v16 + 24);
      uint64_t v100 = *(void *)(v16 + 8) + 4 * (int)(v99 * v20) + 8 * v98;
      unsigned int v101 = *(_DWORD *)(v16 + 28) - (v99 * v20 + 2 * v98);
      uint64_t v102 = *(void *)(v16 + 32);
      DWORD2(v144) = *(_DWORD *)(v7 + 176);
      HIDWORD(v144) = v9;
      *(void *)&long long v145 = __PAIR64__(v101, v99);
      *((void *)&v145 + 1) = v102;
      std::string v143 = &unk_1F0A472A0;
      *(void *)&long long v144 = v100;
      if (*(unsigned char *)(v7 + 208))
      {
        uint64_t v103 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v7);
        unsigned int v104 = *(_DWORD *)(v103 + 16);
        uint64_t v105 = *(void *)(v103 + 32);
        *(void *)&long long v141 = *(void *)(v103 + 8) + 8 * *(int *)(v103 + 24);
        int v140 = &unk_1F0A472D0;
        *((void *)&v141 + 1) = v104;
        *(void *)&long long v142 = v105;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v143, (uint64_t)&v152, 111, (uint64_t)&v140, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v143, (uint64_t)&v143);
      uint64_t v106 = *(void *)(v7 + 296) + 48 * v38;
      unsigned int v107 = *(_DWORD *)(v106 + 16);
      unsigned int v108 = *(_DWORD *)(v106 + 24);
      uint64_t v109 = *(void *)(v106 + 8) + 4 * (int)(v108 * v20);
      int v110 = *(_DWORD *)(v106 + 28) - v108 * v20;
      uint64_t v111 = *(void *)(v106 + 32);
      *((void *)&v141 + 1) = __PAIR64__(v9, v107);
      *(void *)&long long v142 = __PAIR64__(v110, v108);
      *((void *)&v142 + 1) = v111;
      int v140 = &unk_1F0A472A0;
      *(void *)&long long v141 = v109;
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v140, (uint64_t)&v152);
      uint64_t v112 = *(void *)(v7 + 320) + 48 * v38;
      unsigned int v113 = *(_DWORD *)(v112 + 16);
      unsigned int v114 = *(_DWORD *)(v112 + 24);
      uint64_t v115 = *(void *)(v112 + 8) + 4 * (int)(v114 * v20);
      int v116 = *(_DWORD *)(v112 + 28) - v114 * v20;
      uint64_t v117 = *(void *)(v112 + 32);
      *((void *)&v138 + 1) = __PAIR64__(v9, v113);
      *(void *)&long long v139 = __PAIR64__(v116, v114);
      *((void *)&v139 + 1) = v117;
      unint64_t v137 = &unk_1F0A472A0;
      *(void *)&long long v138 = v115;
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v137, (uint64_t)&v143, 111, (uint64_t)&v140, 111, 1.0, 0.0);
      unsigned int v118 = *(_DWORD *)(v131 + 24);
      uint64_t v119 = *(void *)(v131 + 8) + 4 * (int)(v118 * v20);
      int v120 = *(_DWORD *)(v131 + 28) - v118 * v20;
      uint64_t v121 = *(void *)(v131 + 32);
      if (*(unsigned char *)(v7 + 224))
      {
        DWORD2(v135) = *(_DWORD *)(v131 + 16);
        HIDWORD(v135) = v9;
        *(void *)&long long v136 = __PAIR64__(v120, v118);
        *((void *)&v136 + 1) = v121;
        uint64_t v134 = &unk_1F0A472A0;
        *(void *)&long long v135 = v119;
        int v122 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v7);
        LODWORD(v123) = 1.0;
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v134, (uint64_t)&v137, 111, v122, 112, v123, 0.0);
      }
      else
      {
        DWORD2(v135) = *(_DWORD *)(v131 + 16);
        HIDWORD(v135) = v9;
        *(void *)&long long v136 = __PAIR64__(v120, v118);
        *((void *)&v136 + 1) = v121;
        uint64_t v134 = &unk_1F0A472A0;
        *(void *)&long long v135 = v119;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v134, (uint64_t)&v137, 111);
      }
      uint64_t v134 = &unk_1F0A472A0;
      long long v135 = 0u;
      long long v136 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v134);
      unint64_t v137 = &unk_1F0A472A0;
      long long v138 = 0u;
      long long v139 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v137);
      int v140 = &unk_1F0A472A0;
      long long v141 = 0u;
      long long v142 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v140);
      std::string v143 = &unk_1F0A472A0;
      long long v144 = 0u;
      long long v145 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
      std::string::size_type v146 = &unk_1F0A472A0;
      long long v147 = 0u;
      long long v148 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
      uint64_t v149 = &unk_1F0A472A0;
      long long v150 = 0u;
      long long v151 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
      unint64_t v152 = &unk_1F0A472A0;
      long long v153 = 0u;
      long long v154 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
      long long v155 = &unk_1F0A472A0;
      long long v156 = 0u;
      long long v157 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v155);
      uint64_t v158 = &unk_1F0A472A0;
      long long v159 = 0u;
      long long v160 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v158);
      v161 = &unk_1F0A472A0;
      long long v162 = 0u;
      long long v163 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v161);
      uint64_t v21 = v133 + 1;
      LODWORD(v9) = v128;
      v20 += v128;
      uint64_t v22 = v132 + v129;
      uint64_t v7 = v127;
    }
    while (v130 != v133 + 1);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, v131, 111);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(v7, a4);
}

void sub_1B1DFCBC8(_Unwind_Exception *a1)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 248) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 272) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 296) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 320) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 344) + 48 * a2), a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  *(void *)(*(void *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1B1DFCEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(uint64_t a1, int a2)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v26, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v26);
  }
  uint64_t v4 = *(void *)(a1 + 272) + 48 * a2;
  unsigned int v5 = *(_DWORD *)(a1 + 96);
  unsigned int v6 = *(_DWORD *)(v4 + 20) - v5;
  uint64_t v7 = *(void *)(a1 + 8) + 48 * a2;
  int v8 = *(_DWORD *)(a1 + 176);
  int v9 = *(_DWORD *)(v7 + 28);
  uint64_t v10 = *(void *)(v7 + 32);
  v27[0] = *(void *)(v7 + 8);
  LODWORD(v27[1]) = v8;
  *(void *)((char *)&v27[1] + 4) = *(void *)(v7 + 20);
  HIDWORD(v27[2]) = v9;
  v27[3] = v10;
  uint64_t v26 = &unk_1F0A472A0;
  LODWORD(v7) = *(_DWORD *)(v4 + 16);
  unsigned int v11 = *(_DWORD *)(v4 + 24);
  uint64_t v12 = *(void *)(v4 + 8) + 4 * (int)(v11 * v6);
  int v13 = *(_DWORD *)(v4 + 28) - v11 * v6;
  uint64_t v14 = *(void *)(v4 + 32);
  *((void *)&v24 + 1) = __PAIR64__(v5, v7);
  *(void *)&long long v25 = __PAIR64__(v13, v11);
  *((void *)&v25 + 1) = v14;
  unsigned int v23 = &unk_1F0A472A0;
  *(void *)&long long v24 = v12;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v26, (uint64_t)&v23, 111);
  unsigned int v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  uint64_t v26 = &unk_1F0A472A0;
  memset(v27, 0, sizeof(v27));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
  uint64_t v15 = *(void *)(a1 + 8) + 48 * a2;
  uint64_t v16 = *(int *)(a1 + 176);
  int v17 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12);
  uint64_t v18 = *(void *)(v15 + 8) + 4 * v16;
  LODWORD(v16) = *(_DWORD *)(v15 + 28) - v16;
  uint64_t v19 = *(void *)(v15 + 32);
  v27[0] = v18;
  LODWORD(v27[1]) = v17;
  *(void *)((char *)&v27[1] + 4) = *(void *)(v15 + 20);
  HIDWORD(v27[2]) = v16;
  v27[3] = v19;
  uint64_t v26 = &unk_1F0A472A0;
  uint64_t v20 = *(void *)(a1 + 344) + 48 * a2;
  LODWORD(v16) = *(_DWORD *)(v20 + 16);
  LODWORD(v18) = *(_DWORD *)(v20 + 24);
  uint64_t v21 = *(void *)(v20 + 8) + 4 * (int)(v18 * v6);
  LODWORD(v19) = *(_DWORD *)(v20 + 28) - v18 * v6;
  uint64_t v22 = *(void *)(v20 + 32);
  *((void *)&v24 + 1) = __PAIR64__(*(_DWORD *)(a1 + 96), v16);
  *(void *)&long long v25 = __PAIR64__(v19, v18);
  *((void *)&v25 + 1) = v22;
  unsigned int v23 = &unk_1F0A472A0;
  *(void *)&long long v24 = v21;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v26, (uint64_t)&v23, 111);
  unsigned int v23 = &unk_1F0A472A0;
  long long v24 = 0u;
  long long v25 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
  uint64_t v26 = &unk_1F0A472A0;
  memset(v27, 0, sizeof(v27));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
}

void sub_1B1DFD1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3, int a4)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v5 = *(void *)(a3 + 24);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers((uint64_t)a1, 0, 1, v5);
  uint64_t v6 = a1[13];
  if (a1[14] != v6 && *(int *)(v6 + 16) >= 1)
  {
    uint64_t v7 = (int32x2_t *)a1[16];
    void v7[4] = (int32x2_t)v5;
    kaldi::CuMatrix<float>::Resize(v7, 1, *(unsigned int *)(a1[1] + 16), 1, 0);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::CuVectorBase<float>::AddMatVec<short>();
}

void sub_1B1DFD36C()
{
  uint64_t v2 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v1 - 80, v2, 1.0, 1.0);
  uint64_t v3 = *(int *)(v0 + 176);
  uint64_t v4 = *(void *)(v1 - 72);
  uint64_t v5 = *(void *)(v1 - 56);
  *(void *)(v1 - 1--*(_DWORD *)(a9 + 52) = v5;
  *(void *)(v1 - 144) = &unk_1F0A472D0;
  *(void *)(v1 - 136) = v4;
  *(void *)(v1 - 128) = 0;
  *(_DWORD *)(v1 - 128) = v3;
  *(void *)(v1 - 120) = v5;
  *(void *)(v1 - 176) = &unk_1F0A472D0;
  *(void *)(v1 - 168) = v4 + 4 * v3;
  *(void *)(v1 - 160) = 0;
  *(_DWORD *)(v1 - 160) = v3;
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v0);
  kaldi::CuVectorBase<float>::AddMatVec<short>();
}

void sub_1B1DFD534()
{
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    int v4 = *(_DWORD *)(v3 + 16);
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v28 = *(void *)(v3 + 8);
    int v30 = 0;
    unsigned int v27 = &unk_1F0A472D0;
    int v29 = v4;
    uint64_t v31 = v5;
    kaldi::CuVectorBase<float>::AddVecVec(v2 - 144, (uint64_t)v32, (uint64_t)&v27, 1.0, 1.0);
    uint64_t v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    int v7 = *(_DWORD *)(v6 + 16);
    uint64_t v8 = *(void *)(v6 + 32);
    uint64_t v28 = *(void *)(v6 + 8) + 4 * *(int *)(v6 + 24);
    int v30 = 0;
    unsigned int v27 = &unk_1F0A472D0;
    int v29 = v7;
    uint64_t v31 = v8;
    kaldi::CuVectorBase<float>::AddVecVec(v2 - 176, (uint64_t)v32, (uint64_t)&v27, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid(v2 - 144, v2 - 144);
  kaldi::CuVectorBase<float>::Sigmoid(v2 - 176, v2 - 176);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)v34);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v33, v2 - 144, (uint64_t)v34, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v33, (uint64_t)v32, v2 - 176, 1.0, 1.0);
  float v9 = *(float *)(v0 + 476);
  if (v9 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)v33, v9);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v33, -*(float *)(v0 + 476));
  }
  uint64_t v10 = *(int *)(v0 + 176);
  uint64_t v11 = *(void *)(v2 - 56);
  uint64_t v12 = *(void *)(v2 - 72) + 8 * v10;
  unsigned int v27 = &unk_1F0A472D0;
  uint64_t v28 = v12;
  int v30 = 0;
  int v29 = v10;
  uint64_t v31 = v11;
  if (*(unsigned char *)(v0 + 208))
  {
    uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    unsigned int v14 = *(_DWORD *)(v13 + 16);
    uint64_t v15 = *(void *)(v13 + 32);
    uint64_t v24 = *(void *)(v13 + 8) + 8 * *(int *)(v13 + 24);
    unsigned int v23 = &unk_1F0A472D0;
    uint64_t v25 = v14;
    uint64_t v26 = v15;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v27, (uint64_t)v33, (uint64_t)&v23, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v27, (uint64_t)&v27);
  uint64_t v16 = *(void *)(v0 + 296);
  uint64_t v25 = 0;
  uint64_t v17 = *(void *)(v16 + 8);
  unsigned int v23 = &unk_1F0A472D0;
  uint64_t v24 = v17;
  LODWORD(v25) = *(_DWORD *)(v16 + 16);
  uint64_t v26 = *(void *)(v16 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v23, (uint64_t)v33);
  uint64_t v18 = *(void *)(v0 + 320);
  uint64_t v21 = 0;
  uint64_t v19 = *(void *)(v18 + 8);
  v20[0] = &unk_1F0A472D0;
  v20[1] = v19;
  LODWORD(v21) = *(_DWORD *)(v18 + 16);
  uint64_t v22 = *(void *)(v18 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v20, (uint64_t)&v27, (uint64_t)&v23, 1.0, 0.0);
  if (*(unsigned char *)(v0 + 224))
  {
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    kaldi::CuVectorBase<float>::AddMatVec<short>();
  }
  kaldi::CuVectorBase<float>::CopyFromVec((void *)(v2 - 112), (uint64_t)v20);
  kaldi::CuVectorBase<float>::CopyFromVec(v1, v2 - 112);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(v0, 0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(void *a1, uint64_t a2, uint64_t a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  void *v0;
  void v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc();
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8 = a1;
  uint64_t v9 = *(unsigned int *)(a2 + 20);
  uint64_t v10 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v161, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)"Running backward propagation for batch std::string::size_type size = ", 46);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v161);
  }
  uint64_t v127 = ((int)v9 / (int)v10);
  uint64_t v14 = a5;
  if (!a5) {
    uint64_t v14 = a4;
  }
  uint64_t v15 = *(void *)(v14 + 32);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(v8, a6, v9, v15);
  uint64_t v16 = a6;
  uint64_t v17 = 3 * a6;
  uint64_t v18 = *(void *)(v8 + 248) + 48 * a6;
  uint64_t v123 = *(void *)(v8 + 440) + 16 * v17;
  int v122 = (int *)(*(void *)(v8 + 368) + 16 * v17);
  uint64_t v128 = *(void *)(v8 + 416);
  uint64_t v19 = *(void *)(v8 + 104);
  uint64_t v126 = v16;
  if (*(void *)(v8 + 112) == v19 || *(int *)(v19 + 32 * v16 + 16) < 1)
  {
    int v125 = 0;
    uint64_t v21 = *(void *)(v8 + 440) + 16 * v17;
  }
  else
  {
    uint64_t v20 = (int32x2_t *)(*(void *)(v8 + 128) + 48 * (int)v16);
    int v20[4] = (int32x2_t)v15;
    uint64_t v21 = v123;
    int v125 = 1;
    kaldi::CuMatrix<float>::Resize(v20, v10, *(unsigned int *)(v123 + 16), 1, 0);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v122, a4, 111);
  uint64_t v22 = *(int *)(v8 + 176);
  int v23 = *(_DWORD *)(v18 + 28);
  uint64_t v24 = *(void *)(v18 + 32);
  v161[1] = *(void *)(v18 + 8);
  LODWORD(v161[2]) = v22;
  *(void *)((char *)&v161[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v161[3]) = v23;
  v161[4] = v24;
  v161[0] = &unk_1F0A472A0;
  int v25 = *(_DWORD *)(v18 + 28) - v22;
  uint64_t v26 = *(void *)(v18 + 32);
  v160[1] = *(void *)(v18 + 8) + 4 * v22;
  LODWORD(v160[2]) = v22;
  *(void *)((char *)&v160[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v160[3]) = v25;
  v160[4] = v26;
  v160[0] = &unk_1F0A472A0;
  int v27 = *(_DWORD *)(v18 + 28) - 2 * v22;
  uint64_t v28 = *(void *)(v18 + 32);
  v159[1] = *(void *)(v18 + 8) + 8 * v22;
  LODWORD(v159[2]) = v22;
  *(void *)((char *)&v159[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v159[3]) = v27;
  v159[4] = v28;
  v159[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v18 + 28) - 3 * v22;
  uint64_t v29 = *(void *)(v18 + 32);
  v158[1] = *(void *)(v18 + 8) + 4 * (3 * v22);
  LODWORD(v158[2]) = v22;
  *(void *)((char *)&v158[2] + 4) = *(void *)(v18 + 20);
  HIDWORD(v158[3]) = v28;
  v158[4] = v29;
  v158[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28);
  uint64_t v30 = *(void *)(v21 + 32);
  v157[1] = *(void *)(v21 + 8);
  LODWORD(v157[2]) = v22;
  *(void *)((char *)&v157[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v157[3]) = v28;
  v157[4] = v30;
  v157[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28) - v22;
  uint64_t v31 = *(void *)(v21 + 32);
  v156[1] = *(void *)(v21 + 8) + 4 * v22;
  LODWORD(v156[2]) = v22;
  *(void *)((char *)&v156[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v156[3]) = v28;
  v156[4] = v31;
  v156[0] = &unk_1F0A472A0;
  LODWORD(v28) = *(_DWORD *)(v21 + 28) - 2 * v22;
  uint64_t v32 = *(void *)(v21 + 32);
  v155[1] = *(void *)(v21 + 8) + 8 * v22;
  LODWORD(v155[2]) = v22;
  *(void *)((char *)&v155[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v155[3]) = v28;
  v155[4] = v32;
  v155[0] = &unk_1F0A472A0;
  int v33 = *(_DWORD *)(v21 + 28) - 3 * v22;
  uint64_t v34 = *(void *)(v21 + 32);
  v154[1] = *(void *)(v21 + 8) + 4 * (3 * v22);
  LODWORD(v154[2]) = v22;
  *(void *)((char *)&v154[2] + 4) = *(void *)(v21 + 20);
  HIDWORD(v154[3]) = v33;
  v154[4] = v34;
  v154[0] = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v157, (uint64_t)v161, (uint64_t)v158);
  v153[0] = v156[1] + 4 * LODWORD(v156[3]) * (int)v10;
  LODWORD(v153[1]) = v156[2];
  HIDWORD(v153[1]) = v9 - v10;
  LODWORD(v153[2]) = v156[3];
  HIDWORD(v153[2]) = HIDWORD(v156[3]) - LODWORD(v156[3]) * v10;
  v153[3] = v156[4];
  unint64_t v152 = &unk_1F0A472A0;
  *(void *)&long long v150 = v160[1] + 4 * LODWORD(v160[3]) * (int)v10;
  DWORD2(v150) = v160[2];
  HIDWORD(v150) = v9 - v10;
  LODWORD(v151) = v160[3];
  DWORD1(v151) = HIDWORD(v160[3]) - LODWORD(v160[3]) * v10;
  *((void *)&v151 + 1) = v160[4];
  uint64_t v149 = &unk_1F0A472A0;
  uint64_t v35 = *(void *)(v8 + 272) + 48 * (int)v126;
  int v36 = *(_DWORD *)(v35 + 16);
  uint64_t v37 = *(void *)(v35 + 32);
  *(void *)&long long v147 = *(void *)(v35 + 8);
  DWORD2(v147) = v36;
  HIDWORD(v147) = v9 - v10;
  *(void *)&long long v148 = *(void *)(v35 + 24);
  *((void *)&v148 + 1) = v37;
  std::string::size_type v146 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v152, (uint64_t)&v149, (uint64_t)&v146);
  std::string::size_type v146 = &unk_1F0A472A0;
  long long v147 = 0u;
  long long v148 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
  uint64_t v149 = &unk_1F0A472A0;
  long long v150 = 0u;
  long long v151 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
  unint64_t v152 = &unk_1F0A472A0;
  memset(v153, 0, sizeof(v153));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  v153[0] = v156[1];
  v153[1] = __PAIR64__(v10, v156[2]);
  v153[2] = v156[3];
  v153[3] = v156[4];
  unint64_t v152 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v152);
  unint64_t v152 = &unk_1F0A472A0;
  memset(v153, 0, sizeof(v153));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  if (v125)
  {
    uint64_t v38 = *(void *)(v8 + 128) + 48 * (int)v126;
    int v39 = *(_DWORD *)(v8 + 176);
    int v40 = *(_DWORD *)(v38 + 28);
    uint64_t v41 = *(void *)(v38 + 32);
    v153[0] = *(void *)(v38 + 8);
    LODWORD(v153[1]) = v39;
    *(void *)((char *)&v153[1] + 4) = *(void *)(v38 + 20);
    HIDWORD(v153[2]) = v40;
    v153[3] = v41;
    unint64_t v152 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v152);
    int v42 = 0;
    uint64_t v43 = v127 - 1;
    do
    {
      int v44 = LODWORD(v156[3]) * (v10 + v42);
      *((void *)&v150 + 1) = __PAIR64__(v10, v156[2]);
      LODWORD(v151) = v156[3];
      DWORD1(v151) = HIDWORD(v156[3]) - v44;
      *((void *)&v151 + 1) = v156[4];
      *(void *)&long long v150 = v156[1] + 4 * v44;
      uint64_t v149 = &unk_1F0A472A0;
      uint64_t v45 = *(void *)(v8 + 104) + 32 * v126;
      *((void *)&v147 + 1) = 0;
      std::string::size_type v146 = &unk_1F0A472D0;
      *(void *)&long long v147 = *(void *)(v45 + 8) + 4 * (v10 + v42);
      DWORD2(v147) = v10;
      *(void *)&long long v148 = *(void *)(v45 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v149, (uint64_t)&v152, (uint64_t)&v146, 0);
      uint64_t v149 = &unk_1F0A472A0;
      long long v150 = 0u;
      long long v151 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
      v42 += v10;
      --v43;
    }
    while (v43);
    unint64_t v152 = &unk_1F0A472A0;
    memset(v153, 0, sizeof(v153));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)v155, (uint64_t)v159, *(void *)(v8 + 296) + 48 * (int)v126);
  uint64_t v46 = v123;
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)v154, (uint64_t)v158, (uint64_t)v161);
  uint64_t v47 = v128 + 16 * v17;
  kaldi::CuMatrixBase<float>::DiffTanh(v47, *(void *)(v8 + 296) + 48 * (int)v126, (uint64_t)v159);
  int v48 = 0;
  uint64_t v129 = (v127 - 1);
  int v124 = v10 * (v127 - 1);
  uint64_t v121 = v8;
  int v49 = v122;
  do
  {
    unsigned int v50 = v124 + v48;
    int v51 = v49[6];
    uint64_t v52 = *((void *)v49 + 1) + 4 * v51 * (v124 + v48);
    int v53 = v49[7] - v51 * (v124 + v48);
    uint64_t v54 = *((void *)v49 + 4);
    LODWORD(v153[1]) = v49[4];
    HIDWORD(v153[1]) = v10;
    v153[2] = __PAIR64__(v53, v51);
    v153[3] = v54;
    v153[0] = v52;
    unint64_t v152 = &unk_1F0A472A0;
    uint64_t v55 = *(void *)(v8 + 392) + 48 * (int)v126;
    LODWORD(v--*(_DWORD *)(a9 + 52) = *(_DWORD *)(v55 + 16);
    unsigned int v56 = *(_DWORD *)(v55 + 24);
    int v57 = v56 * (v124 + v48);
    uint64_t v58 = *(void *)(v55 + 8) + 4 * v57;
    LODWORD(v54) = *(_DWORD *)(v55 + 28) - v57;
    uint64_t v59 = *(void *)(v55 + 32);
    *((void *)&v150 + 1) = __PAIR64__(v10, v52);
    *(void *)&long long v151 = __PAIR64__(v54, v56);
    *((void *)&v151 + 1) = v59;
    *(void *)&long long v150 = v58;
    uint64_t v149 = &unk_1F0A472A0;
    if (*(unsigned char *)(v8 + 224))
    {
      int v60 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v8);
      LODWORD(v61) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v149, (uint64_t)&v152, 111, v60, 111, v61, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v149, (uint64_t)&v152, 111);
    }
    *(void *)&long long v147 = v155[1] + 4 * (int)(LODWORD(v155[3]) * v50);
    *((void *)&v147 + 1) = __PAIR64__(v10, v155[2]);
    LODWORD(v148) = v155[3];
    DWORD1(v148) = HIDWORD(v155[3]) - LODWORD(v155[3]) * v50;
    *((void *)&v148 + 1) = v155[4];
    std::string::size_type v146 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v146, (uint64_t)&v149);
    unsigned int v62 = *(_DWORD *)(v47 + 16);
    unsigned int v63 = *(_DWORD *)(v47 + 24);
    int v64 = *(_DWORD *)(v47 + 28) - v63 * v50;
    uint64_t v65 = *(void *)(v47 + 32);
    *(void *)&long long v144 = *(void *)(v47 + 8) + 4 * (int)(v63 * v50);
    *((void *)&v144 + 1) = __PAIR64__(v10, v62);
    *(void *)&long long v145 = __PAIR64__(v64, v63);
    *((void *)&v145 + 1) = v65;
    std::string v143 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v143, (uint64_t)&v149);
    if (*(unsigned char *)(v8 + 208))
    {
      uint64_t v66 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v8);
      uint64_t v67 = *(void *)(v66 + 8) + 8 * *(int *)(v66 + 24);
      unsigned int v68 = *(_DWORD *)(v66 + 16);
      uint64_t v69 = *(void *)(v66 + 32);
      long long v141 = &unk_1F0A472D0;
      v142[0] = v67;
      v142[1] = v68;
      v142[2] = v69;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v143, (uint64_t)&v146, 111, (uint64_t)&v141, 1.0, 1.0);
    }
    if (v129 < (int)v127 - 1)
    {
      uint64_t v70 = (v10 * v127 + v48);
      unsigned int v71 = *(_DWORD *)(v47 + 16);
      unsigned int v72 = *(_DWORD *)(v47 + 24);
      unsigned int v73 = *(_DWORD *)(v47 + 28) - v72 * v70;
      uint64_t v74 = *(void *)(v47 + 32);
      v142[0] = *(void *)(v47 + 8) + 4 * (int)(v72 * v70);
      v142[1] = __PAIR64__(v10, v71);
      v142[2] = __PAIR64__(v73, v72);
      v142[3] = v74;
      long long v141 = &unk_1F0A472A0;
      v140[0] = v160[1] + 4 * LODWORD(v160[3]) * (int)v70;
      v140[1] = __PAIR64__(v10, v160[2]);
      LODWORD(v140[2]) = v160[3];
      HIDWORD(v140[2]) = HIDWORD(v160[3]) - LODWORD(v160[3]) * v70;
      v140[3] = v160[4];
      long long v139 = &unk_1F0A472A0;
      if (v125)
      {
        uint64_t v75 = *(void *)(v8 + 128) + 48 * (int)v126;
        int v76 = *(_DWORD *)(v8 + 176);
        int v77 = *(_DWORD *)(v75 + 28);
        uint64_t v78 = *(void *)(v75 + 32);
        v138[0] = *(void *)(v75 + 8);
        LODWORD(v138[1]) = v76;
        *(void *)((char *)&v138[1] + 4) = *(void *)(v75 + 20);
        HIDWORD(v138[2]) = v77;
        v138[3] = v78;
        unint64_t v137 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v137);
        uint64_t v79 = *(void *)(v8 + 104) + 32 * v126;
        v136[1] = 0;
        long long v135 = &unk_1F0A472D0;
        v136[0] = *(void *)(v79 + 8) + 4 * v70;
        LODWORD(v136[1]) = v10;
        v136[2] = *(void *)(v79 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v137, (uint64_t)&v141, (uint64_t)&v135, 1);
        *(_OWORD *)&v142[1] = *(_OWORD *)&v138[1];
        v142[0] = v138[0];
        v142[3] = v138[3];
        uint64_t v80 = *(void *)(v8 + 128) + 48 * (int)v126;
        uint64_t v81 = *(int *)(v8 + 176);
        int v82 = *(_DWORD *)(v80 + 28) - v81;
        uint64_t v83 = *(void *)(v80 + 32);
        v136[0] = *(void *)(v80 + 8) + 4 * v81;
        LODWORD(v136[1]) = v81;
        *(void *)((char *)&v136[1] + 4) = *(void *)(v80 + 20);
        HIDWORD(v136[2]) = v82;
        v136[3] = v83;
        long long v135 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v135);
        uint64_t v84 = *(void *)(v8 + 104) + 32 * v126;
        v134[2] = 0;
        v134[0] = &unk_1F0A472D0;
        v134[1] = *(void *)(v84 + 8) + 4 * v70;
        LODWORD(v134[2]) = v10;
        v134[3] = *(void *)(v84 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v135, (uint64_t)&v139, (uint64_t)v134, 1);
        v140[0] = v136[0];
        *(_OWORD *)&v140[1] = *(_OWORD *)&v136[1];
        v140[3] = v136[3];
        long long v135 = &unk_1F0A472A0;
        memset(v136, 0, sizeof(v136));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v135);
        unint64_t v137 = &unk_1F0A472A0;
        memset(v138, 0, sizeof(v138));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v137);
      }
      if (*(unsigned char *)(v8 + 208))
      {
        v138[0] = v156[1] + 4 * LODWORD(v156[3]) * (int)v70;
        v138[1] = __PAIR64__(v10, v156[2]);
        LODWORD(v138[2]) = v156[3];
        HIDWORD(v138[2]) = HIDWORD(v156[3]) - LODWORD(v156[3]) * v70;
        v138[3] = v156[4];
        v136[0] = v157[1] + 4 * LODWORD(v157[3]) * (int)v70;
        v136[1] = __PAIR64__(v10, v157[2]);
        LODWORD(v136[2]) = v157[3];
        HIDWORD(v136[2]) = HIDWORD(v157[3]) - LODWORD(v157[3]) * v70;
        v136[3] = v157[4];
        unint64_t v137 = &unk_1F0A472A0;
        long long v135 = &unk_1F0A472A0;
        if (v125)
        {
          uint64_t v85 = *(void *)(v8 + 128) + 48 * (int)v126;
          uint64_t v86 = *(int *)(v8 + 176);
          int v87 = *(_DWORD *)(v85 + 28) - 2 * v86;
          uint64_t v88 = *(void *)(v85 + 32);
          v134[1] = *(void *)(v85 + 8) + 8 * v86;
          LODWORD(v134[2]) = v86;
          *(void *)((char *)&v134[2] + 4) = *(void *)(v85 + 20);
          HIDWORD(v134[3]) = v87;
          v134[4] = v88;
          v134[0] = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v134);
          uint64_t v89 = *(void *)(v8 + 104) + 32 * v126;
          v133[2] = 0;
          v133[0] = &unk_1F0A472D0;
          v133[1] = *(void *)(v89 + 8) + 4 * v70;
          LODWORD(v133[2]) = v10;
          v133[3] = *(void *)(v89 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v134, (uint64_t)&v137, (uint64_t)v133, 1);
          *(_OWORD *)&v138[1] = *(_OWORD *)&v134[2];
          v138[0] = v134[1];
          v138[3] = v134[4];
          uint64_t v90 = *(void *)(v8 + 128) + 48 * (int)v126;
          int v91 = *(_DWORD *)(v8 + 176);
          int v92 = *(_DWORD *)(v90 + 28) - 3 * v91;
          uint64_t v93 = *(void *)(v90 + 32);
          v133[1] = *(void *)(v90 + 8) + 12 * v91;
          LODWORD(v133[2]) = v91;
          *(void *)((char *)&v133[2] + 4) = *(void *)(v90 + 20);
          HIDWORD(v133[3]) = v92;
          void v133[4] = v93;
          v133[0] = &unk_1F0A472A0;
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)v133);
          uint64_t v94 = *(void *)(v8 + 104) + 32 * v126;
          uint64_t v131 = 0;
          v130[0] = &unk_1F0A472D0;
          v130[1] = *(void *)(v94 + 8) + 4 * v70;
          LODWORD(v131) = v10;
          uint64_t v132 = *(void *)(v94 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)v133, (uint64_t)&v135, (uint64_t)v130, 1);
          v136[0] = v133[1];
          *(_OWORD *)&v136[1] = *(_OWORD *)&v133[2];
          v136[3] = v133[4];
          v133[0] = &unk_1F0A472A0;
          memset(&v133[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v133);
          v134[0] = &unk_1F0A472A0;
          memset(&v134[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v134);
          uint64_t v8 = v121;
          int v49 = v122;
        }
        uint64_t v95 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v8);
        unsigned int v96 = *(_DWORD *)(v95 + 16);
        uint64_t v97 = *(void *)(v95 + 32);
        v134[1] = *(void *)(v95 + 8) + 4 * *(int *)(v95 + 24);
        v134[0] = &unk_1F0A472D0;
        v134[2] = v96;
        v134[3] = v97;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v143, (uint64_t)&v137, 111, (uint64_t)v134, 1.0, 1.0);
        uint64_t v98 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v8);
        unsigned int v99 = *(_DWORD *)(v98 + 16);
        uint64_t v100 = *(void *)(v98 + 32);
        v134[1] = *(void *)(v98 + 8);
        v134[0] = &unk_1F0A472D0;
        v134[2] = v99;
        v134[3] = v100;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v143, (uint64_t)&v135, 111, (uint64_t)v134, 1.0, 1.0);
        long long v135 = &unk_1F0A472A0;
        memset(v136, 0, sizeof(v136));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v135);
        unint64_t v137 = &unk_1F0A472A0;
        memset(v138, 0, sizeof(v138));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v137);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v143, (uint64_t)&v141, 111, (uint64_t)&v139, 111, 1.0, 1.0);
      long long v139 = &unk_1F0A472A0;
      memset(v140, 0, sizeof(v140));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v139);
      long long v141 = &unk_1F0A472A0;
      memset(v142, 0, sizeof(v142));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      uint64_t v46 = v123;
    }
    v142[0] = v157[1] + 4 * (int)(LODWORD(v157[3]) * v50);
    v142[1] = __PAIR64__(v10, v157[2]);
    LODWORD(v142[2]) = v157[3];
    HIDWORD(v142[2]) = HIDWORD(v157[3]) - LODWORD(v157[3]) * v50;
    v142[3] = v157[4];
    long long v141 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v141, (uint64_t)&v143);
    long long v141 = &unk_1F0A472A0;
    memset(v142, 0, sizeof(v142));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
    v142[0] = v154[1] + 4 * (int)(LODWORD(v154[3]) * v50);
    v142[1] = __PAIR64__(v10, v154[2]);
    LODWORD(v142[2]) = v154[3];
    HIDWORD(v142[2]) = HIDWORD(v154[3]) - LODWORD(v154[3]) * v50;
    v142[3] = v154[4];
    long long v141 = &unk_1F0A472A0;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v141, (uint64_t)&v143);
    long long v141 = &unk_1F0A472A0;
    memset(v142, 0, sizeof(v142));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
    if (v129 >= 1)
    {
      v142[0] = v156[1] + 4 * (int)(LODWORD(v156[3]) * v50);
      v142[1] = __PAIR64__(v10, v156[2]);
      LODWORD(v142[2]) = v156[3];
      HIDWORD(v142[2]) = HIDWORD(v156[3]) - LODWORD(v156[3]) * v50;
      v142[3] = v156[4];
      long long v141 = &unk_1F0A472A0;
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v141, (uint64_t)&v143);
      long long v141 = &unk_1F0A472A0;
      memset(v142, 0, sizeof(v142));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
      unsigned int v101 = *(_DWORD *)(v46 + 16);
      unsigned int v102 = *(_DWORD *)(v46 + 24);
      int v103 = *(_DWORD *)(v46 + 28) - v102 * v50;
      uint64_t v104 = *(void *)(v46 + 32);
      v142[0] = *(void *)(v46 + 8) + 4 * (int)(v102 * v50);
      v142[1] = __PAIR64__(v10, v101);
      v142[2] = __PAIR64__(v103, v102);
      v142[3] = v104;
      long long v141 = &unk_1F0A472A0;
      if (v125)
      {
        uint64_t v105 = *(void *)(v8 + 128) + 48 * (int)v126;
        int v106 = *(_DWORD *)(v105 + 28);
        uint64_t v107 = *(void *)(v105 + 32);
        v140[0] = *(void *)(v105 + 8);
        LODWORD(v140[1]) = v101;
        *(void *)((char *)&v140[1] + 4) = *(void *)(v105 + 20);
        HIDWORD(v140[2]) = v106;
        v140[3] = v107;
        long long v139 = &unk_1F0A472A0;
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v139);
        uint64_t v108 = *(void *)(v8 + 104) + 32 * v126;
        v138[1] = 0;
        unint64_t v137 = &unk_1F0A472D0;
        v138[0] = *(void *)(v108 + 8) + 4 * v50;
        LODWORD(v138[1]) = v10;
        v138[2] = *(void *)(v108 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v139, (uint64_t)&v141, (uint64_t)&v137, 1);
        *(_OWORD *)&v142[1] = *(_OWORD *)&v140[1];
        v142[0] = v140[0];
        v142[3] = v140[3];
        long long v139 = &unk_1F0A472A0;
        memset(v140, 0, sizeof(v140));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v139);
        uint64_t v8 = v121;
        int v49 = v122;
      }
      int v109 = v49[4];
      int v110 = v49[6];
      int v111 = v110 * (v10 * (v127 - 2) + v48);
      uint64_t v112 = *((void *)v49 + 1) + 4 * v111;
      unsigned int v113 = v49[7] - v111;
      uint64_t v114 = *((void *)v49 + 4);
      v140[0] = v112;
      v140[1] = __PAIR64__(v10, v109);
      v140[2] = __PAIR64__(v113, v110);
      v140[3] = v114;
      long long v139 = &unk_1F0A472A0;
      uint64_t v115 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v8);
      LODWORD(v116) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v139, (uint64_t)&v141, 111, v115, 111, v116, 1.0);
      long long v139 = &unk_1F0A472A0;
      memset(v140, 0, sizeof(v140));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v139);
      long long v141 = &unk_1F0A472A0;
      memset(v142, 0, sizeof(v142));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v141);
    }
    std::string v143 = &unk_1F0A472A0;
    long long v144 = 0u;
    long long v145 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v143);
    std::string::size_type v146 = &unk_1F0A472A0;
    long long v147 = 0u;
    long long v148 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v146);
    uint64_t v149 = &unk_1F0A472A0;
    long long v150 = 0u;
    long long v151 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v149);
    unint64_t v152 = &unk_1F0A472A0;
    memset(v153, 0, sizeof(v153));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v152);
    v48 -= v10;
  }
  while (v129-- > 0);
  if (a5)
  {
    unsigned int v118 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(v8);
    LODWORD(v119) = 1.0;
    kaldi::CuMatrixBase<float>::AddMatMat<short>(a5, v46, 111, v118, 111, v119, 0.0);
  }
  v154[0] = &unk_1F0A472A0;
  memset(&v154[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v154);
  v155[0] = &unk_1F0A472A0;
  memset(&v155[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v155);
  v156[0] = &unk_1F0A472A0;
  memset(&v156[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v156);
  v157[0] = &unk_1F0A472A0;
  memset(&v157[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v157);
  v158[0] = &unk_1F0A472A0;
  memset(&v158[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v158);
  v159[0] = &unk_1F0A472A0;
  memset(&v159[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v159);
  v160[0] = &unk_1F0A472A0;
  memset(&v160[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v160);
  v161[0] = &unk_1F0A472A0;
  memset(&v161[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v161);
}

void sub_1B1DFF05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, unint64_t a11, _OWORD *a12, unint64_t a13, _OWORD *a14, unint64_t a15, _OWORD *a16, unint64_t a17, _OWORD *a18, unint64_t a19, _OWORD *a20,unint64_t a21,_OWORD *a22,unint64_t a23,_OWORD *a24,unint64_t a25)
{
  STACK[0x2F0] = v25;
  *uint64_t v26 = 0u;
  v26[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x2F0]);
  STACK[0x318] = a19;
  *a20 = 0u;
  a20[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x318]);
  STACK[0x340] = a21;
  *a22 = 0u;
  a22[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x340]);
  STACK[0x368] = a23;
  *a24 = 0u;
  a24[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x368]);
  STACK[0x390] = a25;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x390]);
  STACK[0x3B8] = a11;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3B8]);
  STACK[0x3E0] = a13;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x3E0]);
  STACK[0x408] = a15;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x408]);
  STACK[0x430] = a17;
  *a18 = 0u;
  a18[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void sub_1B1DFF3D8()
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch std::string::size_type size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 368) + 48 * a2), a3, *(unsigned int *)(a1 + *(void *)(*(void *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 392) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 416) + 48 * a2), a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 440) + 48 * a2), a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(void *)(*(void *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(void *)(*(void *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1B1DFF554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9 = *(_DWORD *)(a1 + 96);
  int v10 = *(_DWORD *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Accumulating gradients for batch id = ", 38);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v60);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  uint64_t v47 = *(void *)(a1 + 272);
  uint64_t v14 = *(void *)(a1 + 440) + 48 * a5;
  float v15 = *(float *)(a1 + 60);
  *(_DWORD *)(*(void *)(a1 + 480) + 4 * a5) = v10;
  uint64_t v16 = *(int *)(a1 + 176);
  int v17 = *(_DWORD *)(v14 + 28);
  uint64_t v18 = *(void *)(v14 + 32);
  v60[1] = *(void *)(v14 + 8);
  LODWORD(v60[2]) = v16;
  *(void *)((char *)&v60[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v60[3]) = v17;
  void v60[4] = v18;
  v60[0] = &unk_1F0A472A0;
  int v19 = *(_DWORD *)(v14 + 28) - v16;
  uint64_t v20 = *(void *)(v14 + 32);
  v59[1] = *(void *)(v14 + 8) + 4 * v16;
  LODWORD(v59[2]) = v16;
  *(void *)((char *)&v59[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v59[3]) = v19;
  void v59[4] = v20;
  v59[0] = &unk_1F0A472A0;
  int v21 = *(_DWORD *)(v14 + 28) - 2 * v16;
  uint64_t v22 = *(void *)(v14 + 32);
  v58[1] = *(void *)(v14 + 8) + 8 * v16;
  LODWORD(v58[2]) = v16;
  *(void *)((char *)&v58[2] + 4) = *(void *)(v14 + 20);
  HIDWORD(v58[3]) = v21;
  v58[4] = v22;
  v58[0] = &unk_1F0A472A0;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a5) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a5) + 32) = a4;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a5) + ++*(_DWORD *)(result + 24) = a4;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a5) + 32) = a4;
  }
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a5) + 32) = a4;
  }
  uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a5);
  kaldi::CuMatrixBase<float>::AddMatMat(v23, v14, CblasTrans, a2, CblasNoTrans, 1.0, v15);
  uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a5);
  unsigned int v25 = *(_DWORD *)(v14 + 24);
  uint64_t v26 = *(void *)(v14 + 8) + 4 * (int)(v25 * v9);
  int v27 = *(_DWORD *)(v14 + 28) - v25 * v9;
  uint64_t v28 = *(void *)(v14 + 32);
  DWORD2(v56) = *(_DWORD *)(v14 + 16);
  HIDWORD(v56) = v10 - v9;
  *(void *)&long long v57 = __PAIR64__(v27, v25);
  *((void *)&v57 + 1) = v28;
  uint64_t v55 = &unk_1F0A472A0;
  *(void *)&long long v56 = v26;
  uint64_t v29 = *(void *)(a1 + 344) + 48 * a5;
  LODWORD(v26) = *(_DWORD *)(v29 + 16);
  uint64_t v30 = *(void *)(v29 + 32);
  *(void *)&long long v53 = *(void *)(v29 + 8);
  DWORD2(v53) = v26;
  HIDWORD(v53) = v10 - v9;
  *(void *)&long long v54 = *(void *)(v29 + 24);
  *((void *)&v54 + 1) = v30;
  uint64_t v52 = &unk_1F0A472A0;
  kaldi::CuMatrixBase<float>::AddMatMat(v24, (uint64_t)&v55, CblasTrans, (uint64_t)&v52, CblasNoTrans, 1.0, v15);
  uint64_t v52 = &unk_1F0A472A0;
  long long v53 = 0u;
  long long v54 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  uint64_t v55 = &unk_1F0A472A0;
  long long v56 = 0u;
  long long v57 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
  uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v31, v14, 1.0, v15);
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a5);
    uint64_t v33 = v47 + 48 * a5;
    unsigned int v34 = *(_DWORD *)(v32 + 16);
    uint64_t v35 = *(void *)(v32 + 32);
    uint64_t v49 = *(void *)(v32 + 8);
    int v48 = &unk_1F0A472D0;
    uint64_t v50 = v34;
    uint64_t v51 = v35;
    DWORD2(v56) = v60[2];
    HIDWORD(v56) = v10 - v9;
    LODWORD(v57) = v60[3];
    DWORD1(v57) = HIDWORD(v60[3]) - LODWORD(v60[3]) * v9;
    *((void *)&v57 + 1) = v60[4];
    uint64_t v55 = &unk_1F0A472A0;
    *(void *)&long long v56 = v60[1] + 4 * LODWORD(v60[3]) * v9;
    int v36 = *(_DWORD *)(v33 + 16);
    uint64_t v37 = *(void *)(v33 + 32);
    *(void *)&long long v53 = *(void *)(v33 + 8);
    DWORD2(v53) = v36;
    HIDWORD(v53) = v10 - v9;
    *(void *)&long long v54 = *(void *)(v33 + 24);
    *((void *)&v54 + 1) = v37;
    uint64_t v52 = &unk_1F0A472A0;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    uint64_t v52 = &unk_1F0A472A0;
    long long v53 = 0u;
    long long v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    uint64_t v55 = &unk_1F0A472A0;
    long long v56 = 0u;
    long long v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    uint64_t v38 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a5);
    unsigned int v39 = *(_DWORD *)(v38 + 16);
    uint64_t v40 = *(void *)(v38 + 32);
    uint64_t v49 = *(void *)(v38 + 8) + 4 * *(int *)(v38 + 24);
    int v48 = &unk_1F0A472D0;
    uint64_t v50 = v39;
    uint64_t v51 = v40;
    DWORD2(v56) = v59[2];
    HIDWORD(v56) = v10 - v9;
    LODWORD(v57) = v59[3];
    DWORD1(v57) = HIDWORD(v59[3]) - LODWORD(v59[3]) * v9;
    *((void *)&v57 + 1) = v59[4];
    uint64_t v55 = &unk_1F0A472A0;
    *(void *)&long long v56 = v59[1] + 4 * LODWORD(v59[3]) * v9;
    int v41 = *(_DWORD *)(v33 + 16);
    uint64_t v42 = *(void *)(v33 + 32);
    *(void *)&long long v53 = *(void *)(v33 + 8);
    DWORD2(v53) = v41;
    HIDWORD(v53) = v10 - v9;
    *(void *)&long long v54 = *(void *)(v33 + 24);
    *((void *)&v54 + 1) = v42;
    uint64_t v52 = &unk_1F0A472A0;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v48, (uint64_t)&v55, 112, (uint64_t)&v52, 111, 1.0, v15);
    uint64_t v52 = &unk_1F0A472A0;
    long long v53 = 0u;
    long long v54 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
    uint64_t v55 = &unk_1F0A472A0;
    long long v56 = 0u;
    long long v57 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v55);
    uint64_t v43 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a5);
    unsigned int v44 = *(_DWORD *)(v43 + 16);
    uint64_t v45 = *(void *)(v43 + 32);
    *(void *)&long long v56 = *(void *)(v43 + 8) + 8 * *(int *)(v43 + 24);
    uint64_t v55 = &unk_1F0A472D0;
    *((void *)&v56 + 1) = v44;
    *(void *)&long long v57 = v45;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v55, (uint64_t)v58, 112, v33, 111, 1.0, v15);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v46, *(void *)(a1 + 368) + 48 * a5, CblasTrans, *(void *)(a1 + 320) + 48 * a5, CblasNoTrans, 1.0, v15);
  }
  v58[0] = &unk_1F0A472A0;
  memset(&v58[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v58);
  v59[0] = &unk_1F0A472A0;
  memset(&v59[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v59);
  v60[0] = &unk_1F0A472A0;
  memset(&v60[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
}

void sub_1B1DFFCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, _OWORD *a14, uint64_t a15, _OWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a31 = a11;
  *a12 = 0u;
  a12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a31);
  a36 = a13;
  *a14 = 0u;
  a14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a36);
  a41 = a15;
  *a16 = 0u;
  a16[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a41);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = 1;
  }
  if (*(void *)(a1 + 544) != *(void *)(a1 + 536))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "input_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 568) != *(void *)(a1 + 560))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(void *)(a1 + 616) != *(void *)(a1 + 608))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bias_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 208) && *(void *)(a1 + 592) != *(void *)(a1 + 584))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "peephole_weights_gradient_.size() == 0");
    goto LABEL_34;
  }
  if (*(unsigned char *)(a1 + 224) && *(void *)(a1 + 640) != *(void *)(a1 + 632))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "projection_weights_gradient_.size() == 0");
LABEL_34:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 536), v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 560), v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t *)(a1 + 608), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), v3);
  if (v3 >= 1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 208))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 584), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), v3);
  }
  if (*(unsigned char *)(a1 + 224))
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t *)(a1 + 632), v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), v3);
  }
  *(unsigned char *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, 2);
    int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 272))(__p, a1);
    if ((v8 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v8 & 0x80u) == 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    if ((char)v8 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
}

void sub_1B1E00538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = (void *)(a1 + 104);
  if (v5 == *(void *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    uint64_t v5 = *(void *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v5 + 32 * a3, *(unsigned int *)(a2 + 16), 1);
  unsigned __int8 v8 = (void *)(*v6 + 32 * a3);
  return kaldi::CuVectorBase<float>::CopyFromVec(v8, a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  *((_WORD *)a1 + 120) = 0;
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(void *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  int v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(void *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, int32x2_t *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 1, 0);
  uint64_t v7 = *(void *)(a1 + 8) + 48 * a3;
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v7, 111);
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, void *a2, int a3, unsigned int a4)
{
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(void *)(a1 + 8) + 48 * a4 + 16), 1);
  uint64_t v8 = *(void *)(a1 + 8) + 48 * a4;
  uint64_t v9 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  unsigned int v10 = *(_DWORD *)(v8 + 16);
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v9;
  v13[0] = &unk_1F0A472D0;
  _OWORD v13[2] = v10;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v13);
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(void *a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v6 = (int *)(a1[1] + 48 * a3);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v6, a2, 111);
}

void *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(void *a1, uint64_t a2, int a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  uint64_t v8 = a1[1] + 48 * a4;
  unsigned int v9 = *(_DWORD *)(a2 + 16);
  uint64_t v10 = *(void *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  uint64_t v11 = *(void *)(v8 + 32);
  v13[1] = v10;
  v13[0] = &unk_1F0A472D0;
  _OWORD v13[2] = v9;
  void v13[3] = v11;
  return kaldi::CuVectorBase<float>::CopyFromVec(v13, a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(void *a1, void *a2, uint64_t a3, unsigned int a4)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  *(void *)(a1[1] + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    unint64_t v8 = 0;
    do
    {
      if ((*(void *)(*a2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8))
      {
        uint64_t v9 = a1[1] + 48 * a4;
        uint64_t v10 = *(void *)(v9 + 8) + 4 * *(_DWORD *)(v9 + 24) * (int)v8;
        unsigned int v11 = *(_DWORD *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 32);
        v20[1] = v10;
        v20[0] = &unk_1F0A472D0;
        void v20[2] = v11;
        uint64_t v20[3] = v12;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v20);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          uint64_t v13 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
        }
      }
      ++v8;
    }
    while (a2[1] > v8);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20, 3);
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v19 & 0x80u) == 0) {
      float v15 = __p;
    }
    else {
      float v15 = (void **)__p[0];
    }
    if ((v19 & 0x80u) == 0) {
      uint64_t v16 = v19;
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    if ((char)v19 < 0) {
      operator delete(__p[0]);
    }
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v20);
  }
  v21[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v21[1] = MEMORY[0x1E4FBA470] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B3EA8520](&v23);
}

void sub_1B1E00C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(void *a1)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  for (uint64_t i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 1--*(_DWORD *)(a9 + 52) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(unsigned char *)(result + 528) = 0;
  return result;
}

void *virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(void *result, int a2, float a3)
{
  int v3 = (float *)((char *)result + *(void *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((unsigned char *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3)
{
  float v4 = a3;
  int v6 = *(_DWORD *)(a1 + 156);
  if (v6 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(unsigned char *)(a1 + 84)) {
        float v4 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
      }
      uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v14, v4);
      uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v15, v4);
      uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v16, v4);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v17, v4);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v4);
      }
    }
  }
  else if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v8, *(void *)(a1 + 656) + 48 * a2, v4);
      uint64_t v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v9, *(void *)(a1 + 680) + 48 * a2, v4);
      uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(void *)(a1 + 728) + 32 * a2, v4);
      if (*(unsigned char *)(a1 + 208))
      {
        uint64_t v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(void *)(a1 + 704) + 48 * a2, v4);
      }
      if (*(unsigned char *)(a1 + 224))
      {
        uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        uint64_t v13 = *(void *)(a1 + 752) + 48 * a2;
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, v13, v4);
      }
    }
  }
  else if (a3 > 0.0 && v6 == 2)
  {
    uint64_t v20 = a2;
    if (*(unsigned char *)(a1 + 84)) {
      float v4 = (float)*(int *)(*(void *)(a1 + 480) + 4 * a2) * a3;
    }
    uint64_t v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v21, (int *)(*(void *)(a1 + 656) + 48 * v20), v4);
    uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v22, (int *)(*(void *)(a1 + 680) + 48 * v20), v4);
    uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v23, (void *)(*(void *)(a1 + 728) + 32 * v20), v4);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (int *)(*(void *)(a1 + 704) + 48 * v20), v4);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
      uint64_t v26 = (int *)(*(void *)(a1 + 752) + 48 * v20);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v25, v26, v4);
    }
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(void *a1, unsigned int a2, float a3)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  *a3 = result;
  if (*(void *)(a1 + 544) == *(void *)(a1 + 536) || *(void *)(a1 + 568) == *(void *)(a1 + 560))
  {
    int v15 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v7 = 0;
  }
  else {
    int v7 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  uint64_t v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v7);
  int v9 = kaldi::CuMatrixBase<float>::CountZeros(v8);
  uint64_t v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v7);
  int v11 = kaldi::CuMatrixBase<float>::CountZeros(v10) + v9;
  uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v7);
  uint64_t result = kaldi::CuVectorBase<float>::CountZeros(v12);
  *a2 = v11 + result;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v13);
    *a2 += result;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    uint64_t v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v7);
    uint64_t result = kaldi::CuMatrixBase<float>::CountZeros(v14);
    int v15 = *a2 + result;
LABEL_11:
    *a2 = v15;
  }
  return result;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(void *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr((uint64_t)a1 + *(void *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
}

int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetInternalMemory(uint64_t a1, int *a2, int a3)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(void *)(a1 + 272) + 48 * a3, 111);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::EnsureBuffers(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240))
  {
    unint64_t v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(void *)(a1 + 8) + v3), *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(void *)(*(void *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 480), v2);
    *(unsigned char *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Check(uint64_t a1)
{
  unint64_t v2 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::quasar::Vocab::VocabSize(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    int v9 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::quasar::Vocab::VocabSize(v9);
    uint64_t v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    uint64_t v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    uint64_t v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  float v4 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::quasar::Vocab::VocabSize(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    int v15 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::quasar::Vocab::VocabSize(v15);
    uint64_t v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    uint64_t v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  uint64_t v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(void *)(*(void *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    unsigned __int8 v19 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    uint64_t v20 = (void *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      uint64_t v23 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      uint64_t v24 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      uint64_t v25 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16) != 4
                                                                                               * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
    uint64_t v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    uint64_t v22 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    int v6 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    if (kaldi::quasar::Vocab::VocabSize(v6) == *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 12))
    {
      uint64_t v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176)) {
        goto LABEL_12;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      uint64_t v30 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      uint64_t v31 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      uint64_t v26 = (kaldi::quasar::Vocab *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::quasar::Vocab::VocabSize(v26);
      int v27 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      uint64_t v28 = (void *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  float result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1B1E018C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

uint64_t virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  float v6 = *(float *)(a1 + 64);
  float v7 = *(float *)(a1 + 68);
  uint64_t v8 = a1 + *(void *)(*(void *)a1 - 24);
  float v9 = *(float *)(v8 + 72);
  int v10 = *(_DWORD *)(v8 + 76);
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 32) = a2;
  if (*(unsigned char *)(a1 + 208)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 32) = a2;
  }
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + ++*(_DWORD *)(result + 24) = a2;
  if (*(unsigned char *)(a1 + 224)) {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 32) = a2;
  }
  if (a3 >= 0) {
    int v11 = a3;
  }
  else {
    int v11 = *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80);
  }
  if (*(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80) == 1) {
    int v12 = 0;
  }
  else {
    int v12 = v11;
  }
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v12) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v12) + 32) = a2;
  *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v12) + ++*(_DWORD *)(result + 24) = a2;
  unint64_t v13 = v12;
  *(void *)(*(void *)(a1 + 656) + 48 * v12 + 32) = a2;
  *(void *)(*(void *)(a1 + 680) + 48 * v12 + 32) = a2;
  *(void *)(*(void *)(a1 + 728) + 32 * v12 + ++*(_DWORD *)(result + 24) = a2;
  if (*(unsigned char *)(a1 + 208))
  {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v12) + 32) = a2;
    *(void *)(*(void *)(a1 + 704) + 48 * v12 + 32) = a2;
  }
  if (*(unsigned char *)(a1 + 224))
  {
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v12) + 32) = a2;
    *(void *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v12) + 32) = a2;
  }
  uint64_t v14 = a1 + 80;
  if (v12 == *(_DWORD *)(a1 + 80))
  {
    uint64_t v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v12);
    kaldi::CuMatrixBase<float>::SetZero(v15);
    uint64_t v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v12);
    kaldi::CuMatrixBase<float>::SetZero(v16);
    uint64_t v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v12);
    kaldi::CuVectorBase<float>::SetZero(v17);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v12);
      kaldi::CuMatrixBase<float>::SetZero(v18);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v12);
      kaldi::CuMatrixBase<float>::SetZero(v19);
    }
    uint64_t v20 = *(void *)a1;
    if (*(int *)(v14 + *(void *)(*(void *)a1 - 24)) >= 1)
    {
      int v21 = 0;
      do
      {
        uint64_t v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v13);
        uint64_t v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v21);
        kaldi::CuMatrixBase<float>::AddMat(v22, v23, 111, 1.0, 1.0);
        uint64_t v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v13);
        uint64_t v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v21);
        kaldi::CuMatrixBase<float>::AddMat(v24, v25, 111, 1.0, 1.0);
        uint64_t v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v13);
        uint64_t v27 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v21);
        kaldi::CuVectorBase<float>::AddVec(v26, v27, 1.0, 1.0);
        if (*(unsigned char *)(a1 + 208))
        {
          uint64_t v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v13);
          uint64_t v29 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v21);
          kaldi::CuMatrixBase<float>::AddMat(v28, v29, 111, 1.0, 1.0);
        }
        if (*(unsigned char *)(a1 + 224))
        {
          uint64_t v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v13);
          uint64_t v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v21);
          kaldi::CuMatrixBase<float>::AddMat(v30, v31, 111, 1.0, 1.0);
        }
        ++v21;
        uint64_t v20 = *(void *)a1;
      }
      while (v21 < *(_DWORD *)(v14 + *(void *)(*(void *)a1 - 24)));
    }
    uint64_t v32 = *(int **)(a1 + 480);
    v32[v13] = 0;
    if ((int)v13 >= 1)
    {
      int v33 = 0;
      uint64_t v34 = v13;
      uint64_t v35 = v32;
      do
      {
        int v36 = *v35++;
        v33 += v36;
        v32[v13] = v33;
        --v34;
      }
      while (v34);
    }
  }
  else
  {
    uint64_t v20 = *(void *)a1;
  }
  uint64_t v37 = a1 + *(void *)(v20 - 24);
  float v38 = *(float *)(v37 + 56);
  if (*(unsigned char *)(v37 + 84)) {
    float v38 = v38 / (float)*(int *)(*(void *)(a1 + 480) + 4 * v13);
  }
  uint64_t v39 = *(void *)(a1 + 504);
  if (v13 >= (*(void *)(a1 + 512) - v39) >> 2)
  {
    LODWORD(v68[0]) = 2143289344;
    std::vector<float>::resize(a1 + 504, (int)v13 + 1, v68);
    uint64_t v39 = *(void *)(a1 + 504);
  }
  *(float *)(v39 + 4 * v13) = v38;
  if (*(float *)(a1 + 152) >= 0.0) {
    (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 360))(a1, v13);
  }
  if (v6 != 0.0)
  {
    uint64_t v40 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    float v41 = -(float)(v38 * v6);
    float v42 = v41 * (float)*(int *)(*(void *)(a1 + 480) + 4 * v13);
    uint64_t v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v40, v43, 111, v42, 1.0);
    uint64_t v44 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    float v45 = v41 * (float)*(int *)(*(void *)(a1 + 480) + 4 * v13);
    uint64_t v46 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v44, v46, 111, v45, 1.0);
    uint64_t v47 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    uint64_t v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::AddVec(v47, v48, v41, 1.0);
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v49 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      float v50 = v41 * (float)*(int *)(*(void *)(a1 + 480) + 4 * v13);
      uint64_t v51 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v49, v51, 111, v50, 1.0);
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v52 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      float v53 = v41 * (float)*(int *)(*(void *)(a1 + 480) + 4 * v13);
      uint64_t v54 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v52, v54, 111, v53, 1.0);
    }
  }
  if (v7 != 0.0)
  {
    uint64_t v55 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    uint64_t v56 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v13);
    kaldi::cu::RegularizeL1<float>(v55, v56, (float)(v7 * v38) * (float)*(int *)(*(void *)(a1 + 480) + 4 * v13), v38);
    uint64_t v57 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    uint64_t v58 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v13);
    kaldi::cu::RegularizeL1<float>(v57, v58, (float)(v7 * v38) * (float)*(int *)(*(void *)(a1 + 480) + 4 * v13), v38);
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v59 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      uint64_t v60 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v13);
      kaldi::cu::RegularizeL1<float>(v59, v60, (float)(v7 * v38) * (float)*(int *)(*(void *)(a1 + 480) + 4 * v13), v38);
    }
  }
  if (v9 > 0.0)
  {
    if (*(int *)(a1 + *(void *)(*(void *)a1 - 24) + 80) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v68, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v68);
    }
    if (*(void *)(a1 + 784) == *(void *)(a1 + 776)) {
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
    }
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 776), v10, v9);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v13, v38);
  if (*(float *)(a1 + 472) > 0.0)
  {
    uint64_t v61 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v61, 1, *(float *)(a1 + 472));
    uint64_t v62 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v62, 1, *(float *)(a1 + 472));
    uint64_t v63 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v63, *(float *)(a1 + 472));
    if (*(unsigned char *)(a1 + 208))
    {
      uint64_t v64 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v64, 1, *(float *)(a1 + 472));
    }
    if (*(unsigned char *)(a1 + 224))
    {
      uint64_t v65 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v65, 1, *(float *)(a1 + 472));
    }
  }
  uint64_t v66 = *(unsigned char **)(a1 + 480);
  if (v13 == *(_DWORD *)(a1 + *(void *)(*(void *)a1 - 24) + 80))
  {
    uint64_t v67 = *(unsigned char **)(a1 + 488);
    if (v66 != v67) {
      bzero(v66, ((v67 - v66 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    }
  }
  else
  {
    *(_DWORD *)&v66[4 * v13] = 0;
  }
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(void *a1, uint64_t a2, int a3)
{
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(void *a1)
{
  if (!*((unsigned char *)a1 + *(void *)(*a1 - 24) + 16))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v1, (uint64_t)"Performing  vectorization of lstm component", 43);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v1);
    }
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub();
  }
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(&v1, "Weights are already vectorized");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v1);
}

void sub_1B1E02B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub()
{
}

void sub_1B1E02C84(_Unwind_Exception *a1)
{
  MEMORY[0x1B3EA8670](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(void *a1)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs((void *)((char *)a1
                                                                                          + *(void *)(*a1 - 64)));
}

void *std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    float result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B1E02D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      kaldi::CuVector<float>::CuVector((void *)(a4 + v7), a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1E02DB8(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,kaldi::CuVector<float>*,kaldi::CuVector<float>*,kaldi::CuVector<float>*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B1E02E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    float v4 = (void *)*--v3;
    float result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      float result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *kaldi::CuSubVector<float>::CuSubVector(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1F0A472D0;
  int v5 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a3 + 16) < v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Insufficient storage area: ", 27);
    int v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" needed: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  a1[1] = *(void *)(a3 + 8);
  *((_DWORD *)a1 + 4) = v5;
  a1[3] = v7;
  kaldi::CuVectorBase<float>::CopyFromVec(a1, a2);
  uint64_t v8 = *(int *)(a2 + 16);
  int v9 = *(_DWORD *)(a3 + 16) - v8;
  *(void *)(a3 + 8) += 4 * v8;
  *(_DWORD *)(a3 + 16) = v9;
  *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
  return a1;
}

void std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    uint64_t v15 = &v13[8 * v10];
    uint64_t v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    uint64_t v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer(&v14);
  }
}

void sub_1B1E03104(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CuVectorBase<float>>>,std::reverse_iterator<std::unique_ptr<kaldi::CuVectorBase<float>>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *uint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t quasar::Decodable::Decodable(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_1F0A59380;
  uint64_t v3 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

void quasar::Decodable::init(quasar::Decodable *this, std::string *a2)
{
  if (!*((_DWORD *)this + 26))
  {
    if (*((char *)this + 31) >= 0) {
      size_t v4 = *((unsigned __int8 *)this + 31);
    }
    else {
      size_t v4 = *((void *)this + 2);
    }
    uint64_t v5 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 1);
    if (SBYTE7(v16) < 0) {
      uint64_t v5 = (void **)__p[0];
    }
    if (v4)
    {
      if (*((char *)this + 31) >= 0) {
        uint64_t v6 = (char *)this + 8;
      }
      else {
        uint64_t v6 = (char *)*((void *)this + 1);
      }
      memmove(v5, v6, v4);
    }
    *(_WORD *)((char *)v5 + v4) = 46;
    quasar::SystemConfig::setPrefix(a2, (const std::string *)__p);
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
    (**(void (***)(quasar::Decodable *, std::string *))this)(this, a2);
    quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)this + 8);
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)std::string __p = 0u;
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameters for ", 15);
  uint64_t v10 = *((void *)this + 1);
  unint64_t v9 = (char *)this + 8;
  uint64_t v8 = v10;
  int v11 = v9[23];
  if (v11 >= 0) {
    uint64_t v12 = (uint64_t)v9;
  }
  else {
    uint64_t v12 = v8;
  }
  if (v11 >= 0) {
    uint64_t v13 = v9[23];
  }
  else {
    uint64_t v13 = *((void *)v9 + 1);
  }
  char v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v12, v13);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " have already been registered.");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
}

void sub_1B1E035BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Decodable::~Decodable(void **this)
{
  *this = &unk_1F0A59380;
  if (*((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  kaldi::Vector<float>::Destroy((uint64_t)(this + 7));
  uint64_t v2 = (std::__shared_weak_count *)this[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t quasar::Decodable::createDecodable(quasar::Decodable *this, kaldi::OnlineFeatureMatrix *a2)
{
  if (*((_DWORD *)this + 26) != 1)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Must first call init() for ", 27);
    int v5 = *((char *)this + 31);
    if (v5 >= 0) {
      uint64_t v6 = (char *)this + 8;
    }
    else {
      uint64_t v6 = (char *)*((void *)this + 1);
    }
    if (v5 >= 0) {
      uint64_t v7 = *((unsigned __int8 *)this + 31);
    }
    else {
      uint64_t v7 = *((void *)this + 2);
    }
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " before calling createDecodable().");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)this + 16);
  return v2();
}

void quasar::Decodable::createDecodable(std::string *this@<X0>, void *a2@<X8>)
{
  if (quasar::gLogLevel >= 5)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    memset(v42, 0, sizeof(v42));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v42);
    size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"Building Decodable ", 19);
    int v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0) {
      uint64_t v6 = this;
    }
    else {
      uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v5 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v42);
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v42, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)float v42 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    *(void *)&v42[16] = *((void *)&this->__r_.__value_.__l + 2);
  }
  std::string::size_type v8 = std::string::rfind(this, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v8 != -1)
  {
    std::string::basic_string(&v41, this, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v40);
    if ((v42[23] & 0x80000000) != 0) {
      operator delete(*(void **)v42);
    }
    *(std::string *)float v42 = v41;
  }
  *a2 = 0;
  a2[1] = 0;
  if ((v42[23] & 0x80) == 0)
  {
    unint64_t v9 = v42;
    switch(v42[23])
    {
      case 5:
        goto LABEL_86;
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xB:
      case 0xC:
        goto LABEL_103;
      case 0xA:
        break;
      case 0xD:
        if (*(void *)v42 != 0x732D78697274616DLL || *(void *)&v42[5] != 0x64656C6163732D78) {
          goto LABEL_103;
        }
        goto LABEL_71;
      case 0xE:
        if (*(void *)v42 == 0x696C6E6F2D637463 && *(void *)&v42[6] == 0x64776B2D656E696CLL) {
          goto LABEL_91;
        }
        if (v42[23] != 10)
        {
          if (v42[23] != 5) {
            goto LABEL_103;
          }
LABEL_86:
          if (*(_DWORD *)v42 != 1835890020 || v42[4] != 121)
          {
LABEL_103:
            exception = __cxa_allocate_exception(0x20uLL);
            std::operator+<char>();
            long long v29 = std::string::append(&v38, "\" in \"");
            long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            v39.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            int v31 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
            if (v31 >= 0) {
              uint64_t v32 = this;
            }
            else {
              uint64_t v32 = (std::string *)this->__r_.__value_.__r.__words[0];
            }
            if (v31 >= 0) {
              std::string::size_type v33 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v33 = this->__r_.__value_.__l.__size_;
            }
            uint64_t v34 = std::string::append(&v39, (const std::string::value_type *)v32, v33);
            long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            v40.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v35;
            v34->__r_.__value_.__l.__size_ = 0;
            v34->__r_.__value_.__r.__words[2] = 0;
            v34->__r_.__value_.__r.__words[0] = 0;
            int v36 = std::string::append(&v40, "\"");
            long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
            v41.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v37;
            v36->__r_.__value_.__l.__size_ = 0;
            v36->__r_.__value_.__r.__words[2] = 0;
            v36->__r_.__value_.__r.__words[0] = 0;
            quasar::PTree::Error::Error(exception, &v41);
          }
          goto LABEL_91;
        }
        unint64_t v9 = v42;
        break;
      default:
        if (v42[23] != 20)
        {
          if (v42[23] != 23) {
            goto LABEL_103;
          }
          BOOL v19 = *(void *)v42 == 0x732D78697274616DLL && *(void *)&v42[8] == 0x616D2D64656C6163;
          if (!v19 || *(void *)&v42[15] != 0x6D742D6465707061) {
            goto LABEL_103;
          }
          goto LABEL_70;
        }
        if (*(void *)v42 != 0x732D78697274616DLL
          || *(void *)&v42[8] != 0x616D2D64656C6163
          || *(_DWORD *)&v42[16] != 1684369520)
        {
          goto LABEL_103;
        }
        goto LABEL_92;
    }
LABEL_94:
    uint64_t v25 = *(void *)v9;
    int v26 = *((unsigned __int16 *)v9 + 4);
    if (v25 == 0x616C2D3174656E6ELL && v26 == 31098) {
      std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableNnet1LazyDecodable,std::allocator<quasar::OnlineDecodableNnet1LazyDecodable>,std::string const&,void>((uint64_t)&v40, (long long *)this);
    }
    goto LABEL_103;
  }
  uint64_t v11 = *(void *)&v42[8];
  if (*(void *)&v42[8] == 13
    && **(void **)v42 == 0x732D78697274616DLL
    && *(void *)(*(void *)v42 + 5) == 0x64656C6163732D78)
  {
LABEL_71:
    std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledDecodable>,std::string const&,void>((long long *)this, &v41);
    goto LABEL_100;
  }
  if (*(void *)&v42[8] != 20)
  {
LABEL_37:
    if (v11 == 23)
    {
      if (**(void **)v42 == 0x732D78697274616DLL
        && *(void *)(*(void *)v42 + 8) == 0x616D2D64656C6163
        && *(void *)(*(void *)v42 + 15) == 0x6D742D6465707061)
      {
LABEL_70:
        std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledMappedTmDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>,std::string const&,void>((long long *)this, &v41);
        goto LABEL_100;
      }
      uint64_t v11 = *(void *)&v42[8];
    }
    if (v11 == 14)
    {
      if (**(void **)v42 == 0x696C6E6F2D637463 && *(void *)(*(void *)v42 + 6) == 0x64776B2D656E696CLL) {
        goto LABEL_91;
      }
      uint64_t v11 = *(void *)&v42[8];
    }
    if (v11 != 5)
    {
LABEL_58:
      if (v11 != 10) {
        goto LABEL_103;
      }
      unint64_t v9 = *(unsigned char **)v42;
      goto LABEL_94;
    }
    if (**(_DWORD **)v42 != 1835890020 || *(unsigned char *)(*(void *)v42 + 4) != 121)
    {
      uint64_t v11 = *(void *)&v42[8];
      goto LABEL_58;
    }
LABEL_91:
    std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableIdenticalMatrixDecodable,std::allocator<quasar::OnlineDecodableIdenticalMatrixDecodable>,std::string const&,void>((long long *)this, &v41);
    goto LABEL_100;
  }
  if (**(void **)v42 != 0x732D78697274616DLL
    || *(void *)(*(void *)v42 + 8) != 0x616D2D64656C6163
    || *(_DWORD *)(*(void *)v42 + 16) != 1684369520)
  {
    uint64_t v11 = *(void *)&v42[8];
    goto LABEL_37;
  }
LABEL_92:
  std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledMappedDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledMappedDecodable>,std::string const&,void>((long long *)this, &v41);
LABEL_100:
  *(_OWORD *)a2 = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
  if ((v42[23] & 0x80000000) != 0) {
    operator delete(*(void **)v42);
  }
}

void sub_1B1E03CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v43 & 1) == 0)
    {
LABEL_12:
      if (a42 < 0) {
        operator delete(a37);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v42);
  goto LABEL_12;
}

float quasar::Decodable::getAmScale(quasar::Decodable *this)
{
  return *((float *)this + 12);
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledDecodable>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  size_t v4 = (char *)operator new(0xB8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledDecodable>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B1E03E1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledDecodable>,0>(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0A620F0;
  quasar::Decodable::Decodable(a1 + 24, a2);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &unk_1F0A589C8;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return a1;
}

void sub_1B1E03EA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A620F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A620F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

uint64_t quasar::OnlineDecodableMatrixScaledDecodable::registerParams(quasar::OnlineDecodableMatrixScaledDecodable *this, quasar::SystemConfig *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "am-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic model (transition model) filename (only used for lattice stuff)");
  size_t v4 = (char *)this + 80;
  (*(void (**)(quasar::SystemConfig *, void **, char *, void **))(*(void *)a2 + 40))(a2, v10, (char *)this + 80, __p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  int v5 = (_DWORD *)((char *)this + 48);
  (*(void (**)(quasar::SystemConfig *, void **, char *, void **))(*(void *)a2 + 24))(a2, v10, (char *)this + 48, __p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "tid2pdf-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text file of ints representing PDF IDs for transition IDs 0, 1, 2, ... ");
  uint64_t v6 = (char *)this + 112;
  (*(void (**)(quasar::SystemConfig *, void **, char *, void **))(*(void *)a2 + 40))(a2, v10, v6, __p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  MEMORY[0x1B3EA7B20](v4, "");
  *int v5 = 1036831949;
  return MEMORY[0x1B3EA7B20](v6, "");
}

void sub_1B1E0411C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineDecodableMatrixScaledDecodable::finishInit(quasar::OnlineDecodableMatrixScaledDecodable *this, quasar::ModelLoader *a2)
{
  v9[20] = *MEMORY[0x1E4F143B8];
  quasar::ModelLoader::readTransitionModel((uint64_t)a2, (unsigned __int8 *)this + 80, 1, &v7);
  long long v3 = v7;
  long long v7 = 0uLL;
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    memset(v8, 0, 256);
    long long v7 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, (uint64_t)"Read transModel", 15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v7);
  }
  std::ifstream::basic_ifstream((uint64_t *)&v7);
  kaldi::ReadIntegerVector<int>(&v7, 0, (std::vector<int> *)((char *)this + 136), 0, 0, 0, 0);
  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Using TID2PDF file", 18);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
  *(void *)&long long v7 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)&v8[-1] + *(void *)(v7 - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x1B3EA7CF0](v8);
  std::istream::~istream();
  return MEMORY[0x1B3EA8520](v9);
}

void sub_1B1E0438C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
}

void quasar::OnlineDecodableMatrixScaledDecodable::createDecodableImpl(quasar::OnlineDecodableMatrixScaledDecodable *this, kaldi::OnlineFeatureMatrix *a2)
{
}

void sub_1B1E044A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  char v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableMatrixScaledDecodable::~OnlineDecodableMatrixScaledDecodable(quasar::OnlineDecodableMatrixScaledDecodable *this)
{
  *(void *)this = &unk_1F0A589C8;
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  quasar::Decodable::~Decodable((void **)this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0A589C8;
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 18) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  quasar::Decodable::~Decodable((void **)this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t kaldi::OnlineDecodableMatrixScaled::OnlineDecodableMatrixScaled(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  *(void *)a1 = &unk_1F0A48250;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 8) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 8), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(float *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 24);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_1B1E04670(_Unwind_Exception *a1)
{
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<kaldi::DecodableInterface>::shared_ptr[abi:ne180100]<kaldi::OnlineDecodableMatrixScaled,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1E046EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<kaldi::DecodableInterface>::shared_ptr[abi:ne180100]<kaldi::OnlineDecodableMatrixScaled,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::OnlineDecodableMatrixScaled *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableMatrixScaled>,std::allocator<kaldi::OnlineDecodableMatrixScaled>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::OnlineDecodableMatrixScaled *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableMatrixScaled>,std::allocator<kaldi::OnlineDecodableMatrixScaled>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::OnlineDecodableMatrixScaled *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableMatrixScaled>,std::allocator<kaldi::OnlineDecodableMatrixScaled>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledMappedDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledMappedDecodable>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  size_t v4 = (char *)operator new(0xC8uLL);
  uint64_t result = std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledMappedDecodable>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1B1E047FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledMappedDecodable>,0>(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0A621D0;
  quasar::Decodable::Decodable(a1 + 24, a2);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = &unk_1F0A58D50;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 1--*(_DWORD *)(a9 + 52) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 2139095040;
  *(unsigned char *)(a1 + 192) = 0;
  return a1;
}

void sub_1B1E04894(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A621D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A621D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

uint64_t quasar::OnlineDecodableMatrixScaledMappedDecodable::registerParams(quasar::OnlineDecodableMatrixScaledMappedDecodable *this, quasar::SystemConfig *a2)
{
  std::operator+<char>();
  size_t v4 = std::string::append(&v7, "\"");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v9 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 4, 0, (uint64_t)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "am-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Acoustic model (transition model) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 80, (uint64_t)&v7, 1, 4, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Scaling factor for acoustic likelihoods");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 48, (uint64_t)&v7, 0, 4, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ilabel-score-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "The ilabel score file for dynamic T.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 112, (uint64_t)&v7, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "internal-lm-substraction");
  std::string::basic_string[abi:ne180100]<0>(&v7, "When this value is true, the decoder will substract internal lm score from am model.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 160, (uint64_t)&v7, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "cost-cutoff");
  std::string::basic_string[abi:ne180100]<0>(&v7, "The cost cutoff for the am neg loglikelihood. It is applied before am scaling.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 164, (uint64_t)&v7, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "skip-pdf-size-check");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Skip pdf size check when the decodable is just a placeholder");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 168, (uint64_t)&v7, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x1B3EA7B20]((char *)this + 80, "");
  uint64_t result = MEMORY[0x1B3EA7B20]((char *)this + 112, "");
  *((_DWORD *)this + 12) = 1036831949;
  return result;
}

void sub_1B1E04CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1E04D0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    JUMPOUT(0x1B1E04D00);
  }
  JUMPOUT(0x1B1E04D04);
}

void quasar::OnlineDecodableMatrixScaledMappedDecodable::finishInit(quasar::OnlineDecodableMatrixScaledMappedDecodable *this, quasar::ModelLoader *a2)
{
  quasar::ModelLoader::readTransitionModel((uint64_t)a2, (unsigned __int8 *)this + 80, 1, v6);
  long long v3 = v6[0];
  v6[0] = 0uLL;
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v6[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6[0] + 1));
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Read transModel", 15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
  if (*((char *)this + 135) < 0)
  {
    if (!*((void *)this + 15)) {
      return;
    }
    goto LABEL_10;
  }
  if (*((unsigned char *)this + 135))
  {
LABEL_10:
    *(void *)&v6[0] = 0;
    kaldi::Input::OpenInternal(v6, (uint64_t)this + 112, 0, 0);
    long long v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v6);
    kaldi::Vector<float>::Read((uint64_t)this + 136, v5, 0, 0);
    kaldi::Input::Close((kaldi::Input *)v6);
    kaldi::Input::~Input((kaldi::Input *)v6);
  }
}

void sub_1B1E04E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double quasar::OnlineDecodableMatrixScaledMappedDecodable::createDecodableImpl@<D0>(quasar::OnlineDecodableMatrixScaledMappedDecodable *this@<X0>, kaldi::OnlineFeatureMatrix *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 4);
  *(void *)&v6[0] = a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMapped,std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &,void>(v4, (float *)this + 12, (kaldi::OnlineFeatureMatrix **)v6, (char *)this + 160, (float *)this + 41, (uint64_t)this + 136, (char *)this + 168, v7);
  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Created OnlineDecodableMatrixScaledMapped decodable", 51);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
  double result = v7[0];
  *a3 = *(_OWORD *)v7;
  return result;
}

void sub_1B1E04F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  char v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableMatrixScaledMappedDecodable::~OnlineDecodableMatrixScaledMappedDecodable(void **this)
{
  *this = &unk_1F0A58D50;
  kaldi::Vector<float>::Destroy((uint64_t)(this + 17));
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  quasar::Decodable::~Decodable(this);
}

{
  uint64_t vars8;

  *this = &unk_1F0A58D50;
  kaldi::Vector<float>::Destroy((uint64_t)(this + 17));
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  quasar::Decodable::~Decodable(this);
  JUMPOUT(0x1B3EA8670);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMapped,std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &,void>@<X0>(uint64_t a1@<X1>, float *a2@<X2>, kaldi::OnlineFeatureMatrix **a3@<X3>, char *a4@<X4>, float *a5@<X5>, uint64_t a6@<X6>, char *a7@<X7>, void *a8@<X8>)
{
  long long v16 = operator new(0xA0uLL);
  double result = std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &,std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1B1E050DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &,std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>,0>(void *a1, uint64_t a2, float *a3, kaldi::OnlineFeatureMatrix **a4, char *a5, float *a6, uint64_t a7, char *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EE68;
  std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>::construct[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMapped,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &>((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1B1E05168(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EE68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EE68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMapped>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void std::allocator<kaldi::OnlineDecodableMatrixScaledMapped>::construct[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMapped,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,BOOL &,float &,kaldi::Vector<float> &,BOOL &>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, kaldi::OnlineFeatureMatrix **a5, char *a6, float *a7, uint64_t a8, char *a9)
{
  float v12 = *a4;
  uint64_t v13 = *a5;
  char v14 = *a6;
  float v15 = *a7;
  memset(v16, 0, sizeof(v16));
  kaldi::Vector<float>::Resize(v16, *(unsigned int *)(a8 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v16, (const void **)a8);
  kaldi::OnlineDecodableMatrixScaledMapped::OnlineDecodableMatrixScaledMapped(a2, a3, v13, v14, (uint64_t)v16, *a9, v12, v15);
  kaldi::Vector<float>::Destroy((uint64_t)v16);
}

void sub_1B1E052C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineDecodableMatrixScaledMapped::OnlineDecodableMatrixScaledMapped(uint64_t a1, uint64_t a2, kaldi::OnlineFeatureMatrix *a3, char a4, uint64_t a5, char a6, float a7, float a8)
{
  *(void *)a1 = &unk_1F0A48488;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(float *)(a1 + ++*(_DWORD *)(result + 24) = a7;
  *(unsigned char *)(a1 + 28) = a4;
  *(float *)(a1 + 32) = a8;
  *(void *)(a1 + 40) = 0;
  uint64_t v13 = a1 + 40;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  kaldi::Vector<float>::Resize((void **)(a1 + 40), *(unsigned int *)(a5 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v13, (const void **)a5);
  int v14 = *((_DWORD *)a3 + 6);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 1++*(_DWORD *)(result + 24) = -1;
  *(unsigned char *)(a1 + 128) = kaldi::OnlineFeatureMatrix::HasSilencePosterior(a3);
  *(unsigned char *)(a1 + 129) = kaldi::OnlineFeatureMatrix::HasEndpointerScore(a3);
  if ((a6 & 1) == 0 && *((_DWORD *)a3 + 6) < *(_DWORD *)(a2 + 240))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"OnlineDecodableMatrixScaledMapped: mismatch, matrix has ", 56);
    long long v16 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" rows but transition-model has ", 31);
    long long v17 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" pdf-ids.", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  return a1;
}

void sub_1B1E0543C(_Unwind_Exception *a1)
{
  kaldi::Vector<float>::Destroy(v3 + 24);
  kaldi::Vector<float>::Destroy(v3);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableMatrixScaledMappedTmDecodable,std::allocator<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x88uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1E054C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62208;
  quasar::Decodable::Decodable((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F0A58D88;
  return a1;
}

void sub_1B1E05540(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableMatrixScaledMappedTmDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

uint64_t quasar::OnlineDecodableMatrixScaledMappedTmDecodable::registerParams(quasar::OnlineDecodableMatrixScaledMappedTmDecodable *this, quasar::SystemConfig *a2)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v10, "\"");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v12 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 6, 0, (uint64_t)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "am-file");
  std::string::basic_string[abi:ne180100]<0>(&v10, "Acoustic model (transition model) filename");
  uint64_t v6 = (char *)this + 80;
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 80, (uint64_t)&v10, 1, 6, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(&v10, "Scaling factor for acoustic likelihoods");
  std::string v7 = (_DWORD *)((char *)this + 48);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 48, (uint64_t)&v10, 0, 6, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tm-weight");
  std::string::basic_string[abi:ne180100]<0>(&v10, "Weight factor for tm likelihoods");
  std::string::size_type v8 = (_DWORD *)((char *)this + 108);
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)v8, (uint64_t)&v10, 0, 6, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = MEMORY[0x1B3EA7B20](v6, "");
  *std::string v7 = 1036831949;
  *std::string::size_type v8 = 1065353216;
  return result;
}

void sub_1B1E05808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void quasar::OnlineDecodableMatrixScaledMappedTmDecodable::finishInit(quasar::OnlineDecodableMatrixScaledMappedTmDecodable *this, quasar::ModelLoader *a2)
{
  quasar::ModelLoader::readTransitionModel((uint64_t)a2, (unsigned __int8 *)this + 80, 1, v5);
  long long v3 = v5[0];
  v5[0] = 0uLL;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v5[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5[0] + 1));
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    memset(v5, 0, sizeof(v5));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Read transModel", 15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v5);
  }
}

void sub_1B1E0593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double quasar::OnlineDecodableMatrixScaledMappedTmDecodable::createDecodableImpl@<D0>(quasar::OnlineDecodableMatrixScaledMappedTmDecodable *this@<X0>, kaldi::OnlineFeatureMatrix *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = (const kaldi::TransitionModel *)*((void *)this + 4);
  *(void *)&v6[0] = a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMappedTm,std::allocator<kaldi::OnlineDecodableMatrixScaledMappedTm>,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,float &,void>(v4, (float *)this + 12, (kaldi::OnlineFeatureMatrix **)v6, (float *)this + 27, v7);
  if (quasar::gLogLevel >= 5)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Created OnlineDecodableMatrixScaledMappedTm decodable", 53);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v6);
  }
  double result = v7[0];
  *a3 = *(_OWORD *)v7;
  return result;
}

void sub_1B1E05A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  char v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableMatrixScaledMappedTmDecodable::~OnlineDecodableMatrixScaledMappedTmDecodable(void **this)
{
  quasar::Decodable::~Decodable(this);
  JUMPOUT(0x1B3EA8670);
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableMatrixScaledMappedTm,std::allocator<kaldi::OnlineDecodableMatrixScaledMappedTm>,kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,float &,void>@<X0>(const kaldi::TransitionModel *a1@<X1>, float *a2@<X2>, kaldi::OnlineFeatureMatrix **a3@<X3>, float *a4@<X4>, void *a5@<X8>)
{
  std::string v10 = operator new(0xA8uLL);
  double result = std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,float &,std::allocator<kaldi::OnlineDecodableMatrixScaledMappedTm>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1B1E05AD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,float &,kaldi::OnlineFeatureMatrix *,float &,std::allocator<kaldi::OnlineDecodableMatrixScaledMappedTm>,0>(void *a1, const kaldi::TransitionModel *a2, float *a3, kaldi::OnlineFeatureMatrix **a4, float *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EEA0;
  kaldi::OnlineDecodableMatrixScaledMappedTm::OnlineDecodableMatrixScaledMappedTm((kaldi::OnlineDecodableMatrixScaledMappedTm *)(a1 + 3), a2, *a3, *a4, *a5);
  return a1;
}

void sub_1B1E05B38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EEA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EEA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineDecodableMatrixScaledMappedTm>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

kaldi::OnlineDecodableMatrixScaledMappedTm *kaldi::OnlineDecodableMatrixScaledMappedTm::OnlineDecodableMatrixScaledMappedTm(kaldi::OnlineDecodableMatrixScaledMappedTm *this, const kaldi::TransitionModel *a2, float a3, kaldi::OnlineFeatureMatrix *a4, float a5)
{
  memset(v9, 0, sizeof(v9));
  kaldi::OnlineDecodableMatrixScaledMapped::OnlineDecodableMatrixScaledMapped((uint64_t)this, (uint64_t)a2, a4, 0, (uint64_t)v9, 0, a3, INFINITY);
  kaldi::Vector<float>::Destroy((uint64_t)v9);
  *(void *)this = &unk_1F0A485A0;
  *((float *)this + 33) = a5;
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 60);
  return this;
}

void sub_1B1E05C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableIdenticalMatrixDecodable,std::allocator<quasar::OnlineDecodableIdenticalMatrixDecodable>,std::string const&,void>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x88uLL);
  double result = std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableIdenticalMatrixDecodable>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B1E05CD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableIdenticalMatrixDecodable>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A62198;
  quasar::Decodable::Decodable((uint64_t)(a1 + 3), a2);
  a1[3] = &unk_1F0A58C38;
  return a1;
}

void sub_1B1E05D50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A62198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableIdenticalMatrixDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void quasar::OnlineDecodableIdenticalMatrixDecodable::createDecodableImpl(quasar::OnlineDecodableIdenticalMatrixDecodable *this, kaldi::OnlineFeatureMatrix *a2)
{
}

void sub_1B1E05EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  char v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableIdenticalMatrixDecodable::~OnlineDecodableIdenticalMatrixDecodable(void **this)
{
  quasar::Decodable::~Decodable(this);
  JUMPOUT(0x1B3EA8670);
}

void std::shared_ptr<kaldi::DecodableInterface>::shared_ptr[abi:ne180100]<kaldi::OnlineDecodableIdenticalMatrix,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B1E05FB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<kaldi::DecodableInterface>::shared_ptr[abi:ne180100]<kaldi::OnlineDecodableMatrixScaled,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::OnlineDecodableIdenticalMatrix *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableIdenticalMatrix>,std::allocator<kaldi::OnlineDecodableIdenticalMatrix>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_pointer<kaldi::OnlineDecodableIdenticalMatrix *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableIdenticalMatrix>,std::allocator<kaldi::OnlineDecodableIdenticalMatrix>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::OnlineDecodableIdenticalMatrix *,std::shared_ptr<kaldi::DecodableInterface>::__shared_ptr_default_delete<kaldi::DecodableInterface,kaldi::OnlineDecodableIdenticalMatrix>,std::allocator<kaldi::OnlineDecodableIdenticalMatrix>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::allocate_shared[abi:ne180100]<quasar::OnlineDecodableNnet1LazyDecodable,std::allocator<quasar::OnlineDecodableNnet1LazyDecodable>,std::string const&,void>(uint64_t a1, long long *a2)
{
  long long v3 = operator new(0x388uLL);
  std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableNnet1LazyDecodable>,0>(v3, a2);
}

void sub_1B1E060C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDecodableNnet1LazyDecodable>,0>(void *a1, long long *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61F30;
  quasar::OnlineDecodableNnet1LazyDecodable::OnlineDecodableNnet1LazyDecodable((uint64_t)(a1 + 3), a2);
}

void sub_1B1E06124(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A61F30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDecodableNnet1LazyDecodable>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void quasar::OnlineDecodableNnet1LazyDecodable::OnlineDecodableNnet1LazyDecodable(uint64_t a1, long long *a2)
{
  uint64_t v3 = quasar::Decodable::Decodable(a1, a2);
  *(void *)uint64_t v3 = &unk_1F0A58490;
  *(_OWORD *)(v3 + 112) = 0u;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 232) = 0;
  *(void *)(v3 + 208) = 0;
  *(void *)(v3 + 216) = 0;
  *(void *)(v3 + 240) = 0;
  *(void *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(void *)(v3 + 176) = 0;
  *(_OWORD *)(v3 + 280) = 0u;
  *(_OWORD *)(v3 + 296) = 0u;
  *(_OWORD *)(v3 + 312) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)(v3 + 328), "");
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0x2EDBE6FF3F800000;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 360), "");
  *(void *)(a1 + 384) = 0x2EDBE6FF3F800000;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 424));
}

void sub_1B1E062CC(_Unwind_Exception *a1)
{
  uint64_t v9 = *(std::__shared_weak_count **)(v1 + 416);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::string v10 = *(std::__shared_weak_count **)(v1 + 400);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*(char *)(v1 + 383) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 351) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 327) < 0) {
    operator delete(*(void **)(v1 + 304));
  }
  if (*(char *)(v1 + 303) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v1 + 255) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 223) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 183) < 0) {
    operator delete(*(void **)(v1 + 160));
  }
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*(void **)(v1 + 136));
  }
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v4);
  }
  quasar::Decodable::~Decodable((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineDecodableNnet1LazyDecodable::registerParams(quasar::OnlineDecodableNnet1LazyDecodable *this, quasar::SystemConfig *a2)
{
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v7, "\"");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v9 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 13, 0, (uint64_t)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 328, (uint64_t)a2);
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 360, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "am-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Acoustic model (transition model) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 112, (uint64_t)&v7, 1, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Scaling factor for acoustic likelihoods");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 48, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 328, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 188, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Name of nnet model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 136, (uint64_t)&v7, 1, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "File for feature transform in front of nnet's main network (in nnet format)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 160, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "skip-frames");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Number of frames to be skipped in nnet computation.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 184, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "use-gpu-id");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Unused, kaldi is compiled w/o CUDA");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 192, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "silence-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Name of nnet model file for computing silence posteriors");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 200, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "compute-sil-model-posteriors-from-realign-model");
  std::string::basic_string[abi:ne180100]<0>(&v7, "True if penultimate activations from realign model are the input to the silence model, otherwise use the penultimate activations from the main acoustic model");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 224, (uint64_t)&v7, 0, 60, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "workspace-size-kb");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Workspace size in Kilo Bytes");
  quasar::SystemConfig::Register<long long>((uint64_t)a2, (const void **)__p, (uint64_t)this + 864, (uint64_t)&v7, 0, 13, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "realign-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Name of nnet model file for computing posteriors for later realignment of 1st/2nd pass lattices");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 232, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "realign-class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "File containing vector with frame counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 360, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "compute-realign-model-posteriors-from-penultimate");
  std::string::basic_string[abi:ne180100]<0>(&v7, "True if penultimate activations from main acoustic model are the input to the realignment model, otherwise use the same features as the main acoustic model as input");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 256, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "skip-blanks-threshold");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Threshold for skipping frames with a CTC trained acoustic model, applied to posterior probability of the blank symbol");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 260, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "blank-pdf-id");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Pdf-id of blank symbol of CTC trained acoustic model, used in combination with skip-blanks-threshold");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 264, (uint64_t)&v7, 0, 58, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "skip-across-batch");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Make skip-frames deterministic by skipping across batches instead of within batches (default: false).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 872, (uint64_t)&v7, 0, 77, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "blank-penalty");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Penalty for blanks with a CTC trained acoustic model when silence posterior is higher than a threshold");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 268, (uint64_t)&v7, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "blank-penalty-silence-threshold");
  std::string::basic_string[abi:ne180100]<0>(&v7, "Threshold of silence posterior when the blank penalty is appled to blanks");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 272, (uint64_t)&v7, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(&v7, "File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 304, (uint64_t)&v7, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x1B3EA7B20]((char *)this + 112, "");
  *((_DWORD *)this + 12) = 1036831949;
  *((unsigned char *)this + 188) = 0;
  MEMORY[0x1B3EA7B20]((char *)this + 136, "");
  MEMORY[0x1B3EA7B20]((char *)this + 160, "");
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 48) = -2;
  MEMORY[0x1B3EA7B20]((char *)this + 200, "");
  MEMORY[0x1B3EA7B20]((char *)this + 232, "");
  *((void *)this + 108) = 0;
  *((unsigned char *)this + 872) = 0;
  MEMORY[0x1B3EA7B20]((char *)this + 232, "");
  *((unsigned char *)this + 256) = 0;
  *((unsigned char *)this + 2++*(_DWORD *)(result + 24) = 0;
  *(void *)((char *)this + 260) = 0;
  *(void *)((char *)this + 268) = 0x3F80000000000000;
  MEMORY[0x1B3EA7B20]((char *)this + 280, "");
  return MEMORY[0x1B3EA7B20]((char *)this + 304, "");
}

void sub_1B1E06DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1E06E74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    JUMPOUT(0x1B1E06E68);
  }
  JUMPOUT(0x1B1E06E6CLL);
}

void quasar::OnlineDecodableNnet1LazyDecodable::finishInit(quasar::OnlineDecodableNnet1LazyDecodable *this, quasar::ModelLoader *a2)
{
  char v4 = *((unsigned char *)this + 188);
  long long v55 = 0;
  long long v56 = 0;
  quasar::ModelLoader::readNeuralNetwork((uint64_t)a2, (uint64_t)this + 136, v4, 1, 1, &v55, &v36);
  long long v5 = v36;
  long long v36 = 0uLL;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 101);
  *((_OWORD *)this + 50) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  std::string v7 = (char *)this + 160;
  if (*((unsigned char *)this + 188))
  {
    if ((*((unsigned char *)this + 183) & 0x80) == 0)
    {
      if (!*((unsigned char *)this + 183)) {
        goto LABEL_18;
      }
LABEL_14:
      fst::FstReadOptions::FstReadOptions(v53, v7, 0, 0, 0);
      int v54 = 2;
      kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 424, (uint64_t)v53);
    }
    if (*((void *)this + 21)) {
      goto LABEL_14;
    }
  }
  else
  {
    if ((*((unsigned char *)this + 183) & 0x80) != 0)
    {
      if (!*((void *)this + 21)) {
        goto LABEL_18;
      }
    }
    else if (!*((unsigned char *)this + 183))
    {
      goto LABEL_18;
    }
    kaldi::nnet1::Nnet::Read((uint64_t)this + 424, (uint64_t)v7);
    if (quasar::gLogLevel >= 5)
    {
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Read nnetTransf", 15);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v36);
    }
  }
LABEL_18:
  uint64_t v8 = *((void *)this + 108);
  if (v8 >= 1)
  {
    std::string::size_type v9 = (const void *)*((void *)this + 100);
    if (v9)
    {
      if (v10)
      {
        char v11 = (std::__shared_weak_count *)*((void *)this + 101);
        if (v11)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v8 = *((void *)this + 108);
        }
        kaldi::nnet1::Nnet::SetWorkspaceSize((kaldi::nnet1::Nnet *)(v10 + 8), v8 << 10);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
    }
  }
  if (*((char *)this + 351) < 0) {
    uint64_t v12 = *((void *)this + 42);
  }
  else {
    uint64_t v12 = *((unsigned __int8 *)this + 351);
  }
  if (v12)
  {
    std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(&v36);
    long long v13 = v36;
    long long v36 = 0uLL;
    int v14 = (std::__shared_weak_count *)*((void *)this + 50);
    *(_OWORD *)((char *)this + 392) = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (*((void *)&v36 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
      }
    }
    if (quasar::gLogLevel >= 5)
    {
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Read pdfPrior", 13);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v36);
    }
  }
  quasar::ModelLoader::readTransitionModel((uint64_t)a2, (unsigned __int8 *)this + 112, 0, &v36);
  long long v15 = v36;
  long long v36 = 0uLL;
  long long v16 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v15;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Read transModel", 15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v36);
  }
  if (*((char *)this + 223) < 0)
  {
    if (!*((void *)this + 26)) {
      goto LABEL_56;
    }
  }
  else if (!*((unsigned char *)this + 223))
  {
    goto LABEL_56;
  }
  uint64_t v34 = 0;
  long long v35 = 0;
  quasar::ModelLoader::readNeuralNetwork((uint64_t)a2, (uint64_t)this + 200, 0, 0, 1, &v34, &v36);
  long long v17 = v36;
  long long v36 = 0uLL;
  long long v18 = (std::__shared_weak_count *)*((void *)this + 103);
  *((_OWORD *)this + 51) = v17;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    BOOL v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Read model file for computing silence posteriors=", 49);
    int v20 = *((char *)this + 223);
    if (v20 >= 0) {
      long long v21 = (char *)this + 200;
    }
    else {
      long long v21 = (char *)*((void *)this + 25);
    }
    if (v20 >= 0) {
      uint64_t v22 = *((unsigned __int8 *)this + 223);
    }
    else {
      uint64_t v22 = *((void *)this + 26);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v36);
  }
LABEL_56:
  if (*((char *)this + 255) < 0)
  {
    if (!*((void *)this + 30)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 255))
  {
    return;
  }
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(&v36);
  long long v23 = v36;
  long long v36 = 0uLL;
  long long v24 = (std::__shared_weak_count *)*((void *)this + 52);
  *(_OWORD *)((char *)this + 408) = v23;
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  char v25 = *((unsigned char *)this + 188);
  uint64_t v32 = 0;
  std::string::size_type v33 = 0;
  quasar::ModelLoader::readNeuralNetwork((uint64_t)a2, (uint64_t)this + 232, v25, 1, 1, &v32, &v36);
  long long v26 = v36;
  long long v36 = 0uLL;
  long long v27 = (std::__shared_weak_count *)*((void *)this + 105);
  *((_OWORD *)this + --*(_DWORD *)(a9 + 52) = v26;
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Read model file for computing realignment posteriors=", 53);
    int v29 = *((char *)this + 255);
    if (v29 >= 0) {
      long long v30 = (char *)this + 232;
    }
    else {
      long long v30 = (char *)*((void *)this + 29);
    }
    if (v29 >= 0) {
      uint64_t v31 = *((unsigned __int8 *)this + 255);
    }
    else {
      uint64_t v31 = *((void *)this + 30);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v36);
  }
}

void sub_1B1E07428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineDecodableNnet1LazyDecodable::createDecodableImpl(quasar::OnlineDecodableNnet1LazyDecodable *this@<X0>, kaldi::OnlineFeatureMatrix *a2@<X1>, void *a3@<X8>)
{
  uint64_t v39 = 0;
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 223)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*((void *)this + 26)) {
LABEL_3:
  }
    uint64_t v39 = *((void *)this + 102);
LABEL_4:
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 255)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (*((void *)this + 30))
  {
LABEL_6:
    uint64_t v6 = *((void *)this + 104);
    uint64_t v37 = *((void *)this + 51);
    uint64_t v38 = v6;
  }
LABEL_7:
  uint64_t v36 = 0;
  if ((*((char *)this + 183) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 183)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (*((void *)this + 21)) {
LABEL_9:
  }
    uint64_t v36 = (uint64_t)this + 424;
LABEL_10:
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 327)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (*((void *)this + 39))
  {
LABEL_20:
    LOBYTE(v34) = 0;
    std::string v7 = (kaldi::Input *)kaldi::Input::Input(&v35, (char *)this + 304, &v34);
    uint64_t v8 = (void *)kaldi::Input::Stream(v7);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
    std::string::size_type v9 = std::locale::use_facet(v16, MEMORY[0x1E4FBA258]);
    unsigned __int8 v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(v16);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)this + 280, v10);
    kaldi::Input::~Input((kaldi::Input *)&v35);
  }
LABEL_21:
  uint64_t v11 = *((void *)this + 4);
  uint64_t v35 = *((void *)this + 100);
  uint64_t v12 = *((void *)this + 49);
  std::string::size_type v33 = a2;
  uint64_t v34 = v12;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableNnet1Lazy,std::allocator<kaldi::OnlineDecodableNnet1Lazy>,kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &,void>(v11, &v36, &v35, &v34, (uint64_t *)&v33, (int *)this + 46, (float *)this + 65, v16, (int *)this + 66, (unsigned __int8 *)this + 256, (unsigned __int8 *)this + 224, (float *)this + 12, &v39, &v37, &v38, (unsigned __int8 *)this + 872, (float *)this + 67, (float *)this + 68, (uint64_t)this + 280);
  long long v13 = *(_OWORD *)&v16[0].__locale_;
  v16[0].__locale_ = 0;
  v16[1].__locale_ = 0;
  int v14 = (std::__shared_weak_count *)*((void *)this + 107);
  *((_OWORD *)this + 53) = v13;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (v16[1].__locale_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16[1].__locale_);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)&v16[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Created OnlineDecodableNnet1LazyDecodable decodable", 51);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v16);
  }
  uint64_t v15 = *((void *)this + 107);
  *a3 = *((void *)this + 106);
  a3[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1B1E07754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21)
{
}

void quasar::OnlineDecodableNnet1LazyDecodable::~OnlineDecodableNnet1LazyDecodable(quasar::OnlineDecodableNnet1LazyDecodable *this)
{
  quasar::OnlineDecodableNnet1LazyDecodable::~OnlineDecodableNnet1LazyDecodable(this);
  JUMPOUT(0x1B3EA8670);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t vars8;

  *(void *)this = &unk_1F0A58490;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 107);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 105);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 103);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = (std::__shared_weak_count *)*((void *)this + 101);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  kaldi::nnet1::Nnet::~Nnet((quasar::OnlineDecodableNnet1LazyDecodable *)((char *)this + 424));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 52);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string v7 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((char *)this + 383) < 0) {
    operator delete(*((void **)this + 45));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  if (*((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  if (*((char *)this + 255) < 0) {
    operator delete(*((void **)this + 29));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  if (*((char *)this + 183) < 0) {
    operator delete(*((void **)this + 20));
  }
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  quasar::Decodable::~Decodable((void **)this);
}

void kaldi::nnet1::PdfPriorOptions::Register(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "class-frame-counts");
  std::string::basic_string[abi:ne180100]<0>(__p, "Vector with frame-counts of pdfs to compute log-priors. (priors are typically subtracted from log-posteriors or pre-softmax activations)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 40))(a2, v6, a1, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "prior-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor to be applied on pdf-log-priors");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 24, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "prior-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Classes with priors lower than cutoff will have 0 likelihood");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(void *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B1E0794C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::__shared_ptr_emplace[abi:ne180100]<kaldi::nnet1::PdfPriorOptions &,std::allocator<kaldi::nnet1::PdfPrior>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B1E079D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::__shared_ptr_emplace[abi:ne180100]<kaldi::nnet1::PdfPriorOptions &,std::allocator<kaldi::nnet1::PdfPrior>,0>(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EFF0;
  kaldi::nnet1::PdfPrior::PdfPrior(a1 + 3);
  return a1;
}

void sub_1B1E07A34(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EFF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EFF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void *std::__shared_ptr_emplace<kaldi::nnet1::PdfPrior>::__on_zero_shared(uint64_t a1)
{
  return kaldi::CuVector<float>::~CuVector((void *)(a1 + 32));
}

void *std::allocate_shared[abi:ne180100]<kaldi::OnlineDecodableNnet1Lazy,std::allocator<kaldi::OnlineDecodableNnet1Lazy>,kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, int *a6@<X6>, float *a7@<X7>, void *a8@<X8>, int *a9, unsigned __int8 *a10, unsigned __int8 *a11, float *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, unsigned __int8 *a16, float *a17, float *a18, uint64_t a19)
{
  long long v27 = operator new(0x298uLL);
  uint64_t result = std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &,std::allocator<kaldi::OnlineDecodableNnet1Lazy>,0>(v27, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  *a8 = v27 + 3;
  a8[1] = v27;
  return result;
}

void sub_1B1E07BB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &,std::allocator<kaldi::OnlineDecodableNnet1Lazy>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, int *a7, float *a8, int *a9, unsigned __int8 *a10, unsigned __int8 *a11, float *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, unsigned __int8 *a16, float *a17, float *a18, uint64_t a19)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5EDC0;
  std::allocator<kaldi::OnlineDecodableNnet1Lazy>::construct[abi:ne180100]<kaldi::OnlineDecodableNnet1Lazy,kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &>((uint64_t)&v21, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18,
    a19);
  return a1;
}

void sub_1B1E07C64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EDC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A5EDC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineDecodableNnet1Lazy>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void std::allocator<kaldi::OnlineDecodableNnet1Lazy>::construct[abi:ne180100]<kaldi::OnlineDecodableNnet1Lazy,kaldi::TransitionModel &,kaldi::nnet1::Nnet *&,kaldi::InferenceNetItf *,kaldi::nnet1::PdfPrior *,kaldi::OnlineFeatureMatrix *,int &,float &,int &,BOOL &,BOOL &,float &,kaldi::InferenceNetItf *&,kaldi::nnet1::PdfPrior *&,kaldi::InferenceNetItf *&,BOOL &,float &,float &,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, float *a9, int *a10, unsigned __int8 *a11, unsigned __int8 *a12, float *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, unsigned __int8 *a17, float *a18, float *a19, uint64_t a20)
{
  uint64_t v20 = a2;
  uint64_t v21 = *a4;
  uint64_t v22 = *a5;
  uint64_t v23 = *a6;
  uint64_t v24 = *a7;
  int v25 = *a8;
  float v26 = *a9;
  int v27 = *a10;
  int v28 = *a11;
  int v29 = *a12;
  float v30 = *a13;
  uint64_t v31 = *a14;
  uint64_t v32 = *a15;
  uint64_t v33 = *a16;
  int v34 = *a17;
  float v35 = *a18;
  float v36 = *a19;
  if (*(char *)(a20 + 23) < 0)
  {
    uint64_t v42 = a3;
    uint64_t v37 = v22;
    uint64_t v40 = v23;
    uint64_t v38 = v24;
    int v41 = v25;
    int v39 = *a10;
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a20, *(void *)(a20 + 8));
    int v27 = v39;
    int v25 = v41;
    uint64_t v24 = v38;
    uint64_t v23 = v40;
    uint64_t v22 = v37;
    a3 = v42;
    uint64_t v20 = a2;
  }
  else
  {
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)a20;
    v44.__r_.__value_.__r.__words[2] = *(void *)(a20 + 16);
  }
  kaldi::OnlineDecodableNnet1Lazy::OnlineDecodableNnet1Lazy(v20, a3, v21, v22, v23, v24, v25, v27, v26, v30, v35, v36, v28 != 0, v29 != 0, v31, v32, v33, v34 != 0, (uint64_t)&v44);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_1B1E07E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineDecodableNnet1Lazy::OnlineDecodableNnet1Lazy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, float a9, float a10, float a11, float a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  *(void *)a1 = &unk_1F0A48090;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = a4;
  *(void *)(a1 + 32) = a5;
  *(void *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 48) = a7 + 1;
  *(float *)(a1 + --*(_DWORD *)(a9 + 52) = a10;
  *(float *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 60) = a8;
  *(unsigned char *)(a1 + 64) = a13;
  *(unsigned char *)(a1 + 65) = a14;
  *(void *)(a1 + 68) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 76) = -1;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 144);
  *(unsigned char *)(a1 + 184) = a18;
  *(_DWORD *)(a1 + 188) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 192) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 240) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 288) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 3--*(_DWORD *)(a9 + 52) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = &unk_1F0A517C0;
  *(void *)(a1 + 344) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 368);
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 4++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 432) = a15;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 440) = &unk_1F0A51768;
  *(unsigned char *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = a16;
  *(void *)(a1 + 496) = a17;
  *(_DWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(float *)(a1 + 560) = a11;
  *(float *)(a1 + 564) = a12;
  v23.n128_f64[0] = kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(a1 + 568));
  if (a7 >= 5 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Skipping ", 9);
    uint64_t v24 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" frames may not give you good results.", 38);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v40);
  }
  (*(void (**)(void, __n128))(**(void **)(a1 + 24) + 152))(*(void *)(a1 + 24), v23);
  uint64_t v25 = *(void *)(a1 + 496);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 152))(v25);
  }
  if (*(unsigned char *)(a1 + 65))
  {
    if (*(unsigned char *)(a1 + 64))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Parameters realign_model_input_is_penultimate_ and sil_model_input_is_realign_penultimate_ cannot both be true at the same time.", 128);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
    if (!*(void *)(a1 + 496))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Realignment model (nnet_realign) must be set in order to pass its penultimate activations to the silence model.", 111);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
  }
  if (*(unsigned char *)(a1 + 184))
  {
    if (*(_DWORD *)(a1 + 48) == 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"skip_across_batch cannot be set if you aren't frame skipping", 60);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
    if (*(float *)(a1 + 56) != 0.0 || *(void *)(a1 + 496))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"skip_across_batch does not work with skip_blanks_threshold or nnet_realign", 74);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
  }
  float v26 = *(kaldi::nnet1::Nnet **)(a1 + 16);
  if (v26 && (int)((*((void *)v26 + 1) - *(void *)v26) >> 3) >= 1)
  {
    int v27 = 0;
    do
    {
      uint64_t Component = kaldi::nnet1::Nnet::GetComponent(v26, v27);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Component + 24))(Component) == 1026)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
        float v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nnet transformation contains splicing, which is not ", 52);
        uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"supported by OnlineDecodableNnet1Lazy. Use a separate splice ", 61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"operation to perform splicing.", 30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
      }
      ++v27;
      float v26 = *(kaldi::nnet1::Nnet **)(a1 + 16);
    }
    while (v27 < (int)((*((void *)v26 + 1) - *(void *)v26) >> 3));
  }
  int v29 = *(const void **)(a1 + 24);
  if (v29)
  {
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = (kaldi::nnet1::Nnet *)(v30 + 1);
      if ((int)((v30[2] - v30[1]) >> 3) >= 1)
      {
        int v33 = 0;
        do
        {
          uint64_t v34 = kaldi::nnet1::Nnet::GetComponent(v32, v33);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 24))(v34) == 1026)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
            uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nnet contains splicing, which is not supported by ", 50);
            int v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"OnlineDecodableNnet1Lazy. Use a separate splice operation to ", 61);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"perform splicing.", 17);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
          }
          ++v33;
        }
        while (v33 < (int)((v31[2] - v31[1]) >> 3));
      }
    }
  }
  kaldi::SilencePhoneSet::SilencePhoneSet(v40, a19);
  *(_DWORD *)(a1 + 568) = v40[0];
  *(void *)(a1 + 576) = v40[1];
  *(_WORD *)(a1 + 584) = v41;
  std::vector<BOOL>::operator=((void **)(a1 + 592), (uint64_t)&v42);
  if ((void *)(a1 + 568) != v40) {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 616), (char *)__p, (uint64_t)v44, (v44 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    std::string v44 = __p;
    operator delete(__p);
  }
  if (v42) {
    operator delete(v42);
  }
  return a1;
}

void sub_1B1E084D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  kaldi::SilencePhoneSet::~SilencePhoneSet(v19);
  std::deque<kaldi::CuMatrix<float>>::~deque[abi:ne180100]((void *)v13 + 64);
  kaldi::CuMatrix<float>::~CuMatrix(v18);
  uint64_t v21 = (void *)*((void *)v13 + 51);
  if (v21) {
    operator delete(v21);
  }
  kaldi::Matrix<float>::~Matrix(a10);
  kaldi::CuVector<float>::~CuVector(a11);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  kaldi::CuMatrix<float>::~CuMatrix(v14);
  kaldi::CuMatrix<float>::~CuMatrix(a12);
  kaldi::Matrix<float>::~Matrix(a13);
  uint64_t v22 = *v17;
  if (*v17)
  {
    *((void *)v13 + 16) = v22;
    operator delete(v22);
  }
  if (*v16) {
    operator delete(*v16);
  }
  quasar::Bitmap::~Bitmap(v13);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::CuMatrix<float>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    char v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    char v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x55];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x55] + 48 * ((a1[5] + v5) % 0x55);
    if ((char *)*v6 + 48 * (v5 % 0x55) != (void *)v7)
    {
      uint64_t v8 = (char *)*v6 + 48 * (v5 % 0x55);
      do
      {
        uint64_t v9 = *(void *)v8;
        v8 += 48;
        (*(void (**)(void))(v9 + 16))();
        if (v8 - (unsigned char *)*v6 == 4080)
        {
          unsigned __int8 v10 = (char *)v6[1];
          ++v6;
          uint64_t v8 = v10;
        }
      }
      while (v8 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *char v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 42;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 85;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void quasar::GlobalPDecTranslatorFactory::~GlobalPDecTranslatorFactory(quasar::GlobalPDecTranslatorFactory *this)
{
  *(void *)this = &unk_1F0A57540;
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy((uint64_t)this + 1664, *((void **)this + 209));
  std::__list_imp<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::clear((uint64_t *)this + 205);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 204);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::~__hash_table((uint64_t)this + 1584);
  std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy((uint64_t)this + 1560, *((void **)this + 196));
  quasar::SystemConfig::~SystemConfig((quasar::GlobalPDecTranslatorFactory *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t vars8;

  quasar::GlobalPDecTranslatorFactory::~GlobalPDecTranslatorFactory(this);
  JUMPOUT(0x1B3EA8670);
}

uint64_t quasar::GlobalPDecTranslatorFactory::GlobalPDecTranslatorFactory(uint64_t a1, const quasar::SystemConfig *a2, int a3, char a4, int a5, uint64_t *a6)
{
  *(void *)a1 = &unk_1F0A57540;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 8), a2, 1, 1);
  *(_DWORD *)(a1 + 15--*(_DWORD *)(a9 + 52) = a3;
  *(unsigned char *)(a1 + 1556) = a4;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(void *)(a1 + 1560) = a1 + 1568;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_DWORD *)(a1 + 1616) = 1065353216;
  *(_OWORD *)(a1 + 16++*(_DWORD *)(result + 24) = 0u;
  *(void *)(a1 + 1640) = a1 + 1640;
  *(void *)(a1 + 1648) = a1 + 1640;
  *(void *)(a1 + 1656) = 0;
  *(void *)(a1 + 1680) = 0;
  *(void *)(a1 + 1672) = 0;
  *(void *)(a1 + 1664) = a1 + 1672;
  uint64_t v11 = *a6;
  if (a5)
  {
    if (v11 && quasar::gLogLevel >= 1)
    {
      memset(v20, 0, sizeof(v20));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Cannot specify both factoryLocalModelSharing and context", 56);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v20);
    }
    unint64_t v12 = (char *)operator new(0x38uLL);
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *(void *)unint64_t v12 = &unk_1F0A5FF78;
    *(_OWORD *)(v12 + ++*(_DWORD *)(result + 24) = 0u;
    uint64_t v13 = v12 + 24;
    *(_OWORD *)(v12 + 40) = 0u;
    *(void *)(a1 + 16++*(_DWORD *)(result + 24) = v12 + 24;
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 1632);
    *(void *)(a1 + 1632) = v12;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      uint64_t v13 = *(char **)(a1 + 1624);
    }
    uint64_t v15 = (std::__shared_weak_count *)operator new(0x30uLL);
    v15->__shared_weak_owners_ = 0;
    v15->__shared_owners_ = 0;
    v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D3A0;
    v15[1].__shared_owners_ = 0;
    v15[1].__vftable = (std::__shared_weak_count_vtbl *)&v15[1].__shared_owners_;
    v15[1].__shared_weak_owners_ = 0;
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v16 = (std::__shared_weak_count *)*((void *)v13 + 3);
    *((void *)v13 + 2) = v15 + 1;
    *((void *)v13 + 3) = v15;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    long long v17 = v15;
  }
  else
  {
    if (!v11) {
      return a1;
    }
    uint64_t v18 = a6[1];
    if (!v18)
    {
      *(void *)(a1 + 16++*(_DWORD *)(result + 24) = v11;
      *(void *)(a1 + 1632) = 0;
      return a1;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    long long v17 = *(std::__shared_weak_count **)(a1 + 1632);
    *(void *)(a1 + 16++*(_DWORD *)(result + 24) = v11;
    *(void *)(a1 + 1632) = v18;
    if (!v17) {
      return a1;
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  return a1;
}

void sub_1B1E08AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(v9 + 1664, *(void **)(v9 + 1672));
  std::__list_imp<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::clear(v11);
  uint64_t v14 = *(std::__shared_weak_count **)(v9 + 1632);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::~__hash_table(v9 + 1584);
  std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy(v9 + 1560, *v12);
  quasar::SystemConfig::~SystemConfig(v10);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v9);
  _Unwind_Resume(a1);
}

void quasar::GlobalPDecTranslatorFactory::createTranslator(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, void *a5@<X8>)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(&v17, a2, a3, a4);
    unsigned __int8 v10 = std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::find<std::tuple<std::string,std::string,std::string>>(a1 + 1664, (uint64_t)&v17);
    if ((void *)(a1 + 1672) == v10)
    {
      uint64_t v14 = *(void *)(a1 + 1656);
      if (v14 && v14 == *(_DWORD *)(a1 + 1552))
      {
        std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__erase_unique<std::tuple<std::string,std::string,std::string>>((uint64_t **)(a1 + 1664), *(void *)(a1 + 1640) + 16);
        std::list<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::pop_back((uint64_t **)(a1 + 1640));
      }
      v22[0].__r_.__value_.__r.__words[0] = a1 + 1560;
      uint64_t v15 = 0;
      uint64_t v16 = a1 + 1584;
      std::allocate_shared[abi:ne180100]<quasar::PDecTranslator,std::allocator<quasar::PDecTranslator>,quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>((uint64_t)&v37, (quasar::SystemConfig *)(a1 + 8), (uint64_t)a4, (uint64_t)a2, (uint64_t)a3, (uint64_t *)v22, &v16, (uint64_t)&v15, (unsigned __int8 *)(a1 + 1556), (void *)(a1 + 1624));
    }
    uint64_t v11 = (uint64_t *)v10[13];
    unint64_t v12 = *(uint64_t **)(a1 + 1648);
    if (v12 != v11)
    {
      std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 1640, v12, a1 + 1640, v11);
      v22[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
      std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>((uint64_t **)(a1 + 1664), (uint64_t)&v17, (uint64_t)&std::piecewise_construct, (long long **)v22)[13] = (uint64_t)v11;
    }
    uint64_t v13 = v11[12];
    *a5 = v11[11];
    a5[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v24 = 0u;
      memset(v22, 0, sizeof(v22));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Given task and language pair combination is not supported", 57);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v22);
    }
    *a5 = 0;
    a5[1] = 0;
  }
}

void sub_1B1E08E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  quasar::corrective_reranking::OverridesConfig::~OverridesConfig((void **)va);
  _Unwind_Resume(a1);
}

void std::list<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::pop_back(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)(v2 + 8) = (*a1)[1];
  *(void *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,0>((uint64_t)(v1 + 2));
  operator delete(v1);
}

__n128 std::list<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::insert(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x68uLL);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a3;
  *((void *)v6 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v6 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *((void *)v6 + 10) = *(void *)(a3 + 64);
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  __n128 result = *(__n128 *)(a3 + 72);
  *(__n128 *)(v6 + 88) = result;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 64) = 0;
  uint64_t v8 = *a2;
  *(void *)(v8 + 8) = v6;
  *(void *)uint64_t v6 = v8;
  *a2 = (uint64_t)v6;
  *((void *)v6 + 1) = a2;
  ++*(void *)(a1 + 16);
  return result;
}

uint64_t std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *quasar::GlobalPDecTranslatorFactory::engineType@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, quasar::PDecTranslator::ENGINE_TYPE);
}

BOOL quasar::GlobalPDecTranslatorFactory::isLanguagePairSupported(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(unsigned __int8 *)(a4 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a4 + 8);
  }
  unint64_t v7 = (quasar::SystemConfig *)(a1 + 8);
  if (v6)
  {
    uint64_t v8 = (quasar::SystemConfig *)(a1 + 8);
    return quasar::PDecTranslator::IsLanguagePairSupported(v8, a4, a2, a3);
  }
  else
  {
    uint64_t TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo((quasar::SystemConfig *)(a1 + 8));
    uint64_t v11 = *(void **)(TranslationModelInfo + 24);
    unint64_t v12 = (void *)(TranslationModelInfo + 32);
    uint64_t v13 = 1;
    if (v11 != (void *)(TranslationModelInfo + 32))
    {
      do
      {
        BOOL IsLanguagePairSupported = quasar::PDecTranslator::IsLanguagePairSupported(v7, (uint64_t)(v11 + 4), a2, a3);
        uint64_t v15 = (void *)v11[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            uint64_t v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v16 = (void *)v11[2];
            BOOL v17 = *v16 == (void)v11;
            uint64_t v11 = v16;
          }
          while (!v17);
        }
        uint64_t v13 = v13 & IsLanguagePairSupported;
        uint64_t v11 = v16;
      }
      while (v16 != v12);
    }
    return v13;
  }
}

uint64_t quasar::GlobalPDecTranslatorFactory::isCompileRequired(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(unsigned __int8 *)(a4 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a4 + 8);
  }
  if (v7)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Checking compilation status for specific task / source / target", 63);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v38);
    }
    quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v38, (const quasar::SystemConfig *)(a1 + 8), 1, 1);
    long long v26 = 0;
    long long v27 = 0;
    long long v28 = 0;
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    v33.__r_.__value_.__s.__data_[8] = 0;
    long long v26 = (void **)operator new(0x608uLL);
    long long v27 = v26;
    long long v28 = v26 + 193;
    long long v27 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>((uint64_t)&v28, (uint64_t)&v38, (uint64_t)&v55, (uint64_t)v26);
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(&v33, (long long *)a4, (long long *)a2, (long long *)a3);
    __n128 v23 = 0;
    long long v24 = 0;
    p_int data = 0;
    long long v31 = (void ***)&v23;
    LOBYTE(v32) = 0;
    __n128 v23 = (std::string *)operator new(0x48uLL);
    long long v24 = v23;
    p_int data = (void **)&v23[3].__r_.__value_.__l.__data_;
    long long v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string> const*,std::tuple<std::string,std::string,std::string> const*,std::tuple<std::string,std::string,std::string>*>((uint64_t)&p_data, (long long *)&v33, &v38, v23);
    quasar::TranslatorCompiler::TranslatorCompiler(v29, &v26, &v23);
    long long v31 = (void ***)&v23;
    std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
    if (v37 < 0) {
      operator delete(__p);
    }
    if (v35 < 0) {
      operator delete(v34);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v38);
    uint64_t isCompileRequired = quasar::TranslatorCompiler::isCompileRequired((quasar::TranslatorCompiler *)v29);
    unsigned __int8 v10 = v30;
    if (!v30) {
      return isCompileRequired;
    }
LABEL_39:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    return isCompileRequired;
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (!v11) {
    goto LABEL_36;
  }
  uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  if (v12)
  {
    if (quasar::gLogLevel >= 6)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Checking compilation status for specific source / target", 56);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v38);
    }
    memset(&v33, 0, sizeof(v33));
    uint64_t v13 = (quasar::SystemConfig *)(a1 + 8);
    uint64_t TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo(v13);
    uint64_t v15 = *(void **)(TranslationModelInfo + 24);
    uint64_t v16 = (void *)(TranslationModelInfo + 32);
    if (v15 != (void *)(TranslationModelInfo + 32))
    {
      std::string::size_type size = (std::string *)v33.__r_.__value_.__l.__size_;
      do
      {
        uint64_t v18 = (long long *)(v15 + 4);
        if ((unint64_t)size >= v33.__r_.__value_.__r.__words[2])
        {
          std::string::size_type size = (std::string *)std::vector<std::tuple<std::string,std::string,std::string>>::__emplace_back_slow_path<std::string const&,std::string const&,std::string const&>((uint64_t *)&v33, v18, (long long *)a2, (long long *)a3);
        }
        else
        {
          _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(size, v18, (long long *)a2, (long long *)a3);
          size += 3;
        }
        v33.__r_.__value_.__l.__size_ = (std::string::size_type)size;
        char v19 = (void *)v15[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            char v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (void *)v15[2];
            BOOL v21 = *v20 == (void)v15;
            uint64_t v15 = v20;
          }
          while (!v21);
        }
        uint64_t v15 = v20;
      }
      while (v20 != v16);
    }
    quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v38, v13, 1, 1);
    long long v26 = 0;
    long long v27 = 0;
    long long v28 = 0;
    LOBYTE(v++*(_DWORD *)(result + 24) = 0;
    long long v26 = (void **)operator new(0x608uLL);
    long long v27 = v26;
    long long v28 = v26 + 193;
    long long v27 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>((uint64_t)&v28, (uint64_t)&v38, (uint64_t)&v55, (uint64_t)v26);
    quasar::TranslatorCompiler::TranslatorCompiler(&v31, &v26, &v33);
    __n128 v23 = (std::string *)&v26;
    std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v38);
    uint64_t isCompileRequired = quasar::TranslatorCompiler::isCompileRequired((quasar::TranslatorCompiler *)&v31);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    *(void *)&long long v38 = &v33;
    std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  }
  else
  {
LABEL_36:
    if (quasar::gLogLevel >= 6)
    {
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Checking compilation status for all models", 42);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v38);
    }
    quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v38, (const quasar::SystemConfig *)(a1 + 8), 1, 1);
    memset(&v33, 0, sizeof(v33));
    long long v26 = (void **)&v33;
    LOBYTE(v27) = 0;
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x608uLL);
    v33.__r_.__value_.__l.__size_ = v33.__r_.__value_.__r.__words[0];
    v33.__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[0] + 1544;
    v33.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>((uint64_t)&v33.__r_.__value_.__r.__words[2], (uint64_t)&v38, (uint64_t)&v55, (uint64_t)v33.__r_.__value_.__l.__data_);
    quasar::TranslatorCompiler::TranslatorCompiler(&v23);
    long long v26 = (void **)&v33;
    std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100](&v26);
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v38);
    uint64_t isCompileRequired = quasar::TranslatorCompiler::isCompileRequired((quasar::TranslatorCompiler *)&v23);
    unsigned __int8 v10 = (std::__shared_weak_count *)v24;
    if (v24) {
      goto LABEL_39;
    }
  }
  return isCompileRequired;
}

void sub_1B1E09608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void quasar::GlobalPDecTranslatorFactory::preload(_DWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t TranslationModelInfo = quasar::SystemConfig::getTranslationModelInfo((quasar::SystemConfig *)(a1 + 2));
  if (a4[2]) {
    uint64_t v9 = a4;
  }
  else {
    uint64_t v9 = (void *)(TranslationModelInfo + 24);
  }
  unsigned __int8 v10 = (unsigned __int8 *)*v9;
  long long v38 = (unsigned __int8 *)(v9 + 1);
  if ((void *)*v9 == v9 + 1) {
    return;
  }
  int v11 = 0;
  char v37 = (void *)(TranslationModelInfo + 72);
  do
  {
    uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v37, v10 + 32);
    if (!v12) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v14 = *((void *)v12 + 5);
    uint64_t v13 = *((void *)v12 + 6);
    while (v14 != v13)
    {
      uint64_t v15 = *(void *)(a3 + 16);
      if (v15
        && (std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v58, (long long *)v14, (long long *)(v14 + 24)), !std::__tree<std::pair<std::string,std::string>>::__count_unique<std::pair<std::string,std::string>>(a3, (const void **)&v58.__r_.__value_.__l.__data_)))
      {
        LOBYTE(v17) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(a2 + 16);
        BOOL v17 = v16 == 0;
        if (v16 && std::__tree<std::string>::__count_unique<std::string>(a2, (const void **)v14)) {
          BOOL v17 = std::__tree<std::string>::__count_unique<std::string>(a2, (const void **)(v14 + 24)) != 0;
        }
        if (!v15)
        {
          if (!v17) {
            goto LABEL_47;
          }
LABEL_23:
          int v18 = a1[388];
          if ((v18 & 0x80000000) == 0 && v11 >= v18)
          {
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v41 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(&v41, "Trying to preload more Translators than available cache size!");
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v41);
          }
          if (quasar::gLogLevel >= 6)
          {
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v41 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
            char v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Preloading translator for task '", 32);
            unsigned __int8 v20 = v10[55];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = (uint64_t)(v10 + 32);
            }
            else {
              uint64_t v21 = *((void *)v10 + 4);
            }
            if ((v20 & 0x80u) == 0) {
              uint64_t v22 = v10[55];
            }
            else {
              uint64_t v22 = *((void *)v10 + 5);
            }
            __n128 v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
            long long v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"', language pair '", 18);
            int v25 = *(char *)(v14 + 23);
            if (v25 >= 0) {
              long long v26 = (const void *)v14;
            }
            else {
              long long v26 = *(const void **)v14;
            }
            if (v25 >= 0) {
              uint64_t v27 = *(unsigned __int8 *)(v14 + 23);
            }
            else {
              uint64_t v27 = *(void *)(v14 + 8);
            }
            long long v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);
            long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"-", 1);
            int v30 = *(char *)(v14 + 47);
            if (v30 >= 0) {
              uint64_t v31 = v14 + 24;
            }
            else {
              uint64_t v31 = *(void *)(v14 + 24);
            }
            if (v30 >= 0) {
              uint64_t v32 = *(unsigned __int8 *)(v14 + 47);
            }
            else {
              uint64_t v32 = *(void *)(v14 + 32);
            }
            std::string v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"'", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v41);
          }
          ++v11;
          (*(void (**)(uint64_t *__return_ptr, _DWORD *, uint64_t, uint64_t, void *))(*(void *)a1 + 16))(&v39, a1, v14, v14 + 24, (void *)v10 + 4);
          if (v40) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          goto LABEL_47;
        }
      }
      if (v60 < 0) {
        operator delete(v59);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      if (v17) {
        goto LABEL_23;
      }
LABEL_47:
      v14 += 48;
    }
    long long v34 = (unsigned __int8 *)*((void *)v10 + 1);
    if (v34)
    {
      do
      {
        char v35 = v34;
        long long v34 = *(unsigned __int8 **)v34;
      }
      while (v34);
    }
    else
    {
      do
      {
        char v35 = (unsigned __int8 *)*((void *)v10 + 2);
        BOOL v36 = *(void *)v35 == (void)v10;
        unsigned __int8 v10 = v35;
      }
      while (!v36);
    }
    unsigned __int8 v10 = v35;
  }
  while (v35 != v38);
}

void sub_1B1E09A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void sub_1B1E09A74(_Unwind_Exception *a1)
{
  std::pair<std::string,std::string>::~pair(v1 - 136);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

std::string *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,std::string,std::string>::__tuple_impl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1B1E09C40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(std::string *this, long long *a2, long long *a3, long long *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = this + 2;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1B1E09D28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::vector<std::string> const,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::vector<std::string> const,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void **)a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<kaldi::quasar::TMTools::ModelSharing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D3A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::TMTools::ModelSharing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F0A1D3A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B3EA8670);
}

void std::__shared_ptr_emplace<kaldi::quasar::TMTools::ModelSharing>::__on_zero_shared(uint64_t a1)
{
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::find<std::tuple<std::string,std::string,std::string>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  long long v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v9, (uint64_t)(v3 + 4), a2);
    long long v7 = v3 + 1;
    if (!v6)
    {
      long long v7 = v3;
      long long v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v10, a2, (uint64_t)(v5 + 4)))
  {
    return v2;
  }
  return v5;
}

BOOL std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a3 + 23);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v7 = *(void *)(a2 + 8);
  }
  if (v6 >= 0) {
    long long v8 = (const void *)a2;
  }
  else {
    long long v8 = *(const void **)a2;
  }
  if (v5 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v9 = *(void *)(a3 + 8);
  }
  if (v5 >= 0) {
    char v10 = (const void *)a3;
  }
  else {
    char v10 = *(const void **)a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  return !v16
      && std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v17, a2, a3);
}

BOOL std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(char *)(a3 + 47);
  int v6 = *(char *)(a2 + 47);
  if (v6 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    size_t v7 = *(void *)(a2 + 32);
  }
  if (v6 >= 0) {
    long long v8 = (const void *)(a2 + 24);
  }
  else {
    long long v8 = *(const void **)(a2 + 24);
  }
  if (v5 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a3 + 47);
  }
  else {
    size_t v9 = *(void *)(a3 + 32);
  }
  if (v5 >= 0) {
    char v10 = (const void *)(a3 + 24);
  }
  else {
    char v10 = *(const void **)(a3 + 24);
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  return !v16
      && std::__tuple_less<1ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v17, a2, a3);
}

BOOL std::__tuple_less<1ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(const void **)(a3 + 48);
  uint64_t v3 = a3 + 48;
  long long v4 = v5;
  int v6 = *(char *)(v3 + 23);
  size_t v9 = *(const void **)(a2 + 48);
  uint64_t v7 = a2 + 48;
  long long v8 = v9;
  int v10 = *(char *)(v7 + 23);
  if (v10 >= 0) {
    size_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    size_t v11 = *(void *)(v7 + 8);
  }
  if (v10 >= 0) {
    int v12 = (const void *)v7;
  }
  else {
    int v12 = v8;
  }
  if (v6 >= 0) {
    size_t v13 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    size_t v13 = *(void *)(v3 + 8);
  }
  if (v6 >= 0) {
    uint64_t v14 = (const void *)v3;
  }
  else {
    uint64_t v14 = v4;
  }
  if (v13 >= v11) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v13;
  }
  int v16 = memcmp(v12, v14, v15);
  if (v16) {
    return v16 < 0;
  }
  else {
    return v11 < v13;
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__emplace_unique_key_args<std::tuple<std::string,std::string,std::string>,std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int v6 = (uint64_t **)std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__find_equal<std::tuple<std::string,std::string,std::string>>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__find_equal<std::tuple<std::string,std::string,std::string>>(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v10, a3, (uint64_t)(v4 + 4)))break; {
        long long v4 = (void *)*v7;
        }
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<std::string,std::string,std::string>,std::tuple<std::string,std::string,std::string>>((uint64_t)&v11, v8, a3))break; {
      int v5 = v7 + 1;
      }
      long long v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

std::string *std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::tuple<std::string,std::string,std::string> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = (char *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,std::string,std::string>::__tuple_impl((std::string *)(v6 + 32), *a2);
  *((void *)v6 + 13) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1B1E0A44C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::__erase_unique<std::tuple<std::string,std::string,std::string>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::find<std::tuple<std::string,std::string,std::string>>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  long long v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::TranslationPairSetting>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void std::allocate_shared[abi:ne180100]<quasar::PDecTranslator,std::allocator<quasar::PDecTranslator>,quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &,void>(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, unsigned __int8 *a9, void *a10)
{
  int v16 = operator new(0xC8uLL);
  std::__shared_ptr_emplace<quasar::PDecTranslator>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::PDecTranslator>,0>(v16, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B1E0A5B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PDecTranslator>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &,std::allocator<quasar::PDecTranslator>,0>(void *a1, quasar::SystemConfig *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, unsigned __int8 *a9, void *a10)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A5FDB8;
  std::allocator<quasar::PDecTranslator>::construct[abi:ne180100]<quasar::PDecTranslator,quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &>((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B1E0A64C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PDecTranslator>::construct[abi:ne180100]<quasar::PDecTranslator,quasar::SystemConfig &,std::string const&,std::string const&,std::string const&,std::map<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>> *,std::unordered_map<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>> *,decltype(nullptr),BOOL &,std::shared_ptr<quasar::ContextProvider> &>(uint64_t a1, uint64_t a2, quasar::SystemConfig *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9, unsigned __int8 *a10, void *a11)
{
  uint64_t v12 = *a7;
  uint64_t v13 = *a8;
  int v14 = *a10;
  uint64_t v15 = a11[1];
  v17[0] = *a11;
  v17[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  LOBYTE(v16) = v14 != 0;
  quasar::PDecTranslator::PDecTranslator(a2, a3, a4, a5, a6, v12, v13, 0, v16, (uint64_t)v17);
}

void sub_1B1E0A6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a4 + v7), (const quasar::SystemConfig *)(a2 + v7), 1, 1);
      v7 += 1544;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B1E0A778(_Unwind_Exception *exception_object)
{
  if (v3) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SystemConfig>,quasar::SystemConfig const*,quasar::SystemConfig const*,quasar::SystemConfig*>(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string> const*,std::tuple<std::string,std::string,std::string> const*,std::tuple<std::string,std::string,std::string>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  char v10 = this;
  char v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,std::string,std::string,std::string>::__tuple_impl(v4, v6);
      int v6 = (long long *)((char *)v6 + 72);
      long long v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1B1E0A824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::tuple<std::string,std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,quasar::ItnOverride*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t std::vector<std::tuple<std::string,std::string,std::string>>::__emplace_back_slow_path<std::string const&,std::string const&,std::string const&>(uint64_t *a1, long long *a2, long long *a3, long long *a4)
{
  uint64_t v5 = *a1;
  unint64_t v6 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = 0x8E38E38E38E38E39 * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7) {
    unint64_t v7 = 2 * v12;
  }
  if (v12 >= 0x1C71C71C71C71C7) {
    unint64_t v13 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v13 = v7;
  }
  uint64_t v21 = a1 + 2;
  if (v13) {
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v11, v13);
  }
  else {
    int v14 = 0;
  }
  char v17 = v14;
  int v18 = (std::string *)&v14[72 * v6];
  unsigned __int8 v20 = &v14[72 * v13];
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_S8_EEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_S8_EJEJEJRKS8_SC_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(v18, a2, a3, a4);
  char v19 = v18 + 3;
  std::vector<std::tuple<std::string,std::string,std::string>>::__swap_out_circular_buffer(a1, &v17);
  uint64_t v15 = a1[1];
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer(&v17);
  return v15;
}

void sub_1B1E0A994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,std::string,std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  void v14[2] = &v17;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 72);
      *(void *)(v9 - 56) = *(void *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 72) = 0;
      long long v11 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v12 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - ++*(_DWORD *)(result + 24) = v12;
      v9 -= 72;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - ++*(_DWORD *)(result + 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((void *)&v17 + 1) = v9;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::tuple<std::string,std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::ItnOverride>::destroy[abi:ne180100](v4, i - 72);
  }
}

uint64_t std::__tree<std::pair<std::string,std::string>>::__count_unique<std::pair<std::string,std::string>>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if ((std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v4, a2, v2 + 4) & 1) == 0)
      {
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v4, v2 + 4, a2))return v5; {
        ++v2;
        }
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

void std::allocate_shared[abi:ne180100]<quasar::URegularExpressionWrapper,std::allocator<quasar::URegularExpressionWrapper>,char const*,UErrorCode *,void>(uint64_t a1, const char **a2, UErrorCode **a3)
{
  uint64_t v5 = operator new(0x20uLL);
  std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const*,UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(v5, a2, a3);
}

void sub_1B1E0ACC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::URegularExpressionWrapper>::__shared_ptr_emplace[abi:ne180100]<char const*,UErrorCode *,std::allocator<quasar::URegularExpressionWrapper>,0>(void *a1, const char **a2, UErrorCode **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F0A61830;
  quasar::URegularExpressionWrapper::URegularExpressionWrapper((quasar::URegularExpressionWrapper *)(a1 + 3), *a2, *a3);
}

void sub_1B1E0AD2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>,int>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v5);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1)) {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  return 1;
}

void sub_1B1E0B000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(&a49);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v49 - 120));
  _Unwind_Resume(a1);
}

BOOL fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Determinize(uint64_t a1, double *a2)
{
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::InitializeDeterminization(a1);
  uint64_t v4 = *(char **)(a1 + 200);
  uint64_t v5 = *(char **)(a1 + 208);
  if (v4 != v5)
  {
    while (1)
    {
      unint64_t v6 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
      unint64_t v7 = *(unsigned int *)(a1 + 92);
      if ((int)v7 >= 1 && v6 > v7) {
        break;
      }
      uint64_t v9 = *(void *)v4;
      int v10 = *(_DWORD *)(a1 + 96);
      if (v10 >= 1 && *(_DWORD *)(a1 + 24) > v10) {
        break;
      }
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v6, 1) <= 0x1999999999999999uLL)
      {
        if (!fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::CheckMemoryUsage(a1)) {
          break;
        }
        uint64_t v4 = *(char **)(a1 + 200);
        uint64_t v5 = *(char **)(a1 + 208);
      }
      if (v5 - v4 >= 9)
      {
        uint64_t v11 = *(void *)v4;
        long long v12 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(v4, (uint64_t)v24, (unint64_t)(v5 - v4) >> 3);
        unint64_t v13 = v5 - 8;
        if (v5 - 8 == v12)
        {
          *(void *)long long v12 = v11;
        }
        else
        {
          *(void *)long long v12 = *(void *)v13;
          *(void *)unint64_t v13 = v11;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>((uint64_t)v4, (uint64_t)(v12 + 8), (uint64_t)v24, (v12 + 8 - v4) >> 3);
        }
      }
      *(void *)(a1 + 208) -= 8;
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessTransition(a1, *(_DWORD *)v9, *(_DWORD *)(v9 + 4), (uint64_t *)(v9 + 8));
      int v14 = *(void **)(v9 + 8);
      if (v14)
      {
        *(void *)(v9 + 16) = v14;
        operator delete(v14);
      }
      MEMORY[0x1B3EA8670](v9, 0x1020C40CC82F220);
      uint64_t v4 = *(char **)(a1 + 200);
      uint64_t v5 = *(char **)(a1 + 208);
      if (v4 == v5) {
        goto LABEL_21;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v24, 1);
      char v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Lattice determinization terminated but not ", 43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" because of lattice-beam.  (#states, #arcs) is(", 49);
      long long v16 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      long long v17 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"), versus limits(", 20);
      int v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
      char v19 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)") (else, may be memory limit).", 31);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v24);
    }
  }
LABEL_21:
  *(unsigned char *)(a1 + 112) = 1;
  uint64_t v20 = *(void *)(a1 + 200);
  uint64_t v21 = *(void *)(a1 + 208);
  if (a2)
  {
    if (v20 == v21)
    {
      *a2 = *(double *)(a1 + 64);
      uint64_t v21 = v20;
    }
    else
    {
      double v22 = *(double *)(*(void *)v20 + 32);
      *a2 = v22
          - *(double *)(*(void *)(a1 + 40)
                      + 8 * (*(int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)));
      uint64_t v20 = *(void *)(a1 + 200);
      uint64_t v21 = *(void *)(a1 + 208);
    }
  }
  return v20 == v21;
}

void sub_1B1E0B2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Output(uint64_t *a1, uint64_t a2, int a3)
{
  unint64_t v5 = a1[1] - *a1;
  unint64_t v6 = v5 >> 3;
  if (a3) {
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176))(a2, 0xFFFFFFFFLL);
  if (v6)
  {
    if ((int)v6 < 1)
    {
      (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
    }
    else
    {
      int v7 = 0;
      do
      {
        (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
        ++v7;
      }
      while (v6 != v7);
      (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
      uint64_t v8 = 0;
      uint64_t v14 = (v5 >> 3);
      do
      {
        uint64_t v9 = *(void *)(*a1 + 8 * v8);
        uint64_t v10 = *(void *)(v9 + 24);
        uint64_t v11 = *(void *)(v9 + 32);
        uint64_t v12 = v9 + 24;
        while (v10 != v11)
        {
          uint64_t v27 = 0;
          long long v28 = 0;
          uint64_t v29 = 0;
          memset(&v24, 0, sizeof(v24));
          fst::LatticeStringRepository<int>::ConvertToVector(a1 + 280, *(uint64_t **)(v10 + 8), &v24);
          uint64_t v20 = *(void *)(v10 + 20);
          double v22 = 0;
          uint64_t v23 = 0;
          uint64_t v21 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, v24.__begin_, (uint64_t)v24.__end_, v24.__end_ - v24.__begin_);
          if (*(_DWORD *)(v10 + 16) == -1)
          {
            uint64_t v16 = v20;
            int v18 = 0;
            uint64_t v19 = 0;
            std::string __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 184))(a2, v8, &v16);
            if (__p)
            {
              int v18 = __p;
              operator delete(__p);
            }
          }
          else
          {
            int v30 = *(_DWORD *)(v10 + 16);
            v25[0] = *(_DWORD *)v10;
            v25[1] = v25[0];
            uint64_t v26 = v20;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v27, (char *)v21, (uint64_t)v22, (v22 - (unsigned char *)v21) >> 2);
            (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 208))(a2, v8, v25);
          }
          if (v21)
          {
            double v22 = v21;
            operator delete(v21);
          }
          if (v24.__begin_)
          {
            v24.__end_ = v24.__begin_;
            operator delete(v24.__begin_);
          }
          if (v27)
          {
            long long v28 = v27;
            operator delete(v27);
          }
          v10 += 32;
        }
        if (a3)
        {
          unint64_t v13 = *(void **)v12;
          *(void *)(v12 + 8) = 0;
          *(void *)(v12 + 16) = 0;
          *(void *)uint64_t v12 = 0;
          if (v13) {
            operator delete(v13);
          }
        }
        ++v8;
      }
      while (v8 != v14);
    }
    if (a3)
    {
      fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeOutputStates((uint64_t)a1);
      fst::LatticeStringRepository<int>::Destroy(a1 + 35);
    }
  }
}

{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  void *v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  _DWORD v34[2];
  int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  std::vector<unsigned int> __p;
  uint64_t vars8;

  unint64_t v5 = a1[1] - *a1;
  unint64_t v6 = v5 >> 3;
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  if (!(v5 >> 3))
  {
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)a2 + 176);
    v31(a2, 0xFFFFFFFFLL);
    return;
  }
  if (a3) {
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  }
  if ((int)v6 >= 1)
  {
    int v7 = 0;
    do
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 200))(a2);
      ++v7;
    }
    while (v6 != v7);
    (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
    uint64_t v8 = 0;
    uint64_t v32 = (v5 >> 3);
    while (1)
    {
      uint64_t v9 = *(void *)(*a1 + 8 * v8);
      uint64_t v12 = *(int **)(v9 + 24);
      uint64_t v10 = *(int **)(v9 + 32);
      uint64_t v11 = v9 + 24;
      while (v12 != v10)
      {
        memset(&__p, 0, sizeof(__p));
        fst::LatticeStringRepository<int>::ConvertToVector(a1 + 280, *((uint64_t **)v12 + 1), &__p);
        std::vector<std::string>::pointer begin = __p.__begin_;
        std::vector<std::string>::pointer end = __p.__end_;
        if (v12[4] != -1)
        {
          if ((std::vector<unsigned int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) <= (std::vector<unsigned int>::pointer)4)
          {
            long long v38 = v12[4];
            long long v17 = v8;
          }
          else
          {
            char v15 = 0;
            uint64_t v16 = v8;
            do
            {
              long long v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
              long long v38 = v17;
              int v18 = 0;
              if (!v15) {
                int v18 = *(void *)(v12 + 5);
              }
              char v37 = v18;
              uint64_t v19 = *v12;
              if (v15) {
                uint64_t v19 = 0;
              }
              char v35 = v19;
              BOOL v36 = __p.__begin_[v15];
              (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 208))(a2, v16, &v35);
              std::vector<std::string>::pointer begin = __p.__begin_;
              std::vector<std::string>::pointer end = __p.__end_;
              uint64_t v20 = v15 + 2;
              ++v15;
              uint64_t v16 = v17;
            }
            while (v20 < __p.__end_ - __p.__begin_);
            long long v38 = v12[4];
            if ((std::vector<unsigned int>::pointer)((char *)__p.__end_ - (char *)__p.__begin_) > (std::vector<unsigned int>::pointer)7)
            {
              uint64_t v21 = 0;
              double v22 = 0;
LABEL_29:
              char v37 = v22;
              if (v21) {
                long long v28 = *v12;
              }
              else {
                long long v28 = 0;
              }
              char v35 = v28;
              if (end == begin) {
                uint64_t v29 = 0;
              }
              else {
                uint64_t v29 = *(end - 1);
              }
              BOOL v36 = v29;
              (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 208))(a2, v17, &v35);
              goto LABEL_38;
            }
          }
          double v22 = *(void *)(v12 + 5);
          uint64_t v21 = 1;
          goto LABEL_29;
        }
        uint64_t v23 = v8;
        if (__p.__end_ == __p.__begin_) {
          goto LABEL_36;
        }
        std::vector<unsigned int> v24 = 0;
        int v25 = v8;
        do
        {
          uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 200))(a2);
          long long v38 = v23;
          uint64_t v26 = 0;
          if (!v24) {
            uint64_t v26 = *(void *)(v12 + 5);
          }
          char v37 = v26;
          char v35 = 0;
          BOOL v36 = __p.__begin_[v24];
          (*(void (**)(uint64_t, uint64_t, int *))(*(void *)a2 + 208))(a2, v25, &v35);
          ++v24;
          int v25 = v23;
        }
        while (v24 < __p.__end_ - __p.__begin_);
        if (__p.__end_ == __p.__begin_)
        {
LABEL_36:
          uint64_t v27 = v12[6];
          v34[0] = v12[5];
        }
        else
        {
          v34[0] = 0;
          uint64_t v27 = 0;
        }
        v34[1] = v27;
        (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a2 + 184))(a2, v23, v34);
LABEL_38:
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        v12 += 8;
      }
      if (a3)
      {
        int v30 = *(void **)v11;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)uint64_t v11 = 0;
        if (v30) {
          operator delete(v30);
        }
      }
      if (++v8 == v32)
      {
        if (a3) {
          goto LABEL_46;
        }
        return;
      }
    }
  }
  (*(void (**)(uint64_t, void))(*(void *)a2 + 176))(a2, 0);
  if (a3)
  {
LABEL_46:
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeOutputStates((uint64_t)a1);
    fst::LatticeStringRepository<int>::Destroy(a1 + 35);
  }
}

void sub_1B1E0B620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 280))(a2, v4);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 288))(a2, v5);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 160))(a1)) {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst();
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 224))(a2);
  return 1;
}

void sub_1B1E0B99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(&a49);
  fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::~ImplToFst((void *)(v49 - 136));
  _Unwind_Resume(a1);
}

void sub_1B1E0BE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeLatticePhonePruned<fst::LatticeWeightTpl<float>,int>(kaldi::TransitionModel *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x101) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Both --phone-determinize and --word-determinize are set to ", 59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"false, copying lattice without determinization.", 47);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    }
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>();
  }
  v15[36] = -1;
  v15[37] = 0x3F000000FFFFFFFFLL;
  v15[35] = a4;
  if (a5)
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15, 1);
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Doing first pass of determinization on phone + word ", 52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"lattices.", 9);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15);
    }
    fst::DeterminizeLatticePhonePrunedFirstPass<fst::LatticeWeightTpl<float>,int>(a1, a2);
  }
  uint64_t v8 = 1;
  if ((a5 & 0x100) == 0)
  {
    if ((a5 & 0x10000) == 0) {
      return v8;
    }
    goto LABEL_15;
  }
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Doing second pass of determinization on word lattices.", 54);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15);
  }
  uint64_t v8 = fst::DeterminizeLatticePruned<fst::LatticeWeightTpl<float>,int>(a2, a3) & 1;
  if ((a5 & 0x10000) != 0)
  {
LABEL_15:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Pushing and minimizing on word lattices.", 40);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15);
    }
    int v12 = fst::PushCompactLatticeStrings<fst::LatticeWeightTpl<float>,int>(a3);
    int v13 = fst::PushCompactLatticeWeights<fst::LatticeWeightTpl<float>,int>(a3);
    return fst::MinimizeCompactLattice<fst::LatticeWeightTpl<float>,int>(a3, 0.00097656) & v13 & v12 & v8;
  }
  return v8;
}

void sub_1B1E0C0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void fst::DeterminizeLatticePhonePrunedFirstPass<fst::LatticeWeightTpl<float>,int>(kaldi::TransitionModel *a1, uint64_t a2)
{
}

void fst::DeterminizeLatticePhonePrunedWrapper(kaldi::TransitionModel *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, 0x4000000000, 1)) {
    fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>();
  }
  fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a2);
  fst::DeterminizeLatticePhonePruned<fst::LatticeWeightTpl<float>,int>(a1, a2, a3, a4, a5);
  fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a3);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizerPruned(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(double *)(a1 + 64) = a4;
  uint64_t v7 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a3;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a1 + 80);
  *(void *)(a1 + 96) = v7;
  *(unsigned char *)(a1 + 112) = 0;
  std::unordered_map<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const,int>>>::unordered_map(a1 + 120, 3uLL, a1 + 104, (int *)(a1 + 108));
  std::unordered_map<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::unordered_map(a1 + 160, 3uLL, a1 + 104, (int *)(a1 + 108));
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  fst::LatticeStringRepository<int>::LatticeStringRepository(a1 + 280);
}

void sub_1B1E0C3C0(_Unwind_Exception *a1)
{
  uint64_t v8 = v1[32];
  if (v8)
  {
    v1[33] = v8;
    operator delete(v8);
  }
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizerPruned(v5, v4, v3, (uint64_t)v1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  uint64_t v9 = *v6;
  if (*v6)
  {
    v1[6] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v1;
  if (*v1)
  {
    v1[1] = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const,int>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1E0C46C(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1B1E0C4BC(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void fst::LatticeStringRepository<int>::LatticeStringRepository(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  operator new();
}

void sub_1B1E0C528(_Unwind_Exception *a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *fst::LatticeStringRepository<int>::~LatticeStringRepository(void *a1)
{
  return a1;
}

uint64_t fst::LatticeStringRepository<int>::Destroy(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  for (uint64_t i = (void *)a1[3]; i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x1B3EA8670](v4, 0x1060C40ADAFC7CALL);
    }
  }
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::swap((uint64_t)v6, v2);
  if (*a1)
  {
    MEMORY[0x1B3EA8670](*a1, 0x1060C40ADAFC7CALL);
    *a1 = 0;
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v6);
}

uint64_t *fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizerPruned(uint64_t *a1)
{
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeOutputStates((uint64_t)a1);
  fst::LatticeStringRepository<int>::~LatticeStringRepository(a1 + 35);
  uint64_t v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = (uint64_t)v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = (uint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[25];
  if (v4)
  {
    a1[26] = (uint64_t)v4;
    operator delete(v4);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 20));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)(a1 + 15));
  int v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = (uint64_t)v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v6;
    operator delete(v6);
  }
  return a1;
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    a1[4] = 0;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)&v23, (uint64_t)(a1 + 15));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v23);
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      unint64_t v6 = *(void **)v5;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)uint64_t v5 = 0;
      if (v6) {
        operator delete(v6);
      }
      ++v4;
      uint64_t v3 = *a1;
    }
    while (v4 < (a1[1] - *a1) >> 3);
  }
  for (uint64_t i = (void *)a1[22]; i; uint64_t i = (void *)*i)
  {
    uint64_t v8 = i[2];
    if (v8)
    {
      uint64_t v9 = *(void **)v8;
      if (*(void *)v8)
      {
        *(void *)(v8 + 8) = v9;
        operator delete(v9);
      }
      MEMORY[0x1B3EA8670](v8, 0x20C40960023A9);
    }
  }
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)&v23, (uint64_t)(a1 + 20));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v23);
  uint64_t v10 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(v10 + 8 * v11);
      int v13 = *(void **)v12;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)uint64_t v12 = 0;
      if (v13) {
        operator delete(v13);
      }
      ++v11;
      uint64_t v10 = *a1;
    }
    while (v11 < (a1[1] - *a1) >> 3);
  }
  uint64_t v14 = (void *)a1[32];
  a1[33] = 0;
  a1[34] = 0;
  a1[32] = 0;
  if (v14) {
    operator delete(v14);
  }
  char v15 = (uint64_t *)a1[25];
  for (uint64_t j = a1[26]; v15 != (uint64_t *)j; a1[26] = j)
  {
    uint64_t v17 = *v15;
    if (*v15)
    {
      int v18 = *(void **)(v17 + 8);
      if (v18)
      {
        *(void *)(v17 + 16) = v18;
        operator delete(v18);
      }
      MEMORY[0x1B3EA8670](v17, 0x1020C40CC82F220);
      char v15 = (uint64_t *)a1[25];
      uint64_t j = a1[26];
    }
    if (j - (uint64_t)v15 >= 9)
    {
      uint64_t v19 = *v15;
      uint64_t v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(v15, (uint64_t)&v23, (unint64_t)(j - (void)v15) >> 3);
      uint64_t v21 = (void *)(j - 8);
      if ((void *)(j - 8) == v20)
      {
        *uint64_t v20 = v19;
      }
      else
      {
        *uint64_t v20 = *v21;
        *uint64_t v21 = v19;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>((uint64_t)v15, (uint64_t)(v20 + 1), (uint64_t)&v23, v20 + 1 - v15);
      }
    }
    char v15 = (uint64_t *)a1[25];
    uint64_t j = a1[26] - 8;
  }
  double v22 = (void *)a1[29];
  a1[30] = 0;
  a1[31] = 0;
  a1[29] = 0;
  if (v22) {
    operator delete(v22);
  }
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::FreeOutputStates(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        int v7 = *(void **)(v6 + 24);
        if (v7)
        {
          *(void *)(v6 + 32) = v7;
          operator delete(v7);
        }
        uint64_t v8 = *(void **)v6;
        if (*(void *)v6)
        {
          *(void *)(v6 + 8) = v8;
          operator delete(v8);
        }
        MEMORY[0x1B3EA8670](v6, 0x1020C405B906368);
        uint64_t v2 = *(void **)a1;
        uint64_t v3 = *(void **)(a1 + 8);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = &a1[v3];
    uint64_t v9 = v6[1];
    int v7 = v6 + 1;
    uint64_t v8 = v9;
    uint64_t v10 = (2 * v3) | 1;
    uint64_t v11 = 2 * v3 + 2;
    if (v11 < a3 && *(double *)(v8 + 32) > *(double *)(v7[1] + 32))
    {
      uint64_t v8 = v7[1];
      ++v7;
      uint64_t v10 = v11;
    }
    *a1 = v8;
    a1 = v7;
    uint64_t v3 = v10;
  }
  while (v10 <= v5);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::TaskCompare &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Task **>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    int v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    double v10 = *(double *)(v9 + 32);
    if (*(double *)(*v5 + 32) > v10)
    {
      do
      {
        uint64_t v11 = v5;
        *int v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (void *)(result + 8 * v4);
        uint64_t v6 = *v5;
        int v7 = v11;
      }
      while (*(double *)(*v5 + 32) > v10);
      *uint64_t v11 = v8;
    }
  }
  return result;
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::InitializeDeterminization(uint64_t a1)
{
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32), 0x4000000000, 1);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ComputeBackwardWeight(a1);
  if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32), 1, 0))
  {
    int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160))(*(void *)(a1 + 32));
    if (v2 >= 0) {
      int v3 = v2;
    }
    else {
      int v3 = v2 + 1;
    }
    size_t v4 = (v3 >> 1) + 3;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1 + 120, v4);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1 + 160, v4);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  if (result != -1)
  {
    int v6 = result;
    std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::vector(&__p, 1uLL);
    int v7 = __p;
    *(_DWORD *)std::string __p = v6;
    v7[1] = 0;
    _OWORD v7[2] = 0;
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(a1, (uint64_t *)&__p);
    fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(a1, (unsigned int **)&__p);
    operator new();
  }
  return result;
}

void sub_1B1E0CD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::CheckMemoryUsage(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 84);
  if (v1 < 1) {
    return 1;
  }
  int v3 = 24 * *(_DWORD *)(a1 + 28) + 32 * *(_DWORD *)(a1 + 24);
  if (v3 + 32 * *(_DWORD *)(a1 + 312) <= v1) {
    return 1;
  }
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::RebuildRepository((void *)a1);
  int v4 = *(_DWORD *)(a1 + 312);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Rebuilt repository in determinize-lattice: repository shrank from ", 66);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" to ", 4);
    int v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" bytes (approximately)", 22);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v15);
  }
  if (v3 + 32 * v4 <= (int)((double)*(int *)(a1 + 84) * 0.8)) {
    return 1;
  }
  if (*(void *)(a1 + 200) != *(void *)(a1 + 208)) {
    (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Did not reach requested beam in determinize-lattice: ", 53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"size exceeds maximum ", 21);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" bytes; (repo,arcs,elems) = (",
      29);
    double v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
    uint64_t v11 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
    uint64_t v12 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"), after rebuilding, repo size was ", 35);
    int v13 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", effective beam was ", 21);
    uint64_t v14 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" vs. requested beam ", 20);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
  }
  return 0;
}

void sub_1B1E0CFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessTransition(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  double v8 = *(double *)(*(void *)(*(void *)a1 + 8 * a2) + 48);
  uint64_t v31 = 0;
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(a1, a4, (uint64_t)&v30, &v31);
  long long v28 = 0;
  int v9 = fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::InitialToStateId((void *)a1, a4, &v29, &v28, v8 + v30.f32[0] + v30.f32[1]);
  uint64_t v10 = fst::LatticeStringRepository<int>::Concatenate((uint64_t **)(a1 + 280), v31, v28);
  uint64_t v31 = v10;
  float32x2_t v11 = vadd_f32(v30, v29);
  float32x2_t v30 = v11;
  uint64_t v12 = *(void **)(*(void *)a1 + 8 * a2);
  unint64_t v13 = v12[4];
  unint64_t v14 = v12[5];
  if (v13 >= v14)
  {
    uint64_t v16 = v12[3];
    uint64_t v17 = (uint64_t)(v13 - v16) >> 5;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 59) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v14 - v16;
    if (v19 >> 4 > v18) {
      unint64_t v18 = v19 >> 4;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(v12 + 5), v20);
    double v22 = &v21[32 * v17];
    long long v24 = &v21[32 * v23];
    *(_DWORD *)double v22 = a3;
    *((void *)v22 + 1) = v10;
    *((_DWORD *)v22 + 4) = v9;
    *(float32x2_t *)(v22 + 20) = v11;
    char v15 = v22 + 32;
    uint64_t v26 = (char *)v12[3];
    uint64_t v25 = (char *)v12[4];
    if (v25 != v26)
    {
      do
      {
        long long v27 = *((_OWORD *)v25 - 2);
        *((_DWORD *)v22 - 4) = *((_DWORD *)v25 - 4);
        *((_OWORD *)v22 - 2) = v27;
        *(void *)(v22 - 12) = *(void *)(v25 - 12);
        v22 -= 32;
        v25 -= 32;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)v12[3];
    }
    _OWORD v12[3] = v22;
    void v12[4] = v15;
    v12[5] = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v13 = a3;
    *(void *)(v13 + 8) = v10;
    *(_DWORD *)(v13 + 16) = v9;
    char v15 = (char *)(v13 + 32);
    *(float32x2_t *)(v13 + 20) = v11;
  }
  void v12[4] = v15;
  ++*(_DWORD *)(a1 + 24);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ComputeBackwardWeight(uint64_t a1)
{
  int v2 = (void *)(a1 + 40);
  int v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160))(*(void *)(a1 + 32));
  std::vector<double>::resize((uint64_t)v2, v3);
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160))(*(void *)(a1 + 32));
  if (v4 < 1) {
    goto LABEL_20;
  }
  uint64_t v5 = v4;
  do
  {
    uint64_t v6 = v5--;
    uint64_t v7 = *(void *)(a1 + 40);
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 32))(v14);
    *(double *)(v7 + 8 * v5) = *(float *)v14 + *((float *)v14 + 1);
    uint64_t v8 = *(void *)(a1 + 32);
    unint64_t v16 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 136))(v8, v5, v14);
    while (1)
    {
      if (!v14[0])
      {
        if (v16 >= v14[2]) {
          goto LABEL_17;
        }
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)v14[0] + 24))(v14[0])) {
        break;
      }
      if (v14[0])
      {
        uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v14[0] + 32))();
        uint64_t v10 = v14[0];
        goto LABEL_10;
      }
LABEL_9:
      uint64_t v10 = 0;
      uint64_t v9 = v14[1] + 20 * v16;
LABEL_10:
      double v11 = *(float *)(v9 + 8) + *(float *)(v9 + 12) + *(double *)(*v2 + 8 * *(int *)(v9 + 16));
      if (v11 >= *(double *)(v7 + 8 * v5)) {
        double v11 = *(double *)(v7 + 8 * v5);
      }
      *(double *)(v7 + 8 * v5) = v11;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
      }
      else {
        ++v16;
      }
    }
    if (v14[0])
    {
      (*(void (**)(void))(*(void *)v14[0] + 8))();
      continue;
    }
LABEL_17:
    if (v15) {
      --*v15;
    }
  }
  while (v6 > 1);
LABEL_20:
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)) != -1)
  {
    double v12 = *(double *)(*(void *)(a1 + 40)
                    + 8 * (*(int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)));
    if (v12 == INFINITY && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Total weight of input lattice is zero.", 38);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    }
    *(double *)(a1 + 72) = v12 + *(double *)(a1 + 64);
  }
}

void sub_1B1E0D4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(uint64_t a1, uint64_t *a2)
{
  long long v65 = 0u;
  long long v66 = 0u;
  int v67 = 1065353216;
  int v4 = (char *)*a2;
  if (a2[1] != *a2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t v7 = &v4[v5];
      *(_DWORD *)long long v57 = *(_DWORD *)v7;
      *(_OWORD *)&v57[8] = *(_OWORD *)v7;
      std::string v58 = (_DWORD *)*((void *)v7 + 2);
      std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::pair<int const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>((uint64_t)&v65, (int *)v57, (uint64_t)v57);
      ++v6;
      int v4 = (char *)*a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  int v8 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32), 0x10000000, 0);
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v9 = *a2;
  if (*a2 == a2[1]) {
    goto LABEL_56;
  }
  int v10 = v8;
  do
  {
    std::priority_queue<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::push((uint64_t *)&v62, v9);
    v9 += 24;
  }
  while (v9 != a2[1]);
  double v11 = v62;
  double v12 = v63;
  uint64_t v13 = v63 - (unsigned char *)v62;
  if (v63 == (unsigned char *)v62) {
    goto LABEL_56;
  }
  int v54 = 0;
  char v14 = 0;
  do
  {
    long long v60 = *(_OWORD *)v11;
    uint64_t v61 = v11[2];
    if (v13 >= 25)
    {
      *(_OWORD *)long long v57 = *(_OWORD *)v11;
      int v16 = *((_DWORD *)v11 + 4);
      int v15 = *((_DWORD *)v11 + 5);
      uint64_t v17 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>((uint64_t)v11, (uint64_t)&v55, v13 / 0x18uLL);
      unint64_t v18 = v12 - 24;
      if (v12 - 24 == (unsigned char *)v17)
      {
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v57;
        *(_DWORD *)(v17 + 16) = v16;
        *(_DWORD *)(v17 + 20) = v15;
      }
      else
      {
        *(_OWORD *)uint64_t v17 = *v18;
        *(void *)(v17 + 16) = *((void *)v12 - 1);
        *unint64_t v18 = *(_OWORD *)v57;
        *((_DWORD *)v12 - 2) = v16;
        *((_DWORD *)v12 - 1) = v15;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>((uint64_t)v11, v17 + 24, (uint64_t)&v55, 0xAAAAAAAAAAAAAAABLL * ((v17 + 24 - (uint64_t)v11) >> 3));
      }
      double v12 = v63;
    }
    uint64_t v63 = v12 - 24;
    if (v14)
    {
      *(void *)long long v57 = &v60;
      uint64_t v19 = std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v65, (int *)&v60, (uint64_t)&std::piecewise_construct, (_DWORD **)v57);
      if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element::operator!=((uint64_t)(v19 + 3), (uint64_t)&v60))
      {
        char v14 = 1;
        goto LABEL_55;
      }
    }
    int v20 = *(_DWORD *)(a1 + 88);
    if (v20 >= 1)
    {
      if (v54 > v20)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Lattice determinization aborted since looped more than ", 55);
        long long v53 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" times during epsilon closure.\n", 31);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v57);
      }
      ++v54;
    }
    uint64_t v21 = *(void *)(a1 + 32);
    unint64_t v59 = 0;
    (*(void (**)(uint64_t, void, unsigned char *))(*(void *)v21 + 136))(v21, v60, v57);
    while (1)
    {
      if (!*(void *)v57)
      {
        if (v59 >= *(void *)&v57[16]) {
          goto LABEL_53;
        }
LABEL_26:
        uint64_t v24 = *(void *)&v57[8] + 20 * v59;
        goto LABEL_27;
      }
      char v22 = (*(uint64_t (**)(void))(**(void **)v57 + 24))(*(void *)v57);
      uint64_t v23 = *(void *)v57;
      if (v22) {
        goto LABEL_51;
      }
      if (!*(void *)v57) {
        goto LABEL_26;
      }
      uint64_t v24 = (*(uint64_t (**)(void))(**(void **)v57 + 32))();
LABEL_27:
      int v25 = *(_DWORD *)v24;
      if ((v10 & 0x10000000) != 0)
      {
        if (v25) {
          break;
        }
      }
      if (!v25)
      {
        LODWORD(v55) = 0;
        float v26 = *(float *)(v24 + 8);
        float v27 = *(float *)(v24 + 12);
        *(float *)&long long v55 = v26;
        *(float *)&uint64_t v70 = v27;
        int v69 = 2139095040;
        float v68 = INFINITY;
        if (v26 != INFINITY || *(float *)&v70 != v68)
        {
          LODWORD(v55) = *(_DWORD *)(v24 + 16);
          *(float *)&uint64_t v56 = *(float *)&v61 + v26;
          *((float *)&v56 + 1) = *((float *)&v61 + 1) + v27;
          long long v28 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v65, (int *)&v55);
          float32x2_t v29 = v28;
          if (v28)
          {
            float v30 = *((float *)v28 + 10);
            float v31 = v30 + *((float *)v28 + 11);
            if ((float)(*(float *)&v56 + *((float *)&v56 + 1)) < v31) {
              goto LABEL_36;
            }
            if ((float)(*(float *)&v56 + *((float *)&v56 + 1)) <= v31)
            {
              if (*(float *)&v56 < v30) {
                goto LABEL_36;
              }
              if (*(float *)&v56 <= v30)
              {
                int v37 = *(_DWORD *)(v24 + 4);
                long long v38 = (uint64_t *)*((void *)&v60 + 1);
                if (v37) {
                  long long v38 = (uint64_t *)fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 280), *((uint64_t *)&v60 + 1), v37);
                }
                *((void *)&v55 + 1) = v38;
                if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Compare(a1, (float *)&v56, v38, (float *)v29 + 10, (uint64_t *)v29[4]) == 1)
                {
LABEL_36:
                  int v32 = *(_DWORD *)(v24 + 4);
                  uint64_t v33 = *((void *)&v60 + 1);
                  if (v32) {
                    uint64_t v33 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 280), *((uint64_t *)&v60 + 1), v32);
                  }
                  *((void *)&v55 + 1) = v33;
                  v29[4] = v33;
                  v29[5] = v56;
                  std::priority_queue<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::push((uint64_t *)&v62, (uint64_t)&v55);
                  char v14 = 1;
                }
              }
            }
          }
          else
          {
            int v34 = *(_DWORD *)(v24 + 4);
            uint64_t v35 = *((void *)&v60 + 1);
            if (v34) {
              uint64_t v35 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 280), *((uint64_t *)&v60 + 1), v34);
            }
            *((void *)&v55 + 1) = v35;
            uint64_t v70 = &v55;
            BOOL v36 = std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v65, (int *)&v55, (uint64_t)&std::piecewise_construct, (_DWORD **)&v70);
            *(_OWORD *)(v36 + 3) = v55;
            v36[5] = v56;
            std::priority_queue<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::push((uint64_t *)&v62, (uint64_t)&v55);
          }
        }
      }
      if (*(void *)v57) {
        (*(void (**)(void))(**(void **)v57 + 40))(*(void *)v57);
      }
      else {
        ++v59;
      }
    }
    uint64_t v23 = *(void *)v57;
LABEL_51:
    if (v23)
    {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      goto LABEL_55;
    }
LABEL_53:
    if (v58) {
      --*v58;
    }
LABEL_55:
    double v11 = v62;
    double v12 = v63;
    uint64_t v13 = v63 - (unsigned char *)v62;
  }
  while (v63 != (unsigned char *)v62);
LABEL_56:
  a2[1] = *a2;
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::reserve((void **)a2, *((unint64_t *)&v66 + 1));
  uint64_t v39 = (void *)v66;
  if ((void)v66)
  {
    long long v40 = a2 + 2;
    long long v41 = (char *)a2[1];
    do
    {
      long long v42 = v39 + 3;
      if ((unint64_t)v41 >= *v40)
      {
        unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v41[-*a2] >> 3);
        unint64_t v44 = v43 + 1;
        if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((*v40 - *a2) >> 3) > v44) {
          unint64_t v44 = 0x5555555555555556 * ((*v40 - *a2) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((*v40 - *a2) >> 3) >= 0x555555555555555) {
          unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v45 = v44;
        }
        long long v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v45);
        long long v48 = &v46[24 * v43];
        *(_OWORD *)long long v48 = *v42;
        *((void *)v48 + 2) = v39[5];
        long long v50 = (char *)*a2;
        uint64_t v49 = (char *)a2[1];
        long long v51 = v48;
        if (v49 != (char *)*a2)
        {
          do
          {
            *(_OWORD *)(v51 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(v49 - 24);
            *((void *)v51 - 1) = *((void *)v49 - 1);
            v51 -= 24;
            v49 -= 24;
          }
          while (v49 != v50);
          uint64_t v49 = (char *)*a2;
        }
        long long v41 = v48 + 24;
        *a2 = (uint64_t)v51;
        a2[1] = (uint64_t)(v48 + 24);
        a2[2] = (uint64_t)&v46[24 * v47];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *(_OWORD *)long long v41 = *v42;
        *((void *)v41 + 2) = v39[5];
        v41 += 24;
      }
      a2[1] = (uint64_t)v41;
      uint64_t v39 = (void *)*v39;
    }
    while (v39);
  }
  if (v62)
  {
    uint64_t v63 = v62;
    operator delete(v62);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v65);
}

void sub_1B1E0DC30(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(void *)(v1 - 200) = v3;
    operator delete(v3);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1 - 176);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(uint64_t a1, unsigned int **a2)
{
  int v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = *a2;
  do
  {
    if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(a1, *v4))
    {
      *(_OWORD *)unint64_t v6 = *(_OWORD *)v4;
      *((void *)v6 + 2) = *((void *)v4 + 2);
      v6 += 6;
    }
    v4 += 6;
  }
  while (v4 != v5);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)*a2) >> 3);
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize((uint64_t)a2, v7);
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessFinal(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 8 * a2);
  int32x2_t v28 = vdup_n_s32(0x7F800000u);
  int v3 = *(float32x2_t **)v2;
  int v4 = *(float32x2_t **)(v2 + 8);
  if (*(float32x2_t **)v2 == v4) {
    return;
  }
  unint64_t v6 = 0;
  char v7 = 0;
  do
  {
    (*(void (**)(float32x2_t *__return_ptr))(**(void **)(a1 + 32) + 32))(&v26);
    float32x2_t v8 = vadd_f32(v3[2], v26);
    float32x2_t v27 = v8;
    uint64_t v9 = (uint64_t *)v3[1];
    float v31 = v8.f32[1];
    v26.i32[0] = v8.i32[0];
    int v30 = 2139095040;
    float v29 = INFINITY;
    if (v8.f32[0] != INFINITY || v31 != v29)
    {
      if ((v7 & 1) == 0) {
        goto LABEL_8;
      }
      if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Compare(a1, (float *)&v27, v9, (float *)&v28, v6) == 1)
      {
        float32x2_t v8 = v27;
LABEL_8:
        int32x2_t v28 = (int32x2_t)v8;
        char v7 = 1;
        unint64_t v6 = v9;
        goto LABEL_10;
      }
      char v7 = 1;
    }
LABEL_10:
    v3 += 3;
  }
  while (v3 != v4);
  if (v7)
  {
    int32x2_t v10 = v28;
    if (*(double *)(v2 + 48) + *(float *)v28.i32 + *(float *)&v28.i32[1] <= *(double *)(a1 + 72))
    {
      unint64_t v11 = *(void *)(v2 + 40);
      unint64_t v12 = *(void *)(v2 + 32);
      if (v12 >= v11)
      {
        uint64_t v14 = *(void *)(v2 + 24);
        uint64_t v15 = (uint64_t)(v12 - v14) >> 5;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59) {
          std::vector<int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v11 - v14;
        if (v17 >> 4 > v16) {
          unint64_t v16 = v17 >> 4;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v2 + 40, v18);
        int v20 = &v19[32 * v15];
        char v22 = &v19[32 * v21];
        *(_DWORD *)int v20 = 0;
        *((void *)v20 + 1) = v6;
        *((_DWORD *)v20 + 4) = -1;
        *(int32x2_t *)(v20 + 20) = v10;
        uint64_t v13 = v20 + 32;
        uint64_t v24 = *(char **)(v2 + 24);
        uint64_t v23 = *(char **)(v2 + 32);
        if (v23 != v24)
        {
          do
          {
            long long v25 = *((_OWORD *)v23 - 2);
            *((_DWORD *)v20 - 4) = *((_DWORD *)v23 - 4);
            *((_OWORD *)v20 - 2) = v25;
            *(void *)(v20 - 12) = *(void *)(v23 - 12);
            v20 -= 32;
            v23 -= 32;
          }
          while (v23 != v24);
          uint64_t v23 = *(char **)(v2 + 24);
        }
        *(void *)(v2 + ++*(_DWORD *)(result + 24) = v20;
        *(void *)(v2 + 32) = v13;
        *(void *)(v2 + 40) = v22;
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v12 = 0;
        *(void *)(v12 + 8) = v6;
        *(_DWORD *)(v12 + 16) = -1;
        uint64_t v13 = (char *)(v12 + 32);
        *(int32x2_t *)(v12 + 20) = v10;
      }
      *(void *)(v2 + 32) = v13;
      ++*(_DWORD *)(a1 + 24);
    }
  }
}

void fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::ProcessTransitions(uint64_t a1, int a2)
{
  int v3 = (uint64_t *)(a1 + 232);
  int v4 = *(float32x2_t ***)(*(void *)a1 + 8 * a2);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  if (*v4 == v6) {
    goto LABEL_26;
  }
  do
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = v5->u32[0];
    unint64_t v23 = 0;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 136))(v7, v8, v21);
    while (1)
    {
      if (!v21[0])
      {
        if (v23 >= v21[2]) {
          goto LABEL_23;
        }
LABEL_8:
        int32x2_t v10 = (float32x2_t *)(v21[1] + 20 * v23);
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void))(*(void *)v21[0] + 24))(v21[0])) {
        break;
      }
      if (!v21[0]) {
        goto LABEL_8;
      }
      int32x2_t v10 = (float32x2_t *)(*(uint64_t (**)(void))(*(void *)v21[0] + 32))();
LABEL_9:
      if (v10->i32[0])
      {
        float v24 = 0.0;
        float v24 = v10[1].f32[0];
        float v29 = 0.0;
        float v29 = v10[1].f32[1];
        int v28 = 2139095040;
        float v27 = INFINITY;
        if (v24 != INFINITY || (v9.n128_f32[0] = v29, v29 != v27))
        {
          long long v25 = 0uLL;
          float32x2_t v26 = 0;
          __int32 v11 = v10[2].i32[0];
          float v24 = v10->f32[0];
          LODWORD(v25) = v11;
          float32x2_t v26 = vadd_f32(v5[2], v10[1]);
          int v12 = v10->i32[1];
          uint64_t v13 = (uint64_t)v5[1];
          if (v12) {
            uint64_t v13 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 280), v13, v12);
          }
          *((void *)&v25 + 1) = v13;
          unint64_t v14 = *(void *)(a1 + 240);
          if (v14 >= *(void *)(a1 + 248))
          {
            uint64_t v15 = std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__push_back_slow_path<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>(v3, (uint64_t)&v24);
          }
          else
          {
            *(float *)unint64_t v14 = v24;
            v9.n128_u64[1] = *((void *)&v25 + 1);
            *(_OWORD *)(v14 + 8) = v25;
            v9.n128_u64[0] = (unint64_t)v26;
            *(float32x2_t *)(v14 + ++*(_DWORD *)(result + 24) = v26;
            uint64_t v15 = v14 + 32;
          }
          *(void *)(a1 + 240) = v15;
        }
      }
      if (v21[0]) {
        (*(void (**)(void, __n128))(*(void *)v21[0] + 40))(v21[0], v9);
      }
      else {
        ++v23;
      }
    }
    if (v21[0])
    {
      (*(void (**)(void))(*(void *)v21[0] + 8))();
      goto LABEL_25;
    }
LABEL_23:
    if (v22) {
      --*v22;
    }
LABEL_25:
    v5 += 3;
  }
  while (v5 != v6);
LABEL_26:
  unint64_t v16 = *(int **)(a1 + 232);
  uint64_t v17 = *(int **)(a1 + 240);
  unint64_t v18 = 126 - 2 * __clz(((char *)v17 - (char *)v16) >> 5);
  if (v17 == v16) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,false>(v16, v17, (uint64_t)v21, v19, 1);
  uint64_t v20 = *(void *)(a1 + 232);
  if (v20 != *(void *)(a1 + 240)) {
    operator new();
  }
  *(void *)(a1 + 240) = v20;
}

void sub_1B1E0E630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void *std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B1E0E71C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::priority_queue<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::push(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v12);
    unint64_t v14 = &v13[24 * v9];
    unint64_t v16 = &v13[24 * v15];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    uint64_t v8 = (uint64_t)(v14 + 24);
    unint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != (char *)*a1)
    {
      do
      {
        *(_OWORD *)(v14 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(v17 - 24);
        *((void *)v14 - 1) = *((void *)v17 - 1);
        v14 -= 24;
        v17 -= 24;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = v8;
    a1[2] = (uint64_t)v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    uint64_t v8 = v7 + 24;
  }
  a1[1] = v8;
  return std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>(*a1, v8, (uint64_t)&v20, 0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3));
}

BOOL fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2
      || *(void *)(a1 + 8) != *(void *)(a2 + 8)
      || *(float *)(a1 + 16) != *(float *)(a2 + 16)
      || *(float *)(a1 + 20) != *(float *)(a2 + 20);
}

uint64_t fst::LatticeStringRepository<int>::Successor(uint64_t **a1, uint64_t a2, int a3)
{
  int v3 = *a1;
  *int v3 = a2;
  *((_DWORD *)v3 + 2) = a3;
  uint64_t v4 = std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::__emplace_unique_key_args<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::Entry const* const&>((uint64_t)(a1 + 1), a1, a1);
  if (v5) {
    operator new();
  }
  return v4[2];
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Compare(int a1, float *a2, uint64_t *a3, float *a4, uint64_t *a5)
{
  float v5 = *a2;
  float v6 = *a2 + a2[1];
  float v7 = *a4;
  float v8 = *a4 + a4[1];
  if (v6 < v8) {
    return 1;
  }
  if (v6 > v8) {
    return 0xFFFFFFFFLL;
  }
  if (v5 < v7) {
    return 1;
  }
  if (v5 > v7) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = (uint64_t)a5;
  if (a3 == a5) {
    return 0;
  }
  memset(&__p, 0, sizeof(__p));
  memset(&v18, 0, sizeof(v18));
  int v10 = a1 + 280;
  fst::LatticeStringRepository<int>::ConvertToVector(a1 + 280, a3, &__p);
  fst::LatticeStringRepository<int>::ConvertToVector(v10, (uint64_t *)v9, &v18);
  std::vector<std::string>::pointer begin = __p.__begin_;
  unint64_t v12 = (unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2;
  unint64_t v13 = (unint64_t)((char *)v18.__end_ - (char *)v18.__begin_) >> 2;
  if ((int)v12 <= (int)v13)
  {
    if ((int)v12 >= (int)v13)
    {
      if ((int)v12 < 1) {
        goto LABEL_20;
      }
      signed int v15 = *__p.__begin_;
      signed int v16 = *v18.__begin_;
      if ((signed int)*__p.__begin_ < (signed int)*v18.__begin_) {
        goto LABEL_8;
      }
      uint64_t v17 = 1;
      while (v15 <= v16)
      {
        if (((unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2) != v17)
        {
          signed int v15 = __p.__begin_[v17];
          signed int v16 = v18.__begin_[v17++];
          uint64_t v9 = 0xFFFFFFFFLL;
          if (v15 >= v16) {
            continue;
          }
        }
        goto LABEL_20;
      }
    }
    uint64_t v9 = 1;
    goto LABEL_20;
  }
LABEL_8:
  uint64_t v9 = 0xFFFFFFFFLL;
LABEL_20:
  if (v18.__begin_)
  {
    v18.__end_ = v18.__begin_;
    operator delete(v18.__begin_);
    std::vector<std::string>::pointer begin = __p.__begin_;
  }
  if (begin)
  {
    __p.__end_ = begin;
    operator delete(begin);
  }
  return v9;
}

void sub_1B1E0EABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    float v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v3, a2);
    float v7 = &v6[v5];
    uint64_t v9 = &v6[24 * v8];
    unint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *(_OWORD *)(v12 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::pair<int const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  int v10 = (char *)operator new(0x30uLL);
  *(void *)int v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a3 + 8);
  *((void *)v10 + 5) = *(void *)(a3 + 24);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *(void *)int v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  *(void *)int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*(void *)v10)
  {
    unint64_t v20 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B1E0EDD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = result + 24 * (v4 >> 1);
    uint64_t v7 = a2 - 24;
    int v8 = *(_DWORD *)(a2 - 24);
    if (*(_DWORD *)v6 > v8)
    {
      uint64_t v11 = *(void *)(a2 - 20);
      int v12 = *(_DWORD *)(a2 - 12);
      uint64_t v9 = *(void *)(a2 - 8);
      do
      {
        uint64_t v10 = v7;
        uint64_t v7 = v6;
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v6;
        *(void *)(v10 + 16) = *(void *)(v6 + 16);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = result + 24 * v5;
      }
      while (*(_DWORD *)v6 > v8);
      *(_DWORD *)uint64_t v7 = v8;
      *(void *)(v7 + 4) = v11;
      *(_DWORD *)(v7 + 12) = v12;
      *(void *)(v7 + 16) = v9;
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> &,std::__wrap_iter<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1 + 24 * v3 + 24;
    uint64_t v7 = (2 * v3) | 1;
    uint64_t v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      int v9 = *(_DWORD *)v6;
      int v10 = *(_DWORD *)(v6 + 24);
      if (*(_DWORD *)v6 > v10) {
        v6 += 24;
      }
      if (v9 > v10) {
        uint64_t v7 = v8;
      }
    }
    *(_OWORD *)a1 = *(_OWORD *)v6;
    *(void *)(a1 + 16) = *(void *)(v6 + 16);
    a1 = v6;
    uint64_t v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

void *std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *unint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1B1E0F14C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::EntryKey,fst::LatticeStringRepository<int>::EntryEqual,std::allocator<fst::LatticeStringRepository<int>::Entry const*>>::__emplace_unique_key_args<fst::LatticeStringRepository<int>::Entry const*,fst::LatticeStringRepository<int>::Entry const* const&>(uint64_t a1, uint64_t **a2, void *a3)
{
  uint64_t v6 = *((int *)*a2 + 2);
  uint64_t v7 = **a2;
  unint64_t v8 = v6 + 49109 * v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v6 + 49109 * v7;
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          uint64_t v14 = i[2];
          if (*(void *)v14 == v7 && *(_DWORD *)(v14 + 8) == v6) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    void *i = *v22;
LABEL_39:
    *char v22 = i;
    goto LABEL_40;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    char v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B1E0F388(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void fst::LatticeStringRepository<int>::ConvertToVector(int a1, uint64_t *a2, std::vector<unsigned int> *this)
{
  if (a2)
  {
    unint64_t v4 = a2;
    std::vector<unsigned int>::size_type v5 = 0;
    uint64_t v6 = v4;
    do
    {
      ++v5;
      uint64_t v6 = (void *)*v6;
    }
    while (v6);
    std::vector<int>::resize(this, v5);
    std::vector<unsigned int>::pointer v7 = this->__end_ - 1;
    do
    {
      *v7-- = *((_DWORD *)v4 + 2);
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    std::vector<int>::resize(this, 0);
  }
}

uint64_t fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)(a1 + 256);
  uint64_t v5 = *(void *)(a1 + 256);
  unint64_t v6 = *(void *)(a1 + 264) - v5;
  uint64_t v7 = a2;
  if (v6 <= a2)
  {
    __x[0] = 0;
    std::vector<char>::__append((std::vector<char> *)(a1 + 256), (a2 + 1) - v6, __x);
    uint64_t v5 = *v4;
  }
  int v8 = *(unsigned __int8 *)(v5 + v7);
  if (v8 == 1) {
    return 0;
  }
  if (v8 == 2) {
    return 1;
  }
  *(unsigned char *)(v5 + v7) = 1;
  (*(void (**)(std::vector<char>::value_type *__return_ptr))(**(void **)(a1 + 32) + 32))(__x);
  float v23 = *(float *)__x;
  float v22 = *(float *)&__x[4];
  int v21 = 2139095040;
  float v20 = INFINITY;
  v9.n128_u32[0] = *(_DWORD *)__x;
  if (*(float *)__x != INFINITY || (v9.n128_f32[0] = v22, v22 != v20)) {
    *(unsigned char *)(*v4 + v7) = 2;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v19 = 0;
  (*(void (**)(uint64_t, uint64_t, std::vector<char>::value_type *, __n128))(*(void *)v10 + 136))(v10, a2, __x, v9);
  while (*(void *)__x)
  {
    if ((*(uint64_t (**)(void))(**(void **)__x + 24))(*(void *)__x)) {
      goto LABEL_23;
    }
    if (!*(void *)__x) {
      goto LABEL_14;
    }
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)__x + 32))(*(void *)__x);
LABEL_15:
    if (*(_DWORD *)v12)
    {
      float v23 = 0.0;
      float v23 = *(float *)(v12 + 8);
      float v22 = 0.0;
      float v22 = *(float *)(v12 + 12);
      int v21 = 2139095040;
      float v20 = INFINITY;
      v11.n128_f32[0] = v23;
      if (v23 != INFINITY || (v11.n128_f32[0] = v22, v22 != v20))
      {
        char v14 = 0;
        *(unsigned char *)(*v4 + v7) = 2;
        goto LABEL_24;
      }
    }
    if (*(void *)__x) {
      (*(void (**)(void))(**(void **)__x + 40))(*(void *)__x);
    }
    else {
      ++v19;
    }
  }
  if (v19 < v17)
  {
LABEL_14:
    uint64_t v12 = v16 + 20 * v19;
    goto LABEL_15;
  }
LABEL_23:
  char v14 = 1;
LABEL_24:
  if (*(void *)__x)
  {
    (*(void (**)(void, __n128))(**(void **)__x + 8))(*(void *)__x, v11);
  }
  else if (v18)
  {
    --*v18;
  }
  if (v14) {
    return fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(a1, a2);
  }
  return 1;
}

void sub_1B1E0F6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    char v14 = &v12[24 * v8];
    float v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    unint64_t v17 = &v14[v16];
    unint64_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - ++*(_DWORD *)(result + 24) = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}